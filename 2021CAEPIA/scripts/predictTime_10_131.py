
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,72,63,66,64,59,74,73,67,61],
[59,0,66,58,58,54,62,64,64,59],
[68,65,0,62,59,53,61,63,61,66],
[65,73,69,0,67,60,66,77,69,62],
[67,73,72,64,0,61,69,76,71,65],
[72,77,78,71,70,0,65,75,71,79],
[57,69,70,65,62,66,0,69,67,71],
[58,67,68,54,55,56,62,0,64,66],
[64,67,70,62,60,60,64,67,0,65],
[70,72,65,69,66,52,60,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,67,53,62,60,51,67,63,59],
[68,0,64,58,62,58,50,65,60,63],
[64,67,0,46,59,54,45,57,51,57],
[78,73,85,0,65,62,60,67,75,69],
[69,69,72,66,0,66,65,70,51,62],
[71,73,77,69,65,0,64,69,68,54],
[80,81,86,71,66,67,0,72,63,70],
[64,66,74,64,61,62,59,0,74,74],
[68,71,80,56,80,63,68,57,0,74],
[72,68,74,62,69,77,61,57,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,73,64,70,70,69,71,73,79],
[55,0,62,52,52,62,53,67,58,59],
[58,69,0,66,60,63,62,65,76,77],
[67,79,65,0,65,60,69,76,64,74],
[61,79,71,66,0,63,65,82,79,72],
[61,69,68,71,68,0,64,62,72,74],
[62,78,69,62,66,67,0,67,80,80],
[60,64,66,55,49,69,64,0,60,70],
[58,73,55,67,52,59,51,71,0,64],
[52,72,54,57,59,57,51,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,72,82,70,76,61,61,60],
[63,0,67,74,65,57,61,69,62,73],
[59,64,0,85,88,55,79,67,70,64],
[59,57,46,0,78,63,65,54,47,50],
[49,66,43,53,0,65,68,52,63,54],
[61,74,76,68,66,0,81,61,53,59],
[55,70,52,66,63,50,0,46,50,51],
[70,62,64,77,79,70,85,0,54,70],
[70,69,61,84,68,78,81,77,0,78],
[71,58,67,81,77,72,80,61,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,49,46,45,49,97,35,69,42],
[40,0,47,61,41,31,49,60,67,30],
[82,84,0,83,67,49,87,78,98,38],
[85,70,48,0,60,36,103,81,83,52],
[86,90,64,71,0,75,105,105,75,75],
[82,100,82,95,56,0,105,76,95,51],
[34,82,44,28,26,26,0,42,49,39],
[96,71,53,50,26,55,89,0,91,32],
[62,64,33,48,56,36,82,40,0,31],
[89,101,93,79,56,80,92,99,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,54,61,67,67,69,56,68,62],
[76,0,66,61,64,69,67,64,72,68],
[77,65,0,71,73,65,58,56,62,65],
[70,70,60,0,77,72,67,69,70,72],
[64,67,58,54,0,64,65,54,69,63],
[64,62,66,59,67,0,67,51,66,66],
[62,64,73,64,66,64,0,56,71,67],
[75,67,75,62,77,80,75,0,64,70],
[63,59,69,61,62,65,60,67,0,73],
[69,63,66,59,68,65,64,61,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,60,51,57,39,60,38,67,68],
[79,0,40,57,37,53,72,43,70,84],
[71,91,0,74,65,70,71,55,86,75],
[80,74,57,0,48,68,41,51,80,79],
[74,94,66,83,0,75,85,60,73,69],
[92,78,61,63,56,0,58,73,83,73],
[71,59,60,90,46,73,0,36,100,70],
[93,88,76,80,71,58,95,0,103,100],
[64,61,45,51,58,48,31,28,0,55],
[63,47,56,52,62,58,61,31,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,60,65,60,59,70,63,74],
[61,0,51,62,52,46,62,73,66,55],
[67,80,0,78,63,66,71,87,69,68],
[71,69,53,0,60,61,67,82,57,72],
[66,79,68,71,0,73,64,76,63,54],
[71,85,65,70,58,0,64,77,61,70],
[72,69,60,64,67,67,0,79,65,66],
[61,58,44,49,55,54,52,0,54,50],
[68,65,62,74,68,70,66,77,0,66],
[57,76,63,59,77,61,65,81,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,53,48,61,66,48,58,58,66],
[73,0,56,49,66,59,59,68,71,67],
[78,75,0,49,78,82,59,81,67,75],
[83,82,82,0,81,75,75,83,83,63],
[70,65,53,50,0,61,53,61,81,57],
[65,72,49,56,70,0,54,66,79,85],
[83,72,72,56,78,77,0,73,77,80],
[73,63,50,48,70,65,58,0,87,66],
[73,60,64,48,50,52,54,44,0,68],
[65,64,56,68,74,46,51,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,67,60,68,68,51,86,63,71],
[53,0,49,44,52,60,41,46,40,58],
[64,82,0,56,73,62,52,73,56,62],
[71,87,75,0,72,71,59,79,71,83],
[63,79,58,59,0,67,58,67,57,83],
[63,71,69,60,64,0,60,67,56,70],
[80,90,79,72,73,71,0,88,65,84],
[45,85,58,52,64,64,43,0,60,77],
[68,91,75,60,74,75,66,71,0,79],
[60,73,69,48,48,61,47,54,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,59,62,65,65,54,56,58,69],
[55,0,57,63,60,58,52,62,58,57],
[72,74,0,71,72,63,63,62,64,66],
[69,68,60,0,74,66,64,67,62,72],
[66,71,59,57,0,65,58,57,47,69],
[66,73,68,65,66,0,62,58,70,69],
[77,79,68,67,73,69,0,59,69,66],
[75,69,69,64,74,73,72,0,62,69],
[73,73,67,69,84,61,62,69,0,74],
[62,74,65,59,62,62,65,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,52,67,53,86,57,72,72],
[64,0,79,59,62,68,85,49,75,79],
[65,52,0,59,41,45,52,50,62,58],
[79,72,72,0,56,73,67,52,68,87],
[64,69,90,75,0,69,74,74,83,83],
[78,63,86,58,62,0,68,57,74,63],
[45,46,79,64,57,63,0,61,95,69],
[74,82,81,79,57,74,70,0,77,67],
[59,56,69,63,48,57,36,54,0,67],
[59,52,73,44,48,68,62,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,78,71,60,77,80,102,88,93],
[44,0,66,55,65,51,61,89,71,66],
[53,65,0,36,40,57,63,72,73,66],
[60,76,95,0,64,63,78,99,88,79],
[71,66,91,67,0,67,67,73,72,60],
[54,80,74,68,64,0,72,91,61,85],
[51,70,68,53,64,59,0,108,69,112],
[29,42,59,32,58,40,23,0,65,33],
[43,60,58,43,59,70,62,66,0,74],
[38,65,65,52,71,46,19,98,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,69,54,60,74,68,80,56,70],
[75,0,66,70,66,63,68,75,68,64],
[62,65,0,62,72,65,61,77,60,70],
[77,61,69,0,71,67,76,86,74,72],
[71,65,59,60,0,70,62,79,64,65],
[57,68,66,64,61,0,62,60,57,68],
[63,63,70,55,69,69,0,77,62,66],
[51,56,54,45,52,71,54,0,49,55],
[75,63,71,57,67,74,69,82,0,74],
[61,67,61,59,66,63,65,76,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,62,60,71,58,54,66,72,57],
[73,0,63,73,74,67,63,78,74,77],
[69,68,0,60,63,69,52,68,65,64],
[71,58,71,0,67,59,68,83,72,70],
[60,57,68,64,0,56,55,67,68,63],
[73,64,62,72,75,0,60,79,78,69],
[77,68,79,63,76,71,0,88,82,71],
[65,53,63,48,64,52,43,0,62,61],
[59,57,66,59,63,53,49,69,0,64],
[74,54,67,61,68,62,60,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,74,78,75,76,67,77,67,65],
[58,0,66,61,63,60,52,68,68,60],
[57,65,0,70,59,64,61,65,51,59],
[53,70,61,0,66,55,65,74,56,51],
[56,68,72,65,0,69,59,72,61,58],
[55,71,67,76,62,0,60,72,62,58],
[64,79,70,66,72,71,0,76,69,56],
[54,63,66,57,59,59,55,0,57,60],
[64,63,80,75,70,69,62,74,0,68],
[66,71,72,80,73,73,75,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,61,70,68,66,62,73,83,72],
[56,0,66,66,58,71,56,65,70,63],
[70,65,0,71,66,69,59,77,77,72],
[61,65,60,0,72,62,70,68,76,65],
[63,73,65,59,0,69,72,72,81,64],
[65,60,62,69,62,0,72,76,70,64],
[69,75,72,61,59,59,0,70,79,64],
[58,66,54,63,59,55,61,0,69,53],
[48,61,54,55,50,61,52,62,0,56],
[59,68,59,66,67,67,67,78,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,74,68,68,69,75,61,66,66],
[66,0,63,70,63,72,70,64,63,70],
[57,68,0,64,60,51,61,56,57,62],
[63,61,67,0,68,62,77,72,67,70],
[63,68,71,63,0,67,72,66,67,61],
[62,59,80,69,64,0,69,62,66,64],
[56,61,70,54,59,62,0,60,65,62],
[70,67,75,59,65,69,71,0,67,72],
[65,68,74,64,64,65,66,64,0,73],
[65,61,69,61,70,67,69,59,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,60,67,54,65,67,66,54],
[68,0,68,63,64,56,69,60,68,57],
[60,63,0,56,72,55,70,54,66,57],
[71,68,75,0,73,57,67,55,64,57],
[64,67,59,58,0,50,60,53,56,56],
[77,75,76,74,81,0,80,60,73,71],
[66,62,61,64,71,51,0,48,68,57],
[64,71,77,76,78,71,83,0,65,59],
[65,63,65,67,75,58,63,66,0,60],
[77,74,74,74,75,60,74,72,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,64,57,61,55,50,62,67],
[77,0,64,68,60,59,70,58,75,82],
[76,67,0,72,63,71,66,60,67,80],
[67,63,59,0,52,65,56,53,70,65],
[74,71,68,79,0,64,67,57,79,80],
[70,72,60,66,67,0,65,54,73,77],
[76,61,65,75,64,66,0,61,73,77],
[81,73,71,78,74,77,70,0,64,79],
[69,56,64,61,52,58,58,67,0,63],
[64,49,51,66,51,54,54,52,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,15,22,43,35,87,50,28,21,28],
[116,0,82,88,80,116,80,59,109,116],
[109,49,0,49,51,101,57,56,78,78],
[88,43,82,0,51,116,95,72,94,101],
[96,51,80,80,0,96,87,36,65,65],
[44,15,30,15,35,0,72,28,36,21],
[81,51,74,36,44,59,0,59,52,59],
[103,72,75,59,95,103,72,0,88,88],
[110,22,53,37,66,95,79,43,0,67],
[103,15,53,30,66,110,72,43,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,54,49,59,61,59,57,60,53],
[63,0,70,69,73,68,63,72,70,58],
[77,61,0,68,68,70,65,59,62,53],
[82,62,63,0,71,64,66,68,63,59],
[72,58,63,60,0,57,56,48,59,64],
[70,63,61,67,74,0,64,78,75,67],
[72,68,66,65,75,67,0,67,70,62],
[74,59,72,63,83,53,64,0,51,51],
[71,61,69,68,72,56,61,80,0,57],
[78,73,78,72,67,64,69,80,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,72,68,56,74,66,59,62,69],
[71,0,67,67,62,72,71,68,64,73],
[59,64,0,61,62,65,73,59,63,69],
[63,64,70,0,54,70,71,69,61,68],
[75,69,69,77,0,71,73,64,67,75],
[57,59,66,61,60,0,69,57,60,57],
[65,60,58,60,58,62,0,52,52,57],
[72,63,72,62,67,74,79,0,59,63],
[69,67,68,70,64,71,79,72,0,70],
[62,58,62,63,56,74,74,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,60,67,54,69,71,71,73,67],
[62,0,63,62,57,65,73,67,71,58],
[71,68,0,61,60,68,65,61,71,62],
[64,69,70,0,57,70,70,60,66,65],
[77,74,71,74,0,65,68,70,73,76],
[62,66,63,61,66,0,68,65,68,73],
[60,58,66,61,63,63,0,65,74,69],
[60,64,70,71,61,66,66,0,71,69],
[58,60,60,65,58,63,57,60,0,64],
[64,73,69,66,55,58,62,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,83,72,61,57,73,51,56,80],
[55,0,61,63,51,60,77,72,60,75],
[48,70,0,43,45,53,63,48,40,70],
[59,68,88,0,70,78,82,66,64,81],
[70,80,86,61,0,59,66,69,54,79],
[74,71,78,53,72,0,84,59,72,71],
[58,54,68,49,65,47,0,64,50,76],
[80,59,83,65,62,72,67,0,37,65],
[75,71,91,67,77,59,81,94,0,91],
[51,56,61,50,52,60,55,66,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,4,77,3,4,50,58,72,131],
[60,0,12,63,63,12,55,109,109,106],
[127,119,0,73,54,25,46,105,119,127],
[54,68,58,0,49,50,46,54,71,54],
[128,68,77,82,0,77,47,55,77,128],
[127,119,106,81,54,0,97,105,119,127],
[81,76,85,85,84,34,0,109,84,127],
[73,22,26,77,76,26,22,0,76,81],
[59,22,12,60,54,12,47,55,0,106],
[0,25,4,77,3,4,4,50,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,53,44,62,56,57,52,56,62],
[96,0,78,64,86,63,75,55,66,71],
[78,53,0,49,74,51,68,53,65,77],
[87,67,82,0,89,77,83,63,64,71],
[69,45,57,42,0,47,50,49,43,59],
[75,68,80,54,84,0,79,53,69,70],
[74,56,63,48,81,52,0,59,56,65],
[79,76,78,68,82,78,72,0,58,69],
[75,65,66,67,88,62,75,73,0,61],
[69,60,54,60,72,61,66,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,74,58,64,75,65,68,77],
[62,0,63,64,66,65,66,68,66,72],
[60,68,0,71,58,64,72,66,61,73],
[57,67,60,0,54,69,69,67,61,72],
[73,65,73,77,0,66,74,75,67,74],
[67,66,67,62,65,0,72,62,71,71],
[56,65,59,62,57,59,0,64,65,72],
[66,63,65,64,56,69,67,0,59,72],
[63,65,70,70,64,60,66,72,0,70],
[54,59,58,59,57,60,59,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,81,62,62,68,61,62,70],
[65,0,71,69,60,56,61,63,53,63],
[69,60,0,67,64,60,63,63,51,72],
[50,62,64,0,63,61,70,66,59,79],
[69,71,67,68,0,65,67,78,58,69],
[69,75,71,70,66,0,65,75,66,75],
[63,70,68,61,64,66,0,68,60,65],
[70,68,68,65,53,56,63,0,55,59],
[69,78,80,72,73,65,71,76,0,73],
[61,68,59,52,62,56,66,72,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,55,64,65,57,66,63,70,64],
[69,0,68,64,72,77,65,66,66,66],
[76,63,0,76,79,74,80,74,87,76],
[67,67,55,0,65,79,75,56,66,68],
[66,59,52,66,0,67,70,62,70,67],
[74,54,57,52,64,0,69,65,59,64],
[65,66,51,56,61,62,0,52,61,58],
[68,65,57,75,69,66,79,0,64,72],
[61,65,44,65,61,72,70,67,0,64],
[67,65,55,63,64,67,73,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,69,78,70,65,69,66,71],
[69,0,66,69,72,79,68,63,71,68],
[70,65,0,66,83,76,60,63,75,60],
[62,62,65,0,82,80,78,65,72,78],
[53,59,48,49,0,56,62,58,62,56],
[61,52,55,51,75,0,62,62,63,58],
[66,63,71,53,69,69,0,64,70,61],
[62,68,68,66,73,69,67,0,74,66],
[65,60,56,59,69,68,61,57,0,74],
[60,63,71,53,75,73,70,65,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,50,74,54,40,51,78,75,42],
[54,0,66,45,54,34,50,47,66,49],
[81,65,0,62,68,41,60,62,67,58],
[57,86,69,0,64,51,77,64,84,59],
[77,77,63,67,0,41,59,54,79,47],
[91,97,90,80,90,0,65,73,83,79],
[80,81,71,54,72,66,0,78,76,52],
[53,84,69,67,77,58,53,0,76,61],
[56,65,64,47,52,48,55,55,0,47],
[89,82,73,72,84,52,79,70,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,56,68,62,57,64,66,62,62],
[64,0,72,83,70,61,60,75,74,66],
[75,59,0,69,64,64,64,77,63,78],
[63,48,62,0,68,51,57,66,62,71],
[69,61,67,63,0,63,64,69,62,66],
[74,70,67,80,68,0,65,81,73,70],
[67,71,67,74,67,66,0,68,63,60],
[65,56,54,65,62,50,63,0,59,64],
[69,57,68,69,69,58,68,72,0,66],
[69,65,53,60,65,61,71,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,67,67,72,82,69,65,73,57],
[68,0,78,66,68,74,63,51,72,70],
[64,53,0,58,68,69,56,63,57,73],
[64,65,73,0,70,71,61,52,70,57],
[59,63,63,61,0,71,69,68,62,69],
[49,57,62,60,60,0,62,60,73,62],
[62,68,75,70,62,69,0,53,63,58],
[66,80,68,79,63,71,78,0,77,73],
[58,59,74,61,69,58,68,54,0,62],
[74,61,58,74,62,69,73,58,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,67,60,67,68,59,68,61],
[67,0,68,65,58,61,71,57,68,53],
[64,63,0,57,60,66,60,56,60,62],
[64,66,74,0,54,54,66,65,69,55],
[71,73,71,77,0,66,63,61,69,65],
[64,70,65,77,65,0,65,67,68,67],
[63,60,71,65,68,66,0,63,66,61],
[72,74,75,66,70,64,68,0,69,63],
[63,63,71,62,62,63,65,62,0,52],
[70,78,69,76,66,64,70,68,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,63,66,65,73,66,65,58,56],
[67,0,58,64,67,68,68,68,66,61],
[68,73,0,68,65,67,66,69,68,60],
[65,67,63,0,67,74,75,68,68,66],
[66,64,66,64,0,81,68,60,71,66],
[58,63,64,57,50,0,59,59,56,62],
[65,63,65,56,63,72,0,60,58,56],
[66,63,62,63,71,72,71,0,70,64],
[73,65,63,63,60,75,73,61,0,66],
[75,70,71,65,65,69,75,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,57,68,55,67,78,51,65,70],
[78,0,55,53,82,60,76,64,74,60],
[74,76,0,69,68,68,97,77,73,65],
[63,78,62,0,71,51,78,69,61,62],
[76,49,63,60,0,50,98,63,61,66],
[64,71,63,80,81,0,98,55,68,64],
[53,55,34,53,33,33,0,42,43,50],
[80,67,54,62,68,76,89,0,64,72],
[66,57,58,70,70,63,88,67,0,69],
[61,71,66,69,65,67,81,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,74,68,54,68,68,54,65,30],
[96,0,93,84,48,93,106,71,68,78],
[57,38,0,49,58,72,63,77,40,58],
[63,47,82,0,50,85,69,72,52,59],
[77,83,73,81,0,101,99,86,62,42],
[63,38,59,46,30,0,54,41,30,39],
[63,25,68,62,32,77,0,46,57,44],
[77,60,54,59,45,90,85,0,70,46],
[66,63,91,79,69,101,74,61,0,45],
[101,53,73,72,89,92,87,85,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,70,56,58,54,58,55,64,69],
[76,0,55,54,44,57,61,51,63,61],
[61,76,0,55,48,59,69,61,69,74],
[75,77,76,0,73,61,69,73,80,78],
[73,87,83,58,0,71,77,60,77,83],
[77,74,72,70,60,0,72,70,75,74],
[73,70,62,62,54,59,0,59,63,62],
[76,80,70,58,71,61,72,0,64,75],
[67,68,62,51,54,56,68,67,0,69],
[62,70,57,53,48,57,69,56,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,57,65,58,54,70,66,68,80],
[82,0,73,56,70,54,61,57,68,75],
[74,58,0,61,62,52,61,56,71,72],
[66,75,70,0,63,60,62,62,75,75],
[73,61,69,68,0,71,64,62,77,67],
[77,77,79,71,60,0,69,60,86,67],
[61,70,70,69,67,62,0,66,69,67],
[65,74,75,69,69,71,65,0,73,67],
[63,63,60,56,54,45,62,58,0,60],
[51,56,59,56,64,64,64,64,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,88,68,82,68,75,58,68],
[64,0,75,80,72,62,55,71,63,60],
[62,56,0,65,55,62,41,57,57,48],
[43,51,66,0,56,58,53,52,49,48],
[63,59,76,75,0,77,69,74,62,58],
[49,69,69,73,54,0,59,83,42,61],
[63,76,90,78,62,72,0,80,67,73],
[56,60,74,79,57,48,51,0,55,74],
[73,68,74,82,69,89,64,76,0,69],
[63,71,83,83,73,70,58,57,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,74,78,72,71,91,82,63,69],
[38,0,50,53,52,62,70,69,55,47],
[57,81,0,59,58,58,78,68,70,61],
[53,78,72,0,42,48,72,71,55,57],
[59,79,73,89,0,78,90,79,65,70],
[60,69,73,83,53,0,69,75,75,61],
[40,61,53,59,41,62,0,71,52,53],
[49,62,63,60,52,56,60,0,62,49],
[68,76,61,76,66,56,79,69,0,53],
[62,84,70,74,61,70,78,82,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,84,78,77,74,66,71,65,66],
[49,0,60,68,67,58,58,46,52,59],
[47,71,0,78,68,57,51,51,48,60],
[53,63,53,0,57,59,58,57,39,65],
[54,64,63,74,0,52,49,54,39,64],
[57,73,74,72,79,0,69,61,56,61],
[65,73,80,73,82,62,0,53,42,76],
[60,85,80,74,77,70,78,0,69,81],
[66,79,83,92,92,75,89,62,0,70],
[65,72,71,66,67,70,55,50,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,73,46,58,81,73,72,77,76],
[13,0,28,39,43,54,64,34,34,48],
[58,103,0,36,62,71,80,58,50,72],
[85,92,95,0,51,78,68,60,83,76],
[73,88,69,80,0,86,70,67,59,88],
[50,77,60,53,45,0,59,55,68,61],
[58,67,51,63,61,72,0,56,70,72],
[59,97,73,71,64,76,75,0,61,68],
[54,97,81,48,72,63,61,70,0,64],
[55,83,59,55,43,70,59,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,86,63,95,67,85,83,71,88],
[57,0,63,78,85,58,71,78,62,67],
[45,68,0,63,78,47,60,63,65,55],
[68,53,68,0,63,71,68,79,51,77],
[36,46,53,68,0,53,70,46,35,54],
[64,73,84,60,78,0,86,90,57,75],
[46,60,71,63,61,45,0,67,55,52],
[48,53,68,52,85,41,64,0,62,61],
[60,69,66,80,96,74,76,69,0,62],
[43,64,76,54,77,56,79,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,45,56,97,45,66,46,49,52],
[94,0,63,91,86,70,76,66,76,69],
[86,68,0,79,118,93,68,50,99,71],
[75,40,52,0,93,45,60,48,85,30],
[34,45,13,38,0,50,64,34,49,37],
[86,61,38,86,81,0,49,62,78,54],
[65,55,63,71,67,82,0,53,83,64],
[85,65,81,83,97,69,78,0,82,46],
[82,55,32,46,82,53,48,49,0,45],
[79,62,60,101,94,77,67,85,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,77,60,60,67,69,70,66,77],
[64,0,58,59,57,60,64,52,53,63],
[54,73,0,55,58,56,71,70,62,59],
[71,72,76,0,65,69,78,63,59,61],
[71,74,73,66,0,69,76,61,56,66],
[64,71,75,62,62,0,64,68,59,65],
[62,67,60,53,55,67,0,69,55,64],
[61,79,61,68,70,63,62,0,58,65],
[65,78,69,72,75,72,76,73,0,65],
[54,68,72,70,65,66,67,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,65,68,61,60,73,79,62,72],
[58,0,64,54,70,55,62,69,61,62],
[66,67,0,63,62,52,56,66,67,67],
[63,77,68,0,68,58,67,59,76,65],
[70,61,69,63,0,68,59,61,65,56],
[71,76,79,73,63,0,83,72,72,69],
[58,69,75,64,72,48,0,70,54,76],
[52,62,65,72,70,59,61,0,53,71],
[69,70,64,55,66,59,77,78,0,78],
[59,69,64,66,75,62,55,60,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,72,57,77,75,48,62,54,73],
[62,0,59,66,56,59,49,61,36,61],
[59,72,0,57,73,100,61,63,73,59],
[74,65,74,0,85,82,59,67,82,81],
[54,75,58,46,0,61,49,42,60,54],
[56,72,31,49,70,0,59,50,62,69],
[83,82,70,72,82,72,0,80,64,70],
[69,70,68,64,89,81,51,0,73,77],
[77,95,58,49,71,69,67,58,0,72],
[58,70,72,50,77,62,61,54,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,53,55,59,57,62,65,81],
[67,0,60,58,69,63,64,59,68,79],
[64,71,0,69,74,66,63,75,74,78],
[78,73,62,0,70,54,57,69,72,77],
[76,62,57,61,0,55,61,70,70,73],
[72,68,65,77,76,0,65,74,68,74],
[74,67,68,74,70,66,0,64,68,76],
[69,72,56,62,61,57,67,0,66,74],
[66,63,57,59,61,63,63,65,0,66],
[50,52,53,54,58,57,55,57,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,54,70,62,63,69,58,70,54],
[53,0,58,73,60,61,61,64,65,53],
[77,73,0,68,71,70,68,63,71,66],
[61,58,63,0,56,59,60,52,70,58],
[69,71,60,75,0,64,69,57,65,62],
[68,70,61,72,67,0,63,64,69,56],
[62,70,63,71,62,68,0,54,68,55],
[73,67,68,79,74,67,77,0,81,63],
[61,66,60,61,66,62,63,50,0,57],
[77,78,65,73,69,75,76,68,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,72,64,59,70,66,72,62,61],
[69,0,69,70,72,80,66,69,73,64],
[59,62,0,67,70,72,67,61,57,66],
[67,61,64,0,60,73,65,54,62,65],
[72,59,61,71,0,73,71,59,62,60],
[61,51,59,58,58,0,53,58,60,55],
[65,65,64,66,60,78,0,64,64,63],
[59,62,70,77,72,73,67,0,67,73],
[69,58,74,69,69,71,67,64,0,61],
[70,67,65,66,71,76,68,58,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,77,68,70,77,52,79,59,87],
[74,0,77,91,74,64,62,71,60,69],
[54,54,0,59,56,70,52,67,62,72],
[63,40,72,0,59,48,46,52,41,55],
[61,57,75,72,0,67,45,63,67,58],
[54,67,61,83,64,0,55,62,69,60],
[79,69,79,85,86,76,0,75,58,66],
[52,60,64,79,68,69,56,0,70,74],
[72,71,69,90,64,62,73,61,0,66],
[44,62,59,76,73,71,65,57,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,66,73,76,73,64,61,56,76],
[53,0,64,67,67,57,64,47,46,62],
[65,67,0,67,62,63,74,61,55,67],
[58,64,64,0,65,66,55,61,51,56],
[55,64,69,66,0,61,65,55,42,58],
[58,74,68,65,70,0,76,61,54,61],
[67,67,57,76,66,55,0,56,40,64],
[70,84,70,70,76,70,75,0,72,62],
[75,85,76,80,89,77,91,59,0,80],
[55,69,64,75,73,70,67,69,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,66,69,68,80,69,85,80,44],
[55,0,41,72,46,76,45,71,83,58],
[65,90,0,70,77,77,55,75,77,52],
[62,59,61,0,68,80,60,45,59,62],
[63,85,54,63,0,54,63,65,67,56],
[51,55,54,51,77,0,26,56,58,36],
[62,86,76,71,68,105,0,89,109,74],
[46,60,56,86,66,75,42,0,77,42],
[51,48,54,72,64,73,22,54,0,47],
[87,73,79,69,75,95,57,89,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,69,70,70,63,79,57,71,54],
[80,0,68,83,65,77,85,68,75,64],
[62,63,0,65,71,61,58,64,62,68],
[61,48,66,0,52,61,51,59,58,52],
[61,66,60,79,0,60,70,45,60,63],
[68,54,70,70,71,0,64,51,62,59],
[52,46,73,80,61,67,0,44,51,52],
[74,63,67,72,86,80,87,0,64,66],
[60,56,69,73,71,69,80,67,0,52],
[77,67,63,79,68,72,79,65,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,53,59,57,45,52,60,69,59],
[72,0,76,68,75,63,66,74,68,61],
[78,55,0,74,63,61,59,78,72,65],
[72,63,57,0,59,52,51,72,68,53],
[74,56,68,72,0,66,53,69,58,62],
[86,68,70,79,65,0,56,82,80,64],
[79,65,72,80,78,75,0,73,76,72],
[71,57,53,59,62,49,58,0,73,60],
[62,63,59,63,73,51,55,58,0,60],
[72,70,66,78,69,67,59,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,78,65,65,65,77,63,73,69],
[47,0,56,59,63,60,68,57,63,60],
[53,75,0,61,70,56,63,60,72,64],
[66,72,70,0,74,65,69,66,68,66],
[66,68,61,57,0,60,70,54,62,54],
[66,71,75,66,71,0,70,72,75,62],
[54,63,68,62,61,61,0,63,68,65],
[68,74,71,65,77,59,68,0,78,71],
[58,68,59,63,69,56,63,53,0,62],
[62,71,67,65,77,69,66,60,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,68,72,74,75,62,62,54],
[68,0,63,72,69,65,78,62,64,65],
[69,68,0,82,77,68,70,73,67,59],
[63,59,49,0,64,60,68,62,57,46],
[59,62,54,67,0,60,75,61,60,63],
[57,66,63,71,71,0,71,74,64,60],
[56,53,61,63,56,60,0,54,54,53],
[69,69,58,69,70,57,77,0,72,56],
[69,67,64,74,71,67,77,59,0,68],
[77,66,72,85,68,71,78,75,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,70,64,62,76,66,70,68,65],
[80,0,78,65,69,70,85,75,56,75],
[61,53,0,63,71,63,75,65,60,78],
[67,66,68,0,65,59,74,61,59,90],
[69,62,60,66,0,68,70,70,67,74],
[55,61,68,72,63,0,77,77,59,74],
[65,46,56,57,61,54,0,69,58,69],
[61,56,66,70,61,54,62,0,66,67],
[63,75,71,72,64,72,73,65,0,73],
[66,56,53,41,57,57,62,64,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,82,52,49,59,76,67,76,91],
[62,0,74,57,50,47,80,71,78,69],
[49,57,0,38,37,19,52,48,58,24],
[79,74,93,0,69,62,109,78,83,102],
[82,81,94,62,0,76,106,86,90,85],
[72,84,112,69,55,0,85,63,77,78],
[55,51,79,22,25,46,0,85,79,84],
[64,60,83,53,45,68,46,0,70,64],
[55,53,73,48,41,54,52,61,0,48],
[40,62,107,29,46,53,47,67,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,37,37,94,0,41,53,0,37],
[78,0,78,78,78,78,78,78,37,37],
[94,53,0,0,94,0,94,53,53,53],
[94,53,131,0,94,41,94,94,53,90],
[37,53,37,37,0,37,0,37,37,37],
[131,53,131,90,94,0,94,90,90,90],
[90,53,37,37,131,37,0,90,37,37],
[78,53,78,37,94,41,41,0,0,37],
[131,94,78,78,94,41,94,131,0,78],
[94,94,78,41,94,41,94,94,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,59,60,63,54,52,68,58,55],
[77,0,71,59,54,62,54,71,58,58],
[72,60,0,67,61,61,66,74,69,53],
[71,72,64,0,57,69,65,72,58,64],
[68,77,70,74,0,67,67,69,70,62],
[77,69,70,62,64,0,58,65,62,63],
[79,77,65,66,64,73,0,81,64,67],
[63,60,57,59,62,66,50,0,60,53],
[73,73,62,73,61,69,67,71,0,60],
[76,73,78,67,69,68,64,78,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,73,74,66,77,79,69,65,74],
[62,0,80,80,68,77,77,69,79,74],
[58,51,0,69,51,62,57,55,63,59],
[57,51,62,0,54,66,63,54,70,57],
[65,63,80,77,0,70,66,59,66,77],
[54,54,69,65,61,0,58,70,59,61],
[52,54,74,68,65,73,0,67,62,64],
[62,62,76,77,72,61,64,0,69,74],
[66,52,68,61,65,72,69,62,0,60],
[57,57,72,74,54,70,67,57,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,65,70,73,58,69,61,62,55],
[77,0,65,75,78,63,75,75,74,65],
[66,66,0,73,71,69,64,76,73,62],
[61,56,58,0,55,70,59,70,58,62],
[58,53,60,76,0,61,66,73,60,54],
[73,68,62,61,70,0,65,72,69,67],
[62,56,67,72,65,66,0,83,71,57],
[70,56,55,61,58,59,48,0,56,51],
[69,57,58,73,71,62,60,75,0,61],
[76,66,69,69,77,64,74,80,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,42,42,42,63,90,0,48,105],
[41,0,26,26,26,89,26,26,26,83],
[89,105,0,0,0,63,48,0,48,105],
[89,105,131,0,48,63,116,89,48,105],
[89,105,131,83,0,63,131,41,63,131],
[68,42,68,68,68,0,68,68,42,68],
[41,105,83,15,0,63,0,15,63,105],
[131,105,131,42,90,63,116,0,90,105],
[83,105,83,83,68,89,68,41,0,131],
[26,48,26,26,0,63,26,26,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,65,30,50,63,82,59,51],
[70,0,47,67,22,56,31,58,54,61],
[64,84,0,50,73,63,60,87,60,75],
[66,64,81,0,43,45,54,75,77,63],
[101,109,58,88,0,64,79,90,90,86],
[81,75,68,86,67,0,64,92,81,77],
[68,100,71,77,52,67,0,96,61,66],
[49,73,44,56,41,39,35,0,63,61],
[72,77,71,54,41,50,70,68,0,67],
[80,70,56,68,45,54,65,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,43,30,43,45,37,55,50],
[72,0,68,52,47,59,63,75,56,69],
[72,63,0,32,78,70,52,50,84,40],
[88,79,99,0,84,81,89,51,92,66],
[101,84,53,47,0,75,59,70,86,72],
[88,72,61,50,56,0,63,63,55,49],
[86,68,79,42,72,68,0,59,70,66],
[94,56,81,80,61,68,72,0,69,61],
[76,75,47,39,45,76,61,62,0,55],
[81,62,91,65,59,82,65,70,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,63,78,67,69,65,79,78],
[58,0,63,63,76,63,68,79,61,71],
[58,68,0,63,69,61,62,68,59,67],
[68,68,68,0,80,56,60,62,69,76],
[53,55,62,51,0,57,53,60,64,69],
[64,68,70,75,74,0,69,69,82,66],
[62,63,69,71,78,62,0,72,64,70],
[66,52,63,69,71,62,59,0,63,68],
[52,70,72,62,67,49,67,68,0,68],
[53,60,64,55,62,65,61,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,56,56,66,55,62,65,59,59],
[76,0,63,70,81,72,83,72,90,72],
[75,68,0,60,81,70,99,80,74,72],
[75,61,71,0,71,74,75,79,72,72],
[65,50,50,60,0,70,69,46,77,64],
[76,59,61,57,61,0,66,46,77,62],
[69,48,32,56,62,65,0,57,68,59],
[66,59,51,52,85,85,74,0,85,78],
[72,41,57,59,54,54,63,46,0,71],
[72,59,59,59,67,69,72,53,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,79,75,72,77,89,78,64],
[58,0,69,89,70,77,71,70,71,75],
[58,62,0,72,60,73,68,71,67,64],
[52,42,59,0,53,73,53,60,58,64],
[56,61,71,78,0,60,77,72,85,71],
[59,54,58,58,71,0,74,41,62,39],
[54,60,63,78,54,57,0,51,63,62],
[42,61,60,71,59,90,80,0,73,69],
[53,60,64,73,46,69,68,58,0,54],
[67,56,67,67,60,92,69,62,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,56,67,49,70,59,60,71,56],
[63,0,65,69,77,80,61,49,68,67],
[75,66,0,76,62,70,60,50,62,68],
[64,62,55,0,57,73,65,44,54,58],
[82,54,69,74,0,76,68,44,70,69],
[61,51,61,58,55,0,58,52,62,55],
[72,70,71,66,63,73,0,60,70,75],
[71,82,81,87,87,79,71,0,59,77],
[60,63,69,77,61,69,61,72,0,58],
[75,64,63,73,62,76,56,54,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,63,69,69,64,63,62,62],
[67,0,74,64,72,73,67,69,70,62],
[61,57,0,64,71,73,65,59,65,62],
[68,67,67,0,76,77,78,73,64,72],
[62,59,60,55,0,63,64,60,68,62],
[62,58,58,54,68,0,66,65,58,63],
[67,64,66,53,67,65,0,58,63,72],
[68,62,72,58,71,66,73,0,68,64],
[69,61,66,67,63,73,68,63,0,72],
[69,69,69,59,69,68,59,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,51,72,79,67,58,74,60,47],
[85,0,64,65,68,79,69,90,73,47],
[80,67,0,84,83,75,85,81,65,73],
[59,66,47,0,68,48,68,75,58,46],
[52,63,48,63,0,44,56,69,58,50],
[64,52,56,83,87,0,64,80,65,53],
[73,62,46,63,75,67,0,78,57,65],
[57,41,50,56,62,51,53,0,63,54],
[71,58,66,73,73,66,74,68,0,58],
[84,84,58,85,81,78,66,77,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,54,55,53,64,50,66,62,63],
[49,0,66,58,59,62,51,74,60,58],
[77,65,0,63,61,54,60,72,60,68],
[76,73,68,0,50,63,59,86,64,84],
[78,72,70,81,0,74,61,81,63,91],
[67,69,77,68,57,0,69,88,56,72],
[81,80,71,72,70,62,0,88,69,73],
[65,57,59,45,50,43,43,0,49,63],
[69,71,71,67,68,75,62,82,0,81],
[68,73,63,47,40,59,58,68,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,79,80,42,3,42,78,25,50],
[64,0,55,30,3,38,50,30,26,4],
[52,76,0,71,17,35,18,43,4,42],
[51,101,60,0,54,38,21,18,26,76],
[89,128,114,77,0,67,50,55,55,114],
[128,93,96,93,64,0,97,94,51,93],
[89,81,113,110,81,34,0,77,84,81],
[53,101,88,113,76,37,54,0,59,59],
[106,105,127,105,76,80,47,72,0,105],
[81,127,89,55,17,38,50,72,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,68,58,49,61,70,55,71,49],
[74,0,67,64,63,62,68,61,75,56],
[63,64,0,59,62,72,69,52,74,59],
[73,67,72,0,67,64,67,56,67,55],
[82,68,69,64,0,64,69,66,82,64],
[70,69,59,67,67,0,60,62,71,57],
[61,63,62,64,62,71,0,55,73,61],
[76,70,79,75,65,69,76,0,89,71],
[60,56,57,64,49,60,58,42,0,45],
[82,75,72,76,67,74,70,60,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,86,77,73,70,71,75,65,71],
[56,0,67,70,74,60,65,71,68,69],
[45,64,0,70,62,54,59,59,64,59],
[54,61,61,0,74,57,58,58,60,66],
[58,57,69,57,0,60,52,64,61,65],
[61,71,77,74,71,0,67,71,73,70],
[60,66,72,73,79,64,0,70,74,64],
[56,60,72,73,67,60,61,0,64,66],
[66,63,67,71,70,58,57,67,0,66],
[60,62,72,65,66,61,67,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,71,36,76,72,56,58,43,51],
[80,0,88,63,89,75,68,69,62,83],
[60,43,0,55,76,67,70,64,66,61],
[95,68,76,0,73,72,72,67,78,63],
[55,42,55,58,0,70,56,66,64,60],
[59,56,64,59,61,0,53,68,73,73],
[75,63,61,59,75,78,0,73,72,65],
[73,62,67,64,65,63,58,0,72,78],
[88,69,65,53,67,58,59,59,0,62],
[80,48,70,68,71,58,66,53,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,110,79,74,48,68,82,66,71],
[67,0,103,81,60,80,58,104,57,61],
[21,28,0,68,70,36,46,27,27,47],
[52,50,63,0,68,59,39,67,60,26],
[57,71,61,63,0,72,28,59,40,39],
[83,51,95,72,59,0,44,37,72,51],
[63,73,85,92,103,87,0,60,85,80],
[49,27,104,64,72,94,71,0,60,61],
[65,74,104,71,91,59,46,71,0,39],
[60,70,84,105,92,80,51,70,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,53,53,67,58,55,51,51,56],
[72,0,61,62,69,68,53,52,50,56],
[78,70,0,74,75,65,57,68,58,61],
[78,69,57,0,75,70,55,62,55,63],
[64,62,56,56,0,57,54,54,52,57],
[73,63,66,61,74,0,61,56,56,56],
[76,78,74,76,77,70,0,59,63,70],
[80,79,63,69,77,75,72,0,71,67],
[80,81,73,76,79,75,68,60,0,66],
[75,75,70,68,74,75,61,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,54,67,76,55,58,45,63,63],
[83,0,56,84,90,67,72,74,68,80],
[77,75,0,92,83,66,67,65,63,76],
[64,47,39,0,79,54,59,54,59,57],
[55,41,48,52,0,54,49,63,52,51],
[76,64,65,77,77,0,77,74,63,68],
[73,59,64,72,82,54,0,53,50,64],
[86,57,66,77,68,57,78,0,66,77],
[68,63,68,72,79,68,81,65,0,77],
[68,51,55,74,80,63,67,54,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,67,74,74,71,64,69,62],
[68,0,63,62,74,66,64,68,74,63],
[66,68,0,73,71,64,71,74,64,70],
[64,69,58,0,70,60,57,68,60,68],
[57,57,60,61,0,58,58,59,59,57],
[57,65,67,71,73,0,67,68,63,69],
[60,67,60,74,73,64,0,64,67,63],
[67,63,57,63,72,63,67,0,66,60],
[62,57,67,71,72,68,64,65,0,66],
[69,68,61,63,74,62,68,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,55,68,67,49,63,61,64,57],
[71,0,57,54,56,52,65,50,54,60],
[76,74,0,67,68,71,78,68,65,63],
[63,77,64,0,63,59,64,61,61,63],
[64,75,63,68,0,61,67,65,62,60],
[82,79,60,72,70,0,69,72,69,67],
[68,66,53,67,64,62,0,63,61,58],
[70,81,63,70,66,59,68,0,63,70],
[67,77,66,70,69,62,70,68,0,58],
[74,71,68,68,71,64,73,61,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,64,66,59,69,57,71,69],
[64,0,69,69,75,66,74,67,68,69],
[63,62,0,68,70,59,71,73,67,68],
[67,62,63,0,64,58,67,63,68,60],
[65,56,61,67,0,57,67,58,58,64],
[72,65,72,73,74,0,71,66,72,73],
[62,57,60,64,64,60,0,67,63,64],
[74,64,58,68,73,65,64,0,66,59],
[60,63,64,63,73,59,68,65,0,62],
[62,62,63,71,67,58,67,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,47,75,53,73,64,68,56,41],
[79,0,64,88,53,85,77,83,80,66],
[84,67,0,85,58,80,79,85,80,64],
[56,43,46,0,39,52,65,58,43,36],
[78,78,73,92,0,82,84,102,70,61],
[58,46,51,79,49,0,61,66,53,57],
[67,54,52,66,47,70,0,72,57,50],
[63,48,46,73,29,65,59,0,50,46],
[75,51,51,88,61,78,74,81,0,39],
[90,65,67,95,70,74,81,85,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,63,73,64,67,65,73,58,75],
[53,0,48,62,58,58,58,63,53,58],
[68,83,0,66,67,71,52,79,64,74],
[58,69,65,0,54,62,56,64,56,58],
[67,73,64,77,0,69,62,74,68,74],
[64,73,60,69,62,0,60,67,59,62],
[66,73,79,75,69,71,0,76,64,68],
[58,68,52,67,57,64,55,0,52,66],
[73,78,67,75,63,72,67,79,0,71],
[56,73,57,73,57,69,63,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,69,71,55,74,70,66,71,75],
[48,0,63,58,54,63,59,54,59,58],
[62,68,0,65,54,66,66,60,67,60],
[60,73,66,0,59,62,68,68,64,65],
[76,77,77,72,0,65,68,67,77,66],
[57,68,65,69,66,0,70,56,68,62],
[61,72,65,63,63,61,0,66,67,61],
[65,77,71,63,64,75,65,0,71,61],
[60,72,64,67,54,63,64,60,0,61],
[56,73,71,66,65,69,70,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,59,75,61,68,59,47,62,67],
[55,0,60,63,79,53,74,48,74,51],
[72,71,0,45,71,64,63,56,61,51],
[56,68,86,0,75,100,91,87,81,50],
[70,52,60,56,0,60,49,54,50,52],
[63,78,67,31,71,0,73,37,59,51],
[72,57,68,40,82,58,0,47,64,71],
[84,83,75,44,77,94,84,0,83,74],
[69,57,70,50,81,72,67,48,0,62],
[64,80,80,81,79,80,60,57,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,45,68,50,54,61,48,47,56],
[76,0,76,78,69,59,82,70,76,78],
[86,55,0,72,52,75,86,65,71,76],
[63,53,59,0,64,58,67,58,61,59],
[81,62,79,67,0,66,83,57,65,84],
[77,72,56,73,65,0,87,56,70,75],
[70,49,45,64,48,44,0,50,59,68],
[83,61,66,73,74,75,81,0,71,82],
[84,55,60,70,66,61,72,60,0,71],
[75,53,55,72,47,56,63,49,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,64,101,87,87,23,67,131,53],
[0,0,34,57,64,34,23,23,23,23],
[67,97,0,101,87,57,23,67,67,23],
[30,74,30,0,30,64,0,30,30,53],
[44,67,44,101,0,34,67,67,67,67],
[44,97,74,67,97,0,67,67,97,97],
[108,108,108,131,64,64,0,131,131,131],
[64,108,64,101,64,64,0,0,87,53],
[0,108,64,101,64,34,0,44,0,23],
[78,108,108,78,64,34,0,78,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,59,60,63,67,49,63,55],
[71,0,65,66,64,68,59,61,61,65],
[71,66,0,64,71,73,68,60,64,68],
[72,65,67,0,62,67,65,69,64,69],
[71,67,60,69,0,73,59,58,60,66],
[68,63,58,64,58,0,57,56,60,58],
[64,72,63,66,72,74,0,64,67,68],
[82,70,71,62,73,75,67,0,62,74],
[68,70,67,67,71,71,64,69,0,68],
[76,66,63,62,65,73,63,57,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,63,51,68,39,77,35,28,42],
[39,0,59,30,37,49,77,48,38,41],
[68,72,0,54,31,28,93,24,33,35],
[80,101,77,0,52,61,125,52,68,87],
[63,94,100,79,0,69,109,55,65,49],
[92,82,103,70,62,0,104,69,71,66],
[54,54,38,6,22,27,0,27,17,18],
[96,83,107,79,76,62,104,0,96,80],
[103,93,98,63,66,60,114,35,0,74],
[89,90,96,44,82,65,113,51,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,63,87,95,83,116,95,97,110],
[41,0,70,90,95,82,74,70,99,101],
[68,61,0,65,66,59,95,37,87,74],
[44,41,66,0,60,52,79,54,50,67],
[36,36,65,71,0,54,74,48,82,87],
[48,49,72,79,77,0,93,59,69,89],
[15,57,36,52,57,38,0,55,90,59],
[36,61,94,77,83,72,76,0,91,101],
[34,32,44,81,49,62,41,40,0,64],
[21,30,57,64,44,42,72,30,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,71,67,65,64,55,64,66],
[73,0,78,73,65,67,69,70,72,71],
[67,53,0,68,60,62,62,58,68,68],
[60,58,63,0,59,64,62,60,64,64],
[64,66,71,72,0,66,62,66,64,68],
[66,64,69,67,65,0,66,62,69,64],
[67,62,69,69,69,65,0,74,71,70],
[76,61,73,71,65,69,57,0,73,73],
[67,59,63,67,67,62,60,58,0,59],
[65,60,63,67,63,67,61,58,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,58,63,69,64,63,62,50,67],
[64,0,51,67,57,60,66,60,51,60],
[73,80,0,65,72,73,69,68,68,73],
[68,64,66,0,63,61,66,67,64,62],
[62,74,59,68,0,69,68,59,59,65],
[67,71,58,70,62,0,68,61,59,67],
[68,65,62,65,63,63,0,63,63,62],
[69,71,63,64,72,70,68,0,56,74],
[81,80,63,67,72,72,68,75,0,68],
[64,71,58,69,66,64,69,57,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,74,75,54,76,17,26,59,54],
[46,0,44,72,46,88,35,66,54,66],
[57,87,0,89,28,50,17,28,33,28],
[56,59,42,0,44,50,33,16,33,44],
[77,85,103,87,0,131,43,43,97,83],
[55,43,81,81,0,0,43,17,43,17],
[114,96,114,98,88,88,0,82,54,82],
[105,65,103,115,88,114,49,0,71,82],
[72,77,98,98,34,88,77,60,0,46],
[77,65,103,87,48,114,49,49,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,69,60,72,71,67,64,73],
[55,0,69,63,69,63,67,69,69,65],
[60,62,0,65,65,62,55,70,64,60],
[62,68,66,0,63,76,66,69,65,67],
[71,62,66,68,0,77,60,71,72,73],
[59,68,69,55,54,0,60,69,59,59],
[60,64,76,65,71,71,0,68,60,65],
[64,62,61,62,60,62,63,0,60,63],
[67,62,67,66,59,72,71,71,0,65],
[58,66,71,64,58,72,66,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,59,55,62,61,52,59,57,63],
[75,0,68,57,70,62,65,59,68,68],
[72,63,0,66,69,61,62,55,72,72],
[76,74,65,0,79,63,65,64,66,79],
[69,61,62,52,0,57,58,52,56,68],
[70,69,70,68,74,0,68,65,72,69],
[79,66,69,66,73,63,0,74,71,76],
[72,72,76,67,79,66,57,0,68,76],
[74,63,59,65,75,59,60,63,0,71],
[68,63,59,52,63,62,55,55,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,64,77,79,78,77,90,85,92],
[54,0,72,65,72,73,57,61,73,82],
[67,59,0,70,67,68,69,65,70,90],
[54,66,61,0,68,61,63,64,53,73],
[52,59,64,63,0,66,58,48,74,74],
[53,58,63,70,65,0,57,50,84,78],
[54,74,62,68,73,74,0,57,83,78],
[41,70,66,67,83,81,74,0,77,88],
[46,58,61,78,57,47,48,54,0,82],
[39,49,41,58,57,53,53,43,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,59,65,88,72,91,59,41,52],
[50,0,40,50,69,45,63,48,49,46],
[72,91,0,61,85,61,86,49,40,69],
[66,81,70,0,82,65,72,62,41,54],
[43,62,46,49,0,45,77,54,48,62],
[59,86,70,66,86,0,89,57,66,59],
[40,68,45,59,54,42,0,52,38,37],
[72,83,82,69,77,74,79,0,57,62],
[90,82,91,90,83,65,93,74,0,84],
[79,85,62,77,69,72,94,69,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,70,76,73,64,84,66,70,68],
[52,0,42,64,47,57,64,52,52,45],
[61,89,0,65,71,59,71,73,64,60],
[55,67,66,0,71,58,80,65,62,60],
[58,84,60,60,0,61,84,69,67,67],
[67,74,72,73,70,0,85,75,64,66],
[47,67,60,51,47,46,0,59,47,55],
[65,79,58,66,62,56,72,0,62,57],
[61,79,67,69,64,67,84,69,0,77],
[63,86,71,71,64,65,76,74,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,63,62,65,59,60,56,62],
[71,0,70,75,67,66,69,59,64,70],
[71,61,0,73,75,64,73,68,64,66],
[68,56,58,0,63,59,62,59,59,59],
[69,64,56,68,0,60,66,66,68,60],
[66,65,67,72,71,0,71,66,62,68],
[72,62,58,69,65,60,0,65,67,60],
[71,72,63,72,65,65,66,0,66,65],
[75,67,67,72,63,69,64,65,0,69],
[69,61,65,72,71,63,71,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,66,62,66,68,73,65,55],
[63,0,65,64,56,49,75,71,53,53],
[73,66,0,61,54,71,58,71,73,64],
[65,67,70,0,76,71,69,74,60,69],
[69,75,77,55,0,70,67,75,63,76],
[65,82,60,60,61,0,74,70,67,82],
[63,56,73,62,64,57,0,69,58,53],
[58,60,60,57,56,61,62,0,63,58],
[66,78,58,71,68,64,73,68,0,66],
[76,78,67,62,55,49,78,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,72,64,66,69,74,70,68,74],
[74,0,75,71,68,65,80,65,68,62],
[59,56,0,63,62,51,63,60,61,64],
[67,60,68,0,63,56,69,63,58,64],
[65,63,69,68,0,60,67,70,63,72],
[62,66,80,75,71,0,73,74,72,76],
[57,51,68,62,64,58,0,60,63,69],
[61,66,71,68,61,57,71,0,70,66],
[63,63,70,73,68,59,68,61,0,72],
[57,69,67,67,59,55,62,65,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,50,62,70,51,68,66,46,57],
[75,0,71,59,65,61,74,74,61,74],
[81,60,0,76,77,72,89,76,43,61],
[69,72,55,0,69,50,74,69,54,56],
[61,66,54,62,0,50,76,77,51,61],
[80,70,59,81,81,0,89,81,71,76],
[63,57,42,57,55,42,0,67,54,44],
[65,57,55,62,54,50,64,0,46,59],
[85,70,88,77,80,60,77,85,0,91],
[74,57,70,75,70,55,87,72,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,93,98,90,89,47,73,75,88],
[51,0,82,61,48,69,41,87,57,59],
[38,49,0,78,59,40,50,80,51,80],
[33,70,53,0,68,51,47,58,49,51],
[41,83,72,63,0,60,59,62,77,59],
[42,62,91,80,71,0,66,70,63,56],
[84,90,81,84,72,65,0,80,78,79],
[58,44,51,73,69,61,51,0,69,51],
[56,74,80,82,54,68,53,62,0,64],
[43,72,51,80,72,75,52,80,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,78,72,65,71,72,80,71,77],
[59,0,62,58,65,63,66,71,77,68],
[53,69,0,63,54,54,50,70,74,62],
[59,73,68,0,62,62,68,70,75,68],
[66,66,77,69,0,63,67,71,77,80],
[60,68,77,69,68,0,59,69,77,77],
[59,65,81,63,64,72,0,74,72,70],
[51,60,61,61,60,62,57,0,69,69],
[60,54,57,56,54,54,59,62,0,71],
[54,63,69,63,51,54,61,62,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,56,55,63,77,57,72,55,56],
[66,0,55,68,54,77,69,65,61,53],
[75,76,0,64,65,73,82,61,61,65],
[76,63,67,0,69,69,68,63,51,50],
[68,77,66,62,0,77,74,73,53,70],
[54,54,58,62,54,0,60,61,56,62],
[74,62,49,63,57,71,0,56,55,52],
[59,66,70,68,58,70,75,0,60,59],
[76,70,70,80,78,75,76,71,0,59],
[75,78,66,81,61,69,79,72,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,69,67,69,73,69,67,67,71],
[71,0,59,68,69,67,63,63,56,71],
[62,72,0,55,69,57,62,67,63,61],
[64,63,76,0,61,63,56,70,69,74],
[62,62,62,70,0,63,64,62,61,66],
[58,64,74,68,68,0,62,66,66,71],
[62,68,69,75,67,69,0,62,68,70],
[64,68,64,61,69,65,69,0,72,71],
[64,75,68,62,70,65,63,59,0,76],
[60,60,70,57,65,60,61,60,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,58,65,57,48,61,60,53,61],
[79,0,69,75,57,82,88,80,74,63],
[73,62,0,70,73,71,79,63,66,67],
[66,56,61,0,58,62,81,64,75,60],
[74,74,58,73,0,82,81,78,67,72],
[83,49,60,69,49,0,77,73,72,62],
[70,43,52,50,50,54,0,55,71,57],
[71,51,68,67,53,58,76,0,70,52],
[78,57,65,56,64,59,60,61,0,67],
[70,68,64,71,59,69,74,79,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,68,59,52,53,61,49,53,65],
[85,0,72,72,67,73,80,65,71,61],
[63,59,0,61,57,66,60,54,58,62],
[72,59,70,0,65,46,69,56,60,64],
[79,64,74,66,0,58,77,70,64,74],
[78,58,65,85,73,0,81,74,70,64],
[70,51,71,62,54,50,0,53,65,61],
[82,66,77,75,61,57,78,0,67,72],
[78,60,73,71,67,61,66,64,0,52],
[66,70,69,67,57,67,70,59,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,56,66,71,76,67,57,59],
[66,0,66,68,62,67,68,71,69,64],
[64,65,0,64,65,68,79,79,66,60],
[75,63,67,0,62,52,73,65,66,68],
[65,69,66,69,0,65,74,80,67,59],
[60,64,63,79,66,0,59,66,63,59],
[55,63,52,58,57,72,0,61,58,54],
[64,60,52,66,51,65,70,0,56,61],
[74,62,65,65,64,68,73,75,0,63],
[72,67,71,63,72,72,77,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,66,64,61,61,67,71,59],
[68,0,62,58,68,58,57,65,60,56],
[69,69,0,70,73,62,62,67,65,61],
[65,73,61,0,65,60,64,62,68,56],
[67,63,58,66,0,60,62,68,59,60],
[70,73,69,71,71,0,62,73,68,61],
[70,74,69,67,69,69,0,60,68,71],
[64,66,64,69,63,58,71,0,70,65],
[60,71,66,63,72,63,63,61,0,64],
[72,75,70,75,71,70,60,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,57,58,55,54,54,60,56,53],
[81,0,73,69,63,65,67,73,62,72],
[74,58,0,62,59,55,55,59,58,64],
[73,62,69,0,61,50,59,67,62,62],
[76,68,72,70,0,60,74,71,72,65],
[77,66,76,81,71,0,65,70,68,70],
[77,64,76,72,57,66,0,76,65,73],
[71,58,72,64,60,61,55,0,60,63],
[75,69,73,69,59,63,66,71,0,73],
[78,59,67,69,66,61,58,68,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,113,98,91,60,90,99,85,90],
[47,0,88,69,82,42,48,70,59,61],
[18,43,0,59,64,54,46,63,55,51],
[33,62,72,0,64,82,64,67,37,72],
[40,49,67,67,0,56,40,44,65,56],
[71,89,77,49,75,0,73,70,47,75],
[41,83,85,67,91,58,0,74,60,71],
[32,61,68,64,87,61,57,0,47,93],
[46,72,76,94,66,84,71,84,0,63],
[41,70,80,59,75,56,60,38,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,62,73,55,71,54,66,71],
[70,0,70,59,61,68,70,59,66,68],
[73,61,0,66,75,64,78,65,67,73],
[69,72,65,0,76,65,76,67,61,71],
[58,70,56,55,0,54,60,53,59,66],
[76,63,67,66,77,0,71,62,63,70],
[60,61,53,55,71,60,0,51,57,55],
[77,72,66,64,78,69,80,0,67,71],
[65,65,64,70,72,68,74,64,0,70],
[60,63,58,60,65,61,76,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,78,75,54,76,66,84,76,103],
[76,0,72,55,67,71,64,73,68,95],
[53,59,0,66,63,57,62,51,55,67],
[56,76,65,0,80,70,75,74,51,72],
[77,64,68,51,0,76,60,61,68,94],
[55,60,74,61,55,0,62,59,46,79],
[65,67,69,56,71,69,0,76,58,86],
[47,58,80,57,70,72,55,0,46,85],
[55,63,76,80,63,85,73,85,0,93],
[28,36,64,59,37,52,45,46,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,35,67,45,48,100,34,42,65],
[72,0,52,59,52,79,80,36,67,80],
[96,79,0,75,76,64,89,69,63,76],
[64,72,56,0,32,75,66,52,51,58],
[86,79,55,99,0,69,97,72,72,81],
[83,52,67,56,62,0,81,47,38,72],
[31,51,42,65,34,50,0,39,48,52],
[97,95,62,79,59,84,92,0,63,97],
[89,64,68,80,59,93,83,68,0,87],
[66,51,55,73,50,59,79,34,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,64,64,71,72,75,68,70,70],
[58,0,55,54,59,59,63,57,63,65],
[67,76,0,54,58,57,75,64,71,67],
[67,77,77,0,69,71,74,65,67,72],
[60,72,73,62,0,65,72,63,70,63],
[59,72,74,60,66,0,73,68,76,74],
[56,68,56,57,59,58,0,59,64,63],
[63,74,67,66,68,63,72,0,71,72],
[61,68,60,64,61,55,67,60,0,63],
[61,66,64,59,68,57,68,59,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,57,59,62,65,53,65,52,66],
[80,0,67,66,78,80,62,64,73,75],
[74,64,0,70,77,80,68,72,73,67],
[72,65,61,0,66,79,62,64,66,60],
[69,53,54,65,0,65,61,70,62,59],
[66,51,51,52,66,0,54,73,55,69],
[78,69,63,69,70,77,0,64,67,65],
[66,67,59,67,61,58,67,0,63,66],
[79,58,58,65,69,76,64,68,0,75],
[65,56,64,71,72,62,66,65,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,76,73,67,65,71,64,72],
[59,0,61,74,67,66,62,65,62,65],
[59,70,0,77,74,68,63,63,69,61],
[55,57,54,0,60,53,54,58,53,61],
[58,64,57,71,0,50,57,54,60,62],
[64,65,63,78,81,0,66,62,63,68],
[66,69,68,77,74,65,0,67,65,71],
[60,66,68,73,77,69,64,0,63,69],
[67,69,62,78,71,68,66,68,0,68],
[59,66,70,70,69,63,60,62,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,76,71,69,72,80,61,74,71],
[58,0,69,74,69,73,78,65,69,69],
[55,62,0,55,70,64,71,60,58,63],
[60,57,76,0,64,75,74,67,66,71],
[62,62,61,67,0,75,70,61,66,61],
[59,58,67,56,56,0,63,53,62,55],
[51,53,60,57,61,68,0,62,63,60],
[70,66,71,64,70,78,69,0,63,62],
[57,62,73,65,65,69,68,68,0,67],
[60,62,68,60,70,76,71,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,76,59,53,63,63,57,67,65],
[63,0,71,60,62,66,69,57,54,69],
[55,60,0,83,53,48,67,60,40,50],
[72,71,48,0,63,59,74,52,56,62],
[78,69,78,68,0,78,80,63,64,72],
[68,65,83,72,53,0,65,59,55,49],
[68,62,64,57,51,66,0,53,58,59],
[74,74,71,79,68,72,78,0,59,75],
[64,77,91,75,67,76,73,72,0,70],
[66,62,81,69,59,82,72,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,68,60,55,69,60,65,68,56],
[72,0,69,66,65,68,63,71,60,64],
[63,62,0,64,56,65,58,63,63,61],
[71,65,67,0,56,64,66,69,62,67],
[76,66,75,75,0,72,69,68,70,60],
[62,63,66,67,59,0,65,63,62,59],
[71,68,73,65,62,66,0,65,63,58],
[66,60,68,62,63,68,66,0,60,57],
[63,71,68,69,61,69,68,71,0,59],
[75,67,70,64,71,72,73,74,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,72,67,53,76,61,51,69,56],
[61,0,67,54,52,78,55,48,68,60],
[59,64,0,72,53,74,56,61,61,61],
[64,77,59,0,56,65,53,60,51,55],
[78,79,78,75,0,77,77,59,77,68],
[55,53,57,66,54,0,60,51,55,55],
[70,76,75,78,54,71,0,66,73,68],
[80,83,70,71,72,80,65,0,62,74],
[62,63,70,80,54,76,58,69,0,60],
[75,71,70,76,63,76,63,57,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,86,66,43,23,56,86,66,86],
[53,0,86,65,68,60,55,60,58,102],
[45,45,0,73,45,68,40,84,24,77],
[65,66,58,0,38,21,58,81,49,53],
[88,63,86,93,0,60,67,72,63,76],
[108,71,63,110,71,0,75,98,87,96],
[75,76,91,73,64,56,0,86,59,98],
[45,71,47,50,59,33,45,0,71,59],
[65,73,107,82,68,44,72,60,0,81],
[45,29,54,78,55,35,33,72,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,59,59,69,61,69,67,65,64],
[69,0,68,73,72,71,73,71,64,70],
[72,63,0,66,73,62,74,65,65,64],
[72,58,65,0,66,69,71,69,54,63],
[62,59,58,65,0,57,70,61,52,59],
[70,60,69,62,74,0,70,66,64,60],
[62,58,57,60,61,61,0,63,55,59],
[64,60,66,62,70,65,68,0,60,61],
[66,67,66,77,79,67,76,71,0,60],
[67,61,67,68,72,71,72,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,62,66,54,52,44,61,37,26],
[81,0,89,92,69,71,62,84,80,54],
[69,42,0,79,61,62,63,76,43,40],
[65,39,52,0,49,54,58,61,36,56],
[77,62,70,82,0,67,82,101,62,73],
[79,60,69,77,64,0,60,76,72,65],
[87,69,68,73,49,71,0,79,74,63],
[70,47,55,70,30,55,52,0,46,73],
[94,51,88,95,69,59,57,85,0,48],
[105,77,91,75,58,66,68,58,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,70,68,69,65,60,69,66],
[65,0,72,68,70,74,68,68,73,69],
[65,59,0,61,67,65,57,63,60,53],
[61,63,70,0,79,74,65,65,75,58],
[63,61,64,52,0,67,61,61,66,65],
[62,57,66,57,64,0,61,59,61,60],
[66,63,74,66,70,70,0,64,70,64],
[71,63,68,66,70,72,67,0,78,69],
[62,58,71,56,65,70,61,53,0,62],
[65,62,78,73,66,71,67,62,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,57,15,43,59,59,56,49,50],
[61,0,42,45,74,69,63,76,60,52],
[74,89,0,49,71,54,60,95,65,71],
[116,86,82,0,85,62,71,102,91,116],
[88,57,60,46,0,54,63,97,71,88],
[72,62,77,69,77,0,37,86,101,87],
[72,68,71,60,68,94,0,87,74,72],
[75,55,36,29,34,45,44,0,78,46],
[82,71,66,40,60,30,57,53,0,71],
[81,79,60,15,43,44,59,85,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,60,59,69,59,57,51,57,64],
[56,0,62,57,56,50,58,58,56,56],
[71,69,0,71,64,64,61,68,52,76],
[72,74,60,0,60,63,67,62,75,67],
[62,75,67,71,0,67,57,60,59,72],
[72,81,67,68,64,0,62,61,61,76],
[74,73,70,64,74,69,0,61,60,81],
[80,73,63,69,71,70,70,0,57,69],
[74,75,79,56,72,70,71,74,0,68],
[67,75,55,64,59,55,50,62,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,64,69,56,63,54,63,58],
[69,0,63,80,74,60,76,68,69,68],
[66,68,0,62,77,62,72,63,76,67],
[67,51,69,0,63,62,79,63,68,70],
[62,57,54,68,0,55,71,57,61,61],
[75,71,69,69,76,0,80,60,63,75],
[68,55,59,52,60,51,0,58,55,64],
[77,63,68,68,74,71,73,0,70,79],
[68,62,55,63,70,68,76,61,0,65],
[73,63,64,61,70,56,67,52,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,62,62,59,60,55,54,61],
[64,0,64,72,65,59,62,63,62,63],
[58,67,0,63,74,71,70,58,62,59],
[69,59,68,0,64,62,65,56,53,47],
[69,66,57,67,0,62,65,66,59,53],
[72,72,60,69,69,0,76,63,66,67],
[71,69,61,66,66,55,0,60,55,59],
[76,68,73,75,65,68,71,0,56,65],
[77,69,69,78,72,65,76,75,0,72],
[70,68,72,84,78,64,72,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,89,73,76,66,46,85,85,96],
[62,0,71,58,72,68,57,79,85,82],
[42,60,0,61,69,36,52,73,68,67],
[58,73,70,0,62,62,57,69,67,86],
[55,59,62,69,0,69,35,56,61,94],
[65,63,95,69,62,0,71,91,87,82],
[85,74,79,74,96,60,0,77,78,74],
[46,52,58,62,75,40,54,0,64,71],
[46,46,63,64,70,44,53,67,0,82],
[35,49,64,45,37,49,57,60,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,70,68,79,56,59,61,66],
[64,0,65,74,52,67,71,64,62,57],
[72,66,0,72,58,79,64,70,70,76],
[61,57,59,0,65,67,58,67,51,59],
[63,79,73,66,0,58,67,76,74,73],
[52,64,52,64,73,0,63,75,51,65],
[75,60,67,73,64,68,0,76,62,69],
[72,67,61,64,55,56,55,0,56,63],
[70,69,61,80,57,80,69,75,0,53],
[65,74,55,72,58,66,62,68,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,42,69,53,45,47,59,50],
[71,0,56,54,66,64,66,66,68,64],
[73,75,0,55,70,57,61,61,65,60],
[89,77,76,0,78,66,66,58,80,64],
[62,65,61,53,0,51,57,57,64,49],
[78,67,74,65,80,0,62,67,67,68],
[86,65,70,65,74,69,0,69,77,65],
[84,65,70,73,74,64,62,0,64,62],
[72,63,66,51,67,64,54,67,0,62],
[81,67,71,67,82,63,66,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,66,74,63,64,69,69,63,62],
[73,0,80,65,56,82,67,78,78,64],
[65,51,0,61,65,61,57,72,66,49],
[57,66,70,0,62,64,60,55,67,58],
[68,75,66,69,0,56,62,64,69,66],
[67,49,70,67,75,0,64,78,62,60],
[62,64,74,71,69,67,0,58,61,65],
[62,53,59,76,67,53,73,0,80,51],
[68,53,65,64,62,69,70,51,0,55],
[69,67,82,73,65,71,66,80,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,72,75,63,58,67,57,73,59],
[71,0,68,74,65,62,55,63,76,63],
[59,63,0,65,60,64,55,61,73,58],
[56,57,66,0,74,63,58,49,57,59],
[68,66,71,57,0,67,70,55,68,57],
[73,69,67,68,64,0,59,61,63,64],
[64,76,76,73,61,72,0,70,72,63],
[74,68,70,82,76,70,61,0,78,71],
[58,55,58,74,63,68,59,53,0,55],
[72,68,73,72,74,67,68,60,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,67,64,75,61,67,73,58],
[67,0,57,76,71,63,66,59,69,66],
[67,74,0,76,64,77,63,63,74,69],
[64,55,55,0,60,67,63,56,61,58],
[67,60,67,71,0,71,67,63,75,59],
[56,68,54,64,60,0,56,58,63,60],
[70,65,68,68,64,75,0,60,76,69],
[64,72,68,75,68,73,71,0,78,72],
[58,62,57,70,56,68,55,53,0,64],
[73,65,62,73,72,71,62,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,69,62,60,62,62,70,64,64],
[69,0,70,66,67,66,70,63,64,67],
[62,61,0,59,50,58,64,74,51,55],
[69,65,72,0,58,59,64,77,69,57],
[71,64,81,73,0,70,71,75,60,72],
[69,65,73,72,61,0,67,68,63,66],
[69,61,67,67,60,64,0,67,46,67],
[61,68,57,54,56,63,64,0,49,48],
[67,67,80,62,71,68,85,82,0,72],
[67,64,76,74,59,65,64,83,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,48,68,59,30,37,91,75,69],
[68,0,57,69,65,59,54,82,80,79],
[83,74,0,79,83,75,58,110,89,92],
[63,62,52,0,78,41,36,80,49,55],
[72,66,48,53,0,51,44,82,83,73],
[101,72,56,90,80,0,74,113,82,103],
[94,77,73,95,87,57,0,90,70,72],
[40,49,21,51,49,18,41,0,52,67],
[56,51,42,82,48,49,61,79,0,68],
[62,52,39,76,58,28,59,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,74,60,72,67,70,70,76,73],
[66,0,65,69,74,64,70,64,71,61],
[57,66,0,69,71,68,78,59,76,72],
[71,62,62,0,80,58,59,66,67,67],
[59,57,60,51,0,58,65,58,63,62],
[64,67,63,73,73,0,81,57,67,77],
[61,61,53,72,66,50,0,61,72,59],
[61,67,72,65,73,74,70,0,71,72],
[55,60,55,64,68,64,59,60,0,70],
[58,70,59,64,69,54,72,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,73,60,51,93,46,58,58,52],
[52,0,72,50,67,84,65,63,58,33],
[58,59,0,53,61,82,49,56,66,33],
[71,81,78,0,74,107,62,88,69,55],
[80,64,70,57,0,87,70,58,71,38],
[38,47,49,24,44,0,34,53,42,30],
[85,66,82,69,61,97,0,77,65,71],
[73,68,75,43,73,78,54,0,65,49],
[73,73,65,62,60,89,66,66,0,52],
[79,98,98,76,93,101,60,82,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,64,66,71,64,55,59,60,57],
[74,0,68,74,75,57,66,69,64,69],
[67,63,0,73,76,71,59,66,63,62],
[65,57,58,0,65,65,56,64,65,57],
[60,56,55,66,0,57,49,60,60,60],
[67,74,60,66,74,0,68,61,67,62],
[76,65,72,75,82,63,0,65,67,60],
[72,62,65,67,71,70,66,0,68,60],
[71,67,68,66,71,64,64,63,0,65],
[74,62,69,74,71,69,71,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,54,60,61,59,60,51,61,59],
[65,0,68,65,66,58,56,63,63,66],
[77,63,0,66,65,61,61,69,66,69],
[71,66,65,0,60,65,66,64,65,65],
[70,65,66,71,0,59,60,68,64,68],
[72,73,70,66,72,0,61,72,67,65],
[71,75,70,65,71,70,0,71,68,74],
[80,68,62,67,63,59,60,0,69,67],
[70,68,65,66,67,64,63,62,0,57],
[72,65,62,66,63,66,57,64,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,79,93,64,91,43,69,80],
[32,0,70,32,67,44,54,15,48,28],
[25,61,0,39,100,35,57,27,45,22],
[52,99,92,0,78,43,102,72,59,61],
[38,64,31,53,0,41,48,31,28,38],
[67,87,96,88,90,0,117,67,60,71],
[40,77,74,29,83,14,0,21,29,31],
[88,116,104,59,100,64,110,0,81,90],
[62,83,86,72,103,71,102,50,0,84],
[51,103,109,70,93,60,100,41,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,73,66,75,75,61,67,60,69],
[54,0,60,58,74,61,60,65,59,69],
[58,71,0,61,68,69,57,65,63,69],
[65,73,70,0,71,69,59,64,66,76],
[56,57,63,60,0,61,56,54,55,64],
[56,70,62,62,70,0,54,61,64,66],
[70,71,74,72,75,77,0,67,65,72],
[64,66,66,67,77,70,64,0,68,77],
[71,72,68,65,76,67,66,63,0,79],
[62,62,62,55,67,65,59,54,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,71,68,66,64,66,62,61,63],
[73,0,70,67,65,69,68,65,71,70],
[60,61,0,63,53,60,57,70,56,68],
[63,64,68,0,69,60,60,65,64,67],
[65,66,78,62,0,61,65,63,68,68],
[67,62,71,71,70,0,72,69,60,66],
[65,63,74,71,66,59,0,63,61,65],
[69,66,61,66,68,62,68,0,68,67],
[70,60,75,67,63,71,70,63,0,64],
[68,61,63,64,63,65,66,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,80,67,77,65,64,70,74],
[55,0,61,75,55,66,56,70,58,69],
[60,70,0,61,57,70,58,59,67,70],
[51,56,70,0,60,67,57,65,58,65],
[64,76,74,71,0,69,61,73,66,72],
[54,65,61,64,62,0,53,67,60,75],
[66,75,73,74,70,78,0,63,66,76],
[67,61,72,66,58,64,68,0,65,70],
[61,73,64,73,65,71,65,66,0,69],
[57,62,61,66,59,56,55,61,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,69,45,66,64,71,85,61,80],
[57,0,52,18,39,57,44,48,34,48],
[62,79,0,84,61,79,42,80,75,66],
[86,113,47,0,90,95,62,86,61,67],
[65,92,70,41,0,70,54,101,76,90],
[67,74,52,36,61,0,61,75,71,62],
[60,87,89,69,77,70,0,117,103,99],
[46,83,51,45,30,56,14,0,50,40],
[70,97,56,70,55,60,28,81,0,49],
[51,83,65,64,41,69,32,91,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,59,70,59,70,59,46,63],
[65,0,50,62,51,60,61,60,48,63],
[64,81,0,63,58,47,60,51,36,52],
[72,69,68,0,75,69,59,68,67,68],
[61,80,73,56,0,51,54,62,51,71],
[72,71,84,62,80,0,69,61,57,60],
[61,70,71,72,77,62,0,82,61,79],
[72,71,80,63,69,70,49,0,53,73],
[85,83,95,64,80,74,70,78,0,74],
[68,68,79,63,60,71,52,58,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,68,69,56,64,59,66,76,66],
[72,0,70,76,65,66,74,78,84,72],
[63,61,0,58,61,65,71,69,72,66],
[62,55,73,0,67,66,70,71,70,65],
[75,66,70,64,0,67,68,75,73,68],
[67,65,66,65,64,0,76,74,80,75],
[72,57,60,61,63,55,0,77,61,70],
[65,53,62,60,56,57,54,0,66,67],
[55,47,59,61,58,51,70,65,0,63],
[65,59,65,66,63,56,61,64,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,45,53,40,57,38,42,49],
[63,0,48,49,42,49,61,58,22,42],
[64,83,0,60,61,55,68,44,66,52],
[86,82,71,0,87,62,80,69,71,72],
[78,89,70,44,0,50,62,53,60,65],
[91,82,76,69,81,0,65,68,66,61],
[74,70,63,51,69,66,0,55,53,69],
[93,73,87,62,78,63,76,0,42,56],
[89,109,65,60,71,65,78,89,0,69],
[82,89,79,59,66,70,62,75,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,50,50,52,52,62,48,62],
[73,0,73,62,58,59,56,61,64,80],
[71,58,0,66,62,64,59,62,63,74],
[81,69,65,0,61,70,64,74,65,86],
[81,73,69,70,0,65,68,75,74,81],
[79,72,67,61,66,0,77,71,78,77],
[79,75,72,67,63,54,0,69,65,80],
[69,70,69,57,56,60,62,0,61,75],
[83,67,68,66,57,53,66,70,0,73],
[69,51,57,45,50,54,51,56,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,71,122,113,76,19,53,41,69],
[86,0,59,98,94,102,71,79,67,76],
[60,72,0,96,96,59,19,53,68,52],
[9,33,35,0,50,50,19,44,24,52],
[18,37,35,81,0,61,37,55,50,28],
[55,29,72,81,70,0,47,55,70,54],
[112,60,112,112,94,84,0,79,77,79],
[78,52,78,87,76,76,52,0,78,104],
[90,64,63,107,81,61,54,53,0,73],
[62,55,79,79,103,77,52,27,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,67,78,73,68,67,80,59,66],
[69,0,69,64,72,60,73,76,68,64],
[64,62,0,72,71,65,65,72,66,66],
[53,67,59,0,72,58,57,64,58,66],
[58,59,60,59,0,56,54,67,67,56],
[63,71,66,73,75,0,65,71,68,68],
[64,58,66,74,77,66,0,69,63,58],
[51,55,59,67,64,60,62,0,58,54],
[72,63,65,73,64,63,68,73,0,65],
[65,67,65,65,75,63,73,77,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,76,78,76,79,69,79,72],
[67,0,66,70,82,64,78,62,74,72],
[65,65,0,55,82,77,72,69,67,69],
[55,61,76,0,77,65,75,50,66,67],
[53,49,49,54,0,73,69,58,69,65],
[55,67,54,66,58,0,76,63,74,69],
[52,53,59,56,62,55,0,52,57,61],
[62,69,62,81,73,68,79,0,68,65],
[52,57,64,65,62,57,74,63,0,61],
[59,59,62,64,66,62,70,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,89,59,61,88,92,77,71,80],
[57,0,82,62,60,70,87,56,61,67],
[42,49,0,51,52,47,57,52,44,60],
[72,69,80,0,55,73,90,75,57,83],
[70,71,79,76,0,72,94,70,60,82],
[43,61,84,58,59,0,78,72,57,68],
[39,44,74,41,37,53,0,51,49,54],
[54,75,79,56,61,59,80,0,67,83],
[60,70,87,74,71,74,82,64,0,63],
[51,64,71,48,49,63,77,48,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,58,64,73,70,59,69,74],
[65,0,75,66,63,71,57,68,66,69],
[67,56,0,54,66,64,57,59,77,74],
[73,65,77,0,53,65,65,69,67,72],
[67,68,65,78,0,67,70,74,66,76],
[58,60,67,66,64,0,61,60,70,63],
[61,74,74,66,61,70,0,71,69,64],
[72,63,72,62,57,71,60,0,70,65],
[62,65,54,64,65,61,62,61,0,57],
[57,62,57,59,55,68,67,66,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,69,75,71,58,64,69,78,75],
[43,0,63,58,57,50,58,70,52,62],
[62,68,0,57,72,54,62,86,55,59],
[56,73,74,0,55,52,48,61,55,47],
[60,74,59,76,0,69,54,67,64,55],
[73,81,77,79,62,0,75,60,71,69],
[67,73,69,83,77,56,0,67,56,60],
[62,61,45,70,64,71,64,0,60,54],
[53,79,76,76,67,60,75,71,0,66],
[56,69,72,84,76,62,71,77,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,70,66,70,74,63,66,70,59],
[59,0,68,55,57,68,66,65,71,67],
[61,63,0,63,63,68,70,85,59,75],
[65,76,68,0,72,73,68,75,68,73],
[61,74,68,59,0,62,69,70,58,74],
[57,63,63,58,69,0,59,67,59,56],
[68,65,61,63,62,72,0,66,56,67],
[65,66,46,56,61,64,65,0,56,66],
[61,60,72,63,73,72,75,75,0,69],
[72,64,56,58,57,75,64,65,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,62,64,63,67,67,60,68],
[65,0,68,63,60,64,66,73,64,67],
[64,63,0,68,61,63,64,72,70,67],
[69,68,63,0,67,69,71,75,69,72],
[67,71,70,64,0,74,69,71,67,68],
[68,67,68,62,57,0,64,68,62,73],
[64,65,67,60,62,67,0,67,67,71],
[64,58,59,56,60,63,64,0,65,65],
[71,67,61,62,64,69,64,66,0,73],
[63,64,64,59,63,58,60,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,51,65,59,52,60,60,57],
[75,0,66,65,60,57,65,63,63,66],
[64,65,0,55,57,45,57,60,66,58],
[80,66,76,0,66,67,70,56,66,61],
[66,71,74,65,0,58,53,68,62,57],
[72,74,86,64,73,0,72,74,79,70],
[79,66,74,61,78,59,0,63,63,65],
[71,68,71,75,63,57,68,0,69,63],
[71,68,65,65,69,52,68,62,0,58],
[74,65,73,70,74,61,66,68,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,59,66,71,69,74,67,63,66],
[72,0,65,68,71,75,70,71,76,80],
[72,66,0,74,68,65,65,68,70,73],
[65,63,57,0,70,64,70,66,73,60],
[60,60,63,61,0,58,61,57,64,67],
[62,56,66,67,73,0,66,68,64,66],
[57,61,66,61,70,65,0,68,64,67],
[64,60,63,65,74,63,63,0,68,70],
[68,55,61,58,67,67,67,63,0,60],
[65,51,58,71,64,65,64,61,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,57,60,74,65,43,85,60],
[69,0,43,83,69,78,56,59,84,71],
[66,88,0,86,82,92,76,56,77,69],
[74,48,45,0,64,86,56,49,76,59],
[71,62,49,67,0,101,52,53,78,61],
[57,53,39,45,30,0,43,37,60,62],
[66,75,55,75,79,88,0,71,79,68],
[88,72,75,82,78,94,60,0,95,83],
[46,47,54,55,53,71,52,36,0,50],
[71,60,62,72,70,69,63,48,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,63,50,54,61,59,44,67,53],
[67,0,68,52,61,62,63,66,71,60],
[68,63,0,59,57,58,63,60,69,53],
[81,79,72,0,66,69,64,70,75,64],
[77,70,74,65,0,69,72,68,82,66],
[70,69,73,62,62,0,61,76,74,64],
[72,68,68,67,59,70,0,64,74,66],
[87,65,71,61,63,55,67,0,72,67],
[64,60,62,56,49,57,57,59,0,56],
[78,71,78,67,65,67,65,64,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,71,73,54,60,66,79,67],
[61,0,68,57,64,47,55,54,70,58],
[61,63,0,63,73,51,53,62,55,54],
[60,74,68,0,69,67,57,60,71,61],
[58,67,58,62,0,54,53,58,47,62],
[77,84,80,64,77,0,58,70,78,62],
[71,76,78,74,78,73,0,70,70,64],
[65,77,69,71,73,61,61,0,64,75],
[52,61,76,60,84,53,61,67,0,60],
[64,73,77,70,69,69,67,56,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,52,61,60,60,65,59,71],
[70,0,53,60,65,66,65,64,63,74],
[73,78,0,73,62,64,75,75,75,74],
[79,71,58,0,64,68,70,66,73,70],
[70,66,69,67,0,65,74,68,68,68],
[71,65,67,63,66,0,67,68,74,71],
[71,66,56,61,57,64,0,71,68,65],
[66,67,56,65,63,63,60,0,70,66],
[72,68,56,58,63,57,63,61,0,66],
[60,57,57,61,63,60,66,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,64,63,68,53,59,65,78,65],
[70,0,68,67,72,66,70,79,77,63],
[67,63,0,73,74,60,68,69,66,67],
[68,64,58,0,61,66,68,58,77,75],
[63,59,57,70,0,58,56,66,71,65],
[78,65,71,65,73,0,76,77,80,78],
[72,61,63,63,75,55,0,70,79,69],
[66,52,62,73,65,54,61,0,75,71],
[53,54,65,54,60,51,52,56,0,66],
[66,68,64,56,66,53,62,60,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,74,65,69,65,63,71,72,74],
[68,0,70,78,69,62,65,70,74,67],
[57,61,0,71,60,60,53,61,65,65],
[66,53,60,0,63,59,67,57,59,61],
[62,62,71,68,0,60,63,76,70,72],
[66,69,71,72,71,0,63,75,70,74],
[68,66,78,64,68,68,0,76,71,77],
[60,61,70,74,55,56,55,0,71,64],
[59,57,66,72,61,61,60,60,0,61],
[57,64,66,70,59,57,54,67,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,53,60,70,60,65,63,70,66],
[63,0,47,53,61,60,50,57,58,74],
[78,84,0,65,78,81,71,69,66,87],
[71,78,66,0,66,68,70,67,58,74],
[61,70,53,65,0,67,64,64,67,65],
[71,71,50,63,64,0,60,56,63,71],
[66,81,60,61,67,71,0,63,71,74],
[68,74,62,64,67,75,68,0,71,83],
[61,73,65,73,64,68,60,60,0,74],
[65,57,44,57,66,60,57,48,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,68,68,64,62,67,70,58,82],
[52,0,70,49,60,50,47,55,58,68],
[63,61,0,53,65,59,59,56,57,78],
[63,82,78,0,80,55,72,74,71,78],
[67,71,66,51,0,47,48,68,69,85],
[69,81,72,76,84,0,67,70,62,88],
[64,84,72,59,83,64,0,59,68,82],
[61,76,75,57,63,61,72,0,68,79],
[73,73,74,60,62,69,63,63,0,81],
[49,63,53,53,46,43,49,52,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,73,70,58,63,73,57,71,56],
[51,0,65,52,60,51,58,45,65,58],
[58,66,0,52,56,59,66,47,71,55],
[61,79,79,0,60,65,74,56,72,71],
[73,71,75,71,0,65,74,67,76,67],
[68,80,72,66,66,0,64,58,74,70],
[58,73,65,57,57,67,0,57,64,62],
[74,86,84,75,64,73,74,0,81,79],
[60,66,60,59,55,57,67,50,0,54],
[75,73,76,60,64,61,69,52,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,74,61,73,71,61,76,68],
[61,0,63,75,58,73,65,58,70,65],
[68,68,0,72,66,68,70,64,72,73],
[57,56,59,0,52,62,68,59,68,66],
[70,73,65,79,0,71,79,69,74,74],
[58,58,63,69,60,0,68,62,65,63],
[60,66,61,63,52,63,0,60,66,66],
[70,73,67,72,62,69,71,0,73,72],
[55,61,59,63,57,66,65,58,0,67],
[63,66,58,65,57,68,65,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,67,50,87,67,77,97,67],
[64,0,97,94,50,97,20,47,67,97],
[64,34,0,94,50,87,20,47,67,87],
[64,37,37,0,50,87,0,47,67,67],
[81,81,81,81,0,47,47,47,47,77],
[44,34,44,44,84,0,0,10,67,77],
[64,111,111,131,84,131,0,47,67,111],
[54,84,84,84,84,121,84,0,57,121],
[34,64,64,64,84,64,64,74,0,101],
[64,34,44,64,54,54,20,10,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,72,70,61,75,71,72,73,68],
[69,0,63,75,70,76,71,62,70,71],
[59,68,0,75,69,71,70,66,71,82],
[61,56,56,0,76,61,55,59,71,61],
[70,61,62,55,0,70,72,64,71,62],
[56,55,60,70,61,0,52,61,65,63],
[60,60,61,76,59,79,0,63,71,72],
[59,69,65,72,67,70,68,0,69,73],
[58,61,60,60,60,66,60,62,0,74],
[63,60,49,70,69,68,59,58,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,59,24,58,49,39,50,67,64],
[94,0,81,60,62,48,72,88,99,95],
[72,50,0,29,46,49,60,63,48,68],
[107,71,102,0,58,70,87,70,73,78],
[73,69,85,73,0,80,86,61,66,81],
[82,83,82,61,51,0,70,61,77,74],
[92,59,71,44,45,61,0,76,66,77],
[81,43,68,61,70,70,55,0,79,70],
[64,32,83,58,65,54,65,52,0,64],
[67,36,63,53,50,57,54,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,47,47,57,73,55,48,54,50],
[83,0,85,67,76,79,78,69,52,81],
[84,46,0,61,58,84,72,56,63,68],
[84,64,70,0,72,91,60,70,68,80],
[74,55,73,59,0,79,56,71,66,48],
[58,52,47,40,52,0,63,40,52,53],
[76,53,59,71,75,68,0,61,58,67],
[83,62,75,61,60,91,70,0,75,78],
[77,79,68,63,65,79,73,56,0,67],
[81,50,63,51,83,78,64,53,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,74,73,78,87,73,72,76],
[65,0,66,61,63,54,71,72,66,63],
[69,65,0,71,70,66,85,67,76,69],
[57,70,60,0,77,66,66,75,76,75],
[58,68,61,54,0,58,65,72,49,54],
[53,77,65,65,73,0,81,65,67,68],
[44,60,46,65,66,50,0,66,66,64],
[58,59,64,56,59,66,65,0,55,68],
[59,65,55,55,82,64,65,76,0,62],
[55,68,62,56,77,63,67,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,72,75,65,61,75,81,63,54],
[77,0,71,64,65,64,82,74,66,65],
[59,60,0,40,59,55,70,58,67,56],
[56,67,91,0,66,80,88,71,67,65],
[66,66,72,65,0,70,86,71,66,60],
[70,67,76,51,61,0,66,68,65,69],
[56,49,61,43,45,65,0,54,64,53],
[50,57,73,60,60,63,77,0,62,55],
[68,65,64,64,65,66,67,69,0,59],
[77,66,75,66,71,62,78,76,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,74,75,65,67,72,68,62,71],
[72,0,78,72,77,60,76,67,64,68],
[57,53,0,71,65,58,63,55,62,60],
[56,59,60,0,65,63,67,58,67,58],
[66,54,66,66,0,59,65,61,64,68],
[64,71,73,68,72,0,70,69,71,57],
[59,55,68,64,66,61,0,69,59,66],
[63,64,76,73,70,62,62,0,59,66],
[69,67,69,64,67,60,72,72,0,67],
[60,63,71,73,63,74,65,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,48,59,30,78,62,65,68,66],
[65,0,58,70,62,99,84,89,78,69],
[83,73,0,60,75,91,60,78,60,58],
[72,61,71,0,75,68,54,78,60,70],
[101,69,56,56,0,87,66,96,56,48],
[53,32,40,63,44,0,54,54,66,58],
[69,47,71,77,65,77,0,74,27,47],
[66,42,53,53,35,77,57,0,56,58],
[63,53,71,71,75,65,104,75,0,57],
[65,62,73,61,83,73,84,73,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,72,73,70,69,64,62,53,64],
[67,0,70,76,70,65,63,69,66,64],
[59,61,0,67,63,57,58,60,57,54],
[58,55,64,0,63,63,59,65,52,56],
[61,61,68,68,0,62,61,63,57,57],
[62,66,74,68,69,0,64,67,67,63],
[67,68,73,72,70,67,0,65,54,61],
[69,62,71,66,68,64,66,0,58,62],
[78,65,74,79,74,64,77,73,0,67],
[67,67,77,75,74,68,70,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,65,79,75,64,80,80,77,77],
[48,0,56,54,48,56,46,67,52,48],
[66,75,0,77,61,73,66,85,85,88],
[52,77,54,0,53,62,68,80,57,48],
[56,83,70,78,0,52,64,78,61,84],
[67,75,58,69,79,0,58,77,88,68],
[51,85,65,63,67,73,0,67,64,63],
[51,64,46,51,53,54,64,0,58,62],
[54,79,46,74,70,43,67,73,0,77],
[54,83,43,83,47,63,68,69,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,64,77,98,63,97,90,81,62],
[41,0,83,67,77,65,79,72,62,68],
[67,48,0,70,68,74,65,74,78,52],
[54,64,61,0,74,40,78,61,57,59],
[33,54,63,57,0,63,54,59,61,39],
[68,66,57,91,68,0,80,67,83,61],
[34,52,66,53,77,51,0,62,55,48],
[41,59,57,70,72,64,69,0,73,40],
[50,69,53,74,70,48,76,58,0,55],
[69,63,79,72,92,70,83,91,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,45,53,62,86,45,76,51,50],
[90,0,57,53,43,79,57,57,51,43],
[86,74,0,41,57,67,14,45,82,70],
[78,78,90,0,78,80,47,66,74,83],
[69,88,74,53,0,48,52,62,65,72],
[45,52,64,51,83,0,50,48,51,48],
[86,74,117,84,79,81,0,53,82,96],
[55,74,86,65,69,83,78,0,63,105],
[80,80,49,57,66,80,49,68,0,54],
[81,88,61,48,59,83,35,26,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,51,56,67,57,36,46,64,57],
[83,0,61,62,64,72,57,59,60,73],
[80,70,0,84,62,77,77,82,85,91],
[75,69,47,0,56,73,71,58,64,60],
[64,67,69,75,0,83,56,76,78,71],
[74,59,54,58,48,0,65,37,53,62],
[95,74,54,60,75,66,0,41,81,63],
[85,72,49,73,55,94,90,0,77,84],
[67,71,46,67,53,78,50,54,0,59],
[74,58,40,71,60,69,68,47,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,61,68,55,55,68,78,76,62],
[55,0,73,64,59,52,62,61,74,56],
[70,58,0,66,60,54,65,72,73,58],
[63,67,65,0,69,53,66,63,75,65],
[76,72,71,62,0,67,70,63,79,70],
[76,79,77,78,64,0,67,77,78,74],
[63,69,66,65,61,64,0,67,73,64],
[53,70,59,68,68,54,64,0,79,64],
[55,57,58,56,52,53,58,52,0,64],
[69,75,73,66,61,57,67,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,64,62,73,70,70,65,65],
[64,0,70,62,58,65,65,66,70,57],
[61,61,0,63,61,61,67,71,67,60],
[67,69,68,0,65,64,67,72,69,68],
[69,73,70,66,0,67,66,78,74,65],
[58,66,70,67,64,0,67,72,78,72],
[61,66,64,64,65,64,0,71,67,58],
[61,65,60,59,53,59,60,0,61,55],
[66,61,64,62,57,53,64,70,0,57],
[66,74,71,63,66,59,73,76,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,91,66,38,83,73,51,62,63],
[70,0,85,81,65,74,57,59,41,68],
[40,46,0,63,43,36,64,52,49,61],
[65,50,68,0,55,93,70,76,50,55],
[93,66,88,76,0,94,74,74,63,55],
[48,57,95,38,37,0,71,49,68,82],
[58,74,67,61,57,60,0,78,67,80],
[80,72,79,55,57,82,53,0,37,71],
[69,90,82,81,68,63,64,94,0,49],
[68,63,70,76,76,49,51,60,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,55,80,74,78,66,67,92,75],
[63,0,79,81,81,71,80,79,86,82],
[76,52,0,74,72,71,66,63,75,72],
[51,50,57,0,64,55,52,65,45,48],
[57,50,59,67,0,58,78,62,69,79],
[53,60,60,76,73,0,66,66,76,77],
[65,51,65,79,53,65,0,67,75,57],
[64,52,68,66,69,65,64,0,68,60],
[39,45,56,86,62,55,56,63,0,58],
[56,49,59,83,52,54,74,71,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,40,57,50,54,47,71,58,65],
[75,0,68,57,62,75,65,72,48,80],
[91,63,0,68,78,83,70,84,79,64],
[74,74,63,0,51,59,52,64,59,61],
[81,69,53,80,0,64,71,89,68,76],
[77,56,48,72,67,0,49,90,71,68],
[84,66,61,79,60,82,0,82,69,53],
[60,59,47,67,42,41,49,0,59,61],
[73,83,52,72,63,60,62,72,0,76],
[66,51,67,70,55,63,78,70,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,47,64,48,43,60,41,62,50],
[59,0,46,66,60,50,58,44,44,57],
[84,85,0,74,67,57,90,58,75,77],
[67,65,57,0,61,63,73,61,52,69],
[83,71,64,70,0,62,80,67,79,81],
[88,81,74,68,69,0,79,61,70,87],
[71,73,41,58,51,52,0,47,67,47],
[90,87,73,70,64,70,84,0,73,76],
[69,87,56,79,52,61,64,58,0,79],
[81,74,54,62,50,44,84,55,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,111,68,55,63,51,82,78,74],
[56,0,101,83,30,47,41,55,43,59],
[20,30,0,48,12,18,6,40,55,32],
[63,48,83,0,39,63,48,61,68,51],
[76,101,119,92,0,86,70,75,80,61],
[68,84,113,68,45,0,53,82,65,74],
[80,90,125,83,61,78,0,88,89,79],
[49,76,91,70,56,49,43,0,91,49],
[53,88,76,63,51,66,42,40,0,54],
[57,72,99,80,70,57,52,82,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,81,72,74,68,79,71,61,54],
[51,0,65,58,71,59,57,52,56,50],
[50,66,0,60,61,65,59,60,60,59],
[59,73,71,0,75,68,62,56,62,61],
[57,60,70,56,0,66,68,59,67,58],
[63,72,66,63,65,0,56,59,51,52],
[52,74,72,69,63,75,0,61,56,61],
[60,79,71,75,72,72,70,0,61,67],
[70,75,71,69,64,80,75,70,0,65],
[77,81,72,70,73,79,70,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,68,68,68,39,96,95,67,68],
[92,0,85,30,57,82,85,104,75,104],
[63,46,0,28,21,102,56,74,68,73],
[63,101,103,0,85,102,83,130,75,130],
[63,74,110,46,0,101,74,101,67,101],
[92,49,29,29,30,0,78,56,29,48],
[35,46,75,48,57,53,0,82,20,82],
[36,27,57,1,30,75,49,0,48,47],
[64,56,63,56,64,102,111,83,0,102],
[63,27,58,1,30,83,49,84,29,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,61,64,70,83,71,56,64,58],
[59,0,60,61,77,78,74,82,74,62],
[70,71,0,76,71,91,64,68,78,71],
[67,70,55,0,73,78,72,76,77,76],
[61,54,60,58,0,71,55,59,74,58],
[48,53,40,53,60,0,54,58,65,46],
[60,57,67,59,76,77,0,64,75,61],
[75,49,63,55,72,73,67,0,75,58],
[67,57,53,54,57,66,56,56,0,55],
[73,69,60,55,73,85,70,73,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,56,61,47,53,49,52,52,36],
[72,0,83,64,66,67,61,63,58,58],
[75,48,0,58,53,46,64,31,48,38],
[70,67,73,0,63,58,62,71,56,53],
[84,65,78,68,0,71,75,58,55,68],
[78,64,85,73,60,0,75,68,58,63],
[82,70,67,69,56,56,0,61,53,62],
[79,68,100,60,73,63,70,0,74,74],
[79,73,83,75,76,73,78,57,0,57],
[95,73,93,78,63,68,69,57,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,78,67,68,75,60,64,67,66],
[67,0,68,52,64,59,70,71,62,73],
[53,63,0,70,60,66,56,72,60,72],
[64,79,61,0,54,71,51,74,68,77],
[63,67,71,77,0,70,58,67,58,76],
[56,72,65,60,61,0,54,62,59,63],
[71,61,75,80,73,77,0,76,76,68],
[67,60,59,57,64,69,55,0,54,65],
[64,69,71,63,73,72,55,77,0,53],
[65,58,59,54,55,68,63,66,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,56,68,65,65,62,69,52,70],
[57,0,49,44,66,58,44,58,61,60],
[75,82,0,56,78,73,68,85,59,75],
[63,87,75,0,73,66,70,66,65,63],
[66,65,53,58,0,46,55,70,68,66],
[66,73,58,65,85,0,69,81,72,69],
[69,87,63,61,76,62,0,78,62,70],
[62,73,46,65,61,50,53,0,57,70],
[79,70,72,66,63,59,69,74,0,72],
[61,71,56,68,65,62,61,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,46,59,115,34,60,69,34,30],
[65,0,49,35,81,43,59,49,53,49],
[85,82,0,101,131,63,79,79,69,95],
[72,96,30,0,109,50,60,49,60,44],
[16,50,0,22,0,0,56,19,30,16],
[97,88,68,81,131,0,66,79,56,46],
[71,72,52,71,75,65,0,55,89,71],
[62,82,52,82,112,52,76,0,50,92],
[97,78,62,71,101,75,42,81,0,65],
[101,82,36,87,115,85,60,39,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,41,113,77,83,77,57,69,71],
[67,0,18,75,95,79,62,36,77,38],
[90,113,0,98,90,86,62,86,89,77],
[18,56,33,0,48,68,58,33,70,49],
[54,36,41,83,0,65,36,43,59,38],
[48,52,45,63,66,0,45,25,60,55],
[54,69,69,73,95,86,0,73,69,77],
[74,95,45,98,88,106,58,0,72,87],
[62,54,42,61,72,71,62,59,0,49],
[60,93,54,82,93,76,54,44,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,73,65,71,64,69,66,70,59],
[65,0,67,59,69,60,64,61,65,67],
[58,64,0,61,62,57,51,61,60,59],
[66,72,70,0,72,66,59,66,70,67],
[60,62,69,59,0,62,60,72,68,66],
[67,71,74,65,69,0,61,64,71,60],
[62,67,80,72,71,70,0,77,71,70],
[65,70,70,65,59,67,54,0,65,62],
[61,66,71,61,63,60,60,66,0,64],
[72,64,72,64,65,71,61,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,73,71,60,69,64,58,72,57],
[73,0,72,72,71,65,67,68,77,66],
[58,59,0,71,70,68,64,59,64,55],
[60,59,60,0,56,66,59,51,64,54],
[71,60,61,75,0,69,70,63,67,63],
[62,66,63,65,62,0,66,65,73,56],
[67,64,67,72,61,65,0,63,72,63],
[73,63,72,80,68,66,68,0,77,68],
[59,54,67,67,64,58,59,54,0,54],
[74,65,76,77,68,75,68,63,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,79,72,70,69,69,75,70,60],
[58,0,76,71,60,68,74,73,59,62],
[52,55,0,57,50,49,54,57,53,53],
[59,60,74,0,61,65,70,60,63,58],
[61,71,81,70,0,70,71,72,67,73],
[62,63,82,66,61,0,72,64,67,68],
[62,57,77,61,60,59,0,67,63,54],
[56,58,74,71,59,67,64,0,65,58],
[61,72,78,68,64,64,68,66,0,68],
[71,69,78,73,58,63,77,73,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,58,59,71,86,72,66,78,73],
[58,0,59,55,52,80,66,58,75,75],
[73,72,0,76,78,82,73,64,74,71],
[72,76,55,0,66,70,76,69,75,86],
[60,79,53,65,0,66,60,60,72,64],
[45,51,49,61,65,0,65,53,60,64],
[59,65,58,55,71,66,0,60,71,67],
[65,73,67,62,71,78,71,0,72,72],
[53,56,57,56,59,71,60,59,0,59],
[58,56,60,45,67,67,64,59,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,68,60,55,72,66,59,63],
[62,0,68,64,64,64,75,66,66,64],
[60,63,0,56,61,72,77,64,69,70],
[63,67,75,0,60,69,78,68,65,71],
[71,67,70,71,0,69,79,64,71,68],
[76,67,59,62,62,0,77,62,69,64],
[59,56,54,53,52,54,0,60,61,59],
[65,65,67,63,67,69,71,0,62,67],
[72,65,62,66,60,62,70,69,0,78],
[68,67,61,60,63,67,72,64,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,53,67,72,63,69,66,61,55],
[54,0,42,48,50,54,60,44,46,57],
[78,89,0,64,75,67,67,72,68,64],
[64,83,67,0,69,71,73,79,69,68],
[59,81,56,62,0,73,69,64,52,61],
[68,77,64,60,58,0,76,73,62,60],
[62,71,64,58,62,55,0,66,61,54],
[65,87,59,52,67,58,65,0,68,58],
[70,85,63,62,79,69,70,63,0,69],
[76,74,67,63,70,71,77,73,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,53,69,50,58,49,58,72,76],
[73,0,65,78,71,69,67,62,49,52],
[78,66,0,80,66,71,55,86,71,65],
[62,53,51,0,70,68,48,64,57,62],
[81,60,65,61,0,64,58,75,69,60],
[73,62,60,63,67,0,50,68,64,67],
[82,64,76,83,73,81,0,71,83,70],
[73,69,45,67,56,63,60,0,62,57],
[59,82,60,74,62,67,48,69,0,62],
[55,79,66,69,71,64,61,74,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,75,86,79,69,90,73,64],
[62,0,63,78,68,55,63,75,61,54],
[60,68,0,81,80,68,60,87,72,72],
[56,53,50,0,59,60,41,71,79,43],
[45,63,51,72,0,66,62,75,71,62],
[52,76,63,71,65,0,60,83,83,55],
[62,68,71,90,69,71,0,88,75,65],
[41,56,44,60,56,48,43,0,57,55],
[58,70,59,52,60,48,56,74,0,63],
[67,77,59,88,69,76,66,76,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,68,59,64,60,61,54,70,81],
[56,0,69,52,62,70,64,59,60,68],
[63,62,0,49,62,75,58,56,67,68],
[72,79,82,0,79,71,65,77,77,82],
[67,69,69,52,0,66,69,70,66,79],
[71,61,56,60,65,0,59,61,67,72],
[70,67,73,66,62,72,0,60,66,61],
[77,72,75,54,61,70,71,0,71,63],
[61,71,64,54,65,64,65,60,0,63],
[50,63,63,49,52,59,70,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,88,73,56,68,72,67,61,48],
[67,0,86,78,77,67,59,56,68,68],
[43,45,0,36,52,69,54,59,48,66],
[58,53,95,0,78,75,76,69,66,63],
[75,54,79,53,0,74,60,48,60,48],
[63,64,62,56,57,0,55,47,62,60],
[59,72,77,55,71,76,0,84,58,56],
[64,75,72,62,83,84,47,0,66,69],
[70,63,83,65,71,69,73,65,0,79],
[83,63,65,68,83,71,75,62,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,104,40,55,94,60,33,74,67],
[90,0,105,79,75,81,85,65,56,109],
[27,26,0,42,54,66,24,22,36,70],
[91,52,89,0,79,75,109,73,70,92],
[76,56,77,52,0,80,81,56,53,80],
[37,50,65,56,51,0,42,48,31,64],
[71,46,107,22,50,89,0,41,61,81],
[98,66,109,58,75,83,90,0,73,93],
[57,75,95,61,78,100,70,58,0,87],
[64,22,61,39,51,67,50,38,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,47,46,57,55,48,43,69,57],
[77,0,68,61,64,47,66,60,86,68],
[84,63,0,58,68,52,66,48,89,61],
[85,70,73,0,70,57,64,55,78,70],
[74,67,63,61,0,53,66,63,85,55],
[76,84,79,74,78,0,84,63,80,68],
[83,65,65,67,65,47,0,52,88,67],
[88,71,83,76,68,68,79,0,95,65],
[62,45,42,53,46,51,43,36,0,51],
[74,63,70,61,76,63,64,66,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,79,67,69,62,66,69,71],
[71,0,57,63,70,65,59,67,59,65],
[63,74,0,69,71,69,73,69,73,83],
[52,68,62,0,68,63,66,66,64,69],
[64,61,60,63,0,61,65,58,53,61],
[62,66,62,68,70,0,70,69,68,65],
[69,72,58,65,66,61,0,70,68,64],
[65,64,62,65,73,62,61,0,66,73],
[62,72,58,67,78,63,63,65,0,64],
[60,66,48,62,70,66,67,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,60,60,56,60,66,72,71,66],
[66,0,62,61,68,73,73,83,76,76],
[71,69,0,67,63,72,73,74,74,72],
[71,70,64,0,69,76,73,88,81,76],
[75,63,68,62,0,67,68,76,82,81],
[71,58,59,55,64,0,62,64,71,64],
[65,58,58,58,63,69,0,69,77,59],
[59,48,57,43,55,67,62,0,63,51],
[60,55,57,50,49,60,54,68,0,61],
[65,55,59,55,50,67,72,80,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,62,68,61,57,46,71,68,69],
[50,0,38,50,48,52,45,56,50,52],
[69,93,0,69,77,64,65,84,64,75],
[63,81,62,0,78,65,64,73,55,69],
[70,83,54,53,0,66,53,75,56,75],
[74,79,67,66,65,0,70,78,68,72],
[85,86,66,67,78,61,0,79,77,71],
[60,75,47,58,56,53,52,0,42,69],
[63,81,67,76,75,63,54,89,0,75],
[62,79,56,62,56,59,60,62,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,56,47,53,53,59,59,58,60],
[77,0,61,69,73,67,68,66,63,68],
[75,70,0,64,66,75,69,71,69,71],
[84,62,67,0,67,66,65,71,73,67],
[78,58,65,64,0,60,75,72,66,69],
[78,64,56,65,71,0,70,75,64,76],
[72,63,62,66,56,61,0,65,71,65],
[72,65,60,60,59,56,66,0,70,60],
[73,68,62,58,65,67,60,61,0,59],
[71,63,60,64,62,55,66,71,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,74,79,62,55,75,89,57,83],
[53,0,64,54,46,44,60,63,39,45],
[57,67,0,56,46,50,61,68,41,51],
[52,77,75,0,48,75,73,74,44,55],
[69,85,85,83,0,70,76,78,70,65],
[76,87,81,56,61,0,75,68,53,53],
[56,71,70,58,55,56,0,65,64,50],
[42,68,63,57,53,63,66,0,42,59],
[74,92,90,87,61,78,67,89,0,82],
[48,86,80,76,66,78,81,72,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,63,64,62,58,72,63,52,72],
[72,0,79,73,80,70,86,71,44,74],
[68,52,0,62,59,53,52,64,51,52],
[67,58,69,0,58,57,71,64,48,48],
[69,51,72,73,0,67,76,68,41,71],
[73,61,78,74,64,0,69,64,66,61],
[59,45,79,60,55,62,0,57,47,63],
[68,60,67,67,63,67,74,0,66,65],
[79,87,80,83,90,65,84,65,0,78],
[59,57,79,83,60,70,68,66,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,73,79,80,64,62,67,76],
[64,0,75,69,58,75,61,64,57,67],
[58,56,0,61,55,70,50,62,58,61],
[58,62,70,0,59,72,60,68,66,71],
[52,73,76,72,0,73,68,63,62,65],
[51,56,61,59,58,0,54,71,59,63],
[67,70,81,71,63,77,0,74,69,77],
[69,67,69,63,68,60,57,0,53,72],
[64,74,73,65,69,72,62,78,0,73],
[55,64,70,60,66,68,54,59,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,45,50,66,54,59,57,63,48],
[66,0,54,47,59,57,56,50,61,58],
[86,77,0,61,76,60,89,61,67,72],
[81,84,70,0,69,59,78,68,79,79],
[65,72,55,62,0,63,59,55,55,65],
[77,74,71,72,68,0,71,59,62,71],
[72,75,42,53,72,60,0,60,48,66],
[74,81,70,63,76,72,71,0,66,63],
[68,70,64,52,76,69,83,65,0,74],
[83,73,59,52,66,60,65,68,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,69,70,63,74,69,77,71,71],
[57,0,55,62,71,70,55,72,58,51],
[62,76,0,58,68,81,79,70,76,69],
[61,69,73,0,64,70,62,63,58,60],
[68,60,63,67,0,70,58,72,52,54],
[57,61,50,61,61,0,58,67,43,55],
[62,76,52,69,73,73,0,66,52,63],
[54,59,61,68,59,64,65,0,54,54],
[60,73,55,73,79,88,79,77,0,58],
[60,80,62,71,77,76,68,77,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,72,61,68,64,70,68,75,66],
[58,0,59,69,67,71,66,71,57,51],
[59,72,0,67,72,77,79,67,68,66],
[70,62,64,0,70,74,57,62,65,64],
[63,64,59,61,0,61,69,63,67,78],
[67,60,54,57,70,0,71,65,58,67],
[61,65,52,74,62,60,0,57,56,72],
[63,60,64,69,68,66,74,0,60,69],
[56,74,63,66,64,73,75,71,0,58],
[65,80,65,67,53,64,59,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,62,87,78,76,62,73,71,74],
[53,0,48,91,63,55,68,67,78,65],
[69,83,0,86,69,66,68,81,79,59],
[44,40,45,0,62,52,37,58,68,51],
[53,68,62,69,0,59,47,65,70,61],
[55,76,65,79,72,0,59,76,78,64],
[69,63,63,94,84,72,0,71,78,67],
[58,64,50,73,66,55,60,0,74,52],
[60,53,52,63,61,53,53,57,0,64],
[57,66,72,80,70,67,64,79,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,72,57,56,60,71,66,60],
[69,0,71,68,73,69,67,81,75,58],
[65,60,0,61,58,74,61,62,69,62],
[59,63,70,0,48,69,48,74,73,82],
[74,58,73,83,0,57,69,92,74,56],
[75,62,57,62,74,0,73,83,68,62],
[71,64,70,83,62,58,0,83,72,71],
[60,50,69,57,39,48,48,0,54,57],
[65,56,62,58,57,63,59,77,0,66],
[71,73,69,49,75,69,60,74,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,76,65,54,64,67,45,64,62],
[74,0,103,72,78,76,78,65,66,62],
[55,28,0,56,53,74,62,61,54,49],
[66,59,75,0,70,66,70,63,65,57],
[77,53,78,61,0,64,65,63,63,68],
[67,55,57,65,67,0,71,57,55,55],
[64,53,69,61,66,60,0,56,63,53],
[86,66,70,68,68,74,75,0,70,61],
[67,65,77,66,68,76,68,61,0,61],
[69,69,82,74,63,76,78,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,64,55,73,74,67,81,70],
[62,0,63,61,58,66,67,61,74,70],
[63,68,0,67,69,71,71,71,76,71],
[67,70,64,0,64,77,72,77,81,72],
[76,73,62,67,0,74,71,72,74,74],
[58,65,60,54,57,0,69,66,75,65],
[57,64,60,59,60,62,0,63,71,62],
[64,70,60,54,59,65,68,0,70,70],
[50,57,55,50,57,56,60,61,0,64],
[61,61,60,59,57,66,69,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,79,73,67,57,55,79,70],
[69,0,75,67,71,63,68,73,72,71],
[65,56,0,67,56,58,55,62,72,61],
[52,64,64,0,61,64,51,59,59,61],
[58,60,75,70,0,49,59,58,65,60],
[64,68,73,67,82,0,59,63,68,81],
[74,63,76,80,72,72,0,62,73,67],
[76,58,69,72,73,68,69,0,68,62],
[52,59,59,72,66,63,58,63,0,67],
[61,60,70,70,71,50,64,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,44,48,59,45,50,36,63,53],
[55,0,53,50,55,43,63,47,52,41],
[87,78,0,60,88,65,78,61,77,62],
[83,81,71,0,82,58,81,76,77,58],
[72,76,43,49,0,52,78,59,60,45],
[86,88,66,73,79,0,77,68,59,58],
[81,68,53,50,53,54,0,52,55,53],
[95,84,70,55,72,63,79,0,70,66],
[68,79,54,54,71,72,76,61,0,64],
[78,90,69,73,86,73,78,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,74,63,66,75,87,75,76,74],
[55,0,64,64,54,60,72,60,74,72],
[57,67,0,57,67,64,73,65,79,66],
[68,67,74,0,67,72,79,65,82,81],
[65,77,64,64,0,74,74,58,72,67],
[56,71,67,59,57,0,67,58,78,62],
[44,59,58,52,57,64,0,61,66,60],
[56,71,66,66,73,73,70,0,72,70],
[55,57,52,49,59,53,65,59,0,52],
[57,59,65,50,64,69,71,61,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,67,56,72,46,46,54,66,48],
[87,0,73,60,87,71,61,59,72,74],
[64,58,0,68,81,62,60,47,69,60],
[75,71,63,0,76,60,66,54,66,60],
[59,44,50,55,0,53,44,42,56,49],
[85,60,69,71,78,0,63,69,73,66],
[85,70,71,65,87,68,0,66,82,67],
[77,72,84,77,89,62,65,0,79,73],
[65,59,62,65,75,58,49,52,0,68],
[83,57,71,71,82,65,64,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,52,60,66,60,71,63,68],
[67,0,59,67,65,67,66,69,73,62],
[72,72,0,65,60,68,75,78,66,59],
[79,64,66,0,65,62,64,73,68,67],
[71,66,71,66,0,62,59,74,74,67],
[65,64,63,69,69,0,67,76,56,63],
[71,65,56,67,72,64,0,84,58,60],
[60,62,53,58,57,55,47,0,58,55],
[68,58,65,63,57,75,73,73,0,66],
[63,69,72,64,64,68,71,76,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,60,66,65,62,69,57,65,63],
[61,0,62,72,67,65,60,64,64,66],
[71,69,0,68,70,67,59,69,72,69],
[65,59,63,0,70,56,55,61,62,62],
[66,64,61,61,0,56,59,56,67,52],
[69,66,64,75,75,0,60,66,70,69],
[62,71,72,76,72,71,0,64,71,66],
[74,67,62,70,75,65,67,0,67,58],
[66,67,59,69,64,61,60,64,0,56],
[68,65,62,69,79,62,65,73,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,73,70,64,65,73,67,65],
[72,0,69,71,66,68,63,65,75,71],
[65,62,0,72,65,67,66,61,70,66],
[58,60,59,0,69,58,62,68,65,65],
[61,65,66,62,0,61,62,64,62,68],
[67,63,64,73,70,0,70,67,68,73],
[66,68,65,69,69,61,0,73,69,68],
[58,66,70,63,67,64,58,0,67,69],
[64,56,61,66,69,63,62,64,0,61],
[66,60,65,66,63,58,63,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,71,79,82,74,79,78,80,64],
[57,0,81,74,61,68,59,63,73,62],
[60,50,0,56,59,51,70,54,65,55],
[52,57,75,0,67,63,71,72,65,60],
[49,70,72,64,0,61,62,71,75,67],
[57,63,80,68,70,0,68,74,79,69],
[52,72,61,60,69,63,0,70,81,56],
[53,68,77,59,60,57,61,0,65,63],
[51,58,66,66,56,52,50,66,0,45],
[67,69,76,71,64,62,75,68,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,67,64,67,66,65,59,67],
[62,0,67,83,60,78,73,73,70,79],
[65,64,0,71,66,72,72,81,60,75],
[64,48,60,0,48,65,51,49,57,57],
[67,71,65,83,0,75,73,69,73,73],
[64,53,59,66,56,0,51,57,64,67],
[65,58,59,80,58,80,0,71,67,74],
[66,58,50,82,62,74,60,0,67,62],
[72,61,71,74,58,67,64,64,0,72],
[64,52,56,74,58,64,57,69,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,87,84,72,63,79,63,55,60],
[55,0,67,68,61,43,71,61,48,57],
[44,64,0,59,60,49,62,60,54,46],
[47,63,72,0,66,51,60,58,57,53],
[59,70,71,65,0,57,68,53,60,51],
[68,88,82,80,74,0,86,79,75,50],
[52,60,69,71,63,45,0,66,57,47],
[68,70,71,73,78,52,65,0,64,54],
[76,83,77,74,71,56,74,67,0,67],
[71,74,85,78,80,81,84,77,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,68,49,68,64,59,56,55,64],
[73,0,73,73,77,76,69,64,66,72],
[63,58,0,58,71,61,67,56,49,56],
[82,58,73,0,77,71,74,64,57,69],
[63,54,60,54,0,71,64,54,50,51],
[67,55,70,60,60,0,60,61,55,61],
[72,62,64,57,67,71,0,59,58,61],
[75,67,75,67,77,70,72,0,56,62],
[76,65,82,74,81,76,73,75,0,64],
[67,59,75,62,80,70,70,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,50,52,43,51,44,45,73,72],
[68,0,63,61,64,77,58,72,57,58],
[81,68,0,77,65,73,75,72,85,68],
[79,70,54,0,78,74,62,66,65,70],
[88,67,66,53,0,63,63,69,72,65],
[80,54,58,57,68,0,57,60,69,79],
[87,73,56,69,68,74,0,66,72,75],
[86,59,59,65,62,71,65,0,67,79],
[58,74,46,66,59,62,59,64,0,76],
[59,73,63,61,66,52,56,52,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,74,57,67,69,66,71,68,61],
[74,0,85,72,56,72,56,69,77,68],
[57,46,0,59,36,59,57,68,51,45],
[74,59,72,0,53,74,54,64,71,56],
[64,75,95,78,0,93,56,75,76,57],
[62,59,72,57,38,0,45,63,59,57],
[65,75,74,77,75,86,0,92,71,69],
[60,62,63,67,56,68,39,0,58,53],
[63,54,80,60,55,72,60,73,0,62],
[70,63,86,75,74,74,62,78,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,77,85,63,37,46,54,61,64],
[79,0,75,76,62,56,51,61,77,62],
[54,56,0,69,58,40,43,49,58,62],
[46,55,62,0,51,34,30,50,46,52],
[68,69,73,80,0,52,48,44,62,56],
[94,75,91,97,79,0,61,72,80,77],
[85,80,88,101,83,70,0,64,92,71],
[77,70,82,81,87,59,67,0,68,67],
[70,54,73,85,69,51,39,63,0,68],
[67,69,69,79,75,54,60,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,52,60,53,70,53,71,48,51],
[71,0,70,64,76,67,77,82,64,81],
[79,61,0,79,67,80,71,80,70,72],
[71,67,52,0,67,57,64,73,56,66],
[78,55,64,64,0,81,61,75,52,69],
[61,64,51,74,50,0,63,66,48,55],
[78,54,60,67,70,68,0,74,61,71],
[60,49,51,58,56,65,57,0,44,51],
[83,67,61,75,79,83,70,87,0,77],
[80,50,59,65,62,76,60,80,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,73,66,74,61,77,66,71,68],
[67,0,63,56,69,62,69,61,65,72],
[58,68,0,55,64,55,66,65,64,68],
[65,75,76,0,74,66,79,71,75,73],
[57,62,67,57,0,52,70,67,61,67],
[70,69,76,65,79,0,75,68,67,74],
[54,62,65,52,61,56,0,63,65,71],
[65,70,66,60,64,63,68,0,60,70],
[60,66,67,56,70,64,66,71,0,71],
[63,59,63,58,64,57,60,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,48,60,52,53,54,74,67,53],
[77,0,57,64,58,64,57,66,60,51],
[83,74,0,67,66,76,65,67,70,66],
[71,67,64,0,61,53,58,58,63,60],
[79,73,65,70,0,70,66,78,80,62],
[78,67,55,78,61,0,58,66,71,57],
[77,74,66,73,65,73,0,76,69,56],
[57,65,64,73,53,65,55,0,61,58],
[64,71,61,68,51,60,62,70,0,60],
[78,80,65,71,69,74,75,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,61,61,82,65,64,72,76,63],
[56,0,66,63,73,56,64,60,66,60],
[70,65,0,59,83,72,70,58,77,67],
[70,68,72,0,85,60,66,57,65,63],
[49,58,48,46,0,49,48,52,53,52],
[66,75,59,71,82,0,69,58,66,64],
[67,67,61,65,83,62,0,60,70,57],
[59,71,73,74,79,73,71,0,65,64],
[55,65,54,66,78,65,61,66,0,71],
[68,71,64,68,79,67,74,67,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,62,66,69,60,68,73,70],
[64,0,82,64,66,76,73,73,61,81],
[59,49,0,53,59,55,65,57,60,55],
[69,67,78,0,66,64,60,66,60,73],
[65,65,72,65,0,71,71,64,68,68],
[62,55,76,67,60,0,70,67,60,73],
[71,58,66,71,60,61,0,65,64,70],
[63,58,74,65,67,64,66,0,66,73],
[58,70,71,71,63,71,67,65,0,77],
[61,50,76,58,63,58,61,58,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,92,60,63,91,86,82,67,86],
[67,0,90,72,65,72,83,68,55,72],
[39,41,0,43,55,48,50,49,51,43],
[71,59,88,0,73,72,84,77,61,49],
[68,66,76,58,0,72,83,79,65,80],
[40,59,83,59,59,0,69,82,58,91],
[45,48,81,47,48,62,0,59,53,55],
[49,63,82,54,52,49,72,0,44,53],
[64,76,80,70,66,73,78,87,0,70],
[45,59,88,82,51,40,76,78,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,66,49,67,66,50,53,65],
[64,0,64,74,42,67,72,64,55,53],
[62,67,0,80,55,60,80,60,67,61],
[65,57,51,0,49,43,60,56,41,50],
[82,89,76,82,0,69,86,70,67,59],
[64,64,71,88,62,0,61,70,65,60],
[65,59,51,71,45,70,0,62,66,77],
[81,67,71,75,61,61,69,0,52,59],
[78,76,64,90,64,66,65,79,0,61],
[66,78,70,81,72,71,54,72,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,74,73,68,79,68,75,61,71],
[67,0,69,67,59,71,62,73,56,61],
[57,62,0,63,68,77,55,63,59,63],
[58,64,68,0,62,74,54,75,71,63],
[63,72,63,69,0,66,54,75,64,55],
[52,60,54,57,65,0,52,69,66,51],
[63,69,76,77,77,79,0,82,65,79],
[56,58,68,56,56,62,49,0,51,56],
[70,75,72,60,67,65,66,80,0,64],
[60,70,68,68,76,80,52,75,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,66,73,73,68,81,77,68],
[68,0,71,76,72,86,78,69,80,65],
[58,60,0,67,50,87,65,81,68,60],
[65,55,64,0,68,70,67,76,74,70],
[58,59,81,63,0,80,66,60,69,72],
[58,45,44,61,51,0,47,68,65,51],
[63,53,66,64,65,84,0,73,75,60],
[50,62,50,55,71,63,58,0,68,56],
[54,51,63,57,62,66,56,63,0,60],
[63,66,71,61,59,80,71,75,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,62,76,69,71,64,74,68],
[59,0,57,64,65,62,64,70,68,71],
[64,74,0,61,67,67,68,64,63,68],
[69,67,70,0,67,68,80,62,71,71],
[55,66,64,64,0,59,60,53,64,56],
[62,69,64,63,72,0,71,70,65,67],
[60,67,63,51,71,60,0,52,68,67],
[67,61,67,69,78,61,79,0,68,68],
[57,63,68,60,67,66,63,63,0,66],
[63,60,63,60,75,64,64,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,85,73,70,69,74,73,84,71],
[73,0,95,75,67,64,57,69,71,62],
[46,36,0,64,51,47,60,70,68,59],
[58,56,67,0,70,58,66,64,67,72],
[61,64,80,61,0,53,45,73,75,70],
[62,67,84,73,78,0,84,81,92,71],
[57,74,71,65,86,47,0,75,60,86],
[58,62,61,67,58,50,56,0,62,77],
[47,60,63,64,56,39,71,69,0,79],
[60,69,72,59,61,60,45,54,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,52,59,58,62,76,60,75],
[60,0,68,74,60,65,85,73,75,73],
[64,63,0,50,56,62,67,54,62,60],
[79,57,81,0,67,76,74,68,57,78],
[72,71,75,64,0,66,81,76,69,76],
[73,66,69,55,65,0,59,61,63,73],
[69,46,64,57,50,72,0,70,64,67],
[55,58,77,63,55,70,61,0,65,62],
[71,56,69,74,62,68,67,66,0,65],
[56,58,71,53,55,58,64,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,73,79,66,73,79,63,64],
[58,0,66,67,78,63,65,62,64,61],
[58,65,0,57,72,61,68,57,56,58],
[58,64,74,0,74,59,56,68,59,56],
[52,53,59,57,0,49,62,62,59,52],
[65,68,70,72,82,0,74,74,69,68],
[58,66,63,75,69,57,0,63,60,63],
[52,69,74,63,69,57,68,0,54,62],
[68,67,75,72,72,62,71,77,0,65],
[67,70,73,75,79,63,68,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,21,34,28,35,20,33,31,21,38],
[110,0,53,38,60,74,59,86,91,65],
[97,78,0,40,47,46,69,56,71,72],
[103,93,91,0,67,56,42,74,83,97],
[96,71,84,64,0,74,66,70,85,98],
[111,57,85,75,57,0,34,52,69,72],
[98,72,62,89,65,97,0,98,63,60],
[100,45,75,57,61,79,33,0,70,55],
[110,40,60,48,46,62,68,61,0,62],
[93,66,59,34,33,59,71,76,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,65,65,64,69,65,71,54],
[66,0,60,60,66,62,62,53,71,64],
[69,71,0,65,69,69,74,74,70,62],
[66,71,66,0,76,67,66,64,77,64],
[66,65,62,55,0,61,65,65,66,51],
[67,69,62,64,70,0,68,67,83,57],
[62,69,57,65,66,63,0,65,73,69],
[66,78,57,67,66,64,66,0,69,64],
[60,60,61,54,65,48,58,62,0,59],
[77,67,69,67,80,74,62,67,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,61,70,67,53,68,75,58,51],
[57,0,68,56,61,60,56,59,53,46],
[70,63,0,75,66,67,74,81,59,60],
[61,75,56,0,58,71,55,64,62,50],
[64,70,65,73,0,67,78,63,65,70],
[78,71,64,60,64,0,61,59,56,56],
[63,75,57,76,53,70,0,65,59,53],
[56,72,50,67,68,72,66,0,57,56],
[73,78,72,69,66,75,72,74,0,61],
[80,85,71,81,61,75,78,75,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,69,68,81,73,61,67,85],
[66,0,65,67,63,59,67,79,67,78],
[61,66,0,59,60,69,56,65,83,77],
[62,64,72,0,75,70,71,79,71,82],
[63,68,71,56,0,82,81,73,71,74],
[50,72,62,61,49,0,74,64,67,74],
[58,64,75,60,50,57,0,66,76,74],
[70,52,66,52,58,67,65,0,66,75],
[64,64,48,60,60,64,55,65,0,77],
[46,53,54,49,57,57,57,56,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,57,55,54,68,61,66,61,63],
[64,0,59,54,65,64,61,66,62,60],
[74,72,0,59,70,75,71,79,64,67],
[76,77,72,0,64,82,68,77,65,68],
[77,66,61,67,0,66,70,70,69,62],
[63,67,56,49,65,0,57,61,57,63],
[70,70,60,63,61,74,0,78,62,56],
[65,65,52,54,61,70,53,0,70,52],
[70,69,67,66,62,74,69,61,0,63],
[68,71,64,63,69,68,75,79,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,59,64,57,54,49,60,64,65],
[62,0,64,71,57,74,51,65,75,70],
[72,67,0,66,70,60,76,77,83,70],
[67,60,65,0,61,61,65,69,87,70],
[74,74,61,70,0,59,62,76,74,61],
[77,57,71,70,72,0,69,74,78,74],
[82,80,55,66,69,62,0,74,81,81],
[71,66,54,62,55,57,57,0,67,63],
[67,56,48,44,57,53,50,64,0,59],
[66,61,61,61,70,57,50,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,79,73,76,66,73,68,71,61],
[49,0,65,67,70,61,63,60,62,66],
[52,66,0,70,62,64,76,58,69,57],
[58,64,61,0,62,64,58,57,67,57],
[55,61,69,69,0,67,71,68,65,60],
[65,70,67,67,64,0,66,55,64,61],
[58,68,55,73,60,65,0,59,76,60],
[63,71,73,74,63,76,72,0,68,63],
[60,69,62,64,66,67,55,63,0,58],
[70,65,74,74,71,70,71,68,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,70,73,60,65,76,81,63],
[60,0,72,63,61,54,55,66,68,59],
[59,59,0,62,61,54,57,76,65,69],
[61,68,69,0,77,61,66,77,89,70],
[58,70,70,54,0,58,43,69,65,52],
[71,77,77,70,73,0,63,76,77,79],
[66,76,74,65,88,68,0,81,60,68],
[55,65,55,54,62,55,50,0,69,68],
[50,63,66,42,66,54,71,62,0,63],
[68,72,62,61,79,52,63,63,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,70,74,70,68,67,70,74],
[67,0,67,77,72,70,70,64,68,72],
[65,64,0,62,66,68,69,61,63,64],
[61,54,69,0,61,60,60,59,60,68],
[57,59,65,70,0,59,65,63,63,67],
[61,61,63,71,72,0,67,68,64,68],
[63,61,62,71,66,64,0,56,69,65],
[64,67,70,72,68,63,75,0,68,73],
[61,63,68,71,68,67,62,63,0,61],
[57,59,67,63,64,63,66,58,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,61,62,74,71,66,80,68],
[65,0,74,70,61,64,72,64,75,53],
[67,57,0,54,59,55,66,69,76,60],
[70,61,77,0,59,61,63,74,78,59],
[69,70,72,72,0,61,71,69,80,59],
[57,67,76,70,70,0,77,68,83,52],
[60,59,65,68,60,54,0,77,74,58],
[65,67,62,57,62,63,54,0,69,57],
[51,56,55,53,51,48,57,62,0,47],
[63,78,71,72,72,79,73,74,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,70,71,73,71,72,59,77],
[66,0,65,72,78,80,67,72,60,80],
[63,66,0,72,73,73,63,72,68,80],
[61,59,59,0,73,67,57,65,56,71],
[60,53,58,58,0,66,59,64,49,72],
[58,51,58,64,65,0,64,65,57,71],
[60,64,68,74,72,67,0,72,63,75],
[59,59,59,66,67,66,59,0,51,69],
[72,71,63,75,82,74,68,80,0,72],
[54,51,51,60,59,60,56,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,74,62,71,49,69,66,61],
[60,0,75,75,63,79,68,67,69,72],
[69,56,0,55,62,74,69,69,60,62],
[57,56,76,0,71,82,63,81,64,68],
[69,68,69,60,0,70,57,64,62,61],
[60,52,57,49,61,0,59,69,62,56],
[82,63,62,68,74,72,0,86,71,58],
[62,64,62,50,67,62,45,0,64,51],
[65,62,71,67,69,69,60,67,0,70],
[70,59,69,63,70,75,73,80,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,79,54,67,70,63,69,60,60],
[67,0,83,55,65,70,73,69,65,58],
[52,48,0,48,54,53,60,54,59,56],
[77,76,83,0,70,78,78,64,72,75],
[64,66,77,61,0,80,68,66,65,67],
[61,61,78,53,51,0,63,59,60,65],
[68,58,71,53,63,68,0,61,60,68],
[62,62,77,67,65,72,70,0,58,64],
[71,66,72,59,66,71,71,73,0,66],
[71,73,75,56,64,66,63,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,68,69,47,59,60,56,58,63],
[52,0,59,48,50,52,48,53,59,58],
[63,72,0,62,60,58,62,62,73,61],
[62,83,69,0,58,73,78,66,83,52],
[84,81,71,73,0,64,69,68,65,80],
[72,79,73,58,67,0,62,59,81,68],
[71,83,69,53,62,69,0,61,59,63],
[75,78,69,65,63,72,70,0,84,74],
[73,72,58,48,66,50,72,47,0,59],
[68,73,70,79,51,63,68,57,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,55,58,68,59,53,61,55,56],
[76,0,60,70,81,53,63,58,49,55],
[76,71,0,59,55,65,48,53,67,49],
[73,61,72,0,61,58,57,62,55,57],
[63,50,76,70,0,55,58,50,56,44],
[72,78,66,73,76,0,67,62,64,59],
[78,68,83,74,73,64,0,62,65,50],
[70,73,78,69,81,69,69,0,71,64],
[76,82,64,76,75,67,66,60,0,68],
[75,76,82,74,87,72,81,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,67,59,64,53,63,61,51],
[62,0,60,60,58,60,58,52,51,46],
[66,71,0,71,57,61,61,68,56,53],
[64,71,60,0,64,68,65,60,67,66],
[72,73,74,67,0,76,69,68,70,59],
[67,71,70,63,55,0,56,65,55,57],
[78,73,70,66,62,75,0,67,65,60],
[68,79,63,71,63,66,64,0,67,54],
[70,80,75,64,61,76,66,64,0,66],
[80,85,78,65,72,74,71,77,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,74,74,61,60,78,66,89,73],
[69,0,81,68,63,52,84,79,71,65],
[57,50,0,61,66,54,72,52,78,59],
[57,63,70,0,53,60,86,61,69,73],
[70,68,65,78,0,54,66,64,70,73],
[71,79,77,71,77,0,87,65,93,75],
[53,47,59,45,65,44,0,51,65,66],
[65,52,79,70,67,66,80,0,81,72],
[42,60,53,62,61,38,66,50,0,53],
[58,66,72,58,58,56,65,59,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,57,72,59,66,67,57,55,61],
[63,0,67,61,70,61,73,61,61,61],
[74,64,0,68,63,87,81,66,58,61],
[59,70,63,0,59,68,70,54,62,57],
[72,61,68,72,0,81,72,72,57,66],
[65,70,44,63,50,0,72,53,59,53],
[64,58,50,61,59,59,0,60,53,45],
[74,70,65,77,59,78,71,0,65,56],
[76,70,73,69,74,72,78,66,0,53],
[70,70,70,74,65,78,86,75,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,64,82,70,64,66,69,59],
[55,0,49,52,55,53,60,62,52,55],
[60,82,0,71,78,67,76,71,77,72],
[67,79,60,0,79,66,60,58,71,56],
[49,76,53,52,0,55,48,61,54,53],
[61,78,64,65,76,0,66,79,70,71],
[67,71,55,71,83,65,0,59,61,58],
[65,69,60,73,70,52,72,0,63,74],
[62,79,54,60,77,61,70,68,0,71],
[72,76,59,75,78,60,73,57,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,75,62,68,79,54,69,69,79],
[56,0,56,53,78,67,70,48,76,65],
[56,75,0,45,65,66,65,46,69,87],
[69,78,86,0,82,71,89,64,88,89],
[63,53,66,49,0,57,54,49,67,60],
[52,64,65,60,74,0,62,40,61,66],
[77,61,66,42,77,69,0,39,57,65],
[62,83,85,67,82,91,92,0,68,85],
[62,55,62,43,64,70,74,63,0,66],
[52,66,44,42,71,65,66,46,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,57,49,60,56,55,73,70,62],
[83,0,73,55,76,56,71,89,74,80],
[74,58,0,54,51,69,62,72,70,80],
[82,76,77,0,73,55,79,90,84,81],
[71,55,80,58,0,58,68,72,69,67],
[75,75,62,76,73,0,87,84,83,82],
[76,60,69,52,63,44,0,79,65,86],
[58,42,59,41,59,47,52,0,46,52],
[61,57,61,47,62,48,66,85,0,68],
[69,51,51,50,64,49,45,79,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,56,75,62,61,64,64,62,74],
[67,0,57,77,55,60,61,72,51,70],
[75,74,0,84,63,63,73,64,55,71],
[56,54,47,0,55,56,51,51,46,54],
[69,76,68,76,0,63,67,66,59,79],
[70,71,68,75,68,0,61,67,64,69],
[67,70,58,80,64,70,0,66,59,65],
[67,59,67,80,65,64,65,0,69,60],
[69,80,76,85,72,67,72,62,0,77],
[57,61,60,77,52,62,66,71,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,60,66,65,55,62,66,58,65],
[56,0,52,59,70,59,47,72,70,74],
[71,79,0,83,72,55,61,77,72,74],
[65,72,48,0,62,59,67,68,68,67],
[66,61,59,69,0,69,52,60,56,55],
[76,72,76,72,62,0,68,65,57,66],
[69,84,70,64,79,63,0,80,71,70],
[65,59,54,63,71,66,51,0,81,56],
[73,61,59,63,75,74,60,50,0,71],
[66,57,57,64,76,65,61,75,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,54,70,66,60,64,57,58],
[62,0,69,57,73,66,69,66,55,67],
[65,62,0,47,57,58,47,51,59,64],
[77,74,84,0,73,82,62,77,72,71],
[61,58,74,58,0,64,64,56,56,59],
[65,65,73,49,67,0,57,59,65,63],
[71,62,84,69,67,74,0,58,57,61],
[67,65,80,54,75,72,73,0,62,69],
[74,76,72,59,75,66,74,69,0,69],
[73,64,67,60,72,68,70,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,76,69,75,77,81,72,89,62],
[46,0,68,40,57,62,61,32,53,46],
[55,63,0,51,57,60,62,49,59,54],
[62,91,80,0,70,65,71,53,62,51],
[56,74,74,61,0,52,77,57,70,54],
[54,69,71,66,79,0,75,61,65,46],
[50,70,69,60,54,56,0,48,76,64],
[59,99,82,78,74,70,83,0,89,68],
[42,78,72,69,61,66,55,42,0,38],
[69,85,77,80,77,85,67,63,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,63,64,63,61,82,74,65,73],
[59,0,65,54,61,66,69,59,59,61],
[68,66,0,63,64,67,67,65,59,68],
[67,77,68,0,52,44,65,47,66,52],
[68,70,67,79,0,56,76,60,55,73],
[70,65,64,87,75,0,83,67,73,63],
[49,62,64,66,55,48,0,57,60,54],
[57,72,66,84,71,64,74,0,77,75],
[66,72,72,65,76,58,71,54,0,65],
[58,70,63,79,58,68,77,56,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,69,60,54,64,56,50,71,56],
[70,0,61,55,57,66,55,44,59,52],
[62,70,0,59,49,70,60,51,64,59],
[71,76,72,0,55,69,57,60,76,54],
[77,74,82,76,0,73,70,61,78,67],
[67,65,61,62,58,0,63,44,70,53],
[75,76,71,74,61,68,0,63,85,68],
[81,87,80,71,70,87,68,0,78,65],
[60,72,67,55,53,61,46,53,0,59],
[75,79,72,77,64,78,63,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,11,56,60,36,93,34,70,35,49],
[120,0,116,83,69,105,105,93,60,97],
[75,15,0,83,59,60,75,69,39,25],
[71,48,48,0,37,71,48,63,11,37],
[95,62,72,94,0,95,72,60,35,76],
[38,26,71,60,36,0,25,60,39,39],
[97,26,56,83,59,106,0,83,71,60],
[61,38,62,68,71,71,48,0,35,27],
[96,71,92,120,96,92,60,96,0,96],
[82,34,106,94,55,92,71,104,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,76,68,79,76,56,72,88,79],
[59,0,50,49,62,56,52,55,73,69],
[55,81,0,61,72,62,66,63,78,74],
[63,82,70,0,72,69,63,48,79,69],
[52,69,59,59,0,62,56,63,73,68],
[55,75,69,62,69,0,67,71,71,78],
[75,79,65,68,75,64,0,60,79,78],
[59,76,68,83,68,60,71,0,87,82],
[43,58,53,52,58,60,52,44,0,61],
[52,62,57,62,63,53,53,49,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,69,77,65,54,39,61,71],
[68,0,65,72,84,73,70,69,66,64],
[70,66,0,63,72,68,61,59,63,76],
[62,59,68,0,63,59,60,51,46,58],
[54,47,59,68,0,41,41,43,51,58],
[66,58,63,72,90,0,50,47,59,67],
[77,61,70,71,90,81,0,68,71,74],
[92,62,72,80,88,84,63,0,62,77],
[70,65,68,85,80,72,60,69,0,70],
[60,67,55,73,73,64,57,54,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,67,61,74,60,66,63,50,59],
[78,0,74,69,69,74,70,61,66,71],
[64,57,0,78,74,60,57,57,58,65],
[70,62,53,0,65,58,53,62,52,70],
[57,62,57,66,0,61,60,53,56,59],
[71,57,71,73,70,0,61,64,57,81],
[65,61,74,78,71,70,0,63,55,73],
[68,70,74,69,78,67,68,0,58,63],
[81,65,73,79,75,74,76,73,0,77],
[72,60,66,61,72,50,58,68,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,74,75,64,67,70,64,65,72],
[73,0,93,89,65,79,67,77,80,78],
[57,38,0,69,55,52,56,56,63,57],
[56,42,62,0,59,59,61,60,65,60],
[67,66,76,72,0,65,59,70,71,61],
[64,52,79,72,66,0,60,58,69,68],
[61,64,75,70,72,71,0,70,70,72],
[67,54,75,71,61,73,61,0,70,60],
[66,51,68,66,60,62,61,61,0,61],
[59,53,74,71,70,63,59,71,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,86,75,85,65,75,75,77,83],
[45,0,59,61,61,59,50,66,59,72],
[45,72,0,76,82,61,67,71,79,58],
[56,70,55,0,78,55,61,59,70,69],
[46,70,49,53,0,61,37,66,51,60],
[66,72,70,76,70,0,62,76,71,70],
[56,81,64,70,94,69,0,70,83,72],
[56,65,60,72,65,55,61,0,78,62],
[54,72,52,61,80,60,48,53,0,69],
[48,59,73,62,71,61,59,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,71,67,64,66,76,71,71],
[66,0,66,65,66,63,65,69,65,71],
[66,65,0,70,64,64,73,79,75,72],
[60,66,61,0,71,68,67,76,72,76],
[64,65,67,60,0,63,67,75,70,73],
[67,68,67,63,68,0,70,71,72,76],
[65,66,58,64,64,61,0,74,69,73],
[55,62,52,55,56,60,57,0,62,60],
[60,66,56,59,61,59,62,69,0,68],
[60,60,59,55,58,55,58,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,70,75,75,71,76,75,73],
[73,0,87,77,65,75,83,78,65,78],
[67,44,0,68,64,68,76,63,66,70],
[61,54,63,0,68,62,61,74,63,71],
[56,66,67,63,0,77,69,61,77,79],
[56,56,63,69,54,0,73,61,67,70],
[60,48,55,70,62,58,0,74,67,69],
[55,53,68,57,70,70,57,0,77,66],
[56,66,65,68,54,64,64,54,0,75],
[58,53,61,60,52,61,62,65,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,72,65,56,76,78,78,79,94],
[57,0,60,61,56,66,64,71,61,74],
[59,71,0,72,64,68,86,79,80,64],
[66,70,59,0,63,60,82,77,81,71],
[75,75,67,68,0,63,69,82,72,88],
[55,65,63,71,68,0,77,77,79,74],
[53,67,45,49,62,54,0,65,80,59],
[53,60,52,54,49,54,66,0,65,69],
[52,70,51,50,59,52,51,66,0,72],
[37,57,67,60,43,57,72,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,52,60,57,60,51,56,65],
[71,0,85,72,74,68,72,73,64,57],
[72,46,0,63,62,62,66,72,59,70],
[79,59,68,0,64,55,64,62,64,59],
[71,57,69,67,0,63,72,68,72,73],
[74,63,69,76,68,0,85,73,67,74],
[71,59,65,67,59,46,0,66,63,76],
[80,58,59,69,63,58,65,0,58,63],
[75,67,72,67,59,64,68,73,0,70],
[66,74,61,72,58,57,55,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,64,72,61,68,64,70,72,72],
[74,0,67,72,64,66,69,76,60,62],
[67,64,0,75,68,70,67,75,68,64],
[59,59,56,0,66,56,69,69,61,61],
[70,67,63,65,0,63,66,64,64,69],
[63,65,61,75,68,0,69,79,64,70],
[67,62,64,62,65,62,0,73,59,65],
[61,55,56,62,67,52,58,0,62,67],
[59,71,63,70,67,67,72,69,0,70],
[59,69,67,70,62,61,66,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,86,68,92,67,72,95,50,96],
[67,0,79,64,84,66,71,71,47,71],
[45,52,0,57,71,49,49,53,45,64],
[63,67,74,0,51,61,42,78,34,66],
[39,47,60,80,0,53,66,96,72,76],
[64,65,82,70,78,0,75,74,73,84],
[59,60,82,89,65,56,0,69,68,77],
[36,60,78,53,35,57,62,0,60,79],
[81,84,86,97,59,58,63,71,0,81],
[35,60,67,65,55,47,54,52,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,73,55,66,68,54,61,69],
[64,0,75,69,56,62,65,54,53,64],
[65,56,0,78,74,95,68,59,56,79],
[58,62,53,0,38,40,81,24,54,49],
[76,75,57,93,0,67,54,70,65,73],
[65,69,36,91,64,0,52,46,58,55],
[63,66,63,50,77,79,0,33,48,64],
[77,77,72,107,61,85,98,0,78,71],
[70,78,75,77,66,73,83,53,0,69],
[62,67,52,82,58,76,67,60,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,71,51,71,69,64,77,57],
[62,0,68,64,58,55,65,67,66,57],
[67,63,0,68,56,59,59,54,72,55],
[60,67,63,0,56,61,63,58,63,58],
[80,73,75,75,0,82,71,65,81,67],
[60,76,72,70,49,0,62,62,82,71],
[62,66,72,68,60,69,0,58,69,64],
[67,64,77,73,66,69,73,0,73,65],
[54,65,59,68,50,49,62,58,0,53],
[74,74,76,73,64,60,67,66,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,70,69,67,74,67,67,62],
[62,0,65,64,66,65,70,70,72,68],
[65,66,0,72,63,61,74,72,70,65],
[61,67,59,0,67,63,66,79,66,62],
[62,65,68,64,0,62,68,72,74,59],
[64,66,70,68,69,0,75,74,67,62],
[57,61,57,65,63,56,0,69,63,62],
[64,61,59,52,59,57,62,0,59,57],
[64,59,61,65,57,64,68,72,0,57],
[69,63,66,69,72,69,69,74,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,75,58,67,89,76,68,65,75],
[71,0,64,66,68,69,96,81,75,66],
[56,67,0,82,75,79,73,85,71,82],
[73,65,49,0,53,94,70,60,72,64],
[64,63,56,78,0,72,79,94,75,81],
[42,62,52,37,59,0,76,69,74,48],
[55,35,58,61,52,55,0,75,57,55],
[63,50,46,71,37,62,56,0,52,48],
[66,56,60,59,56,57,74,79,0,60],
[56,65,49,67,50,83,76,83,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,68,66,70,64,59,66,70],
[63,0,54,60,58,51,55,59,59,58],
[65,77,0,56,72,69,64,65,74,58],
[63,71,75,0,71,71,69,63,63,70],
[65,73,59,60,0,66,71,69,63,71],
[61,80,62,60,65,0,55,57,66,54],
[67,76,67,62,60,76,0,71,77,66],
[72,72,66,68,62,74,60,0,71,73],
[65,72,57,68,68,65,54,60,0,68],
[61,73,73,61,60,77,65,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,108,70,95,99,83,56,61,45],
[69,0,93,87,72,89,58,51,66,57],
[23,38,0,45,65,62,66,50,44,31],
[61,44,86,0,62,74,75,54,44,42],
[36,59,66,69,0,82,56,55,41,51],
[32,42,69,57,49,0,24,58,40,64],
[48,73,65,56,75,107,0,68,73,62],
[75,80,81,77,76,73,63,0,40,61],
[70,65,87,87,90,91,58,91,0,85],
[86,74,100,89,80,67,69,70,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,75,73,69,61,58,64,65,67],
[68,0,67,75,63,61,66,62,71,76],
[56,64,0,70,66,63,60,62,69,72],
[58,56,61,0,57,65,56,63,61,50],
[62,68,65,74,0,61,58,60,65,65],
[70,70,68,66,70,0,62,62,55,67],
[73,65,71,75,73,69,0,66,75,72],
[67,69,69,68,71,69,65,0,62,66],
[66,60,62,70,66,76,56,69,0,61],
[64,55,59,81,66,64,59,65,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,69,79,74,74,59,67,65,63],
[53,0,65,66,71,65,47,60,67,68],
[62,66,0,70,75,69,65,76,64,65],
[52,65,61,0,73,70,55,70,62,66],
[57,60,56,58,0,66,51,61,64,59],
[57,66,62,61,65,0,57,59,57,62],
[72,84,66,76,80,74,0,69,62,71],
[64,71,55,61,70,72,62,0,62,65],
[66,64,67,69,67,74,69,69,0,73],
[68,63,66,65,72,69,60,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,65,73,68,69,68,77,75,66],
[56,0,65,73,60,73,57,75,67,63],
[66,66,0,82,78,76,66,78,79,65],
[58,58,49,0,57,71,53,71,64,56],
[63,71,53,74,0,71,57,73,65,54],
[62,58,55,60,60,0,60,69,67,56],
[63,74,65,78,74,71,0,81,77,68],
[54,56,53,60,58,62,50,0,62,53],
[56,64,52,67,66,64,54,69,0,58],
[65,68,66,75,77,75,63,78,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,55,66,78,80,56,46,60,80],
[60,0,62,64,76,73,55,56,49,76],
[76,69,0,83,85,71,71,58,65,83],
[65,67,48,0,74,46,51,50,51,58],
[53,55,46,57,0,62,48,45,57,68],
[51,58,60,85,69,0,47,43,53,77],
[75,76,60,80,83,84,0,70,67,92],
[85,75,73,81,86,88,61,0,81,93],
[71,82,66,80,74,78,64,50,0,84],
[51,55,48,73,63,54,39,38,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,64,74,75,54,83,75,67,84],
[87,0,89,71,62,69,87,69,84,72],
[67,42,0,71,53,47,64,67,67,59],
[57,60,60,0,53,55,79,55,55,44],
[56,69,78,78,0,61,66,63,78,68],
[77,62,84,76,70,0,79,69,91,67],
[48,44,67,52,65,52,0,48,60,51],
[56,62,64,76,68,62,83,0,68,63],
[64,47,64,76,53,40,71,63,0,56],
[47,59,72,87,63,64,80,68,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,69,75,70,70,58,77,62,64],
[59,0,65,67,65,65,56,70,55,58],
[62,66,0,71,60,67,60,72,60,61],
[56,64,60,0,61,70,61,67,50,55],
[61,66,71,70,0,68,58,72,58,65],
[61,66,64,61,63,0,55,70,62,59],
[73,75,71,70,73,76,0,74,62,69],
[54,61,59,64,59,61,57,0,49,53],
[69,76,71,81,73,69,69,82,0,64],
[67,73,70,76,66,72,62,78,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,73,70,65,79,67,68,79],
[64,0,65,78,75,69,82,71,70,71],
[60,66,0,74,67,68,86,71,73,76],
[58,53,57,0,60,67,75,65,60,60],
[61,56,64,71,0,73,73,64,70,75],
[66,62,63,64,58,0,72,67,61,67],
[52,49,45,56,58,59,0,61,51,63],
[64,60,60,66,67,64,70,0,63,71],
[63,61,58,71,61,70,80,68,0,75],
[52,60,55,71,56,64,68,60,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,65,67,49,67,60,61,63],
[72,0,75,70,66,55,67,68,70,70],
[64,56,0,62,70,51,68,60,53,60],
[66,61,69,0,72,57,65,68,68,61],
[64,65,61,59,0,51,63,69,61,60],
[82,76,80,74,80,0,79,76,77,62],
[64,64,63,66,68,52,0,68,58,67],
[71,63,71,63,62,55,63,0,74,69],
[70,61,78,63,70,54,73,57,0,65],
[68,61,71,70,71,69,64,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,58,59,68,66,73,69,61,57],
[59,0,55,39,57,59,62,74,54,59],
[73,76,0,54,61,61,69,69,51,57],
[72,92,77,0,68,70,72,83,64,60],
[63,74,70,63,0,61,60,71,54,68],
[65,72,70,61,70,0,55,74,62,56],
[58,69,62,59,71,76,0,74,66,57],
[62,57,62,48,60,57,57,0,50,50],
[70,77,80,67,77,69,65,81,0,60],
[74,72,74,71,63,75,74,81,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,65,57,68,72,71,64,58,71],
[55,0,62,63,58,67,64,55,66,62],
[66,69,0,66,70,73,70,65,63,69],
[74,68,65,0,75,68,72,66,64,73],
[63,73,61,56,0,69,63,66,65,66],
[59,64,58,63,62,0,67,71,66,61],
[60,67,61,59,68,64,0,61,65,67],
[67,76,66,65,65,60,70,0,64,66],
[73,65,68,67,66,65,66,67,0,73],
[60,69,62,58,65,70,64,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,66,70,68,68,62,61,70],
[62,0,64,59,55,55,54,49,57,66],
[61,67,0,58,64,54,61,56,58,58],
[65,72,73,0,57,65,61,61,70,69],
[61,76,67,74,0,68,75,63,65,76],
[63,76,77,66,63,0,67,56,58,68],
[63,77,70,70,56,64,0,59,64,70],
[69,82,75,70,68,75,72,0,65,69],
[70,74,73,61,66,73,67,66,0,75],
[61,65,73,62,55,63,61,62,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,65,74,84,66,66,97,67,79],
[58,0,50,73,70,60,58,70,70,60],
[66,81,0,60,105,80,56,68,81,73],
[57,58,71,0,81,83,46,46,45,60],
[47,61,26,50,0,59,50,60,51,37],
[65,71,51,48,72,0,59,54,57,70],
[65,73,75,85,81,72,0,81,75,86],
[34,61,63,85,71,77,50,0,74,67],
[64,61,50,86,80,74,56,57,0,74],
[52,71,58,71,94,61,45,64,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,65,64,59,54,74,78,54,83],
[85,0,61,71,91,88,88,97,58,89],
[66,70,0,88,71,66,87,66,56,78],
[67,60,43,0,75,51,68,57,34,71],
[72,40,60,56,0,36,74,53,63,61],
[77,43,65,80,95,0,80,94,67,73],
[57,43,44,63,57,51,0,81,55,58],
[53,34,65,74,78,37,50,0,42,63],
[77,73,75,97,68,64,76,89,0,99],
[48,42,53,60,70,58,73,68,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,71,76,65,66,68,70,49,66],
[59,0,64,63,60,57,59,56,44,55],
[60,67,0,69,65,56,52,70,62,48],
[55,68,62,0,61,54,62,67,49,63],
[66,71,66,70,0,54,58,67,55,52],
[65,74,75,77,77,0,64,78,67,56],
[63,72,79,69,73,67,0,73,60,68],
[61,75,61,64,64,53,58,0,60,64],
[82,87,69,82,76,64,71,71,0,53],
[65,76,83,68,79,75,63,67,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,56,53,54,55,57,58,58,65],
[79,0,65,62,64,60,66,72,60,66],
[75,66,0,63,59,55,61,69,63,66],
[78,69,68,0,75,63,75,74,66,74],
[77,67,72,56,0,63,67,72,74,72],
[76,71,76,68,68,0,65,70,80,71],
[74,65,70,56,64,66,0,72,71,69],
[73,59,62,57,59,61,59,0,66,69],
[73,71,68,65,57,51,60,65,0,76],
[66,65,65,57,59,60,62,62,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,82,62,62,62,76,68,64,51],
[52,0,84,55,64,53,69,55,57,45],
[49,47,0,54,43,51,59,45,48,51],
[69,76,77,0,53,53,70,51,72,51],
[69,67,88,78,0,67,86,66,72,62],
[69,78,80,78,64,0,84,75,83,70],
[55,62,72,61,45,47,0,52,59,52],
[63,76,86,80,65,56,79,0,70,51],
[67,74,83,59,59,48,72,61,0,60],
[80,86,80,80,69,61,79,80,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,56,64,61,58,73,63,61],
[69,0,78,74,65,65,63,75,65,66],
[63,53,0,61,67,66,61,71,61,66],
[75,57,70,0,66,70,65,72,64,72],
[67,66,64,65,0,64,66,68,59,70],
[70,66,65,61,67,0,65,73,64,68],
[73,68,70,66,65,66,0,76,72,75],
[58,56,60,59,63,58,55,0,55,63],
[68,66,70,67,72,67,59,76,0,67],
[70,65,65,59,61,63,56,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,68,65,58,72,76,64,76],
[72,0,71,71,53,60,58,67,65,75],
[66,60,0,69,56,52,54,69,56,66],
[63,60,62,0,51,64,63,66,66,64],
[66,78,75,80,0,64,71,77,69,69],
[73,71,79,67,67,0,63,75,64,72],
[59,73,77,68,60,68,0,72,65,74],
[55,64,62,65,54,56,59,0,54,57],
[67,66,75,65,62,67,66,77,0,75],
[55,56,65,67,62,59,57,74,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,71,73,55,65,61,64,67,65],
[50,0,55,53,61,53,54,57,36,57],
[60,76,0,77,74,71,65,74,53,79],
[58,78,54,0,53,64,56,52,50,74],
[76,70,57,78,0,60,60,62,57,72],
[66,78,60,67,71,0,70,72,63,79],
[70,77,66,75,71,61,0,62,52,67],
[67,74,57,79,69,59,69,0,61,68],
[64,95,78,81,74,68,79,70,0,77],
[66,74,52,57,59,52,64,63,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,69,56,65,65,54,62,60,60],
[68,0,56,76,67,62,60,54,68,65],
[62,75,0,77,72,72,76,75,65,72],
[75,55,54,0,55,58,56,56,58,63],
[66,64,59,76,0,67,58,57,62,65],
[66,69,59,73,64,0,58,62,70,53],
[77,71,55,75,73,73,0,71,72,69],
[69,77,56,75,74,69,60,0,70,71],
[71,63,66,73,69,61,59,61,0,63],
[71,66,59,68,66,78,62,60,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,58,66,74,66,64,72,64,69],
[65,0,73,69,81,67,62,74,62,61],
[73,58,0,63,73,73,65,79,60,55],
[65,62,68,0,76,68,60,70,71,47],
[57,50,58,55,0,57,55,64,61,47],
[65,64,58,63,74,0,55,71,58,55],
[67,69,66,71,76,76,0,70,64,57],
[59,57,52,61,67,60,61,0,54,57],
[67,69,71,60,70,73,67,77,0,60],
[62,70,76,84,84,76,74,74,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,69,59,75,75,72,73,79],
[60,0,77,61,54,72,63,70,63,81],
[67,54,0,58,63,75,65,71,72,79],
[62,70,73,0,73,69,69,70,66,67],
[72,77,68,58,0,75,71,73,74,80],
[56,59,56,62,56,0,48,58,61,70],
[56,68,66,62,60,83,0,80,76,69],
[59,61,60,61,58,73,51,0,57,79],
[58,68,59,65,57,70,55,74,0,72],
[52,50,52,64,51,61,62,52,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,58,74,49,70,59,60,67],
[63,0,62,65,66,49,71,75,57,75],
[59,69,0,61,68,56,60,60,55,63],
[73,66,70,0,67,57,70,68,63,66],
[57,65,63,64,0,51,69,56,53,57],
[82,82,75,74,80,0,85,81,63,82],
[61,60,71,61,62,46,0,55,47,62],
[72,56,71,63,75,50,76,0,60,67],
[71,74,76,68,78,68,84,71,0,65],
[64,56,68,65,74,49,69,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,10,85,55,15,29,64,39,10],
[96,0,72,119,60,46,71,71,93,66],
[121,59,0,92,91,44,60,91,67,65],
[46,12,39,0,38,49,11,12,42,41],
[76,71,40,93,0,18,68,71,41,70],
[116,85,87,82,113,0,58,85,63,92],
[102,60,71,120,63,73,0,96,69,68],
[67,60,40,119,60,46,35,0,66,41],
[92,38,64,89,90,68,62,65,0,68],
[121,65,66,90,61,39,63,90,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,85,67,51,61,70,65,67,66],
[64,0,74,57,57,69,64,58,71,64],
[46,57,0,29,41,47,55,63,50,56],
[64,74,102,0,81,66,67,77,79,71],
[80,74,90,50,0,82,76,92,76,69],
[70,62,84,65,49,0,61,72,55,57],
[61,67,76,64,55,70,0,60,76,62],
[66,73,68,54,39,59,71,0,56,70],
[64,60,81,52,55,76,55,75,0,72],
[65,67,75,60,62,74,69,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,65,66,60,64,62,67,66],
[66,0,74,63,67,67,70,63,74,65],
[64,57,0,60,61,66,65,67,66,58],
[66,68,71,0,61,66,72,66,66,63],
[65,64,70,70,0,70,69,76,70,71],
[71,64,65,65,61,0,61,72,62,57],
[67,61,66,59,62,70,0,67,64,61],
[69,68,64,65,55,59,64,0,58,61],
[64,57,65,65,61,69,67,73,0,57],
[65,66,73,68,60,74,70,70,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,64,63,57,63,57,60,90,74],
[54,0,51,51,49,53,59,57,70,69],
[67,80,0,71,60,63,54,66,71,73],
[68,80,60,0,63,61,55,62,79,81],
[74,82,71,68,0,67,58,69,80,77],
[68,78,68,70,64,0,67,76,77,73],
[74,72,77,76,73,64,0,74,87,78],
[71,74,65,69,62,55,57,0,77,66],
[41,61,60,52,51,54,44,54,0,65],
[57,62,58,50,54,58,53,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,66,64,75,63,70,64,74],
[58,0,67,64,48,60,49,63,64,62],
[62,64,0,62,63,60,58,70,78,77],
[65,67,69,0,62,70,55,64,72,77],
[67,83,68,69,0,76,57,74,72,72],
[56,71,71,61,55,0,53,64,64,62],
[68,82,73,76,74,78,0,65,70,67],
[61,68,61,67,57,67,66,0,75,76],
[67,67,53,59,59,67,61,56,0,63],
[57,69,54,54,59,69,64,55,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,55,71,63,82,56,72,63,85],
[67,0,53,77,66,62,60,66,63,76],
[76,78,0,67,68,87,65,72,69,69],
[60,54,64,0,47,71,61,66,61,63],
[68,65,63,84,0,77,72,69,62,80],
[49,69,44,60,54,0,57,58,64,56],
[75,71,66,70,59,74,0,79,68,80],
[59,65,59,65,62,73,52,0,63,63],
[68,68,62,70,69,67,63,68,0,71],
[46,55,62,68,51,75,51,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,78,46,72,18,57,32,43],
[60,0,106,78,34,54,64,66,60,71],
[59,25,0,66,39,14,31,45,59,25],
[53,53,65,0,67,28,39,39,53,39],
[85,97,92,64,0,72,92,103,103,103],
[59,77,117,103,59,0,49,91,59,45],
[113,67,100,92,39,82,0,67,39,53],
[74,65,86,92,28,40,64,0,74,51],
[99,71,72,78,28,72,92,57,0,39],
[88,60,106,92,28,86,78,80,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,117,70,61,102,83,70,76,116],
[64,0,90,55,68,99,51,59,68,62],
[14,41,0,47,67,85,72,52,50,86],
[61,76,84,0,55,66,81,67,38,85],
[70,63,64,76,0,79,70,61,65,75],
[29,32,46,65,52,0,51,48,34,61],
[48,80,59,50,61,80,0,56,72,86],
[61,72,79,64,70,83,75,0,51,80],
[55,63,81,93,66,97,59,80,0,83],
[15,69,45,46,56,70,45,51,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,67,62,76,64,66,63,70],
[65,0,64,67,57,57,65,61,65,68],
[61,67,0,74,63,56,60,61,66,69],
[64,64,57,0,48,60,60,60,58,63],
[69,74,68,83,0,70,79,59,79,71],
[55,74,75,71,61,0,62,71,64,67],
[67,66,71,71,52,69,0,64,64,60],
[65,70,70,71,72,60,67,0,73,62],
[68,66,65,73,52,67,67,58,0,64],
[61,63,62,68,60,64,71,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,66,55,60,53,59,74,68,67],
[57,0,69,60,58,50,59,77,64,52],
[65,62,0,54,59,40,50,81,65,53],
[76,71,77,0,62,67,61,79,70,68],
[71,73,72,69,0,66,60,86,76,71],
[78,81,91,64,65,0,72,86,71,77],
[72,72,81,70,71,59,0,77,69,69],
[57,54,50,52,45,45,54,0,57,51],
[63,67,66,61,55,60,62,74,0,63],
[64,79,78,63,60,54,62,80,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,34,58,60,80,55,69,76,62],
[49,0,60,65,65,62,51,60,58,66],
[97,71,0,77,87,80,81,85,64,60],
[73,66,54,0,85,75,63,69,74,74],
[71,66,44,46,0,75,71,72,64,62],
[51,69,51,56,56,0,56,74,62,66],
[76,80,50,68,60,75,0,63,70,75],
[62,71,46,62,59,57,68,0,77,60],
[55,73,67,57,67,69,61,54,0,72],
[69,65,71,57,69,65,56,71,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,50,74,46,67,47,60,85,62],
[66,0,58,79,42,58,54,77,85,63],
[81,73,0,79,73,62,52,77,88,59],
[57,52,52,0,39,38,44,50,74,37],
[85,89,58,92,0,80,66,71,91,75],
[64,73,69,93,51,0,58,71,91,57],
[84,77,79,87,65,73,0,76,88,62],
[71,54,54,81,60,60,55,0,83,56],
[46,46,43,57,40,40,43,48,0,38],
[69,68,72,94,56,74,69,75,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,60,87,71,34,65,83,47,56],
[58,0,71,96,72,80,92,69,56,61],
[71,60,0,107,78,33,49,106,42,73],
[44,35,24,0,46,24,40,31,36,56],
[60,59,53,85,0,61,39,83,45,56],
[97,51,98,107,70,0,83,80,68,75],
[66,39,82,91,92,48,0,99,67,62],
[48,62,25,100,48,51,32,0,15,51],
[84,75,89,95,86,63,64,116,0,73],
[75,70,58,75,75,56,69,80,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,60,69,54,67,82,65,69,62],
[62,0,59,68,51,78,68,65,58,49],
[71,72,0,85,86,82,84,83,71,65],
[62,63,46,0,55,73,60,61,51,61],
[77,80,45,76,0,75,88,57,78,74],
[64,53,49,58,56,0,58,63,51,69],
[49,63,47,71,43,73,0,62,57,52],
[66,66,48,70,74,68,69,0,70,74],
[62,73,60,80,53,80,74,61,0,63],
[69,82,66,70,57,62,79,57,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,55,64,63,66,59,69,65,73],
[78,0,62,69,63,79,76,77,79,80],
[76,69,0,67,64,75,81,71,72,79],
[67,62,64,0,69,71,69,68,73,70],
[68,68,67,62,0,73,73,74,68,72],
[65,52,56,60,58,0,68,63,71,73],
[72,55,50,62,58,63,0,62,57,74],
[62,54,60,63,57,68,69,0,62,70],
[66,52,59,58,63,60,74,69,0,65],
[58,51,52,61,59,58,57,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,82,76,54,65,83,62,79,62],
[62,0,70,74,57,54,75,50,63,60],
[49,61,0,49,50,44,67,50,60,50],
[55,57,82,0,67,72,71,63,72,62],
[77,74,81,64,0,71,78,66,92,72],
[66,77,87,59,60,0,69,69,82,64],
[48,56,64,60,53,62,0,60,63,67],
[69,81,81,68,65,62,71,0,80,69],
[52,68,71,59,39,49,68,51,0,54],
[69,71,81,69,59,67,64,62,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,80,68,66,58,67,75,61],
[62,0,60,66,79,78,68,74,66,74],
[63,71,0,65,66,71,69,63,64,63],
[51,65,66,0,63,75,67,74,70,68],
[63,52,65,68,0,68,61,71,65,65],
[65,53,60,56,63,0,49,58,60,53],
[73,63,62,64,70,82,0,64,73,69],
[64,57,68,57,60,73,67,0,58,63],
[56,65,67,61,66,71,58,73,0,69],
[70,57,68,63,66,78,62,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,67,68,63,77,83,72,70],
[59,0,58,60,65,63,69,68,68,69],
[65,73,0,74,77,67,75,73,77,58],
[64,71,57,0,61,69,68,71,76,60],
[63,66,54,70,0,66,71,79,71,62],
[68,68,64,62,65,0,76,70,71,68],
[54,62,56,63,60,55,0,68,65,57],
[48,63,58,60,52,61,63,0,54,53],
[59,63,54,55,60,60,66,77,0,56],
[61,62,73,71,69,63,74,78,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,60,70,52,52,69,54,64,74],
[50,0,41,70,32,45,57,30,61,70],
[71,90,0,70,64,75,59,63,70,91],
[61,61,61,0,38,64,59,57,60,88],
[79,99,67,93,0,76,65,67,90,104],
[79,86,56,67,55,0,71,70,78,78],
[62,74,72,72,66,60,0,61,80,96],
[77,101,68,74,64,61,70,0,77,93],
[67,70,61,71,41,53,51,54,0,88],
[57,61,40,43,27,53,35,38,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,59,50,73,67,71,84,64,80],
[69,0,70,68,85,74,77,81,65,78],
[72,61,0,73,82,88,68,90,69,87],
[81,63,58,0,70,74,69,82,58,75],
[58,46,49,61,0,66,75,70,47,63],
[64,57,43,57,65,0,64,60,65,70],
[60,54,63,62,56,67,0,70,68,70],
[47,50,41,49,61,71,61,0,48,61],
[67,66,62,73,84,66,63,83,0,86],
[51,53,44,56,68,61,61,70,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,68,64,63,64,60,63,60],
[65,0,66,71,64,76,59,64,71,63],
[68,65,0,69,66,72,63,66,58,62],
[63,60,62,0,56,67,59,66,59,61],
[67,67,65,75,0,69,68,64,72,59],
[68,55,59,64,62,0,61,52,55,57],
[67,72,68,72,63,70,0,58,62,63],
[71,67,65,65,67,79,73,0,67,68],
[68,60,73,72,59,76,69,64,0,62],
[71,68,69,70,72,74,68,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,73,70,63,60,55,55,59],
[64,0,82,68,72,74,58,62,54,61],
[72,49,0,60,60,68,50,50,48,50],
[58,63,71,0,64,55,51,53,56,53],
[61,59,71,67,0,45,59,54,55,59],
[68,57,63,76,86,0,71,60,64,57],
[71,73,81,80,72,60,0,69,71,70],
[76,69,81,78,77,71,62,0,76,67],
[76,77,83,75,76,67,60,55,0,63],
[72,70,81,78,72,74,61,64,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,69,65,66,76,71,75,74,75],
[56,0,57,68,65,66,64,75,73,61],
[62,74,0,68,74,71,66,71,74,67],
[66,63,63,0,73,71,62,71,82,75],
[65,66,57,58,0,62,55,68,70,64],
[55,65,60,60,69,0,59,68,77,72],
[60,67,65,69,76,72,0,72,77,72],
[56,56,60,60,63,63,59,0,72,57],
[57,58,57,49,61,54,54,59,0,60],
[56,70,64,56,67,59,59,74,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,67,60,54,67,68,61,62],
[64,0,62,63,59,52,58,63,66,67],
[72,69,0,66,68,67,60,72,67,66],
[64,68,65,0,52,61,64,69,61,69],
[71,72,63,79,0,55,63,69,71,76],
[77,79,64,70,76,0,67,77,66,73],
[64,73,71,67,68,64,0,74,63,79],
[63,68,59,62,62,54,57,0,63,72],
[70,65,64,70,60,65,68,68,0,81],
[69,64,65,62,55,58,52,59,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,64,73,61,57,69,73,62,85],
[53,0,63,68,59,47,57,58,62,67],
[67,68,0,81,76,73,64,67,60,69],
[58,63,50,0,58,60,50,55,57,58],
[70,72,55,73,0,59,67,53,51,68],
[74,84,58,71,72,0,64,71,60,79],
[62,74,67,81,64,67,0,67,69,78],
[58,73,64,76,78,60,64,0,55,67],
[69,69,71,74,80,71,62,76,0,78],
[46,64,62,73,63,52,53,64,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,61,63,64,62,61,58,61],
[68,0,63,61,62,63,66,55,60,61],
[66,68,0,68,70,68,71,62,67,66],
[70,70,63,0,71,66,73,68,58,73],
[68,69,61,60,0,67,71,67,62,71],
[67,68,63,65,64,0,79,69,63,66],
[69,65,60,58,60,52,0,54,59,67],
[70,76,69,63,64,62,77,0,67,69],
[73,71,64,73,69,68,72,64,0,67],
[70,70,65,58,60,65,64,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,53,64,63,56,66,67,61,68],
[74,0,68,78,73,73,71,84,65,72],
[78,63,0,75,71,62,70,70,57,79],
[67,53,56,0,52,53,60,74,55,61],
[68,58,60,79,0,57,76,76,50,64],
[75,58,69,78,74,0,77,74,70,75],
[65,60,61,71,55,54,0,57,54,65],
[64,47,61,57,55,57,74,0,51,65],
[70,66,74,76,81,61,77,80,0,72],
[63,59,52,70,67,56,66,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,74,65,71,66,67,69,72,69],
[69,0,70,66,66,66,59,71,66,66],
[57,61,0,60,59,55,59,62,63,64],
[66,65,71,0,65,62,69,75,66,71],
[60,65,72,66,0,59,68,74,65,63],
[65,65,76,69,72,0,64,73,77,69],
[64,72,72,62,63,67,0,69,75,73],
[62,60,69,56,57,58,62,0,75,65],
[59,65,68,65,66,54,56,56,0,64],
[62,65,67,60,68,62,58,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,44,56,55,63,54,56,48,63],
[76,0,65,61,63,82,64,69,66,79],
[87,66,0,77,77,81,75,72,61,79],
[75,70,54,0,73,79,63,66,66,67],
[76,68,54,58,0,74,63,67,56,71],
[68,49,50,52,57,0,49,60,53,61],
[77,67,56,68,68,82,0,69,64,75],
[75,62,59,65,64,71,62,0,64,69],
[83,65,70,65,75,78,67,67,0,73],
[68,52,52,64,60,70,56,62,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,20,46,46,32,46,0,46,64,46],
[111,0,97,97,50,109,33,101,97,109],
[85,34,0,40,72,34,0,80,38,87],
[85,34,91,0,50,65,45,80,38,113],
[99,81,59,81,0,59,59,101,97,101],
[85,22,97,66,72,0,33,68,64,119],
[131,98,131,86,72,98,0,98,64,131],
[85,30,51,51,30,63,33,0,18,83],
[67,34,93,93,34,67,67,113,0,113],
[85,22,44,18,30,12,0,48,18,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,66,64,62,57,63,57,61,67],
[78,0,71,65,69,71,69,72,72,74],
[65,60,0,55,65,57,63,59,58,75],
[67,66,76,0,60,67,73,71,62,76],
[69,62,66,71,0,61,67,65,72,69],
[74,60,74,64,70,0,62,62,70,72],
[68,62,68,58,64,69,0,62,66,72],
[74,59,72,60,66,69,69,0,69,70],
[70,59,73,69,59,61,65,62,0,71],
[64,57,56,55,62,59,59,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,55,67,65,51,59,60,60,62],
[72,0,45,71,63,52,50,55,53,61],
[76,86,0,74,69,64,54,72,56,77],
[64,60,57,0,68,59,62,67,57,69],
[66,68,62,63,0,72,59,71,69,67],
[80,79,67,72,59,0,66,79,67,75],
[72,81,77,69,72,65,0,64,79,71],
[71,76,59,64,60,52,67,0,75,65],
[71,78,75,74,62,64,52,56,0,71],
[69,70,54,62,64,56,60,66,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,76,84,62,76,67,73,72],
[60,0,63,66,76,60,70,57,56,80],
[62,68,0,55,81,78,71,70,60,66],
[55,65,76,0,89,60,70,55,68,72],
[47,55,50,42,0,69,36,53,51,62],
[69,71,53,71,62,0,59,64,63,72],
[55,61,60,61,95,72,0,72,61,90],
[64,74,61,76,78,67,59,0,64,75],
[58,75,71,63,80,68,70,67,0,91],
[59,51,65,59,69,59,41,56,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,67,75,64,73,60,62,59],
[65,0,65,62,78,60,66,55,72,64],
[71,66,0,59,79,69,63,70,63,60],
[64,69,72,0,74,73,68,64,57,59],
[56,53,52,57,0,57,66,62,51,51],
[67,71,62,58,74,0,61,56,62,61],
[58,65,68,63,65,70,0,61,63,54],
[71,76,61,67,69,75,70,0,67,70],
[69,59,68,74,80,69,68,64,0,58],
[72,67,71,72,80,70,77,61,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,53,65,66,59,47,70,65],
[59,0,46,33,54,46,55,45,56,48],
[59,85,0,67,79,68,78,59,82,69],
[78,98,64,0,74,72,67,73,83,60],
[66,77,52,57,0,56,54,57,72,61],
[65,85,63,59,75,0,53,45,87,51],
[72,76,53,64,77,78,0,66,77,68],
[84,86,72,58,74,86,65,0,84,70],
[61,75,49,48,59,44,54,47,0,55],
[66,83,62,71,70,80,63,61,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,58,87,61,77,61,83,70,60],
[49,0,51,73,56,69,68,70,48,75],
[73,80,0,85,67,59,78,67,69,69],
[44,58,46,0,43,71,73,60,36,60],
[70,75,64,88,0,77,73,86,85,92],
[54,62,72,60,54,0,70,63,69,62],
[70,63,53,58,58,61,0,54,56,58],
[48,61,64,71,45,68,77,0,57,72],
[61,83,62,95,46,62,75,74,0,68],
[71,56,62,71,39,69,73,59,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,66,76,52,61,56,63,58,61],
[77,0,68,74,55,59,63,61,50,62],
[65,63,0,66,62,64,63,64,64,81],
[55,57,65,0,56,58,68,67,52,66],
[79,76,69,75,0,69,64,67,68,76],
[70,72,67,73,62,0,74,66,65,71],
[75,68,68,63,67,57,0,68,75,72],
[68,70,67,64,64,65,63,0,65,69],
[73,81,67,79,63,66,56,66,0,73],
[70,69,50,65,55,60,59,62,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,56,65,42,66,69,63,65,56],
[56,0,60,64,50,70,57,62,68,60],
[75,71,0,65,66,71,68,72,66,69],
[66,67,66,0,57,65,68,67,70,60],
[89,81,65,74,0,73,76,60,68,79],
[65,61,60,66,58,0,68,62,66,66],
[62,74,63,63,55,63,0,69,75,66],
[68,69,59,64,71,69,62,0,77,64],
[66,63,65,61,63,65,56,54,0,48],
[75,71,62,71,52,65,65,67,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,55,69,29,56,43,56,47,46],
[84,0,69,75,74,79,66,77,55,77],
[76,62,0,67,67,63,52,73,64,56],
[62,56,64,0,40,52,57,64,58,58],
[102,57,64,91,0,76,64,80,56,70],
[75,52,68,79,55,0,66,64,76,66],
[88,65,79,74,67,65,0,76,62,68],
[75,54,58,67,51,67,55,0,64,57],
[84,76,67,73,75,55,69,67,0,74],
[85,54,75,73,61,65,63,74,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,55,67,54,68,54,51,60,58],
[73,0,62,67,62,69,65,65,71,57],
[76,69,0,65,71,73,74,63,68,71],
[64,64,66,0,61,66,65,68,61,60],
[77,69,60,70,0,72,63,66,65,55],
[63,62,58,65,59,0,54,61,60,56],
[77,66,57,66,68,77,0,73,70,61],
[80,66,68,63,65,70,58,0,72,69],
[71,60,63,70,66,71,61,59,0,61],
[73,74,60,71,76,75,70,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,48,59,49,63,22,48,22,48],
[98,0,33,86,34,75,34,75,34,75],
[83,98,0,53,75,60,53,116,90,116],
[72,45,78,0,79,67,72,105,52,105],
[82,97,56,52,0,63,30,89,22,74],
[68,56,71,64,68,0,72,101,64,116],
[109,97,78,59,101,59,0,116,63,89],
[83,56,15,26,42,30,15,0,0,30],
[109,97,41,79,109,67,68,131,0,131],
[83,56,15,26,57,15,42,101,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,58,65,71,59,66,79,55],
[65,0,71,69,71,85,73,75,76,70],
[62,60,0,63,62,69,62,63,78,62],
[73,62,68,0,59,83,77,70,80,60],
[66,60,69,72,0,66,67,71,77,57],
[60,46,62,48,65,0,64,67,64,64],
[72,58,69,54,64,67,0,62,90,63],
[65,56,68,61,60,64,69,0,69,62],
[52,55,53,51,54,67,41,62,0,64],
[76,61,69,71,74,67,68,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,63,65,63,70,75,65,57,64],
[75,0,77,77,53,66,75,71,55,70],
[68,54,0,63,50,62,71,57,48,63],
[66,54,68,0,65,69,71,68,57,61],
[68,78,81,66,0,65,81,68,71,81],
[61,65,69,62,66,0,68,72,64,70],
[56,56,60,60,50,63,0,51,53,59],
[66,60,74,63,63,59,80,0,57,57],
[74,76,83,74,60,67,78,74,0,74],
[67,61,68,70,50,61,72,74,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,64,58,74,54,63,67,59],
[67,0,58,68,56,78,53,56,70,62],
[69,73,0,66,69,77,62,57,67,66],
[67,63,65,0,52,70,58,53,65,67],
[73,75,62,79,0,87,67,62,67,77],
[57,53,54,61,44,0,54,52,49,47],
[77,78,69,73,64,77,0,65,73,71],
[68,75,74,78,69,79,66,0,73,65],
[64,61,64,66,64,82,58,58,0,61],
[72,69,65,64,54,84,60,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,71,63,81,89,65,72,51,73],
[49,0,71,77,65,71,59,37,63,62],
[60,60,0,83,63,76,75,69,70,70],
[68,54,48,0,50,72,69,52,56,54],
[50,66,68,81,0,74,62,70,76,62],
[42,60,55,59,57,0,50,44,59,29],
[66,72,56,62,69,81,0,53,68,48],
[59,94,62,79,61,87,78,0,72,71],
[80,68,61,75,55,72,63,59,0,58],
[58,69,61,77,69,102,83,60,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,82,51,57,62,67,59,68,82],
[46,0,70,44,53,60,64,60,57,66],
[49,61,0,28,54,60,52,52,40,65],
[80,87,103,0,82,71,65,62,73,90],
[74,78,77,49,0,66,60,66,62,72],
[69,71,71,60,65,0,58,50,46,72],
[64,67,79,66,71,73,0,76,53,68],
[72,71,79,69,65,81,55,0,76,87],
[63,74,91,58,69,85,78,55,0,80],
[49,65,66,41,59,59,63,44,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,78,79,65,76,70,61,63,62],
[65,0,71,86,71,81,84,72,75,62],
[53,60,0,78,56,66,53,59,73,57],
[52,45,53,0,48,63,54,49,52,60],
[66,60,75,83,0,84,77,71,57,67],
[55,50,65,68,47,0,53,50,61,51],
[61,47,78,77,54,78,0,69,70,62],
[70,59,72,82,60,81,62,0,61,65],
[68,56,58,79,74,70,61,70,0,63],
[69,69,74,71,64,80,69,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,64,58,69,70,81,75,73],
[65,0,62,75,60,73,81,79,77,65],
[71,69,0,72,66,63,68,72,69,73],
[67,56,59,0,65,76,64,73,52,69],
[73,71,65,66,0,70,72,82,75,71],
[62,58,68,55,61,0,63,64,71,75],
[61,50,63,67,59,68,0,79,71,65],
[50,52,59,58,49,67,52,0,64,53],
[56,54,62,79,56,60,60,67,0,61],
[58,66,58,62,60,56,66,78,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,88,95,102,71,73,66,95,70],
[67,0,80,50,74,41,92,55,74,67],
[43,51,0,73,51,42,63,42,98,39],
[36,81,58,0,95,43,90,57,112,61],
[29,57,80,36,0,32,78,35,79,38],
[60,90,89,88,99,0,102,61,122,100],
[58,39,68,41,53,29,0,33,72,67],
[65,76,89,74,96,70,98,0,103,105],
[36,57,33,19,52,9,59,28,0,23],
[61,64,92,70,93,31,64,26,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,57,71,65,58,65,58,51,65],
[64,0,64,60,67,65,53,55,59,55],
[74,67,0,65,72,72,65,58,70,72],
[60,71,66,0,63,65,49,56,58,74],
[66,64,59,68,0,58,60,48,55,65],
[73,66,59,66,73,0,67,54,55,64],
[66,78,66,82,71,64,0,75,64,71],
[73,76,73,75,83,77,56,0,60,83],
[80,72,61,73,76,76,67,71,0,81],
[66,76,59,57,66,67,60,48,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,48,61,62,52,56,53,53,52],
[62,0,60,60,70,71,64,57,56,61],
[83,71,0,62,71,76,64,67,73,63],
[70,71,69,0,71,71,58,67,66,58],
[69,61,60,60,0,65,67,61,50,59],
[79,60,55,60,66,0,55,59,52,66],
[75,67,67,73,64,76,0,69,61,69],
[78,74,64,64,70,72,62,0,58,69],
[78,75,58,65,81,79,70,73,0,66],
[79,70,68,73,72,65,62,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,63,60,69,57,65,54,76,58],
[75,0,64,71,65,61,65,62,78,67],
[68,67,0,70,66,57,75,62,74,73],
[71,60,61,0,71,63,75,74,79,63],
[62,66,65,60,0,57,64,60,77,69],
[74,70,74,68,74,0,62,59,87,77],
[66,66,56,56,67,69,0,66,86,66],
[77,69,69,57,71,72,65,0,78,60],
[55,53,57,52,54,44,45,53,0,60],
[73,64,58,68,62,54,65,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,71,75,80,61,69,73,57,65],
[59,0,68,63,66,65,60,67,54,52],
[60,63,0,68,69,59,55,70,44,51],
[56,68,63,0,70,55,46,71,53,53],
[51,65,62,61,0,57,56,65,49,56],
[70,66,72,76,74,0,60,71,54,56],
[62,71,76,85,75,71,0,73,67,69],
[58,64,61,60,66,60,58,0,54,59],
[74,77,87,78,82,77,64,77,0,64],
[66,79,80,78,75,75,62,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,55,66,69,49,51,66,65,52],
[62,0,61,63,71,63,61,74,74,55],
[76,70,0,75,77,69,66,61,75,58],
[65,68,56,0,64,60,57,73,73,63],
[62,60,54,67,0,59,57,67,66,66],
[82,68,62,71,72,0,72,81,76,66],
[80,70,65,74,74,59,0,73,74,58],
[65,57,70,58,64,50,58,0,58,46],
[66,57,56,58,65,55,57,73,0,62],
[79,76,73,68,65,65,73,85,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,80,68,83,73,65,69,66,50],
[55,0,63,62,75,61,54,63,74,59],
[51,68,0,64,70,65,48,60,66,60],
[63,69,67,0,70,70,61,70,63,64],
[48,56,61,61,0,47,34,58,47,54],
[58,70,66,61,84,0,54,49,58,61],
[66,77,83,70,97,77,0,71,62,57],
[62,68,71,61,73,82,60,0,71,69],
[65,57,65,68,84,73,69,60,0,59],
[81,72,71,67,77,70,74,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,72,73,71,67,73,69,65],
[69,0,79,70,67,63,63,75,74,68],
[61,52,0,71,69,62,60,59,69,62],
[59,61,60,0,67,62,53,60,67,53],
[58,64,62,64,0,54,52,62,63,58],
[60,68,69,69,77,0,59,57,67,62],
[64,68,71,78,79,72,0,64,71,60],
[58,56,72,71,69,74,67,0,72,66],
[62,57,62,64,68,64,60,59,0,62],
[66,63,69,78,73,69,71,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,71,67,77,70,84,75,72,64],
[71,0,65,53,73,72,84,76,72,69],
[60,66,0,64,68,59,75,74,67,62],
[64,78,67,0,64,71,72,76,65,60],
[54,58,63,67,0,66,67,82,68,55],
[61,59,72,60,65,0,86,76,74,65],
[47,47,56,59,64,45,0,68,60,46],
[56,55,57,55,49,55,63,0,55,58],
[59,59,64,66,63,57,71,76,0,60],
[67,62,69,71,76,66,85,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,65,67,63,68,71,77,72],
[72,0,69,66,65,73,66,64,76,75],
[65,62,0,69,53,70,59,77,75,71],
[66,65,62,0,64,71,61,73,73,66],
[64,66,78,67,0,68,68,75,72,73],
[68,58,61,60,63,0,60,67,68,70],
[63,65,72,70,63,71,0,78,87,80],
[60,67,54,58,56,64,53,0,66,69],
[54,55,56,58,59,63,44,65,0,68],
[59,56,60,65,58,61,51,62,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,62,65,66,57,67,74,73],
[69,0,80,70,61,73,68,62,74,78],
[63,51,0,62,56,62,57,63,52,58],
[69,61,69,0,62,80,69,79,73,67],
[66,70,75,69,0,74,60,61,68,71],
[65,58,69,51,57,0,50,60,61,51],
[74,63,74,62,71,81,0,77,69,77],
[64,69,68,52,70,71,54,0,68,69],
[57,57,79,58,63,70,62,63,0,76],
[58,53,73,64,60,80,54,62,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,45,55,73,54,81,62,61,58],
[82,0,68,74,91,61,88,62,69,77],
[86,63,0,65,87,78,84,83,68,77],
[76,57,66,0,86,68,80,75,65,72],
[58,40,44,45,0,51,67,58,70,51],
[77,70,53,63,80,0,75,69,60,64],
[50,43,47,51,64,56,0,52,55,61],
[69,69,48,56,73,62,79,0,67,63],
[70,62,63,66,61,71,76,64,0,60],
[73,54,54,59,80,67,70,68,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,52,44,61,33,45,73,93,20],
[80,0,51,57,61,45,44,58,81,37],
[79,80,0,78,76,39,62,81,92,44],
[87,74,53,0,61,53,82,53,76,39],
[70,70,55,70,0,60,70,55,111,66],
[98,86,92,78,71,0,70,72,78,46],
[86,87,69,49,61,61,0,49,75,30],
[58,73,50,78,76,59,82,0,73,43],
[38,50,39,55,20,53,56,58,0,28],
[111,94,87,92,65,85,101,88,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,41,60,83,63,61,60,50,51],
[79,0,73,68,102,76,86,78,73,63],
[90,58,0,76,100,85,73,80,67,70],
[71,63,55,0,80,69,66,70,55,63],
[48,29,31,51,0,44,46,56,45,41],
[68,55,46,62,87,0,71,71,55,53],
[70,45,58,65,85,60,0,73,63,48],
[71,53,51,61,75,60,58,0,65,47],
[81,58,64,76,86,76,68,66,0,64],
[80,68,61,68,90,78,83,84,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,85,74,78,76,53,83,76,73],
[71,0,64,66,72,67,68,80,77,70],
[46,67,0,73,73,62,40,65,63,63],
[57,65,58,0,67,66,78,70,75,64],
[53,59,58,64,0,67,49,63,69,58],
[55,64,69,65,64,0,67,58,71,60],
[78,63,91,53,82,64,0,65,66,62],
[48,51,66,61,68,73,66,0,74,57],
[55,54,68,56,62,60,65,57,0,60],
[58,61,68,67,73,71,69,74,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,53,57,69,67,80,53,62,65],
[71,0,59,71,72,72,77,68,82,83],
[78,72,0,76,71,71,74,65,71,71],
[74,60,55,0,64,70,66,59,65,71],
[62,59,60,67,0,68,80,61,75,69],
[64,59,60,61,63,0,63,58,64,62],
[51,54,57,65,51,68,0,59,63,71],
[78,63,66,72,70,73,72,0,68,77],
[69,49,60,66,56,67,68,63,0,72],
[66,48,60,60,62,69,60,54,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,67,69,65,67,68,56,69],
[60,0,62,71,67,54,61,60,51,59],
[69,69,0,77,71,68,74,65,66,68],
[64,60,54,0,69,61,59,53,52,65],
[62,64,60,62,0,58,57,57,47,62],
[66,77,63,70,73,0,64,62,64,69],
[64,70,57,72,74,67,0,61,53,65],
[63,71,66,78,74,69,70,0,62,71],
[75,80,65,79,84,67,78,69,0,83],
[62,72,63,66,69,62,66,60,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,73,88,68,69,88,80,86,63],
[67,0,71,87,84,72,79,77,78,51],
[58,60,0,96,55,80,73,57,62,67],
[43,44,35,0,56,52,81,71,62,55],
[63,47,76,75,0,63,68,74,58,51],
[62,59,51,79,68,0,73,74,62,62],
[43,52,58,50,63,58,0,62,65,57],
[51,54,74,60,57,57,69,0,63,61],
[45,53,69,69,73,69,66,68,0,49],
[68,80,64,76,80,69,74,70,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,62,65,68,85,90,70,75],
[67,0,65,60,65,60,80,75,56,79],
[69,66,0,56,58,63,70,77,59,67],
[69,71,75,0,63,63,82,65,53,66],
[66,66,73,68,0,74,97,82,62,90],
[63,71,68,68,57,0,79,68,62,85],
[46,51,61,49,34,52,0,70,43,61],
[41,56,54,66,49,63,61,0,55,69],
[61,75,72,78,69,69,88,76,0,77],
[56,52,64,65,41,46,70,62,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,74,63,72,65,55,62,78,73],
[48,0,59,61,64,57,52,48,79,54],
[57,72,0,58,76,64,50,65,79,66],
[68,70,73,0,80,62,72,62,73,75],
[59,67,55,51,0,50,53,57,61,55],
[66,74,67,69,81,0,63,67,65,80],
[76,79,81,59,78,68,0,68,84,79],
[69,83,66,69,74,64,63,0,68,81],
[53,52,52,58,70,66,47,63,0,60],
[58,77,65,56,76,51,52,50,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,83,81,58,66,72,72,64],
[62,0,80,80,77,61,68,64,70,70],
[62,51,0,78,66,59,65,65,58,64],
[48,51,53,0,64,55,55,68,61,63],
[50,54,65,67,0,44,54,52,55,59],
[73,70,72,76,87,0,69,63,72,77],
[65,63,66,76,77,62,0,68,67,68],
[59,67,66,63,79,68,63,0,61,69],
[59,61,73,70,76,59,64,70,0,65],
[67,61,67,68,72,54,63,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,63,68,59,56,59,63,70],
[71,0,73,65,66,67,66,66,57,76],
[69,58,0,61,71,67,68,65,67,79],
[68,66,70,0,68,60,61,65,70,68],
[63,65,60,63,0,67,64,68,70,74],
[72,64,64,71,64,0,66,62,66,67],
[75,65,63,70,67,65,0,65,71,73],
[72,65,66,66,63,69,66,0,60,69],
[68,74,64,61,61,65,60,71,0,74],
[61,55,52,63,57,64,58,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,63,55,53,61,60,58,59],
[72,0,74,72,61,68,77,68,77,60],
[71,57,0,68,59,65,71,65,67,73],
[68,59,63,0,68,48,64,69,69,56],
[76,70,72,63,0,59,67,64,67,59],
[78,63,66,83,72,0,69,72,84,69],
[70,54,60,67,64,62,0,67,71,61],
[71,63,66,62,67,59,64,0,64,61],
[73,54,64,62,64,47,60,67,0,65],
[72,71,58,75,72,62,70,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,57,70,68,62,68,62,60],
[62,0,56,55,69,56,62,69,54,56],
[66,75,0,65,75,74,76,89,68,64],
[74,76,66,0,77,66,77,70,64,62],
[61,62,56,54,0,51,63,64,50,59],
[63,75,57,65,80,0,64,71,68,70],
[69,69,55,54,68,67,0,66,67,62],
[63,62,42,61,67,60,65,0,57,62],
[69,77,63,67,81,63,64,74,0,65],
[71,75,67,69,72,61,69,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,77,64,68,71,73,67,55,73],
[70,0,78,79,77,77,76,68,63,75],
[54,53,0,71,55,52,58,54,48,52],
[67,52,60,0,65,65,63,77,79,73],
[63,54,76,66,0,65,78,58,65,74],
[60,54,79,66,66,0,77,57,63,58],
[58,55,73,68,53,54,0,50,56,57],
[64,63,77,54,73,74,81,0,83,71],
[76,68,83,52,66,68,75,48,0,61],
[58,56,79,58,57,73,74,60,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,55,60,63,60,64,51,66],
[72,0,64,63,67,70,62,68,59,75],
[64,67,0,63,61,71,52,57,61,69],
[76,68,68,0,57,79,69,70,61,74],
[71,64,70,74,0,76,63,62,64,74],
[68,61,60,52,55,0,54,56,54,62],
[71,69,79,62,68,77,0,64,67,82],
[67,63,74,61,69,75,67,0,64,80],
[80,72,70,70,67,77,64,67,0,80],
[65,56,62,57,57,69,49,51,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,52,57,64,48,50,54,59,58],
[63,0,66,66,69,58,47,60,58,63],
[79,65,0,71,69,69,71,66,70,74],
[74,65,60,0,65,65,63,62,64,68],
[67,62,62,66,0,61,56,61,55,59],
[83,73,62,66,70,0,65,67,65,66],
[81,84,60,68,75,66,0,73,71,73],
[77,71,65,69,70,64,58,0,71,73],
[72,73,61,67,76,66,60,60,0,65],
[73,68,57,63,72,65,58,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,61,55,72,75,72,61,62,49],
[57,0,42,59,79,63,52,47,67,67],
[70,89,0,76,92,82,88,72,63,59],
[76,72,55,0,58,69,75,75,68,50],
[59,52,39,73,0,59,55,36,60,31],
[56,68,49,62,72,0,60,64,47,50],
[59,79,43,56,76,71,0,59,63,51],
[70,84,59,56,95,67,72,0,66,68],
[69,64,68,63,71,84,68,65,0,49],
[82,64,72,81,100,81,80,63,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,68,58,63,61,69,60,49],
[68,0,70,77,64,71,60,71,67,67],
[63,61,0,71,66,63,66,70,54,58],
[63,54,60,0,66,60,66,65,53,63],
[73,67,65,65,0,71,65,78,69,60],
[68,60,68,71,60,0,65,65,60,57],
[70,71,65,65,66,66,0,66,62,57],
[62,60,61,66,53,66,65,0,62,57],
[71,64,77,78,62,71,69,69,0,68],
[82,64,73,68,71,74,74,74,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,61,62,66,73,57,63,75,60],
[77,0,75,57,65,78,59,70,78,55],
[70,56,0,61,62,56,47,61,65,49],
[69,74,70,0,63,73,54,58,76,60],
[65,66,69,68,0,70,65,62,69,66],
[58,53,75,58,61,0,56,70,73,62],
[74,72,84,77,66,75,0,79,76,59],
[68,61,70,73,69,61,52,0,66,54],
[56,53,66,55,62,58,55,65,0,57],
[71,76,82,71,65,69,72,77,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,51,52,69,33,70,61,43,57],
[83,0,81,73,104,66,69,71,39,56],
[80,50,0,67,75,39,69,66,45,66],
[79,58,64,0,62,50,79,61,50,85],
[62,27,56,69,0,39,53,60,32,54],
[98,65,92,81,92,0,104,92,41,96],
[61,62,62,52,78,27,0,58,48,48],
[70,60,65,70,71,39,73,0,53,58],
[88,92,86,81,99,90,83,78,0,64],
[74,75,65,46,77,35,83,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,32,41,57,45,78,68,65,55],
[80,0,91,97,101,37,107,89,65,99],
[99,40,0,104,73,72,99,73,82,49],
[90,34,27,0,88,41,93,88,73,62],
[74,30,58,43,0,23,88,88,76,67],
[86,94,59,90,108,0,114,103,100,103],
[53,24,32,38,43,17,0,59,75,17],
[63,42,58,43,43,28,72,0,38,58],
[66,66,49,58,55,31,56,93,0,61],
[76,32,82,69,64,28,114,73,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,70,69,67,75,64,55,82,63],
[75,0,85,76,86,80,76,65,97,70],
[61,46,0,65,72,60,61,59,91,60],
[62,55,66,0,76,75,62,60,85,53],
[64,45,59,55,0,60,54,61,85,47],
[56,51,71,56,71,0,43,55,84,61],
[67,55,70,69,77,88,0,65,94,60],
[76,66,72,71,70,76,66,0,88,59],
[49,34,40,46,46,47,37,43,0,44],
[68,61,71,78,84,70,71,72,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,66,62,57,74,67,55,74,73],
[52,0,63,60,54,63,63,48,51,65],
[65,68,0,50,60,62,73,56,65,68],
[69,71,81,0,69,92,74,65,80,73],
[74,77,71,62,0,80,64,68,63,77],
[57,68,69,39,51,0,60,50,51,64],
[64,68,58,57,67,71,0,57,65,70],
[76,83,75,66,63,81,74,0,72,72],
[57,80,66,51,68,80,66,59,0,73],
[58,66,63,58,54,67,61,59,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,57,65,43,10,39,70,23,40],
[73,0,67,50,79,60,66,83,73,83],
[74,64,0,78,48,28,47,88,46,66],
[66,81,53,0,67,39,57,90,52,48],
[88,52,83,64,0,83,58,106,65,100],
[121,71,103,92,48,0,84,94,91,94],
[92,65,84,74,73,47,0,84,78,58],
[61,48,43,41,25,37,47,0,61,38],
[108,58,85,79,66,40,53,70,0,70],
[91,48,65,83,31,37,73,93,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,56,50,51,57,56,54,61,58],
[89,0,78,65,59,64,61,66,75,70],
[75,53,0,66,62,72,60,57,76,56],
[81,66,65,0,59,67,55,55,53,59],
[80,72,69,72,0,69,71,61,71,69],
[74,67,59,64,62,0,67,51,62,59],
[75,70,71,76,60,64,0,63,71,69],
[77,65,74,76,70,80,68,0,63,59],
[70,56,55,78,60,69,60,68,0,59],
[73,61,75,72,62,72,62,72,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,50,46,79,76,82,59,49,66],
[78,0,64,69,98,78,81,80,56,62],
[81,67,0,73,87,79,81,81,61,51],
[85,62,58,0,81,63,76,66,61,47],
[52,33,44,50,0,58,91,75,54,51],
[55,53,52,68,73,0,71,70,39,51],
[49,50,50,55,40,60,0,63,35,27],
[72,51,50,65,56,61,68,0,70,53],
[82,75,70,70,77,92,96,61,0,62],
[65,69,80,84,80,80,104,78,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,45,59,54,59,52,64,63,50],
[72,0,63,63,58,67,78,72,67,65],
[86,68,0,60,79,64,65,72,69,77],
[72,68,71,0,70,64,62,68,74,73],
[77,73,52,61,0,64,65,64,71,71],
[72,64,67,67,67,0,81,80,65,74],
[79,53,66,69,66,50,0,73,68,76],
[67,59,59,63,67,51,58,0,56,46],
[68,64,62,57,60,66,63,75,0,65],
[81,66,54,58,60,57,55,85,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,70,75,57,64,60,53,55,56],
[72,0,65,68,64,64,63,55,57,61],
[61,66,0,64,58,61,58,56,53,59],
[56,63,67,0,56,64,71,49,57,51],
[74,67,73,75,0,70,71,66,71,64],
[67,67,70,67,61,0,69,57,60,55],
[71,68,73,60,60,62,0,58,61,64],
[78,76,75,82,65,74,73,0,65,71],
[76,74,78,74,60,71,70,66,0,79],
[75,70,72,80,67,76,67,60,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,72,72,70,76,70,68,61,85],
[51,0,57,52,61,67,52,65,49,58],
[59,74,0,64,87,70,50,73,66,61],
[59,79,67,0,72,60,66,55,49,63],
[61,70,44,59,0,53,60,65,48,56],
[55,64,61,71,78,0,64,62,62,70],
[61,79,81,65,71,67,0,68,60,66],
[63,66,58,76,66,69,63,0,55,75],
[70,82,65,82,83,69,71,76,0,69],
[46,73,70,68,75,61,65,56,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,66,67,61,72,68,61,64],
[64,0,74,63,63,70,80,73,72,82],
[58,57,0,55,64,57,73,61,70,60],
[65,68,76,0,61,71,73,66,76,73],
[64,68,67,70,0,65,66,66,59,61],
[70,61,74,60,66,0,68,61,65,65],
[59,51,58,58,65,63,0,61,54,60],
[63,58,70,65,65,70,70,0,70,67],
[70,59,61,55,72,66,77,61,0,64],
[67,49,71,58,70,66,71,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,61,64,56,55,60,59,53,68],
[79,0,65,67,67,64,67,68,61,69],
[70,66,0,68,63,70,65,63,63,84],
[67,64,63,0,69,67,55,67,60,70],
[75,64,68,62,0,63,69,65,61,62],
[76,67,61,64,68,0,72,61,62,71],
[71,64,66,76,62,59,0,69,70,70],
[72,63,68,64,66,70,62,0,62,67],
[78,70,68,71,70,69,61,69,0,71],
[63,62,47,61,69,60,61,64,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,69,67,74,75,71,67,75],
[67,0,62,70,62,60,73,71,56,73],
[66,69,0,72,64,73,74,76,64,72],
[62,61,59,0,57,60,68,58,58,55],
[64,69,67,74,0,70,85,81,68,77],
[57,71,58,71,61,0,73,65,65,55],
[56,58,57,63,46,58,0,65,62,64],
[60,60,55,73,50,66,66,0,58,59],
[64,75,67,73,63,66,69,73,0,67],
[56,58,59,76,54,76,67,72,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,65,72,76,61,72,69,65,68],
[63,0,63,60,66,58,73,72,61,63],
[66,68,0,67,67,65,67,74,63,63],
[59,71,64,0,66,66,69,72,58,67],
[55,65,64,65,0,56,67,61,66,63],
[70,73,66,65,75,0,73,65,64,71],
[59,58,64,62,64,58,0,63,57,54],
[62,59,57,59,70,66,68,0,59,61],
[66,70,68,73,65,67,74,72,0,72],
[63,68,68,64,68,60,77,70,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,72,55,49,53,62,59,60,72],
[78,0,74,56,59,46,82,68,61,78],
[59,57,0,55,55,42,46,42,61,69],
[76,75,76,0,64,71,70,74,75,69],
[82,72,76,67,0,50,68,63,70,100],
[78,85,89,60,81,0,94,83,85,86],
[69,49,85,61,63,37,0,56,46,67],
[72,63,89,57,68,48,75,0,66,79],
[71,70,70,56,61,46,85,65,0,82],
[59,53,62,62,31,45,64,52,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,58,63,58,72,69,67,57,62],
[61,0,69,66,57,64,65,65,67,59],
[73,62,0,66,59,67,64,52,66,68],
[68,65,65,0,66,77,62,54,61,54],
[73,74,72,65,0,79,72,59,67,65],
[59,67,64,54,52,0,61,55,54,58],
[62,66,67,69,59,70,0,60,68,69],
[64,66,79,77,72,76,71,0,67,72],
[74,64,65,70,64,77,63,64,0,68],
[69,72,63,77,66,73,62,59,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,66,60,69,84,69,65,76,73],
[76,0,78,72,86,78,69,85,64,69],
[65,53,0,72,68,71,70,57,57,83],
[71,59,59,0,62,76,67,64,63,67],
[62,45,63,69,0,80,59,66,67,59],
[47,53,60,55,51,0,33,50,47,57],
[62,62,61,64,72,98,0,55,63,57],
[66,46,74,67,65,81,76,0,67,64],
[55,67,74,68,64,84,68,64,0,64],
[58,62,48,64,72,74,74,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,58,56,52,63,52,58,61,56],
[74,0,72,65,72,73,65,69,63,67],
[73,59,0,66,59,73,61,67,68,64],
[75,66,65,0,73,61,66,57,73,61],
[79,59,72,58,0,67,55,60,63,66],
[68,58,58,70,64,0,51,62,67,64],
[79,66,70,65,76,80,0,70,79,70],
[73,62,64,74,71,69,61,0,83,69],
[70,68,63,58,68,64,52,48,0,61],
[75,64,67,70,65,67,61,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,57,66,66,57,63,63,51,57],
[80,0,67,68,88,64,63,71,67,71],
[74,64,0,66,78,60,60,76,52,53],
[65,63,65,0,69,59,56,71,50,49],
[65,43,53,62,0,59,55,64,53,60],
[74,67,71,72,72,0,73,78,57,61],
[68,68,71,75,76,58,0,62,59,56],
[68,60,55,60,67,53,69,0,66,54],
[80,64,79,81,78,74,72,65,0,70],
[74,60,78,82,71,70,75,77,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,62,84,41,74,44,65,38,79],
[86,0,60,92,54,81,51,47,83,105],
[69,71,0,75,47,97,33,61,58,64],
[47,39,56,0,59,62,45,65,38,44],
[90,77,84,72,0,74,91,82,57,82],
[57,50,34,69,57,0,41,50,32,69],
[87,80,98,86,40,90,0,58,69,93],
[66,84,70,66,49,81,73,0,36,72],
[93,48,73,93,74,99,62,95,0,108],
[52,26,67,87,49,62,38,59,23,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,47,54,49,59,46,42,49,47],
[80,0,63,73,67,67,74,78,74,55],
[84,68,0,72,62,87,74,66,80,66],
[77,58,59,0,62,65,60,70,66,55],
[82,64,69,69,0,70,69,59,69,59],
[72,64,44,66,61,0,56,62,63,49],
[85,57,57,71,62,75,0,63,69,59],
[89,53,65,61,72,69,68,0,70,57],
[82,57,51,65,62,68,62,61,0,63],
[84,76,65,76,72,82,72,74,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,54,58,67,65,73,62,54],
[64,0,70,59,59,61,65,65,74,58],
[67,61,0,60,62,55,57,69,63,54],
[77,72,71,0,68,68,74,79,70,63],
[73,72,69,63,0,64,73,73,72,59],
[64,70,76,63,67,0,70,73,62,52],
[66,66,74,57,58,61,0,67,68,66],
[58,66,62,52,58,58,64,0,64,57],
[69,57,68,61,59,69,63,67,0,56],
[77,73,77,68,72,79,65,74,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,57,69,71,52,54,61,56,57],
[84,0,63,67,79,75,70,71,52,70],
[74,68,0,73,82,63,78,76,67,66],
[62,64,58,0,66,56,61,69,55,61],
[60,52,49,65,0,63,47,64,28,55],
[79,56,68,75,68,0,61,82,55,76],
[77,61,53,70,84,70,0,67,45,78],
[70,60,55,62,67,49,64,0,47,63],
[75,79,64,76,103,76,86,84,0,88],
[74,61,65,70,76,55,53,68,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,76,61,54,35,62,55,73,64],
[63,0,54,61,74,36,34,52,67,23],
[55,77,0,52,62,28,26,62,81,51],
[70,70,79,0,78,69,74,51,92,67],
[77,57,69,53,0,54,58,64,74,42],
[96,95,103,62,77,0,81,95,93,80],
[69,97,105,57,73,50,0,74,87,78],
[76,79,69,80,67,36,57,0,84,69],
[58,64,50,39,57,38,44,47,0,38],
[67,108,80,64,89,51,53,62,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,72,72,71,68,59,65,74],
[64,0,63,66,58,59,47,50,58,67],
[60,68,0,70,62,56,62,56,63,64],
[59,65,61,0,62,60,57,47,57,63],
[59,73,69,69,0,53,56,58,73,64],
[60,72,75,71,78,0,60,66,62,65],
[63,84,69,74,75,71,0,64,78,69],
[72,81,75,84,73,65,67,0,73,69],
[66,73,68,74,58,69,53,58,0,65],
[57,64,67,68,67,66,62,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,50,51,67,67,61,54,60],
[61,0,61,52,54,60,56,59,66,49],
[65,70,0,48,52,68,66,52,58,56],
[81,79,83,0,65,77,80,70,81,74],
[80,77,79,66,0,72,69,76,67,63],
[64,71,63,54,59,0,68,67,61,55],
[64,75,65,51,62,63,0,70,61,59],
[70,72,79,61,55,64,61,0,71,69],
[77,65,73,50,64,70,70,60,0,72],
[71,82,75,57,68,76,72,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,69,57,68,67,67,56,75],
[61,0,67,63,49,71,48,59,65,57],
[64,64,0,69,57,57,59,66,65,52],
[62,68,62,0,51,55,52,67,58,55],
[74,82,74,80,0,66,68,88,69,64],
[63,60,74,76,65,0,65,72,61,63],
[64,83,72,79,63,66,0,85,56,70],
[64,72,65,64,43,59,46,0,56,56],
[75,66,66,73,62,70,75,75,0,72],
[56,74,79,76,67,68,61,75,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,64,63,68,71,71,64,63,78],
[58,0,65,58,68,70,59,66,59,68],
[67,66,0,61,75,76,70,63,63,74],
[68,73,70,0,74,64,68,60,71,76],
[63,63,56,57,0,58,64,61,62,73],
[60,61,55,67,73,0,68,67,60,77],
[60,72,61,63,67,63,0,56,65,68],
[67,65,68,71,70,64,75,0,68,67],
[68,72,68,60,69,71,66,63,0,76],
[53,63,57,55,58,54,63,64,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,116,83,77,129,118,70,88,34],
[74,0,95,65,99,95,67,66,67,75],
[15,36,0,57,71,69,38,0,54,26],
[48,66,74,0,66,95,97,43,77,52],
[54,32,60,65,0,108,47,23,31,34],
[2,36,62,36,23,0,28,17,13,23],
[13,64,93,34,84,103,0,28,31,34],
[61,65,131,88,108,114,103,0,73,44],
[43,64,77,54,100,118,100,58,0,38],
[97,56,105,79,97,108,97,87,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,76,90,65,73,67,86,75,90],
[60,0,74,87,77,75,57,103,68,78],
[55,57,0,69,66,56,65,106,60,68],
[41,44,62,0,62,36,45,78,73,67],
[66,54,65,69,0,59,64,79,74,77],
[58,56,75,95,72,0,51,79,68,63],
[64,74,66,86,67,80,0,82,72,82],
[45,28,25,53,52,52,49,0,44,44],
[56,63,71,58,57,63,59,87,0,67],
[41,53,63,64,54,68,49,87,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,67,61,63,66,60,61,69],
[71,0,74,68,71,71,59,76,68,78],
[67,57,0,73,62,65,65,67,65,70],
[64,63,58,0,57,61,64,62,61,67],
[70,60,69,74,0,61,61,62,63,69],
[68,60,66,70,70,0,61,64,67,68],
[65,72,66,67,70,70,0,66,65,76],
[71,55,64,69,69,67,65,0,60,70],
[70,63,66,70,68,64,66,71,0,71],
[62,53,61,64,62,63,55,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,66,52,70,68,63,69,52],
[72,0,71,74,70,77,82,63,71,70],
[65,60,0,78,65,72,74,71,69,67],
[65,57,53,0,56,58,68,56,63,52],
[79,61,66,75,0,75,78,67,72,54],
[61,54,59,73,56,0,65,51,65,59],
[63,49,57,63,53,66,0,61,66,54],
[68,68,60,75,64,80,70,0,65,62],
[62,60,62,68,59,66,65,66,0,67],
[79,61,64,79,77,72,77,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,52,58,60,79,55,73,63,55],
[66,0,52,64,61,77,63,70,61,64],
[79,79,0,77,60,89,69,80,71,80],
[73,67,54,0,51,70,49,70,56,66],
[71,70,71,80,0,86,60,64,63,79],
[52,54,42,61,45,0,54,66,43,53],
[76,68,62,82,71,77,0,82,70,72],
[58,61,51,61,67,65,49,0,47,58],
[68,70,60,75,68,88,61,84,0,70],
[76,67,51,65,52,78,59,73,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,86,83,75,62,74,64,71,93],
[52,0,73,73,87,78,87,44,73,80],
[45,58,0,56,69,50,67,49,52,78],
[48,58,75,0,80,59,88,50,55,70],
[56,44,62,51,0,42,30,55,34,51],
[69,53,81,72,89,0,84,59,47,85],
[57,44,64,43,101,47,0,64,60,70],
[67,87,82,81,76,72,67,0,58,84],
[60,58,79,76,97,84,71,73,0,63],
[38,51,53,61,80,46,61,47,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,69,58,68,71,71,78,63],
[60,0,60,63,62,66,70,63,68,55],
[64,71,0,58,64,72,77,67,71,67],
[62,68,73,0,69,60,67,65,74,69],
[73,69,67,62,0,65,67,70,65,73],
[63,65,59,71,66,0,72,62,66,69],
[60,61,54,64,64,59,0,68,59,61],
[60,68,64,66,61,69,63,0,70,72],
[53,63,60,57,66,65,72,61,0,72],
[68,76,64,62,58,62,70,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,70,62,81,65,71,74,54],
[62,0,68,49,59,69,61,57,73,49],
[61,63,0,54,46,60,56,44,60,63],
[61,82,77,0,59,65,70,56,78,72],
[69,72,85,72,0,80,70,71,81,64],
[50,62,71,66,51,0,48,58,77,56],
[66,70,75,61,61,83,0,53,79,63],
[60,74,87,75,60,73,78,0,79,78],
[57,58,71,53,50,54,52,52,0,58],
[77,82,68,59,67,75,68,53,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,62,71,66,61,74,73,60,65],
[50,0,62,40,45,60,57,61,47,58],
[69,69,0,56,63,63,63,73,63,71],
[60,91,75,0,68,75,76,71,72,75],
[65,86,68,63,0,67,73,73,68,65],
[70,71,68,56,64,0,64,81,67,72],
[57,74,68,55,58,67,0,70,60,70],
[58,70,58,60,58,50,61,0,55,60],
[71,84,68,59,63,64,71,76,0,61],
[66,73,60,56,66,59,61,71,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,67,72,63,62,78,63,61,74],
[58,0,59,74,66,63,77,66,67,60],
[64,72,0,62,74,61,84,68,59,67],
[59,57,69,0,66,61,76,65,56,68],
[68,65,57,65,0,62,70,67,56,65],
[69,68,70,70,69,0,77,68,65,67],
[53,54,47,55,61,54,0,51,54,61],
[68,65,63,66,64,63,80,0,66,65],
[70,64,72,75,75,66,77,65,0,66],
[57,71,64,63,66,64,70,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,74,63,73,55,63,70,67,59],
[52,0,64,61,65,56,56,63,73,69],
[57,67,0,58,60,52,62,66,59,51],
[68,70,73,0,73,57,54,80,54,70],
[58,66,71,58,0,61,50,57,55,55],
[76,75,79,74,70,0,60,76,64,73],
[68,75,69,77,81,71,0,73,69,58],
[61,68,65,51,74,55,58,0,64,45],
[64,58,72,77,76,67,62,67,0,68],
[72,62,80,61,76,58,73,86,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,52,62,65,44,66,59,63],
[71,0,60,56,79,70,55,60,63,70],
[72,71,0,64,70,68,61,58,66,74],
[79,75,67,0,95,84,82,66,62,70],
[69,52,61,36,0,57,44,67,55,84],
[66,61,63,47,74,0,53,65,50,58],
[87,76,70,49,87,78,0,64,69,77],
[65,71,73,65,64,66,67,0,57,67],
[72,68,65,69,76,81,62,74,0,81],
[68,61,57,61,47,73,54,64,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,64,76,70,79,67,68,81,72],
[46,0,57,54,54,57,53,60,53,57],
[67,74,0,70,69,64,58,73,77,64],
[55,77,61,0,66,63,54,58,71,57],
[61,77,62,65,0,65,66,64,78,66],
[52,74,67,68,66,0,56,63,72,64],
[64,78,73,77,65,75,0,69,66,65],
[63,71,58,73,67,68,62,0,71,68],
[50,78,54,60,53,59,65,60,0,60],
[59,74,67,74,65,67,66,63,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,62,54,59,60,60,62,62],
[68,0,66,61,69,66,66,59,59,63],
[65,65,0,59,59,67,61,61,65,72],
[69,70,72,0,74,69,74,71,68,63],
[77,62,72,57,0,72,57,58,50,62],
[72,65,64,62,59,0,44,65,58,60],
[71,65,70,57,74,87,0,60,55,66],
[71,72,70,60,73,66,71,0,66,71],
[69,72,66,63,81,73,76,65,0,64],
[69,68,59,68,69,71,65,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,44,55,60,62,52,42,60,53],
[67,0,58,58,58,66,76,56,54,78],
[87,73,0,70,72,95,81,86,45,91],
[76,73,61,0,42,64,68,66,34,56],
[71,73,59,89,0,72,85,77,80,69],
[69,65,36,67,59,0,65,81,59,56],
[79,55,50,63,46,66,0,54,51,67],
[89,75,45,65,54,50,77,0,70,45],
[71,77,86,97,51,72,80,61,0,78],
[78,53,40,75,62,75,64,86,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,56,56,73,65,68,67,63],
[58,0,52,53,63,53,51,70,64,46],
[62,79,0,64,60,57,61,69,44,61],
[75,78,67,0,70,56,67,65,59,88],
[75,68,71,61,0,74,73,49,57,82],
[58,78,74,75,57,0,79,62,59,65],
[66,80,70,64,58,52,0,57,78,82],
[63,61,62,66,82,69,74,0,74,76],
[64,67,87,72,74,72,53,57,0,77],
[68,85,70,43,49,66,49,55,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,72,59,73,61,80,71,83,86],
[52,0,67,47,63,60,59,75,46,77],
[59,64,0,54,61,46,71,44,69,88],
[72,84,77,0,61,67,82,69,83,86],
[58,68,70,70,0,60,71,80,63,75],
[70,71,85,64,71,0,62,66,76,82],
[51,72,60,49,60,69,0,65,73,79],
[60,56,87,62,51,65,66,0,66,80],
[48,85,62,48,68,55,58,65,0,83],
[45,54,43,45,56,49,52,51,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,66,55,74,64,59,68,68,63],
[56,0,56,47,59,51,52,57,57,59],
[65,75,0,61,61,60,61,66,67,58],
[76,84,70,0,73,65,65,74,65,66],
[57,72,70,58,0,64,62,72,63,62],
[67,80,71,66,67,0,69,72,67,63],
[72,79,70,66,69,62,0,70,68,68],
[63,74,65,57,59,59,61,0,61,57],
[63,74,64,66,68,64,63,70,0,62],
[68,72,73,65,69,68,63,74,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,70,49,49,68,65,66,67],
[69,0,62,65,56,39,65,53,67,64],
[69,69,0,70,62,64,61,61,65,69],
[61,66,61,0,57,55,71,60,64,65],
[82,75,69,74,0,67,79,64,73,76],
[82,92,67,76,64,0,71,71,69,79],
[63,66,70,60,52,60,0,65,53,59],
[66,78,70,71,67,60,66,0,68,83],
[65,64,66,67,58,62,78,63,0,63],
[64,67,62,66,55,52,72,48,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,62,59,59,64,51,58,57,57],
[70,0,66,61,63,63,55,64,49,53],
[69,65,0,68,64,71,64,69,66,79],
[72,70,63,0,65,64,59,61,51,58],
[72,68,67,66,0,70,51,67,48,66],
[67,68,60,67,61,0,51,58,59,51],
[80,76,67,72,80,80,0,75,54,66],
[73,67,62,70,64,73,56,0,53,51],
[74,82,65,80,83,72,77,78,0,74],
[74,78,52,73,65,80,65,80,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,60,82,74,65,77,72,82,75],
[61,0,49,63,65,54,67,52,70,56],
[71,82,0,76,65,75,64,71,78,63],
[49,68,55,0,53,51,57,50,70,53],
[57,66,66,78,0,54,64,71,70,63],
[66,77,56,80,77,0,68,74,70,68],
[54,64,67,74,67,63,0,73,72,69],
[59,79,60,81,60,57,58,0,77,70],
[49,61,53,61,61,61,59,54,0,59],
[56,75,68,78,68,63,62,61,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,66,64,64,69,63,69,62],
[66,0,60,65,64,61,67,61,65,57],
[64,71,0,67,61,62,69,60,64,61],
[65,66,64,0,64,63,72,64,65,55],
[67,67,70,67,0,67,72,61,69,74],
[67,70,69,68,64,0,70,62,66,69],
[62,64,62,59,59,61,0,60,60,59],
[68,70,71,67,70,69,71,0,61,64],
[62,66,67,66,62,65,71,70,0,57],
[69,74,70,76,57,62,72,67,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,60,62,62,76,65,60,64],
[73,0,72,64,63,70,78,70,65,70],
[71,59,0,57,65,61,66,63,62,57],
[71,67,74,0,72,70,76,71,77,64],
[69,68,66,59,0,63,63,70,68,64],
[69,61,70,61,68,0,67,70,65,67],
[55,53,65,55,68,64,0,72,62,63],
[66,61,68,60,61,61,59,0,68,56],
[71,66,69,54,63,66,69,63,0,59],
[67,61,74,67,67,64,68,75,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,76,66,67,63,85,64,65,56],
[71,0,66,63,67,69,87,79,60,50],
[55,65,0,63,55,69,70,65,47,63],
[65,68,68,0,63,78,94,75,46,45],
[64,64,76,68,0,73,103,70,74,72],
[68,62,62,53,58,0,72,65,51,49],
[46,44,61,37,28,59,0,48,35,47],
[67,52,66,56,61,66,83,0,65,54],
[66,71,84,85,57,80,96,66,0,76],
[75,81,68,86,59,82,84,77,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,56,70,67,55,67,64,61,72],
[68,0,62,62,62,59,60,70,68,68],
[75,69,0,73,67,61,60,73,66,71],
[61,69,58,0,56,55,58,61,61,69],
[64,69,64,75,0,56,59,67,67,73],
[76,72,70,76,75,0,65,69,70,79],
[64,71,71,73,72,66,0,70,75,77],
[67,61,58,70,64,62,61,0,65,63],
[70,63,65,70,64,61,56,66,0,69],
[59,63,60,62,58,52,54,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,59,69,59,72,60,62,74,72],
[59,0,69,74,59,66,53,58,57,69],
[72,62,0,67,54,65,56,55,62,58],
[62,57,64,0,62,63,57,57,60,60],
[72,72,77,69,0,65,59,64,64,57],
[59,65,66,68,66,0,69,71,65,65],
[71,78,75,74,72,62,0,68,79,66],
[69,73,76,74,67,60,63,0,75,70],
[57,74,69,71,67,66,52,56,0,71],
[59,62,73,71,74,66,65,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,66,54,61,67,64,64,72],
[64,0,75,81,69,78,75,81,67,76],
[62,56,0,71,62,73,65,61,59,68],
[65,50,60,0,55,58,53,52,59,65],
[77,62,69,76,0,86,63,66,68,75],
[70,53,58,73,45,0,55,67,63,60],
[64,56,66,78,68,76,0,60,63,71],
[67,50,70,79,65,64,71,0,69,72],
[67,64,72,72,63,68,68,62,0,75],
[59,55,63,66,56,71,60,59,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,71,72,70,60,67,62,69,64],
[56,0,68,64,64,74,51,70,64,59],
[60,63,0,52,65,60,60,63,56,58],
[59,67,79,0,70,77,76,69,75,67],
[61,67,66,61,0,62,66,63,69,56],
[71,57,71,54,69,0,56,58,55,62],
[64,80,71,55,65,75,0,59,68,60],
[69,61,68,62,68,73,72,0,76,62],
[62,67,75,56,62,76,63,55,0,55],
[67,72,73,64,75,69,71,69,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,76,83,88,82,74,63,68,67],
[44,0,71,72,65,74,67,62,60,69],
[55,60,0,63,66,64,59,54,64,59],
[48,59,68,0,64,67,59,66,67,58],
[43,66,65,67,0,68,63,52,62,55],
[49,57,67,64,63,0,56,51,57,58],
[57,64,72,72,68,75,0,56,61,61],
[68,69,77,65,79,80,75,0,66,72],
[63,71,67,64,69,74,70,65,0,68],
[64,62,72,73,76,73,70,59,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,57,58,65,64,63,65,61],
[66,0,65,70,65,50,64,66,74,63],
[69,66,0,68,67,61,65,69,77,70],
[74,61,63,0,67,61,62,62,77,68],
[73,66,64,64,0,61,70,72,75,69],
[66,81,70,70,70,0,68,64,79,71],
[67,67,66,69,61,63,0,66,73,67],
[68,65,62,69,59,67,65,0,70,64],
[66,57,54,54,56,52,58,61,0,61],
[70,68,61,63,62,60,64,67,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,61,72,75,51,62,62,49,67],
[77,0,63,94,81,77,54,79,65,65],
[70,68,0,87,75,57,68,69,62,66],
[59,37,44,0,53,46,39,55,45,52],
[56,50,56,78,0,43,42,56,48,66],
[80,54,74,85,88,0,75,70,78,72],
[69,77,63,92,89,56,0,80,59,83],
[69,52,62,76,75,61,51,0,65,67],
[82,66,69,86,83,53,72,66,0,76],
[64,66,65,79,65,59,48,64,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,78,84,72,72,74,69,57,75],
[40,0,58,58,55,66,51,55,45,58],
[53,73,0,65,66,56,67,74,76,64],
[47,73,66,0,54,68,60,61,58,69],
[59,76,65,77,0,67,66,69,77,81],
[59,65,75,63,64,0,62,52,69,77],
[57,80,64,71,65,69,0,65,74,68],
[62,76,57,70,62,79,66,0,70,69],
[74,86,55,73,54,62,57,61,0,63],
[56,73,67,62,50,54,63,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,69,71,65,65,58,62,70,71],
[74,0,86,79,71,78,78,64,72,75],
[62,45,0,66,56,65,57,64,69,56],
[60,52,65,0,63,53,58,60,70,60],
[66,60,75,68,0,73,55,61,68,59],
[66,53,66,78,58,0,63,65,63,62],
[73,53,74,73,76,68,0,71,75,72],
[69,67,67,71,70,66,60,0,70,62],
[61,59,62,61,63,68,56,61,0,63],
[60,56,75,71,72,69,59,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,52,54,75,73,40,64,63,54],
[82,0,72,70,90,80,57,62,78,75],
[79,59,0,55,73,77,51,73,78,54],
[77,61,76,0,93,77,73,85,75,72],
[56,41,58,38,0,65,56,55,53,54],
[58,51,54,54,66,0,38,39,64,65],
[91,74,80,58,75,93,0,73,73,73],
[67,69,58,46,76,92,58,0,67,78],
[68,53,53,56,78,67,58,64,0,57],
[77,56,77,59,77,66,58,53,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,79,61,63,61,57,65,62,47],
[71,0,78,72,72,72,77,72,64,65],
[52,53,0,50,61,60,56,58,44,54],
[70,59,81,0,71,60,60,65,64,63],
[68,59,70,60,0,66,69,61,58,60],
[70,59,71,71,65,0,64,65,65,58],
[74,54,75,71,62,67,0,72,65,70],
[66,59,73,66,70,66,59,0,58,58],
[69,67,87,67,73,66,66,73,0,62],
[84,66,77,68,71,73,61,73,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,73,62,60,60,65,54,64,53],
[75,0,81,64,75,66,68,67,80,69],
[58,50,0,54,57,58,66,63,64,55],
[69,67,77,0,78,68,65,67,72,61],
[71,56,74,53,0,69,64,60,70,62],
[71,65,73,63,62,0,62,61,69,58],
[66,63,65,66,67,69,0,53,58,61],
[77,64,68,64,71,70,78,0,72,66],
[67,51,67,59,61,62,73,59,0,66],
[78,62,76,70,69,73,70,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,43,50,36,19,62,78,39,74],
[80,0,60,57,67,76,59,96,69,80],
[88,71,0,59,54,71,66,97,44,71],
[81,74,72,0,70,63,71,77,53,99],
[95,64,77,61,0,47,57,86,67,95],
[112,55,60,68,84,0,59,102,67,82],
[69,72,65,60,74,72,0,90,44,74],
[53,35,34,54,45,29,41,0,33,80],
[92,62,87,78,64,64,87,98,0,93],
[57,51,60,32,36,49,57,51,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,65,68,62,56,65,56,83],
[66,0,62,66,73,67,67,67,69,76],
[70,69,0,62,73,67,68,75,68,77],
[66,65,69,0,69,70,61,66,58,78],
[63,58,58,62,0,57,49,73,63,78],
[69,64,64,61,74,0,66,63,58,83],
[75,64,63,70,82,65,0,70,67,81],
[66,64,56,65,58,68,61,0,56,78],
[75,62,63,73,68,73,64,75,0,81],
[48,55,54,53,53,48,50,53,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,68,67,65,65,63,73,64,59],
[52,0,44,61,56,59,54,71,59,44],
[63,87,0,72,62,63,71,80,61,67],
[64,70,59,0,55,65,62,63,56,59],
[66,75,69,76,0,72,63,83,67,67],
[66,72,68,66,59,0,70,65,62,61],
[68,77,60,69,68,61,0,71,63,63],
[58,60,51,68,48,66,60,0,62,47],
[67,72,70,75,64,69,68,69,0,63],
[72,87,64,72,64,70,68,84,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,74,64,69,80,71,65,58,72],
[59,0,70,64,61,66,64,62,58,70],
[57,61,0,60,57,59,69,59,56,64],
[67,67,71,0,68,76,74,67,64,70],
[62,70,74,63,0,76,74,63,67,69],
[51,65,72,55,55,0,76,56,55,63],
[60,67,62,57,57,55,0,49,52,60],
[66,69,72,64,68,75,82,0,57,66],
[73,73,75,67,64,76,79,74,0,73],
[59,61,67,61,62,68,71,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,70,64,66,59,72,65,69],
[73,0,64,72,74,70,56,69,67,63],
[67,67,0,68,67,61,66,60,65,54],
[61,59,63,0,72,60,57,57,61,58],
[67,57,64,59,0,56,65,60,61,54],
[65,61,70,71,75,0,61,68,63,67],
[72,75,65,74,66,70,0,69,69,66],
[59,62,71,74,71,63,62,0,67,57],
[66,64,66,70,70,68,62,64,0,56],
[62,68,77,73,77,64,65,74,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,68,58,62,66,56,63,65,72],
[73,0,69,63,66,75,66,68,82,69],
[63,62,0,55,60,49,52,59,70,59],
[73,68,76,0,63,68,66,69,72,65],
[69,65,71,68,0,67,62,71,74,65],
[65,56,82,63,64,0,66,64,73,65],
[75,65,79,65,69,65,0,70,70,76],
[68,63,72,62,60,67,61,0,76,71],
[66,49,61,59,57,58,61,55,0,58],
[59,62,72,66,66,66,55,60,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,60,62,68,68,67,65,67],
[64,0,68,74,73,65,74,63,71,78],
[66,63,0,67,62,64,78,61,59,68],
[71,57,64,0,74,70,71,67,59,71],
[69,58,69,57,0,66,71,62,57,69],
[63,66,67,61,65,0,74,64,60,65],
[63,57,53,60,60,57,0,55,54,60],
[64,68,70,64,69,67,76,0,60,71],
[66,60,72,72,74,71,77,71,0,75],
[64,53,63,60,62,66,71,60,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,69,59,72,67,69,73,73],
[63,0,51,61,62,65,64,60,71,68],
[65,80,0,67,69,73,72,75,69,75],
[62,70,64,0,57,69,66,74,68,71],
[72,69,62,74,0,77,72,79,81,72],
[59,66,58,62,54,0,64,60,68,66],
[64,67,59,65,59,67,0,71,72,64],
[62,71,56,57,52,71,60,0,72,66],
[58,60,62,63,50,63,59,59,0,64],
[58,63,56,60,59,65,67,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,71,63,67,60,65,71,73],
[64,0,70,71,65,64,64,69,70,75],
[66,61,0,66,70,68,63,61,72,68],
[60,60,65,0,68,68,69,61,73,70],
[68,66,61,63,0,68,62,64,72,69],
[64,67,63,63,63,0,60,55,72,64],
[71,67,68,62,69,71,0,70,79,74],
[66,62,70,70,67,76,61,0,74,80],
[60,61,59,58,59,59,52,57,0,62],
[58,56,63,61,62,67,57,51,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,52,66,61,44,62,69,66,55],
[81,0,67,80,67,62,83,90,79,73],
[79,64,0,68,52,54,80,77,65,61],
[65,51,63,0,71,53,63,74,64,54],
[70,64,79,60,0,68,71,75,73,52],
[87,69,77,78,63,0,73,84,70,73],
[69,48,51,68,60,58,0,79,70,63],
[62,41,54,57,56,47,52,0,64,48],
[65,52,66,67,58,61,61,67,0,51],
[76,58,70,77,79,58,68,83,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,58,59,72,71,69,65,68],
[68,0,69,70,66,62,69,60,69,67],
[67,62,0,56,76,81,71,66,63,72],
[73,61,75,0,69,80,80,75,72,71],
[72,65,55,62,0,59,72,62,61,80],
[59,69,50,51,72,0,62,63,55,65],
[60,62,60,51,59,69,0,64,69,67],
[62,71,65,56,69,68,67,0,68,71],
[66,62,68,59,70,76,62,63,0,70],
[63,64,59,60,51,66,64,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,104,87,60,67,97,52,79,71],
[57,0,104,82,15,52,75,44,61,61],
[27,27,0,41,31,16,32,32,47,42],
[44,49,90,0,36,54,58,39,57,68],
[71,116,100,95,0,53,104,77,81,102],
[64,79,115,77,78,0,68,62,74,77],
[34,56,99,73,27,63,0,44,53,68],
[79,87,99,92,54,69,87,0,72,89],
[52,70,84,74,50,57,78,59,0,67],
[60,70,89,63,29,54,63,42,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,59,66,71,93,65,86,42,75],
[47,0,61,48,57,41,50,74,38,68],
[72,70,0,59,61,58,59,70,55,90],
[65,83,72,0,80,81,55,90,32,68],
[60,74,70,51,0,56,45,75,45,76],
[38,90,73,50,75,0,77,99,77,74],
[66,81,72,76,86,54,0,87,31,57],
[45,57,61,41,56,32,44,0,56,69],
[89,93,76,99,86,54,100,75,0,62],
[56,63,41,63,55,57,74,62,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,61,69,69,63,69,57,61,61],
[65,0,68,66,70,59,70,60,69,72],
[70,63,0,64,61,62,67,68,69,72],
[62,65,67,0,66,56,55,55,66,75],
[62,61,70,65,0,65,53,56,65,70],
[68,72,69,75,66,0,74,81,65,74],
[62,61,64,76,78,57,0,67,67,72],
[74,71,63,76,75,50,64,0,68,78],
[70,62,62,65,66,66,64,63,0,77],
[70,59,59,56,61,57,59,53,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,70,68,73,72,78,55,79,70],
[68,0,75,71,67,69,73,65,61,61],
[61,56,0,71,72,57,65,76,59,62],
[63,60,60,0,72,68,86,61,66,64],
[58,64,59,59,0,71,67,62,68,54],
[59,62,74,63,60,0,70,73,62,68],
[53,58,66,45,64,61,0,52,66,57],
[76,66,55,70,69,58,79,0,65,77],
[52,70,72,65,63,69,65,66,0,56],
[61,70,69,67,77,63,74,54,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,80,61,49,54,63,59,64,74],
[71,0,77,68,69,66,65,62,66,101],
[51,54,0,50,53,61,52,45,51,73],
[70,63,81,0,59,67,75,60,73,81],
[82,62,78,72,0,77,74,67,73,80],
[77,65,70,64,54,0,68,58,66,85],
[68,66,79,56,57,63,0,64,71,79],
[72,69,86,71,64,73,67,0,76,92],
[67,65,80,58,58,65,60,55,0,80],
[57,30,58,50,51,46,52,39,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,63,60,68,64,51,69,64,68],
[78,0,68,68,84,66,67,84,77,65],
[68,63,0,56,70,66,65,66,58,59],
[71,63,75,0,76,62,70,69,62,66],
[63,47,61,55,0,60,62,70,63,63],
[67,65,65,69,71,0,63,73,54,69],
[80,64,66,61,69,68,0,74,67,63],
[62,47,65,62,61,58,57,0,61,73],
[67,54,73,69,68,77,64,70,0,59],
[63,66,72,65,68,62,68,58,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,69,84,56,57,49,45,57,60],
[84,0,80,75,66,64,77,81,78,86],
[62,51,0,69,40,63,60,58,41,75],
[47,56,62,0,47,57,32,70,61,69],
[75,65,91,84,0,77,74,73,69,68],
[74,67,68,74,54,0,67,70,38,83],
[82,54,71,99,57,64,0,74,72,94],
[86,50,73,61,58,61,57,0,59,62],
[74,53,90,70,62,93,59,72,0,106],
[71,45,56,62,63,48,37,69,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,70,65,65,66,73,75,74,69],
[55,0,65,58,60,59,62,73,66,67],
[61,66,0,66,55,53,79,75,70,70],
[66,73,65,0,64,60,83,73,66,61],
[66,71,76,67,0,58,78,74,68,58],
[65,72,78,71,73,0,85,77,65,75],
[58,69,52,48,53,46,0,58,64,58],
[56,58,56,58,57,54,73,0,72,72],
[57,65,61,65,63,66,67,59,0,61],
[62,64,61,70,73,56,73,59,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,84,55,49,63,62,58,72],
[69,0,59,78,53,52,65,53,61,61],
[71,72,0,67,71,57,71,68,75,76],
[47,53,64,0,57,48,53,55,48,58],
[76,78,60,74,0,54,74,68,76,59],
[82,79,74,83,77,0,62,78,72,68],
[68,66,60,78,57,69,0,59,63,53],
[69,78,63,76,63,53,72,0,72,57],
[73,70,56,83,55,59,68,59,0,77],
[59,70,55,73,72,63,78,74,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,59,66,69,61,66,66,64,66],
[77,0,70,69,64,68,66,71,62,68],
[72,61,0,67,73,71,66,71,62,67],
[65,62,64,0,68,65,68,68,63,77],
[62,67,58,63,0,66,66,68,66,63],
[70,63,60,66,65,0,63,68,63,69],
[65,65,65,63,65,68,0,73,62,72],
[65,60,60,63,63,63,58,0,57,68],
[67,69,69,68,65,68,69,74,0,70],
[65,63,64,54,68,62,59,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,78,62,80,71,72,70,75,59],
[60,0,71,63,75,62,71,71,74,71],
[53,60,0,56,73,61,71,63,60,58],
[69,68,75,0,71,67,78,71,70,53],
[51,56,58,60,0,53,61,68,62,59],
[60,69,70,64,78,0,75,60,69,68],
[59,60,60,53,70,56,0,55,63,57],
[61,60,68,60,63,71,76,0,69,58],
[56,57,71,61,69,62,68,62,0,66],
[72,60,73,78,72,63,74,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,61,67,73,61,67,55,63,65],
[62,0,57,75,63,52,56,64,62,71],
[70,74,0,65,67,70,65,67,71,70],
[64,56,66,0,52,57,50,57,55,64],
[58,68,64,79,0,61,63,60,67,72],
[70,79,61,74,70,0,66,70,70,78],
[64,75,66,81,68,65,0,68,68,75],
[76,67,64,74,71,61,63,0,59,72],
[68,69,60,76,64,61,63,72,0,67],
[66,60,61,67,59,53,56,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,65,70,59,57,65,64,61,67],
[70,0,68,65,62,63,61,61,66,59],
[66,63,0,55,55,55,62,51,57,57],
[61,66,76,0,57,59,71,67,64,59],
[72,69,76,74,0,67,78,65,60,67],
[74,68,76,72,64,0,81,70,67,78],
[66,70,69,60,53,50,0,59,62,66],
[67,70,80,64,66,61,72,0,64,64],
[70,65,74,67,71,64,69,67,0,66],
[64,72,74,72,64,53,65,67,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,58,67,65,68,58,63,67],
[68,0,65,64,64,69,61,66,66,70],
[67,66,0,63,70,69,71,63,70,72],
[73,67,68,0,73,62,64,68,71,72],
[64,67,61,58,0,71,69,63,64,68],
[66,62,62,69,60,0,68,71,70,65],
[63,70,60,67,62,63,0,70,61,65],
[73,65,68,63,68,60,61,0,62,64],
[68,65,61,60,67,61,70,69,0,72],
[64,61,59,59,63,66,66,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,50,66,40,71,70,60,80,66],
[56,0,57,73,49,52,53,67,65,63],
[81,74,0,69,66,83,71,78,90,54],
[65,58,62,0,50,64,44,89,65,47],
[91,82,65,81,0,71,81,72,88,71],
[60,79,48,67,60,0,42,67,63,65],
[61,78,60,87,50,89,0,80,71,64],
[71,64,53,42,59,64,51,0,72,41],
[51,66,41,66,43,68,60,59,0,54],
[65,68,77,84,60,66,67,90,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,59,63,75,80,60,74,68,61],
[63,0,63,59,58,69,62,68,69,65],
[72,68,0,69,73,65,63,74,77,76],
[68,72,62,0,75,73,68,64,58,65],
[56,73,58,56,0,65,50,75,63,55],
[51,62,66,58,66,0,58,64,67,63],
[71,69,68,63,81,73,0,69,66,63],
[57,63,57,67,56,67,62,0,67,61],
[63,62,54,73,68,64,65,64,0,64],
[70,66,55,66,76,68,68,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,62,65,65,68,68,54,72,77],
[53,0,65,69,64,76,68,60,65,68],
[69,66,0,74,66,68,71,63,65,82],
[66,62,57,0,69,58,63,66,57,66],
[66,67,65,62,0,63,69,67,71,67],
[63,55,63,73,68,0,63,64,57,70],
[63,63,60,68,62,68,0,72,60,81],
[77,71,68,65,64,67,59,0,52,81],
[59,66,66,74,60,74,71,79,0,82],
[54,63,49,65,64,61,50,50,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,62,64,67,69,60,69,72],
[63,0,66,61,60,51,71,53,73,66],
[68,65,0,66,59,70,73,61,65,68],
[69,70,65,0,64,67,74,69,74,72],
[67,71,72,67,0,58,73,66,59,77],
[64,80,61,64,73,0,72,67,74,84],
[62,60,58,57,58,59,0,65,73,74],
[71,78,70,62,65,64,66,0,75,80],
[62,58,66,57,72,57,58,56,0,60],
[59,65,63,59,54,47,57,51,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,48,54,62,52,71,65,79,63],
[58,0,49,54,84,67,84,81,82,67],
[83,82,0,69,69,65,97,78,75,59],
[77,77,62,0,78,50,76,65,70,65],
[69,47,62,53,0,70,70,69,67,56],
[79,64,66,81,61,0,79,87,79,79],
[60,47,34,55,61,52,0,59,51,41],
[66,50,53,66,62,44,72,0,66,50],
[52,49,56,61,64,52,80,65,0,60],
[68,64,72,66,75,52,90,81,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,71,64,72,65,73,85,69,68],
[67,0,61,69,55,67,69,71,67,67],
[60,70,0,60,68,74,73,71,69,62],
[67,62,71,0,61,66,69,80,64,77],
[59,76,63,70,0,63,74,72,67,65],
[66,64,57,65,68,0,64,69,65,66],
[58,62,58,62,57,67,0,73,55,72],
[46,60,60,51,59,62,58,0,53,66],
[62,64,62,67,64,66,76,78,0,66],
[63,64,69,54,66,65,59,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,10,4,62,106,10,10,66,62,10],
[121,0,48,110,110,110,66,66,110,58],
[127,83,0,83,106,127,83,62,83,75],
[69,21,48,0,100,58,4,14,4,48],
[25,21,25,31,0,31,21,35,21,21],
[121,21,4,73,100,0,25,66,56,48],
[121,65,48,127,110,106,0,110,106,54],
[65,65,69,117,96,65,21,0,117,65],
[69,21,48,127,110,75,25,14,0,75],
[121,73,56,83,110,83,77,66,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,46,101,63,52,71,92,48,97],
[94,0,46,87,87,39,58,91,45,87],
[85,85,0,94,77,77,100,128,51,73],
[30,44,37,0,60,60,38,61,19,46],
[68,44,54,71,0,37,49,72,40,70],
[79,92,54,71,94,0,67,77,61,79],
[60,73,31,93,82,64,0,84,68,78],
[39,40,3,70,59,54,47,0,22,28],
[83,86,80,112,91,70,63,109,0,86],
[34,44,58,85,61,52,53,103,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,74,58,58,62,62,69,62,55],
[59,0,61,60,64,55,69,60,59,63],
[57,70,0,59,56,62,59,64,56,62],
[73,71,72,0,77,64,69,73,68,73],
[73,67,75,54,0,56,65,62,65,58],
[69,76,69,67,75,0,70,69,64,67],
[69,62,72,62,66,61,0,65,56,63],
[62,71,67,58,69,62,66,0,51,65],
[69,72,75,63,66,67,75,80,0,72],
[76,68,69,58,73,64,68,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,65,63,59,57,55,55,55,59],
[77,0,78,64,66,67,76,68,67,69],
[66,53,0,61,56,56,57,62,51,59],
[68,67,70,0,67,64,64,63,65,65],
[72,65,75,64,0,68,68,63,75,68],
[74,64,75,67,63,0,75,64,70,64],
[76,55,74,67,63,56,0,56,65,69],
[76,63,69,68,68,67,75,0,62,72],
[76,64,80,66,56,61,66,69,0,66],
[72,62,72,66,63,67,62,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,48,45,52,64,44,59,75,56],
[73,0,67,66,55,71,62,51,96,73],
[83,64,0,45,69,70,64,68,89,59],
[86,65,86,0,73,62,68,65,83,76],
[79,76,62,58,0,64,58,55,92,60],
[67,60,61,69,67,0,61,68,68,77],
[87,69,67,63,73,70,0,73,91,80],
[72,80,63,66,76,63,58,0,82,74],
[56,35,42,48,39,63,40,49,0,65],
[75,58,72,55,71,54,51,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,53,32,88,64,53,0,64],
[67,0,85,85,32,88,131,35,35,67],
[67,46,0,85,32,88,99,35,35,46],
[78,46,46,0,78,46,46,46,46,46],
[99,99,99,53,0,99,99,88,88,99],
[43,43,43,85,32,0,96,0,0,43],
[67,0,32,85,32,35,0,35,0,0],
[78,96,96,85,43,131,96,0,32,96],
[131,96,96,85,43,131,131,99,0,131],
[67,64,85,85,32,88,131,35,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,76,78,76,72,76,79,79,77],
[66,0,66,70,64,66,67,69,74,61],
[55,65,0,66,67,59,63,74,63,64],
[53,61,65,0,64,60,58,72,68,70],
[55,67,64,67,0,67,63,68,66,58],
[59,65,72,71,64,0,60,69,72,61],
[55,64,68,73,68,71,0,68,63,63],
[52,62,57,59,63,62,63,0,83,64],
[52,57,68,63,65,59,68,48,0,51],
[54,70,67,61,73,70,68,67,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,59,60,58,54,58,66,50,55],
[73,0,61,60,60,57,57,73,52,54],
[72,70,0,65,64,69,63,70,57,64],
[71,71,66,0,64,64,60,62,66,66],
[73,71,67,67,0,67,67,74,60,67],
[77,74,62,67,64,0,60,69,66,69],
[73,74,68,71,64,71,0,68,61,68],
[65,58,61,69,57,62,63,0,69,61],
[81,79,74,65,71,65,70,62,0,75],
[76,77,67,65,64,62,63,70,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,64,64,58,68,57,41,59],
[73,0,82,83,70,65,80,61,68,77],
[70,49,0,70,65,48,71,51,50,68],
[67,48,61,0,62,67,63,54,50,51],
[67,61,66,69,0,65,68,67,58,54],
[73,66,83,64,66,0,74,71,47,60],
[63,51,60,68,63,57,0,64,51,64],
[74,70,80,77,64,60,67,0,58,67],
[90,63,81,81,73,84,80,73,0,80],
[72,54,63,80,77,71,67,64,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,56,57,65,58,57,57,66,53],
[75,0,61,67,67,65,67,71,72,57],
[75,70,0,66,73,67,70,67,69,64],
[74,64,65,0,68,59,71,64,72,52],
[66,64,58,63,0,68,71,74,63,60],
[73,66,64,72,63,0,71,71,75,61],
[74,64,61,60,60,60,0,67,69,66],
[74,60,64,67,57,60,64,0,71,58],
[65,59,62,59,68,56,62,60,0,58],
[78,74,67,79,71,70,65,73,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,68,57,70,66,67,68,68],
[65,0,59,61,55,61,69,69,69,59],
[71,72,0,66,72,58,74,66,72,59],
[63,70,65,0,70,63,68,74,75,71],
[74,76,59,61,0,70,76,71,75,70],
[61,70,73,68,61,0,68,63,73,76],
[65,62,57,63,55,63,0,61,67,62],
[64,62,65,57,60,68,70,0,69,63],
[63,62,59,56,56,58,64,62,0,56],
[63,72,72,60,61,55,69,68,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,63,86,70,80,72,76,76],
[66,0,69,57,84,60,71,61,57,65],
[65,62,0,66,81,71,69,72,66,69],
[68,74,65,0,80,70,73,71,78,71],
[45,47,50,51,0,55,62,55,56,59],
[61,71,60,61,76,0,61,69,70,68],
[51,60,62,58,69,70,0,65,60,68],
[59,70,59,60,76,62,66,0,66,68],
[55,74,65,53,75,61,71,65,0,68],
[55,66,62,60,72,63,63,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,65,67,55,52,76,49,70],
[61,0,66,68,60,55,68,74,63,62],
[70,65,0,69,75,67,59,63,50,71],
[66,63,62,0,66,53,48,75,45,58],
[64,71,56,65,0,59,64,74,54,58],
[76,76,64,78,72,0,69,83,68,70],
[79,63,72,83,67,62,0,76,59,64],
[55,57,68,56,57,48,55,0,48,60],
[82,68,81,86,77,63,72,83,0,71],
[61,69,60,73,73,61,67,71,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,60,62,56,53,63,51,66],
[65,0,74,63,59,65,60,57,59,66],
[67,57,0,58,53,60,56,55,58,67],
[71,68,73,0,67,65,68,69,62,77],
[69,72,78,64,0,68,68,74,70,68],
[75,66,71,66,63,0,55,70,50,63],
[78,71,75,63,63,76,0,70,67,71],
[68,74,76,62,57,61,61,0,65,66],
[80,72,73,69,61,81,64,66,0,71],
[65,65,64,54,63,68,60,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,68,54,61,51,61,71,60],
[64,0,62,67,62,55,65,49,58,58],
[72,69,0,68,65,57,56,67,62,71],
[63,64,63,0,49,59,58,51,57,58],
[77,69,66,82,0,71,66,62,70,74],
[70,76,74,72,60,0,70,62,69,80],
[80,66,75,73,65,61,0,59,79,75],
[70,82,64,80,69,69,72,0,66,73],
[60,73,69,74,61,62,52,65,0,70],
[71,73,60,73,57,51,56,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,70,72,67,68,78,59,68,69],
[50,0,62,64,61,66,64,61,65,64],
[61,69,0,68,56,66,66,64,58,63],
[59,67,63,0,60,65,75,57,75,62],
[64,70,75,71,0,73,81,67,65,69],
[63,65,65,66,58,0,63,59,61,61],
[53,67,65,56,50,68,0,57,65,62],
[72,70,67,74,64,72,74,0,69,65],
[63,66,73,56,66,70,66,62,0,63],
[62,67,68,69,62,70,69,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,57,74,63,70,64,69,69,73],
[65,0,56,58,56,69,61,61,69,68],
[74,75,0,77,64,68,64,66,75,71],
[57,73,54,0,59,62,62,61,62,60],
[68,75,67,72,0,68,57,65,69,70],
[61,62,63,69,63,0,54,60,69,68],
[67,70,67,69,74,77,0,61,68,71],
[62,70,65,70,66,71,70,0,77,71],
[62,62,56,69,62,62,63,54,0,65],
[58,63,60,71,61,63,60,60,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,42,38,51,0,51,51,38,51],
[42,0,42,38,0,0,93,42,80,42],
[89,89,0,89,51,89,51,51,38,51],
[93,93,42,0,93,93,93,93,42,93],
[80,131,80,38,0,38,131,131,80,131],
[131,131,42,38,93,0,93,93,80,93],
[80,38,80,38,0,38,0,42,80,0],
[80,89,80,38,0,38,89,0,80,51],
[93,51,93,89,51,51,51,51,0,51],
[80,89,80,38,0,38,131,80,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,72,63,58,76,65,72,65,60],
[61,0,59,67,64,62,61,64,61,64],
[59,72,0,66,55,68,58,69,62,60],
[68,64,65,0,59,65,58,70,58,62],
[73,67,76,72,0,76,66,79,65,66],
[55,69,63,66,55,0,55,72,67,57],
[66,70,73,73,65,76,0,78,76,70],
[59,67,62,61,52,59,53,0,63,57],
[66,70,69,73,66,64,55,68,0,65],
[71,67,71,69,65,74,61,74,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,53,42,73,46,56,46,52,48],
[73,0,61,66,70,56,65,67,63,68],
[78,70,0,48,57,71,62,74,59,52],
[89,65,83,0,82,77,74,76,66,65],
[58,61,74,49,0,68,60,59,50,63],
[85,75,60,54,63,0,58,71,56,57],
[75,66,69,57,71,73,0,71,52,52],
[85,64,57,55,72,60,60,0,51,59],
[79,68,72,65,81,75,79,80,0,73],
[83,63,79,66,68,74,79,72,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,86,48,76,86,12,86,123,86],
[81,0,42,92,80,86,87,91,80,56],
[45,89,0,57,83,50,51,130,119,56],
[83,39,74,0,76,38,39,111,112,76],
[55,51,48,55,0,86,13,48,85,49],
[45,45,81,93,45,0,45,80,81,81],
[119,44,80,92,118,86,0,92,118,80],
[45,40,1,20,83,51,39,0,83,44],
[8,51,12,19,46,50,13,48,0,55],
[45,75,75,55,82,50,51,87,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,53,56,49,48,63,57,67,50],
[82,0,81,74,59,75,59,72,81,75],
[78,50,0,56,62,54,65,60,63,60],
[75,57,75,0,73,74,67,86,71,64],
[82,72,69,58,0,71,71,69,64,71],
[83,56,77,57,60,0,65,72,71,60],
[68,72,66,64,60,66,0,72,84,69],
[74,59,71,45,62,59,59,0,78,57],
[64,50,68,60,67,60,47,53,0,59],
[81,56,71,67,60,71,62,74,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,79,70,61,68,66,63,85],
[62,0,86,66,55,63,54,70,58,78],
[63,45,0,58,45,59,56,59,59,66],
[52,65,73,0,62,66,67,66,58,62],
[61,76,86,69,0,67,79,80,82,86],
[70,68,72,65,64,0,58,76,53,74],
[63,77,75,64,52,73,0,67,65,77],
[65,61,72,65,51,55,64,0,57,86],
[68,73,72,73,49,78,66,74,0,70],
[46,53,65,69,45,57,54,45,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,62,42,55,58,41,47,50,73],
[80,0,80,66,73,78,55,66,62,86],
[69,51,0,53,52,59,46,49,50,64],
[89,65,78,0,85,76,74,74,73,89],
[76,58,79,46,0,73,54,57,56,65],
[73,53,72,55,58,0,51,60,62,72],
[90,76,85,57,77,80,0,67,70,89],
[84,65,82,57,74,71,64,0,69,78],
[81,69,81,58,75,69,61,62,0,83],
[58,45,67,42,66,59,42,53,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,66,64,60,72,57,60,59],
[67,0,63,65,65,68,69,63,68,67],
[67,68,0,70,65,64,67,67,69,68],
[65,66,61,0,59,61,67,65,63,57],
[67,66,66,72,0,58,67,72,65,61],
[71,63,67,70,73,0,67,72,69,67],
[59,62,64,64,64,64,0,60,62,49],
[74,68,64,66,59,59,71,0,64,66],
[71,63,62,68,66,62,69,67,0,64],
[72,64,63,74,70,64,82,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,58,68,64,63,62,60,64],
[65,0,64,67,79,69,70,72,58,59],
[71,67,0,67,68,75,75,66,62,62],
[73,64,64,0,75,65,70,68,55,66],
[63,52,63,56,0,60,67,57,54,54],
[67,62,56,66,71,0,57,64,57,57],
[68,61,56,61,64,74,0,64,63,62],
[69,59,65,63,74,67,67,0,60,61],
[71,73,69,76,77,74,68,71,0,62],
[67,72,69,65,77,74,69,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,69,67,60,64,75,65,62],
[65,0,63,57,64,62,64,64,64,58],
[66,68,0,61,66,72,66,74,65,66],
[62,74,70,0,69,68,70,74,67,71],
[64,67,65,62,0,66,66,66,66,64],
[71,69,59,63,65,0,62,70,68,53],
[67,67,65,61,65,69,0,73,76,66],
[56,67,57,57,65,61,58,0,72,58],
[66,67,66,64,65,63,55,59,0,57],
[69,73,65,60,67,78,65,73,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,69,56,57,61,65,65,71,65],
[85,0,80,68,67,73,70,81,86,64],
[62,51,0,57,55,62,64,66,70,61],
[75,63,74,0,64,72,59,66,73,64],
[74,64,76,67,0,67,72,65,68,66],
[70,58,69,59,64,0,68,67,77,62],
[66,61,67,72,59,63,0,73,72,71],
[66,50,65,65,66,64,58,0,71,61],
[60,45,61,58,63,54,59,60,0,63],
[66,67,70,67,65,69,60,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,71,63,70,82,67,74,61,67],
[53,0,61,57,64,63,63,73,64,73],
[60,70,0,68,62,66,63,76,55,75],
[68,74,63,0,69,67,69,71,71,70],
[61,67,69,62,0,62,57,71,64,62],
[49,68,65,64,69,0,69,74,59,49],
[64,68,68,62,74,62,0,71,64,70],
[57,58,55,60,60,57,60,0,61,58],
[70,67,76,60,67,72,67,70,0,78],
[64,58,56,61,69,82,61,73,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,57,58,62,63,52,54,64,63],
[72,0,66,72,69,66,60,60,65,67],
[74,65,0,72,73,73,68,68,62,66],
[73,59,59,0,65,68,54,58,61,65],
[69,62,58,66,0,70,61,51,60,67],
[68,65,58,63,61,0,54,50,61,61],
[79,71,63,77,70,77,0,61,77,75],
[77,71,63,73,80,81,70,0,74,73],
[67,66,69,70,71,70,54,57,0,74],
[68,64,65,66,64,70,56,58,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,60,83,66,56,76,57,71,51],
[48,0,67,56,54,52,59,53,62,53],
[71,64,0,55,56,72,71,48,51,70],
[48,75,76,0,59,68,58,71,78,68],
[65,77,75,72,0,74,76,84,64,74],
[75,79,59,63,57,0,69,76,61,76],
[55,72,60,73,55,62,0,56,65,84],
[74,78,83,60,47,55,75,0,49,61],
[60,69,80,53,67,70,66,82,0,62],
[80,78,61,63,57,55,47,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,77,74,67,62,70,68,64],
[68,0,65,81,69,69,68,66,66,68],
[67,66,0,66,59,57,60,60,66,69],
[54,50,65,0,48,55,59,57,59,61],
[57,62,72,83,0,65,60,63,55,65],
[64,62,74,76,66,0,66,72,69,62],
[69,63,71,72,71,65,0,62,59,75],
[61,65,71,74,68,59,69,0,63,67],
[63,65,65,72,76,62,72,68,0,72],
[67,63,62,70,66,69,56,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,68,45,63,52,52,60,59],
[67,0,63,56,60,54,68,69,71,66],
[63,68,0,71,86,73,59,59,63,74],
[63,75,60,0,56,53,55,63,60,59],
[86,71,45,75,0,60,72,56,72,59],
[68,77,58,78,71,0,56,70,65,64],
[79,63,72,76,59,75,0,82,76,64],
[79,62,72,68,75,61,49,0,70,74],
[71,60,68,71,59,66,55,61,0,66],
[72,65,57,72,72,67,67,57,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,61,75,60,70,73,62,59,70],
[65,0,72,78,76,73,84,70,62,70],
[70,59,0,74,69,65,72,61,66,68],
[56,53,57,0,62,65,66,55,55,63],
[71,55,62,69,0,67,70,60,58,73],
[61,58,66,66,64,0,74,55,58,68],
[58,47,59,65,61,57,0,55,54,65],
[69,61,70,76,71,76,76,0,65,73],
[72,69,65,76,73,73,77,66,0,70],
[61,61,63,68,58,63,66,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,71,47,79,63,66,64,67,58],
[65,0,72,70,74,65,75,90,68,66],
[60,59,0,67,73,55,58,74,66,73],
[84,61,64,0,73,68,70,73,76,71],
[52,57,58,58,0,59,53,72,59,59],
[68,66,76,63,72,0,59,75,70,78],
[65,56,73,61,78,72,0,80,72,66],
[67,41,57,58,59,56,51,0,54,59],
[64,63,65,55,72,61,59,77,0,68],
[73,65,58,60,72,53,65,72,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,54,67,73,51,59,43,54,69],
[56,0,54,66,70,62,51,47,48,84],
[77,77,0,75,73,62,71,62,76,73],
[64,65,56,0,63,63,57,59,56,80],
[58,61,58,68,0,50,60,73,43,79],
[80,69,69,68,81,0,75,71,60,79],
[72,80,60,74,71,56,0,53,57,84],
[88,84,69,72,58,60,78,0,65,83],
[77,83,55,75,88,71,74,66,0,65],
[62,47,58,51,52,52,47,48,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,64,57,68,55,53,62,63,67],
[71,0,62,61,76,53,57,68,67,75],
[67,69,0,56,56,58,64,64,69,78],
[74,70,75,0,77,66,77,68,65,74],
[63,55,75,54,0,66,58,61,64,65],
[76,78,73,65,65,0,60,66,56,61],
[78,74,67,54,73,71,0,69,70,75],
[69,63,67,63,70,65,62,0,61,70],
[68,64,62,66,67,75,61,70,0,62],
[64,56,53,57,66,70,56,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,71,58,68,59,56,63,66,67],
[61,0,65,53,61,58,55,61,64,69],
[60,66,0,55,63,59,60,69,64,58],
[73,78,76,0,71,63,74,70,68,73],
[63,70,68,60,0,68,69,64,74,71],
[72,73,72,68,63,0,72,68,74,76],
[75,76,71,57,62,59,0,65,68,70],
[68,70,62,61,67,63,66,0,57,60],
[65,67,67,63,57,57,63,74,0,64],
[64,62,73,58,60,55,61,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,67,74,77,76,63,66,66,80],
[55,0,62,59,72,55,61,61,58,56],
[64,69,0,58,65,75,71,63,71,70],
[57,72,73,0,77,61,72,61,72,71],
[54,59,66,54,0,56,54,53,65,65],
[55,76,56,70,75,0,65,61,62,68],
[68,70,60,59,77,66,0,69,61,65],
[65,70,68,70,78,70,62,0,60,71],
[65,73,60,59,66,69,70,71,0,67],
[51,75,61,60,66,63,66,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,50,75,59,65,70,53,61,66],
[71,0,59,78,62,68,71,51,62,63],
[81,72,0,75,70,80,71,62,67,76],
[56,53,56,0,52,65,59,48,55,66],
[72,69,61,79,0,70,91,67,65,75],
[66,63,51,66,61,0,63,64,50,57],
[61,60,60,72,40,68,0,63,55,59],
[78,80,69,83,64,67,68,0,64,69],
[70,69,64,76,66,81,76,67,0,74],
[65,68,55,65,56,74,72,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,69,65,75,57,91,68,60,83],
[70,0,70,72,77,71,79,82,61,82],
[62,61,0,51,73,50,70,48,48,58],
[66,59,80,0,82,47,79,89,66,75],
[56,54,58,49,0,39,57,64,35,63],
[74,60,81,84,92,0,89,91,80,92],
[40,52,61,52,74,42,0,63,45,60],
[63,49,83,42,67,40,68,0,35,67],
[71,70,83,65,96,51,86,96,0,92],
[48,49,73,56,68,39,71,64,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,63,58,73,72,65,63,61,58],
[67,0,60,63,65,67,63,67,69,56],
[68,71,0,61,66,74,68,73,69,59],
[73,68,70,0,69,74,70,70,67,60],
[58,66,65,62,0,65,67,57,67,64],
[59,64,57,57,66,0,58,59,56,57],
[66,68,63,61,64,73,0,66,58,63],
[68,64,58,61,74,72,65,0,65,66],
[70,62,62,64,64,75,73,66,0,62],
[73,75,72,71,67,74,68,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,68,82,64,67,70,64,72,69],
[57,0,70,81,73,64,65,63,58,73],
[63,61,0,65,58,59,57,48,56,62],
[49,50,66,0,64,57,57,60,54,56],
[67,58,73,67,0,69,71,69,63,75],
[64,67,72,74,62,0,80,62,59,75],
[61,66,74,74,60,51,0,61,58,84],
[67,68,83,71,62,69,70,0,60,74],
[59,73,75,77,68,72,73,71,0,68],
[62,58,69,75,56,56,47,57,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,57,62,63,50,49,50,58,58],
[72,0,87,77,62,66,54,78,70,67],
[74,44,0,65,63,57,46,63,53,57],
[69,54,66,0,62,65,67,64,58,67],
[68,69,68,69,0,68,56,74,76,72],
[81,65,74,66,63,0,69,74,65,69],
[82,77,85,64,75,62,0,77,78,68],
[81,53,68,67,57,57,54,0,71,65],
[73,61,78,73,55,66,53,60,0,65],
[73,64,74,64,59,62,63,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,75,76,66,57,72,74,73,70],
[35,0,43,56,39,39,57,50,55,61],
[56,88,0,63,64,43,70,57,63,70],
[55,75,68,0,59,46,66,47,75,68],
[65,92,67,72,0,63,79,68,83,83],
[74,92,88,85,68,0,80,58,79,85],
[59,74,61,65,52,51,0,48,63,59],
[57,81,74,84,63,73,83,0,67,78],
[58,76,68,56,48,52,68,64,0,68],
[61,70,61,63,48,46,72,53,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,72,67,108,109,66,100,105,38],
[44,0,32,21,69,100,38,42,52,39],
[59,99,0,59,110,99,50,68,73,24],
[64,110,72,0,111,109,66,63,110,74],
[23,62,21,20,0,119,40,72,41,20],
[22,31,32,22,12,0,31,30,32,12],
[65,93,81,65,91,100,0,58,94,53],
[31,89,63,68,59,101,73,0,63,30],
[26,79,58,21,90,99,37,68,0,20],
[93,92,107,57,111,119,78,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,74,73,69,71,61,66,74],
[60,0,61,59,74,59,60,62,67,62],
[67,70,0,68,62,67,74,61,59,67],
[57,72,63,0,64,68,61,49,68,67],
[58,57,69,67,0,68,61,63,67,73],
[62,72,64,63,63,0,70,63,62,66],
[60,71,57,70,70,61,0,63,64,71],
[70,69,70,82,68,68,68,0,60,63],
[65,64,72,63,64,69,67,71,0,66],
[57,69,64,64,58,65,60,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,71,32,85,45,63,48,59,50],
[98,0,72,71,65,67,76,55,72,78],
[60,59,0,22,70,52,62,47,56,67],
[99,60,109,0,90,77,65,90,116,83],
[46,66,61,41,0,62,41,70,68,95],
[86,64,79,54,69,0,52,74,79,72],
[68,55,69,66,90,79,0,59,69,64],
[83,76,84,41,61,57,72,0,84,71],
[72,59,75,15,63,52,62,47,0,49],
[81,53,64,48,36,59,67,60,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,54,62,69,55,51,60,71],
[62,0,68,44,57,58,48,55,58,76],
[60,63,0,50,72,71,50,58,57,77],
[77,87,81,0,76,70,71,61,75,89],
[69,74,59,55,0,65,52,56,67,62],
[62,73,60,61,66,0,47,55,62,72],
[76,83,81,60,79,84,0,87,73,92],
[80,76,73,70,75,76,44,0,69,75],
[71,73,74,56,64,69,58,62,0,73],
[60,55,54,42,69,59,39,56,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,67,51,59,65,66,65,58,68],
[69,0,72,55,62,67,59,61,59,67],
[64,59,0,54,62,62,66,61,63,68],
[80,76,77,0,71,71,72,78,65,78],
[72,69,69,60,0,65,69,76,68,73],
[66,64,69,60,66,0,75,66,64,72],
[65,72,65,59,62,56,0,69,57,71],
[66,70,70,53,55,65,62,0,55,60],
[73,72,68,66,63,67,74,76,0,66],
[63,64,63,53,58,59,60,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,69,59,62,65,66,65,76,62],
[68,0,62,57,59,67,62,64,69,56],
[62,69,0,58,68,64,59,62,74,71],
[72,74,73,0,70,67,69,65,77,77],
[69,72,63,61,0,64,65,68,76,71],
[66,64,67,64,67,0,68,68,72,65],
[65,69,72,62,66,63,0,68,74,71],
[66,67,69,66,63,63,63,0,69,65],
[55,62,57,54,55,59,57,62,0,63],
[69,75,60,54,60,66,60,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,61,64,70,68,74,64,62],
[64,0,65,66,62,72,75,68,58,67],
[63,66,0,73,69,74,78,62,73,71],
[70,65,58,0,63,65,74,62,55,66],
[67,69,62,68,0,63,75,62,56,63],
[61,59,57,66,68,0,73,63,58,68],
[63,56,53,57,56,58,0,66,52,58],
[57,63,69,69,69,68,65,0,65,63],
[67,73,58,76,75,73,79,66,0,70],
[69,64,60,65,68,63,73,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,65,68,66,54,65,63,66],
[63,0,61,66,70,74,58,64,63,56],
[61,70,0,64,64,69,57,62,58,60],
[66,65,67,0,60,79,59,54,64,56],
[63,61,67,71,0,74,60,63,65,54],
[65,57,62,52,57,0,47,55,51,57],
[77,73,74,72,71,84,0,70,62,62],
[66,67,69,77,68,76,61,0,58,65],
[68,68,73,67,66,80,69,73,0,63],
[65,75,71,75,77,74,69,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,82,83,111,73,103,81,94,78],
[67,0,70,68,84,69,95,37,67,38],
[49,61,0,67,83,50,70,51,71,34],
[48,63,64,0,73,55,82,54,66,43],
[20,47,48,58,0,21,62,18,28,41],
[58,62,81,76,110,0,76,46,61,53],
[28,36,61,49,69,55,0,41,64,37],
[50,94,80,77,113,85,90,0,95,63],
[37,64,60,65,103,70,67,36,0,53],
[53,93,97,88,90,78,94,68,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,53,63,60,59,75,73,73,69],
[61,0,52,67,64,57,67,70,78,63],
[78,79,0,71,65,69,83,86,81,76],
[68,64,60,0,63,60,79,74,73,63],
[71,67,66,68,0,61,74,68,75,75],
[72,74,62,71,70,0,78,77,78,66],
[56,64,48,52,57,53,0,62,73,60],
[58,61,45,57,63,54,69,0,64,59],
[58,53,50,58,56,53,58,67,0,58],
[62,68,55,68,56,65,71,72,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,60,66,63,64,79,58,72,70],
[60,0,57,50,56,57,59,59,58,61],
[71,74,0,66,62,74,68,62,70,61],
[65,81,65,0,73,67,70,81,79,74],
[68,75,69,58,0,68,77,67,75,72],
[67,74,57,64,63,0,71,61,77,69],
[52,72,63,61,54,60,0,66,63,63],
[73,72,69,50,64,70,65,0,60,68],
[59,73,61,52,56,54,68,71,0,67],
[61,70,70,57,59,62,68,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,78,65,71,66,57,52,65,68],
[60,0,71,57,65,55,63,60,60,65],
[53,60,0,60,67,63,63,63,62,61],
[66,74,71,0,68,73,57,70,66,67],
[60,66,64,63,0,64,60,63,70,58],
[65,76,68,58,67,0,66,58,67,73],
[74,68,68,74,71,65,0,61,69,73],
[79,71,68,61,68,73,70,0,65,75],
[66,71,69,65,61,64,62,66,0,69],
[63,66,70,64,73,58,58,56,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,61,68,61,58,64,78,58],
[72,0,75,70,64,69,68,65,78,63],
[64,56,0,64,61,65,65,62,79,65],
[70,61,67,0,53,66,64,59,77,63],
[63,67,70,78,0,68,60,65,80,58],
[70,62,66,65,63,0,67,72,72,57],
[73,63,66,67,71,64,0,70,74,60],
[67,66,69,72,66,59,61,0,73,66],
[53,53,52,54,51,59,57,58,0,48],
[73,68,66,68,73,74,71,65,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,65,65,64,60,70,60,61],
[66,0,69,59,64,65,72,67,69,69],
[63,62,0,60,65,63,66,62,61,62],
[66,72,71,0,61,64,71,64,61,61],
[66,67,66,70,0,62,59,67,65,62],
[67,66,68,67,69,0,69,70,65,64],
[71,59,65,60,72,62,0,73,60,60],
[61,64,69,67,64,61,58,0,56,61],
[71,62,70,70,66,66,71,75,0,64],
[70,62,69,70,69,67,71,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,57,68,64,72,79,64,63,56],
[67,0,70,67,71,65,79,70,65,67],
[74,61,0,75,63,72,77,66,60,61],
[63,64,56,0,62,72,87,73,72,66],
[67,60,68,69,0,69,78,69,65,54],
[59,66,59,59,62,0,69,61,58,53],
[52,52,54,44,53,62,0,55,49,51],
[67,61,65,58,62,70,76,0,66,64],
[68,66,71,59,66,73,82,65,0,62],
[75,64,70,65,77,78,80,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,69,75,67,64,64,71,73],
[67,0,61,69,79,64,78,69,73,70],
[69,70,0,65,74,64,63,74,79,73],
[62,62,66,0,71,60,63,63,74,62],
[56,52,57,60,0,57,57,57,62,60],
[64,67,67,71,74,0,71,76,68,64],
[67,53,68,68,74,60,0,68,68,68],
[67,62,57,68,74,55,63,0,72,72],
[60,58,52,57,69,63,63,59,0,58],
[58,61,58,69,71,67,63,59,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,60,59,77,67,70,65,64],
[64,0,62,57,67,66,62,65,54,75],
[64,69,0,66,57,80,66,71,67,64],
[71,74,65,0,67,72,72,80,59,80],
[72,64,74,64,0,73,71,80,61,75],
[54,65,51,59,58,0,54,55,52,61],
[64,69,65,59,60,77,0,64,70,77],
[61,66,60,51,51,76,67,0,65,67],
[66,77,64,72,70,79,61,66,0,83],
[67,56,67,51,56,70,54,64,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,55,54,58,74,74,64,53,63],
[68,0,72,48,53,70,75,63,57,76],
[76,59,0,67,76,76,88,67,61,81],
[77,83,64,0,69,78,81,70,67,86],
[73,78,55,62,0,81,84,66,70,67],
[57,61,55,53,50,0,83,67,56,57],
[57,56,43,50,47,48,0,53,50,58],
[67,68,64,61,65,64,78,0,55,82],
[78,74,70,64,61,75,81,76,0,87],
[68,55,50,45,64,74,73,49,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,67,65,66,78,73,68,75,68],
[68,0,68,66,67,69,65,61,73,68],
[64,63,0,66,70,62,69,75,67,70],
[66,65,65,0,71,72,70,69,71,80],
[65,64,61,60,0,68,66,60,68,58],
[53,62,69,59,63,0,65,62,65,64],
[58,66,62,61,65,66,0,63,68,65],
[63,70,56,62,71,69,68,0,79,68],
[56,58,64,60,63,66,63,52,0,60],
[63,63,61,51,73,67,66,63,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,65,57,73,69,75,55,64],
[65,0,67,66,67,69,59,58,53,50],
[61,64,0,71,58,66,63,63,59,63],
[66,65,60,0,68,62,60,62,49,56],
[74,64,73,63,0,83,61,75,62,69],
[58,62,65,69,48,0,55,58,59,56],
[62,72,68,71,70,76,0,64,51,71],
[56,73,68,69,56,73,67,0,54,61],
[76,78,72,82,69,72,80,77,0,62],
[67,81,68,75,62,75,60,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,70,49,67,72,62,56,56,49],
[79,0,73,68,71,71,70,69,57,62],
[61,58,0,61,66,57,64,64,62,62],
[82,63,70,0,74,70,72,61,59,63],
[64,60,65,57,0,66,65,54,61,57],
[59,60,74,61,65,0,63,61,55,62],
[69,61,67,59,66,68,0,61,67,54],
[75,62,67,70,77,70,70,0,61,68],
[75,74,69,72,70,76,64,70,0,64],
[82,69,69,68,74,69,77,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,80,88,38,53,53,61,52,41],
[40,0,76,85,46,72,55,33,38,45],
[51,55,0,68,59,39,34,22,38,63],
[43,46,63,0,41,45,38,48,30,30],
[93,85,72,90,0,74,85,72,67,54],
[78,59,92,86,57,0,67,80,74,61],
[78,76,97,93,46,64,0,87,58,52],
[70,98,109,83,59,51,44,0,84,73],
[79,93,93,101,64,57,73,47,0,80],
[90,86,68,101,77,70,79,58,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,67,67,68,62,69,63,63],
[59,0,51,56,61,56,55,67,54,60],
[64,80,0,65,68,68,68,78,67,62],
[64,75,66,0,62,68,67,76,65,61],
[64,70,63,69,0,69,65,71,66,60],
[63,75,63,63,62,0,69,72,67,66],
[69,76,63,64,66,62,0,75,65,64],
[62,64,53,55,60,59,56,0,58,51],
[68,77,64,66,65,64,66,73,0,71],
[68,71,69,70,71,65,67,80,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,58,63,72,66,67,63,49],
[71,0,69,61,75,75,73,70,78,69],
[71,62,0,59,70,72,62,64,63,52],
[73,70,72,0,72,75,72,77,68,65],
[68,56,61,59,0,77,61,73,69,46],
[59,56,59,56,54,0,62,55,62,50],
[65,58,69,59,70,69,0,62,63,54],
[64,61,67,54,58,76,69,0,63,57],
[68,53,68,63,62,69,68,68,0,48],
[82,62,79,66,85,81,77,74,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,67,62,67,72,70,53,65,76],
[81,0,72,68,63,69,78,67,69,82],
[64,59,0,52,59,61,68,66,65,66],
[69,63,79,0,70,72,81,74,68,76],
[64,68,72,61,0,71,73,62,66,79],
[59,62,70,59,60,0,72,58,62,72],
[61,53,63,50,58,59,0,64,60,70],
[78,64,65,57,69,73,67,0,69,77],
[66,62,66,63,65,69,71,62,0,74],
[55,49,65,55,52,59,61,54,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,69,69,63,60,75,90,51],
[65,0,68,68,66,74,73,75,74,68],
[63,63,0,71,68,67,59,55,75,62],
[62,63,60,0,69,74,58,77,60,58],
[62,65,63,62,0,72,49,86,67,50],
[68,57,64,57,59,0,47,76,64,61],
[71,58,72,73,82,84,0,76,80,71],
[56,56,76,54,45,55,55,0,60,61],
[41,57,56,71,64,67,51,71,0,52],
[80,63,69,73,81,70,60,70,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,73,63,67,53,76,67,75],
[67,0,68,81,74,70,55,74,69,69],
[66,63,0,90,73,77,59,71,72,70],
[58,50,41,0,53,51,48,59,64,60],
[68,57,58,78,0,64,53,78,63,69],
[64,61,54,80,67,0,67,65,73,73],
[78,76,72,83,78,64,0,83,72,77],
[55,57,60,72,53,66,48,0,68,71],
[64,62,59,67,68,58,59,63,0,72],
[56,62,61,71,62,58,54,60,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,59,77,51,61,73,67,97],
[64,0,88,70,77,62,91,81,101,101],
[62,43,0,70,59,70,39,62,77,101],
[72,61,61,0,75,54,52,70,50,86],
[54,54,72,56,0,82,56,41,61,97],
[80,69,61,77,49,0,51,71,60,96],
[70,40,92,79,75,80,0,79,61,90],
[58,50,69,61,90,60,52,0,71,82],
[64,30,54,81,70,71,70,60,0,98],
[34,30,30,45,34,35,41,49,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,72,57,60,71,58,62,47,64],
[79,0,77,60,67,69,68,80,66,67],
[59,54,0,60,59,61,58,47,49,47],
[74,71,71,0,64,71,78,77,75,79],
[71,64,72,67,0,79,68,72,51,73],
[60,62,70,60,52,0,51,53,52,55],
[73,63,73,53,63,80,0,68,56,57],
[69,51,84,54,59,78,63,0,54,63],
[84,65,82,56,80,79,75,77,0,64],
[67,64,84,52,58,76,74,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,66,73,51,78,67,55,65,75],
[55,0,54,70,61,66,72,45,46,68],
[65,77,0,63,53,65,73,45,55,62],
[58,61,68,0,63,68,63,52,67,77],
[80,70,78,68,0,78,73,67,64,79],
[53,65,66,63,53,0,64,55,46,72],
[64,59,58,68,58,67,0,54,57,73],
[76,86,86,79,64,76,77,0,72,86],
[66,85,76,64,67,85,74,59,0,80],
[56,63,69,54,52,59,58,45,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,63,67,60,34,53,43,52,46],
[89,0,74,81,78,66,66,72,56,67],
[68,57,0,68,80,35,67,53,58,52],
[64,50,63,0,72,46,55,49,53,56],
[71,53,51,59,0,50,42,46,56,51],
[97,65,96,85,81,0,67,73,59,70],
[78,65,64,76,89,64,0,65,70,67],
[88,59,78,82,85,58,66,0,63,69],
[79,75,73,78,75,72,61,68,0,60],
[85,64,79,75,80,61,64,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,76,68,72,75,76,63,72,60],
[75,0,86,81,78,72,75,69,68,59],
[55,45,0,73,61,58,62,49,59,49],
[63,50,58,0,56,63,71,46,62,50],
[59,53,70,75,0,66,74,63,72,61],
[56,59,73,68,65,0,75,65,60,54],
[55,56,69,60,57,56,0,46,54,50],
[68,62,82,85,68,66,85,0,74,68],
[59,63,72,69,59,71,77,57,0,58],
[71,72,82,81,70,77,81,63,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,74,57,64,72,68,67,57,69],
[71,0,88,60,61,77,69,68,69,74],
[57,43,0,50,44,66,59,61,59,55],
[74,71,81,0,57,68,68,61,62,62],
[67,70,87,74,0,77,65,70,63,71],
[59,54,65,63,54,0,55,55,59,62],
[63,62,72,63,66,76,0,63,68,68],
[64,63,70,70,61,76,68,0,67,66],
[74,62,72,69,68,72,63,64,0,67],
[62,57,76,69,60,69,63,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,83,73,79,75,70,75,67],
[68,0,59,71,65,65,58,65,58,59],
[71,72,0,73,83,72,86,75,65,79],
[48,60,58,0,60,68,60,61,66,58],
[58,66,48,71,0,66,76,89,65,67],
[52,66,59,63,65,0,65,68,53,71],
[56,73,45,71,55,66,0,78,74,53],
[61,66,56,70,42,63,53,0,66,43],
[56,73,66,65,66,78,57,65,0,67],
[64,72,52,73,64,60,78,88,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,68,67,75,68,60,74,65],
[60,0,63,57,63,63,65,58,61,64],
[65,68,0,66,62,70,61,65,72,67],
[63,74,65,0,69,66,72,71,76,69],
[64,68,69,62,0,70,68,57,66,69],
[56,68,61,65,61,0,59,57,64,62],
[63,66,70,59,63,72,0,68,73,67],
[71,73,66,60,74,74,63,0,75,73],
[57,70,59,55,65,67,58,56,0,66],
[66,67,64,62,62,69,64,58,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,77,70,66,61,67,70,69,74],
[51,0,64,62,49,53,59,61,53,61],
[54,67,0,59,55,47,57,59,54,63],
[61,69,72,0,52,53,58,58,65,62],
[65,82,76,79,0,60,59,66,69,75],
[70,78,84,78,71,0,69,64,72,80],
[64,72,74,73,72,62,0,63,69,73],
[61,70,72,73,65,67,68,0,65,62],
[62,78,77,66,62,59,62,66,0,69],
[57,70,68,69,56,51,58,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,74,56,58,56,63,57,64,64],
[70,0,62,63,76,61,81,58,69,63],
[57,69,0,56,63,58,79,61,73,60],
[75,68,75,0,72,62,72,71,73,68],
[73,55,68,59,0,53,73,60,69,57],
[75,70,73,69,78,0,75,76,65,65],
[68,50,52,59,58,56,0,63,52,57],
[74,73,70,60,71,55,68,0,72,68],
[67,62,58,58,62,66,79,59,0,61],
[67,68,71,63,74,66,74,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,57,58,57,57,65,51,50,56],
[63,0,69,65,56,63,72,59,59,63],
[74,62,0,61,53,69,65,74,73,62],
[73,66,70,0,71,65,72,69,65,69],
[74,75,78,60,0,63,75,65,69,80],
[74,68,62,66,68,0,80,80,64,69],
[66,59,66,59,56,51,0,62,61,65],
[80,72,57,62,66,51,69,0,65,66],
[81,72,58,66,62,67,70,66,0,68],
[75,68,69,62,51,62,66,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,61,48,55,80,75,57,63,53],
[79,0,68,58,51,79,61,55,70,67],
[70,63,0,67,53,78,74,57,76,60],
[83,73,64,0,72,80,75,57,68,57],
[76,80,78,59,0,94,77,73,77,74],
[51,52,53,51,37,0,74,52,51,47],
[56,70,57,56,54,57,0,52,56,53],
[74,76,74,74,58,79,79,0,73,64],
[68,61,55,63,54,80,75,58,0,60],
[78,64,71,74,57,84,78,67,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,83,68,70,78,71,70,65,86],
[57,0,68,63,60,71,77,65,63,74],
[48,63,0,52,53,69,64,51,60,63],
[63,68,79,0,63,71,66,60,68,69],
[61,71,78,68,0,80,76,76,74,80],
[53,60,62,60,51,0,71,67,55,72],
[60,54,67,65,55,60,0,70,68,64],
[61,66,80,71,55,64,61,0,68,65],
[66,68,71,63,57,76,63,63,0,76],
[45,57,68,62,51,59,67,66,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,60,61,60,62,61,54,63,55],
[63,0,65,57,62,62,60,59,55,54],
[71,66,0,68,63,64,76,64,66,69],
[70,74,63,0,74,71,67,71,71,62],
[71,69,68,57,0,66,65,69,60,64],
[69,69,67,60,65,0,62,67,63,62],
[70,71,55,64,66,69,0,71,66,62],
[77,72,67,60,62,64,60,0,60,58],
[68,76,65,60,71,68,65,71,0,68],
[76,77,62,69,67,69,69,73,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,70,70,65,58,67,61,70],
[65,0,64,69,65,67,58,71,60,73],
[71,67,0,75,72,65,66,66,68,74],
[61,62,56,0,66,67,60,72,71,72],
[61,66,59,65,0,69,64,63,61,63],
[66,64,66,64,62,0,61,67,62,62],
[73,73,65,71,67,70,0,64,72,71],
[64,60,65,59,68,64,67,0,62,74],
[70,71,63,60,70,69,59,69,0,70],
[61,58,57,59,68,69,60,57,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,78,56,58,55,60,63,70,61],
[69,0,86,55,70,53,66,54,54,67],
[53,45,0,55,43,54,50,47,50,62],
[75,76,76,0,75,79,74,78,56,88],
[73,61,88,56,0,56,61,65,75,68],
[76,78,77,52,75,0,71,50,82,80],
[71,65,81,57,70,60,0,70,70,68],
[68,77,84,53,66,81,61,0,69,87],
[61,77,81,75,56,49,61,62,0,76],
[70,64,69,43,63,51,63,44,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,86,67,72,72,69,67,72,65],
[72,0,87,65,74,76,53,78,69,77],
[45,44,0,48,48,55,57,52,56,59],
[64,66,83,0,69,66,68,78,77,71],
[59,57,83,62,0,61,62,63,69,68],
[59,55,76,65,70,0,52,66,70,68],
[62,78,74,63,69,79,0,76,69,69],
[64,53,79,53,68,65,55,0,75,64],
[59,62,75,54,62,61,62,56,0,69],
[66,54,72,60,63,63,62,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,57,54,43,69,65,67,64],
[72,0,64,65,52,55,59,60,70,57],
[62,67,0,54,55,56,70,54,67,51],
[74,66,77,0,71,64,90,78,74,83],
[77,79,76,60,0,46,65,67,69,72],
[88,76,75,67,85,0,67,59,82,69],
[62,72,61,41,66,64,0,64,65,58],
[66,71,77,53,64,72,67,0,72,67],
[64,61,64,57,62,49,66,59,0,66],
[67,74,80,48,59,62,73,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,71,74,81,71,65,65,67],
[69,0,74,74,74,71,62,67,68,63],
[65,57,0,65,72,80,68,64,60,70],
[60,57,66,0,65,63,63,59,59,58],
[57,57,59,66,0,63,62,60,60,57],
[50,60,51,68,68,0,55,61,54,51],
[60,69,63,68,69,76,0,64,63,64],
[66,64,67,72,71,70,67,0,64,63],
[66,63,71,72,71,77,68,67,0,70],
[64,68,61,73,74,80,67,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,42,59,54,53,61,60,55,52],
[70,0,63,57,68,77,81,80,56,53],
[89,68,0,74,81,70,79,51,69,35],
[72,74,57,0,70,60,74,55,61,60],
[77,63,50,61,0,58,72,47,53,37],
[78,54,61,71,73,0,75,55,55,40],
[70,50,52,57,59,56,0,55,54,40],
[71,51,80,76,84,76,76,0,68,66],
[76,75,62,70,78,76,77,63,0,68],
[79,78,96,71,94,91,91,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,60,70,69,68,62,85,82,54],
[60,0,60,43,77,64,67,68,65,94],
[71,71,0,65,84,91,63,79,69,79],
[61,88,66,0,69,81,79,64,70,88],
[62,54,47,62,0,40,52,52,60,62],
[63,67,40,50,91,0,63,67,73,54],
[69,64,68,52,79,68,0,78,94,84],
[46,63,52,67,79,64,53,0,70,45],
[49,66,62,61,71,58,37,61,0,71],
[77,37,52,43,69,77,47,86,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,57,61,67,70,62,63,61],
[63,0,68,56,67,64,60,71,63,66],
[73,63,0,52,64,69,63,70,71,69],
[74,75,79,0,74,74,71,83,65,73],
[70,64,67,57,0,73,71,72,64,72],
[64,67,62,57,58,0,67,68,56,64],
[61,71,68,60,60,64,0,74,69,65],
[69,60,61,48,59,63,57,0,58,52],
[68,68,60,66,67,75,62,73,0,60],
[70,65,62,58,59,67,66,79,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,67,75,70,76,70,62,66],
[69,0,68,86,59,63,66,74,64,64],
[63,63,0,63,68,59,72,74,59,67],
[64,45,68,0,68,55,56,64,54,63],
[56,72,63,63,0,54,59,62,61,53],
[61,68,72,76,77,0,74,70,75,79],
[55,65,59,75,72,57,0,65,63,69],
[61,57,57,67,69,61,66,0,56,69],
[69,67,72,77,70,56,68,75,0,78],
[65,67,64,68,78,52,62,62,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,81,67,53,55,72,50,59,53],
[89,0,63,79,70,68,81,73,80,67],
[50,68,0,64,60,69,69,48,67,50],
[64,52,67,0,81,53,72,42,72,54],
[78,61,71,50,0,50,53,53,55,49],
[76,63,62,78,81,0,77,46,68,76],
[59,50,62,59,78,54,0,41,61,55],
[81,58,83,89,78,85,90,0,70,93],
[72,51,64,59,76,63,70,61,0,41],
[78,64,81,77,82,55,76,38,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,76,64,69,61,61,69,64],
[61,0,62,66,55,74,67,62,78,58],
[65,69,0,83,60,80,64,66,72,84],
[55,65,48,0,58,60,60,48,61,58],
[67,76,71,73,0,65,66,63,65,69],
[62,57,51,71,66,0,57,45,54,55],
[70,64,67,71,65,74,0,77,64,66],
[70,69,65,83,68,86,54,0,77,69],
[62,53,59,70,66,77,67,54,0,64],
[67,73,47,73,62,76,65,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,46,47,52,64,64,70,84],
[77,0,67,52,47,69,80,66,57,96],
[76,64,0,63,45,53,72,60,58,70],
[85,79,68,0,58,62,70,75,56,87],
[84,84,86,73,0,99,93,88,60,100],
[79,62,78,69,32,0,54,82,56,73],
[67,51,59,61,38,77,0,78,50,99],
[67,65,71,56,43,49,53,0,53,67],
[61,74,73,75,71,75,81,78,0,70],
[47,35,61,44,31,58,32,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,86,64,74,73,69,68,75],
[62,0,65,70,71,66,79,64,51,78],
[64,66,0,65,73,43,60,59,59,61],
[45,61,66,0,75,53,45,66,60,80],
[67,60,58,56,0,63,58,61,51,76],
[57,65,88,78,68,0,64,65,65,69],
[58,52,71,86,73,67,0,70,62,75],
[62,67,72,65,70,66,61,0,64,64],
[63,80,72,71,80,66,69,67,0,74],
[56,53,70,51,55,62,56,67,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,55,50,66,47,51,66,54,52],
[70,0,63,58,71,62,59,73,74,75],
[76,68,0,76,76,58,66,76,70,70],
[81,73,55,0,80,71,62,74,74,76],
[65,60,55,51,0,57,60,60,64,73],
[84,69,73,60,74,0,66,78,81,76],
[80,72,65,69,71,65,0,84,76,79],
[65,58,55,57,71,53,47,0,53,62],
[77,57,61,57,67,50,55,78,0,65],
[79,56,61,55,58,55,52,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,68,79,88,54,61,69,69,65],
[52,0,46,49,50,45,43,57,66,48],
[63,85,0,80,62,54,65,75,84,64],
[52,82,51,0,67,43,49,46,53,57],
[43,81,69,64,0,51,58,57,77,54],
[77,86,77,88,80,0,76,73,63,81],
[70,88,66,82,73,55,0,66,73,65],
[62,74,56,85,74,58,65,0,58,81],
[62,65,47,78,54,68,58,73,0,70],
[66,83,67,74,77,50,66,50,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,58,69,79,59,63,77,71,69],
[49,0,43,56,54,54,51,57,51,46],
[73,88,0,80,73,61,65,89,79,69],
[62,75,51,0,76,60,53,83,63,56],
[52,77,58,55,0,58,59,66,65,58],
[72,77,70,71,73,0,71,77,73,65],
[68,80,66,78,72,60,0,80,70,81],
[54,74,42,48,65,54,51,0,58,53],
[60,80,52,68,66,58,61,73,0,62],
[62,85,62,75,73,66,50,78,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,48,39,63,42,42,30,30,74],
[73,0,54,49,64,97,71,64,41,97],
[83,77,0,45,75,83,66,55,34,77],
[92,82,86,0,73,84,88,50,63,84],
[68,67,56,58,0,75,64,51,69,85],
[89,34,48,47,56,0,53,18,36,52],
[89,60,65,43,67,78,0,67,47,85],
[101,67,76,81,80,113,64,0,71,82],
[101,90,97,68,62,95,84,60,0,75],
[57,34,54,47,46,79,46,49,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,60,60,57,59,65,71,51,55],
[76,0,78,69,65,61,60,65,63,66],
[71,53,0,68,68,56,63,54,55,55],
[71,62,63,0,67,52,58,56,58,50],
[74,66,63,64,0,58,62,68,56,57],
[72,70,75,79,73,0,69,64,60,69],
[66,71,68,73,69,62,0,63,64,67],
[60,66,77,75,63,67,68,0,62,49],
[80,68,76,73,75,71,67,69,0,59],
[76,65,76,81,74,62,64,82,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,72,72,70,63,74,72,72],
[63,0,57,65,62,68,62,60,65,66],
[62,74,0,68,71,70,70,73,66,75],
[59,66,63,0,68,65,63,70,64,68],
[59,69,60,63,0,63,58,63,61,68],
[61,63,61,66,68,0,62,70,66,64],
[68,69,61,68,73,69,0,75,72,78],
[57,71,58,61,68,61,56,0,60,69],
[59,66,65,67,70,65,59,71,0,69],
[59,65,56,63,63,67,53,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,59,55,59,58,65,68,55,64],
[64,0,65,59,61,61,58,60,56,60],
[72,66,0,61,61,56,67,70,62,68],
[76,72,70,0,71,72,72,68,72,65],
[72,70,70,60,0,58,64,63,59,67],
[73,70,75,59,73,0,65,73,62,69],
[66,73,64,59,67,66,0,58,63,63],
[63,71,61,63,68,58,73,0,63,67],
[76,75,69,59,72,69,68,68,0,66],
[67,71,63,66,64,62,68,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,47,67,64,67,77,65,68,71],
[58,0,47,58,65,48,67,53,71,66],
[84,84,0,78,94,76,89,75,63,79],
[64,73,53,0,80,80,69,77,63,75],
[67,66,37,51,0,57,59,41,47,63],
[64,83,55,51,74,0,69,59,60,62],
[54,64,42,62,72,62,0,47,47,50],
[66,78,56,54,90,72,84,0,70,83],
[63,60,68,68,84,71,84,61,0,65],
[60,65,52,56,68,69,81,48,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,62,66,69,63,64,71,54,69],
[75,0,72,57,75,69,70,68,67,74],
[69,59,0,67,74,60,71,75,62,68],
[65,74,64,0,76,73,76,74,62,79],
[62,56,57,55,0,60,54,65,52,57],
[68,62,71,58,71,0,71,70,50,66],
[67,61,60,55,77,60,0,67,54,62],
[60,63,56,57,66,61,64,0,63,68],
[77,64,69,69,79,81,77,68,0,73],
[62,57,63,52,74,65,69,63,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,75,63,57,65,59,69,62],
[63,0,69,69,63,62,63,54,67,58],
[61,62,0,66,61,64,60,56,69,66],
[56,62,65,0,66,59,60,60,68,62],
[68,68,70,65,0,60,62,61,67,64],
[74,69,67,72,71,0,65,64,72,70],
[66,68,71,71,69,66,0,62,80,70],
[72,77,75,71,70,67,69,0,70,65],
[62,64,62,63,64,59,51,61,0,55],
[69,73,65,69,67,61,61,66,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,72,57,46,59,53,71,60,83],
[80,0,65,65,53,60,64,81,77,74],
[59,66,0,68,59,74,64,79,63,77],
[74,66,63,0,72,75,63,83,53,78],
[85,78,72,59,0,63,84,102,60,84],
[72,71,57,56,68,0,64,88,62,68],
[78,67,67,68,47,67,0,81,49,91],
[60,50,52,48,29,43,50,0,55,51],
[71,54,68,78,71,69,82,76,0,91],
[48,57,54,53,47,63,40,80,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,71,66,66,72,68,60,75,67],
[71,0,74,71,70,76,85,68,65,61],
[60,57,0,64,60,67,59,59,62,61],
[65,60,67,0,57,70,76,58,65,53],
[65,61,71,74,0,62,83,73,69,56],
[59,55,64,61,69,0,67,63,69,61],
[63,46,72,55,48,64,0,64,66,54],
[71,63,72,73,58,68,67,0,67,61],
[56,66,69,66,62,62,65,64,0,47],
[64,70,70,78,75,70,77,70,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,63,72,72,59,58,68,60,68],
[77,0,68,67,82,64,68,77,56,57],
[68,63,0,67,65,69,59,65,73,63],
[59,64,64,0,60,70,68,71,74,70],
[59,49,66,71,0,74,61,78,69,63],
[72,67,62,61,57,0,64,62,62,59],
[73,63,72,63,70,67,0,69,69,76],
[63,54,66,60,53,69,62,0,67,67],
[71,75,58,57,62,69,62,64,0,69],
[63,74,68,61,68,72,55,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,58,50,67,56,59,62,52,62],
[79,0,71,61,71,59,69,73,61,65],
[73,60,0,53,71,57,60,64,50,63],
[81,70,78,0,87,67,67,73,59,71],
[64,60,60,44,0,53,58,61,57,52],
[75,72,74,64,78,0,75,75,69,61],
[72,62,71,64,73,56,0,78,57,60],
[69,58,67,58,70,56,53,0,52,55],
[79,70,81,72,74,62,74,79,0,66],
[69,66,68,60,79,70,71,76,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,68,60,82,70,66,71,73,90],
[52,0,64,69,72,61,72,54,75,79],
[63,67,0,68,69,71,57,58,74,79],
[71,62,63,0,60,62,69,69,82,73],
[49,59,62,71,0,58,65,57,85,75],
[61,70,60,69,73,0,65,78,76,78],
[65,59,74,62,66,66,0,62,74,77],
[60,77,73,62,74,53,69,0,70,82],
[58,56,57,49,46,55,57,61,0,68],
[41,52,52,58,56,53,54,49,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,73,74,53,72,84,68,63,66],
[71,0,49,63,84,84,101,72,87,99],
[58,82,0,96,67,71,67,86,91,60],
[57,68,35,0,65,69,58,50,81,48],
[78,47,64,66,0,50,43,56,69,60],
[59,47,60,62,81,0,84,68,40,102],
[47,30,64,73,88,47,0,64,72,70],
[63,59,45,81,75,63,67,0,64,67],
[68,44,40,50,62,91,59,67,0,72],
[65,32,71,83,71,29,61,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,45,40,70,53,58,63,63,57],
[92,0,70,63,78,75,85,58,61,92],
[86,61,0,66,88,78,75,68,60,73],
[91,68,65,0,97,71,64,75,82,93],
[61,53,43,34,0,41,43,50,29,61],
[78,56,53,60,90,0,47,67,65,64],
[73,46,56,67,88,84,0,75,67,71],
[68,73,63,56,81,64,56,0,80,50],
[68,70,71,49,102,66,64,51,0,70],
[74,39,58,38,70,67,60,81,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,75,56,65,67,60,60,68],
[68,0,72,75,65,69,72,69,79,69],
[70,59,0,78,72,62,57,51,75,71],
[56,56,53,0,62,66,66,61,55,57],
[75,66,59,69,0,70,65,59,69,80],
[66,62,69,65,61,0,64,62,59,62],
[64,59,74,65,66,67,0,66,69,68],
[71,62,80,70,72,69,65,0,68,71],
[71,52,56,76,62,72,62,63,0,75],
[63,62,60,74,51,69,63,60,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,0,44,33,33,17,35,0,41],
[88,0,36,39,88,69,29,71,12,77],
[131,95,0,62,82,70,74,111,68,84],
[87,92,69,0,69,57,29,104,51,69],
[98,43,49,62,0,50,55,67,43,82],
[98,62,61,74,81,0,55,79,43,94],
[114,102,57,102,76,76,0,92,75,65],
[96,60,20,27,64,52,39,0,0,60],
[131,119,63,80,88,88,56,131,0,96],
[90,54,47,62,49,37,66,71,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,80,83,131,21,51,113,131,131],
[0,0,50,54,113,21,21,83,54,101],
[51,81,0,51,102,72,102,102,51,102],
[48,77,80,0,98,21,51,131,98,98],
[0,18,29,33,0,0,0,62,0,80],
[110,110,59,110,131,0,30,110,110,110],
[80,110,29,80,131,101,0,131,80,131],
[18,48,29,0,69,21,0,0,18,68],
[0,77,80,33,131,21,51,113,0,131],
[0,30,29,33,51,21,0,63,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,45,64,78,72,66,88,83,55],
[44,0,42,55,54,53,20,91,60,36],
[86,89,0,79,79,78,55,94,88,62],
[67,76,52,0,66,75,67,84,72,59],
[53,77,52,65,0,62,33,75,61,59],
[59,78,53,56,69,0,40,84,75,64],
[65,111,76,64,98,91,0,99,69,74],
[43,40,37,47,56,47,32,0,43,31],
[48,71,43,59,70,56,62,88,0,30],
[76,95,69,72,72,67,57,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,65,74,67,68,60,71,71,67],
[57,0,54,73,68,67,68,62,63,70],
[66,77,0,67,65,70,61,60,73,74],
[57,58,64,0,55,65,54,57,58,57],
[64,63,66,76,0,75,58,63,66,70],
[63,64,61,66,56,0,61,61,68,62],
[71,63,70,77,73,70,0,71,75,76],
[60,69,71,74,68,70,60,0,70,69],
[60,68,58,73,65,63,56,61,0,66],
[64,61,57,74,61,69,55,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,79,76,67,74,70,69,72],
[64,0,67,68,66,65,60,65,66,63],
[67,64,0,73,66,64,58,57,71,58],
[52,63,58,0,59,60,57,58,60,59],
[55,65,65,72,0,73,63,65,62,64],
[64,66,67,71,58,0,67,68,72,61],
[57,71,73,74,68,64,0,69,64,73],
[61,66,74,73,66,63,62,0,68,65],
[62,65,60,71,69,59,67,63,0,64],
[59,68,73,72,67,70,58,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,66,72,74,87,74,66,64,65],
[57,0,61,74,80,87,56,60,61,65],
[65,70,0,77,82,84,55,68,81,68],
[59,57,54,0,78,92,59,50,61,78],
[57,51,49,53,0,69,57,51,59,60],
[44,44,47,39,62,0,53,49,54,45],
[57,75,76,72,74,78,0,66,72,79],
[65,71,63,81,80,82,65,0,73,66],
[67,70,50,70,72,77,59,58,0,68],
[66,66,63,53,71,86,52,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,68,62,66,67,69,64,58,65],
[58,0,65,58,65,57,67,59,58,67],
[63,66,0,64,65,67,66,69,62,64],
[69,73,67,0,64,66,76,70,65,60],
[65,66,66,67,0,70,67,72,65,62],
[64,74,64,65,61,0,67,67,66,67],
[62,64,65,55,64,64,0,63,63,63],
[67,72,62,61,59,64,68,0,54,64],
[73,73,69,66,66,65,68,77,0,72],
[66,64,67,71,69,64,68,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,67,74,61,60,78,73,63],
[62,0,59,58,63,69,60,70,66,65],
[60,72,0,59,69,64,59,71,64,59],
[64,73,72,0,65,73,68,73,67,62],
[57,68,62,66,0,65,60,67,65,66],
[70,62,67,58,66,0,65,71,64,63],
[71,71,72,63,71,66,0,81,73,62],
[53,61,60,58,64,60,50,0,68,58],
[58,65,67,64,66,67,58,63,0,66],
[68,66,72,69,65,68,69,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,66,70,66,69,57,73,67,84],
[47,0,69,51,58,74,56,54,58,70],
[65,62,0,50,68,67,58,57,64,51],
[61,80,81,0,80,82,73,83,57,74],
[65,73,63,51,0,73,56,50,59,71],
[62,57,64,49,58,0,51,52,44,66],
[74,75,73,58,75,80,0,70,69,76],
[58,77,74,48,81,79,61,0,55,71],
[64,73,67,74,72,87,62,76,0,76],
[47,61,80,57,60,65,55,60,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,64,48,78,69,44,35,54,78],
[55,0,54,56,102,68,61,58,81,89],
[67,77,0,60,90,95,69,68,62,89],
[83,75,71,0,85,69,72,63,84,74],
[53,29,41,46,0,50,59,39,33,31],
[62,63,36,62,81,0,73,58,49,66],
[87,70,62,59,72,58,0,51,60,60],
[96,73,63,68,92,73,80,0,75,83],
[77,50,69,47,98,82,71,56,0,67],
[53,42,42,57,100,65,71,48,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,65,74,67,72,63,73,68],
[61,0,61,64,67,60,70,66,73,68],
[65,70,0,69,71,75,82,63,72,69],
[66,67,62,0,70,68,75,60,74,69],
[57,64,60,61,0,66,68,59,70,65],
[64,71,56,63,65,0,73,66,67,62],
[59,61,49,56,63,58,0,56,59,62],
[68,65,68,71,72,65,75,0,74,68],
[58,58,59,57,61,64,72,57,0,62],
[63,63,62,62,66,69,69,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,55,65,77,64,61,66,77],
[63,0,61,51,60,69,51,60,55,61],
[69,70,0,52,71,76,63,78,68,70],
[76,80,79,0,64,76,71,73,81,80],
[66,71,60,67,0,77,69,64,64,84],
[54,62,55,55,54,0,48,44,67,61],
[67,80,68,60,62,83,0,70,85,75],
[70,71,53,58,67,87,61,0,77,68],
[65,76,63,50,67,64,46,54,0,75],
[54,70,61,51,47,70,56,63,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,56,55,52,58,55,59,53,64],
[68,0,54,58,65,59,64,60,60,67],
[75,77,0,67,70,66,66,71,62,71],
[76,73,64,0,66,66,71,69,61,65],
[79,66,61,65,0,63,64,61,60,59],
[73,72,65,65,68,0,60,64,58,74],
[76,67,65,60,67,71,0,67,66,71],
[72,71,60,62,70,67,64,0,60,68],
[78,71,69,70,71,73,65,71,0,72],
[67,64,60,66,72,57,60,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,65,62,78,65,68,67,66,67],
[74,0,74,69,70,59,64,59,64,71],
[66,57,0,66,72,62,61,58,67,65],
[69,62,65,0,77,66,71,62,69,69],
[53,61,59,54,0,56,59,57,56,60],
[66,72,69,65,75,0,65,61,67,76],
[63,67,70,60,72,66,0,60,78,70],
[64,72,73,69,74,70,71,0,70,66],
[65,67,64,62,75,64,53,61,0,68],
[64,60,66,62,71,55,61,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,61,65,61,55,42,63,58,52],
[76,0,65,69,61,85,70,77,81,68],
[70,66,0,76,56,68,65,66,66,64],
[66,62,55,0,57,73,55,56,58,50],
[70,70,75,74,0,74,70,61,68,84],
[76,46,63,58,57,0,46,64,58,59],
[89,61,66,76,61,85,0,71,73,74],
[68,54,65,75,70,67,60,0,70,59],
[73,50,65,73,63,73,58,61,0,71],
[79,63,67,81,47,72,57,72,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,77,75,77,108,56,75,75,75],
[23,0,49,77,79,47,58,70,98,98],
[54,82,0,82,49,101,82,68,68,68],
[56,54,49,0,51,80,63,21,70,98],
[54,52,82,80,0,80,61,49,49,49],
[23,84,30,51,51,0,51,23,51,79],
[75,73,49,68,70,80,0,70,98,70],
[56,61,63,110,82,108,61,0,49,129],
[56,33,63,61,82,80,33,82,0,101],
[56,33,63,33,82,52,61,2,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,66,62,64,57,65,60,85,62],
[52,0,48,54,55,52,51,72,61,66],
[65,83,0,69,81,74,67,77,88,68],
[69,77,62,0,65,61,62,70,74,72],
[67,76,50,66,0,56,53,78,71,63],
[74,79,57,70,75,0,59,71,70,75],
[66,80,64,69,78,72,0,73,84,71],
[71,59,54,61,53,60,58,0,74,47],
[46,70,43,57,60,61,47,57,0,49],
[69,65,63,59,68,56,60,84,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,63,66,65,64,72,59,64],
[65,0,63,65,70,63,64,69,66,68],
[66,68,0,70,62,63,64,67,62,67],
[68,66,61,0,61,66,64,64,64,57],
[65,61,69,70,0,57,67,71,69,73],
[66,68,68,65,74,0,79,77,73,73],
[67,67,67,67,64,52,0,66,60,68],
[59,62,64,67,60,54,65,0,69,60],
[72,65,69,67,62,58,71,62,0,71],
[67,63,64,74,58,58,63,71,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,48,67,55,48,65,54,48,67],
[77,0,63,73,73,53,87,79,48,69],
[83,68,0,76,84,84,65,89,79,84],
[64,58,55,0,55,46,70,58,58,67],
[76,58,47,76,0,52,79,67,41,78],
[83,78,47,85,79,0,77,82,62,84],
[66,44,66,61,52,54,0,71,53,62],
[77,52,42,73,64,49,60,0,40,49],
[83,83,52,73,90,69,78,91,0,81],
[64,62,47,64,53,47,69,82,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,65,77,64,62,64,57,78],
[62,0,60,64,73,55,49,59,49,68],
[67,71,0,68,80,64,72,61,70,73],
[66,67,63,0,64,59,59,61,65,67],
[54,58,51,67,0,61,59,53,64,69],
[67,76,67,72,70,0,68,74,61,79],
[69,82,59,72,72,63,0,68,70,68],
[67,72,70,70,78,57,63,0,66,74],
[74,82,61,66,67,70,61,65,0,78],
[53,63,58,64,62,52,63,57,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,69,96,64,64,32,64,61,32],
[80,0,104,86,80,84,52,64,104,52],
[62,27,0,47,50,65,52,32,69,32],
[35,45,84,0,60,64,32,52,71,32],
[67,51,81,71,0,61,89,69,86,34],
[67,47,66,67,70,0,72,52,89,62],
[99,79,79,99,42,59,0,77,99,60],
[67,67,99,79,62,79,54,0,99,80],
[70,27,62,60,45,42,32,32,0,34],
[99,79,99,99,97,69,71,51,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,55,56,71,75,58,61,62,58],
[83,0,56,75,79,80,65,75,74,68],
[76,75,0,68,72,76,67,77,63,84],
[75,56,63,0,77,66,68,65,70,69],
[60,52,59,54,0,66,55,66,62,65],
[56,51,55,65,65,0,67,66,62,68],
[73,66,64,63,76,64,0,74,74,77],
[70,56,54,66,65,65,57,0,63,68],
[69,57,68,61,69,69,57,68,0,65],
[73,63,47,62,66,63,54,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,50,52,41,53,51,57,55,54],
[83,0,56,66,49,73,68,59,57,62],
[81,75,0,73,67,64,64,79,62,79],
[79,65,58,0,61,75,68,65,69,73],
[90,82,64,70,0,70,65,64,58,72],
[78,58,67,56,61,0,65,62,65,60],
[80,63,67,63,66,66,0,67,66,75],
[74,72,52,66,67,69,64,0,66,70],
[76,74,69,62,73,66,65,65,0,79],
[77,69,52,58,59,71,56,61,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,78,28,100,69,34,94,99,65],
[75,0,89,81,74,78,52,101,129,101],
[53,42,0,14,86,49,0,80,79,51],
[103,50,117,0,94,69,22,82,99,73],
[31,57,45,37,0,57,29,43,85,57],
[62,53,82,62,74,0,39,68,73,81],
[97,79,131,109,102,92,0,94,99,65],
[37,30,51,49,88,63,37,0,56,42],
[32,2,52,32,46,58,32,75,0,30],
[66,30,80,58,74,50,66,89,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,46,69,45,44,51,41,63,56],
[67,0,64,60,59,48,57,55,70,71],
[85,67,0,73,68,63,68,60,86,79],
[62,71,58,0,44,40,57,49,54,63],
[86,72,63,87,0,74,77,60,76,70],
[87,83,68,91,57,0,77,53,74,69],
[80,74,63,74,54,54,0,50,58,63],
[90,76,71,82,71,78,81,0,65,73],
[68,61,45,77,55,57,73,66,0,56],
[75,60,52,68,61,62,68,58,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,62,59,60,69,63,56,70],
[71,0,67,71,66,61,76,70,67,77],
[68,64,0,62,69,66,69,62,57,70],
[69,60,69,0,65,65,77,69,58,70],
[72,65,62,66,0,70,69,67,59,69],
[71,70,65,66,61,0,77,67,62,65],
[62,55,62,54,62,54,0,63,52,62],
[68,61,69,62,64,64,68,0,57,70],
[75,64,74,73,72,69,79,74,0,75],
[61,54,61,61,62,66,69,61,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,79,59,56,56,73,58,69],
[67,0,65,84,62,62,58,75,56,70],
[61,66,0,80,65,51,53,65,65,69],
[52,47,51,0,59,46,43,51,49,52],
[72,69,66,72,0,59,66,62,63,67],
[75,69,80,85,72,0,65,73,71,76],
[75,73,78,88,65,66,0,67,75,72],
[58,56,66,80,69,58,64,0,56,63],
[73,75,66,82,68,60,56,75,0,67],
[62,61,62,79,64,55,59,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,61,68,62,62,68,58,70],
[71,0,65,68,74,61,68,69,66,75],
[72,66,0,63,54,67,62,72,56,69],
[70,63,68,0,57,66,71,67,65,74],
[63,57,77,74,0,64,73,68,62,70],
[69,70,64,65,67,0,66,73,61,70],
[69,63,69,60,58,65,0,78,66,70],
[63,62,59,64,63,58,53,0,57,65],
[73,65,75,66,69,70,65,74,0,73],
[61,56,62,57,61,61,61,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,67,60,57,61,67,63,67,69],
[58,0,71,64,64,68,63,65,68,62],
[64,60,0,64,54,62,55,57,65,54],
[71,67,67,0,68,63,70,65,67,65],
[74,67,77,63,0,59,68,67,76,72],
[70,63,69,68,72,0,64,71,66,63],
[64,68,76,61,63,67,0,68,68,68],
[68,66,74,66,64,60,63,0,74,64],
[64,63,66,64,55,65,63,57,0,64],
[62,69,77,66,59,68,63,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,59,52,44,69,71,58,56,54],
[59,0,72,48,48,62,75,44,49,65],
[72,59,0,57,52,62,76,60,60,63],
[79,83,74,0,77,69,72,69,65,66],
[87,83,79,54,0,77,93,71,78,101],
[62,69,69,62,54,0,75,63,55,69],
[60,56,55,59,38,56,0,47,46,73],
[73,87,71,62,60,68,84,0,76,74],
[75,82,71,66,53,76,85,55,0,76],
[77,66,68,65,30,62,58,57,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,63,77,73,85,83,74,79,78],
[53,0,41,47,59,66,54,49,56,44],
[68,90,0,63,67,78,77,75,76,71],
[54,84,68,0,58,78,57,62,67,57],
[58,72,64,73,0,71,77,58,55,60],
[46,65,53,53,60,0,57,44,59,57],
[48,77,54,74,54,74,0,57,55,55],
[57,82,56,69,73,87,74,0,79,57],
[52,75,55,64,76,72,76,52,0,58],
[53,87,60,74,71,74,76,74,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,57,76,77,77,76,70,77,91],
[53,0,60,65,61,69,60,65,65,66],
[74,71,0,74,64,76,63,74,71,75],
[55,66,57,0,58,68,53,63,67,60],
[54,70,67,73,0,78,57,57,61,78],
[54,62,55,63,53,0,57,59,66,73],
[55,71,68,78,74,74,0,77,68,73],
[61,66,57,68,74,72,54,0,73,71],
[54,66,60,64,70,65,63,58,0,74],
[40,65,56,71,53,58,58,60,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,40,47,64,48,51,52,47,54],
[84,0,65,95,56,70,95,95,72,45],
[91,66,0,68,99,55,86,80,87,105],
[84,36,63,0,68,69,85,46,52,55],
[67,75,32,63,0,38,72,56,57,59],
[83,61,76,62,93,0,67,64,70,81],
[80,36,45,46,59,64,0,46,70,49],
[79,36,51,85,75,67,85,0,87,53],
[84,59,44,79,74,61,61,44,0,60],
[77,86,26,76,72,50,82,78,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,75,73,74,68,75,70,71],
[62,0,64,67,60,56,57,63,58,64],
[67,67,0,71,70,65,57,69,67,71],
[56,64,60,0,63,63,58,69,72,58],
[58,71,61,68,0,67,63,70,69,58],
[57,75,66,68,64,0,57,73,78,64],
[63,74,74,73,68,74,0,82,77,69],
[56,68,62,62,61,58,49,0,61,63],
[61,73,64,59,62,53,54,70,0,62],
[60,67,60,73,73,67,62,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,59,61,66,63,68,69,69],
[63,0,71,69,65,70,66,76,71,59],
[63,60,0,60,61,66,65,71,68,64],
[72,62,71,0,64,70,70,75,72,65],
[70,66,70,67,0,71,64,79,78,60],
[65,61,65,61,60,0,55,65,66,65],
[68,65,66,61,67,76,0,75,72,69],
[63,55,60,56,52,66,56,0,58,55],
[62,60,63,59,53,65,59,73,0,56],
[62,72,67,66,71,66,62,76,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,64,76,82,60,85,65,77],
[61,0,66,60,68,68,70,81,63,60],
[67,65,0,58,70,77,66,71,68,62],
[67,71,73,0,66,77,67,80,56,69],
[55,63,61,65,0,85,66,77,50,67],
[49,63,54,54,46,0,65,65,52,61],
[71,61,65,64,65,66,0,83,57,65],
[46,50,60,51,54,66,48,0,55,62],
[66,68,63,75,81,79,74,76,0,71],
[54,71,69,62,64,70,66,69,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,67,81,70,58,68,70,68,71],
[55,0,71,76,56,59,76,51,71,64],
[64,60,0,80,52,61,61,63,68,63],
[50,55,51,0,65,66,61,56,81,59],
[61,75,79,66,0,59,54,66,68,73],
[73,72,70,65,72,0,66,59,73,74],
[63,55,70,70,77,65,0,67,65,74],
[61,80,68,75,65,72,64,0,68,57],
[63,60,63,50,63,58,66,63,0,67],
[60,67,68,72,58,57,57,74,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,78,78,60,72,73,79,76,73],
[66,0,79,79,58,55,77,78,80,63],
[53,52,0,83,70,67,62,67,60,75],
[53,52,48,0,52,49,56,70,54,60],
[71,73,61,79,0,70,81,86,71,63],
[59,76,64,82,61,0,76,62,71,80],
[58,54,69,75,50,55,0,67,74,52],
[52,53,64,61,45,69,64,0,53,63],
[55,51,71,77,60,60,57,78,0,59],
[58,68,56,71,68,51,79,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,50,66,74,79,60,56,65,68],
[59,0,53,55,76,70,59,45,64,48],
[81,78,0,56,85,72,70,59,77,66],
[65,76,75,0,84,72,77,69,71,60],
[57,55,46,47,0,68,67,55,44,35],
[52,61,59,59,63,0,69,53,65,49],
[71,72,61,54,64,62,0,56,68,49],
[75,86,72,62,76,78,75,0,77,54],
[66,67,54,60,87,66,63,54,0,53],
[63,83,65,71,96,82,82,77,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,53,51,51,60,65,62,60,62],
[74,0,67,67,61,63,74,67,67,57],
[78,64,0,71,59,75,69,71,79,62],
[80,64,60,0,66,65,72,65,75,60],
[80,70,72,65,0,70,85,69,70,70],
[71,68,56,66,61,0,73,62,70,59],
[66,57,62,59,46,58,0,63,62,61],
[69,64,60,66,62,69,68,0,68,61],
[71,64,52,56,61,61,69,63,0,60],
[69,74,69,71,61,72,70,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,66,62,63,56,52,64,63,68],
[82,0,78,71,68,68,72,75,74,63],
[65,53,0,59,63,61,59,68,58,59],
[69,60,72,0,63,60,68,69,61,67],
[68,63,68,68,0,62,57,66,62,61],
[75,63,70,71,69,0,66,77,71,65],
[79,59,72,63,74,65,0,67,77,65],
[67,56,63,62,65,54,64,0,74,65],
[68,57,73,70,69,60,54,57,0,62],
[63,68,72,64,70,66,66,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,65,59,80,72,74,60,73],
[65,0,63,68,70,75,73,67,61,66],
[65,68,0,66,66,76,67,71,68,57],
[66,63,65,0,58,77,70,64,56,57],
[72,61,65,73,0,77,71,76,76,66],
[51,56,55,54,54,0,54,62,54,59],
[59,58,64,61,60,77,0,58,63,57],
[57,64,60,67,55,69,73,0,55,58],
[71,70,63,75,55,77,68,76,0,63],
[58,65,74,74,65,72,74,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,71,65,62,74,69,58,62,65],
[73,0,66,67,64,76,65,65,68,63],
[60,65,0,57,59,72,63,66,65,66],
[66,64,74,0,65,70,61,63,70,62],
[69,67,72,66,0,72,68,72,65,62],
[57,55,59,61,59,0,62,63,59,60],
[62,66,68,70,63,69,0,75,61,63],
[73,66,65,68,59,68,56,0,63,66],
[69,63,66,61,66,72,70,68,0,68],
[66,68,65,69,69,71,68,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,60,56,76,73,74,85,80],
[62,0,72,58,53,60,71,66,80,75],
[60,59,0,62,66,53,69,73,75,68],
[71,73,69,0,52,68,68,77,65,78],
[75,78,65,79,0,65,78,77,83,74],
[55,71,78,63,66,0,68,83,76,77],
[58,60,62,63,53,63,0,69,74,74],
[57,65,58,54,54,48,62,0,63,73],
[46,51,56,66,48,55,57,68,0,65],
[51,56,63,53,57,54,57,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,63,68,73,65,82,79,62],
[65,0,72,61,70,59,67,71,77,61],
[61,59,0,69,67,70,68,74,72,57],
[68,70,62,0,62,75,65,86,72,78],
[63,61,64,69,0,77,70,70,74,65],
[58,72,61,56,54,0,67,68,63,47],
[66,64,63,66,61,64,0,71,67,63],
[49,60,57,45,61,63,60,0,60,62],
[52,54,59,59,57,68,64,71,0,57],
[69,70,74,53,66,84,68,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,62,54,60,57,62,55,52,51],
[77,0,69,67,62,65,75,71,61,67],
[69,62,0,67,55,71,73,64,61,67],
[77,64,64,0,64,72,66,60,73,66],
[71,69,76,67,0,59,64,66,61,73],
[74,66,60,59,72,0,68,60,69,68],
[69,56,58,65,67,63,0,66,59,69],
[76,60,67,71,65,71,65,0,60,66],
[79,70,70,58,70,62,72,71,0,69],
[80,64,64,65,58,63,62,65,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,54,66,47,62,77,60,53,62],
[67,0,43,61,75,61,69,60,56,67],
[77,88,0,82,66,77,80,64,66,76],
[65,70,49,0,59,67,58,66,57,79],
[84,56,65,72,0,64,72,63,67,85],
[69,70,54,64,67,0,82,68,58,79],
[54,62,51,73,59,49,0,55,41,53],
[71,71,67,65,68,63,76,0,63,86],
[78,75,65,74,64,73,90,68,0,67],
[69,64,55,52,46,52,78,45,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,71,82,71,68,90,86,73],
[66,0,74,62,81,66,68,68,68,64],
[56,57,0,74,71,67,67,72,72,74],
[60,69,57,0,71,59,63,81,65,61],
[49,50,60,60,0,55,56,65,57,57],
[60,65,64,72,76,0,62,88,63,73],
[63,63,64,68,75,69,0,68,62,58],
[41,63,59,50,66,43,63,0,52,44],
[45,63,59,66,74,68,69,79,0,63],
[58,67,57,70,74,58,73,87,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,68,70,63,74,69,62,53,72],
[83,0,90,73,90,77,76,69,75,52],
[63,41,0,52,50,47,59,39,47,36],
[61,58,79,0,55,68,48,37,65,53],
[68,41,81,76,0,73,65,46,56,58],
[57,54,84,63,58,0,68,39,59,60],
[62,55,72,83,66,63,0,52,58,62],
[69,62,92,94,85,92,79,0,65,79],
[78,56,84,66,75,72,73,66,0,66],
[59,79,95,78,73,71,69,52,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,103,51,82,91,83,111,81],
[60,0,51,86,66,78,63,58,101,63],
[69,80,0,101,74,66,69,54,87,98],
[28,45,30,0,35,30,63,22,82,68],
[80,65,57,96,0,74,80,85,91,81],
[49,53,65,101,57,0,81,55,76,85],
[40,68,62,68,51,50,0,32,65,77],
[48,73,77,109,46,76,99,0,120,84],
[20,30,44,49,40,55,66,11,0,40],
[50,68,33,63,50,46,54,47,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,52,62,62,57,63,70,63,60],
[59,0,42,50,65,58,52,65,70,63],
[79,89,0,80,62,77,71,78,78,65],
[69,81,51,0,66,68,54,66,65,60],
[69,66,69,65,0,56,70,64,72,65],
[74,73,54,63,75,0,60,72,70,71],
[68,79,60,77,61,71,0,79,75,73],
[61,66,53,65,67,59,52,0,61,60],
[68,61,53,66,59,61,56,70,0,62],
[71,68,66,71,66,60,58,71,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,58,72,72,63,75,78,56,64],
[61,0,43,58,58,57,46,67,56,47],
[73,88,0,66,86,59,63,78,71,66],
[59,73,65,0,75,62,60,65,59,57],
[59,73,45,56,0,56,52,65,56,56],
[68,74,72,69,75,0,64,75,64,65],
[56,85,68,71,79,67,0,72,62,62],
[53,64,53,66,66,56,59,0,58,66],
[75,75,60,72,75,67,69,73,0,64],
[67,84,65,74,75,66,69,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,58,75,52,65,75,55,49,74],
[29,0,39,67,36,52,55,48,30,55],
[73,92,0,84,48,87,46,43,29,60],
[56,64,47,0,53,34,59,44,23,68],
[79,95,83,78,0,73,71,66,54,78],
[66,79,44,97,58,0,48,45,50,100],
[56,76,85,72,60,83,0,80,48,85],
[76,83,88,87,65,86,51,0,67,90],
[82,101,102,108,77,81,83,64,0,93],
[57,76,71,63,53,31,46,41,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,54,62,65,69,66,48,63,69],
[65,0,54,49,56,69,69,58,55,79],
[77,77,0,48,67,73,58,57,68,77],
[69,82,83,0,64,73,66,57,68,77],
[66,75,64,67,0,65,55,56,62,67],
[62,62,58,58,66,0,54,48,59,67],
[65,62,73,65,76,77,0,63,73,73],
[83,73,74,74,75,83,68,0,65,78],
[68,76,63,63,69,72,58,66,0,69],
[62,52,54,54,64,64,58,53,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,59,72,68,54,64,75,45,69],
[90,0,74,73,77,61,63,74,70,86],
[72,57,0,83,67,91,64,62,64,89],
[59,58,48,0,54,48,54,59,35,67],
[63,54,64,77,0,61,55,53,52,82],
[77,70,40,83,70,0,55,65,71,80],
[67,68,67,77,76,76,0,64,60,69],
[56,57,69,72,78,66,67,0,53,84],
[86,61,67,96,79,60,71,78,0,74],
[62,45,42,64,49,51,62,47,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,53,40,64,45,57,68,52,47],
[75,0,59,52,50,65,60,81,69,66],
[78,72,0,45,73,56,61,53,58,59],
[91,79,86,0,65,59,72,74,67,55],
[67,81,58,66,0,54,65,82,55,66],
[86,66,75,72,77,0,57,87,61,70],
[74,71,70,59,66,74,0,81,69,69],
[63,50,78,57,49,44,50,0,57,72],
[79,62,73,64,76,70,62,74,0,70],
[84,65,72,76,65,61,62,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,48,56,44,55,70,48,69,45],
[58,0,46,69,50,38,51,63,77,58],
[83,85,0,102,73,52,67,60,77,56],
[75,62,29,0,57,38,61,47,85,69],
[87,81,58,74,0,70,72,74,72,66],
[76,93,79,93,61,0,77,60,80,80],
[61,80,64,70,59,54,0,69,66,61],
[83,68,71,84,57,71,62,0,94,56],
[62,54,54,46,59,51,65,37,0,47],
[86,73,75,62,65,51,70,75,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,73,88,63,71,64,74,67,60],
[65,0,66,76,69,52,66,69,70,64],
[58,65,0,76,69,60,61,68,71,65],
[43,55,55,0,44,53,43,45,62,49],
[68,62,62,87,0,64,67,72,74,59],
[60,79,71,78,67,0,56,67,70,66],
[67,65,70,88,64,75,0,76,68,68],
[57,62,63,86,59,64,55,0,68,63],
[64,61,60,69,57,61,63,63,0,61],
[71,67,66,82,72,65,63,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,87,71,77,54,73,92,46,87],
[81,0,87,102,81,130,115,115,84,60],
[44,44,0,111,62,66,93,88,62,49],
[60,29,20,0,77,50,54,54,50,38],
[54,50,69,54,0,72,75,75,44,65],
[77,1,65,81,59,0,72,75,67,38],
[58,16,38,77,56,59,0,80,77,15],
[39,16,43,77,56,56,51,0,57,38],
[85,47,69,81,87,64,54,74,0,69],
[44,71,82,93,66,93,116,93,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,60,66,62,62,50,63,73],
[69,0,64,60,62,61,58,55,63,71],
[69,67,0,62,62,75,69,63,68,75],
[71,71,69,0,67,64,68,66,71,75],
[65,69,69,64,0,63,63,63,69,70],
[69,70,56,67,68,0,68,64,66,75],
[69,73,62,63,68,63,0,65,66,70],
[81,76,68,65,68,67,66,0,79,80],
[68,68,63,60,62,65,65,52,0,70],
[58,60,56,56,61,56,61,51,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,92,84,84,95,73,89,61,73],
[55,0,71,89,58,81,74,85,75,59],
[39,60,0,72,42,62,60,76,54,49],
[47,42,59,0,47,73,53,78,57,53],
[47,73,89,84,0,82,65,90,69,69],
[36,50,69,58,49,0,57,86,47,54],
[58,57,71,78,66,74,0,87,48,66],
[42,46,55,53,41,45,44,0,43,34],
[70,56,77,74,62,84,83,88,0,58],
[58,72,82,78,62,77,65,97,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,85,72,43,63,60,55,55,68],
[56,0,71,56,49,57,50,51,54,54],
[46,60,0,45,57,53,48,48,51,43],
[59,75,86,0,60,68,59,62,62,63],
[88,82,74,71,0,71,74,72,71,65],
[68,74,78,63,60,0,59,70,64,51],
[71,81,83,72,57,72,0,67,58,60],
[76,80,83,69,59,61,64,0,55,56],
[76,77,80,69,60,67,73,76,0,59],
[63,77,88,68,66,80,71,75,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,35,31,49,40,53,39,30,36],
[91,0,68,48,59,57,66,45,67,84],
[96,63,0,46,57,73,84,41,66,79],
[100,83,85,0,65,77,91,65,80,81],
[82,72,74,66,0,49,86,57,77,56],
[91,74,58,54,82,0,74,50,70,77],
[78,65,47,40,45,57,0,49,67,74],
[92,86,90,66,74,81,82,0,64,70],
[101,64,65,51,54,61,64,67,0,66],
[95,47,52,50,75,54,57,61,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,70,66,70,66,71,74,65],
[60,0,69,70,68,62,57,63,62,56],
[59,62,0,61,62,62,58,62,62,47],
[61,61,70,0,67,60,61,63,62,57],
[65,63,69,64,0,58,60,68,63,55],
[61,69,69,71,73,0,66,68,68,60],
[65,74,73,70,71,65,0,72,72,69],
[60,68,69,68,63,63,59,0,64,56],
[57,69,69,69,68,63,59,67,0,59],
[66,75,84,74,76,71,62,75,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,67,65,68,81,63,61,80,64],
[57,0,53,59,58,68,58,58,76,54],
[64,78,0,71,78,82,70,65,78,77],
[66,72,60,0,65,74,59,68,85,67],
[63,73,53,66,0,77,63,67,82,62],
[50,63,49,57,54,0,57,54,67,56],
[68,73,61,72,68,74,0,63,76,61],
[70,73,66,63,64,77,68,0,81,70],
[51,55,53,46,49,64,55,50,0,53],
[67,77,54,64,69,75,70,61,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,75,62,78,64,65,71,67,63],
[61,0,67,71,72,69,63,71,68,66],
[56,64,0,61,67,66,60,67,53,58],
[69,60,70,0,73,71,62,71,68,65],
[53,59,64,58,0,56,68,75,61,62],
[67,62,65,60,75,0,62,59,56,58],
[66,68,71,69,63,69,0,77,63,64],
[60,60,64,60,56,72,54,0,58,59],
[64,63,78,63,70,75,68,73,0,68],
[68,65,73,66,69,73,67,72,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,102,71,37,59,64,64,85,60],
[60,0,73,43,55,71,67,48,53,65],
[29,58,0,34,33,45,41,47,45,43],
[60,88,97,0,55,53,77,30,65,79],
[94,76,98,76,0,52,88,70,84,78],
[72,60,86,78,79,0,84,34,71,86],
[67,64,90,54,43,47,0,54,71,96],
[67,83,84,101,61,97,77,0,67,90],
[46,78,86,66,47,60,60,64,0,55],
[71,66,88,52,53,45,35,41,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,87,83,70,66,71,82,64,81],
[66,0,71,71,69,65,77,73,81,81],
[44,60,0,63,58,48,67,59,55,62],
[48,60,68,0,71,55,60,63,59,67],
[61,62,73,60,0,55,71,63,68,72],
[65,66,83,76,76,0,62,79,62,73],
[60,54,64,71,60,69,0,82,69,81],
[49,58,72,68,68,52,49,0,50,69],
[67,50,76,72,63,69,62,81,0,75],
[50,50,69,64,59,58,50,62,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,52,51,57,62,61,62,65,47],
[73,0,58,49,66,66,58,64,60,55],
[79,73,0,64,66,67,75,68,69,51],
[80,82,67,0,65,70,75,70,71,59],
[74,65,65,66,0,74,68,68,76,64],
[69,65,64,61,57,0,64,68,63,57],
[70,73,56,56,63,67,0,66,73,58],
[69,67,63,61,63,63,65,0,64,71],
[66,71,62,60,55,68,58,67,0,65],
[84,76,80,72,67,74,73,60,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,83,74,63,76,59,72,71,80],
[60,0,87,73,56,91,62,68,87,66],
[48,44,0,62,50,71,66,51,49,63],
[57,58,69,0,62,72,62,68,69,53],
[68,75,81,69,0,81,67,67,60,66],
[55,40,60,59,50,0,55,65,52,40],
[72,69,65,69,64,76,0,66,56,64],
[59,63,80,63,64,66,65,0,72,59],
[60,44,82,62,71,79,75,59,0,69],
[51,65,68,78,65,91,67,72,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,70,71,72,74,79,66,63],
[61,0,66,60,67,69,75,75,66,58],
[66,65,0,67,66,73,75,72,63,64],
[61,71,64,0,64,74,74,75,61,66],
[60,64,65,67,0,74,68,66,72,53],
[59,62,58,57,57,0,67,54,53,57],
[57,56,56,57,63,64,0,57,60,62],
[52,56,59,56,65,77,74,0,55,67],
[65,65,68,70,59,78,71,76,0,62],
[68,73,67,65,78,74,69,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,76,64,77,72,61,68,79,69],
[65,0,80,62,66,64,65,71,77,67],
[55,51,0,61,60,57,67,58,64,64],
[67,69,70,0,71,70,65,65,76,66],
[54,65,71,60,0,59,62,58,73,59],
[59,67,74,61,72,0,69,69,66,76],
[70,66,64,66,69,62,0,72,73,76],
[63,60,73,66,73,62,59,0,74,77],
[52,54,67,55,58,65,58,57,0,65],
[62,64,67,65,72,55,55,54,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,57,62,69,61,60,64,62,70],
[61,0,60,62,58,52,61,61,63,72],
[74,71,0,60,72,66,63,68,68,71],
[69,69,71,0,78,73,65,73,73,70],
[62,73,59,53,0,56,64,59,59,57],
[70,79,65,58,75,0,65,67,65,71],
[71,70,68,66,67,66,0,67,65,61],
[67,70,63,58,72,64,64,0,62,59],
[69,68,63,58,72,66,66,69,0,73],
[61,59,60,61,74,60,70,72,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,57,66,61,62,61,65,62],
[72,0,73,60,61,77,69,74,57,70],
[66,58,0,54,59,72,57,65,58,60],
[74,71,77,0,63,70,71,71,67,72],
[65,70,72,68,0,64,66,76,68,68],
[70,54,59,61,67,0,60,64,67,62],
[69,62,74,60,65,71,0,61,62,68],
[70,57,66,60,55,67,70,0,67,67],
[66,74,73,64,63,64,69,64,0,76],
[69,61,71,59,63,69,63,64,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,60,67,69,71,74,62,73,68],
[77,0,77,66,72,82,85,77,69,63],
[71,54,0,61,65,68,65,63,64,71],
[64,65,70,0,71,70,72,70,87,66],
[62,59,66,60,0,65,70,70,63,59],
[60,49,63,61,66,0,69,66,64,63],
[57,46,66,59,61,62,0,61,71,58],
[69,54,68,61,61,65,70,0,70,64],
[58,62,67,44,68,67,60,61,0,60],
[63,68,60,65,72,68,73,67,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,56,78,61,48,74,71,71,65],
[72,0,44,73,89,75,75,71,75,58],
[75,87,0,70,69,63,84,74,71,58],
[53,58,61,0,76,57,87,63,64,58],
[70,42,62,55,0,68,62,54,73,67],
[83,56,68,74,63,0,73,78,84,74],
[57,56,47,44,69,58,0,47,56,65],
[60,60,57,68,77,53,84,0,70,61],
[60,56,60,67,58,47,75,61,0,55],
[66,73,73,73,64,57,66,70,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,53,54,58,54,57,70,57,72],
[64,0,58,56,53,55,55,66,56,72],
[78,73,0,58,61,62,70,73,69,67],
[77,75,73,0,65,72,61,79,73,71],
[73,78,70,66,0,65,70,73,75,71],
[77,76,69,59,66,0,72,75,72,80],
[74,76,61,70,61,59,0,69,68,74],
[61,65,58,52,58,56,62,0,62,65],
[74,75,62,58,56,59,63,69,0,72],
[59,59,64,60,60,51,57,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,61,85,111,62,106,81,83,95],
[48,0,57,86,91,68,94,89,63,73],
[70,74,0,73,85,55,82,85,69,50],
[46,45,58,0,88,67,85,85,67,64],
[20,40,46,43,0,43,79,48,39,63],
[69,63,76,64,88,0,90,75,71,61],
[25,37,49,46,52,41,0,42,35,42],
[50,42,46,46,83,56,89,0,46,68],
[48,68,62,64,92,60,96,85,0,48],
[36,58,81,67,68,70,89,63,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,57,90,77,77,77,71,76,82],
[62,0,68,85,69,61,68,69,74,72],
[74,63,0,91,80,79,76,62,83,83],
[41,46,40,0,55,62,49,48,62,57],
[54,62,51,76,0,73,71,54,60,87],
[54,70,52,69,58,0,55,58,61,71],
[54,63,55,82,60,76,0,52,70,57],
[60,62,69,83,77,73,79,0,73,67],
[55,57,48,69,71,70,61,58,0,64],
[49,59,48,74,44,60,74,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,70,68,67,66,62,67,62,70],
[64,0,62,62,65,57,55,63,52,65],
[61,69,0,67,70,66,56,60,58,67],
[63,69,64,0,76,71,63,66,60,69],
[64,66,61,55,0,63,61,65,55,61],
[65,74,65,60,68,0,59,70,67,65],
[69,76,75,68,70,72,0,69,65,75],
[64,68,71,65,66,61,62,0,59,59],
[69,79,73,71,76,64,66,72,0,73],
[61,66,64,62,70,66,56,72,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,79,74,80,75,62,73,70,77],
[64,0,74,69,71,63,69,77,67,73],
[52,57,0,67,77,62,60,53,50,54],
[57,62,64,0,60,65,60,57,60,58],
[51,60,54,71,0,62,52,62,60,57],
[56,68,69,66,69,0,66,73,62,64],
[69,62,71,71,79,65,0,75,63,68],
[58,54,78,74,69,58,56,0,50,65],
[61,64,81,71,71,69,68,81,0,74],
[54,58,77,73,74,67,63,66,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,70,75,67,69,75,61,66,77],
[50,0,69,54,60,67,52,65,43,67],
[61,62,0,63,61,88,61,69,63,73],
[56,77,68,0,60,56,55,61,54,52],
[64,71,70,71,0,76,79,79,60,72],
[62,64,43,75,55,0,52,78,55,55],
[56,79,70,76,52,79,0,76,59,76],
[70,66,62,70,52,53,55,0,60,71],
[65,88,68,77,71,76,72,71,0,86],
[54,64,58,79,59,76,55,60,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,104,77,61,59,67,108,76,88],
[52,0,66,91,39,69,63,78,53,107],
[27,65,0,62,52,64,42,78,20,74],
[54,40,69,0,50,47,67,57,47,67],
[70,92,79,81,0,85,60,82,73,91],
[72,62,67,84,46,0,61,82,53,72],
[64,68,89,64,71,70,0,70,64,84],
[23,53,53,74,49,49,61,0,40,72],
[55,78,111,84,58,78,67,91,0,90],
[43,24,57,64,40,59,47,59,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,69,82,69,86,91,50,73],
[62,0,82,78,81,85,87,85,78,76],
[61,49,0,68,88,80,69,94,66,61],
[62,53,63,0,89,76,54,78,59,69],
[49,50,43,42,0,57,63,65,34,54],
[62,46,51,55,74,0,76,67,57,62],
[45,44,62,77,68,55,0,91,55,64],
[40,46,37,53,66,64,40,0,51,63],
[81,53,65,72,97,74,76,80,0,75],
[58,55,70,62,77,69,67,68,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,69,79,80,69,69,63,56,63],
[57,0,59,78,70,68,73,63,61,70],
[62,72,0,77,87,67,64,65,61,75],
[52,53,54,0,64,52,54,55,60,65],
[51,61,44,67,0,56,56,53,56,62],
[62,63,64,79,75,0,63,70,60,64],
[62,58,67,77,75,68,0,69,71,79],
[68,68,66,76,78,61,62,0,66,69],
[75,70,70,71,75,71,60,65,0,80],
[68,61,56,66,69,67,52,62,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,77,74,75,66,68,70,71,62],
[61,0,70,66,68,66,71,68,64,55],
[54,61,0,62,71,65,56,60,65,58],
[57,65,69,0,74,68,71,65,71,67],
[56,63,60,57,0,67,60,60,62,59],
[65,65,66,63,64,0,63,66,66,57],
[63,60,75,60,71,68,0,62,71,64],
[61,63,71,66,71,65,69,0,68,61],
[60,67,66,60,69,65,60,63,0,61],
[69,76,73,64,72,74,67,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,54,66,59,44,61,56,71,76],
[75,0,79,65,67,69,73,59,70,77],
[77,52,0,67,57,49,54,56,56,64],
[65,66,64,0,57,58,58,63,51,78],
[72,64,74,74,0,50,69,62,67,74],
[87,62,82,73,81,0,68,72,75,84],
[70,58,77,73,62,63,0,68,61,72],
[75,72,75,68,69,59,63,0,63,65],
[60,61,75,80,64,56,70,68,0,68],
[55,54,67,53,57,47,59,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,56,63,71,70,52,48,62,59],
[64,0,61,61,60,79,71,50,60,64],
[75,70,0,59,65,68,71,71,63,65],
[68,70,72,0,66,68,53,72,72,68],
[60,71,66,65,0,81,62,60,54,63],
[61,52,63,63,50,0,63,55,52,69],
[79,60,60,78,69,68,0,57,48,57],
[83,81,60,59,71,76,74,0,59,64],
[69,71,68,59,77,79,83,72,0,57],
[72,67,66,63,68,62,74,67,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,67,64,74,63,58,35,26,38],
[79,0,99,72,76,89,60,34,47,63],
[64,32,0,65,71,76,61,35,34,49],
[67,59,66,0,63,88,66,46,29,57],
[57,55,60,68,0,50,39,58,44,49],
[68,42,55,43,81,0,55,39,38,28],
[73,71,70,65,92,76,0,72,59,55],
[96,97,96,85,73,92,59,0,95,76],
[105,84,97,102,87,93,72,36,0,50],
[93,68,82,74,82,103,76,55,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,61,61,72,72,58,60,68,63],
[63,0,63,70,78,67,69,63,67,62],
[70,68,0,65,72,69,67,66,71,72],
[70,61,66,0,75,69,68,66,72,70],
[59,53,59,56,0,63,62,58,70,58],
[59,64,62,62,68,0,51,61,67,61],
[73,62,64,63,69,80,0,69,70,60],
[71,68,65,65,73,70,62,0,73,66],
[63,64,60,59,61,64,61,58,0,62],
[68,69,59,61,73,70,71,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,57,62,55,71,60,67,66,61],
[66,0,60,72,66,65,62,66,58,72],
[74,71,0,74,65,70,67,62,61,69],
[69,59,57,0,55,54,57,52,57,58],
[76,65,66,76,0,74,68,67,60,67],
[60,66,61,77,57,0,61,61,61,66],
[71,69,64,74,63,70,0,68,63,66],
[64,65,69,79,64,70,63,0,57,68],
[65,73,70,74,71,70,68,74,0,78],
[70,59,62,73,64,65,65,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,59,56,52,60,78,73,71],
[70,0,65,56,60,63,61,71,72,65],
[72,66,0,62,63,58,72,77,70,76],
[72,75,69,0,62,66,64,70,80,79],
[75,71,68,69,0,62,72,78,76,76],
[79,68,73,65,69,0,73,75,72,76],
[71,70,59,67,59,58,0,67,72,65],
[53,60,54,61,53,56,64,0,71,78],
[58,59,61,51,55,59,59,60,0,70],
[60,66,55,52,55,55,66,53,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,72,71,62,72,74,73,71,67],
[53,0,62,58,59,59,60,69,62,58],
[59,69,0,70,64,68,66,70,66,66],
[60,73,61,0,71,71,68,77,63,73],
[69,72,67,60,0,71,68,78,72,66],
[59,72,63,60,60,0,60,72,67,64],
[57,71,65,63,63,71,0,71,63,64],
[58,62,61,54,53,59,60,0,60,61],
[60,69,65,68,59,64,68,71,0,59],
[64,73,65,58,65,67,67,70,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,80,67,74,68,73,69,53,65],
[66,0,67,64,61,71,75,59,73,71],
[51,64,0,69,76,67,64,55,66,72],
[64,67,62,0,70,69,59,69,58,70],
[57,70,55,61,0,66,55,56,46,61],
[63,60,64,62,65,0,56,58,49,58],
[58,56,67,72,76,75,0,71,65,68],
[62,72,76,62,75,73,60,0,69,67],
[78,58,65,73,85,82,66,62,0,75],
[66,60,59,61,70,73,63,64,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,57,63,65,46,59,69,55,64],
[64,0,60,67,68,51,63,69,51,57],
[74,71,0,75,76,59,75,78,68,63],
[68,64,56,0,65,57,70,72,55,60],
[66,63,55,66,0,55,69,68,61,62],
[85,80,72,74,76,0,75,79,60,69],
[72,68,56,61,62,56,0,77,55,66],
[62,62,53,59,63,52,54,0,57,64],
[76,80,63,76,70,71,76,74,0,80],
[67,74,68,71,69,62,65,67,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,73,65,78,73,78,71,75,73],
[45,0,68,60,66,59,61,60,63,52],
[58,63,0,63,72,64,58,66,57,55],
[66,71,68,0,74,64,73,73,74,64],
[53,65,59,57,0,44,60,66,55,53],
[58,72,67,67,87,0,62,74,73,61],
[53,70,73,58,71,69,0,70,60,64],
[60,71,65,58,65,57,61,0,63,64],
[56,68,74,57,76,58,71,68,0,57],
[58,79,76,67,78,70,67,67,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,70,69,80,65,64,63,69],
[62,0,69,72,64,86,70,71,72,74],
[62,62,0,56,66,78,73,63,70,66],
[61,59,75,0,65,82,69,76,64,70],
[62,67,65,66,0,74,63,71,66,68],
[51,45,53,49,57,0,63,60,44,50],
[66,61,58,62,68,68,0,68,66,66],
[67,60,68,55,60,71,63,0,61,60],
[68,59,61,67,65,87,65,70,0,69],
[62,57,65,61,63,81,65,71,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,88,84,81,65,63,71,77],
[67,0,60,89,71,84,60,73,83,76],
[62,71,0,85,84,71,56,61,78,77],
[43,42,46,0,76,61,50,44,67,62],
[47,60,47,55,0,57,63,66,79,71],
[50,47,60,70,74,0,41,60,76,74],
[66,71,75,81,68,90,0,54,81,69],
[68,58,70,87,65,71,77,0,77,68],
[60,48,53,64,52,55,50,54,0,53],
[54,55,54,69,60,57,62,63,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,58,56,62,71,51,50,60,63],
[77,0,75,64,69,82,83,67,63,75],
[73,56,0,55,73,78,61,58,61,62],
[75,67,76,0,67,95,72,65,72,67],
[69,62,58,64,0,85,63,54,62,70],
[60,49,53,36,46,0,41,45,45,54],
[80,48,70,59,68,90,0,64,66,66],
[81,64,73,66,77,86,67,0,61,73],
[71,68,70,59,69,86,65,70,0,71],
[68,56,69,64,61,77,65,58,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,59,55,57,63,62,56,70,57],
[60,0,67,64,56,85,76,66,76,78],
[72,64,0,75,67,76,78,64,94,59],
[76,67,56,0,58,69,58,61,85,62],
[74,75,64,73,0,80,79,64,80,73],
[68,46,55,62,51,0,57,59,73,48],
[69,55,53,73,52,74,0,66,68,73],
[75,65,67,70,67,72,65,0,82,62],
[61,55,37,46,51,58,63,49,0,56],
[74,53,72,69,58,83,58,69,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,66,73,71,73,79,63,63],
[60,0,71,64,69,68,68,57,52,56],
[56,60,0,66,62,66,57,61,56,57],
[65,67,65,0,70,68,61,60,63,58],
[58,62,69,61,0,62,59,58,57,57],
[60,63,65,63,69,0,60,60,61,52],
[58,63,74,70,72,71,0,65,56,68],
[52,74,70,71,73,71,66,0,67,61],
[68,79,75,68,74,70,75,64,0,69],
[68,75,74,73,74,79,63,70,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,59,66,50,58,71,70,65,83],
[74,0,65,87,79,71,77,74,80,94],
[72,66,0,81,59,63,76,74,72,89],
[65,44,50,0,53,66,67,58,51,75],
[81,52,72,78,0,63,69,78,81,91],
[73,60,68,65,68,0,66,79,82,91],
[60,54,55,64,62,65,0,57,65,58],
[61,57,57,73,53,52,74,0,61,73],
[66,51,59,80,50,49,66,70,0,76],
[48,37,42,56,40,40,73,58,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,53,73,67,69,72,70,75,68],
[63,0,63,68,73,79,66,66,75,62],
[78,68,0,76,73,83,80,70,68,64],
[58,63,55,0,67,68,70,61,63,56],
[64,58,58,64,0,71,57,62,67,60],
[62,52,48,63,60,0,68,57,64,54],
[59,65,51,61,74,63,0,61,73,55],
[61,65,61,70,69,74,70,0,63,59],
[56,56,63,68,64,67,58,68,0,60],
[63,69,67,75,71,77,76,72,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,72,62,72,67,65,62,72,65],
[65,0,62,73,72,66,67,65,65,68],
[59,69,0,59,61,68,64,53,67,70],
[69,58,72,0,74,64,67,57,64,70],
[59,59,70,57,0,59,64,57,65,53],
[64,65,63,67,72,0,64,71,59,72],
[66,64,67,64,67,67,0,57,64,62],
[69,66,78,74,74,60,74,0,71,76],
[59,66,64,67,66,72,67,60,0,70],
[66,63,61,61,78,59,69,55,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,59,62,62,73,66,53,69,62],
[56,0,50,43,52,50,48,54,56,45],
[72,81,0,63,66,73,58,60,62,66],
[69,88,68,0,69,82,79,62,63,71],
[69,79,65,62,0,91,75,64,72,68],
[58,81,58,49,40,0,57,60,65,58],
[65,83,73,52,56,74,0,68,69,82],
[78,77,71,69,67,71,63,0,81,73],
[62,75,69,68,59,66,62,50,0,76],
[69,86,65,60,63,73,49,58,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,62,73,68,59,70,68,70],
[65,0,69,73,81,69,60,74,73,71],
[61,62,0,64,72,66,56,67,61,59],
[69,58,67,0,65,62,55,63,65,67],
[58,50,59,66,0,62,49,62,54,61],
[63,62,65,69,69,0,63,63,67,64],
[72,71,75,76,82,68,0,70,65,72],
[61,57,64,68,69,68,61,0,63,63],
[63,58,70,66,77,64,66,68,0,63],
[61,60,72,64,70,67,59,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,44,61,64,42,60,46,71,73],
[80,0,74,75,87,77,58,77,81,85],
[87,57,0,69,81,62,73,60,70,77],
[70,56,62,0,82,51,54,61,76,71],
[67,44,50,49,0,53,46,62,51,75],
[89,54,69,80,78,0,75,64,81,90],
[71,73,58,77,85,56,0,38,80,77],
[85,54,71,70,69,67,93,0,66,86],
[60,50,61,55,80,50,51,65,0,93],
[58,46,54,60,56,41,54,45,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,56,68,68,70,62,68,56],
[64,0,60,58,68,69,71,64,69,68],
[65,71,0,59,64,68,71,63,63,55],
[75,73,72,0,76,81,86,70,77,60],
[63,63,67,55,0,72,72,66,62,55],
[63,62,63,50,59,0,70,63,62,53],
[61,60,60,45,59,61,0,60,61,45],
[69,67,68,61,65,68,71,0,66,58],
[63,62,68,54,69,69,70,65,0,58],
[75,63,76,71,76,78,86,73,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,72,58,70,60,63,64,53,55],
[66,0,82,61,71,75,69,67,62,69],
[59,49,0,51,62,53,55,56,55,54],
[73,70,80,0,74,59,67,64,61,66],
[61,60,69,57,0,62,57,63,62,53],
[71,56,78,72,69,0,70,64,65,64],
[68,62,76,64,74,61,0,65,64,60],
[67,64,75,67,68,67,66,0,68,65],
[78,69,76,70,69,66,67,63,0,52],
[76,62,77,65,78,67,71,66,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,71,72,70,68,62,61,86,70],
[57,0,60,56,66,59,59,56,77,71],
[60,71,0,62,58,59,62,59,74,67],
[59,75,69,0,78,68,60,66,81,71],
[61,65,73,53,0,61,64,63,79,77],
[63,72,72,63,70,0,73,68,77,75],
[69,72,69,71,67,58,0,66,82,65],
[70,75,72,65,68,63,65,0,78,67],
[45,54,57,50,52,54,49,53,0,63],
[61,60,64,60,54,56,66,64,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,93,62,54,62,64,65,72,77],
[82,0,93,67,66,54,69,83,86,95],
[38,38,0,39,36,37,43,37,35,71],
[69,64,92,0,67,72,63,74,98,76],
[77,65,95,64,0,54,58,67,82,74],
[69,77,94,59,77,0,74,87,80,96],
[67,62,88,68,73,57,0,55,71,74],
[66,48,94,57,64,44,76,0,76,89],
[59,45,96,33,49,51,60,55,0,76],
[54,36,60,55,57,35,57,42,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,59,60,70,74,64,69,66,65],
[60,0,54,63,68,64,59,73,63,65],
[72,77,0,69,79,75,65,76,72,73],
[71,68,62,0,65,71,64,69,67,69],
[61,63,52,66,0,73,61,66,59,61],
[57,67,56,60,58,0,55,62,62,61],
[67,72,66,67,70,76,0,64,68,64],
[62,58,55,62,65,69,67,0,64,58],
[65,68,59,64,72,69,63,67,0,59],
[66,66,58,62,70,70,67,73,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,65,78,56,37,56,68,66,45],
[76,0,48,71,51,61,52,49,83,37],
[66,83,0,65,34,49,61,54,89,50],
[53,60,66,0,65,38,60,79,81,45],
[75,80,97,66,0,65,74,75,106,78],
[94,70,82,93,66,0,82,78,118,58],
[75,79,70,71,57,49,0,29,82,60],
[63,82,77,52,56,53,102,0,86,61],
[65,48,42,50,25,13,49,45,0,12],
[86,94,81,86,53,73,71,70,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,74,62,67,70,66,70,65],
[65,0,65,62,61,68,67,65,62,65],
[61,66,0,75,66,70,74,69,66,68],
[57,69,56,0,61,67,72,67,60,63],
[69,70,65,70,0,72,73,71,69,70],
[64,63,61,64,59,0,70,68,65,70],
[61,64,57,59,58,61,0,65,64,59],
[65,66,62,64,60,63,66,0,60,65],
[61,69,65,71,62,66,67,71,0,73],
[66,66,63,68,61,61,72,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,68,70,79,55,57,68,67],
[63,0,63,60,77,70,55,60,57,63],
[60,68,0,65,67,68,58,47,67,63],
[63,71,66,0,67,68,60,61,74,67],
[61,54,64,64,0,64,59,59,67,55],
[52,61,63,63,67,0,61,61,69,59],
[76,76,73,71,72,70,0,69,65,73],
[74,71,84,70,72,70,62,0,73,77],
[63,74,64,57,64,62,66,58,0,65],
[64,68,68,64,76,72,58,54,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,106,98,59,101,77,86,66,53],
[63,0,82,68,56,96,78,72,85,63],
[25,49,0,61,57,81,55,71,69,33],
[33,63,70,0,51,95,35,51,49,25],
[72,75,74,80,0,90,75,79,59,59],
[30,35,50,36,41,0,40,45,34,1],
[54,53,76,96,56,91,0,72,57,69],
[45,59,60,80,52,86,59,0,57,32],
[65,46,62,82,72,97,74,74,0,70],
[78,68,98,106,72,130,62,99,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,85,64,77,65,81,65,69],
[67,0,61,87,65,84,68,94,73,66],
[69,70,0,89,63,77,68,95,62,78],
[46,44,42,0,59,59,41,75,41,45],
[67,66,68,72,0,84,63,88,66,63],
[54,47,54,72,47,0,59,73,49,73],
[66,63,63,90,68,72,0,91,70,77],
[50,37,36,56,43,58,40,0,49,54],
[66,58,69,90,65,82,61,82,0,71],
[62,65,53,86,68,58,54,77,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,75,77,79,71,65,71,78,68],
[64,0,65,71,71,69,72,65,71,69],
[56,66,0,68,74,73,75,65,63,73],
[54,60,63,0,73,68,66,63,74,61],
[52,60,57,58,0,62,66,59,65,69],
[60,62,58,63,69,0,64,62,73,61],
[66,59,56,65,65,67,0,64,68,64],
[60,66,66,68,72,69,67,0,74,73],
[53,60,68,57,66,58,63,57,0,69],
[63,62,58,70,62,70,67,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,48,35,70,62,50,66,66,53],
[89,0,61,76,72,71,63,80,66,72],
[83,70,0,60,85,71,70,70,89,88],
[96,55,71,0,99,67,61,84,73,79],
[61,59,46,32,0,62,29,60,75,51],
[69,60,60,64,69,0,53,78,59,66],
[81,68,61,70,102,78,0,72,74,81],
[65,51,61,47,71,53,59,0,70,58],
[65,65,42,58,56,72,57,61,0,55],
[78,59,43,52,80,65,50,73,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,50,49,48,50,32,56,75,59],
[80,0,69,57,74,53,50,70,67,64],
[81,62,0,57,54,46,46,69,71,56],
[82,74,74,0,65,52,60,72,84,64],
[83,57,77,66,0,56,73,70,93,81],
[81,78,85,79,75,0,54,65,78,81],
[99,81,85,71,58,77,0,68,96,66],
[75,61,62,59,61,66,63,0,80,56],
[56,64,60,47,38,53,35,51,0,54],
[72,67,75,67,50,50,65,75,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,80,68,71,66,59,60,75],
[59,0,67,73,69,60,60,65,68,75],
[64,64,0,66,63,62,56,58,61,60],
[51,58,65,0,64,63,52,61,58,69],
[63,62,68,67,0,64,58,67,60,74],
[60,71,69,68,67,0,66,66,57,68],
[65,71,75,79,73,65,0,69,68,75],
[72,66,73,70,64,65,62,0,61,71],
[71,63,70,73,71,74,63,70,0,69],
[56,56,71,62,57,63,56,60,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,44,72,82,74,73,73,34,67],
[62,0,47,61,56,56,67,60,57,43],
[87,84,0,83,97,74,93,63,65,69],
[59,70,48,0,82,51,66,76,54,50],
[49,75,34,49,0,43,48,59,49,74],
[57,75,57,80,88,0,67,55,67,74],
[58,64,38,65,83,64,0,64,36,63],
[58,71,68,55,72,76,67,0,33,64],
[97,74,66,77,82,64,95,98,0,91],
[64,88,62,81,57,57,68,67,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,53,63,59,47,66,56,58],
[71,0,70,57,54,64,66,68,55,54],
[69,61,0,63,64,59,60,71,58,62],
[78,74,68,0,65,67,65,67,63,59],
[68,77,67,66,0,61,62,65,70,55],
[72,67,72,64,70,0,65,74,61,60],
[84,65,71,66,69,66,0,65,53,54],
[65,63,60,64,66,57,66,0,60,58],
[75,76,73,68,61,70,78,71,0,69],
[73,77,69,72,76,71,77,73,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,81,60,81,47,47,60,45,72],
[71,0,73,89,63,31,69,36,50,68],
[50,58,0,96,67,70,68,33,54,47],
[71,42,35,0,48,33,31,42,31,54],
[50,68,64,83,0,47,68,68,83,68],
[84,100,61,98,84,0,59,61,59,77],
[84,62,63,100,63,72,0,62,59,89],
[71,95,98,89,63,70,69,0,50,68],
[86,81,77,100,48,72,72,81,0,74],
[59,63,84,77,63,54,42,63,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,64,54,63,75,74,62,63],
[64,0,64,59,65,70,63,72,62,68],
[58,67,0,62,55,70,65,61,77,73],
[67,72,69,0,71,63,71,72,67,74],
[77,66,76,60,0,68,71,78,75,63],
[68,61,61,68,63,0,64,72,73,62],
[56,68,66,60,60,67,0,68,70,62],
[57,59,70,59,53,59,63,0,62,65],
[69,69,54,64,56,58,61,69,0,61],
[68,63,58,57,68,69,69,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,45,49,93,64,84,62,118,80],
[51,0,50,16,93,69,87,46,82,118],
[86,81,0,64,126,81,73,79,86,89],
[82,115,67,0,110,53,102,108,115,102],
[38,38,5,21,0,5,71,38,73,56],
[67,62,50,78,126,0,100,75,102,85],
[47,44,58,29,60,31,0,42,49,80],
[69,85,52,23,93,56,89,0,102,118],
[13,49,45,16,58,29,82,29,0,80],
[51,13,42,29,75,46,51,13,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,60,73,77,73,64,66,66],
[61,0,61,62,62,67,56,63,66,54],
[67,70,0,63,68,67,81,72,75,72],
[71,69,68,0,71,65,85,74,65,58],
[58,69,63,60,0,62,77,71,62,75],
[54,64,64,66,69,0,77,58,63,65],
[58,75,50,46,54,54,0,65,58,55],
[67,68,59,57,60,73,66,0,65,62],
[65,65,56,66,69,68,73,66,0,66],
[65,77,59,73,56,66,76,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,62,83,29,99,57,86,41,53],
[81,0,68,93,71,89,55,121,81,95],
[69,63,0,94,46,84,67,109,67,69],
[48,38,37,0,43,79,17,75,62,49],
[102,60,85,88,0,103,75,119,63,94],
[32,42,47,52,28,0,37,76,51,65],
[74,76,64,114,56,94,0,100,65,76],
[45,10,22,56,12,55,31,0,31,38],
[90,50,64,69,68,80,66,100,0,68],
[78,36,62,82,37,66,55,93,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,60,79,53,70,70,62,83,59],
[59,0,49,57,59,65,63,47,73,47],
[71,82,0,82,76,71,82,70,85,62],
[52,74,49,0,50,79,67,59,74,63],
[78,72,55,81,0,95,62,61,80,66],
[61,66,60,52,36,0,44,54,68,56],
[61,68,49,64,69,87,0,53,73,59],
[69,84,61,72,70,77,78,0,79,68],
[48,58,46,57,51,63,58,52,0,46],
[72,84,69,68,65,75,72,63,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,67,68,68,68,69,69,75,59],
[55,0,55,54,68,58,55,68,64,49],
[64,76,0,65,69,59,69,78,66,63],
[63,77,66,0,74,63,71,66,74,61],
[63,63,62,57,0,58,60,67,67,53],
[63,73,72,68,73,0,66,69,76,54],
[62,76,62,60,71,65,0,64,66,70],
[62,63,53,65,64,62,67,0,70,56],
[56,67,65,57,64,55,65,61,0,52],
[72,82,68,70,78,77,61,75,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,18,51,43,34,20,73,60,51,31],
[113,0,83,66,73,54,107,78,63,41],
[80,48,0,58,42,42,100,83,52,26],
[88,65,73,0,41,67,108,48,68,47],
[97,58,89,90,0,65,103,82,75,77],
[111,77,89,64,66,0,94,87,58,63],
[58,24,31,23,28,37,0,58,34,22],
[71,53,48,83,49,44,73,0,60,54],
[80,68,79,63,56,73,97,71,0,57],
[100,90,105,84,54,68,109,77,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,68,71,59,80,65,76,66],
[71,0,71,69,68,68,66,73,72,65],
[63,60,0,64,68,54,67,56,62,62],
[63,62,67,0,65,65,71,63,63,64],
[60,63,63,66,0,56,72,59,63,64],
[72,63,77,66,75,0,79,75,80,73],
[51,65,64,60,59,52,0,62,57,54],
[66,58,75,68,72,56,69,0,70,69],
[55,59,69,68,68,51,74,61,0,58],
[65,66,69,67,67,58,77,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,50,55,61,39,72,63,71,55],
[91,0,79,88,65,68,96,85,63,71],
[81,52,0,60,48,60,78,64,63,39],
[76,43,71,0,69,78,80,66,73,76],
[70,66,83,62,0,75,82,80,87,74],
[92,63,71,53,56,0,75,71,67,77],
[59,35,53,51,49,56,0,69,48,48],
[68,46,67,65,51,60,62,0,48,47],
[60,68,68,58,44,64,83,83,0,66],
[76,60,92,55,57,54,83,84,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,66,69,63,57,79,71,63],
[68,0,64,66,80,66,66,77,71,74],
[67,67,0,59,74,63,65,69,64,64],
[65,65,72,0,75,65,66,79,70,61],
[62,51,57,56,0,64,58,74,71,55],
[68,65,68,66,67,0,64,76,65,54],
[74,65,66,65,73,67,0,68,73,52],
[52,54,62,52,57,55,63,0,61,51],
[60,60,67,61,60,66,58,70,0,56],
[68,57,67,70,76,77,79,80,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,77,60,53,60,55,74,80,53],
[68,0,82,40,64,68,93,95,89,80],
[54,49,0,40,85,67,55,50,75,77],
[71,91,91,0,95,62,88,75,85,86],
[78,67,46,36,0,56,62,56,88,90],
[71,63,64,69,75,0,88,82,88,82],
[76,38,76,43,69,43,0,48,76,94],
[57,36,81,56,75,49,83,0,98,83],
[51,42,56,46,43,43,55,33,0,64],
[78,51,54,45,41,49,37,48,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,49,58,53,54,58,66,55,50],
[79,0,62,74,74,71,65,71,64,71],
[82,69,0,60,69,73,83,69,66,76],
[73,57,71,0,71,69,72,69,63,71],
[78,57,62,60,0,76,69,57,62,65],
[77,60,58,62,55,0,76,63,55,59],
[73,66,48,59,62,55,0,58,59,62],
[65,60,62,62,74,68,73,0,64,68],
[76,67,65,68,69,76,72,67,0,76],
[81,60,55,60,66,72,69,63,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,54,64,67,63,52,65,59],
[66,0,65,63,57,62,71,69,64,59],
[70,66,0,67,60,78,67,63,65,60],
[77,68,64,0,50,66,71,59,67,55],
[67,74,71,81,0,75,81,77,69,61],
[64,69,53,65,56,0,73,59,61,56],
[68,60,64,60,50,58,0,55,56,48],
[79,62,68,72,54,72,76,0,64,57],
[66,67,66,64,62,70,75,67,0,67],
[72,72,71,76,70,75,83,74,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,59,65,56,63,59,65,61],
[61,0,57,60,57,54,67,58,64,66],
[70,74,0,68,72,59,73,69,73,67],
[72,71,63,0,66,66,75,63,77,68],
[66,74,59,65,0,64,68,64,65,77],
[75,77,72,65,67,0,77,65,75,71],
[68,64,58,56,63,54,0,61,64,62],
[72,73,62,68,67,66,70,0,71,66],
[66,67,58,54,66,56,67,60,0,66],
[70,65,64,63,54,60,69,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,40,79,62,68,57,51,46,60],
[68,0,56,85,56,70,72,69,56,81],
[91,75,0,77,65,85,74,79,69,92],
[52,46,54,0,51,59,64,37,53,65],
[69,75,66,80,0,73,70,60,58,74],
[63,61,46,72,58,0,57,54,46,68],
[74,59,57,67,61,74,0,60,56,72],
[80,62,52,94,71,77,71,0,77,89],
[85,75,62,78,73,85,75,54,0,84],
[71,50,39,66,57,63,59,42,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,53,68,73,72,73,75,75,108],
[55,0,30,64,61,75,75,61,61,61],
[78,101,0,82,68,92,92,54,72,106],
[63,67,49,0,45,81,87,63,81,87],
[58,70,63,86,0,90,111,101,55,91],
[59,56,39,50,41,0,59,90,51,70],
[58,56,39,44,20,72,0,77,31,91],
[56,70,77,68,30,41,54,0,56,105],
[56,70,59,50,76,80,100,75,0,97],
[23,70,25,44,40,61,40,26,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,75,73,66,62,68,68,59,66],
[59,0,75,65,72,63,68,63,68,69],
[56,56,0,58,58,51,62,53,52,58],
[58,66,73,0,66,57,62,72,66,60],
[65,59,73,65,0,61,57,60,53,66],
[69,68,80,74,70,0,63,61,63,66],
[63,63,69,69,74,68,0,65,60,59],
[63,68,78,59,71,70,66,0,66,67],
[72,63,79,65,78,68,71,65,0,65],
[65,62,73,71,65,65,72,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,64,63,64,61,74,74,66],
[62,0,66,60,69,51,55,61,72,64],
[62,65,0,56,67,53,63,53,69,53],
[67,71,75,0,68,74,65,62,70,65],
[68,62,64,63,0,57,56,64,58,60],
[67,80,78,57,74,0,71,63,69,69],
[70,76,68,66,75,60,0,76,70,79],
[57,70,78,69,67,68,55,0,66,67],
[57,59,62,61,73,62,61,65,0,57],
[65,67,78,66,71,62,52,64,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,61,58,64,67,70,66,71,71],
[78,0,66,61,61,60,66,68,78,68],
[70,65,0,57,56,51,58,67,68,47],
[73,70,74,0,73,69,81,70,70,64],
[67,70,75,58,0,61,72,62,69,65],
[64,71,80,62,70,0,87,69,64,65],
[61,65,73,50,59,44,0,64,65,52],
[65,63,64,61,69,62,67,0,78,67],
[60,53,63,61,62,67,66,53,0,58],
[60,63,84,67,66,66,79,64,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,66,73,72,75,71,72,63],
[61,0,77,74,74,74,79,67,67,63],
[66,54,0,73,74,72,64,63,62,65],
[65,57,58,0,58,74,51,55,59,53],
[58,57,57,73,0,77,65,57,74,70],
[59,57,59,57,54,0,57,53,67,67],
[56,52,67,80,66,74,0,59,68,70],
[60,64,68,76,74,78,72,0,74,67],
[59,64,69,72,57,64,63,57,0,66],
[68,68,66,78,61,64,61,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,69,68,65,71,55,63,71],
[68,0,60,67,64,70,71,67,74,67],
[60,71,0,68,68,59,78,60,67,67],
[62,64,63,0,60,59,72,71,66,66],
[63,67,63,71,0,59,68,54,59,60],
[66,61,72,72,72,0,67,68,71,66],
[60,60,53,59,63,64,0,57,61,64],
[76,64,71,60,77,63,74,0,69,74],
[68,57,64,65,72,60,70,62,0,64],
[60,64,64,65,71,65,67,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,65,69,68,66,64,66,69,61],
[73,0,65,62,71,67,65,70,73,61],
[66,66,0,71,66,65,63,62,67,59],
[62,69,60,0,72,67,63,66,76,56],
[63,60,65,59,0,54,68,71,60,55],
[65,64,66,64,77,0,64,64,71,64],
[67,66,68,68,63,67,0,64,72,60],
[65,61,69,65,60,67,67,0,68,68],
[62,58,64,55,71,60,59,63,0,62],
[70,70,72,75,76,67,71,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,66,60,63,70,62,75,73],
[69,0,61,72,62,67,71,59,78,69],
[65,70,0,73,69,62,77,67,77,64],
[65,59,58,0,64,57,63,61,66,68],
[71,69,62,67,0,63,74,65,81,74],
[68,64,69,74,68,0,70,67,75,66],
[61,60,54,68,57,61,0,61,68,64],
[69,72,64,70,66,64,70,0,81,70],
[56,53,54,65,50,56,63,50,0,56],
[58,62,67,63,57,65,67,61,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,66,72,62,71,67,59,63],
[70,0,59,58,71,69,67,73,71,65],
[64,72,0,66,70,70,65,75,64,72],
[65,73,65,0,75,66,70,68,73,74],
[59,60,61,56,0,62,63,69,59,58],
[69,62,61,65,69,0,68,67,59,66],
[60,64,66,61,68,63,0,63,62,68],
[64,58,56,63,62,64,68,0,63,59],
[72,60,67,58,72,72,69,68,0,69],
[68,66,59,57,73,65,63,72,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,63,52,63,54,65,70,76,55],
[57,0,60,58,66,47,54,53,49,48],
[68,71,0,65,76,63,64,61,72,59],
[79,73,66,0,66,60,73,75,71,65],
[68,65,55,65,0,54,70,68,66,61],
[77,84,68,71,77,0,73,72,74,65],
[66,77,67,58,61,58,0,67,71,72],
[61,78,70,56,63,59,64,0,67,62],
[55,82,59,60,65,57,60,64,0,67],
[76,83,72,66,70,66,59,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,56,66,68,52,67,57,65,56],
[63,0,59,68,66,61,66,54,63,62],
[75,72,0,75,75,65,72,67,78,73],
[65,63,56,0,58,68,57,56,53,62],
[63,65,56,73,0,59,68,66,70,59],
[79,70,66,63,72,0,64,65,67,66],
[64,65,59,74,63,67,0,59,68,59],
[74,77,64,75,65,66,72,0,73,74],
[66,68,53,78,61,64,63,58,0,66],
[75,69,58,69,72,65,72,57,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,67,65,69,62,60,62,72],
[68,0,67,63,62,66,63,67,61,74],
[69,64,0,66,62,65,64,63,61,68],
[64,68,65,0,67,63,61,60,68,66],
[66,69,69,64,0,64,68,65,60,67],
[62,65,66,68,67,0,63,59,60,68],
[69,68,67,70,63,68,0,60,65,74],
[71,64,68,71,66,72,71,0,60,67],
[69,70,70,63,71,71,66,71,0,72],
[59,57,63,65,64,63,57,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,51,52,44,55,60,57,55,59],
[65,0,65,65,74,58,78,65,62,49],
[80,66,0,62,57,67,65,75,67,55],
[79,66,69,0,53,77,48,63,82,39],
[87,57,74,78,0,79,70,86,85,63],
[76,73,64,54,52,0,67,61,73,53],
[71,53,66,83,61,64,0,75,68,51],
[74,66,56,68,45,70,56,0,61,67],
[76,69,64,49,46,58,63,70,0,58],
[72,82,76,92,68,78,80,64,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,50,61,24,31,27,47,44,66],
[79,0,31,55,49,17,54,33,99,53],
[81,100,0,67,46,53,63,75,100,80],
[70,76,64,0,9,26,45,52,70,77],
[107,82,85,122,0,55,95,72,120,79],
[100,114,78,105,76,0,75,53,120,75],
[104,77,68,86,36,56,0,49,100,77],
[84,98,56,79,59,78,82,0,84,92],
[87,32,31,61,11,11,31,47,0,46],
[65,78,51,54,52,56,54,39,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,57,67,68,88,67,73,74,51],
[68,0,62,66,74,76,66,80,86,56],
[74,69,0,56,63,66,45,72,76,69],
[64,65,75,0,67,90,72,77,68,75],
[63,57,68,64,0,84,69,71,92,64],
[43,55,65,41,47,0,53,57,62,41],
[64,65,86,59,62,78,0,90,81,64],
[58,51,59,54,60,74,41,0,62,58],
[57,45,55,63,39,69,50,69,0,57],
[80,75,62,56,67,90,67,73,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,67,76,60,61,61,63,57],
[68,0,70,63,77,64,60,64,66,64],
[60,61,0,66,78,59,66,65,59,61],
[64,68,65,0,83,64,69,71,66,69],
[55,54,53,48,0,58,59,57,52,52],
[71,67,72,67,73,0,64,70,69,59],
[70,71,65,62,72,67,0,69,64,62],
[70,67,66,60,74,61,62,0,60,60],
[68,65,72,65,79,62,67,71,0,67],
[74,67,70,62,79,72,69,71,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,80,61,87,82,48,51,46,45],
[68,0,84,67,74,80,65,63,51,42],
[51,47,0,70,60,59,39,54,39,55],
[70,64,61,0,76,83,57,60,52,59],
[44,57,71,55,0,82,58,53,39,50],
[49,51,72,48,49,0,40,50,51,43],
[83,66,92,74,73,91,0,66,67,65],
[80,68,77,71,78,81,65,0,64,67],
[85,80,92,79,92,80,64,67,0,61],
[86,89,76,72,81,88,66,64,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,73,62,53,42,45,60,51,41],
[73,0,91,61,67,71,64,68,63,62],
[58,40,0,55,62,57,66,66,57,66],
[69,70,76,0,80,69,53,66,67,67],
[78,64,69,51,0,59,55,65,57,73],
[89,60,74,62,72,0,62,69,60,66],
[86,67,65,78,76,69,0,83,74,65],
[71,63,65,65,66,62,48,0,65,58],
[80,68,74,64,74,71,57,66,0,60],
[90,69,65,64,58,65,66,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,54,64,67,64,61,67,64,71],
[67,0,65,65,66,75,68,65,67,68],
[77,66,0,58,69,75,70,68,64,69],
[67,66,73,0,65,65,62,67,71,79],
[64,65,62,66,0,73,60,72,63,67],
[67,56,56,66,58,0,62,60,64,66],
[70,63,61,69,71,69,0,67,68,68],
[64,66,63,64,59,71,64,0,61,73],
[67,64,67,60,68,67,63,70,0,69],
[60,63,62,52,64,65,63,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,67,69,56,56,61,82,63],
[68,0,64,83,79,69,60,71,65,68],
[69,67,0,76,70,63,67,67,74,64],
[64,48,55,0,65,60,60,71,69,56],
[62,52,61,66,0,52,55,55,75,58],
[75,62,68,71,79,0,61,79,76,69],
[75,71,64,71,76,70,0,78,70,68],
[70,60,64,60,76,52,53,0,71,60],
[49,66,57,62,56,55,61,60,0,56],
[68,63,67,75,73,62,63,71,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,53,61,69,63,49,84,73,53],
[76,0,76,71,75,79,58,91,83,60],
[78,55,0,63,55,53,50,74,72,59],
[70,60,68,0,73,67,60,88,66,63],
[62,56,76,58,0,78,72,80,81,64],
[68,52,78,64,53,0,59,82,82,60],
[82,73,81,71,59,72,0,84,85,72],
[47,40,57,43,51,49,47,0,59,52],
[58,48,59,65,50,49,46,72,0,58],
[78,71,72,68,67,71,59,79,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,77,65,71,79,68,79,86,83],
[68,0,76,70,64,73,74,79,83,77],
[54,55,0,58,53,68,62,75,71,72],
[66,61,73,0,53,71,64,75,82,68],
[60,67,78,78,0,72,70,75,85,75],
[52,58,63,60,59,0,60,64,80,64],
[63,57,69,67,61,71,0,65,77,73],
[52,52,56,56,56,67,66,0,67,71],
[45,48,60,49,46,51,54,64,0,60],
[48,54,59,63,56,67,58,60,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,76,56,69,69,62,70,65,68],
[57,0,69,49,58,60,44,52,57,51],
[55,62,0,64,57,67,49,54,61,54],
[75,82,67,0,62,66,67,53,71,71],
[62,73,74,69,0,67,61,59,62,62],
[62,71,64,65,64,0,61,54,72,49],
[69,87,82,64,70,70,0,57,67,67],
[61,79,77,78,72,77,74,0,73,66],
[66,74,70,60,69,59,64,58,0,58],
[63,80,77,60,69,82,64,65,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,72,57,75,62,65,62,71,68],
[75,0,73,55,71,57,72,60,66,89],
[59,58,0,64,69,53,49,57,75,92],
[74,76,67,0,86,66,78,55,73,84],
[56,60,62,45,0,55,69,51,68,73],
[69,74,78,65,76,0,71,80,88,87],
[66,59,82,53,62,60,0,73,66,83],
[69,71,74,76,80,51,58,0,84,102],
[60,65,56,58,63,43,65,47,0,63],
[63,42,39,47,58,44,48,29,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,75,60,77,68,71,64,71,70],
[75,0,76,66,73,65,64,73,68,73],
[56,55,0,67,66,63,65,67,69,66],
[71,65,64,0,71,52,64,69,69,70],
[54,58,65,60,0,58,63,64,62,70],
[63,66,68,79,73,0,75,67,61,65],
[60,67,66,67,68,56,0,66,65,67],
[67,58,64,62,67,64,65,0,56,63],
[60,63,62,62,69,70,66,75,0,66],
[61,58,65,61,61,66,64,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,57,60,59,65,67,84,75,71],
[49,0,55,76,58,84,72,92,71,73],
[74,76,0,58,64,65,74,78,70,64],
[71,55,73,0,69,72,61,80,82,76],
[72,73,67,62,0,75,79,87,79,79],
[66,47,66,59,56,0,59,71,61,63],
[64,59,57,70,52,72,0,84,63,62],
[47,39,53,51,44,60,47,0,56,63],
[56,60,61,49,52,70,68,75,0,55],
[60,58,67,55,52,68,69,68,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,68,64,60,66,69,70,62],
[72,0,62,64,72,68,69,63,73,64],
[66,69,0,69,64,71,72,72,72,70],
[63,67,62,0,61,63,65,75,80,60],
[67,59,67,70,0,68,65,73,69,55],
[71,63,60,68,63,0,76,65,73,67],
[65,62,59,66,66,55,0,64,82,66],
[62,68,59,56,58,66,67,0,64,60],
[61,58,59,51,62,58,49,67,0,57],
[69,67,61,71,76,64,65,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,52,64,71,68,84,56,69,74],
[44,0,50,42,59,60,65,34,58,65],
[79,81,0,57,77,61,76,71,80,63],
[67,89,74,0,76,85,85,65,78,70],
[60,72,54,55,0,56,71,50,64,66],
[63,71,70,46,75,0,75,55,68,66],
[47,66,55,46,60,56,0,48,68,52],
[75,97,60,66,81,76,83,0,80,70],
[62,73,51,53,67,63,63,51,0,62],
[57,66,68,61,65,65,79,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,57,61,61,52,64,66,65,68],
[62,0,63,62,61,61,75,75,68,71],
[74,68,0,68,64,74,71,77,76,80],
[70,69,63,0,60,66,69,71,68,80],
[70,70,67,71,0,62,76,83,71,84],
[79,70,57,65,69,0,63,72,69,75],
[67,56,60,62,55,68,0,76,71,73],
[65,56,54,60,48,59,55,0,61,64],
[66,63,55,63,60,62,60,70,0,71],
[63,60,51,51,47,56,58,67,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,100,86,68,60,84,69,94,88],
[40,0,80,59,47,69,44,47,60,69],
[31,51,0,43,18,46,57,41,60,38],
[45,72,88,0,27,52,67,47,94,49],
[63,84,113,104,0,93,89,65,112,62],
[71,62,85,79,38,0,84,58,71,68],
[47,87,74,64,42,47,0,56,75,68],
[62,84,90,84,66,73,75,0,82,79],
[37,71,71,37,19,60,56,49,0,36],
[43,62,93,82,69,63,63,52,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,75,81,83,65,65,60,57,76],
[62,0,51,72,60,67,59,45,41,66],
[56,80,0,77,63,72,52,84,69,83],
[50,59,54,0,79,57,62,59,59,51],
[48,71,68,52,0,56,54,53,57,51],
[66,64,59,74,75,0,63,48,46,63],
[66,72,79,69,77,68,0,63,59,63],
[71,86,47,72,78,83,68,0,66,68],
[74,90,62,72,74,85,72,65,0,69],
[55,65,48,80,80,68,68,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,75,71,66,64,66,74,65,86],
[70,0,71,69,72,68,67,70,65,74],
[56,60,0,70,60,61,55,65,57,78],
[60,62,61,0,58,67,65,68,73,77],
[65,59,71,73,0,71,62,73,70,80],
[67,63,70,64,60,0,61,66,72,80],
[65,64,76,66,69,70,0,71,66,81],
[57,61,66,63,58,65,60,0,65,75],
[66,66,74,58,61,59,65,66,0,79],
[45,57,53,54,51,51,50,56,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,67,68,67,64,64,61,57],
[68,0,70,75,74,62,74,76,66,67],
[60,61,0,69,60,54,65,59,58,52],
[64,56,62,0,67,51,54,63,66,53],
[63,57,71,64,0,52,56,55,65,63],
[64,69,77,80,79,0,72,72,74,65],
[67,57,66,77,75,59,0,65,65,56],
[67,55,72,68,76,59,66,0,72,58],
[70,65,73,65,66,57,66,59,0,48],
[74,64,79,78,68,66,75,73,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,67,55,67,65,81,69,53],
[60,0,77,71,59,61,76,73,72,62],
[60,54,0,56,49,40,53,64,58,56],
[64,60,75,0,55,52,79,77,60,60],
[76,72,82,76,0,65,71,84,79,70],
[64,70,91,79,66,0,76,79,67,69],
[66,55,78,52,60,55,0,76,59,61],
[50,58,67,54,47,52,55,0,52,52],
[62,59,73,71,52,64,72,79,0,57],
[78,69,75,71,61,62,70,79,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,54,53,59,61,62,63,55,46],
[65,0,52,59,68,57,56,69,69,52],
[77,79,0,76,66,83,75,85,73,64],
[78,72,55,0,60,74,65,70,61,62],
[72,63,65,71,0,77,71,73,63,68],
[70,74,48,57,54,0,56,81,70,49],
[69,75,56,66,60,75,0,69,74,53],
[68,62,46,61,58,50,62,0,60,57],
[76,62,58,70,68,61,57,71,0,63],
[85,79,67,69,63,82,78,74,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,61,58,61,68,59,63,68,49],
[63,0,69,71,60,51,58,63,69,48],
[70,62,0,61,69,69,47,61,77,61],
[73,60,70,0,66,73,56,60,83,67],
[70,71,62,65,0,54,53,56,73,61],
[63,80,62,58,77,0,65,52,72,52],
[72,73,84,75,78,66,0,64,76,60],
[68,68,70,71,75,79,67,0,76,60],
[63,62,54,48,58,59,55,55,0,43],
[82,83,70,64,70,79,71,71,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,80,59,59,67,68,69,65,92],
[58,0,44,75,44,84,72,80,73,69],
[51,87,0,58,73,68,66,55,85,70],
[72,56,73,0,58,63,56,56,64,71],
[72,87,58,73,0,88,87,71,87,75],
[64,47,63,68,43,0,61,50,65,47],
[63,59,65,75,44,70,0,62,78,58],
[62,51,76,75,60,81,69,0,78,46],
[66,58,46,67,44,66,53,53,0,67],
[39,62,61,60,56,84,73,85,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,84,62,79,66,61,72,81,77],
[42,0,70,50,56,45,53,58,62,59],
[47,61,0,51,54,45,57,54,66,57],
[69,81,80,0,63,49,66,57,81,71],
[52,75,77,68,0,55,81,59,81,67],
[65,86,86,82,76,0,74,74,89,71],
[70,78,74,65,50,57,0,68,75,74],
[59,73,77,74,72,57,63,0,75,78],
[50,69,65,50,50,42,56,56,0,64],
[54,72,74,60,64,60,57,53,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,47,51,48,53,52,61,56,52],
[71,0,60,62,61,64,64,63,62,60],
[84,71,0,68,70,69,67,77,60,68],
[80,69,63,0,64,68,65,69,65,64],
[83,70,61,67,0,65,68,72,65,69],
[78,67,62,63,66,0,74,70,60,67],
[79,67,64,66,63,57,0,64,67,70],
[70,68,54,62,59,61,67,0,66,67],
[75,69,71,66,66,71,64,65,0,70],
[79,71,63,67,62,64,61,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,61,81,60,39,64,71,48],
[68,0,58,90,92,68,54,70,61,54],
[67,73,0,68,85,83,63,68,67,50],
[70,41,63,0,58,51,30,46,49,45],
[50,39,46,73,0,32,35,29,54,45],
[71,63,48,80,99,0,67,61,76,60],
[92,77,68,101,96,64,0,88,84,75],
[67,61,63,85,102,70,43,0,79,59],
[60,70,64,82,77,55,47,52,0,37],
[83,77,81,86,86,71,56,72,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,57,58,67,61,64,76,68,62],
[65,0,50,65,71,78,59,77,68,74],
[74,81,0,64,68,85,74,77,82,75],
[73,66,67,0,70,62,67,68,75,87],
[64,60,63,61,0,63,43,64,53,62],
[70,53,46,69,68,0,68,72,62,93],
[67,72,57,64,88,63,0,83,54,77],
[55,54,54,63,67,59,48,0,68,72],
[63,63,49,56,78,69,77,63,0,66],
[69,57,56,44,69,38,54,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,73,67,71,68,58,63,70],
[65,0,62,78,60,63,64,61,62,71],
[64,69,0,85,66,75,73,70,70,81],
[58,53,46,0,55,60,57,50,58,61],
[64,71,65,76,0,69,70,51,67,73],
[60,68,56,71,62,0,61,55,54,64],
[63,67,58,74,61,70,0,56,57,74],
[73,70,61,81,80,76,75,0,69,73],
[68,69,61,73,64,77,74,62,0,74],
[61,60,50,70,58,67,57,58,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,59,59,70,60,58,64,71,66],
[65,0,71,74,80,65,65,70,77,78],
[72,60,0,56,72,53,65,65,75,74],
[72,57,75,0,69,70,68,69,72,78],
[61,51,59,62,0,55,74,64,62,65],
[71,66,78,61,76,0,79,74,78,75],
[73,66,66,63,57,52,0,67,73,73],
[67,61,66,62,67,57,64,0,81,76],
[60,54,56,59,69,53,58,50,0,67],
[65,53,57,53,66,56,58,55,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,87,65,89,92,37,70,71],
[60,0,59,57,60,84,72,59,57,61],
[60,72,0,70,72,96,84,56,54,89],
[44,74,61,0,67,89,92,22,57,74],
[66,71,59,64,0,99,99,82,74,71],
[42,47,35,42,32,0,31,17,15,35],
[39,59,47,39,32,100,0,41,47,69],
[94,72,75,109,49,114,90,0,70,77],
[61,74,77,74,57,116,84,61,0,106],
[60,70,42,57,60,96,62,54,25,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,80,70,59,68,59,63,60],
[64,0,68,79,70,68,63,71,70,98],
[64,63,0,79,69,56,68,63,42,78],
[51,52,52,0,72,45,72,79,66,59],
[61,61,62,59,0,48,71,51,74,77],
[72,63,75,86,83,0,82,83,71,77],
[63,68,63,59,60,49,0,63,57,65],
[72,60,68,52,80,48,68,0,55,69],
[68,61,89,65,57,60,74,76,0,59],
[71,33,53,72,54,54,66,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,49,16,54,33,22,28,34,53],
[101,0,54,57,78,74,41,63,63,117],
[82,77,0,42,72,72,70,67,72,70],
[115,74,89,0,98,61,78,77,84,88],
[77,53,59,33,0,19,24,23,61,60],
[98,57,59,70,112,0,49,54,70,68],
[109,90,61,53,107,82,0,69,86,96],
[103,68,64,54,108,77,62,0,49,85],
[97,68,59,47,70,61,45,82,0,63],
[78,14,61,43,71,63,35,46,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,78,73,82,81,75,80,63,83],
[61,0,65,76,78,63,67,73,62,76],
[53,66,0,67,64,73,41,72,59,71],
[58,55,64,0,67,70,50,61,64,65],
[49,53,67,64,0,51,50,60,50,46],
[50,68,58,61,80,0,75,69,68,69],
[56,64,90,81,81,56,0,84,60,82],
[51,58,59,70,71,62,47,0,46,64],
[68,69,72,67,81,63,71,85,0,83],
[48,55,60,66,85,62,49,67,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,68,64,70,64,69,68,62,67],
[69,0,76,64,70,70,70,61,67,63],
[63,55,0,60,65,67,64,65,54,65],
[67,67,71,0,68,61,63,62,56,67],
[61,61,66,63,0,62,65,60,51,67],
[67,61,64,70,69,0,58,59,56,63],
[62,61,67,68,66,73,0,57,56,68],
[63,70,66,69,71,72,74,0,59,67],
[69,64,77,75,80,75,75,72,0,70],
[64,68,66,64,64,68,63,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,46,53,62,53,53,56,70,57],
[71,0,57,58,71,60,51,66,65,62],
[85,74,0,60,77,70,64,68,74,65],
[78,73,71,0,77,69,63,69,69,70],
[69,60,54,54,0,52,45,56,60,61],
[78,71,61,62,79,0,58,69,75,65],
[78,80,67,68,86,73,0,64,77,71],
[75,65,63,62,75,62,67,0,78,69],
[61,66,57,62,71,56,54,53,0,58],
[74,69,66,61,70,66,60,62,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,68,68,60,56,72,68,52],
[69,0,55,52,71,55,63,75,73,54],
[66,76,0,54,72,45,63,67,58,60],
[63,79,77,0,76,76,68,85,70,61],
[63,60,59,55,0,47,55,76,58,49],
[71,76,86,55,84,0,78,87,74,74],
[75,68,68,63,76,53,0,83,62,74],
[59,56,64,46,55,44,48,0,56,57],
[63,58,73,61,73,57,69,75,0,70],
[79,77,71,70,82,57,57,74,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,76,73,69,73,62,76,70,77],
[61,0,69,69,71,67,69,67,69,83],
[55,62,0,73,67,76,53,75,62,80],
[58,62,58,0,66,68,63,70,66,78],
[62,60,64,65,0,71,55,72,73,77],
[58,64,55,63,60,0,44,61,62,56],
[69,62,78,68,76,87,0,75,77,80],
[55,64,56,61,59,70,56,0,70,72],
[61,62,69,65,58,69,54,61,0,76],
[54,48,51,53,54,75,51,59,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,62,67,69,58,67,60,60],
[67,0,61,60,67,72,57,67,64,57],
[64,70,0,68,72,72,66,70,67,68],
[69,71,63,0,61,75,62,67,66,65],
[64,64,59,70,0,74,67,63,62,64],
[62,59,59,56,57,0,63,58,49,57],
[73,74,65,69,64,68,0,65,61,70],
[64,64,61,64,68,73,66,0,64,71],
[71,67,64,65,69,82,70,67,0,72],
[71,74,63,66,67,74,61,60,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,63,66,55,69,56,67,63,63],
[76,0,57,69,68,62,73,67,69,62],
[68,74,0,72,72,65,71,74,72,67],
[65,62,59,0,63,60,68,70,76,67],
[76,63,59,68,0,62,63,76,67,66],
[62,69,66,71,69,0,61,63,69,78],
[75,58,60,63,68,70,0,63,64,66],
[64,64,57,61,55,68,68,0,60,60],
[68,62,59,55,64,62,67,71,0,65],
[68,69,64,64,65,53,65,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,62,78,53,65,60,47,59,68],
[75,0,61,89,63,83,58,66,77,70],
[69,70,0,79,58,80,76,74,67,71],
[53,42,52,0,55,67,59,51,70,68],
[78,68,73,76,0,83,69,62,72,61],
[66,48,51,64,48,0,49,45,53,53],
[71,73,55,72,62,82,0,67,81,67],
[84,65,57,80,69,86,64,0,89,75],
[72,54,64,61,59,78,50,42,0,61],
[63,61,60,63,70,78,64,56,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,55,55,73,55,49,57,59],
[71,0,58,68,59,71,68,43,58,75],
[73,73,0,67,67,70,67,63,56,68],
[76,63,64,0,70,80,58,53,64,66],
[76,72,64,61,0,76,56,67,71,66],
[58,60,61,51,55,0,53,29,50,58],
[76,63,64,73,75,78,0,56,61,72],
[82,88,68,78,64,102,75,0,52,82],
[74,73,75,67,60,81,70,79,0,80],
[72,56,63,65,65,73,59,49,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,50,76,45,60,49,80,49,66],
[65,0,65,94,66,80,78,86,70,63],
[81,66,0,72,56,68,68,76,87,73],
[55,37,59,0,37,74,37,54,55,58],
[86,65,75,94,0,76,71,73,82,48],
[71,51,63,57,55,0,57,65,77,51],
[82,53,63,94,60,74,0,74,102,65],
[51,45,55,77,58,66,57,0,77,66],
[82,61,44,76,49,54,29,54,0,54],
[65,68,58,73,83,80,66,65,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,65,70,66,58,79,71,86,72],
[47,0,57,57,65,79,73,60,67,67],
[66,74,0,67,59,66,83,76,65,71],
[61,74,64,0,53,68,75,67,64,76],
[65,66,72,78,0,70,70,73,73,79],
[73,52,65,63,61,0,70,71,76,83],
[52,58,48,56,61,61,0,61,59,60],
[60,71,55,64,58,60,70,0,67,80],
[45,64,66,67,58,55,72,64,0,61],
[59,64,60,55,52,48,71,51,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,64,64,77,56,75,53,64,71],
[75,0,66,77,81,63,76,68,77,75],
[67,65,0,76,72,60,64,59,70,68],
[67,54,55,0,65,57,70,60,62,66],
[54,50,59,66,0,58,61,56,64,71],
[75,68,71,74,73,0,67,60,69,69],
[56,55,67,61,70,64,0,62,63,58],
[78,63,72,71,75,71,69,0,73,76],
[67,54,61,69,67,62,68,58,0,67],
[60,56,63,65,60,62,73,55,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,45,52,64,35,65,50,87,67],
[75,0,59,69,69,46,71,68,95,76],
[86,72,0,68,59,81,80,90,104,94],
[79,62,63,0,55,59,86,82,104,83],
[67,62,72,76,0,66,85,68,74,90],
[96,85,50,72,65,0,73,89,102,83],
[66,60,51,45,46,58,0,51,66,78],
[81,63,41,49,63,42,80,0,89,72],
[44,36,27,27,57,29,65,42,0,41],
[64,55,37,48,41,48,53,59,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,73,65,63,68,62,71,59],
[58,0,71,65,54,59,60,60,66,60],
[62,60,0,47,60,57,49,60,62,54],
[58,66,84,0,62,58,71,69,57,54],
[66,77,71,69,0,71,74,69,69,58],
[68,72,74,73,60,0,73,66,69,53],
[63,71,82,60,57,58,0,60,62,49],
[69,71,71,62,62,65,71,0,69,69],
[60,65,69,74,62,62,69,62,0,65],
[72,71,77,77,73,78,82,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,39,68,93,86,51,64,56,67],
[84,0,56,97,77,83,58,79,68,60],
[92,75,0,53,96,96,79,95,86,72],
[63,34,78,0,68,102,75,87,64,57],
[38,54,35,63,0,89,39,67,46,65],
[45,48,35,29,42,0,46,35,44,55],
[80,73,52,56,92,85,0,69,81,73],
[67,52,36,44,64,96,62,0,45,50],
[75,63,45,67,85,87,50,86,0,68],
[64,71,59,74,66,76,58,81,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,56,62,68,61,67,63,70,61],
[71,0,62,68,71,60,72,67,72,69],
[75,69,0,71,70,66,69,71,73,63],
[69,63,60,0,75,63,62,62,69,70],
[63,60,61,56,0,62,64,64,67,67],
[70,71,65,68,69,0,65,67,72,68],
[64,59,62,69,67,66,0,69,78,62],
[68,64,60,69,67,64,62,0,71,68],
[61,59,58,62,64,59,53,60,0,57],
[70,62,68,61,64,63,69,63,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,58,74,69,92,108,61,61],
[63,0,67,71,55,67,68,94,46,67],
[62,64,0,52,66,42,71,79,49,58],
[73,60,79,0,71,79,81,95,64,73],
[57,76,65,60,0,54,74,82,75,83],
[62,64,89,52,77,0,83,96,70,71],
[39,63,60,50,57,48,0,61,43,55],
[23,37,52,36,49,35,70,0,44,56],
[70,85,82,67,56,61,88,87,0,66],
[70,64,73,58,48,60,76,75,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,71,74,69,66,67,65,58],
[60,0,58,58,65,60,63,65,61,60],
[60,73,0,67,72,64,60,71,60,64],
[60,73,64,0,65,68,70,74,67,66],
[57,66,59,66,0,65,61,69,62,60],
[62,71,67,63,66,0,68,73,62,64],
[65,68,71,61,70,63,0,67,62,69],
[64,66,60,57,62,58,64,0,62,54],
[66,70,71,64,69,69,69,69,0,62],
[73,71,67,65,71,67,62,77,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,53,63,54,62,65,68,59,59],
[64,0,65,57,51,66,62,69,68,61],
[78,66,0,64,67,70,73,70,68,66],
[68,74,67,0,60,72,65,67,66,59],
[77,80,64,71,0,65,69,86,69,65],
[69,65,61,59,66,0,60,76,64,57],
[66,69,58,66,62,71,0,69,63,58],
[63,62,61,64,45,55,62,0,58,55],
[72,63,63,65,62,67,68,73,0,59],
[72,70,65,72,66,74,73,76,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,61,57,56,58,60,54,65],
[63,0,55,62,54,57,57,62,58,65],
[73,76,0,74,68,56,64,70,59,63],
[70,69,57,0,62,51,60,65,53,70],
[74,77,63,69,0,55,64,65,61,71],
[75,74,75,80,76,0,76,77,65,76],
[73,74,67,71,67,55,0,69,66,69],
[71,69,61,66,66,54,62,0,60,68],
[77,73,72,78,70,66,65,71,0,77],
[66,66,68,61,60,55,62,63,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,78,73,81,81,78,61,79,99],
[61,0,70,62,89,47,74,73,77,81],
[53,61,0,58,76,39,69,48,76,68],
[58,69,73,0,64,81,60,59,74,99],
[50,42,55,67,0,71,55,67,47,99],
[50,84,92,50,60,0,74,51,77,84],
[53,57,62,71,76,57,0,60,69,73],
[70,58,83,72,64,80,71,0,92,84],
[52,54,55,57,84,54,62,39,0,71],
[32,50,63,32,32,47,58,47,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,67,53,54,43,58,66,50,61],
[90,0,96,66,74,60,84,73,72,70],
[64,35,0,45,33,48,51,57,48,38],
[78,65,86,0,71,62,69,70,67,62],
[77,57,98,60,0,64,71,66,60,71],
[88,71,83,69,67,0,72,75,64,67],
[73,47,80,62,60,59,0,64,55,54],
[65,58,74,61,65,56,67,0,52,60],
[81,59,83,64,71,67,76,79,0,70],
[70,61,93,69,60,64,77,71,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,59,55,70,70,57,67,58,54],
[59,0,66,66,74,62,57,56,53,64],
[72,65,0,70,74,77,62,71,67,68],
[76,65,61,0,83,67,66,55,54,65],
[61,57,57,48,0,71,50,45,55,60],
[61,69,54,64,60,0,50,58,57,49],
[74,74,69,65,81,81,0,53,66,57],
[64,75,60,76,86,73,78,0,82,72],
[73,78,64,77,76,74,65,49,0,67],
[77,67,63,66,71,82,74,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,58,64,59,64,65,70,72,72],
[74,0,62,66,82,66,61,72,68,82],
[73,69,0,72,69,76,70,70,57,82],
[67,65,59,0,83,67,78,61,71,75],
[72,49,62,48,0,58,56,76,68,82],
[67,65,55,64,73,0,73,86,68,72],
[66,70,61,53,75,58,0,58,77,65],
[61,59,61,70,55,45,73,0,72,72],
[59,63,74,60,63,63,54,59,0,75],
[59,49,49,56,49,59,66,59,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,77,68,79,59,65,73,81,75],
[58,0,72,57,65,59,66,70,67,64],
[54,59,0,57,70,62,60,67,65,65],
[63,74,74,0,82,72,79,61,71,63],
[52,66,61,49,0,65,46,65,63,65],
[72,72,69,59,66,0,69,72,70,66],
[66,65,71,52,85,62,0,66,72,76],
[58,61,64,70,66,59,65,0,66,73],
[50,64,66,60,68,61,59,65,0,58],
[56,67,66,68,66,65,55,58,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,57,68,80,59,76,49,78,65],
[58,0,62,74,60,41,82,65,86,57],
[74,69,0,62,61,37,67,47,63,50],
[63,57,69,0,64,69,77,58,76,61],
[51,71,70,67,0,48,71,43,81,60],
[72,90,94,62,83,0,91,65,88,67],
[55,49,64,54,60,40,0,50,59,49],
[82,66,84,73,88,66,81,0,93,52],
[53,45,68,55,50,43,72,38,0,49],
[66,74,81,70,71,64,82,79,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,70,62,76,65,73,68,76,71],
[58,0,66,64,67,58,61,74,67,77],
[61,65,0,66,69,70,64,70,75,69],
[69,67,65,0,71,74,72,73,69,69],
[55,64,62,60,0,63,59,76,68,63],
[66,73,61,57,68,0,71,67,64,68],
[58,70,67,59,72,60,0,72,70,81],
[63,57,61,58,55,64,59,0,60,57],
[55,64,56,62,63,67,61,71,0,71],
[60,54,62,62,68,63,50,74,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,70,66,86,84,71,71,69,58],
[54,0,54,62,67,77,58,75,66,72],
[61,77,0,58,79,77,70,68,74,76],
[65,69,73,0,74,77,69,67,75,72],
[45,64,52,57,0,75,71,70,75,56],
[47,54,54,54,56,0,44,55,60,54],
[60,73,61,62,60,87,0,69,78,54],
[60,56,63,64,61,76,62,0,69,56],
[62,65,57,56,56,71,53,62,0,68],
[73,59,55,59,75,77,77,75,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,55,64,62,71,51,62,65,61],
[74,0,69,63,70,79,60,65,78,66],
[76,62,0,74,59,85,66,63,74,68],
[67,68,57,0,54,80,62,69,68,55],
[69,61,72,77,0,84,66,69,74,63],
[60,52,46,51,47,0,45,53,54,48],
[80,71,65,69,65,86,0,63,79,61],
[69,66,68,62,62,78,68,0,72,59],
[66,53,57,63,57,77,52,59,0,66],
[70,65,63,76,68,83,70,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,56,102,15,84,15,48,52,58],
[32,0,88,40,47,84,47,80,69,47],
[75,43,0,83,0,75,43,65,51,43],
[29,91,48,0,15,44,15,48,52,29],
[116,84,131,116,0,116,66,116,51,84],
[47,47,56,87,15,0,29,48,37,29],
[116,84,88,116,65,102,0,65,69,116],
[83,51,66,83,15,83,66,0,51,66],
[79,62,80,79,80,94,62,80,0,94],
[73,84,88,102,47,102,15,65,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,71,62,66,62,68,65,68,64],
[66,0,69,65,65,66,67,61,66,71],
[60,62,0,61,68,59,64,66,65,64],
[69,66,70,0,64,59,66,66,69,71],
[65,66,63,67,0,64,67,63,69,65],
[69,65,72,72,67,0,70,67,68,70],
[63,64,67,65,64,61,0,59,63,62],
[66,70,65,65,68,64,72,0,65,65],
[63,65,66,62,62,63,68,66,0,68],
[67,60,67,60,66,61,69,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,67,51,66,54,72,65,66,57],
[79,0,74,59,76,58,83,77,66,59],
[64,57,0,58,61,53,65,57,62,56],
[80,72,73,0,68,68,77,78,63,62],
[65,55,70,63,0,54,71,69,59,51],
[77,73,78,63,77,0,78,79,72,67],
[59,48,66,54,60,53,0,56,56,46],
[66,54,74,53,62,52,75,0,66,61],
[65,65,69,68,72,59,75,65,0,63],
[74,72,75,69,80,64,85,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,77,62,84,79,56,67,72,68],
[58,0,73,53,82,84,63,56,64,63],
[54,58,0,44,73,62,55,50,52,52],
[69,78,87,0,92,79,74,65,78,83],
[47,49,58,39,0,62,44,52,52,49],
[52,47,69,52,69,0,53,59,58,50],
[75,68,76,57,87,78,0,72,70,66],
[64,75,81,66,79,72,59,0,66,58],
[59,67,79,53,79,73,61,65,0,60],
[63,68,79,48,82,81,65,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,69,60,42,84,86,74,46,46],
[45,0,48,20,62,52,67,82,20,38],
[62,83,0,37,58,61,86,100,41,43],
[71,111,94,0,77,85,86,86,45,68],
[89,69,73,54,0,78,76,66,58,74],
[47,79,70,46,53,0,77,86,43,24],
[45,64,45,45,55,54,0,54,4,22],
[57,49,31,45,65,45,77,0,37,16],
[85,111,90,86,73,88,127,94,0,43],
[85,93,88,63,57,107,109,115,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,79,71,69,56,71,69,70],
[66,0,68,67,54,51,49,54,53,47],
[67,63,0,74,55,50,58,53,57,58],
[52,64,57,0,60,50,71,58,72,72],
[60,77,76,71,0,52,63,59,77,78],
[62,80,81,81,79,0,70,74,71,72],
[75,82,73,60,68,61,0,63,71,67],
[60,77,78,73,72,57,68,0,81,59],
[62,78,74,59,54,60,60,50,0,51],
[61,84,73,59,53,59,64,72,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,68,61,70,72,63,67,61],
[62,0,51,55,43,60,65,59,55,51],
[64,80,0,62,65,71,77,70,62,56],
[63,76,69,0,67,65,80,66,62,61],
[70,88,66,64,0,68,78,70,72,67],
[61,71,60,66,63,0,77,72,63,62],
[59,66,54,51,53,54,0,58,53,57],
[68,72,61,65,61,59,73,0,60,63],
[64,76,69,69,59,68,78,71,0,57],
[70,80,75,70,64,69,74,68,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,66,74,58,67,75,55,80,59],
[55,0,63,59,56,58,69,54,63,53],
[65,68,0,63,52,71,69,54,69,64],
[57,72,68,0,45,68,71,56,68,50],
[73,75,79,86,0,76,70,65,78,70],
[64,73,60,63,55,0,73,55,63,67],
[56,62,62,60,61,58,0,57,59,49],
[76,77,77,75,66,76,74,0,76,59],
[51,68,62,63,53,68,72,55,0,56],
[72,78,67,81,61,64,82,72,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,68,73,75,96,67,58,83],
[72,0,70,65,70,72,77,63,69,67],
[64,61,0,54,69,57,86,64,67,75],
[63,66,77,0,65,68,98,62,69,70],
[58,61,62,66,0,57,77,55,65,54],
[56,59,74,63,74,0,70,61,61,71],
[35,54,45,33,54,61,0,45,62,58],
[64,68,67,69,76,70,86,0,69,67],
[73,62,64,62,66,70,69,62,0,67],
[48,64,56,61,77,60,73,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,73,58,68,68,58,75,57,46],
[37,0,67,48,49,66,48,64,56,45],
[58,64,0,74,69,70,52,69,65,39],
[73,83,57,0,75,89,71,61,76,56],
[63,82,62,56,0,65,64,67,79,66],
[63,65,61,42,66,0,58,67,42,44],
[73,83,79,60,67,73,0,73,53,61],
[56,67,62,70,64,64,58,0,75,61],
[74,75,66,55,52,89,78,56,0,68],
[85,86,92,75,65,87,70,70,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,64,33,63,65,73,66,75],
[59,0,49,64,58,35,61,60,35,54],
[59,82,0,67,52,58,68,71,49,76],
[67,67,64,0,25,42,55,69,35,66],
[98,73,79,106,0,56,85,78,45,87],
[68,96,73,89,75,0,76,92,54,87],
[66,70,63,76,46,55,0,77,45,53],
[58,71,60,62,53,39,54,0,55,68],
[65,96,82,96,86,77,86,76,0,70],
[56,77,55,65,44,44,78,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,87,68,79,62,69,74,83,64],
[53,0,71,71,70,60,66,72,86,64],
[44,60,0,54,62,53,48,61,57,47],
[63,60,77,0,71,73,73,80,85,63],
[52,61,69,60,0,61,69,58,78,61],
[69,71,78,58,70,0,69,67,67,80],
[62,65,83,58,62,62,0,57,77,50],
[57,59,70,51,73,64,74,0,71,55],
[48,45,74,46,53,64,54,60,0,44],
[67,67,84,68,70,51,81,76,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,51,56,54,58,65,54,51,47],
[79,0,64,71,74,64,71,73,73,66],
[80,67,0,80,71,72,73,59,67,61],
[75,60,51,0,69,66,66,55,73,61],
[77,57,60,62,0,60,72,63,59,57],
[73,67,59,65,71,0,62,67,71,53],
[66,60,58,65,59,69,0,65,57,59],
[77,58,72,76,68,64,66,0,70,59],
[80,58,64,58,72,60,74,61,0,53],
[84,65,70,70,74,78,72,72,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,85,65,60,72,67,83,71,74],
[60,0,84,69,72,66,72,71,75,70],
[46,47,0,45,58,62,68,62,59,60],
[66,62,86,0,71,70,73,81,70,68],
[71,59,73,60,0,68,62,69,65,69],
[59,65,69,61,63,0,65,82,69,67],
[64,59,63,58,69,66,0,68,66,56],
[48,60,69,50,62,49,63,0,58,56],
[60,56,72,61,66,62,65,73,0,67],
[57,61,71,63,62,64,75,75,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,52,50,58,60,54,52,48,47],
[73,0,70,69,84,66,74,62,64,75],
[79,61,0,75,73,67,71,73,68,76],
[81,62,56,0,64,69,72,73,59,69],
[73,47,58,67,0,62,69,70,59,66],
[71,65,64,62,69,0,68,69,64,70],
[77,57,60,59,62,63,0,71,58,71],
[79,69,58,58,61,62,60,0,66,70],
[83,67,63,72,72,67,73,65,0,66],
[84,56,55,62,65,61,60,61,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,66,59,56,63,71,75,58,56],
[71,0,67,60,69,65,79,68,59,56],
[65,64,0,51,57,57,66,73,62,61],
[72,71,80,0,77,70,84,80,69,65],
[75,62,74,54,0,64,75,77,71,72],
[68,66,74,61,67,0,87,75,61,66],
[60,52,65,47,56,44,0,68,57,56],
[56,63,58,51,54,56,63,0,60,52],
[73,72,69,62,60,70,74,71,0,68],
[75,75,70,66,59,65,75,79,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,60,62,71,69,62,64,62],
[68,0,70,72,72,74,71,64,68,68],
[69,61,0,68,72,74,70,65,64,63],
[71,59,63,0,65,73,65,58,63,64],
[69,59,59,66,0,65,62,67,65,66],
[60,57,57,58,66,0,66,60,59,54],
[62,60,61,66,69,65,0,63,58,57],
[69,67,66,73,64,71,68,0,66,62],
[67,63,67,68,66,72,73,65,0,69],
[69,63,68,67,65,77,74,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,80,81,73,79,81,76,63],
[61,0,63,67,65,73,72,70,68,59],
[66,68,0,81,67,81,74,85,63,60],
[51,64,50,0,58,73,65,59,53,55],
[50,66,64,73,0,67,63,67,60,78],
[58,58,50,58,64,0,66,70,62,62],
[52,59,57,66,68,65,0,67,54,64],
[50,61,46,72,64,61,64,0,45,49],
[55,63,68,78,71,69,77,86,0,74],
[68,72,71,76,53,69,67,82,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,49,59,61,60,55,57,67,53],
[59,0,53,56,67,58,59,55,66,57],
[82,78,0,74,68,76,62,62,77,66],
[72,75,57,0,55,58,65,56,69,59],
[70,64,63,76,0,69,78,73,73,79],
[71,73,55,73,62,0,68,58,72,61],
[76,72,69,66,53,63,0,64,59,60],
[74,76,69,75,58,73,67,0,75,59],
[64,65,54,62,58,59,72,56,0,60],
[78,74,65,72,52,70,71,72,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,68,76,71,61,72,73,64,63],
[59,0,58,72,68,59,69,64,56,61],
[63,73,0,78,75,64,74,72,70,68],
[55,59,53,0,60,54,65,61,54,57],
[60,63,56,71,0,54,59,58,56,55],
[70,72,67,77,77,0,72,69,62,73],
[59,62,57,66,72,59,0,64,60,62],
[58,67,59,70,73,62,67,0,68,63],
[67,75,61,77,75,69,71,63,0,79],
[68,70,63,74,76,58,69,68,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,53,62,69,76,69,64,66],
[64,0,58,64,66,63,76,56,62,77],
[67,73,0,54,69,65,66,58,65,70],
[78,67,77,0,69,67,70,69,72,61],
[69,65,62,62,0,59,77,63,62,68],
[62,68,66,64,72,0,71,61,58,66],
[55,55,65,61,54,60,0,51,60,63],
[62,75,73,62,68,70,80,0,71,69],
[67,69,66,59,69,73,71,60,0,67],
[65,54,61,70,63,65,68,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,54,63,72,68,71,63,68,68],
[64,0,58,59,67,63,66,63,60,63],
[77,73,0,64,70,72,70,74,71,75],
[68,72,67,0,75,60,67,65,69,66],
[59,64,61,56,0,61,60,64,65,69],
[63,68,59,71,70,0,59,67,66,69],
[60,65,61,64,71,72,0,68,66,68],
[68,68,57,66,67,64,63,0,66,69],
[63,71,60,62,66,65,65,65,0,67],
[63,68,56,65,62,62,63,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,99,68,98,70,90,64,66,77],
[50,0,64,48,71,63,82,61,66,56],
[32,67,0,43,62,40,54,53,52,72],
[63,83,88,0,79,72,90,66,61,69],
[33,60,69,52,0,45,63,40,39,55],
[61,68,91,59,86,0,70,64,46,55],
[41,49,77,41,68,61,0,53,71,53],
[67,70,78,65,91,67,78,0,67,87],
[65,65,79,70,92,85,60,64,0,53],
[54,75,59,62,76,76,78,44,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,54,61,66,59,69,79,80,69],
[56,0,53,53,65,53,64,69,74,58],
[77,78,0,64,82,68,79,82,85,72],
[70,78,67,0,75,73,80,82,84,65],
[65,66,49,56,0,60,70,68,71,60],
[72,78,63,58,71,0,78,79,80,71],
[62,67,52,51,61,53,0,72,75,46],
[52,62,49,49,63,52,59,0,69,51],
[51,57,46,47,60,51,56,62,0,55],
[62,73,59,66,71,60,85,80,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,69,65,64,74,71,76,68,65],
[68,0,60,70,68,68,77,75,69,62],
[62,71,0,70,73,76,82,80,71,68],
[66,61,61,0,71,67,74,67,69,61],
[67,63,58,60,0,62,64,67,68,51],
[57,63,55,64,69,0,81,72,69,56],
[60,54,49,57,67,50,0,64,62,57],
[55,56,51,64,64,59,67,0,62,51],
[63,62,60,62,63,62,69,69,0,60],
[66,69,63,70,80,75,74,80,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,65,71,66,76,69,78,65,64],
[57,0,55,60,61,56,49,58,59,56],
[66,76,0,80,63,60,58,70,61,57],
[60,71,51,0,60,61,65,69,62,60],
[65,70,68,71,0,59,68,74,64,58],
[55,75,71,70,72,0,53,80,54,61],
[62,82,73,66,63,78,0,83,74,69],
[53,73,61,62,57,51,48,0,55,42],
[66,72,70,69,67,77,57,76,0,55],
[67,75,74,71,73,70,62,89,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,67,72,56,78,55,65,56,59],
[74,0,52,75,56,61,48,60,60,70],
[64,79,0,63,67,64,73,74,68,55],
[59,56,68,0,77,66,46,67,69,57],
[75,75,64,54,0,83,49,59,70,56],
[53,70,67,65,48,0,56,55,63,59],
[76,83,58,85,82,75,0,68,70,77],
[66,71,57,64,72,76,63,0,71,83],
[75,71,63,62,61,68,61,60,0,57],
[72,61,76,74,75,72,54,48,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,65,70,68,69,66,72,61],
[69,0,69,67,68,69,68,68,67,59],
[68,62,0,65,69,71,70,70,69,65],
[66,64,66,0,65,70,66,65,62,58],
[61,63,62,66,0,71,67,70,68,60],
[63,62,60,61,60,0,54,65,69,62],
[62,63,61,65,64,77,0,57,68,64],
[65,63,61,66,61,66,74,0,61,57],
[59,64,62,69,63,62,63,70,0,66],
[70,72,66,73,71,69,67,74,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,84,82,62,67,76,70,79,85],
[55,0,80,84,67,67,75,73,78,74],
[47,51,0,63,53,54,65,56,67,70],
[49,47,68,0,65,63,55,67,66,57],
[69,64,78,66,0,72,60,64,76,58],
[64,64,77,68,59,0,63,56,66,64],
[55,56,66,76,71,68,0,67,81,62],
[61,58,75,64,67,75,64,0,89,66],
[52,53,64,65,55,65,50,42,0,65],
[46,57,61,74,73,67,69,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,70,77,66,62,69,62,68],
[66,0,66,66,74,67,66,72,53,64],
[68,65,0,62,67,67,64,73,57,67],
[61,65,69,0,70,71,67,68,52,64],
[54,57,64,61,0,59,59,62,50,63],
[65,64,64,60,72,0,60,72,56,52],
[69,65,67,64,72,71,0,67,59,61],
[62,59,58,63,69,59,64,0,46,60],
[69,78,74,79,81,75,72,85,0,63],
[63,67,64,67,68,79,70,71,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,69,67,53,45,52,70,52,69],
[69,0,67,68,62,59,45,63,54,69],
[62,64,0,82,78,85,78,73,64,59],
[64,63,49,0,56,50,37,65,60,82],
[78,69,53,75,0,65,52,81,64,67],
[86,72,46,81,66,0,48,78,55,68],
[79,86,53,94,79,83,0,80,75,75],
[61,68,58,66,50,53,51,0,54,75],
[79,77,67,71,67,76,56,77,0,78],
[62,62,72,49,64,63,56,56,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,80,76,73,70,65,80,66,69],
[57,0,70,65,55,63,72,79,71,78],
[51,61,0,57,54,51,53,76,55,73],
[55,66,74,0,64,68,67,68,64,68],
[58,76,77,67,0,84,65,79,68,83],
[61,68,80,63,47,0,58,75,62,75],
[66,59,78,64,66,73,0,79,57,77],
[51,52,55,63,52,56,52,0,52,57],
[65,60,76,67,63,69,74,79,0,72],
[62,53,58,63,48,56,54,74,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,66,40,70,50,79,65,55,27],
[105,0,91,59,70,43,72,56,71,52],
[65,40,0,29,57,30,59,81,42,49],
[91,72,102,0,82,79,87,91,88,60],
[61,61,74,49,0,24,35,115,61,49],
[81,88,101,52,107,0,104,109,90,65],
[52,59,72,44,96,27,0,106,74,59],
[66,75,50,40,16,22,25,0,77,65],
[76,60,89,43,70,41,57,54,0,73],
[104,79,82,71,82,66,72,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,69,66,68,77,69,79,64,75],
[69,0,66,74,57,75,63,68,70,62],
[62,65,0,71,57,63,67,68,67,53],
[65,57,60,0,61,69,67,69,71,63],
[63,74,74,70,0,77,85,74,74,76],
[54,56,68,62,54,0,63,66,70,65],
[62,68,64,64,46,68,0,66,76,70],
[52,63,63,62,57,65,65,0,60,60],
[67,61,64,60,57,61,55,71,0,60],
[56,69,78,68,55,66,61,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,76,70,75,58,63,68,70,71],
[67,0,68,86,80,69,71,73,71,60],
[55,63,0,76,76,69,73,75,73,67],
[61,45,55,0,65,58,55,52,58,55],
[56,51,55,66,0,65,66,56,49,44],
[73,62,62,73,66,0,69,75,71,72],
[68,60,58,76,65,62,0,70,72,62],
[63,58,56,79,75,56,61,0,75,57],
[61,60,58,73,82,60,59,56,0,66],
[60,71,64,76,87,59,69,74,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,57,63,66,60,70,63,61,63],
[84,0,66,69,62,63,72,70,73,63],
[74,65,0,67,70,65,75,78,58,65],
[68,62,64,0,78,58,75,70,64,62],
[65,69,61,53,0,56,76,72,61,66],
[71,68,66,73,75,0,71,76,62,67],
[61,59,56,56,55,60,0,61,54,51],
[68,61,53,61,59,55,70,0,51,60],
[70,58,73,67,70,69,77,80,0,69],
[68,68,66,69,65,64,80,71,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,81,49,87,80,54,80,57,77],
[61,0,52,44,74,68,47,73,47,70],
[50,79,0,59,94,70,74,80,59,83],
[82,87,72,0,84,83,84,107,61,65],
[44,57,37,47,0,79,54,68,43,70],
[51,63,61,48,52,0,60,76,30,54],
[77,84,57,47,77,71,0,72,70,61],
[51,58,51,24,63,55,59,0,29,67],
[74,84,72,70,88,101,61,102,0,67],
[54,61,48,66,61,77,70,64,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,76,63,70,64,67,64,50,84],
[60,0,69,68,75,58,70,69,55,82],
[55,62,0,51,63,65,59,61,68,76],
[68,63,80,0,73,63,80,74,66,83],
[61,56,68,58,0,59,64,64,59,77],
[67,73,66,68,72,0,68,70,62,74],
[64,61,72,51,67,63,0,66,58,79],
[67,62,70,57,67,61,65,0,65,79],
[81,76,63,65,72,69,73,66,0,69],
[47,49,55,48,54,57,52,52,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,66,83,78,57,82,82,85,58],
[55,0,68,76,62,68,70,81,75,52],
[65,63,0,65,59,74,78,74,62,49],
[48,55,66,0,62,57,64,81,64,66],
[53,69,72,69,0,71,75,75,70,69],
[74,63,57,74,60,0,67,77,55,61],
[49,61,53,67,56,64,0,56,58,49],
[49,50,57,50,56,54,75,0,63,54],
[46,56,69,67,61,76,73,68,0,57],
[73,79,82,65,62,70,82,77,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,42,91,86,96,91,89,110,70],
[40,0,21,78,90,78,79,78,77,79],
[89,110,0,110,110,107,121,62,99,73],
[40,53,21,0,56,58,67,39,71,31],
[45,41,21,75,0,89,57,40,57,35],
[35,53,24,73,42,0,53,42,29,27],
[40,52,10,64,74,78,0,67,71,64],
[42,53,69,92,91,89,64,0,98,36],
[21,54,32,60,74,102,60,33,0,43],
[61,52,58,100,96,104,67,95,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,52,68,65,64,64,62,75,74],
[70,0,67,63,68,74,67,65,68,68],
[79,64,0,71,74,74,70,71,70,68],
[63,68,60,0,72,71,69,63,69,78],
[66,63,57,59,0,70,67,66,71,66],
[67,57,57,60,61,0,56,63,62,66],
[67,64,61,62,64,75,0,70,67,74],
[69,66,60,68,65,68,61,0,65,77],
[56,63,61,62,60,69,64,66,0,59],
[57,63,63,53,65,65,57,54,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,68,67,84,67,63,54,68,64],
[72,0,61,64,70,69,67,63,68,59],
[63,70,0,72,78,71,62,69,72,67],
[64,67,59,0,70,78,62,57,69,64],
[47,61,53,61,0,62,57,46,66,44],
[64,62,60,53,69,0,52,45,71,60],
[68,64,69,69,74,79,0,58,70,62],
[77,68,62,74,85,86,73,0,73,62],
[63,63,59,62,65,60,61,58,0,75],
[67,72,64,67,87,71,69,69,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,63,65,75,72,76,74,63,64],
[60,0,57,66,72,70,72,65,63,64],
[68,74,0,72,75,79,75,76,63,65],
[66,65,59,0,71,73,75,72,68,68],
[56,59,56,60,0,70,72,63,65,63],
[59,61,52,58,61,0,69,67,57,62],
[55,59,56,56,59,62,0,62,64,59],
[57,66,55,59,68,64,69,0,64,61],
[68,68,68,63,66,74,67,67,0,60],
[67,67,66,63,68,69,72,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,81,70,68,66,73,68,63,72],
[60,0,55,63,63,43,47,71,61,68],
[50,76,0,75,62,60,64,61,63,65],
[61,68,56,0,63,53,59,64,58,72],
[63,68,69,68,0,56,54,61,72,67],
[65,88,71,78,75,0,61,63,72,78],
[58,84,67,72,77,70,0,67,68,78],
[63,60,70,67,70,68,64,0,63,70],
[68,70,68,73,59,59,63,68,0,70],
[59,63,66,59,64,53,53,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,128,86,44,86,44,86,44,128],
[45,0,87,3,42,84,47,42,86,131],
[3,44,0,47,44,42,44,42,44,131],
[45,128,84,0,86,84,86,42,86,131],
[87,89,87,45,0,45,47,87,47,131],
[45,47,89,47,86,0,47,86,86,89],
[87,84,87,45,84,84,0,84,84,87],
[45,89,89,89,44,45,47,0,47,131],
[87,45,87,45,84,45,47,84,0,87],
[3,0,0,0,0,42,44,0,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,71,69,64,70,65,74,69,73],
[61,0,59,72,63,56,54,64,67,69],
[60,72,0,73,56,67,68,71,63,63],
[62,59,58,0,57,59,58,60,68,70],
[67,68,75,74,0,66,65,69,67,74],
[61,75,64,72,65,0,65,75,62,69],
[66,77,63,73,66,66,0,74,68,75],
[57,67,60,71,62,56,57,0,63,70],
[62,64,68,63,64,69,63,68,0,72],
[58,62,68,61,57,62,56,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,72,71,68,69,69,75,68,78],
[68,0,69,62,63,68,65,72,62,72],
[59,62,0,62,65,66,65,67,75,70],
[60,69,69,0,71,72,70,74,73,80],
[63,68,66,60,0,64,67,67,70,67],
[62,63,65,59,67,0,72,71,72,75],
[62,66,66,61,64,59,0,63,67,70],
[56,59,64,57,64,60,68,0,63,63],
[63,69,56,58,61,59,64,68,0,66],
[53,59,61,51,64,56,61,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,58,71,68,72,69,71,63,69],
[58,0,67,67,67,66,69,56,60,62],
[73,64,0,67,64,67,72,57,61,64],
[60,64,64,0,63,71,58,55,60,62],
[63,64,67,68,0,73,66,60,65,63],
[59,65,64,60,58,0,60,55,61,62],
[62,62,59,73,65,71,0,62,65,65],
[60,75,74,76,71,76,69,0,68,65],
[68,71,70,71,66,70,66,63,0,70],
[62,69,67,69,68,69,66,66,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,34,69,19,46,28,41,48,48,53],
[97,0,94,58,69,52,83,64,68,73],
[62,37,0,23,39,37,39,55,58,56],
[112,73,108,0,70,62,84,64,89,98],
[85,62,92,61,0,56,58,79,77,78],
[103,79,94,69,75,0,90,54,68,84],
[90,48,92,47,73,41,0,67,68,74],
[83,67,76,67,52,77,64,0,76,55],
[83,63,73,42,54,63,63,55,0,76],
[78,58,75,33,53,47,57,76,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,59,83,74,57,58,64,77,69],
[52,0,47,61,69,46,59,65,55,60],
[72,84,0,74,81,57,74,77,73,77],
[48,70,57,0,66,50,58,68,65,73],
[57,62,50,65,0,59,63,61,71,71],
[74,85,74,81,72,0,64,83,82,91],
[73,72,57,73,68,67,0,59,74,76],
[67,66,54,63,70,48,72,0,70,70],
[54,76,58,66,60,49,57,61,0,64],
[62,71,54,58,60,40,55,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,43,60,57,53,59,61,45,66],
[72,0,39,59,70,70,68,64,54,79],
[88,92,0,64,71,75,87,81,71,86],
[71,72,67,0,65,63,82,79,68,82],
[74,61,60,66,0,57,56,68,58,84],
[78,61,56,68,74,0,74,80,62,82],
[72,63,44,49,75,57,0,62,48,66],
[70,67,50,52,63,51,69,0,71,80],
[86,77,60,63,73,69,83,60,0,72],
[65,52,45,49,47,49,65,51,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,66,71,58,70,59,62,70,59],
[74,0,67,58,55,74,70,64,69,55],
[65,64,0,67,60,70,64,62,71,60],
[60,73,64,0,68,77,63,63,65,51],
[73,76,71,63,0,72,69,69,73,66],
[61,57,61,54,59,0,52,53,61,47],
[72,61,67,68,62,79,0,64,69,58],
[69,67,69,68,62,78,67,0,70,61],
[61,62,60,66,58,70,62,61,0,55],
[72,76,71,80,65,84,73,70,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,60,69,85,73,71,80,67,82],
[58,0,53,53,74,63,55,75,56,62],
[71,78,0,60,91,80,69,78,57,64],
[62,78,71,0,82,70,68,73,70,76],
[46,57,40,49,0,61,47,62,53,61],
[58,68,51,61,70,0,61,74,58,66],
[60,76,62,63,84,70,0,76,58,68],
[51,56,53,58,69,57,55,0,53,58],
[64,75,74,61,78,73,73,78,0,64],
[49,69,67,55,70,65,63,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,68,70,62,64,65,67,70],
[67,0,71,68,65,67,71,67,76,73],
[67,60,0,67,68,59,69,68,65,70],
[63,63,64,0,65,60,66,68,70,74],
[61,66,63,66,0,64,65,65,68,64],
[69,64,72,71,67,0,63,66,70,72],
[67,60,62,65,66,68,0,70,71,71],
[66,64,63,63,66,65,61,0,68,69],
[64,55,66,61,63,61,60,63,0,66],
[61,58,61,57,67,59,60,62,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,63,54,66,60,65,64,77,67],
[67,0,64,54,69,57,73,73,76,66],
[68,67,0,53,59,65,68,70,75,60],
[77,77,78,0,68,65,83,75,97,74],
[65,62,72,63,0,61,72,69,74,62],
[71,74,66,66,70,0,67,65,78,65],
[66,58,63,48,59,64,0,57,65,55],
[67,58,61,56,62,66,74,0,78,68],
[54,55,56,34,57,53,66,53,0,56],
[64,65,71,57,69,66,76,63,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,59,52,73,71,72,63,66,58],
[66,0,49,61,57,57,76,61,41,50],
[72,82,0,61,90,71,77,76,70,73],
[79,70,70,0,87,62,80,65,73,72],
[58,74,41,44,0,52,65,52,53,46],
[60,74,60,69,79,0,86,66,61,74],
[59,55,54,51,66,45,0,51,42,59],
[68,70,55,66,79,65,80,0,60,60],
[65,90,61,58,78,70,89,71,0,79],
[73,81,58,59,85,57,72,71,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,68,68,61,78,69,71,74,71],
[68,0,74,72,69,73,63,71,70,72],
[63,57,0,63,52,74,65,61,74,70],
[63,59,68,0,65,75,75,67,67,73],
[70,62,79,66,0,80,64,75,70,76],
[53,58,57,56,51,0,55,70,65,67],
[62,68,66,56,67,76,0,71,65,75],
[60,60,70,64,56,61,60,0,62,68],
[57,61,57,64,61,66,66,69,0,61],
[60,59,61,58,55,64,56,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,109,62,69,14,95,68,0,49],
[69,0,82,61,21,61,48,68,47,48],
[22,49,0,15,69,14,1,69,0,49],
[69,70,116,0,69,61,117,68,21,70],
[62,110,62,62,0,61,48,48,47,48],
[117,70,117,70,70,0,117,69,22,70],
[36,83,130,14,83,14,0,82,0,49],
[63,63,62,63,83,62,49,0,48,49],
[131,84,131,110,84,109,131,83,0,49],
[82,83,82,61,83,61,82,82,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,69,63,65,64,69,65,66,72],
[70,0,60,64,72,60,69,63,64,69],
[62,71,0,63,66,66,65,63,66,66],
[68,67,68,0,72,63,65,68,69,77],
[66,59,65,59,0,58,59,56,64,62],
[67,71,65,68,73,0,75,66,80,68],
[62,62,66,66,72,56,0,61,68,65],
[66,68,68,63,75,65,70,0,72,70],
[65,67,65,62,67,51,63,59,0,66],
[59,62,65,54,69,63,66,61,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,59,69,71,69,62,66,59,62],
[68,0,74,68,71,71,67,69,64,71],
[72,57,0,71,70,64,65,69,61,66],
[62,63,60,0,63,64,50,64,52,62],
[60,60,61,68,0,61,60,71,56,58],
[62,60,67,67,70,0,59,64,59,73],
[69,64,66,81,71,72,0,75,69,73],
[65,62,62,67,60,67,56,0,57,59],
[72,67,70,79,75,72,62,74,0,71],
[69,60,65,69,73,58,58,72,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,62,72,62,55,69,54,69,75],
[60,0,61,58,54,56,69,56,59,67],
[69,70,0,68,62,61,70,67,77,83],
[59,73,63,0,60,63,60,67,75,75],
[69,77,69,71,0,62,69,63,69,74],
[76,75,70,68,69,0,74,63,71,83],
[62,62,61,71,62,57,0,69,63,69],
[77,75,64,64,68,68,62,0,74,69],
[62,72,54,56,62,60,68,57,0,71],
[56,64,48,56,57,48,62,62,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,71,73,69,59,70,70,61],
[58,0,66,67,63,61,63,67,64,61],
[58,65,0,58,60,60,57,55,57,50],
[60,64,73,0,66,68,63,57,65,70],
[58,68,71,65,0,72,71,59,74,59],
[62,70,71,63,59,0,58,63,58,49],
[72,68,74,68,60,73,0,57,60,61],
[61,64,76,74,72,68,74,0,77,70],
[61,67,74,66,57,73,71,54,0,68],
[70,70,81,61,72,82,70,61,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,79,64,76,73,55,58,79,65],
[65,0,68,54,87,50,63,63,71,64],
[52,63,0,50,45,49,58,62,85,68],
[67,77,81,0,71,57,54,52,66,66],
[55,44,86,60,0,55,70,56,76,53],
[58,81,82,74,76,0,63,68,76,67],
[76,68,73,77,61,68,0,67,76,73],
[73,68,69,79,75,63,64,0,91,70],
[52,60,46,65,55,55,55,40,0,36],
[66,67,63,65,78,64,58,61,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,95,72,59,50,65,81,66,51],
[71,0,79,82,70,67,63,101,80,71],
[36,52,0,42,33,27,41,73,52,32],
[59,49,89,0,54,38,61,97,61,42],
[72,61,98,77,0,55,50,95,57,52],
[81,64,104,93,76,0,77,112,81,78],
[66,68,90,70,81,54,0,98,57,59],
[50,30,58,34,36,19,33,0,53,38],
[65,51,79,70,74,50,74,78,0,67],
[80,60,99,89,79,53,72,93,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,81,69,71,60,67,78,58,73],
[60,0,58,55,63,64,57,50,33,54],
[50,73,0,67,71,62,57,71,52,57],
[62,76,64,0,54,52,66,68,43,63],
[60,68,60,77,0,64,54,62,43,73],
[71,67,69,79,67,0,57,60,68,72],
[64,74,74,65,77,74,0,87,48,76],
[53,81,60,63,69,71,44,0,52,61],
[73,98,79,88,88,63,83,79,0,79],
[58,77,74,68,58,59,55,70,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,61,44,52,71,63,47,33,56],
[87,0,82,71,65,83,87,78,74,81],
[70,49,0,68,75,65,73,66,62,72],
[87,60,63,0,77,64,66,70,48,63],
[79,66,56,54,0,74,88,67,57,77],
[60,48,66,67,57,0,64,61,59,70],
[68,44,58,65,43,67,0,57,46,61],
[84,53,65,61,64,70,74,0,50,83],
[98,57,69,83,74,72,85,81,0,74],
[75,50,59,68,54,61,70,48,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,31,51,69,111,58,69,111,31],
[20,0,20,51,31,42,58,31,93,51],
[100,111,0,93,69,80,58,69,111,31],
[80,80,38,0,38,80,38,38,80,69],
[62,100,62,93,0,42,58,31,131,51],
[20,89,51,51,89,0,58,51,89,51],
[73,73,73,93,73,73,0,73,73,31],
[62,100,62,93,100,80,58,0,100,51],
[20,38,20,51,0,42,58,31,0,51],
[100,80,100,62,80,80,100,80,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,66,65,67,77,79,66,76],
[63,0,47,52,56,65,64,71,66,65],
[67,84,0,56,70,76,72,72,73,81],
[65,79,75,0,61,79,73,80,74,79],
[66,75,61,70,0,71,79,80,71,78],
[64,66,55,52,60,0,71,66,64,68],
[54,67,59,58,52,60,0,63,66,53],
[52,60,59,51,51,65,68,0,61,64],
[65,65,58,57,60,67,65,70,0,69],
[55,66,50,52,53,63,78,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,62,76,71,59,65,57,69,61],
[61,0,62,61,69,55,55,47,55,55],
[69,69,0,64,70,62,65,59,70,64],
[55,70,67,0,66,61,63,54,60,62],
[60,62,61,65,0,56,59,59,60,53],
[72,76,69,70,75,0,72,64,70,75],
[66,76,66,68,72,59,0,59,65,64],
[74,84,72,77,72,67,72,0,77,61],
[62,76,61,71,71,61,66,54,0,62],
[70,76,67,69,78,56,67,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,64,63,62,66,75,59,68,65],
[76,0,76,64,70,60,64,67,75,69],
[67,55,0,51,60,59,63,59,66,56],
[68,67,80,0,62,68,68,78,80,76],
[69,61,71,69,0,65,66,62,77,65],
[65,71,72,63,66,0,85,69,70,76],
[56,67,68,63,65,46,0,70,72,60],
[72,64,72,53,69,62,61,0,71,60],
[63,56,65,51,54,61,59,60,0,65],
[66,62,75,55,66,55,71,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,49,80,54,44,60,64,50,66],
[81,0,85,75,53,61,57,75,45,54],
[82,46,0,67,53,53,48,67,55,53],
[51,56,64,0,59,44,53,57,54,48],
[77,78,78,72,0,66,58,73,78,52],
[87,70,78,87,65,0,64,74,48,68],
[71,74,83,78,73,67,0,70,59,58],
[67,56,64,74,58,57,61,0,44,55],
[81,86,76,77,53,83,72,87,0,64],
[65,77,78,83,79,63,73,76,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,70,70,82,65,82,72,72,72],
[50,0,68,69,64,67,69,61,71,54],
[61,63,0,65,67,62,81,67,62,72],
[61,62,66,0,74,58,75,67,67,67],
[49,67,64,57,0,56,62,61,65,55],
[66,64,69,73,75,0,77,68,68,67],
[49,62,50,56,69,54,0,62,53,57],
[59,70,64,64,70,63,69,0,62,67],
[59,60,69,64,66,63,78,69,0,60],
[59,77,59,64,76,64,74,64,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,64,66,74,69,64,74,65],
[67,0,60,68,65,67,65,64,74,62],
[64,71,0,74,73,66,79,73,75,61],
[67,63,57,0,64,62,65,63,77,61],
[65,66,58,67,0,61,66,74,71,59],
[57,64,65,69,70,0,72,56,71,68],
[62,66,52,66,65,59,0,57,66,61],
[67,67,58,68,57,75,74,0,73,61],
[57,57,56,54,60,60,65,58,0,58],
[66,69,70,70,72,63,70,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,53,72,49,57,61,57,66,53],
[65,0,55,56,52,61,61,48,80,60],
[78,76,0,71,68,80,83,64,101,76],
[59,75,60,0,56,57,75,58,70,57],
[82,79,63,75,0,75,79,75,92,65],
[74,70,51,74,56,0,70,63,82,55],
[70,70,48,56,52,61,0,63,81,56],
[74,83,67,73,56,68,68,0,82,60],
[65,51,30,61,39,49,50,49,0,42],
[78,71,55,74,66,76,75,71,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,59,75,98,66,68,72,86,67],
[60,0,75,55,84,74,75,67,78,76],
[72,56,0,75,85,79,76,85,69,70],
[56,76,56,0,60,71,62,80,73,67],
[33,47,46,71,0,88,61,62,74,54],
[65,57,52,60,43,0,44,73,58,63],
[63,56,55,69,70,87,0,64,76,63],
[59,64,46,51,69,58,67,0,57,79],
[45,53,62,58,57,73,55,74,0,78],
[64,55,61,64,77,68,68,52,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,63,65,67,68,61,53,66,61],
[59,0,68,76,78,69,65,63,64,66],
[68,63,0,65,70,75,63,64,66,65],
[66,55,66,0,69,65,52,60,70,57],
[64,53,61,62,0,59,60,53,63,53],
[63,62,56,66,72,0,53,65,61,63],
[70,66,68,79,71,78,0,64,70,71],
[78,68,67,71,78,66,67,0,72,63],
[65,67,65,61,68,70,61,59,0,59],
[70,65,66,74,78,68,60,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,89,65,65,58,124,42,72,35],
[66,0,59,34,42,65,93,24,42,42],
[42,72,0,65,72,76,124,66,49,53],
[66,97,66,0,66,89,77,31,42,66],
[66,89,59,65,0,89,124,35,53,59],
[73,66,55,42,42,0,66,66,49,35],
[7,38,7,54,7,65,0,7,7,7],
[89,107,65,100,96,65,124,0,65,42],
[59,89,82,89,78,82,124,66,0,59],
[96,89,78,65,72,96,124,89,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,46,64,64,57,65,64,57,76],
[58,0,45,58,64,51,51,40,47,67],
[85,86,0,80,61,91,84,77,73,87],
[67,73,51,0,53,75,69,69,58,74],
[67,67,70,78,0,71,75,70,61,74],
[74,80,40,56,60,0,77,58,62,63],
[66,80,47,62,56,54,0,59,62,71],
[67,91,54,62,61,73,72,0,69,86],
[74,84,58,73,70,69,69,62,0,80],
[55,64,44,57,57,68,60,45,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,46,38,60,60,58,51,33,65],
[82,0,65,63,77,64,76,73,67,74],
[85,66,0,70,68,72,73,73,62,75],
[93,68,61,0,78,76,75,78,48,62],
[71,54,63,53,0,50,61,50,45,54],
[71,67,59,55,81,0,80,55,65,72],
[73,55,58,56,70,51,0,54,51,72],
[80,58,58,53,81,76,77,0,68,60],
[98,64,69,83,86,66,80,63,0,72],
[66,57,56,69,77,59,59,71,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,55,68,64,73,45,54,58,53],
[66,0,54,66,64,60,62,55,61,56],
[76,77,0,75,73,81,60,68,61,70],
[63,65,56,0,72,69,61,60,70,64],
[67,67,58,59,0,69,55,66,58,57],
[58,71,50,62,62,0,57,59,67,54],
[86,69,71,70,76,74,0,64,70,65],
[77,76,63,71,65,72,67,0,73,73],
[73,70,70,61,73,64,61,58,0,67],
[78,75,61,67,74,77,66,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,73,65,59,70,83,67,67,75],
[51,0,60,60,53,49,57,55,52,64],
[58,71,0,50,54,64,69,77,46,61],
[66,71,81,0,62,82,80,80,59,72],
[72,78,77,69,0,71,89,77,61,80],
[61,82,67,49,60,0,60,72,74,76],
[48,74,62,51,42,71,0,61,54,63],
[64,76,54,51,54,59,70,0,60,73],
[64,79,85,72,70,57,77,71,0,71],
[56,67,70,59,51,55,68,58,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,64,67,74,75,64,68,71],
[66,0,57,69,71,79,72,62,70,74],
[70,74,0,63,82,71,72,67,67,72],
[67,62,68,0,70,72,66,61,75,64],
[64,60,49,61,0,67,65,62,65,73],
[57,52,60,59,64,0,64,52,65,60],
[56,59,59,65,66,67,0,57,73,57],
[67,69,64,70,69,79,74,0,71,73],
[63,61,64,56,66,66,58,60,0,65],
[60,57,59,67,58,71,74,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,44,76,62,62,57,66,57,64],
[65,0,50,71,70,75,68,58,66,49],
[87,81,0,62,76,78,80,68,69,61],
[55,60,69,0,78,66,52,53,50,68],
[69,61,55,53,0,72,70,51,61,52],
[69,56,53,65,59,0,69,53,49,57],
[74,63,51,79,61,62,0,52,50,69],
[65,73,63,78,80,78,79,0,66,77],
[74,65,62,81,70,82,81,65,0,68],
[67,82,70,63,79,74,62,54,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,46,50,60,60,53,62,48,71],
[81,0,55,68,76,73,53,81,41,81],
[85,76,0,66,76,68,47,87,52,61],
[81,63,65,0,92,99,71,62,44,91],
[71,55,55,39,0,80,60,51,46,68],
[71,58,63,32,51,0,39,30,26,50],
[78,78,84,60,71,92,0,49,45,99],
[69,50,44,69,80,101,82,0,71,93],
[83,90,79,87,85,105,86,60,0,94],
[60,50,70,40,63,81,32,38,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,53,62,61,66,57,64,55],
[62,0,61,61,68,64,63,52,59,52],
[62,70,0,62,59,77,61,59,72,57],
[78,70,69,0,62,61,58,57,74,60],
[69,63,72,69,0,73,62,69,72,66],
[70,67,54,70,58,0,60,49,60,49],
[65,68,70,73,69,71,0,62,69,62],
[74,79,72,74,62,82,69,0,76,64],
[67,72,59,57,59,71,62,55,0,55],
[76,79,74,71,65,82,69,67,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,92,74,75,86,54,41,50,63],
[105,0,111,119,86,80,97,54,80,74],
[39,20,0,33,69,31,67,31,63,26],
[57,12,98,0,86,56,48,12,36,43],
[56,45,62,45,0,56,74,37,70,39],
[45,51,100,75,75,0,88,75,87,49],
[77,34,64,83,57,43,0,32,51,38],
[90,77,100,119,94,56,99,0,88,51],
[81,51,68,95,61,44,80,43,0,39],
[68,57,105,88,92,82,93,80,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,58,58,52,65,67,52,56,58],
[58,0,72,70,41,66,64,45,59,59],
[73,59,0,75,67,72,62,57,58,46],
[73,61,56,0,53,55,63,47,64,64],
[79,90,64,78,0,69,64,56,65,76],
[66,65,59,76,62,0,54,70,59,56],
[64,67,69,68,67,77,0,57,69,68],
[79,86,74,84,75,61,74,0,64,60],
[75,72,73,67,66,72,62,67,0,63],
[73,72,85,67,55,75,63,71,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,63,63,78,57,76,51,72],
[65,0,62,49,52,67,39,49,38,47],
[68,69,0,67,70,65,69,74,68,55],
[68,82,64,0,52,68,56,62,37,53],
[68,79,61,79,0,71,69,84,58,76],
[53,64,66,63,60,0,55,58,57,51],
[74,92,62,75,62,76,0,71,64,61],
[55,82,57,69,47,73,60,0,59,41],
[80,93,63,94,73,74,67,72,0,66],
[59,84,76,78,55,80,70,90,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,81,60,57,51,60,72,70],
[69,0,56,97,71,64,56,83,51,79],
[71,75,0,96,71,84,61,87,74,101],
[50,34,35,0,68,53,51,72,53,73],
[71,60,60,63,0,44,51,67,57,87],
[74,67,47,78,87,0,56,75,73,77],
[80,75,70,80,80,75,0,91,62,93],
[71,48,44,59,64,56,40,0,54,76],
[59,80,57,78,74,58,69,77,0,78],
[61,52,30,58,44,54,38,55,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,63,71,70,73,71,65,64],
[66,0,68,63,66,66,61,71,73,70],
[56,63,0,61,56,55,60,53,56,63],
[68,68,70,0,74,65,68,64,66,71],
[60,65,75,57,0,69,67,67,65,59],
[61,65,76,66,62,0,64,61,65,67],
[58,70,71,63,64,67,0,70,66,70],
[60,60,78,67,64,70,61,0,67,70],
[66,58,75,65,66,66,65,64,0,69],
[67,61,68,60,72,64,61,61,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,58,67,64,58,68,68,70,58],
[66,0,54,61,61,54,63,65,61,65],
[73,77,0,72,75,62,69,73,75,71],
[64,70,59,0,63,55,66,62,67,61],
[67,70,56,68,0,50,62,53,62,61],
[73,77,69,76,81,0,68,65,74,67],
[63,68,62,65,69,63,0,65,66,60],
[63,66,58,69,78,66,66,0,68,55],
[61,70,56,64,69,57,65,63,0,63],
[73,66,60,70,70,64,71,76,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,60,56,32,49,48,52,49,45],
[90,0,79,81,62,68,70,77,66,68],
[71,52,0,69,56,55,60,62,48,64],
[75,50,62,0,57,56,53,71,57,61],
[99,69,75,74,0,79,76,76,62,73],
[82,63,76,75,52,0,74,63,72,66],
[83,61,71,78,55,57,0,70,64,68],
[79,54,69,60,55,68,61,0,58,56],
[82,65,83,74,69,59,67,73,0,75],
[86,63,67,70,58,65,63,75,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,64,60,60,69,72,66,70,63],
[56,0,55,52,54,61,61,55,69,53],
[67,76,0,70,61,69,64,63,76,65],
[71,79,61,0,71,72,76,59,81,68],
[71,77,70,60,0,72,72,64,70,67],
[62,70,62,59,59,0,65,56,76,64],
[59,70,67,55,59,66,0,58,76,65],
[65,76,68,72,67,75,73,0,82,66],
[61,62,55,50,61,55,55,49,0,58],
[68,78,66,63,64,67,66,65,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,81,87,65,83,45,63,54,78],
[66,0,69,52,63,80,42,63,61,53],
[50,62,0,60,59,76,41,67,58,73],
[44,79,71,0,57,90,58,66,44,75],
[66,68,72,74,0,74,51,66,60,56],
[48,51,55,41,57,0,49,47,36,43],
[86,89,90,73,80,82,0,77,72,64],
[68,68,64,65,65,84,54,0,64,54],
[77,70,73,87,71,95,59,67,0,75],
[53,78,58,56,75,88,67,77,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,85,76,68,70,66,72,73],
[66,0,58,71,78,65,62,69,65,65],
[70,73,0,81,84,55,65,69,64,75],
[46,60,50,0,72,53,74,56,61,68],
[55,53,47,59,0,50,51,49,53,60],
[63,66,76,78,81,0,68,67,65,82],
[61,69,66,57,80,63,0,73,72,75],
[65,62,62,75,82,64,58,0,66,66],
[59,66,67,70,78,66,59,65,0,73],
[58,66,56,63,71,49,56,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,52,72,67,61,66,71,66,71],
[76,0,79,75,70,74,62,71,79,87],
[79,52,0,74,74,69,82,72,63,75],
[59,56,57,0,60,59,67,60,75,75],
[64,61,57,71,0,61,69,57,79,73],
[70,57,62,72,70,0,76,65,74,80],
[65,69,49,64,62,55,0,56,68,61],
[60,60,59,71,74,66,75,0,70,78],
[65,52,68,56,52,57,63,61,0,65],
[60,44,56,56,58,51,70,53,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,65,71,58,61,62,73,57,77],
[75,0,74,76,64,70,72,78,75,78],
[66,57,0,70,62,58,60,65,50,66],
[60,55,61,0,62,61,57,72,64,76],
[73,67,69,69,0,48,61,82,65,77],
[70,61,73,70,83,0,65,77,62,79],
[69,59,71,74,70,66,0,79,67,74],
[58,53,66,59,49,54,52,0,46,65],
[74,56,81,67,66,69,64,85,0,85],
[54,53,65,55,54,52,57,66,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,59,78,80,67,68,60,66,50],
[56,0,53,62,63,62,62,47,48,32],
[72,78,0,83,78,67,66,71,64,72],
[53,69,48,0,69,58,46,63,56,59],
[51,68,53,62,0,58,51,55,53,47],
[64,69,64,73,73,0,58,63,67,71],
[63,69,65,85,80,73,0,52,74,60],
[71,84,60,68,76,68,79,0,68,75],
[65,83,67,75,78,64,57,63,0,62],
[81,99,59,72,84,60,71,56,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,57,64,64,69,63,63,57,71],
[68,0,58,52,64,69,67,54,61,56],
[74,73,0,62,69,68,82,71,62,79],
[67,79,69,0,76,78,67,65,67,77],
[67,67,62,55,0,70,59,63,61,63],
[62,62,63,53,61,0,58,62,56,66],
[68,64,49,64,72,73,0,68,51,59],
[68,77,60,66,68,69,63,0,53,67],
[74,70,69,64,70,75,80,78,0,73],
[60,75,52,54,68,65,72,64,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,48,75,67,81,75,64,77,85],
[56,0,58,62,57,78,68,66,65,69],
[83,73,0,62,65,80,87,73,71,76],
[56,69,69,0,64,66,62,55,72,78],
[64,74,66,67,0,88,70,79,68,89],
[50,53,51,65,43,0,62,63,65,73],
[56,63,44,69,61,69,0,68,66,73],
[67,65,58,76,52,68,63,0,72,83],
[54,66,60,59,63,66,65,59,0,72],
[46,62,55,53,42,58,58,48,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,55,58,61,65,64,64,73,69],
[65,0,61,68,66,53,58,68,86,61],
[76,70,0,84,68,63,66,79,71,74],
[73,63,47,0,69,71,52,62,64,67],
[70,65,63,62,0,63,58,74,65,64],
[66,78,68,60,68,0,51,63,75,61],
[67,73,65,79,73,80,0,77,78,73],
[67,63,52,69,57,68,54,0,68,62],
[58,45,60,67,66,56,53,63,0,54],
[62,70,57,64,67,70,58,69,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,58,88,70,74,80,70,76,82],
[53,0,72,78,75,74,67,63,51,80],
[73,59,0,62,71,77,89,67,70,79],
[43,53,69,0,66,66,59,59,67,78],
[61,56,60,65,0,76,75,62,64,88],
[57,57,54,65,55,0,69,48,63,60],
[51,64,42,72,56,62,0,62,61,80],
[61,68,64,72,69,83,69,0,55,91],
[55,80,61,64,67,68,70,76,0,70],
[49,51,52,53,43,71,51,40,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,72,60,66,65,53,73,72,68],
[100,0,72,69,64,67,81,63,97,67],
[59,59,0,72,64,57,81,62,64,81],
[71,62,59,0,61,58,49,48,62,70],
[65,67,67,70,0,77,58,67,79,73],
[66,64,74,73,54,0,70,75,65,74],
[78,50,50,82,73,61,0,66,74,71],
[58,68,69,83,64,56,65,0,74,71],
[59,34,67,69,52,66,57,57,0,70],
[63,64,50,61,58,57,60,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,68,60,68,74,59,45,51,66],
[74,0,65,65,52,70,56,43,41,73],
[63,66,0,57,35,50,68,50,49,72],
[71,66,74,0,70,92,54,63,75,94],
[63,79,96,61,0,65,72,67,63,69],
[57,61,81,39,66,0,76,46,59,69],
[72,75,63,77,59,55,0,53,58,82],
[86,88,81,68,64,85,78,0,55,98],
[80,90,82,56,68,72,73,76,0,82],
[65,58,59,37,62,62,49,33,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,50,69,29,93,58,59,83,40],
[27,0,42,10,10,34,46,35,53,35],
[81,89,0,68,64,89,60,68,64,25],
[62,121,63,0,81,106,60,106,96,78],
[102,121,67,50,0,83,75,59,83,57],
[38,97,42,25,48,0,51,44,58,57],
[73,85,71,71,56,80,0,46,85,71],
[72,96,63,25,72,87,85,0,106,42],
[48,78,67,35,48,73,46,25,0,52],
[91,96,106,53,74,74,60,89,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,50,67,55,79,71,81,57,70],
[50,0,49,59,66,66,37,70,60,37],
[81,82,0,74,83,75,56,89,71,62],
[64,72,57,0,64,77,53,73,55,55],
[76,65,48,67,0,73,66,78,48,59],
[52,65,56,54,58,0,52,81,47,52],
[60,94,75,78,65,79,0,78,73,62],
[50,61,42,58,53,50,53,0,39,41],
[74,71,60,76,83,84,58,92,0,68],
[61,94,69,76,72,79,69,90,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,43,58,73,68,70,55,62,70],
[82,0,85,48,68,76,98,52,71,81],
[88,46,0,51,57,79,95,59,63,70],
[73,83,80,0,68,81,79,66,59,98],
[58,63,74,63,0,89,85,45,65,74],
[63,55,52,50,42,0,75,49,50,60],
[61,33,36,52,46,56,0,35,56,48],
[76,79,72,65,86,82,96,0,65,81],
[69,60,68,72,66,81,75,66,0,73],
[61,50,61,33,57,71,83,50,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,67,62,74,74,50,68,66,69],
[74,0,64,74,74,78,67,68,63,65],
[64,67,0,79,73,70,64,58,60,58],
[69,57,52,0,69,64,50,73,54,63],
[57,57,58,62,0,63,51,68,55,50],
[57,53,61,67,68,0,51,72,59,62],
[81,64,67,81,80,80,0,70,80,67],
[63,63,73,58,63,59,61,0,63,57],
[65,68,71,77,76,72,51,68,0,62],
[62,66,73,68,81,69,64,74,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,61,65,70,73,75,69,65,71],
[55,0,57,61,56,52,49,63,57,59],
[70,74,0,79,78,67,67,71,73,63],
[66,70,52,0,67,58,62,70,68,58],
[61,75,53,64,0,69,57,70,68,59],
[58,79,64,73,62,0,57,85,71,67],
[56,82,64,69,74,74,0,74,61,68],
[62,68,60,61,61,46,57,0,65,55],
[66,74,58,63,63,60,70,66,0,55],
[60,72,68,73,72,64,63,76,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,62,72,68,61,56,67,65,66],
[75,0,60,63,65,58,66,65,70,62],
[69,71,0,74,64,65,56,56,82,68],
[59,68,57,0,61,72,55,66,70,69],
[63,66,67,70,0,55,57,62,70,73],
[70,73,66,59,76,0,56,79,70,75],
[75,65,75,76,74,75,0,71,73,78],
[64,66,75,65,69,52,60,0,70,66],
[66,61,49,61,61,61,58,61,0,69],
[65,69,63,62,58,56,53,65,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,62,68,69,63,59,60,62],
[72,0,69,73,73,69,64,69,64,75],
[71,62,0,79,69,69,65,62,68,68],
[69,58,52,0,65,69,67,61,69,63],
[63,58,62,66,0,70,65,64,65,71],
[62,62,62,62,61,0,62,62,62,73],
[68,67,66,64,66,69,0,61,73,70],
[72,62,69,70,67,69,70,0,63,67],
[71,67,63,62,66,69,58,68,0,72],
[69,56,63,68,60,58,61,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,60,56,67,69,58,61,54],
[66,0,62,58,49,63,62,59,57,52],
[67,69,0,52,55,65,64,63,60,54],
[71,73,79,0,62,75,68,63,61,68],
[75,82,76,69,0,78,80,64,65,62],
[64,68,66,56,53,0,67,53,55,47],
[62,69,67,63,51,64,0,65,60,63],
[73,72,68,68,67,78,66,0,61,58],
[70,74,71,70,66,76,71,70,0,61],
[77,79,77,63,69,84,68,73,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,64,74,67,72,68,65,55],
[64,0,65,62,69,66,70,59,63,61],
[70,66,0,65,65,66,68,65,56,55],
[67,69,66,0,65,62,73,64,55,55],
[57,62,66,66,0,60,63,56,59,52],
[64,65,65,69,71,0,73,58,63,51],
[59,61,63,58,68,58,0,61,59,50],
[63,72,66,67,75,73,70,0,68,66],
[66,68,75,76,72,68,72,63,0,61],
[76,70,76,76,79,80,81,65,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,76,67,71,51,66,58,62,75],
[64,0,78,66,70,68,65,61,73,67],
[55,53,0,61,62,49,61,56,62,60],
[64,65,70,0,81,61,72,69,64,63],
[60,61,69,50,0,60,71,59,51,59],
[80,63,82,70,71,0,65,62,56,72],
[65,66,70,59,60,66,0,66,70,60],
[73,70,75,62,72,69,65,0,65,68],
[69,58,69,67,80,75,61,66,0,78],
[56,64,71,68,72,59,71,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,71,68,65,59,71,60,65,74],
[67,0,65,64,61,65,55,65,60,67],
[60,66,0,56,58,57,54,61,64,59],
[63,67,75,0,74,69,71,63,67,69],
[66,70,73,57,0,61,58,63,67,68],
[72,66,74,62,70,0,62,70,66,68],
[60,76,77,60,73,69,0,73,65,66],
[71,66,70,68,68,61,58,0,66,64],
[66,71,67,64,64,65,66,65,0,68],
[57,64,72,62,63,63,65,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,59,47,57,57,72,63,63,58],
[70,0,66,67,57,62,74,69,67,79],
[72,65,0,50,69,66,63,49,57,68],
[84,64,81,0,79,75,72,70,68,89],
[74,74,62,52,0,62,60,65,51,71],
[74,69,65,56,69,0,79,61,62,74],
[59,57,68,59,71,52,0,60,65,59],
[68,62,82,61,66,70,71,0,59,66],
[68,64,74,63,80,69,66,72,0,77],
[73,52,63,42,60,57,72,65,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,77,69,76,78,107,65,78,80],
[68,0,80,82,77,77,85,75,65,84],
[54,51,0,70,72,54,67,64,55,72],
[62,49,61,0,71,67,75,73,63,85],
[55,54,59,60,0,72,72,45,64,56],
[53,54,77,64,59,0,76,50,60,60],
[24,46,64,56,59,55,0,54,49,68],
[66,56,67,58,86,81,77,0,72,68],
[53,66,76,68,67,71,82,59,0,62],
[51,47,59,46,75,71,63,63,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,67,61,77,60,67,59,76],
[69,0,61,54,63,69,58,59,48,78],
[69,70,0,59,63,64,75,64,68,80],
[64,77,72,0,67,79,79,77,63,77],
[70,68,68,64,0,95,74,74,74,73],
[54,62,67,52,36,0,54,47,61,71],
[71,73,56,52,57,77,0,70,55,86],
[64,72,67,54,57,84,61,0,60,76],
[72,83,63,68,57,70,76,71,0,81],
[55,53,51,54,58,60,45,55,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,66,72,76,74,71,65,69],
[64,0,75,61,66,71,63,77,60,65],
[60,56,0,55,64,70,64,67,46,64],
[65,70,76,0,68,74,67,74,66,67],
[59,65,67,63,0,68,69,70,53,66],
[55,60,61,57,63,0,51,66,51,54],
[57,68,67,64,62,80,0,72,57,64],
[60,54,64,57,61,65,59,0,55,69],
[66,71,85,65,78,80,74,76,0,73],
[62,66,67,64,65,77,67,62,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,66,56,57,63,57,64,62,64],
[75,0,71,66,70,79,65,74,77,69],
[65,60,0,59,63,56,60,66,66,66],
[75,65,72,0,72,63,56,67,61,71],
[74,61,68,59,0,59,69,69,62,74],
[68,52,75,68,72,0,60,65,67,66],
[74,66,71,75,62,71,0,73,72,75],
[67,57,65,64,62,66,58,0,68,68],
[69,54,65,70,69,64,59,63,0,65],
[67,62,65,60,57,65,56,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,61,55,57,68,64,65,52,69],
[71,0,70,60,48,78,51,66,55,63],
[70,61,0,75,57,69,79,67,67,70],
[76,71,56,0,57,70,68,63,67,66],
[74,83,74,74,0,85,81,83,64,90],
[63,53,62,61,46,0,49,59,54,56],
[67,80,52,63,50,82,0,74,61,77],
[66,65,64,68,48,72,57,0,58,82],
[79,76,64,64,67,77,70,73,0,78],
[62,68,61,65,41,75,54,49,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,46,81,83,89,43,70,61,81],
[45,0,44,55,83,74,31,72,25,53],
[85,87,0,90,48,96,72,74,74,91],
[50,76,41,0,73,80,48,74,47,71],
[48,48,83,58,0,90,48,44,32,54],
[42,57,35,51,41,0,45,49,41,40],
[88,100,59,83,83,86,0,106,78,98],
[61,59,57,57,87,82,25,0,19,43],
[70,106,57,84,99,90,53,112,0,89],
[50,78,40,60,77,91,33,88,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,73,59,85,75,73,81,76,67],
[56,0,81,70,87,75,58,70,71,62],
[58,50,0,61,81,68,67,67,65,64],
[72,61,70,0,86,73,62,73,74,67],
[46,44,50,45,0,55,55,58,53,57],
[56,56,63,58,76,0,59,66,59,63],
[58,73,64,69,76,72,0,77,74,65],
[50,61,64,58,73,65,54,0,69,71],
[55,60,66,57,78,72,57,62,0,54],
[64,69,67,64,74,68,66,60,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,67,66,62,71,63,71,69],
[58,0,62,63,70,60,65,70,71,62],
[62,69,0,60,72,62,67,61,72,61],
[64,68,71,0,71,66,59,70,77,62],
[65,61,59,60,0,58,65,65,66,55],
[69,71,69,65,73,0,69,70,77,66],
[60,66,64,72,66,62,0,66,70,63],
[68,61,70,61,66,61,65,0,68,60],
[60,60,59,54,65,54,61,63,0,57],
[62,69,70,69,76,65,68,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,60,73,46,62,49,49,66,43],
[82,0,56,74,53,63,49,47,62,75],
[71,75,0,85,61,81,72,50,92,56],
[58,57,46,0,68,59,31,47,75,47],
[85,78,70,63,0,74,67,71,98,58],
[69,68,50,72,57,0,64,46,87,62],
[82,82,59,100,64,67,0,44,81,67],
[82,84,81,84,60,85,87,0,92,50],
[65,69,39,56,33,44,50,39,0,57],
[88,56,75,84,73,69,64,81,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,86,82,66,77,88,79,73,59],
[58,0,69,59,45,42,80,43,28,77],
[45,62,0,46,45,42,64,43,13,63],
[49,72,85,0,83,51,68,66,49,75],
[65,86,86,48,0,73,85,50,58,80],
[54,89,89,80,58,0,71,55,51,78],
[43,51,67,63,46,60,0,46,48,57],
[52,88,88,65,81,76,85,0,67,89],
[58,103,118,82,73,80,83,64,0,99],
[72,54,68,56,51,53,74,42,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,45,51,63,55,56,58,47,56],
[87,0,64,67,81,71,80,72,70,62],
[86,67,0,61,72,71,72,68,73,69],
[80,64,70,0,78,71,79,68,70,67],
[68,50,59,53,0,57,64,61,62,65],
[76,60,60,60,74,0,73,72,64,70],
[75,51,59,52,67,58,0,61,63,66],
[73,59,63,63,70,59,70,0,58,69],
[84,61,58,61,69,67,68,73,0,71],
[75,69,62,64,66,61,65,62,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,68,54,71,51,55,55,45],
[67,0,68,82,59,68,48,54,60,62],
[67,63,0,72,71,71,72,56,61,65],
[63,49,59,0,43,54,65,55,69,59],
[77,72,60,88,0,77,74,60,62,53],
[60,63,60,77,54,0,53,54,61,59],
[80,83,59,66,57,78,0,71,75,56],
[76,77,75,76,71,77,60,0,75,73],
[76,71,70,62,69,70,56,56,0,61],
[86,69,66,72,78,72,75,58,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,56,63,56,68,61,70,67,59],
[70,0,65,61,46,56,67,55,68,64],
[75,66,0,75,72,71,61,71,78,63],
[68,70,56,0,65,70,58,61,66,65],
[75,85,59,66,0,73,75,71,81,63],
[63,75,60,61,58,0,59,59,67,60],
[70,64,70,73,56,72,0,72,82,68],
[61,76,60,70,60,72,59,0,65,69],
[64,63,53,65,50,64,49,66,0,55],
[72,67,68,66,68,71,63,62,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,60,71,65,71,66,67,69],
[69,0,71,69,70,77,75,65,66,65],
[73,60,0,61,67,72,62,64,68,71],
[71,62,70,0,71,66,67,58,63,63],
[60,61,64,60,0,71,69,64,65,70],
[66,54,59,65,60,0,65,60,67,62],
[60,56,69,64,62,66,0,65,63,53],
[65,66,67,73,67,71,66,0,61,70],
[64,65,63,68,66,64,68,70,0,63],
[62,66,60,68,61,69,78,61,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,86,97,75,66,69,35,111,59],
[61,0,74,56,76,59,28,58,68,89],
[45,57,0,62,64,28,65,31,48,72],
[34,75,69,0,61,26,25,38,62,60],
[56,55,67,70,0,55,25,53,81,65],
[65,72,103,105,76,0,74,48,105,75],
[62,103,66,106,106,57,0,69,88,78],
[96,73,100,93,78,83,62,0,93,98],
[20,63,83,69,50,26,43,38,0,65],
[72,42,59,71,66,56,53,33,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,98,99,75,61,76,72,70,85],
[56,0,84,73,77,58,64,64,69,90],
[33,47,0,62,47,46,30,40,42,48],
[32,58,69,0,61,48,58,66,60,54],
[56,54,84,70,0,58,49,48,59,46],
[70,73,85,83,73,0,75,80,61,77],
[55,67,101,73,82,56,0,94,61,101],
[59,67,91,65,83,51,37,0,59,57],
[61,62,89,71,72,70,70,72,0,85],
[46,41,83,77,85,54,30,74,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,65,73,58,64,58,65,56],
[71,0,60,66,79,69,66,65,66,66],
[69,71,0,62,72,58,65,54,51,62],
[66,65,69,0,71,68,73,65,60,53],
[58,52,59,60,0,51,58,52,58,59],
[73,62,73,63,80,0,71,67,52,65],
[67,65,66,58,73,60,0,62,60,60],
[73,66,77,66,79,64,69,0,57,73],
[66,65,80,71,73,79,71,74,0,63],
[75,65,69,78,72,66,71,58,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,91,101,79,88,62,99,77,94],
[51,0,83,49,33,70,65,72,47,82],
[40,48,0,84,59,51,67,79,59,82],
[30,82,47,0,74,66,67,91,63,77],
[52,98,72,57,0,86,64,99,47,63],
[43,61,80,65,45,0,51,90,55,86],
[69,66,64,64,67,80,0,78,43,80],
[32,59,52,40,32,41,53,0,33,35],
[54,84,72,68,84,76,88,98,0,74],
[37,49,49,54,68,45,51,96,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,60,63,71,70,67,61,69,69],
[57,0,65,57,62,71,69,70,72,68],
[71,66,0,62,69,67,76,74,68,74],
[68,74,69,0,67,73,72,70,59,68],
[60,69,62,64,0,67,66,65,60,64],
[61,60,64,58,64,0,62,67,62,65],
[64,62,55,59,65,69,0,61,63,63],
[70,61,57,61,66,64,70,0,65,66],
[62,59,63,72,71,69,68,66,0,64],
[62,63,57,63,67,66,68,65,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,73,66,66,75,55,69,68],
[61,0,55,68,61,66,66,61,69,60],
[65,76,0,70,62,68,72,58,76,66],
[58,63,61,0,56,64,64,51,58,55],
[65,70,69,75,0,66,74,68,71,61],
[65,65,63,67,65,0,71,47,68,66],
[56,65,59,67,57,60,0,56,62,58],
[76,70,73,80,63,84,75,0,75,66],
[62,62,55,73,60,63,69,56,0,62],
[63,71,65,76,70,65,73,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,53,67,55,59,66,59,63],
[71,0,65,72,71,72,76,68,72,78],
[73,66,0,65,74,66,67,65,66,71],
[78,59,66,0,70,64,64,69,65,67],
[64,60,57,61,0,59,66,64,66,66],
[76,59,65,67,72,0,63,64,68,71],
[72,55,64,67,65,68,0,75,64,62],
[65,63,66,62,67,67,56,0,69,68],
[72,59,65,66,65,63,67,62,0,70],
[68,53,60,64,65,60,69,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,67,66,70,60,67,61,58,63],
[56,0,70,65,71,57,67,61,57,60],
[64,61,0,66,63,62,63,63,60,57],
[65,66,65,0,65,60,63,66,62,58],
[61,60,68,66,0,63,61,64,62,58],
[71,74,69,71,68,0,67,75,72,65],
[64,64,68,68,70,64,0,63,62,59],
[70,70,68,65,67,56,68,0,59,60],
[73,74,71,69,69,59,69,72,0,66],
[68,71,74,73,73,66,72,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,53,71,58,63,67,75,70,75],
[66,0,54,73,57,76,68,80,73,71],
[78,77,0,78,72,74,65,69,69,69],
[60,58,53,0,49,55,71,73,68,72],
[73,74,59,82,0,67,66,70,78,71],
[68,55,57,76,64,0,66,68,76,80],
[64,63,66,60,65,65,0,73,72,56],
[56,51,62,58,61,63,58,0,65,64],
[61,58,62,63,53,55,59,66,0,68],
[56,60,62,59,60,51,75,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,81,76,68,88,70,84,79,61],
[52,0,62,58,54,63,58,67,51,67],
[50,69,0,57,54,75,56,75,54,44],
[55,73,74,0,61,69,58,65,70,53],
[63,77,77,70,0,78,69,66,77,61],
[43,68,56,62,53,0,60,57,70,47],
[61,73,75,73,62,71,0,74,70,58],
[47,64,56,66,65,74,57,0,62,58],
[52,80,77,61,54,61,61,69,0,64],
[70,64,87,78,70,84,73,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,77,70,71,48,62,65,73,65],
[74,0,92,68,94,70,66,65,75,78],
[54,39,0,39,73,45,54,57,58,53],
[61,63,92,0,98,60,67,71,81,72],
[60,37,58,33,0,35,40,56,59,55],
[83,61,86,71,96,0,64,73,83,79],
[69,65,77,64,91,67,0,69,75,74],
[66,66,74,60,75,58,62,0,62,69],
[58,56,73,50,72,48,56,69,0,71],
[66,53,78,59,76,52,57,62,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,69,64,68,69,60,57,67,66],
[75,0,77,72,75,79,72,65,64,77],
[62,54,0,63,62,80,66,59,59,68],
[67,59,68,0,62,68,69,63,68,78],
[63,56,69,69,0,73,62,68,60,70],
[62,52,51,63,58,0,58,59,51,59],
[71,59,65,62,69,73,0,66,69,66],
[74,66,72,68,63,72,65,0,71,77],
[64,67,72,63,71,80,62,60,0,72],
[65,54,63,53,61,72,65,54,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,51,79,51,62,95,51,60,61],
[72,0,69,78,50,57,80,69,71,69],
[80,62,0,74,75,78,85,72,84,91],
[52,53,57,0,43,50,69,57,58,76],
[80,81,56,88,0,80,84,72,79,82],
[69,74,53,81,51,0,81,63,74,70],
[36,51,46,62,47,50,0,47,49,57],
[80,62,59,74,59,68,84,0,60,63],
[71,60,47,73,52,57,82,71,0,72],
[70,62,40,55,49,61,74,68,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,47,55,41,73,68,85,65,92],
[69,0,55,53,53,64,66,52,52,85],
[84,76,0,76,69,86,71,68,56,88],
[76,78,55,0,54,68,63,72,69,78],
[90,78,62,77,0,64,65,79,79,90],
[58,67,45,63,67,0,61,56,47,68],
[63,65,60,68,66,70,0,74,66,92],
[46,79,63,59,52,75,57,0,59,93],
[66,79,75,62,52,84,65,72,0,80],
[39,46,43,53,41,63,39,38,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,71,76,73,59,61,73,70,69],
[71,0,68,65,66,65,63,66,78,69],
[60,63,0,64,57,57,59,62,66,60],
[55,66,67,0,61,55,51,59,52,68],
[58,65,74,70,0,63,69,70,67,63],
[72,66,74,76,68,0,65,81,72,65],
[70,68,72,80,62,66,0,82,75,64],
[58,65,69,72,61,50,49,0,52,62],
[61,53,65,79,64,59,56,79,0,65],
[62,62,71,63,68,66,67,69,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,86,90,77,86,90,43,90,86],
[88,0,88,90,91,88,54,131,92,88],
[45,43,0,43,77,4,4,43,81,39],
[41,41,88,0,41,88,88,77,88,88],
[54,40,54,90,0,54,54,93,90,86],
[45,43,127,43,77,0,90,43,81,77],
[41,77,127,43,77,41,0,77,77,77],
[88,0,88,54,38,88,54,0,92,88],
[41,39,50,43,41,50,54,39,0,50],
[45,43,92,43,45,54,54,43,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,88,64,65,70,74,66,72,66],
[60,0,90,58,63,72,86,72,83,61],
[43,41,0,40,44,61,66,51,60,51],
[67,73,91,0,68,85,81,59,71,61],
[66,68,87,63,0,68,78,57,80,65],
[61,59,70,46,63,0,72,49,55,49],
[57,45,65,50,53,59,0,46,55,56],
[65,59,80,72,74,82,85,0,79,62],
[59,48,71,60,51,76,76,52,0,62],
[65,70,80,70,66,82,75,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,70,67,67,65,61,57,60,61],
[77,0,78,76,69,66,72,67,70,62],
[61,53,0,64,62,54,63,53,65,57],
[64,55,67,0,64,63,67,48,62,59],
[64,62,69,67,0,82,72,53,71,69],
[66,65,77,68,49,0,63,55,71,65],
[70,59,68,64,59,68,0,61,54,66],
[74,64,78,83,78,76,70,0,74,74],
[71,61,66,69,60,60,77,57,0,66],
[70,69,74,72,62,66,65,57,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,71,65,78,69,78,65,61,74],
[62,0,71,59,81,57,72,56,55,68],
[60,60,0,59,82,62,81,61,58,80],
[66,72,72,0,84,72,81,65,71,78],
[53,50,49,47,0,49,64,52,43,49],
[62,74,69,59,82,0,63,62,71,80],
[53,59,50,50,67,68,0,56,57,68],
[66,75,70,66,79,69,75,0,65,81],
[70,76,73,60,88,60,74,66,0,70],
[57,63,51,53,82,51,63,50,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,70,75,80,65,64,67,66,68],
[58,0,60,63,74,64,58,53,60,60],
[61,71,0,72,74,55,70,62,57,64],
[56,68,59,0,59,62,53,69,58,56],
[51,57,57,72,0,57,63,55,59,59],
[66,67,76,69,74,0,59,70,64,60],
[67,73,61,78,68,72,0,63,69,68],
[64,78,69,62,76,61,68,0,63,68],
[65,71,74,73,72,67,62,68,0,71],
[63,71,67,75,72,71,63,63,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,78,59,62,70,77,76,64,69],
[49,0,61,57,56,55,63,60,50,63],
[53,70,0,64,54,58,72,80,46,69],
[72,74,67,0,57,64,72,67,61,71],
[69,75,77,74,0,65,81,80,70,71],
[61,76,73,67,66,0,75,65,69,68],
[54,68,59,59,50,56,0,59,49,57],
[55,71,51,64,51,66,72,0,45,59],
[67,81,85,70,61,62,82,86,0,69],
[62,68,62,60,60,63,74,72,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,68,75,72,82,52,57,70,73],
[56,0,62,54,50,69,70,55,71,72],
[63,69,0,64,77,75,54,59,93,49],
[56,77,67,0,52,83,64,66,86,84],
[59,81,54,79,0,88,66,53,96,78],
[49,62,56,48,43,0,54,52,71,75],
[79,61,77,67,65,77,0,77,86,83],
[74,76,72,65,78,79,54,0,76,69],
[61,60,38,45,35,60,45,55,0,45],
[58,59,82,47,53,56,48,62,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,61,66,78,73,84,81,71,81],
[64,0,64,58,81,80,73,79,67,65],
[70,67,0,63,72,76,85,76,77,73],
[65,73,68,0,83,90,91,73,81,76],
[53,50,59,48,0,72,79,62,62,63],
[58,51,55,41,59,0,69,59,53,52],
[47,58,46,40,52,62,0,67,67,51],
[50,52,55,58,69,72,64,0,56,59],
[60,64,54,50,69,78,64,75,0,62],
[50,66,58,55,68,79,80,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,69,61,51,41,54,73,73,52],
[56,0,49,62,68,47,34,45,69,54],
[62,82,0,52,49,64,66,48,67,59],
[70,69,79,0,74,61,64,56,76,70],
[80,63,82,57,0,65,73,73,84,86],
[90,84,67,70,66,0,77,61,78,53],
[77,97,65,67,58,54,0,60,70,49],
[58,86,83,75,58,70,71,0,72,58],
[58,62,64,55,47,53,61,59,0,62],
[79,77,72,61,45,78,82,73,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,73,62,68,78,81,69,75,81],
[41,0,56,60,66,56,63,53,62,58],
[58,75,0,60,68,64,72,61,66,69],
[69,71,71,0,77,66,81,63,69,69],
[63,65,63,54,0,68,70,62,61,67],
[53,75,67,65,63,0,75,69,71,70],
[50,68,59,50,61,56,0,59,56,62],
[62,78,70,68,69,62,72,0,66,64],
[56,69,65,62,70,60,75,65,0,67],
[50,73,62,62,64,61,69,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,74,64,65,59,64,62,57],
[58,0,46,57,56,61,41,56,68,64],
[60,85,0,74,80,77,71,67,75,62],
[57,74,57,0,63,65,63,49,65,61],
[67,75,51,68,0,64,63,62,56,64],
[66,70,54,66,67,0,59,54,72,61],
[72,90,60,68,68,72,0,70,70,73],
[67,75,64,82,69,77,61,0,76,73],
[69,63,56,66,75,59,61,55,0,52],
[74,67,69,70,67,70,58,58,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,62,60,60,61,58,67,63,53],
[76,0,70,68,60,75,75,70,71,65],
[69,61,0,66,62,71,63,70,63,63],
[71,63,65,0,61,67,59,64,66,59],
[71,71,69,70,0,65,59,72,70,64],
[70,56,60,64,66,0,69,63,63,62],
[73,56,68,72,72,62,0,66,64,67],
[64,61,61,67,59,68,65,0,67,67],
[68,60,68,65,61,68,67,64,0,60],
[78,66,68,72,67,69,64,64,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,59,59,62,73,70,79,76,68],
[66,0,57,65,64,66,60,71,59,63],
[72,74,0,65,80,62,64,85,70,75],
[72,66,66,0,72,70,55,78,69,53],
[69,67,51,59,0,54,68,72,70,55],
[58,65,69,61,77,0,50,77,77,63],
[61,71,67,76,63,81,0,79,82,73],
[52,60,46,53,59,54,52,0,63,62],
[55,72,61,62,61,54,49,68,0,41],
[63,68,56,78,76,68,58,69,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,67,57,65,46,62,57,67,54],
[69,0,70,66,74,63,64,72,72,72],
[64,61,0,57,65,53,66,60,62,56],
[74,65,74,0,63,74,62,66,71,71],
[66,57,66,68,0,68,58,68,61,66],
[85,68,78,57,63,0,64,76,76,68],
[69,67,65,69,73,67,0,73,65,70],
[74,59,71,65,63,55,58,0,69,55],
[64,59,69,60,70,55,66,62,0,64],
[77,59,75,60,65,63,61,76,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,59,59,63,57,61,69,48,49],
[77,0,72,80,82,66,65,63,72,62],
[72,59,0,76,72,69,68,58,57,51],
[72,51,55,0,64,65,47,67,51,46],
[68,49,59,67,0,59,54,63,62,46],
[74,65,62,66,72,0,62,72,59,54],
[70,66,63,84,77,69,0,60,62,66],
[62,68,73,64,68,59,71,0,66,67],
[83,59,74,80,69,72,69,65,0,48],
[82,69,80,85,85,77,65,64,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,65,58,61,70,64,63,63],
[66,0,53,67,54,66,65,63,69,70],
[68,78,0,70,70,70,78,65,69,70],
[66,64,61,0,57,68,65,57,59,66],
[73,77,61,74,0,71,73,69,64,71],
[70,65,61,63,60,0,59,61,60,67],
[61,66,53,66,58,72,0,63,58,72],
[67,68,66,74,62,70,68,0,73,73],
[68,62,62,72,67,71,73,58,0,70],
[68,61,61,65,60,64,59,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,74,69,65,76,68,65,80,66],
[48,0,72,61,60,68,60,58,72,52],
[57,59,0,59,62,71,59,60,72,55],
[62,70,72,0,64,66,65,64,77,64],
[66,71,69,67,0,76,71,67,82,62],
[55,63,60,65,55,0,57,53,69,59],
[63,71,72,66,60,74,0,66,74,64],
[66,73,71,67,64,78,65,0,75,64],
[51,59,59,54,49,62,57,56,0,59],
[65,79,76,67,69,72,67,67,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,59,55,65,53,56,58,56,59],
[76,0,87,63,74,69,71,70,64,81],
[72,44,0,57,57,42,55,57,53,61],
[76,68,74,0,74,64,63,62,68,70],
[66,57,74,57,0,64,67,59,66,71],
[78,62,89,67,67,0,59,63,72,71],
[75,60,76,68,64,72,0,78,78,69],
[73,61,74,69,72,68,53,0,66,71],
[75,67,78,63,65,59,53,65,0,70],
[72,50,70,61,60,60,62,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,56,50,55,55,82,20,62,82],
[69,0,56,59,65,36,116,54,71,82],
[75,75,0,42,48,42,95,33,75,66],
[81,72,89,0,97,68,95,86,71,53],
[76,66,83,34,0,63,95,54,71,53],
[76,95,89,63,68,0,95,33,62,62],
[49,15,36,36,36,36,0,60,9,35],
[111,77,98,45,77,98,71,0,71,77],
[69,60,56,60,60,69,122,60,0,60],
[49,49,65,78,78,69,96,54,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,82,70,77,73,60,68,85,54],
[54,0,45,64,71,46,43,54,70,53],
[49,86,0,70,78,61,57,69,68,48],
[61,67,61,0,69,68,65,66,69,67],
[54,60,53,62,0,55,34,56,74,51],
[58,85,70,63,76,0,65,73,82,59],
[71,88,74,66,97,66,0,76,87,63],
[63,77,62,65,75,58,55,0,82,57],
[46,61,63,62,57,49,44,49,0,54],
[77,78,83,64,80,72,68,74,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,50,70,85,50,40,42,43,45],
[86,0,60,54,77,82,38,38,57,64],
[81,71,0,90,95,69,52,77,89,85],
[61,77,41,0,81,80,42,59,64,54],
[46,54,36,50,0,75,50,64,47,80],
[81,49,62,51,56,0,42,61,76,81],
[91,93,79,89,81,89,0,54,88,110],
[89,93,54,72,67,70,77,0,55,97],
[88,74,42,67,84,55,43,76,0,64],
[86,67,46,77,51,50,21,34,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,59,69,68,72,72,78,66,68],
[60,0,61,67,63,77,73,76,62,64],
[72,70,0,69,64,74,79,80,74,66],
[62,64,62,0,64,70,73,62,69,71],
[63,68,67,67,0,72,78,74,68,70],
[59,54,57,61,59,0,72,71,60,69],
[59,58,52,58,53,59,0,64,61,65],
[53,55,51,69,57,60,67,0,57,59],
[65,69,57,62,63,71,70,74,0,70],
[63,67,65,60,61,62,66,72,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,71,60,32,58,43,26,72,39],
[57,0,37,56,62,54,54,46,56,35],
[60,94,0,92,76,54,62,81,62,52],
[71,75,39,0,81,38,73,65,51,27],
[99,69,55,50,0,72,62,64,40,29],
[73,77,77,93,59,0,76,65,73,61],
[88,77,69,58,69,55,0,58,74,69],
[105,85,50,66,67,66,73,0,62,34],
[59,75,69,80,91,58,57,69,0,53],
[92,96,79,104,102,70,62,97,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,56,61,75,61,61,52,79,81],
[70,0,69,62,68,59,59,58,67,75],
[75,62,0,58,59,61,59,72,60,75],
[70,69,73,0,57,97,70,47,70,82],
[56,63,72,74,0,73,59,79,52,59],
[70,72,70,34,58,0,69,57,53,85],
[70,72,72,61,72,62,0,50,71,83],
[79,73,59,84,52,74,81,0,80,97],
[52,64,71,61,79,78,60,51,0,67],
[50,56,56,49,72,46,48,34,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,61,69,64,67,68,66,61,67],
[60,0,63,65,64,64,65,53,63,59],
[70,68,0,62,62,65,62,55,70,66],
[62,66,69,0,58,73,70,59,62,66],
[67,67,69,73,0,69,69,64,64,68],
[64,67,66,58,62,0,63,51,64,64],
[63,66,69,61,62,68,0,58,65,68],
[65,78,76,72,67,80,73,0,72,72],
[70,68,61,69,67,67,66,59,0,64],
[64,72,65,65,63,67,63,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,72,62,58,67,65,60,69,59],
[66,0,64,70,60,66,63,65,65,64],
[59,67,0,64,56,63,58,57,64,54],
[69,61,67,0,57,62,68,65,70,68],
[73,71,75,74,0,65,71,63,62,61],
[64,65,68,69,66,0,72,63,72,69],
[66,68,73,63,60,59,0,66,70,61],
[71,66,74,66,68,68,65,0,66,63],
[62,66,67,61,69,59,61,65,0,62],
[72,67,77,63,70,62,70,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,41,90,48,57,87,40,105],
[71,0,78,60,55,54,70,72,84,81],
[63,53,0,65,69,51,50,66,49,92],
[90,71,66,0,70,79,85,111,58,107],
[41,76,62,61,0,62,61,77,54,108],
[83,77,80,52,69,0,98,112,75,95],
[74,61,81,46,70,33,0,57,63,97],
[44,59,65,20,54,19,74,0,46,85],
[91,47,82,73,77,56,68,85,0,95],
[26,50,39,24,23,36,34,46,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,53,53,49,52,57,53,37,50],
[80,0,67,60,57,46,67,59,53,58],
[78,64,0,71,66,54,68,68,49,59],
[78,71,60,0,57,63,61,66,52,61],
[82,74,65,74,0,59,67,82,63,69],
[79,85,77,68,72,0,78,71,59,73],
[74,64,63,70,64,53,0,66,50,59],
[78,72,63,65,49,60,65,0,49,61],
[94,78,82,79,68,72,81,82,0,64],
[81,73,72,70,62,58,72,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,57,76,66,59,82,75,54,68],
[66,0,97,92,65,81,98,91,69,79],
[74,34,0,85,60,47,97,98,65,71],
[55,39,46,0,54,46,82,71,29,78],
[65,66,71,77,0,69,83,66,47,84],
[72,50,84,85,62,0,79,74,67,79],
[49,33,34,49,48,52,0,67,47,60],
[56,40,33,60,65,57,64,0,48,60],
[77,62,66,102,84,64,84,83,0,100],
[63,52,60,53,47,52,71,71,31,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,62,65,79,68,71,63,70,67],
[56,0,59,56,63,56,45,49,45,60],
[69,72,0,70,83,65,62,62,63,63],
[66,75,61,0,69,74,69,73,68,74],
[52,68,48,62,0,56,56,42,50,65],
[63,75,66,57,75,0,62,59,64,65],
[60,86,69,62,75,69,0,53,62,72],
[68,82,69,58,89,72,78,0,73,74],
[61,86,68,63,81,67,69,58,0,64],
[64,71,68,57,66,66,59,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,71,75,78,74,73,72,78],
[61,0,59,62,69,62,68,63,74,60],
[67,72,0,63,75,73,75,64,75,77],
[60,69,68,0,77,67,67,68,74,66],
[56,62,56,54,0,63,63,57,66,66],
[53,69,58,64,68,0,59,60,70,67],
[57,63,56,64,68,72,0,63,76,63],
[58,68,67,63,74,71,68,0,67,64],
[59,57,56,57,65,61,55,64,0,62],
[53,71,54,65,65,64,68,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,74,63,67,63,72,67,66],
[71,0,70,70,77,64,64,63,61,60],
[63,61,0,60,59,53,63,65,57,60],
[57,61,71,0,62,58,62,63,62,65],
[68,54,72,69,0,58,64,66,63,67],
[64,67,78,73,73,0,68,70,65,68],
[68,67,68,69,67,63,0,65,67,67],
[59,68,66,68,65,61,66,0,62,63],
[64,70,74,69,68,66,64,69,0,71],
[65,71,71,66,64,63,64,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,67,75,76,66,65,43,32,53],
[86,0,75,75,52,86,74,64,86,41],
[64,56,0,53,65,76,54,30,63,42],
[56,56,78,0,66,56,65,32,32,44],
[55,79,66,65,0,65,44,43,44,42],
[65,45,55,75,66,0,54,22,21,53],
[66,57,77,66,87,77,0,66,44,77],
[88,67,101,99,88,109,65,0,54,74],
[99,45,68,99,87,110,87,77,0,64],
[78,90,89,87,89,78,54,57,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,57,55,51,52,51,73,58,60],
[72,0,68,56,68,66,75,60,66,63],
[74,63,0,62,67,60,78,63,70,68],
[76,75,69,0,71,61,73,63,67,73],
[80,63,64,60,0,50,73,62,63,60],
[79,65,71,70,81,0,68,69,61,66],
[80,56,53,58,58,63,0,60,61,58],
[58,71,68,68,69,62,71,0,71,55],
[73,65,61,64,68,70,70,60,0,61],
[71,68,63,58,71,65,73,76,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,52,69,65,69,58,74,72,70],
[61,0,64,67,57,84,61,59,67,69],
[79,67,0,63,57,71,65,66,74,66],
[62,64,68,0,68,69,67,63,74,70],
[66,74,74,63,0,75,68,67,80,76],
[62,47,60,62,56,0,51,52,58,59],
[73,70,66,64,63,80,0,75,70,64],
[57,72,65,68,64,79,56,0,77,65],
[59,64,57,57,51,73,61,54,0,59],
[61,62,65,61,55,72,67,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,72,57,72,62,60,72,65],
[61,0,62,64,66,71,54,61,51,62],
[66,69,0,71,72,80,58,61,60,66],
[59,67,60,0,60,84,64,57,60,61],
[74,65,59,71,0,81,61,61,65,60],
[59,60,51,47,50,0,60,52,48,60],
[69,77,73,67,70,71,0,62,59,54],
[71,70,70,74,70,79,69,0,65,72],
[59,80,71,71,66,83,72,66,0,66],
[66,69,65,70,71,71,77,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,68,68,73,72,67,74,66,81],
[71,0,69,82,74,68,70,59,68,72],
[63,62,0,52,54,66,58,65,57,67],
[63,49,79,0,65,69,65,60,58,67],
[58,57,77,66,0,63,59,73,60,73],
[59,63,65,62,68,0,74,57,65,68],
[64,61,73,66,72,57,0,64,76,83],
[57,72,66,71,58,74,67,0,70,76],
[65,63,74,73,71,66,55,61,0,73],
[50,59,64,64,58,63,48,55,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,68,63,61,59,62,59,62],
[63,0,59,58,56,56,57,61,57,51],
[73,72,0,77,71,71,68,65,63,65],
[63,73,54,0,54,62,55,55,58,55],
[68,75,60,77,0,73,69,68,66,56],
[70,75,60,69,58,0,82,60,55,68],
[72,74,63,76,62,49,0,58,56,67],
[69,70,66,76,63,71,73,0,60,64],
[72,74,68,73,65,76,75,71,0,68],
[69,80,66,76,75,63,64,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,45,59,56,55,44,47,50,58],
[81,0,63,68,73,54,71,67,63,72],
[86,68,0,66,79,80,69,64,82,77],
[72,63,65,0,71,58,52,55,64,69],
[75,58,52,60,0,59,70,63,65,67],
[76,77,51,73,72,0,65,52,60,66],
[87,60,62,79,61,66,0,63,74,62],
[84,64,67,76,68,79,68,0,63,64],
[81,68,49,67,66,71,57,68,0,72],
[73,59,54,62,64,65,69,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,74,71,65,71,66,63,62,60],
[77,0,69,61,59,61,63,58,69,61],
[57,62,0,57,66,69,69,50,60,67],
[60,70,74,0,60,82,59,71,74,69],
[66,72,65,71,0,74,66,64,82,64],
[60,70,62,49,57,0,68,57,70,69],
[65,68,62,72,65,63,0,66,75,73],
[68,73,81,60,67,74,65,0,71,61],
[69,62,71,57,49,61,56,60,0,62],
[71,70,64,62,67,62,58,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,70,81,71,65,81,72,67],
[66,0,75,74,75,67,71,79,68,55],
[62,56,0,73,66,63,65,67,69,69],
[61,57,58,0,66,57,67,74,70,60],
[50,56,65,65,0,59,59,70,56,57],
[60,64,68,74,72,0,61,58,59,60],
[66,60,66,64,72,70,0,72,75,72],
[50,52,64,57,61,73,59,0,57,50],
[59,63,62,61,75,72,56,74,0,67],
[64,76,62,71,74,71,59,81,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,65,61,64,62,60,64,67,60],
[57,0,64,63,56,52,62,57,55,61],
[66,67,0,65,66,66,63,62,69,65],
[70,68,66,0,60,59,59,63,73,62],
[67,75,65,71,0,71,63,64,67,64],
[69,79,65,72,60,0,67,68,68,69],
[71,69,68,72,68,64,0,73,74,62],
[67,74,69,68,67,63,58,0,68,66],
[64,76,62,58,64,63,57,63,0,62],
[71,70,66,69,67,62,69,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,58,58,52,55,57,58,76,45],
[79,0,76,59,73,69,63,75,80,77],
[73,55,0,59,62,76,60,64,75,67],
[73,72,72,0,63,72,73,61,86,77],
[79,58,69,68,0,74,76,70,75,73],
[76,62,55,59,57,0,62,57,79,67],
[74,68,71,58,55,69,0,66,75,71],
[73,56,67,70,61,74,65,0,87,61],
[55,51,56,45,56,52,56,44,0,52],
[86,54,64,54,58,64,60,70,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,72,69,71,69,64,71,69,72],
[62,0,66,61,70,65,55,63,62,66],
[59,65,0,58,71,64,56,56,64,53],
[62,70,73,0,65,71,52,60,68,58],
[60,61,60,66,0,60,55,61,62,58],
[62,66,67,60,71,0,60,70,68,67],
[67,76,75,79,76,71,0,70,68,65],
[60,68,75,71,70,61,61,0,68,67],
[62,69,67,63,69,63,63,63,0,62],
[59,65,78,73,73,64,66,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,62,66,61,66,73,68,75],
[68,0,64,62,67,62,65,74,61,62],
[60,67,0,61,60,64,63,80,71,73],
[69,69,70,0,68,66,64,80,64,71],
[65,64,71,63,0,58,62,73,64,60],
[70,69,67,65,73,0,66,69,75,71],
[65,66,68,67,69,65,0,76,68,78],
[58,57,51,51,58,62,55,0,56,60],
[63,70,60,67,67,56,63,75,0,68],
[56,69,58,60,71,60,53,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,82,62,67,74,86,66,80],
[61,0,67,73,68,69,64,67,59,69],
[64,64,0,76,66,67,71,78,62,72],
[49,58,55,0,56,62,74,71,48,63],
[69,63,65,75,0,72,76,84,65,80],
[64,62,64,69,59,0,67,67,58,68],
[57,67,60,57,55,64,0,66,51,59],
[45,64,53,60,47,64,65,0,58,69],
[65,72,69,83,66,73,80,73,0,80],
[51,62,59,68,51,63,72,62,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,97,84,49,67,83,82,83,83],
[17,0,34,49,49,52,34,49,67,33],
[34,97,0,67,66,34,51,50,67,82],
[47,82,64,0,64,65,64,63,49,65],
[82,82,65,67,0,99,82,82,51,67],
[64,79,97,66,32,0,64,64,50,65],
[48,97,80,67,49,67,0,47,33,48],
[49,82,81,68,49,67,84,0,52,83],
[48,64,64,82,80,81,98,79,0,82],
[48,98,49,66,64,66,83,48,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,60,64,61,67,60,66,68],
[59,0,64,66,61,60,59,63,58,55],
[65,67,0,68,55,64,65,64,60,62],
[71,65,63,0,61,65,65,66,56,64],
[67,70,76,70,0,73,76,67,62,62],
[70,71,67,66,58,0,63,65,68,65],
[64,72,66,66,55,68,0,67,68,63],
[71,68,67,65,64,66,64,0,66,68],
[65,73,71,75,69,63,63,65,0,64],
[63,76,69,67,69,66,68,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,67,67,62,75,74,70,62,66],
[74,0,61,76,71,70,84,74,68,76],
[64,70,0,71,77,65,72,62,69,70],
[64,55,60,0,61,59,72,62,57,65],
[69,60,54,70,0,65,77,64,66,70],
[56,61,66,72,66,0,77,63,63,65],
[57,47,59,59,54,54,0,56,44,57],
[61,57,69,69,67,68,75,0,59,72],
[69,63,62,74,65,68,87,72,0,72],
[65,55,61,66,61,66,74,59,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,56,105,57,95,71,82,85,77],
[56,0,56,113,86,103,92,86,97,58],
[75,75,0,94,86,94,83,85,87,49],
[26,18,37,0,53,74,52,26,44,48],
[74,45,45,78,0,92,81,73,74,75],
[36,28,37,57,39,0,54,65,67,69],
[60,39,48,79,50,77,0,39,67,69],
[49,45,46,105,58,66,92,0,84,66],
[46,34,44,87,57,64,64,47,0,66],
[54,73,82,83,56,62,62,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,79,72,73,68,74,66,60,79],
[61,0,65,72,71,50,58,65,64,58],
[52,66,0,60,65,51,52,57,52,72],
[59,59,71,0,58,52,55,56,44,66],
[58,60,66,73,0,52,48,54,51,69],
[63,81,80,79,79,0,64,55,67,80],
[57,73,79,76,83,67,0,59,58,69],
[65,66,74,75,77,76,72,0,77,77],
[71,67,79,87,80,64,73,54,0,73],
[52,73,59,65,62,51,62,54,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,71,65,69,73,71,73,62,82],
[58,0,64,62,59,61,70,59,61,71],
[60,67,0,65,58,65,65,73,65,75],
[66,69,66,0,61,62,65,66,64,66],
[62,72,73,70,0,65,71,68,75,75],
[58,70,66,69,66,0,66,64,64,70],
[60,61,66,66,60,65,0,66,59,67],
[58,72,58,65,63,67,65,0,65,73],
[69,70,66,67,56,67,72,66,0,70],
[49,60,56,65,56,61,64,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,61,66,64,63,57,61,71],
[69,0,71,69,67,61,56,62,71,57],
[65,60,0,64,62,62,61,57,55,60],
[70,62,67,0,67,73,66,61,67,72],
[65,64,69,64,0,59,63,58,61,61],
[67,70,69,58,72,0,66,64,77,65],
[68,75,70,65,68,65,0,66,68,70],
[74,69,74,70,73,67,65,0,69,69],
[70,60,76,64,70,54,63,62,0,64],
[60,74,71,59,70,66,61,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,55,63,57,54,69,55,65,75],
[63,0,60,65,59,68,81,62,72,80],
[76,71,0,69,61,86,74,69,71,75],
[68,66,62,0,63,73,79,61,70,78],
[74,72,70,68,0,78,68,62,77,80],
[77,63,45,58,53,0,69,50,69,65],
[62,50,57,52,63,62,0,50,69,80],
[76,69,62,70,69,81,81,0,72,81],
[66,59,60,61,54,62,62,59,0,69],
[56,51,56,53,51,66,51,50,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,72,70,62,76,66,70,70,58],
[70,0,66,61,69,69,56,44,69,52],
[59,65,0,61,63,69,60,62,72,56],
[61,70,70,0,67,76,63,61,68,63],
[69,62,68,64,0,69,64,61,69,63],
[55,62,62,55,62,0,48,46,54,61],
[65,75,71,68,67,83,0,62,80,60],
[61,87,69,70,70,85,69,0,72,67],
[61,62,59,63,62,77,51,59,0,53],
[73,79,75,68,68,70,71,64,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,79,78,59,69,58,69,57,66],
[50,0,65,65,54,60,59,70,55,59],
[52,66,0,58,44,64,72,68,54,50],
[53,66,73,0,56,68,64,58,55,65],
[72,77,87,75,0,75,82,77,64,64],
[62,71,67,63,56,0,59,54,61,61],
[73,72,59,67,49,72,0,67,57,58],
[62,61,63,73,54,77,64,0,60,63],
[74,76,77,76,67,70,74,71,0,61],
[65,72,81,66,67,70,73,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,56,67,59,51,50,56,61,46],
[86,0,87,79,62,81,68,82,74,62],
[75,44,0,73,59,57,54,64,62,54],
[64,52,58,0,53,50,49,62,55,61],
[72,69,72,78,0,64,65,72,71,67],
[80,50,74,81,67,0,68,80,61,67],
[81,63,77,82,66,63,0,79,69,62],
[75,49,67,69,59,51,52,0,53,56],
[70,57,69,76,60,70,62,78,0,54],
[85,69,77,70,64,64,69,75,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,78,74,69,66,71,52,59,67],
[63,0,68,65,62,73,73,58,64,70],
[53,63,0,58,56,70,67,61,64,65],
[57,66,73,0,68,79,76,65,69,70],
[62,69,75,63,0,62,78,55,64,71],
[65,58,61,52,69,0,62,61,59,63],
[60,58,64,55,53,69,0,51,50,70],
[79,73,70,66,76,70,80,0,60,69],
[72,67,67,62,67,72,81,71,0,65],
[64,61,66,61,60,68,61,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,63,63,71,68,62,57,73,70],
[74,0,67,61,65,72,73,62,68,66],
[68,64,0,68,71,67,65,69,74,76],
[68,70,63,0,68,65,64,60,68,65],
[60,66,60,63,0,64,56,61,68,64],
[63,59,64,66,67,0,68,68,68,68],
[69,58,66,67,75,63,0,69,74,74],
[74,69,62,71,70,63,62,0,68,68],
[58,63,57,63,63,63,57,63,0,66],
[61,65,55,66,67,63,57,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,60,57,66,64,74,72,53,69],
[69,0,74,70,76,63,67,71,63,70],
[71,57,0,67,79,67,78,71,58,71],
[74,61,64,0,67,65,76,80,70,72],
[65,55,52,64,0,61,66,66,62,59],
[67,68,64,66,70,0,71,74,72,72],
[57,64,53,55,65,60,0,64,61,63],
[59,60,60,51,65,57,67,0,58,60],
[78,68,73,61,69,59,70,73,0,70],
[62,61,60,59,72,59,68,71,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,47,67,63,52,68,75,60,86],
[77,0,61,59,39,70,85,82,53,79],
[84,70,0,75,52,68,83,54,60,68],
[64,72,56,0,48,63,75,83,69,73],
[68,92,79,83,0,83,85,83,62,84],
[79,61,63,68,48,0,75,66,43,70],
[63,46,48,56,46,56,0,61,61,63],
[56,49,77,48,48,65,70,0,59,78],
[71,78,71,62,69,88,70,72,0,72],
[45,52,63,58,47,61,68,53,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,73,53,63,43,59,63,53],
[68,0,55,62,62,58,47,85,50,43],
[66,76,0,78,75,53,55,72,61,40],
[58,69,53,0,54,58,54,78,65,46],
[78,69,56,77,0,58,50,87,50,45],
[68,73,78,73,73,0,63,96,76,47],
[88,84,76,77,81,68,0,89,58,63],
[72,46,59,53,44,35,42,0,41,41],
[68,81,70,66,81,55,73,90,0,73],
[78,88,91,85,86,84,68,90,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,64,54,60,63,50,74,45,66],
[79,0,61,83,60,64,79,78,49,59],
[67,70,0,63,60,70,84,72,70,79],
[77,48,68,0,60,75,77,81,67,74],
[71,71,71,71,0,62,67,80,83,77],
[68,67,61,56,69,0,69,87,55,72],
[81,52,47,54,64,62,0,85,46,63],
[57,53,59,50,51,44,46,0,57,48],
[86,82,61,64,48,76,85,74,0,76],
[65,72,52,57,54,59,68,83,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,66,63,68,86,81,64,65],
[66,0,57,62,53,67,57,75,74,70],
[64,74,0,73,78,66,77,72,72,67],
[65,69,58,0,58,72,72,78,67,74],
[68,78,53,73,0,67,70,72,71,73],
[63,64,65,59,64,0,64,57,57,66],
[45,74,54,59,61,67,0,59,64,58],
[50,56,59,53,59,74,72,0,64,81],
[67,57,59,64,60,74,67,67,0,66],
[66,61,64,57,58,65,73,50,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,56,61,66,52,75,61,61,62],
[65,0,50,82,67,56,86,76,57,61],
[75,81,0,69,70,60,88,64,61,65],
[70,49,62,0,59,68,71,70,61,67],
[65,64,61,72,0,61,81,70,72,74],
[79,75,71,63,70,0,77,73,72,51],
[56,45,43,60,50,54,0,60,62,58],
[70,55,67,61,61,58,71,0,59,59],
[70,74,70,70,59,59,69,72,0,62],
[69,70,66,64,57,80,73,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,68,65,70,61,60,60,65],
[63,0,64,74,61,71,63,66,57,62],
[59,67,0,67,60,63,51,67,46,57],
[63,57,64,0,64,65,52,62,56,59],
[66,70,71,67,0,64,67,73,64,64],
[61,60,68,66,67,0,51,66,65,56],
[70,68,80,79,64,80,0,70,72,76],
[71,65,64,69,58,65,61,0,51,67],
[71,74,85,75,67,66,59,80,0,66],
[66,69,74,72,67,75,55,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,64,74,70,69,62,59,70],
[63,0,70,62,61,59,61,63,58,62],
[64,61,0,62,62,60,63,59,61,71],
[67,69,69,0,67,69,72,65,70,74],
[57,70,69,64,0,69,68,56,64,75],
[61,72,71,62,62,0,62,59,62,64],
[62,70,68,59,63,69,0,63,58,67],
[69,68,72,66,75,72,68,0,65,67],
[72,73,70,61,67,69,73,66,0,70],
[61,69,60,57,56,67,64,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,62,58,59,54,49,60,64,61],
[76,0,85,65,68,67,76,73,81,74],
[69,46,0,58,54,51,45,65,58,55],
[73,66,73,0,64,58,54,72,60,73],
[72,63,77,67,0,65,68,67,66,72],
[77,64,80,73,66,0,65,65,76,66],
[82,55,86,77,63,66,0,75,72,73],
[71,58,66,59,64,66,56,0,55,66],
[67,50,73,71,65,55,59,76,0,70],
[70,57,76,58,59,65,58,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,53,71,68,71,81,64,69],
[64,0,80,70,80,72,70,76,64,60],
[59,51,0,47,66,61,64,69,54,59],
[78,61,84,0,71,71,69,72,66,62],
[60,51,65,60,0,66,66,67,52,54],
[63,59,70,60,65,0,74,78,62,63],
[60,61,67,62,65,57,0,66,63,63],
[50,55,62,59,64,53,65,0,58,59],
[67,67,77,65,79,69,68,73,0,66],
[62,71,72,69,77,68,68,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,58,46,56,55,63,48,50,51],
[75,0,71,74,72,72,65,69,67,66],
[73,60,0,61,62,64,75,63,49,67],
[85,57,70,0,66,76,77,63,52,57],
[75,59,69,65,0,73,64,60,53,64],
[76,59,67,55,58,0,60,54,48,54],
[68,66,56,54,67,71,0,59,51,54],
[83,62,68,68,71,77,72,0,57,74],
[81,64,82,79,78,83,80,74,0,81],
[80,65,64,74,67,77,77,57,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,74,62,66,70,77,68,63,72],
[54,0,60,64,67,68,60,59,58,64],
[57,71,0,65,71,67,78,61,65,61],
[69,67,66,0,71,78,78,63,61,68],
[65,64,60,60,0,68,66,69,60,63],
[61,63,64,53,63,0,67,59,61,70],
[54,71,53,53,65,64,0,60,55,63],
[63,72,70,68,62,72,71,0,70,65],
[68,73,66,70,71,70,76,61,0,72],
[59,67,70,63,68,61,68,66,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,60,58,62,61,65,68,62,61],
[68,0,65,67,66,73,72,70,64,65],
[71,66,0,67,68,67,63,68,67,67],
[73,64,64,0,62,67,71,69,68,64],
[69,65,63,69,0,69,71,73,67,65],
[70,58,64,64,62,0,56,59,63,58],
[66,59,68,60,60,75,0,68,66,54],
[63,61,63,62,58,72,63,0,65,62],
[69,67,64,63,64,68,65,66,0,62],
[70,66,64,67,66,73,77,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,78,62,73,65,77,91,76,73],
[50,0,61,66,51,66,58,75,71,66],
[53,70,0,76,51,65,71,87,75,67],
[69,65,55,0,62,45,63,82,72,73],
[58,80,80,69,0,65,75,92,77,76],
[66,65,66,86,66,0,77,85,68,63],
[54,73,60,68,56,54,0,82,69,69],
[40,56,44,49,39,46,49,0,51,36],
[55,60,56,59,54,63,62,80,0,61],
[58,65,64,58,55,68,62,95,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,61,69,65,69,61,59,63,65],
[65,0,57,62,69,66,55,68,62,65],
[70,74,0,71,74,74,67,73,70,64],
[62,69,60,0,63,61,54,56,65,58],
[66,62,57,68,0,62,62,67,62,68],
[62,65,57,70,69,0,57,60,58,61],
[70,76,64,77,69,74,0,70,65,66],
[72,63,58,75,64,71,61,0,55,61],
[68,69,61,66,69,73,66,76,0,64],
[66,66,67,73,63,70,65,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,58,58,60,60,65,71,44,55],
[76,0,63,74,67,72,73,83,61,73],
[73,68,0,81,62,82,72,87,61,64],
[73,57,50,0,55,61,69,69,55,50],
[71,64,69,76,0,70,72,77,60,65],
[71,59,49,70,61,0,65,69,66,44],
[66,58,59,62,59,66,0,66,51,54],
[60,48,44,62,54,62,65,0,51,57],
[87,70,70,76,71,65,80,80,0,59],
[76,58,67,81,66,87,77,74,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,65,64,81,65,76,70,81,73],
[52,0,43,71,71,52,61,71,59,64],
[66,88,0,72,67,56,65,74,61,72],
[67,60,59,0,73,48,67,54,64,53],
[50,60,64,58,0,48,56,66,62,61],
[66,79,75,83,83,0,60,69,72,67],
[55,70,66,64,75,71,0,79,68,72],
[61,60,57,77,65,62,52,0,53,60],
[50,72,70,67,69,59,63,78,0,51],
[58,67,59,78,70,64,59,71,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,76,73,82,60,73,82,98,80],
[57,0,53,66,74,68,63,67,68,59],
[55,78,0,63,70,62,57,67,71,57],
[58,65,68,0,68,70,66,66,84,68],
[49,57,61,63,0,63,69,67,68,56],
[71,63,69,61,68,0,62,67,85,65],
[58,68,74,65,62,69,0,66,80,61],
[49,64,64,65,64,64,65,0,68,61],
[33,63,60,47,63,46,51,63,0,60],
[51,72,74,63,75,66,70,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,57,64,65,60,77,61,68],
[65,0,73,76,66,80,65,83,65,75],
[69,58,0,57,55,74,62,80,53,61],
[74,55,74,0,64,66,66,78,55,67],
[67,65,76,67,0,67,71,80,66,70],
[66,51,57,65,64,0,62,74,50,64],
[71,66,69,65,60,69,0,75,65,74],
[54,48,51,53,51,57,56,0,43,63],
[70,66,78,76,65,81,66,88,0,74],
[63,56,70,64,61,67,57,68,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,67,66,65,61,68,71,69,64],
[69,0,66,62,64,63,70,61,71,65],
[64,65,0,58,67,62,65,58,65,60],
[65,69,73,0,64,73,74,61,71,66],
[66,67,64,67,0,64,66,57,65,70],
[70,68,69,58,67,0,74,68,68,75],
[63,61,66,57,65,57,0,56,65,65],
[60,70,73,70,74,63,75,0,70,74],
[62,60,66,60,66,63,66,61,0,72],
[67,66,71,65,61,56,66,57,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,57,52,61,56,57,66,57,44],
[73,0,58,60,67,60,63,66,54,58],
[74,73,0,54,62,66,71,72,62,61],
[79,71,77,0,63,75,70,80,78,66],
[70,64,69,68,0,73,67,76,67,68],
[75,71,65,56,58,0,60,70,61,66],
[74,68,60,61,64,71,0,76,62,65],
[65,65,59,51,55,61,55,0,55,62],
[74,77,69,53,64,70,69,76,0,62],
[87,73,70,65,63,65,66,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,58,69,82,56,68,65,71],
[65,0,55,58,49,76,59,61,63,69],
[67,76,0,74,57,75,76,67,59,75],
[73,73,57,0,62,83,61,65,62,74],
[62,82,74,69,0,83,69,75,65,85],
[49,55,56,48,48,0,64,53,57,61],
[75,72,55,70,62,67,0,63,71,78],
[63,70,64,66,56,78,68,0,60,79],
[66,68,72,69,66,74,60,71,0,73],
[60,62,56,57,46,70,53,52,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,66,65,66,45,87,22,44],
[66,0,88,66,65,87,66,43,65,110],
[65,43,0,87,65,86,66,43,43,88],
[65,65,44,0,65,66,22,65,44,44],
[66,66,66,66,0,65,66,87,88,88],
[65,44,45,65,66,0,44,44,44,45],
[86,65,65,109,65,87,0,65,66,65],
[44,88,88,66,44,87,66,0,66,67],
[109,66,88,87,43,87,65,65,0,88],
[87,21,43,87,43,86,66,64,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,70,55,71,55,67,58,75,58],
[83,0,87,68,75,88,65,70,84,65],
[61,44,0,45,66,71,57,63,68,46],
[76,63,86,0,85,80,63,64,73,76],
[60,56,65,46,0,67,61,71,75,42],
[76,43,60,51,64,0,58,63,73,62],
[64,66,74,68,70,73,0,73,84,63],
[73,61,68,67,60,68,58,0,76,58],
[56,47,63,58,56,58,47,55,0,52],
[73,66,85,55,89,69,68,73,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,65,51,66,60,68,61,67,55],
[74,0,66,64,68,64,77,71,72,68],
[66,65,0,60,57,59,56,75,64,60],
[80,67,71,0,69,65,68,70,70,68],
[65,63,74,62,0,70,62,67,65,66],
[71,67,72,66,61,0,63,73,70,71],
[63,54,75,63,69,68,0,74,67,68],
[70,60,56,61,64,58,57,0,58,63],
[64,59,67,61,66,61,64,73,0,56],
[76,63,71,63,65,60,63,68,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,65,61,53,64,70,62,64,57],
[73,0,72,62,67,72,77,79,81,64],
[66,59,0,65,37,52,63,60,53,64],
[70,69,66,0,56,60,62,76,58,66],
[78,64,94,75,0,96,83,90,76,80],
[67,59,79,71,35,0,74,70,53,58],
[61,54,68,69,48,57,0,65,48,54],
[69,52,71,55,41,61,66,0,59,68],
[67,50,78,73,55,78,83,72,0,70],
[74,67,67,65,51,73,77,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,61,66,64,72,61,64,62],
[65,0,73,58,65,73,70,59,73,75],
[64,58,0,59,67,63,62,48,73,65],
[70,73,72,0,68,58,74,73,77,69],
[65,66,64,63,0,68,71,65,76,56],
[67,58,68,73,63,0,69,65,69,70],
[59,61,69,57,60,62,0,56,77,61],
[70,72,83,58,66,66,75,0,76,63],
[67,58,58,54,55,62,54,55,0,62],
[69,56,66,62,75,61,70,68,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,59,60,65,67,59,56,61,65],
[56,0,54,57,61,56,61,38,50,54],
[72,77,0,67,73,68,70,71,63,77],
[71,74,64,0,72,67,69,60,68,77],
[66,70,58,59,0,59,63,47,59,64],
[64,75,63,64,72,0,68,60,62,67],
[72,70,61,62,68,63,0,60,55,63],
[75,93,60,71,84,71,71,0,69,89],
[70,81,68,63,72,69,76,62,0,72],
[66,77,54,54,67,64,68,42,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,72,79,52,44,53,52,63,43],
[86,0,78,66,53,43,41,52,68,46],
[59,53,0,80,70,58,63,62,57,68],
[52,65,51,0,61,63,50,43,42,42],
[79,78,61,70,0,65,51,53,70,76],
[87,88,73,68,66,0,79,60,50,64],
[78,90,68,81,80,52,0,74,83,66],
[79,79,69,88,78,71,57,0,89,69],
[68,63,74,89,61,81,48,42,0,61],
[88,85,63,89,55,67,65,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,72,58,49,58,71,53,52,59],
[70,0,68,62,57,59,72,60,56,61],
[59,63,0,65,54,61,78,47,52,62],
[73,69,66,0,64,70,81,59,68,75],
[82,74,77,67,0,75,75,59,71,65],
[73,72,70,61,56,0,72,58,55,64],
[60,59,53,50,56,59,0,49,45,53],
[78,71,84,72,72,73,82,0,61,71],
[79,75,79,63,60,76,86,70,0,75],
[72,70,69,56,66,67,78,60,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,48,49,62,55,60,53,53,62],
[69,0,62,63,63,67,70,67,63,65],
[83,69,0,64,68,79,76,66,69,65],
[82,68,67,0,76,78,68,75,65,73],
[69,68,63,55,0,75,67,64,58,71],
[76,64,52,53,56,0,62,62,61,49],
[71,61,55,63,64,69,0,65,57,69],
[78,64,65,56,67,69,66,0,70,66],
[78,68,62,66,73,70,74,61,0,71],
[69,66,66,58,60,82,62,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,38,39,57,19,19,38,0,39],
[112,0,37,39,94,56,37,112,75,95],
[93,94,0,56,75,94,75,93,75,94],
[92,92,75,0,92,74,55,73,74,92],
[74,37,56,39,0,19,19,37,0,57],
[112,75,37,57,112,0,55,92,75,95],
[112,94,56,76,112,76,0,92,77,95],
[93,19,38,58,94,39,39,0,39,58],
[131,56,56,57,131,56,54,92,0,57],
[92,36,37,39,74,36,36,73,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,24,68,41,25,37,50,59,34],
[78,0,43,85,62,43,55,60,53,52],
[107,88,0,86,89,99,64,96,81,70],
[63,46,45,0,56,54,37,89,55,55],
[90,69,42,75,0,81,63,96,80,71],
[106,88,32,77,50,0,70,59,59,68],
[94,76,67,94,68,61,0,94,78,71],
[81,71,35,42,35,72,37,0,71,26],
[72,78,50,76,51,72,53,60,0,44],
[97,79,61,76,60,63,60,105,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,55,50,53,49,50,65,55,58],
[89,0,79,70,63,82,75,77,68,82],
[76,52,0,58,49,59,65,68,64,59],
[81,61,73,0,66,79,72,70,70,59],
[78,68,82,65,0,66,77,81,71,83],
[82,49,72,52,65,0,76,61,65,69],
[81,56,66,59,54,55,0,65,69,70],
[66,54,63,61,50,70,66,0,52,64],
[76,63,67,61,60,66,62,79,0,58],
[73,49,72,72,48,62,61,67,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,51,66,63,53,54,65,65,63],
[69,0,67,64,66,70,57,71,68,67],
[80,64,0,71,68,66,60,63,76,67],
[65,67,60,0,58,62,66,65,71,66],
[68,65,63,73,0,60,62,62,69,72],
[78,61,65,69,71,0,64,71,68,71],
[77,74,71,65,69,67,0,71,68,81],
[66,60,68,66,69,60,60,0,76,62],
[66,63,55,60,62,63,63,55,0,69],
[68,64,64,65,59,60,50,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,73,71,74,74,70,65,65],
[61,0,69,69,69,74,76,65,59,69],
[61,62,0,75,65,72,73,61,65,68],
[58,62,56,0,55,70,70,65,58,70],
[60,62,66,76,0,68,76,64,61,76],
[57,57,59,61,63,0,68,69,61,66],
[57,55,58,61,55,63,0,58,54,62],
[61,66,70,66,67,62,73,0,69,73],
[66,72,66,73,70,70,77,62,0,70],
[66,62,63,61,55,65,69,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,64,62,54,63,68,58,56,60],
[80,0,60,66,60,74,68,74,70,83],
[67,71,0,63,53,64,74,59,72,77],
[69,65,68,0,50,58,61,65,67,69],
[77,71,78,81,0,59,78,75,94,73],
[68,57,67,73,72,0,71,57,73,78],
[63,63,57,70,53,60,0,67,72,75],
[73,57,72,66,56,74,64,0,78,74],
[75,61,59,64,37,58,59,53,0,75],
[71,48,54,62,58,53,56,57,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,65,71,75,90,74,76,81,82],
[58,0,56,60,50,74,61,67,56,64],
[66,75,0,77,63,86,62,73,84,76],
[60,71,54,0,62,78,51,81,54,64],
[56,81,68,69,0,78,53,79,76,84],
[41,57,45,53,53,0,40,64,54,47],
[57,70,69,80,78,91,0,75,71,67],
[55,64,58,50,52,67,56,0,63,61],
[50,75,47,77,55,77,60,68,0,70],
[49,67,55,67,47,84,64,70,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,62,69,66,58,62,59,60,50],
[51,0,56,59,55,42,52,41,45,44],
[69,75,0,70,59,65,64,58,55,66],
[62,72,61,0,69,47,55,55,62,63],
[65,76,72,62,0,50,67,52,57,60],
[73,89,66,84,81,0,71,64,68,63],
[69,79,67,76,64,60,0,52,61,60],
[72,90,73,76,79,67,79,0,69,63],
[71,86,76,69,74,63,70,62,0,71],
[81,87,65,68,71,68,71,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,62,65,70,81,70,67,67,63],
[58,0,71,53,70,70,64,65,60,69],
[69,60,0,58,63,73,62,60,59,62],
[66,78,73,0,76,71,77,76,69,61],
[61,61,68,55,0,68,64,62,58,68],
[50,61,58,60,63,0,63,73,59,60],
[61,67,69,54,67,68,0,65,58,62],
[64,66,71,55,69,58,66,0,54,59],
[64,71,72,62,73,72,73,77,0,66],
[68,62,69,70,63,71,69,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,65,66,64,98,65,82,49,81],
[31,0,63,67,65,65,80,33,80,80],
[66,68,0,51,49,66,65,50,17,64],
[65,64,80,0,97,82,97,65,63,114],
[67,66,82,34,0,68,48,50,49,114],
[33,66,65,49,63,0,65,82,32,80],
[66,51,66,34,83,66,0,68,51,81],
[49,98,81,66,81,49,63,0,81,64],
[82,51,114,68,82,99,80,50,0,114],
[50,51,67,17,17,51,50,67,17,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,65,63,69,67,76,75,72,67],
[73,0,62,67,65,63,71,69,75,55],
[66,69,0,66,70,61,71,67,71,55],
[68,64,65,0,65,60,73,72,71,58],
[62,66,61,66,0,57,60,66,68,51],
[64,68,70,71,74,0,76,70,65,64],
[55,60,60,58,71,55,0,72,61,67],
[56,62,64,59,65,61,59,0,66,59],
[59,56,60,60,63,66,70,65,0,69],
[64,76,76,73,80,67,64,72,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,67,53,74,53,87,76,69],
[66,0,78,66,60,88,58,83,66,72],
[68,53,0,63,59,73,48,77,76,77],
[64,65,68,0,67,83,80,86,79,89],
[78,71,72,64,0,93,62,98,78,83],
[57,43,58,48,38,0,54,81,68,69],
[78,73,83,51,69,77,0,84,88,82],
[44,48,54,45,33,50,47,0,61,71],
[55,65,55,52,53,63,43,70,0,76],
[62,59,54,42,48,62,49,60,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,76,67,82,71,61,65,71,60],
[65,0,72,69,71,73,63,77,77,70],
[55,59,0,65,64,67,69,78,62,60],
[64,62,66,0,62,71,55,66,69,55],
[49,60,67,69,0,65,57,69,66,68],
[60,58,64,60,66,0,53,77,65,53],
[70,68,62,76,74,78,0,73,66,64],
[66,54,53,65,62,54,58,0,68,60],
[60,54,69,62,65,66,65,63,0,63],
[71,61,71,76,63,78,67,71,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,59,54,65,62,63,62,55],
[72,0,64,66,58,62,69,62,74,58],
[66,67,0,61,53,59,67,53,75,66],
[72,65,70,0,52,64,59,65,71,52],
[77,73,78,79,0,59,69,74,80,76],
[66,69,72,67,72,0,73,64,68,67],
[69,62,64,72,62,58,0,62,67,58],
[68,69,78,66,57,67,69,0,68,62],
[69,57,56,60,51,63,64,63,0,46],
[76,73,65,79,55,64,73,69,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,57,59,68,73,58,57,66,72],
[43,0,56,44,47,62,44,47,53,44],
[74,75,0,66,71,67,62,65,62,61],
[72,87,65,0,70,74,75,65,78,83],
[63,84,60,61,0,74,68,69,68,68],
[58,69,64,57,57,0,56,60,71,56],
[73,87,69,56,63,75,0,52,66,66],
[74,84,66,66,62,71,79,0,74,62],
[65,78,69,53,63,60,65,57,0,69],
[59,87,70,48,63,75,65,69,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,65,66,67,69,69,70,68],
[64,0,64,57,72,66,66,61,69,65],
[68,67,0,66,72,68,64,64,70,70],
[66,74,65,0,71,66,69,69,68,69],
[65,59,59,60,0,63,66,55,67,55],
[64,65,63,65,68,0,64,58,63,67],
[62,65,67,62,65,67,0,66,63,65],
[62,70,67,62,76,73,65,0,73,72],
[61,62,61,63,64,68,68,58,0,66],
[63,66,61,62,76,64,66,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,80,94,65,69,68,80,67,87],
[56,0,63,76,66,69,56,65,69,65],
[51,68,0,92,66,71,50,77,61,75],
[37,55,39,0,53,52,30,68,45,56],
[66,65,65,78,0,70,59,82,61,63],
[62,62,60,79,61,0,58,81,52,61],
[63,75,81,101,72,73,0,86,82,75],
[51,66,54,63,49,50,45,0,47,60],
[64,62,70,86,70,79,49,84,0,69],
[44,66,56,75,68,70,56,71,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,70,72,84,77,64,62,68],
[62,0,71,68,58,68,75,57,66,56],
[62,60,0,63,63,74,66,52,55,64],
[61,63,68,0,66,68,69,50,59,60],
[59,73,68,65,0,64,74,57,56,65],
[47,63,57,63,67,0,66,56,59,62],
[54,56,65,62,57,65,0,52,57,57],
[67,74,79,81,74,75,79,0,64,79],
[69,65,76,72,75,72,74,67,0,78],
[63,75,67,71,66,69,74,52,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,77,88,67,77,66,57,88,66],
[78,0,99,89,58,100,66,79,91,57],
[54,32,0,54,55,54,65,68,77,67],
[43,42,77,0,56,68,56,58,99,88],
[64,73,76,75,0,98,64,67,98,64],
[54,31,77,63,33,0,44,57,78,55],
[65,65,66,75,67,87,0,87,76,87],
[74,52,63,73,64,74,44,0,64,98],
[43,40,54,32,33,53,55,67,0,67],
[65,74,64,43,67,76,44,33,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,73,63,60,66,68,67,69],
[66,0,69,77,61,60,64,68,62,70],
[56,62,0,65,57,51,65,62,59,62],
[58,54,66,0,59,56,67,62,68,65],
[68,70,74,72,0,61,64,67,69,74],
[71,71,80,75,70,0,66,65,66,63],
[65,67,66,64,67,65,0,66,65,64],
[63,63,69,69,64,66,65,0,67,67],
[64,69,72,63,62,65,66,64,0,69],
[62,61,69,66,57,68,67,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,72,67,64,74,58,56,68],
[63,0,68,53,68,57,76,56,52,72],
[67,63,0,52,62,63,76,59,66,59],
[59,78,79,0,73,74,78,55,68,71],
[64,63,69,58,0,64,67,51,72,57],
[67,74,68,57,67,0,81,69,61,61],
[57,55,55,53,64,50,0,52,58,64],
[73,75,72,76,80,62,79,0,77,65],
[75,79,65,63,59,70,73,54,0,62],
[63,59,72,60,74,70,67,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,68,69,60,72,72,64,60],
[64,0,77,72,64,60,70,73,63,68],
[59,54,0,69,64,62,57,67,65,62],
[63,59,62,0,65,54,69,70,67,62],
[62,67,67,66,0,69,74,71,77,60],
[71,71,69,77,62,0,75,73,76,63],
[59,61,74,62,57,56,0,64,63,59],
[59,58,64,61,60,58,67,0,67,56],
[67,68,66,64,54,55,68,64,0,58],
[71,63,69,69,71,68,72,75,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,69,66,63,69,60,73,70],
[68,0,58,70,73,67,81,68,65,75],
[70,73,0,71,71,62,84,68,70,73],
[62,61,60,0,65,54,73,60,64,70],
[65,58,60,66,0,72,68,60,58,75],
[68,64,69,77,59,0,69,61,69,75],
[62,50,47,58,63,62,0,58,56,63],
[71,63,63,71,71,70,73,0,67,76],
[58,66,61,67,73,62,75,64,0,73],
[61,56,58,61,56,56,68,55,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,70,70,58,75,60,56,59],
[71,0,76,78,75,60,76,63,57,71],
[68,55,0,65,65,54,61,60,61,66],
[61,53,66,0,70,55,71,61,64,74],
[61,56,66,61,0,58,72,49,51,55],
[73,71,77,76,73,0,85,68,64,79],
[56,55,70,60,59,46,0,52,41,55],
[71,68,71,70,82,63,79,0,73,60],
[75,74,70,67,80,67,90,58,0,62],
[72,60,65,57,76,52,76,71,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,65,60,69,51,63,76,63,65],
[71,0,57,59,60,64,66,66,61,67],
[66,74,0,73,65,64,77,74,64,73],
[71,72,58,0,59,58,72,70,65,66],
[62,71,66,72,0,59,57,65,52,71],
[80,67,67,73,72,0,63,64,66,82],
[68,65,54,59,74,68,0,66,65,69],
[55,65,57,61,66,67,65,0,63,72],
[68,70,67,66,79,65,66,68,0,76],
[66,64,58,65,60,49,62,59,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,84,79,97,83,77,69,74,60],
[56,0,79,69,65,71,62,56,50,70],
[47,52,0,73,68,71,56,57,51,51],
[52,62,58,0,72,65,63,57,46,53],
[34,66,63,59,0,62,48,40,56,49],
[48,60,60,66,69,0,56,38,47,56],
[54,69,75,68,83,75,0,72,68,60],
[62,75,74,74,91,93,59,0,73,74],
[57,81,80,85,75,84,63,58,0,65],
[71,61,80,78,82,75,71,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,78,59,72,63,69,69,62,85],
[62,0,66,54,74,71,67,63,48,62],
[53,65,0,62,66,53,67,68,40,60],
[72,77,69,0,77,70,62,63,68,74],
[59,57,65,54,0,63,59,74,55,71],
[68,60,78,61,68,0,65,67,61,75],
[62,64,64,69,72,66,0,59,61,65],
[62,68,63,68,57,64,72,0,57,70],
[69,83,91,63,76,70,70,74,0,81],
[46,69,71,57,60,56,66,61,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,45,74,49,66,70,61,66,73],
[63,0,45,78,55,58,71,57,75,73],
[86,86,0,84,63,75,96,80,78,85],
[57,53,47,0,52,46,58,49,63,53],
[82,76,68,79,0,65,77,67,79,68],
[65,73,56,85,66,0,87,57,84,81],
[61,60,35,73,54,44,0,56,60,64],
[70,74,51,82,64,74,75,0,75,71],
[65,56,53,68,52,47,71,56,0,68],
[58,58,46,78,63,50,67,60,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,54,55,57,53,56,50,66,48],
[85,0,60,80,93,55,76,85,73,84],
[77,71,0,69,94,61,78,80,75,69],
[76,51,62,0,95,45,47,56,91,62],
[74,38,37,36,0,36,58,50,58,36],
[78,76,70,86,95,0,78,87,98,60],
[75,55,53,84,73,53,0,55,71,60],
[81,46,51,75,81,44,76,0,82,46],
[65,58,56,40,73,33,60,49,0,44],
[83,47,62,69,95,71,71,85,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,66,58,57,71,64,73,60,63],
[75,0,72,66,68,73,75,76,69,61],
[65,59,0,57,63,57,62,63,56,59],
[73,65,74,0,68,73,72,64,65,69],
[74,63,68,63,0,69,63,67,60,61],
[60,58,74,58,62,0,67,59,67,59],
[67,56,69,59,68,64,0,76,58,73],
[58,55,68,67,64,72,55,0,62,68],
[71,62,75,66,71,64,73,69,0,73],
[68,70,72,62,70,72,58,63,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,77,75,50,81,75,73,49,82],
[73,0,56,61,53,72,85,79,61,69],
[54,75,0,74,62,81,87,73,61,62],
[56,70,57,0,68,93,95,61,69,77],
[81,78,69,63,0,85,93,75,69,76],
[50,59,50,38,46,0,67,62,50,69],
[56,46,44,36,38,64,0,56,62,53],
[58,52,58,70,56,69,75,0,56,70],
[82,70,70,62,62,81,69,75,0,65],
[49,62,69,54,55,62,78,61,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,63,51,68,65,63,74,61,62],
[54,0,51,64,60,51,65,61,41,57],
[68,80,0,65,70,71,66,82,64,53],
[80,67,66,0,79,59,62,75,49,60],
[63,71,61,52,0,48,74,63,59,55],
[66,80,60,72,83,0,60,79,69,79],
[68,66,65,69,57,71,0,72,53,63],
[57,70,49,56,68,52,59,0,50,58],
[70,90,67,82,72,62,78,81,0,67],
[69,74,78,71,76,52,68,73,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,73,63,69,63,70,79,67],
[64,0,74,70,66,63,63,67,64,71],
[63,57,0,71,62,53,54,59,61,76],
[58,61,60,0,60,57,52,63,59,73],
[68,65,69,71,0,71,62,65,74,75],
[62,68,78,74,60,0,72,64,64,73],
[68,68,77,79,69,59,0,64,61,75],
[61,64,72,68,66,67,67,0,59,85],
[52,67,70,72,57,67,70,72,0,71],
[64,60,55,58,56,58,56,46,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,72,63,73,69,67,66,75,83],
[63,0,69,57,67,70,65,67,68,78],
[59,62,0,62,68,65,66,59,65,78],
[68,74,69,0,76,74,59,59,74,90],
[58,64,63,55,0,66,60,65,67,89],
[62,61,66,57,65,0,62,51,67,70],
[64,66,65,72,71,69,0,65,65,70],
[65,64,72,72,66,80,66,0,82,76],
[56,63,66,57,64,64,66,49,0,77],
[48,53,53,41,42,61,61,55,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,52,81,56,48,73,44,66,70],
[68,0,67,92,79,48,61,61,67,75],
[79,64,0,89,75,65,78,67,81,86],
[50,39,42,0,49,35,44,39,61,52],
[75,52,56,82,0,65,55,44,61,64],
[83,83,66,96,66,0,62,54,79,76],
[58,70,53,87,76,69,0,62,79,74],
[87,70,64,92,87,77,69,0,89,86],
[65,64,50,70,70,52,52,42,0,78],
[61,56,45,79,67,55,57,45,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,74,68,62,58,70,67,72],
[61,0,76,73,74,70,64,66,80,64],
[65,55,0,72,60,55,61,60,70,62],
[57,58,59,0,67,56,52,59,69,54],
[63,57,71,64,0,62,66,65,67,60],
[69,61,76,75,69,0,66,81,79,61],
[73,67,70,79,65,65,0,70,75,75],
[61,65,71,72,66,50,61,0,65,62],
[64,51,61,62,64,52,56,66,0,66],
[59,67,69,77,71,70,56,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,57,52,59,58,61,52,67,60],
[80,0,86,77,64,83,71,67,77,79],
[74,45,0,55,47,68,57,54,63,72],
[79,54,76,0,56,63,67,60,64,74],
[72,67,84,75,0,76,78,63,83,77],
[73,48,63,68,55,0,67,62,65,60],
[70,60,74,64,53,64,0,53,75,66],
[79,64,77,71,68,69,78,0,75,79],
[64,54,68,67,48,66,56,56,0,70],
[71,52,59,57,54,71,65,52,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,65,87,55,77,77,86,48,66],
[61,0,59,89,56,56,58,68,52,60],
[66,72,0,93,59,72,65,75,69,67],
[44,42,38,0,53,59,72,52,59,63],
[76,75,72,78,0,64,66,76,59,83],
[54,75,59,72,67,0,76,74,55,84],
[54,73,66,59,65,55,0,70,49,71],
[45,63,56,79,55,57,61,0,44,67],
[83,79,62,72,72,76,82,87,0,72],
[65,71,64,68,48,47,60,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,57,53,55,60,58,62,60],
[69,0,71,62,59,66,69,60,59,63],
[73,60,0,61,58,64,61,59,68,70],
[74,69,70,0,58,65,66,64,65,59],
[78,72,73,73,0,80,72,67,65,77],
[76,65,67,66,51,0,67,60,55,70],
[71,62,70,65,59,64,0,65,68,69],
[73,71,72,67,64,71,66,0,72,75],
[69,72,63,66,66,76,63,59,0,71],
[71,68,61,72,54,61,62,56,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,66,86,66,63,21,89,43],
[68,0,23,44,66,44,23,23,46,43],
[65,108,0,44,43,64,65,64,46,65],
[65,87,87,0,66,109,65,43,68,108],
[45,65,88,65,0,43,43,43,45,65],
[65,87,67,22,88,0,64,23,45,65],
[68,108,66,66,88,67,0,44,46,65],
[110,108,67,88,88,108,87,0,90,65],
[42,85,85,63,86,86,85,41,0,85],
[88,88,66,23,66,66,66,66,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,73,82,63,88,77,81,84,76],
[60,0,64,50,72,73,70,69,70,70],
[58,67,0,70,62,78,68,62,67,70],
[49,81,61,0,53,75,59,71,59,62],
[68,59,69,78,0,76,72,66,70,68],
[43,58,53,56,55,0,63,63,67,61],
[54,61,63,72,59,68,0,63,64,67],
[50,62,69,60,65,68,68,0,63,65],
[47,61,64,72,61,64,67,68,0,66],
[55,61,61,69,63,70,64,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,54,64,59,53,48,47,60,67],
[69,0,65,63,64,67,62,54,68,73],
[77,66,0,80,58,71,64,63,70,77],
[67,68,51,0,62,64,56,57,63,75],
[72,67,73,69,0,62,59,69,72,73],
[78,64,60,67,69,0,64,61,68,73],
[83,69,67,75,72,67,0,57,68,77],
[84,77,68,74,62,70,74,0,70,85],
[71,63,61,68,59,63,63,61,0,71],
[64,58,54,56,58,58,54,46,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,74,66,77,66,73,72,69,70],
[69,0,62,60,59,67,66,58,63,65],
[57,69,0,68,63,67,73,57,59,77],
[65,71,63,0,64,62,71,63,65,63],
[54,72,68,67,0,65,63,63,60,65],
[65,64,64,69,66,0,64,58,55,68],
[58,65,58,60,68,67,0,69,58,76],
[59,73,74,68,68,73,62,0,65,77],
[62,68,72,66,71,76,73,66,0,63],
[61,66,54,68,66,63,55,54,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,56,75,66,80,65,73,79,74],
[53,0,63,65,62,71,64,66,85,63],
[75,68,0,67,62,83,73,77,82,79],
[56,66,64,0,62,73,64,70,73,60],
[65,69,69,69,0,69,69,69,79,78],
[51,60,48,58,62,0,56,67,67,59],
[66,67,58,67,62,75,0,66,82,66],
[58,65,54,61,62,64,65,0,73,58],
[52,46,49,58,52,64,49,58,0,46],
[57,68,52,71,53,72,65,73,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,73,72,47,51,54,62,81,63],
[78,0,84,66,77,76,63,80,82,95],
[58,47,0,69,37,50,51,58,62,62],
[59,65,62,0,51,51,55,52,60,61],
[84,54,94,80,0,73,69,65,82,79],
[80,55,81,80,58,0,62,75,78,68],
[77,68,80,76,62,69,0,70,83,82],
[69,51,73,79,66,56,61,0,82,65],
[50,49,69,71,49,53,48,49,0,59],
[68,36,69,70,52,63,49,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,73,51,65,73,81,67,66,62],
[62,0,82,67,72,65,83,82,69,68],
[58,49,0,41,47,63,69,65,52,42],
[80,64,90,0,73,79,77,74,62,63],
[66,59,84,58,0,62,80,70,73,64],
[58,66,68,52,69,0,76,57,63,54],
[50,48,62,54,51,55,0,55,51,36],
[64,49,66,57,61,74,76,0,55,53],
[65,62,79,69,58,68,80,76,0,68],
[69,63,89,68,67,77,95,78,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,70,74,56,57,72,74,76,65],
[59,0,59,57,51,58,61,59,70,64],
[61,72,0,67,63,72,71,57,69,61],
[57,74,64,0,72,79,66,64,63,60],
[75,80,68,59,0,74,69,59,78,69],
[74,73,59,52,57,0,74,61,76,66],
[59,70,60,65,62,57,0,57,64,54],
[57,72,74,67,72,70,74,0,63,60],
[55,61,62,68,53,55,67,68,0,63],
[66,67,70,71,62,65,77,71,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,61,73,61,71,74,62,68,74],
[56,0,65,60,69,67,86,73,66,65],
[70,66,0,67,62,76,70,67,68,57],
[58,71,64,0,56,74,76,67,58,60],
[70,62,69,75,0,72,82,73,73,72],
[60,64,55,57,59,0,75,60,62,65],
[57,45,61,55,49,56,0,61,44,47],
[69,58,64,64,58,71,70,0,66,60],
[63,65,63,73,58,69,87,65,0,66],
[57,66,74,71,59,66,84,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,69,77,65,69,63,69,79],
[67,0,61,64,73,62,65,71,84,85],
[69,70,0,63,64,67,68,69,80,80],
[62,67,68,0,77,65,62,69,72,68],
[54,58,67,54,0,57,54,65,71,77],
[66,69,64,66,74,0,68,76,82,84],
[62,66,63,69,77,63,0,78,80,71],
[68,60,62,62,66,55,53,0,74,71],
[62,47,51,59,60,49,51,57,0,70],
[52,46,51,63,54,47,60,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,72,66,67,73,59,70,65,72],
[66,0,70,56,59,65,67,65,65,66],
[59,61,0,65,58,75,65,67,61,73],
[65,75,66,0,73,72,67,69,64,73],
[64,72,73,58,0,76,64,66,69,75],
[58,66,56,59,55,0,62,69,53,61],
[72,64,66,64,67,69,0,67,69,69],
[61,66,64,62,65,62,64,0,63,52],
[66,66,70,67,62,78,62,68,0,77],
[59,65,58,58,56,70,62,79,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,60,64,62,60,46,52,61,63],
[54,0,53,60,56,65,50,51,55,65],
[71,78,0,83,65,71,71,76,72,83],
[67,71,48,0,58,62,62,57,65,71],
[69,75,66,73,0,63,57,63,67,66],
[71,66,60,69,68,0,65,56,63,66],
[85,81,60,69,74,66,0,65,77,79],
[79,80,55,74,68,75,66,0,66,81],
[70,76,59,66,64,68,54,65,0,69],
[68,66,48,60,65,65,52,50,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,63,67,73,61,64,71,73,78],
[59,0,69,76,56,54,79,79,54,75],
[68,62,0,81,72,68,68,77,61,74],
[64,55,50,0,56,67,58,67,33,57],
[58,75,59,75,0,77,73,83,64,78],
[70,77,63,64,54,0,65,72,72,76],
[67,52,63,73,58,66,0,67,48,79],
[60,52,54,64,48,59,64,0,50,74],
[58,77,70,98,67,59,83,81,0,80],
[53,56,57,74,53,55,52,57,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,51,63,54,55,60,58,60,50],
[68,0,58,75,57,58,72,59,52,60],
[80,73,0,73,59,69,72,66,66,64],
[68,56,58,0,59,59,64,59,55,60],
[77,74,72,72,0,71,71,67,65,67],
[76,73,62,72,60,0,71,69,70,68],
[71,59,59,67,60,60,0,66,67,61],
[73,72,65,72,64,62,65,0,63,66],
[71,79,65,76,66,61,64,68,0,73],
[81,71,67,71,64,63,70,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,68,68,67,64,77,72,66,72],
[61,0,54,67,57,58,65,67,65,69],
[63,77,0,74,63,68,72,65,61,73],
[63,64,57,0,49,57,69,67,61,66],
[64,74,68,82,0,79,70,76,76,78],
[67,73,63,74,52,0,60,57,63,68],
[54,66,59,62,61,71,0,62,56,68],
[59,64,66,64,55,74,69,0,68,70],
[65,66,70,70,55,68,75,63,0,78],
[59,62,58,65,53,63,63,61,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,69,76,62,91,92,68,66,89],
[52,0,63,74,52,76,63,63,69,54],
[62,68,0,84,52,77,78,69,65,53],
[55,57,47,0,65,66,64,49,47,51],
[69,79,79,66,0,69,84,62,59,65],
[40,55,54,65,62,0,52,42,59,62],
[39,68,53,67,47,79,0,39,59,48],
[63,68,62,82,69,89,92,0,66,64],
[65,62,66,84,72,72,72,65,0,78],
[42,77,78,80,66,69,83,67,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,63,61,55,59,68,70,69,61],
[60,0,65,64,59,44,67,54,68,70],
[68,66,0,63,66,66,76,61,64,70],
[70,67,68,0,56,53,64,58,71,64],
[76,72,65,75,0,61,71,64,72,70],
[72,87,65,78,70,0,70,59,76,78],
[63,64,55,67,60,61,0,62,74,69],
[61,77,70,73,67,72,69,0,68,79],
[62,63,67,60,59,55,57,63,0,68],
[70,61,61,67,61,53,62,52,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,69,63,57,64,70,63,74],
[67,0,64,64,68,65,70,74,65,64],
[62,67,0,73,62,59,68,60,55,58],
[62,67,58,0,67,62,66,71,60,66],
[68,63,69,64,0,63,66,72,67,74],
[74,66,72,69,68,0,64,74,69,65],
[67,61,63,65,65,67,0,63,66,69],
[61,57,71,60,59,57,68,0,62,66],
[68,66,76,71,64,62,65,69,0,70],
[57,67,73,65,57,66,62,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,54,48,64,69,49,62,44,68],
[62,0,67,52,71,67,56,68,48,61],
[77,64,0,50,39,64,57,66,43,43],
[83,79,81,0,58,86,69,86,80,75],
[67,60,92,73,0,66,76,77,43,66],
[62,64,67,45,65,0,47,73,44,60],
[82,75,74,62,55,84,0,64,65,67],
[69,63,65,45,54,58,67,0,33,66],
[87,83,88,51,88,87,66,98,0,82],
[63,70,88,56,65,71,64,65,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,74,64,76,71,66,75,76,79],
[58,0,72,63,72,76,65,67,83,75],
[57,59,0,67,67,66,63,72,68,71],
[67,68,64,0,74,68,56,67,73,70],
[55,59,64,57,0,69,56,59,73,75],
[60,55,65,63,62,0,57,69,75,69],
[65,66,68,75,75,74,0,76,83,85],
[56,64,59,64,72,62,55,0,72,75],
[55,48,63,58,58,56,48,59,0,57],
[52,56,60,61,56,62,46,56,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,73,55,61,61,54,51,54,57],
[73,0,76,71,61,71,58,55,65,72],
[58,55,0,77,60,57,63,48,54,49],
[76,60,54,0,62,60,49,49,58,62],
[70,70,71,69,0,62,51,50,62,69],
[70,60,74,71,69,0,56,51,45,52],
[77,73,68,82,80,75,0,65,65,73],
[80,76,83,82,81,80,66,0,63,71],
[77,66,77,73,69,86,66,68,0,64],
[74,59,82,69,62,79,58,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,69,68,77,73,67,55,68],
[64,0,66,64,68,67,72,63,57,67],
[68,65,0,66,70,74,63,66,75,73],
[62,67,65,0,70,71,87,62,71,69],
[63,63,61,61,0,67,72,64,64,66],
[54,64,57,60,64,0,66,69,58,71],
[58,59,68,44,59,65,0,66,52,67],
[64,68,65,69,67,62,65,0,68,58],
[76,74,56,60,67,73,79,63,0,61],
[63,64,58,62,65,60,64,73,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,79,65,85,69,67,74,66,76],
[49,0,59,56,56,54,61,51,58,55],
[52,72,0,66,65,58,55,53,64,66],
[66,75,65,0,74,64,65,51,72,81],
[46,75,66,57,0,55,52,53,58,60],
[62,77,73,67,76,0,61,58,56,68],
[64,70,76,66,79,70,0,63,61,71],
[57,80,78,80,78,73,68,0,69,78],
[65,73,67,59,73,75,70,62,0,75],
[55,76,65,50,71,63,60,53,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,78,70,56,69,71,65,73,65],
[53,0,67,64,58,63,61,59,66,57],
[53,64,0,60,65,68,55,63,70,59],
[61,67,71,0,55,72,61,61,66,65],
[75,73,66,76,0,78,61,78,73,64],
[62,68,63,59,53,0,51,64,75,53],
[60,70,76,70,70,80,0,63,81,66],
[66,72,68,70,53,67,68,0,81,66],
[58,65,61,65,58,56,50,50,0,53],
[66,74,72,66,67,78,65,65,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,66,67,66,70,72,62,69],
[63,0,64,65,64,62,63,63,61,63],
[64,67,0,61,67,62,65,68,62,66],
[65,66,70,0,74,66,69,70,66,81],
[64,67,64,57,0,64,67,69,60,74],
[65,69,69,65,67,0,66,67,62,70],
[61,68,66,62,64,65,0,63,65,65],
[59,68,63,61,62,64,68,0,62,71],
[69,70,69,65,71,69,66,69,0,73],
[62,68,65,50,57,61,66,60,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,66,55,59,58,68,54,65,60],
[75,0,82,67,65,70,69,66,69,66],
[65,49,0,52,58,55,63,63,56,56],
[76,64,79,0,65,67,71,75,70,59],
[72,66,73,66,0,67,69,64,70,64],
[73,61,76,64,64,0,68,67,64,68],
[63,62,68,60,62,63,0,66,61,60],
[77,65,68,56,67,64,65,0,70,67],
[66,62,75,61,61,67,70,61,0,62],
[71,65,75,72,67,63,71,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,44,51,58,47,58,59,57],
[63,0,50,40,62,55,52,60,55,49],
[68,81,0,56,73,58,56,69,65,70],
[87,91,75,0,68,72,61,62,69,76],
[80,69,58,63,0,65,66,70,64,68],
[73,76,73,59,66,0,70,66,70,63],
[84,79,75,70,65,61,0,53,63,76],
[73,71,62,69,61,65,78,0,62,65],
[72,76,66,62,67,61,68,69,0,73],
[74,82,61,55,63,68,55,66,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,89,79,51,65,90,65,71,75],
[77,0,93,85,37,78,70,62,58,86],
[42,38,0,71,46,55,61,50,33,74],
[52,46,60,0,45,57,70,57,41,62],
[80,94,85,86,0,71,83,80,58,79],
[66,53,76,74,60,0,71,72,65,78],
[41,61,70,61,48,60,0,52,32,55],
[66,69,81,74,51,59,79,0,62,60],
[60,73,98,90,73,66,99,69,0,73],
[56,45,57,69,52,53,76,71,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,70,59,79,82,80,69,71],
[70,0,62,72,66,80,76,84,74,73],
[64,69,0,87,73,91,74,73,82,84],
[61,59,44,0,31,54,60,48,42,57],
[72,65,58,100,0,75,80,67,63,77],
[52,51,40,77,56,0,72,59,58,52],
[49,55,57,71,51,59,0,55,36,64],
[51,47,58,83,64,72,76,0,48,50],
[62,57,49,89,68,73,95,83,0,70],
[60,58,47,74,54,79,67,81,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,46,46,59,68,73,70,66,64],
[50,0,41,36,36,51,54,43,41,55],
[85,90,0,64,66,74,75,73,88,82],
[85,95,67,0,78,85,78,56,90,72],
[72,95,65,53,0,58,66,69,78,88],
[63,80,57,46,73,0,63,60,71,73],
[58,77,56,53,65,68,0,58,82,67],
[61,88,58,75,62,71,73,0,82,75],
[65,90,43,41,53,60,49,49,0,63],
[67,76,49,59,43,58,64,56,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,70,61,77,65,78,59,74],
[67,0,77,67,67,82,67,59,66,61],
[62,54,0,58,59,63,55,56,69,48],
[61,64,73,0,61,71,67,68,55,61],
[70,64,72,70,0,76,60,63,55,61],
[54,49,68,60,55,0,55,73,55,52],
[66,64,76,64,71,76,0,82,60,58],
[53,72,75,63,68,58,49,0,61,56],
[72,65,62,76,76,76,71,70,0,65],
[57,70,83,70,70,79,73,75,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,64,68,67,72,78,63,63,81],
[53,0,64,59,53,54,52,55,56,57],
[67,67,0,58,62,54,56,63,65,72],
[63,72,73,0,65,63,68,70,66,71],
[64,78,69,66,0,61,67,60,60,71],
[59,77,77,68,70,0,74,67,64,80],
[53,79,75,63,64,57,0,61,69,77],
[68,76,68,61,71,64,70,0,78,73],
[68,75,66,65,71,67,62,53,0,73],
[50,74,59,60,60,51,54,58,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,37,70,72,59,50,26,57,39],
[68,0,58,71,67,78,66,56,52,57],
[94,73,0,88,83,70,108,56,84,81],
[61,60,43,0,59,52,63,43,44,55],
[59,64,48,72,0,80,83,23,65,51],
[72,53,61,79,51,0,86,51,48,62],
[81,65,23,68,48,45,0,43,41,51],
[105,75,75,88,108,80,88,0,69,54],
[74,79,47,87,66,83,90,62,0,59],
[92,74,50,76,80,69,80,77,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,61,58,64,76,69,65,59,84],
[66,0,73,58,85,78,62,68,72,78],
[70,58,0,68,63,67,58,60,61,68],
[73,73,63,0,78,86,72,78,82,72],
[67,46,68,53,0,65,46,55,68,83],
[55,53,64,45,66,0,57,62,56,68],
[62,69,73,59,85,74,0,67,70,83],
[66,63,71,53,76,69,64,0,74,70],
[72,59,70,49,63,75,61,57,0,71],
[47,53,63,59,48,63,48,61,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,60,74,70,60,60,65,70],
[62,0,63,59,70,58,59,61,65,71],
[64,68,0,59,66,56,55,57,52,59],
[71,72,72,0,70,77,66,68,74,62],
[57,61,65,61,0,63,56,59,71,65],
[61,73,75,54,68,0,68,66,59,67],
[71,72,76,65,75,63,0,64,66,64],
[71,70,74,63,72,65,67,0,72,73],
[66,66,79,57,60,72,65,59,0,70],
[61,60,72,69,66,64,67,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,77,84,55,58,70,66,82,67],
[71,0,61,71,51,65,35,52,82,53],
[54,70,0,68,57,68,43,75,61,54],
[47,60,63,0,55,67,33,54,67,40],
[76,80,74,76,0,64,61,65,81,73],
[73,66,63,64,67,0,52,52,70,44],
[61,96,88,98,70,79,0,67,87,74],
[65,79,56,77,66,79,64,0,69,79],
[49,49,70,64,50,61,44,62,0,55],
[64,78,77,91,58,87,57,52,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,85,65,56,60,57,80,71,79],
[56,0,84,60,57,63,48,73,63,73],
[46,47,0,48,52,48,54,59,53,56],
[66,71,83,0,69,68,65,76,66,78],
[75,74,79,62,0,67,66,71,68,81],
[71,68,83,63,64,0,66,77,74,76],
[74,83,77,66,65,65,0,69,67,71],
[51,58,72,55,60,54,62,0,55,70],
[60,68,78,65,63,57,64,76,0,84],
[52,58,75,53,50,55,60,61,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,60,59,65,67,69,64,65,57],
[74,0,69,66,69,69,71,78,74,64],
[71,62,0,68,73,65,65,65,75,63],
[72,65,63,0,67,65,73,65,64,59],
[66,62,58,64,0,71,69,70,66,67],
[64,62,66,66,60,0,61,62,67,58],
[62,60,66,58,62,70,0,64,69,61],
[67,53,66,66,61,69,67,0,69,53],
[66,57,56,67,65,64,62,62,0,61],
[74,67,68,72,64,73,70,78,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,69,62,63,74,68,68,71],
[67,0,61,70,63,58,74,58,63,62],
[71,70,0,69,69,60,74,73,71,73],
[62,61,62,0,69,53,70,69,64,65],
[69,68,62,62,0,66,70,67,70,65],
[68,73,71,78,65,0,77,73,73,71],
[57,57,57,61,61,54,0,62,56,61],
[63,73,58,62,64,58,69,0,60,59],
[63,68,60,67,61,58,75,71,0,64],
[60,69,58,66,66,60,70,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,55,62,61,70,67,66,64,72],
[69,0,64,61,58,59,62,55,64,63],
[76,67,0,68,70,73,60,63,67,82],
[69,70,63,0,53,63,55,54,60,65],
[70,73,61,78,0,62,69,69,65,71],
[61,72,58,68,69,0,63,61,67,73],
[64,69,71,76,62,68,0,59,63,70],
[65,76,68,77,62,70,72,0,74,71],
[67,67,64,71,66,64,68,57,0,84],
[59,68,49,66,60,58,61,60,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,88,66,66,87,66,87,65,66],
[66,0,88,88,66,87,66,65,66,44],
[43,43,0,66,22,65,65,21,65,43],
[65,43,65,0,65,65,87,43,65,43],
[65,65,109,66,0,65,87,65,65,43],
[44,44,66,66,66,0,66,22,44,66],
[65,65,66,44,44,65,0,43,65,22],
[44,66,110,88,66,109,88,0,66,66],
[66,65,66,66,66,87,66,65,0,44],
[65,87,88,88,88,65,109,65,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,68,65,69,73,74,63,62,74],
[61,0,68,74,66,59,73,62,69,70],
[63,63,0,60,70,60,61,61,61,61],
[66,57,71,0,69,70,71,64,65,64],
[62,65,61,62,0,59,67,66,69,70],
[58,72,71,61,72,0,69,67,72,77],
[57,58,70,60,64,62,0,57,73,71],
[68,69,70,67,65,64,74,0,75,62],
[69,62,70,66,62,59,58,56,0,57],
[57,61,70,67,61,54,60,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,61,66,62,55,66,57,66],
[71,0,67,72,63,62,64,70,61,68],
[73,64,0,74,68,70,59,69,64,69],
[70,59,57,0,56,62,57,64,63,64],
[65,68,63,75,0,63,61,66,67,78],
[69,69,61,69,68,0,64,73,67,72],
[76,67,72,74,70,67,0,70,62,70],
[65,61,62,67,65,58,61,0,68,72],
[74,70,67,68,64,64,69,63,0,74],
[65,63,62,67,53,59,61,59,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,44,38,59,53,34,40,60,47],
[92,0,62,63,83,58,77,87,84,79],
[87,69,0,64,70,64,72,61,86,84],
[93,68,67,0,92,53,78,60,86,64],
[72,48,61,39,0,14,53,54,73,66],
[78,73,67,78,117,0,94,88,79,64],
[97,54,59,53,78,37,0,46,69,67],
[91,44,70,71,77,43,85,0,79,71],
[71,47,45,45,58,52,62,52,0,62],
[84,52,47,67,65,67,64,60,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,55,67,49,63,71,53,54,75],
[56,0,62,59,61,62,66,60,55,75],
[76,69,0,69,68,72,83,76,63,95],
[64,72,62,0,65,72,74,58,67,80],
[82,70,63,66,0,68,85,68,56,76],
[68,69,59,59,63,0,69,64,56,81],
[60,65,48,57,46,62,0,57,47,72],
[78,71,55,73,63,67,74,0,60,74],
[77,76,68,64,75,75,84,71,0,83],
[56,56,36,51,55,50,59,57,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,69,74,65,61,58,69,60],
[64,0,62,68,68,59,66,60,66,57],
[65,69,0,73,81,73,71,68,74,68],
[62,63,58,0,70,64,61,61,63,63],
[57,63,50,61,0,67,54,59,64,64],
[66,72,58,67,64,0,66,67,68,60],
[70,65,60,70,77,65,0,65,69,71],
[73,71,63,70,72,64,66,0,61,63],
[62,65,57,68,67,63,62,70,0,60],
[71,74,63,68,67,71,60,68,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,72,67,70,54,68,67,68],
[64,0,70,74,61,67,62,63,64,53],
[63,61,0,69,58,69,59,59,58,61],
[59,57,62,0,48,67,55,55,56,50],
[64,70,73,83,0,70,65,65,69,65],
[61,64,62,64,61,0,55,60,55,54],
[77,69,72,76,66,76,0,66,60,64],
[63,68,72,76,66,71,65,0,61,56],
[64,67,73,75,62,76,71,70,0,66],
[63,78,70,81,66,77,67,75,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,74,72,63,68,78,72,68],
[61,0,71,82,75,64,82,73,63,66],
[68,60,0,72,73,66,71,76,66,56],
[57,49,59,0,64,53,61,58,66,67],
[59,56,58,67,0,57,68,60,63,65],
[68,67,65,78,74,0,75,63,66,74],
[63,49,60,70,63,56,0,58,72,60],
[53,58,55,73,71,68,73,0,64,59],
[59,68,65,65,68,65,59,67,0,64],
[63,65,75,64,66,57,71,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,62,52,48,47,55,47,62,63],
[81,0,58,53,65,62,68,72,65,79],
[69,73,0,59,64,75,67,48,72,77],
[79,78,72,0,69,59,72,51,65,69],
[83,66,67,62,0,65,78,61,67,74],
[84,69,56,72,66,0,70,57,66,77],
[76,63,64,59,53,61,0,52,52,68],
[84,59,83,80,70,74,79,0,65,81],
[69,66,59,66,64,65,79,66,0,69],
[68,52,54,62,57,54,63,50,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,54,73,72,61,73,74,67],
[63,0,50,49,64,69,67,64,63,56],
[68,81,0,66,78,73,62,74,76,70],
[77,82,65,0,80,83,64,81,79,73],
[58,67,53,51,0,58,65,67,71,58],
[59,62,58,48,73,0,60,80,68,63],
[70,64,69,67,66,71,0,73,81,69],
[58,67,57,50,64,51,58,0,63,54],
[57,68,55,52,60,63,50,68,0,60],
[64,75,61,58,73,68,62,77,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,64,69,53,85,66,76,61,65],
[55,0,60,67,61,75,53,69,68,59],
[67,71,0,61,71,77,70,78,52,55],
[62,64,70,0,55,70,70,78,51,72],
[78,70,60,76,0,78,58,72,50,57],
[46,56,54,61,53,0,63,57,49,61],
[65,78,61,61,73,68,0,76,52,58],
[55,62,53,53,59,74,55,0,49,51],
[70,63,79,80,81,82,79,82,0,68],
[66,72,76,59,74,70,73,80,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,65,64,52,59,58,58,63,54],
[80,0,68,80,65,69,77,69,74,69],
[66,63,0,71,58,56,59,53,66,68],
[67,51,60,0,51,59,60,64,62,53],
[79,66,73,80,0,73,68,65,68,79],
[72,62,75,72,58,0,67,63,73,65],
[73,54,72,71,63,64,0,62,72,71],
[73,62,78,67,66,68,69,0,78,67],
[68,57,65,69,63,58,59,53,0,70],
[77,62,63,78,52,66,60,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,65,68,66,64,61,67,63],
[64,0,62,66,64,57,63,60,68,64],
[60,69,0,67,69,64,59,58,75,62],
[66,65,64,0,66,67,69,61,72,64],
[63,67,62,65,0,68,60,66,64,67],
[65,74,67,64,63,0,66,67,71,61],
[67,68,72,62,71,65,0,70,71,66],
[70,71,73,70,65,64,61,0,61,60],
[64,63,56,59,67,60,60,70,0,52],
[68,67,69,67,64,70,65,71,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,65,73,73,73,60,63,64,54],
[69,0,49,56,59,90,78,75,56,64],
[66,82,0,79,80,64,71,83,66,68],
[58,75,52,0,72,83,61,62,56,72],
[58,72,51,59,0,65,54,56,42,76],
[58,41,67,48,66,0,65,68,61,59],
[71,53,60,70,77,66,0,80,47,63],
[68,56,48,69,75,63,51,0,60,56],
[67,75,65,75,89,70,84,71,0,82],
[77,67,63,59,55,72,68,75,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,63,65,65,64,63,60,64,66],
[74,0,81,73,68,61,84,71,68,70],
[68,50,0,55,53,54,68,52,56,55],
[66,58,76,0,67,61,72,49,64,68],
[66,63,78,64,0,55,76,70,68,69],
[67,70,77,70,76,0,78,64,63,69],
[68,47,63,59,55,53,0,55,56,63],
[71,60,79,82,61,67,76,0,68,66],
[67,63,75,67,63,68,75,63,0,60],
[65,61,76,63,62,62,68,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,55,64,55,60,65,60,71,56],
[80,0,64,75,62,73,76,67,75,87],
[76,67,0,64,62,72,75,75,77,72],
[67,56,67,0,67,69,74,73,75,67],
[76,69,69,64,0,70,72,69,72,69],
[71,58,59,62,61,0,74,66,66,68],
[66,55,56,57,59,57,0,57,63,62],
[71,64,56,58,62,65,74,0,67,67],
[60,56,54,56,59,65,68,64,0,57],
[75,44,59,64,62,63,69,64,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,64,81,56,69,63,52,70,66],
[57,0,63,70,61,66,68,59,71,61],
[67,68,0,67,53,60,57,56,59,61],
[50,61,64,0,52,67,46,42,53,61],
[75,70,78,79,0,77,74,64,71,74],
[62,65,71,64,54,0,64,53,60,49],
[68,63,74,85,57,67,0,54,67,56],
[79,72,75,89,67,78,77,0,78,65],
[61,60,72,78,60,71,64,53,0,63],
[65,70,70,70,57,82,75,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,62,73,65,70,70,69,83],
[60,0,64,61,68,54,66,66,67,64],
[65,67,0,61,76,66,61,63,68,76],
[69,70,70,0,66,64,73,65,71,73],
[58,63,55,65,0,61,64,58,69,67],
[66,77,65,67,70,0,74,70,73,74],
[61,65,70,58,67,57,0,58,61,68],
[61,65,68,66,73,61,73,0,63,69],
[62,64,63,60,62,58,70,68,0,59],
[48,67,55,58,64,57,63,62,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,62,56,64,61,61,66,68,77],
[71,0,68,72,81,70,60,73,73,78],
[69,63,0,66,70,63,66,64,64,81],
[75,59,65,0,71,69,66,65,71,72],
[67,50,61,60,0,63,57,60,59,66],
[70,61,68,62,68,0,64,66,61,71],
[70,71,65,65,74,67,0,72,61,81],
[65,58,67,66,71,65,59,0,65,68],
[63,58,67,60,72,70,70,66,0,72],
[54,53,50,59,65,60,50,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,69,62,52,64,74,71,61],
[68,0,75,69,73,70,69,74,73,65],
[67,56,0,74,67,58,61,64,65,60],
[62,62,57,0,57,50,55,64,64,57],
[69,58,64,74,0,53,63,68,62,64],
[79,61,73,81,78,0,62,76,67,63],
[67,62,70,76,68,69,0,76,79,68],
[57,57,67,67,63,55,55,0,63,58],
[60,58,66,67,69,64,52,68,0,54],
[70,66,71,74,67,68,63,73,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,65,68,77,65,81,67,64,58],
[82,0,68,63,71,52,62,65,74,56],
[66,63,0,61,89,59,64,68,66,54],
[63,68,70,0,75,53,62,68,71,49],
[54,60,42,56,0,47,54,49,69,47],
[66,79,72,78,84,0,76,62,85,68],
[50,69,67,69,77,55,0,76,73,53],
[64,66,63,63,82,69,55,0,77,59],
[67,57,65,60,62,46,58,54,0,64],
[73,75,77,82,84,63,78,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,80,77,77,70,71,67,64,77],
[45,0,64,68,69,67,63,50,55,56],
[51,67,0,55,61,56,57,53,48,62],
[54,63,76,0,74,73,66,51,51,63],
[54,62,70,57,0,63,57,40,41,59],
[61,64,75,58,68,0,67,50,61,61],
[60,68,74,65,74,64,0,58,47,58],
[64,81,78,80,91,81,73,0,66,69],
[67,76,83,80,90,70,84,65,0,63],
[54,75,69,68,72,70,73,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,64,63,61,64,66,67,63,51],
[74,0,60,60,56,68,65,70,63,65],
[67,71,0,67,65,82,72,73,65,72],
[68,71,64,0,62,75,68,63,75,65],
[70,75,66,69,0,74,68,74,65,65],
[67,63,49,56,57,0,61,67,68,66],
[65,66,59,63,63,70,0,76,65,59],
[64,61,58,68,57,64,55,0,57,60],
[68,68,66,56,66,63,66,74,0,59],
[80,66,59,66,66,65,72,71,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,62,54,59,70,54,56,67],
[71,0,72,67,64,66,73,70,75,69],
[72,59,0,59,59,54,64,64,55,67],
[69,64,72,0,59,56,70,70,77,71],
[77,67,72,72,0,61,80,72,78,75],
[72,65,77,75,70,0,71,73,74,66],
[61,58,67,61,51,60,0,61,61,59],
[77,61,67,61,59,58,70,0,69,67],
[75,56,76,54,53,57,70,62,0,66],
[64,62,64,60,56,65,72,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,52,42,30,61,39,49,57,57],
[88,0,69,62,73,85,67,83,77,71],
[79,62,0,50,67,65,56,66,66,84],
[89,69,81,0,84,108,55,82,75,98],
[101,58,64,47,0,73,62,72,53,88],
[70,46,66,23,58,0,40,51,54,58],
[92,64,75,76,69,91,0,72,68,93],
[82,48,65,49,59,80,59,0,80,94],
[74,54,65,56,78,77,63,51,0,87],
[74,60,47,33,43,73,38,37,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,70,66,65,70,67,68,69,63],
[59,0,60,63,59,52,61,65,72,60],
[61,71,0,71,66,63,68,80,72,74],
[65,68,60,0,57,60,56,65,65,57],
[66,72,65,74,0,68,68,67,68,65],
[61,79,68,71,63,0,68,70,67,66],
[64,70,63,75,63,63,0,69,64,69],
[63,66,51,66,64,61,62,0,70,67],
[62,59,59,66,63,64,67,61,0,61],
[68,71,57,74,66,65,62,64,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,64,62,63,61,55,70,58,64],
[78,0,68,64,68,72,67,89,71,63],
[67,63,0,60,61,64,65,65,61,65],
[69,67,71,0,63,63,64,68,68,74],
[68,63,70,68,0,53,58,75,62,64],
[70,59,67,68,78,0,66,66,71,71],
[76,64,66,67,73,65,0,74,67,56],
[61,42,66,63,56,65,57,0,63,58],
[73,60,70,63,69,60,64,68,0,63],
[67,68,66,57,67,60,75,73,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,55,44,53,56,56,50,47,61],
[71,0,56,46,47,58,61,49,42,60],
[76,75,0,54,72,61,72,66,59,69],
[87,85,77,0,78,82,57,70,50,77],
[78,84,59,53,0,83,62,65,68,80],
[75,73,70,49,48,0,63,67,59,71],
[75,70,59,74,69,68,0,64,47,74],
[81,82,65,61,66,64,67,0,59,89],
[84,89,72,81,63,72,84,72,0,77],
[70,71,62,54,51,60,57,42,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,67,85,72,71,55,91,83,84],
[39,0,69,59,48,36,47,47,30,40],
[64,62,0,56,74,53,54,53,45,57],
[46,72,75,0,72,64,64,63,82,84],
[59,83,57,59,0,56,76,56,58,49],
[60,95,78,67,75,0,75,94,77,48],
[76,84,77,67,55,56,0,64,74,66],
[40,84,78,68,75,37,67,0,66,49],
[48,101,86,49,73,54,57,65,0,76],
[47,91,74,47,82,83,65,82,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,85,66,78,78,78,85,66],
[69,0,68,75,61,77,61,55,87,65],
[61,63,0,66,58,73,43,69,82,61],
[46,56,65,0,50,47,58,47,65,55],
[65,70,73,81,0,87,72,69,77,65],
[53,54,58,84,44,0,51,51,68,60],
[53,70,88,73,59,80,0,68,74,84],
[53,76,62,84,62,80,63,0,83,61],
[46,44,49,66,54,63,57,48,0,49],
[65,66,70,76,66,71,47,70,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,71,73,76,72,81,81,69,62],
[48,0,58,61,57,60,67,70,62,62],
[60,73,0,64,69,51,71,70,70,56],
[58,70,67,0,61,54,69,60,69,69],
[55,74,62,70,0,48,68,69,79,74],
[59,71,80,77,83,0,78,75,75,78],
[50,64,60,62,63,53,0,62,59,62],
[50,61,61,71,62,56,69,0,72,70],
[62,69,61,62,52,56,72,59,0,62],
[69,69,75,62,57,53,69,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,81,63,78,75,73,72,69,66],
[62,0,65,70,67,75,69,66,67,70],
[50,66,0,66,64,63,65,76,66,58],
[68,61,65,0,70,60,60,73,56,62],
[53,64,67,61,0,68,62,64,70,60],
[56,56,68,71,63,0,68,70,61,63],
[58,62,66,71,69,63,0,69,60,75],
[59,65,55,58,67,61,62,0,60,62],
[62,64,65,75,61,70,71,71,0,55],
[65,61,73,69,71,68,56,69,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,66,70,77,75,56,67,83,80],
[48,0,60,58,63,57,59,66,78,67],
[65,71,0,69,77,65,60,58,74,71],
[61,73,62,0,78,59,54,62,67,69],
[54,68,54,53,0,53,58,59,68,62],
[56,74,66,72,78,0,69,73,73,71],
[75,72,71,77,73,62,0,73,77,76],
[64,65,73,69,72,58,58,0,72,64],
[48,53,57,64,63,58,54,59,0,59],
[51,64,60,62,69,60,55,67,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,66,0,23,44,87,21,21,43],
[86,0,64,65,66,65,65,42,43,64],
[65,67,0,44,67,67,44,43,44,22],
[131,66,87,0,44,66,87,65,44,87],
[108,65,64,87,0,87,87,64,65,43],
[87,66,64,65,44,0,66,43,43,43],
[44,66,87,44,44,65,0,44,44,22],
[110,89,88,66,67,88,87,0,87,43],
[110,88,87,87,66,88,87,44,0,66],
[88,67,109,44,88,88,109,88,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,68,56,59,52,54,53,57,54],
[74,0,73,75,63,58,71,69,72,71],
[63,58,0,64,56,56,60,54,65,66],
[75,56,67,0,63,60,61,65,67,60],
[72,68,75,68,0,56,67,74,70,67],
[79,73,75,71,75,0,78,72,73,65],
[77,60,71,70,64,53,0,63,58,57],
[78,62,77,66,57,59,68,0,68,60],
[74,59,66,64,61,58,73,63,0,58],
[77,60,65,71,64,66,74,71,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,50,72,80,69,52,71,62,44],
[70,0,60,62,71,53,79,61,78,78],
[81,71,0,89,81,72,80,63,72,53],
[59,69,42,0,70,60,61,79,62,51],
[51,60,50,61,0,43,61,70,62,51],
[62,78,59,71,88,0,70,89,71,61],
[79,52,51,70,70,61,0,53,70,51],
[60,70,68,52,61,42,78,0,78,44],
[69,53,59,69,69,60,61,53,0,34],
[87,53,78,80,80,70,80,87,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,73,60,67,72,70,63,68,66],
[68,0,74,64,67,68,65,62,64,75],
[58,57,0,59,63,64,63,58,60,63],
[71,67,72,0,71,73,65,68,71,68],
[64,64,68,60,0,62,66,59,59,67],
[59,63,67,58,69,0,68,66,65,61],
[61,66,68,66,65,63,0,65,66,67],
[68,69,73,63,72,65,66,0,65,71],
[63,67,71,60,72,66,65,66,0,70],
[65,56,68,63,64,70,64,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,77,77,79,73,77,50,74,73],
[54,0,70,72,82,91,66,56,80,69],
[54,61,0,63,75,78,76,60,90,72],
[54,59,68,0,72,72,66,55,68,72],
[52,49,56,59,0,68,46,61,75,65],
[58,40,53,59,63,0,76,56,66,72],
[54,65,55,65,85,55,0,75,85,72],
[81,75,71,76,70,75,56,0,90,81],
[57,51,41,63,56,65,46,41,0,54],
[58,62,59,59,66,59,59,50,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,60,64,59,62,61,77,66,68],
[57,0,60,59,53,63,61,70,60,58],
[71,71,0,60,62,70,68,77,65,62],
[67,72,71,0,67,68,65,75,60,69],
[72,78,69,64,0,64,60,77,65,74],
[69,68,61,63,67,0,62,68,67,62],
[70,70,63,66,71,69,0,75,65,67],
[54,61,54,56,54,63,56,0,57,66],
[65,71,66,71,66,64,66,74,0,67],
[63,73,69,62,57,69,64,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,65,66,52,56,59,57,60,59],
[71,0,63,71,66,70,63,75,64,63],
[66,68,0,68,63,60,56,67,68,63],
[65,60,63,0,71,64,66,68,65,61],
[79,65,68,60,0,63,63,73,66,63],
[75,61,71,67,68,0,63,66,71,60],
[72,68,75,65,68,68,0,78,68,66],
[74,56,64,63,58,65,53,0,66,65],
[71,67,63,66,65,60,63,65,0,62],
[72,68,68,70,68,71,65,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,61,76,64,79,75,69,71,66],
[58,0,62,73,66,74,70,70,72,69],
[70,69,0,73,73,75,74,59,73,71],
[55,58,58,0,58,52,72,62,63,65],
[67,65,58,73,0,70,72,61,55,72],
[52,57,56,79,61,0,62,66,67,67],
[56,61,57,59,59,69,0,56,63,67],
[62,61,72,69,70,65,75,0,71,66],
[60,59,58,68,76,64,68,60,0,65],
[65,62,60,66,59,64,64,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,66,66,59,67,69,63,70,59],
[58,0,59,48,56,59,62,64,68,69],
[65,72,0,62,60,64,69,72,70,62],
[65,83,69,0,70,67,70,71,79,70],
[72,75,71,61,0,78,71,76,74,75],
[64,72,67,64,53,0,65,59,79,67],
[62,69,62,61,60,66,0,58,70,70],
[68,67,59,60,55,72,73,0,67,66],
[61,63,61,52,57,52,61,64,0,60],
[72,62,69,61,56,64,61,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,67,63,73,72,70,72,75,70],
[61,0,58,58,68,73,68,66,74,65],
[64,73,0,69,78,72,72,72,82,61],
[68,73,62,0,70,76,69,68,77,64],
[58,63,53,61,0,67,64,61,65,62],
[59,58,59,55,64,0,64,62,64,61],
[61,63,59,62,67,67,0,70,67,67],
[59,65,59,63,70,69,61,0,79,62],
[56,57,49,54,66,67,64,52,0,54],
[61,66,70,67,69,70,64,69,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,70,61,63,62,60,68,59,59],
[68,0,77,67,67,67,68,68,59,62],
[61,54,0,62,63,65,61,57,63,56],
[70,64,69,0,65,64,71,66,67,65],
[68,64,68,66,0,55,71,63,61,67],
[69,64,66,67,76,0,70,57,61,65],
[71,63,70,60,60,61,0,63,54,56],
[63,63,74,65,68,74,68,0,66,64],
[72,72,68,64,70,70,77,65,0,68],
[72,69,75,66,64,66,75,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,55,52,54,58,58,55,62,53],
[70,0,51,58,53,60,65,72,67,63],
[76,80,0,70,73,73,70,71,63,66],
[79,73,61,0,62,66,72,72,66,72],
[77,78,58,69,0,77,80,63,65,65],
[73,71,58,65,54,0,81,63,57,53],
[73,66,61,59,51,50,0,57,58,56],
[76,59,60,59,68,68,74,0,63,68],
[69,64,68,65,66,74,73,68,0,60],
[78,68,65,59,66,78,75,63,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,58,62,71,63,68,69,64],
[67,0,74,66,63,58,61,56,72,64],
[62,57,0,53,55,53,61,65,63,63],
[73,65,78,0,62,64,63,70,68,72],
[69,68,76,69,0,65,68,70,79,81],
[60,73,78,67,66,0,79,71,73,70],
[68,70,70,68,63,52,0,71,79,64],
[63,75,66,61,61,60,60,0,57,76],
[62,59,68,63,52,58,52,74,0,67],
[67,67,68,59,50,61,67,55,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,79,56,61,65,65,69,49],
[61,0,63,68,48,59,58,64,60,47],
[61,68,0,70,57,64,67,69,63,56],
[52,63,61,0,64,59,63,70,67,47],
[75,83,74,67,0,68,65,72,70,68],
[70,72,67,72,63,0,62,71,64,61],
[66,73,64,68,66,69,0,78,67,54],
[66,67,62,61,59,60,53,0,60,40],
[62,71,68,64,61,67,64,71,0,50],
[82,84,75,84,63,70,77,91,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,56,69,93,70,68,84,70,74],
[57,0,58,53,76,60,70,71,64,59],
[75,73,0,65,91,60,76,78,73,73],
[62,78,66,0,83,75,72,77,73,82],
[38,55,40,48,0,58,55,65,57,56],
[61,71,71,56,73,0,65,66,63,76],
[63,61,55,59,76,66,0,54,58,67],
[47,60,53,54,66,65,77,0,68,64],
[61,67,58,58,74,68,73,63,0,69],
[57,72,58,49,75,55,64,67,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,71,65,65,66,75,71,72],
[61,0,65,70,60,68,68,64,65,66],
[68,66,0,70,64,68,66,70,75,60],
[60,61,61,0,62,68,55,63,66,58],
[66,71,67,69,0,72,65,83,69,64],
[66,63,63,63,59,0,60,76,66,58],
[65,63,65,76,66,71,0,74,65,69],
[56,67,61,68,48,55,57,0,64,65],
[60,66,56,65,62,65,66,67,0,66],
[59,65,71,73,67,73,62,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,72,60,73,73,49,49,60],
[58,0,48,60,48,60,70,50,86,79],
[58,83,0,55,93,80,79,69,70,79],
[59,71,76,0,83,72,85,64,74,91],
[71,83,38,48,0,86,84,88,71,82],
[58,71,51,59,45,0,60,60,74,82],
[58,61,52,46,47,71,0,47,61,58],
[82,81,62,67,43,71,84,0,71,67],
[82,45,61,57,60,57,70,60,0,69],
[71,52,52,40,49,49,73,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,68,68,70,71,71,83,54,76],
[57,0,52,65,61,71,61,70,46,58],
[63,79,0,67,63,74,80,83,59,69],
[63,66,64,0,69,77,82,74,61,66],
[61,70,68,62,0,79,77,86,71,72],
[60,60,57,54,52,0,72,70,58,66],
[60,70,51,49,54,59,0,63,57,64],
[48,61,48,57,45,61,68,0,60,61],
[77,85,72,70,60,73,74,71,0,73],
[55,73,62,65,59,65,67,70,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,72,68,74,73,62,71,68,53],
[62,0,67,68,70,74,68,67,66,60],
[59,64,0,56,53,57,46,61,57,41],
[63,63,75,0,65,54,63,58,57,52],
[57,61,78,66,0,63,67,54,59,49],
[58,57,74,77,68,0,47,66,64,50],
[69,63,85,68,64,84,0,71,61,67],
[60,64,70,73,77,65,60,0,60,49],
[63,65,74,74,72,67,70,71,0,53],
[78,71,90,79,82,81,64,82,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,66,65,66,66,43,88,88,66],
[65,0,21,66,87,45,22,87,88,45],
[65,110,0,87,108,45,65,87,89,67],
[66,65,44,0,44,23,42,44,44,23],
[65,44,23,87,0,45,43,66,67,45],
[65,86,86,108,86,0,86,65,86,67],
[88,109,66,89,88,45,0,88,110,67],
[43,44,44,87,65,66,43,0,66,66],
[43,43,42,87,64,45,21,65,0,23],
[65,86,64,108,86,64,64,65,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,68,80,64,79,76,90,90,85],
[52,0,67,80,57,78,60,79,86,93],
[63,64,0,83,66,62,60,88,75,83],
[51,51,48,0,56,58,40,56,72,76],
[67,74,65,75,0,65,60,78,93,88],
[52,53,69,73,66,0,62,69,88,86],
[55,71,71,91,71,69,0,83,86,92],
[41,52,43,75,53,62,48,0,69,81],
[41,45,56,59,38,43,45,62,0,72],
[46,38,48,55,43,45,39,50,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,68,66,65,60,67,65,55,54],
[62,0,61,70,67,64,61,65,67,60],
[63,70,0,70,75,66,60,76,67,57],
[65,61,61,0,61,57,57,66,61,62],
[66,64,56,70,0,74,58,60,61,58],
[71,67,65,74,57,0,63,72,62,62],
[64,70,71,74,73,68,0,72,69,64],
[66,66,55,65,71,59,59,0,62,61],
[76,64,64,70,70,69,62,69,0,67],
[77,71,74,69,73,69,67,70,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,55,62,59,51,63,67,65,56],
[79,0,74,69,72,73,72,78,72,62],
[76,57,0,71,70,75,82,88,72,64],
[69,62,60,0,58,55,55,74,63,57],
[72,59,61,73,0,59,64,71,73,54],
[80,58,56,76,72,0,68,71,70,67],
[68,59,49,76,67,63,0,71,64,66],
[64,53,43,57,60,60,60,0,63,47],
[66,59,59,68,58,61,67,68,0,58],
[75,69,67,74,77,64,65,84,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,69,64,71,81,77,73,60],
[65,0,69,60,57,66,80,68,57,55],
[61,62,0,73,66,61,62,68,51,58],
[62,71,58,0,82,78,78,69,65,62],
[67,74,65,49,0,60,76,63,67,45],
[60,65,70,53,71,0,73,72,62,65],
[50,51,69,53,55,58,0,51,53,51],
[54,63,63,62,68,59,80,0,56,53],
[58,74,80,66,64,69,78,75,0,71],
[71,76,73,69,86,66,80,78,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,72,78,77,75,71,77,73,63],
[57,0,59,64,69,73,67,66,55,68],
[59,72,0,71,73,74,63,59,63,51],
[53,67,60,0,62,63,62,64,56,56],
[54,62,58,69,0,63,56,59,55,62],
[56,58,57,68,68,0,63,59,54,56],
[60,64,68,69,75,68,0,70,66,69],
[54,65,72,67,72,72,61,0,59,62],
[58,76,68,75,76,77,65,72,0,71],
[68,63,80,75,69,75,62,69,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,56,51,63,59,52,64,68,63],
[77,0,62,64,68,66,68,73,73,72],
[75,69,0,67,70,57,47,62,71,77],
[80,67,64,0,79,79,61,82,64,76],
[68,63,61,52,0,66,54,72,70,73],
[72,65,74,52,65,0,59,72,68,80],
[79,63,84,70,77,72,0,94,88,82],
[67,58,69,49,59,59,37,0,56,56],
[63,58,60,67,61,63,43,75,0,66],
[68,59,54,55,58,51,49,75,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,30,49,59,84,59,71,66,57],
[72,0,55,47,75,90,47,61,73,89],
[101,76,0,68,67,77,70,89,58,76],
[82,84,63,0,68,81,63,77,65,80],
[72,56,64,63,0,82,55,69,65,79],
[47,41,54,50,49,0,42,46,56,58],
[72,84,61,68,76,89,0,73,89,76],
[60,70,42,54,62,85,58,0,70,78],
[65,58,73,66,66,75,42,61,0,75],
[74,42,55,51,52,73,55,53,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,76,68,58,76,70,68,68,51],
[64,0,67,69,57,82,72,67,67,49],
[55,64,0,80,71,71,88,70,63,55],
[63,62,51,0,63,78,71,86,62,51],
[73,74,60,68,0,67,62,75,56,47],
[55,49,60,53,64,0,62,60,59,62],
[61,59,43,60,69,69,0,75,57,66],
[63,64,61,45,56,71,56,0,59,55],
[63,64,68,69,75,72,74,72,0,54],
[80,82,76,80,84,69,65,76,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,62,61,60,55,64,55,66,63],
[76,0,66,72,74,61,71,66,78,67],
[69,65,0,67,63,63,74,60,66,67],
[70,59,64,0,64,60,56,57,67,67],
[71,57,68,67,0,61,69,62,68,72],
[76,70,68,71,70,0,76,65,70,73],
[67,60,57,75,62,55,0,59,56,66],
[76,65,71,74,69,66,72,0,76,71],
[65,53,65,64,63,61,75,55,0,59],
[68,64,64,64,59,58,65,60,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,61,74,59,52,66,67,73,58],
[69,0,59,66,63,61,71,67,68,54],
[70,72,0,85,67,65,77,73,74,67],
[57,65,46,0,55,54,63,73,66,53],
[72,68,64,76,0,70,69,71,78,66],
[79,70,66,77,61,0,70,75,76,65],
[65,60,54,68,62,61,0,81,69,65],
[64,64,58,58,60,56,50,0,61,52],
[58,63,57,65,53,55,62,70,0,54],
[73,77,64,78,65,66,66,79,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,68,68,70,66,81,72,66,62],
[61,0,74,81,62,58,88,67,71,67],
[63,57,0,68,59,61,74,59,61,60],
[63,50,63,0,60,55,66,54,58,51],
[61,69,72,71,0,63,70,63,68,72],
[65,73,70,76,68,0,86,59,69,63],
[50,43,57,65,61,45,0,51,49,59],
[59,64,72,77,68,72,80,0,64,62],
[65,60,70,73,63,62,82,67,0,64],
[69,64,71,80,59,68,72,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,67,68,74,72,68,70,73,62],
[55,0,57,68,61,59,60,65,68,55],
[64,74,0,69,68,77,78,68,69,71],
[63,63,62,0,67,69,65,63,70,61],
[57,70,63,64,0,55,68,62,64,58],
[59,72,54,62,76,0,65,73,70,65],
[63,71,53,66,63,66,0,65,63,60],
[61,66,63,68,69,58,66,0,68,69],
[58,63,62,61,67,61,68,63,0,61],
[69,76,60,70,73,66,71,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,73,63,64,61,72,61,62,68],
[62,0,72,57,58,63,64,68,62,68],
[58,59,0,53,46,53,75,58,58,68],
[68,74,78,0,66,65,83,68,67,71],
[67,73,85,65,0,70,74,74,64,68],
[70,68,78,66,61,0,84,60,65,78],
[59,67,56,48,57,47,0,60,46,64],
[70,63,73,63,57,71,71,0,61,76],
[69,69,73,64,67,66,85,70,0,68],
[63,63,63,60,63,53,67,55,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,61,64,58,66,65,65,71,59],
[57,0,63,56,47,59,58,63,48,61],
[70,68,0,60,66,70,77,72,60,72],
[67,75,71,0,64,72,76,74,67,72],
[73,84,65,67,0,70,71,68,64,84],
[65,72,61,59,61,0,67,60,58,68],
[66,73,54,55,60,64,0,63,57,66],
[66,68,59,57,63,71,68,0,60,63],
[60,83,71,64,67,73,74,71,0,66],
[72,70,59,59,47,63,65,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,61,46,66,56,64,65,62,55],
[74,0,65,56,71,70,58,59,71,65],
[70,66,0,57,72,60,75,58,79,70],
[85,75,74,0,83,64,80,68,87,82],
[65,60,59,48,0,54,63,53,80,61],
[75,61,71,67,77,0,65,71,73,73],
[67,73,56,51,68,66,0,59,69,61],
[66,72,73,63,78,60,72,0,82,68],
[69,60,52,44,51,58,62,49,0,68],
[76,66,61,49,70,58,70,63,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,66,55,56,59,55,62,71,42],
[63,0,63,44,55,57,59,49,62,41],
[65,68,0,58,69,67,61,67,67,53],
[76,87,73,0,83,62,73,77,75,76],
[75,76,62,48,0,53,67,76,62,70],
[72,74,64,69,78,0,66,69,69,58],
[76,72,70,58,64,65,0,66,64,63],
[69,82,64,54,55,62,65,0,64,64],
[60,69,64,56,69,62,67,67,0,56],
[89,90,78,55,61,73,68,67,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,67,67,56,64,62,54,63,63],
[68,0,54,81,57,53,82,58,63,61],
[64,77,0,79,70,62,86,68,61,71],
[64,50,52,0,66,57,63,61,53,52],
[75,74,61,65,0,53,67,63,70,71],
[67,78,69,74,78,0,78,70,56,69],
[69,49,45,68,64,53,0,45,50,60],
[77,73,63,70,68,61,86,0,55,67],
[68,68,70,78,61,75,81,76,0,63],
[68,70,60,79,60,62,71,64,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,68,70,69,60,61,81,63],
[64,0,66,62,54,56,58,62,71,66],
[67,65,0,72,61,63,58,60,72,64],
[63,69,59,0,58,65,59,69,61,64],
[61,77,70,73,0,65,62,69,67,65],
[62,75,68,66,66,0,67,64,69,61],
[71,73,73,72,69,64,0,67,77,72],
[70,69,71,62,62,67,64,0,70,67],
[50,60,59,70,64,62,54,61,0,57],
[68,65,67,67,66,70,59,64,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,63,64,63,60,66,56,60],
[63,0,62,60,62,63,61,67,57,61],
[73,69,0,65,71,58,58,66,59,58],
[68,71,66,0,78,62,62,65,62,66],
[67,69,60,53,0,50,54,55,57,58],
[68,68,73,69,81,0,72,65,66,75],
[71,70,73,69,77,59,0,57,63,68],
[65,64,65,66,76,66,74,0,68,69],
[75,74,72,69,74,65,68,63,0,68],
[71,70,73,65,73,56,63,62,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,72,67,56,66,81,48,65,44],
[78,0,94,81,79,63,75,68,77,62],
[59,37,0,60,67,77,69,52,66,41],
[64,50,71,0,65,59,74,55,68,41],
[75,52,64,66,0,61,65,53,60,55],
[65,68,54,72,70,0,69,66,63,64],
[50,56,62,57,66,62,0,61,56,47],
[83,63,79,76,78,65,70,0,60,73],
[66,54,65,63,71,68,75,71,0,64],
[87,69,90,90,76,67,84,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,76,59,68,59,76,76,83,60],
[66,0,67,78,65,70,77,74,73,65],
[55,64,0,57,65,61,60,76,69,60],
[72,53,74,0,72,67,60,71,73,61],
[63,66,66,59,0,62,59,74,73,61],
[72,61,70,64,69,0,71,75,66,68],
[55,54,71,71,72,60,0,74,71,52],
[55,57,55,60,57,56,57,0,69,51],
[48,58,62,58,58,65,60,62,0,54],
[71,66,71,70,70,63,79,80,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,60,49,61,55,62,51,57],
[67,0,55,63,64,63,70,70,59,61],
[71,76,0,56,68,67,72,67,57,69],
[71,68,75,0,75,72,65,64,63,64],
[82,67,63,56,0,67,71,64,65,67],
[70,68,64,59,64,0,62,70,69,69],
[76,61,59,66,60,69,0,64,54,63],
[69,61,64,67,67,61,67,0,59,62],
[80,72,74,68,66,62,77,72,0,71],
[74,70,62,67,64,62,68,69,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,67,66,50,50,66,67,50],
[66,0,66,83,50,65,33,65,82,34],
[66,65,0,50,67,66,66,82,83,50],
[64,48,81,0,50,81,50,82,50,67],
[65,81,64,81,0,81,64,80,83,49],
[81,66,65,50,50,0,34,66,67,34],
[81,98,65,81,67,97,0,65,116,50],
[65,66,49,49,51,65,66,0,67,51],
[64,49,48,81,48,64,15,64,0,32],
[81,97,81,64,82,97,81,80,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,69,68,69,66,65,73,64,70],
[54,0,65,59,61,59,58,61,62,61],
[62,66,0,75,71,61,64,65,60,72],
[63,72,56,0,58,58,71,72,65,59],
[62,70,60,73,0,66,64,68,74,67],
[65,72,70,73,65,0,65,71,75,75],
[66,73,67,60,67,66,0,65,68,77],
[58,70,66,59,63,60,66,0,62,72],
[67,69,71,66,57,56,63,69,0,66],
[61,70,59,72,64,56,54,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,50,75,56,52,58,77,56,94],
[62,0,51,69,55,55,45,50,50,87],
[81,80,0,89,67,67,60,68,65,91],
[56,62,42,0,52,60,48,61,54,79],
[75,76,64,79,0,63,65,73,75,87],
[79,76,64,71,68,0,74,83,81,87],
[73,86,71,83,66,57,0,80,75,97],
[54,81,63,70,58,48,51,0,50,77],
[75,81,66,77,56,50,56,81,0,89],
[37,44,40,52,44,44,34,54,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,59,56,79,72,51,61,58,70],
[65,0,66,77,94,61,68,66,71,74],
[72,65,0,65,105,79,61,62,76,67],
[75,54,66,0,85,75,52,62,73,61],
[52,37,26,46,0,52,35,42,55,42],
[59,70,52,56,79,0,55,57,62,73],
[80,63,70,79,96,76,0,63,63,70],
[70,65,69,69,89,74,68,0,74,81],
[73,60,55,58,76,69,68,57,0,63],
[61,57,64,70,89,58,61,50,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,54,62,63,74,56,57,66],
[71,0,67,60,61,68,74,65,67,64],
[68,64,0,63,61,60,66,61,63,63],
[77,71,68,0,70,67,76,67,72,62],
[69,70,70,61,0,69,70,71,63,69],
[68,63,71,64,62,0,73,69,72,67],
[57,57,65,55,61,58,0,56,59,58],
[75,66,70,64,60,62,75,0,77,69],
[74,64,68,59,68,59,72,54,0,61],
[65,67,68,69,62,64,73,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,69,69,69,79,53,71,58,66],
[72,0,55,77,72,63,59,62,61,57],
[62,76,0,62,64,68,59,69,64,58],
[62,54,69,0,66,62,53,53,53,48],
[62,59,67,65,0,58,59,62,61,48],
[52,68,63,69,73,0,56,61,59,63],
[78,72,72,78,72,75,0,69,61,66],
[60,69,62,78,69,70,62,0,60,68],
[73,70,67,78,70,72,70,71,0,65],
[65,74,73,83,83,68,65,63,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,61,64,58,51,66,76,53],
[71,0,69,78,70,65,80,59,83,66],
[71,62,0,69,64,66,56,64,76,84],
[70,53,62,0,59,60,52,66,65,74],
[67,61,67,72,0,56,61,63,71,58],
[73,66,65,71,75,0,61,61,66,64],
[80,51,75,79,70,70,0,73,66,73],
[65,72,67,65,68,70,58,0,74,68],
[55,48,55,66,60,65,65,57,0,51],
[78,65,47,57,73,67,58,63,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,67,58,63,63,50,63,66,66],
[77,0,71,61,76,68,65,77,79,66],
[64,60,0,49,73,45,46,57,65,58],
[73,70,82,0,79,70,63,70,79,67],
[68,55,58,52,0,54,55,70,65,68],
[68,63,86,61,77,0,57,59,64,58],
[81,66,85,68,76,74,0,69,65,77],
[68,54,74,61,61,72,62,0,65,66],
[65,52,66,52,66,67,66,66,0,68],
[65,65,73,64,63,73,54,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,59,72,70,73,60,51,57,47],
[84,0,59,84,86,59,86,97,70,72],
[72,72,0,72,72,47,74,73,60,48],
[59,47,59,0,44,35,48,51,59,35],
[61,45,59,87,0,35,47,63,46,59],
[58,72,84,96,96,0,84,109,96,61],
[71,45,57,83,84,47,0,98,47,59],
[80,34,58,80,68,22,33,0,67,56],
[74,61,71,72,85,35,84,64,0,59],
[84,59,83,96,72,70,72,75,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,71,69,58,77,71,40,79,80],
[81,0,91,91,71,38,61,78,68,91],
[60,40,0,58,59,67,69,58,77,69],
[62,40,73,0,69,69,44,61,70,70],
[73,60,72,62,0,77,73,59,79,80],
[54,93,64,62,54,0,63,61,73,63],
[60,70,62,87,58,68,0,60,70,90],
[91,53,73,70,72,70,71,0,90,82],
[52,63,54,61,52,58,61,41,0,81],
[51,40,62,61,51,68,41,49,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,75,67,79,77,72,70,68,58],
[61,0,62,65,79,66,75,56,63,62],
[56,69,0,71,74,62,69,71,65,71],
[64,66,60,0,82,75,67,62,66,71],
[52,52,57,49,0,58,75,58,61,66],
[54,65,69,56,73,0,67,59,59,62],
[59,56,62,64,56,64,0,60,69,68],
[61,75,60,69,73,72,71,0,69,70],
[63,68,66,65,70,72,62,62,0,61],
[73,69,60,60,65,69,63,61,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,56,72,62,73,62,58,71,77],
[57,0,54,76,49,62,52,50,66,63],
[75,77,0,76,53,70,54,70,77,75],
[59,55,55,0,56,62,49,55,65,63],
[69,82,78,75,0,67,65,74,72,79],
[58,69,61,69,64,0,67,63,76,57],
[69,79,77,82,66,64,0,62,69,74],
[73,81,61,76,57,68,69,0,77,77],
[60,65,54,66,59,55,62,54,0,68],
[54,68,56,68,52,74,57,54,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,63,61,56,62,59,50,70,54],
[64,0,71,53,56,78,61,46,53,54],
[68,60,0,58,56,63,52,52,49,54],
[70,78,73,0,74,63,73,58,76,67],
[75,75,75,57,0,64,73,66,72,74],
[69,53,68,68,67,0,72,64,58,71],
[72,70,79,58,58,59,0,57,63,67],
[81,85,79,73,65,67,74,0,76,75],
[61,78,82,55,59,73,68,55,0,77],
[77,77,77,64,57,60,64,56,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,83,75,78,71,73,78,58],
[64,0,47,79,65,72,57,66,77,61],
[64,84,0,82,69,69,55,81,86,65],
[48,52,49,0,68,56,60,65,65,63],
[56,66,62,63,0,64,62,74,70,72],
[53,59,62,75,67,0,51,59,80,48],
[60,74,76,71,69,80,0,87,87,69],
[58,65,50,66,57,72,44,0,77,52],
[53,54,45,66,61,51,44,54,0,49],
[73,70,66,68,59,83,62,79,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,75,73,84,62,73,76,71,54],
[76,0,54,88,73,53,63,67,73,66],
[56,77,0,73,74,64,63,67,85,65],
[58,43,58,0,77,56,67,70,74,77],
[47,58,57,54,0,47,55,43,54,46],
[69,78,67,75,84,0,76,55,72,55],
[58,68,68,64,76,55,0,55,76,57],
[55,64,64,61,88,76,76,0,84,55],
[60,58,46,57,77,59,55,47,0,69],
[77,65,66,54,85,76,74,76,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,73,54,60,65,61,55,60,63],
[70,0,79,66,74,73,67,63,59,69],
[58,52,0,51,53,58,55,56,50,54],
[77,65,80,0,68,74,67,70,65,72],
[71,57,78,63,0,70,56,64,65,64],
[66,58,73,57,61,0,61,61,57,60],
[70,64,76,64,75,70,0,57,62,58],
[76,68,75,61,67,70,74,0,69,71],
[71,72,81,66,66,74,69,62,0,67],
[68,62,77,59,67,71,73,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,36,37,56,57,86,55,38,48,55],
[95,0,64,84,65,84,75,58,86,83],
[94,67,0,75,66,95,92,65,86,94],
[75,47,56,0,66,75,56,66,75,75],
[74,66,65,65,0,75,74,75,66,66],
[45,47,36,56,56,0,56,66,84,73],
[76,56,39,75,57,75,0,74,86,74],
[93,73,66,65,56,65,57,0,93,82],
[83,45,45,56,65,47,45,38,0,73],
[76,48,37,56,65,58,57,49,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,54,67,61,56,59,54,52,57],
[79,0,75,65,75,67,66,61,68,76],
[77,56,0,64,76,62,59,53,73,69],
[64,66,67,0,71,59,69,52,70,72],
[70,56,55,60,0,47,58,49,64,57],
[75,64,69,72,84,0,59,60,67,70],
[72,65,72,62,73,72,0,71,75,70],
[77,70,78,79,82,71,60,0,81,76],
[79,63,58,61,67,64,56,50,0,76],
[74,55,62,59,74,61,61,55,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,58,67,63,62,63,68,72,63],
[68,0,48,65,53,60,65,60,73,55],
[73,83,0,70,64,66,74,71,71,70],
[64,66,61,0,67,63,71,64,58,64],
[68,78,67,64,0,68,60,67,66,64],
[69,71,65,68,63,0,61,69,71,66],
[68,66,57,60,71,70,0,79,69,69],
[63,71,60,67,64,62,52,0,61,63],
[59,58,60,73,65,60,62,70,0,56],
[68,76,61,67,67,65,62,68,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,67,56,70,58,56,69,55],
[70,0,67,72,66,73,57,82,72,56],
[73,64,0,76,58,66,71,72,78,57],
[64,59,55,0,57,67,66,63,72,44],
[75,65,73,74,0,68,59,58,64,77],
[61,58,65,64,63,0,48,55,68,50],
[73,74,60,65,72,83,0,67,77,50],
[75,49,59,68,73,76,64,0,67,63],
[62,59,53,59,67,63,54,64,0,51],
[76,75,74,87,54,81,81,68,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,80,66,66,64,104,78,65,66],
[66,0,80,66,79,105,104,78,65,79],
[51,51,0,53,64,77,89,65,54,80],
[65,65,78,0,76,65,77,77,54,65],
[65,52,67,55,0,26,64,53,54,54],
[67,26,54,66,105,0,66,65,53,67],
[27,27,42,54,67,65,0,40,54,81],
[53,53,66,54,78,66,91,0,69,54],
[66,66,77,77,77,78,77,62,0,39],
[65,52,51,66,77,64,50,77,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,41,76,70,55,67,53,69,70],
[63,0,51,68,44,48,50,54,53,54],
[90,80,0,72,77,62,78,63,71,73],
[55,63,59,0,43,36,59,45,60,53],
[61,87,54,88,0,71,77,89,44,91],
[76,83,69,95,60,0,74,71,58,79],
[64,81,53,72,54,57,0,62,73,72],
[78,77,68,86,42,60,69,0,62,78],
[62,78,60,71,87,73,58,69,0,80],
[61,77,58,78,40,52,59,53,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,69,75,77,70,68,55,70],
[61,0,60,73,70,68,58,56,55,66],
[61,71,0,68,72,67,63,62,66,63],
[62,58,63,0,66,66,69,56,62,67],
[56,61,59,65,0,59,63,66,62,62],
[54,63,64,65,72,0,70,71,55,67],
[61,73,68,62,68,61,0,73,59,68],
[63,75,69,75,65,60,58,0,60,71],
[76,76,65,69,69,76,72,71,0,70],
[61,65,68,64,69,64,63,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,82,80,69,45,79,36,69,46],
[96,0,71,82,59,83,81,82,94,57],
[49,60,0,66,55,60,76,59,92,72],
[51,49,65,0,64,61,73,39,74,64],
[62,72,76,67,0,71,45,49,81,72],
[86,48,71,70,60,0,79,36,106,59],
[52,50,55,58,86,52,0,65,51,52],
[95,49,72,92,82,95,66,0,82,83],
[62,37,39,57,50,25,80,49,0,36],
[85,74,59,67,59,72,79,48,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,59,63,83,70,63,60,83],
[63,0,65,55,73,72,75,69,56,78],
[62,66,0,62,70,69,72,64,57,80],
[72,76,69,0,72,81,67,81,58,75],
[68,58,61,59,0,76,75,61,67,78],
[48,59,62,50,55,0,68,57,52,72],
[61,56,59,64,56,63,0,61,54,86],
[68,62,67,50,70,74,70,0,53,84],
[71,75,74,73,64,79,77,78,0,92],
[48,53,51,56,53,59,45,47,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,67,67,62,59,69,61,59],
[73,0,66,62,63,63,59,69,63,58],
[71,65,0,62,70,64,64,76,66,57],
[64,69,69,0,69,58,62,73,59,53],
[64,68,61,62,0,63,68,70,57,59],
[69,68,67,73,68,0,66,72,69,62],
[72,72,67,69,63,65,0,80,68,66],
[62,62,55,58,61,59,51,0,65,55],
[70,68,65,72,74,62,63,66,0,64],
[72,73,74,78,72,69,65,76,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,74,67,78,62,66,59,66],
[66,0,65,81,62,87,67,69,57,68],
[67,66,0,89,82,92,60,66,69,75],
[57,50,42,0,66,72,62,56,48,54],
[64,69,49,65,0,79,65,60,64,71],
[53,44,39,59,52,0,49,61,38,37],
[69,64,71,69,66,82,0,53,56,75],
[65,62,65,75,71,70,78,0,55,48],
[72,74,62,83,67,93,75,76,0,69],
[65,63,56,77,60,94,56,83,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,61,65,67,55,64,61,69],
[73,0,66,75,69,69,56,62,73,69],
[67,65,0,65,70,71,68,65,65,78],
[70,56,66,0,68,72,58,66,65,69],
[66,62,61,63,0,71,60,65,61,71],
[64,62,60,59,60,0,70,71,60,63],
[76,75,63,73,71,61,0,66,72,78],
[67,69,66,65,66,60,65,0,71,68],
[70,58,66,66,70,71,59,60,0,70],
[62,62,53,62,60,68,53,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,85,64,78,78,84,64,79,81],
[65,0,76,72,67,73,71,69,76,75],
[46,55,0,54,56,63,70,49,61,69],
[67,59,77,0,74,73,73,78,81,64],
[53,64,75,57,0,66,75,70,66,61],
[53,58,68,58,65,0,64,55,75,70],
[47,60,61,58,56,67,0,76,55,58],
[67,62,82,53,61,76,55,0,66,71],
[52,55,70,50,65,56,76,65,0,73],
[50,56,62,67,70,61,73,60,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,54,46,66,54,64,71,51,50],
[77,0,62,63,63,62,61,62,60,63],
[77,69,0,53,71,72,67,66,44,57],
[85,68,78,0,77,82,76,79,70,54],
[65,68,60,54,0,71,63,64,55,63],
[77,69,59,49,60,0,69,70,58,44],
[67,70,64,55,68,62,0,60,55,53],
[60,69,65,52,67,61,71,0,47,52],
[80,71,87,61,76,73,76,84,0,72],
[81,68,74,77,68,87,78,79,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,56,69,54,55,55,60,38,82],
[75,0,75,69,75,56,66,62,70,92],
[75,56,0,74,63,58,58,52,44,75],
[62,62,57,0,69,58,64,48,50,81],
[77,56,68,62,0,67,54,60,61,68],
[76,75,73,73,64,0,74,79,75,72],
[76,65,73,67,77,57,0,57,66,95],
[71,69,79,83,71,52,74,0,66,90],
[93,61,87,81,70,56,65,65,0,94],
[49,39,56,50,63,59,36,41,37,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,65,72,66,67,67,59,68],
[69,0,71,70,64,73,69,74,69,64],
[65,60,0,65,70,69,74,76,70,60],
[66,61,66,0,66,68,79,79,62,68],
[59,67,61,65,0,57,66,71,56,73],
[65,58,62,63,74,0,61,70,67,58],
[64,62,57,52,65,70,0,63,76,67],
[64,57,55,52,60,61,68,0,65,65],
[72,62,61,69,75,64,55,66,0,64],
[63,67,71,63,58,73,64,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,68,66,76,84,80,84,70,63],
[65,0,58,56,61,70,74,77,61,59],
[63,73,0,70,71,78,87,78,72,68],
[65,75,61,0,61,66,67,76,65,67],
[55,70,60,70,0,69,76,79,64,63],
[47,61,53,65,62,0,61,70,64,54],
[51,57,44,64,55,70,0,67,60,52],
[47,54,53,55,52,61,64,0,63,53],
[61,70,59,66,67,67,71,68,0,56],
[68,72,63,64,68,77,79,78,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,40,79,65,76,63,92,63,95],
[80,0,54,78,106,119,76,120,63,94],
[91,77,0,93,77,78,49,106,64,93],
[52,53,38,0,78,78,76,90,36,77],
[66,25,54,53,0,36,50,77,36,68],
[55,12,53,53,95,0,65,79,38,82],
[68,55,82,55,81,66,0,81,66,68],
[39,11,25,41,54,52,50,0,36,57],
[68,68,67,95,95,93,65,95,0,82],
[36,37,38,54,63,49,63,74,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,68,67,75,66,59,72,64,73],
[55,0,66,69,70,61,68,76,73,70],
[63,65,0,73,73,66,67,69,74,74],
[64,62,58,0,67,57,67,71,60,69],
[56,61,58,64,0,62,70,68,60,68],
[65,70,65,74,69,0,73,70,78,73],
[72,63,64,64,61,58,0,69,62,79],
[59,55,62,60,63,61,62,0,68,72],
[67,58,57,71,71,53,69,63,0,70],
[58,61,57,62,63,58,52,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,65,56,59,56,65,62,55,59],
[80,0,70,72,66,70,63,74,71,69],
[66,61,0,61,68,73,61,71,64,67],
[75,59,70,0,72,73,69,70,73,63],
[72,65,63,59,0,69,62,60,69,64],
[75,61,58,58,62,0,61,64,62,65],
[66,68,70,62,69,70,0,77,61,72],
[69,57,60,61,71,67,54,0,57,57],
[76,60,67,58,62,69,70,74,0,67],
[72,62,64,68,67,66,59,74,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,75,66,78,52,63,65,57,68],
[74,0,75,66,87,55,56,72,68,73],
[56,56,0,60,81,54,69,70,70,57],
[65,65,71,0,78,57,71,62,67,57],
[53,44,50,53,0,54,58,54,45,61],
[79,76,77,74,77,0,56,76,68,70],
[68,75,62,60,73,75,0,50,64,66],
[66,59,61,69,77,55,81,0,60,68],
[74,63,61,64,86,63,67,71,0,72],
[63,58,74,74,70,61,65,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,83,57,64,63,52,64,47,69],
[74,0,82,77,70,65,54,56,61,58],
[48,49,0,47,57,53,34,40,45,63],
[74,54,84,0,88,46,66,57,68,81],
[67,61,74,43,0,45,61,60,70,68],
[68,66,78,85,86,0,55,60,66,82],
[79,77,97,65,70,76,0,71,58,61],
[67,75,91,74,71,71,60,0,54,74],
[84,70,86,63,61,65,73,77,0,78],
[62,73,68,50,63,49,70,57,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,61,57,59,51,57,52,66],
[67,0,64,61,64,60,50,58,64,65],
[65,67,0,58,61,58,59,57,67,65],
[70,70,73,0,62,65,68,72,74,71],
[74,67,70,69,0,61,60,66,65,67],
[72,71,73,66,70,0,60,72,69,65],
[80,81,72,63,71,71,0,61,66,70],
[74,73,74,59,65,59,70,0,71,67],
[79,67,64,57,66,62,65,60,0,65],
[65,66,66,60,64,66,61,64,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,65,68,56,59,53,64,64],
[60,0,62,62,63,46,49,52,51,65],
[60,69,0,72,62,63,64,53,67,67],
[66,69,59,0,63,58,60,66,60,71],
[63,68,69,68,0,63,56,69,58,70],
[75,85,68,73,68,0,66,74,65,77],
[72,82,67,71,75,65,0,71,67,77],
[78,79,78,65,62,57,60,0,61,68],
[67,80,64,71,73,66,64,70,0,77],
[67,66,64,60,61,54,54,63,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,55,61,69,61,65,64,71],
[67,0,76,59,63,59,61,64,77,78],
[65,55,0,64,62,58,65,72,61,71],
[76,72,67,0,62,74,81,72,82,80],
[70,68,69,69,0,63,68,61,74,72],
[62,72,73,57,68,0,58,64,68,87],
[70,70,66,50,63,73,0,69,67,69],
[66,67,59,59,70,67,62,0,71,85],
[67,54,70,49,57,63,64,60,0,69],
[60,53,60,51,59,44,62,46,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,71,65,68,67,70,58,72],
[64,0,65,70,67,54,64,65,67,61],
[58,66,0,71,68,66,67,79,59,73],
[60,61,60,0,63,50,58,59,59,59],
[66,64,63,68,0,67,58,63,69,63],
[63,77,65,81,64,0,69,69,73,71],
[64,67,64,73,73,62,0,77,70,69],
[61,66,52,72,68,62,54,0,67,59],
[73,64,72,72,62,58,61,64,0,71],
[59,70,58,72,68,60,62,72,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,70,76,65,67,68,72,68,72],
[68,0,78,73,70,72,71,75,63,71],
[61,53,0,59,63,64,63,73,58,62],
[55,58,72,0,63,73,75,68,67,63],
[66,61,68,68,0,66,65,67,62,71],
[64,59,67,58,65,0,68,75,60,63],
[63,60,68,56,66,63,0,70,56,64],
[59,56,58,63,64,56,61,0,62,58],
[63,68,73,64,69,71,75,69,0,66],
[59,60,69,68,60,68,67,73,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,72,78,88,90,92,76,74,65],
[56,0,63,65,71,75,75,67,53,54],
[59,68,0,74,71,78,56,70,57,56],
[53,66,57,0,65,70,67,62,61,67],
[43,60,60,66,0,71,59,62,43,37],
[41,56,53,61,60,0,60,57,50,38],
[39,56,75,64,72,71,0,68,55,51],
[55,64,61,69,69,74,63,0,60,57],
[57,78,74,70,88,81,76,71,0,58],
[66,77,75,64,94,93,80,74,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,49,55,57,62,69,47,66,55],
[70,0,53,55,76,64,73,75,78,58],
[82,78,0,53,66,75,75,73,72,73],
[76,76,78,0,85,65,75,58,66,71],
[74,55,65,46,0,71,64,57,72,47],
[69,67,56,66,60,0,80,50,62,51],
[62,58,56,56,67,51,0,66,67,50],
[84,56,58,73,74,81,65,0,86,52],
[65,53,59,65,59,69,64,45,0,46],
[76,73,58,60,84,80,81,79,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,62,68,71,62,67,69,72,67],
[58,0,65,62,65,61,70,68,67,72],
[69,66,0,62,75,65,66,69,70,69],
[63,69,69,0,72,60,73,77,70,74],
[60,66,56,59,0,50,64,65,60,61],
[69,70,66,71,81,0,70,69,75,65],
[64,61,65,58,67,61,0,63,69,65],
[62,63,62,54,66,62,68,0,61,69],
[59,64,61,61,71,56,62,70,0,64],
[64,59,62,57,70,66,66,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,57,61,56,69,62,70,58,65],
[74,0,71,73,60,81,76,79,74,71],
[74,60,0,70,68,64,64,73,49,59],
[70,58,61,0,70,70,66,76,64,67],
[75,71,63,61,0,72,81,75,83,73],
[62,50,67,61,59,0,78,68,65,58],
[69,55,67,65,50,53,0,64,57,60],
[61,52,58,55,56,63,67,0,56,57],
[73,57,82,67,48,66,74,75,0,69],
[66,60,72,64,58,73,71,74,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,79,68,69,59,80,67,89,68],
[67,0,95,72,67,59,68,69,67,77],
[52,36,0,66,59,48,64,50,63,57],
[63,59,65,0,63,48,68,62,85,66],
[62,64,72,68,0,68,73,67,79,72],
[72,72,83,83,63,0,70,66,78,62],
[51,63,67,63,58,61,0,56,69,62],
[64,62,81,69,64,65,75,0,77,77],
[42,64,68,46,52,53,62,54,0,57],
[63,54,74,65,59,69,69,54,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,73,70,66,74,71,62,66,58],
[70,0,67,70,68,66,72,57,73,66],
[58,64,0,66,54,67,68,53,68,54],
[61,61,65,0,59,59,66,56,65,45],
[65,63,77,72,0,67,70,69,71,63],
[57,65,64,72,64,0,66,53,60,53],
[60,59,63,65,61,65,0,55,64,60],
[69,74,78,75,62,78,76,0,71,62],
[65,58,63,66,60,71,67,60,0,61],
[73,65,77,86,68,78,71,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,67,64,62,69,69,66,61,74],
[54,0,70,60,55,65,69,70,56,65],
[64,61,0,57,68,63,66,66,58,66],
[67,71,74,0,67,62,74,70,69,71],
[69,76,63,64,0,69,75,73,62,69],
[62,66,68,69,62,0,67,63,65,70],
[62,62,65,57,56,64,0,66,56,66],
[65,61,65,61,58,68,65,0,59,69],
[70,75,73,62,69,66,75,72,0,76],
[57,66,65,60,62,61,65,62,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,53,45,77,57,64,70,74,65],
[40,0,39,32,48,47,56,31,41,50],
[78,92,0,76,61,71,79,77,78,79],
[86,99,55,0,85,71,71,78,100,96],
[54,83,70,46,0,47,71,52,61,54],
[74,84,60,60,84,0,69,60,52,71],
[67,75,52,60,60,62,0,54,75,57],
[61,100,54,53,79,71,77,0,67,71],
[57,90,53,31,70,79,56,64,0,58],
[66,81,52,35,77,60,74,60,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,79,52,65,58,54,64,61],
[66,0,65,73,54,64,63,64,72,62],
[56,66,0,65,55,69,67,59,58,70],
[52,58,66,0,58,69,59,61,59,44],
[79,77,76,73,0,70,61,75,71,72],
[66,67,62,62,61,0,56,64,59,62],
[73,68,64,72,70,75,0,66,60,69],
[77,67,72,70,56,67,65,0,66,71],
[67,59,73,72,60,72,71,65,0,67],
[70,69,61,87,59,69,62,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,67,69,72,67,67,76,66,67],
[67,0,64,63,60,61,71,74,62,66],
[64,67,0,70,73,69,61,73,60,68],
[62,68,61,0,75,58,72,70,64,65],
[59,71,58,56,0,62,59,76,62,69],
[64,70,62,73,69,0,64,72,63,72],
[64,60,70,59,72,67,0,71,59,65],
[55,57,58,61,55,59,60,0,64,58],
[65,69,71,67,69,68,72,67,0,73],
[64,65,63,66,62,59,66,73,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,62,74,60,67,73,71,54,58],
[80,0,77,78,73,76,77,76,62,84],
[69,54,0,64,48,66,66,62,55,66],
[57,53,67,0,56,68,61,65,58,63],
[71,58,83,75,0,78,80,77,71,67],
[64,55,65,63,53,0,62,60,59,55],
[58,54,65,70,51,69,0,64,57,50],
[60,55,69,66,54,71,67,0,52,59],
[77,69,76,73,60,72,74,79,0,68],
[73,47,65,68,64,76,81,72,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,58,60,63,69,75,72,69,66],
[67,0,58,62,65,73,67,64,62,68],
[73,73,0,64,74,77,82,69,65,71],
[71,69,67,0,76,73,76,77,64,76],
[68,66,57,55,0,64,75,64,60,66],
[62,58,54,58,67,0,69,69,61,69],
[56,64,49,55,56,62,0,58,59,64],
[59,67,62,54,67,62,73,0,64,64],
[62,69,66,67,71,70,72,67,0,71],
[65,63,60,55,65,62,67,67,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,64,79,95,71,88,72,79],
[60,0,69,72,77,67,58,78,71,73],
[60,62,0,71,87,58,60,70,54,71],
[67,59,60,0,68,85,49,95,53,69],
[52,54,44,63,0,60,51,68,45,71],
[36,64,73,46,71,0,42,72,82,81],
[60,73,71,82,80,89,0,89,64,64],
[43,53,61,36,63,59,42,0,44,55],
[59,60,77,78,86,49,67,87,0,69],
[52,58,60,62,60,50,67,76,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,67,71,69,73,61,67,70,67],
[74,0,70,76,77,75,64,73,74,74],
[64,61,0,74,73,76,68,70,70,79],
[60,55,57,0,74,77,63,59,69,73],
[62,54,58,57,0,58,46,57,64,69],
[58,56,55,54,73,0,56,57,70,74],
[70,67,63,68,85,75,0,69,65,75],
[64,58,61,72,74,74,62,0,70,80],
[61,57,61,62,67,61,66,61,0,69],
[64,57,52,58,62,57,56,51,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,63,57,77,65,52,53,63],
[67,0,68,61,79,85,75,66,63,57],
[67,63,0,74,74,89,81,69,63,55],
[68,70,57,0,73,84,74,61,71,67],
[74,52,57,58,0,74,53,40,53,58],
[54,46,42,47,57,0,57,71,48,56],
[66,56,50,57,78,74,0,58,63,50],
[79,65,62,70,91,60,73,0,60,75],
[78,68,68,60,78,83,68,71,0,58],
[68,74,76,64,73,75,81,56,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,63,63,53,63,64,65,68,73],
[73,0,61,61,54,67,57,71,67,75],
[68,70,0,67,56,62,63,67,75,74],
[68,70,64,0,59,66,61,74,72,75],
[78,77,75,72,0,64,77,71,85,78],
[68,64,69,65,67,0,66,74,76,75],
[67,74,68,70,54,65,0,71,79,76],
[66,60,64,57,60,57,60,0,71,66],
[63,64,56,59,46,55,52,60,0,66],
[58,56,57,56,53,56,55,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,57,55,67,63,63,67,75,77],
[60,0,60,61,74,59,76,71,75,79],
[74,71,0,67,73,74,62,63,68,75],
[76,70,64,0,82,66,71,75,69,80],
[64,57,58,49,0,50,69,63,63,51],
[68,72,57,65,81,0,76,70,73,75],
[68,55,69,60,62,55,0,64,58,66],
[64,60,68,56,68,61,67,0,65,66],
[56,56,63,62,68,58,73,66,0,72],
[54,52,56,51,80,56,65,65,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,38,62,58,51,70,70,67,70],
[57,0,51,60,53,65,68,55,52,58],
[93,80,0,70,57,65,92,71,74,75],
[69,71,61,0,56,66,60,67,54,59],
[73,78,74,75,0,70,57,84,73,74],
[80,66,66,65,61,0,69,81,75,73],
[61,63,39,71,74,62,0,55,62,73],
[61,76,60,64,47,50,76,0,64,49],
[64,79,57,77,58,56,69,67,0,71],
[61,73,56,72,57,58,58,82,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,74,73,70,73,66,61,72],
[66,0,78,65,67,65,66,72,58,71],
[61,53,0,53,55,65,66,53,52,56],
[57,66,78,0,55,66,72,73,64,66],
[58,64,76,76,0,56,67,71,54,67],
[61,66,66,65,75,0,70,67,55,66],
[58,65,65,59,64,61,0,62,67,64],
[65,59,78,58,60,64,69,0,62,55],
[70,73,79,67,77,76,64,69,0,67],
[59,60,75,65,64,65,67,76,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,77,64,59,64,74,67,67,75],
[77,0,75,57,66,69,68,65,70,64],
[54,56,0,73,57,56,62,65,67,65],
[67,74,58,0,58,66,64,58,71,77],
[72,65,74,73,0,65,85,56,65,70],
[67,62,75,65,66,0,64,56,81,88],
[57,63,69,67,46,67,0,63,71,72],
[64,66,66,73,75,75,68,0,62,67],
[64,61,64,60,66,50,60,69,0,69],
[56,67,66,54,61,43,59,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,61,51,39,58,49,77,62,48],
[54,0,56,60,58,54,67,44,43,44],
[70,75,0,62,74,69,72,88,73,50],
[80,71,69,0,60,69,82,60,60,69],
[92,73,57,71,0,68,70,63,55,58],
[73,77,62,62,63,0,46,77,71,48],
[82,64,59,49,61,85,0,52,83,75],
[54,87,43,71,68,54,79,0,57,66],
[69,88,58,71,76,60,48,74,0,85],
[83,87,81,62,73,83,56,65,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,67,66,55,78,71,47,58,58],
[52,0,61,55,44,62,61,41,48,56],
[64,70,0,65,68,72,67,66,66,75],
[65,76,66,0,55,65,71,59,59,64],
[76,87,63,76,0,76,58,66,64,67],
[53,69,59,66,55,0,63,62,45,65],
[60,70,64,60,73,68,0,58,65,65],
[84,90,65,72,65,69,73,0,64,72],
[73,83,65,72,67,86,66,67,0,71],
[73,75,56,67,64,66,66,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,66,67,67,62,68,72,55],
[62,0,66,69,74,70,68,61,76,58],
[67,65,0,66,64,64,54,66,67,58],
[65,62,65,0,64,70,55,63,65,60],
[64,57,67,67,0,69,63,61,66,66],
[64,61,67,61,62,0,62,64,70,66],
[69,63,77,76,68,69,0,67,70,63],
[63,70,65,68,70,67,64,0,70,68],
[59,55,64,66,65,61,61,61,0,54],
[76,73,73,71,65,65,68,63,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,103,63,78,62,82,90,91,86],
[56,0,89,42,55,56,52,70,67,73],
[28,42,0,41,42,28,45,48,30,44],
[68,89,90,0,72,56,72,67,81,65],
[53,76,89,59,0,60,78,82,67,73],
[69,75,103,75,71,0,65,93,88,75],
[49,79,86,59,53,66,0,78,63,86],
[41,61,83,64,49,38,53,0,56,46],
[40,64,101,50,64,43,68,75,0,72],
[45,58,87,66,58,56,45,85,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,79,60,70,63,85,62,67],
[61,0,47,64,58,70,71,73,56,60],
[65,84,0,71,71,68,72,81,68,76],
[52,67,60,0,63,56,60,62,67,66],
[71,73,60,68,0,69,56,68,61,77],
[61,61,63,75,62,0,61,65,47,57],
[68,60,59,71,75,70,0,72,58,63],
[46,58,50,69,63,66,59,0,62,63],
[69,75,63,64,70,84,73,69,0,70],
[64,71,55,65,54,74,68,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,58,63,64,57,70,72,62],
[62,0,65,58,65,63,63,62,72,69],
[68,66,0,74,62,66,69,71,69,56],
[73,73,57,0,73,65,63,71,75,58],
[68,66,69,58,0,60,65,64,77,59],
[67,68,65,66,71,0,60,65,66,60],
[74,68,62,68,66,71,0,71,78,66],
[61,69,60,60,67,66,60,0,76,65],
[59,59,62,56,54,65,53,55,0,56],
[69,62,75,73,72,71,65,66,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,74,69,61,82,61,64,69,65],
[62,0,69,71,61,72,58,65,61,69],
[57,62,0,63,64,72,58,65,62,59],
[62,60,68,0,64,78,56,66,63,63],
[70,70,67,67,0,78,64,72,77,76],
[49,59,59,53,53,0,51,55,54,64],
[70,73,73,75,67,80,0,57,66,69],
[67,66,66,65,59,76,74,0,80,68],
[62,70,69,68,54,77,65,51,0,57],
[66,62,72,68,55,67,62,63,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,60,72,61,67,62,60,56],
[65,0,59,66,68,67,69,58,68,61],
[71,72,0,72,72,58,71,65,65,66],
[71,65,59,0,72,59,70,61,60,58],
[59,63,59,59,0,60,65,54,62,54],
[70,64,73,72,71,0,72,68,63,70],
[64,62,60,61,66,59,0,59,65,56],
[69,73,66,70,77,63,72,0,72,69],
[71,63,66,71,69,68,66,59,0,60],
[75,70,65,73,77,61,75,62,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,83,75,82,86,71,63,58],
[66,0,64,70,68,85,91,75,69,70],
[66,67,0,74,68,81,83,71,63,63],
[48,61,57,0,59,76,68,52,47,54],
[56,63,63,72,0,75,70,72,61,66],
[49,46,50,55,56,0,60,44,44,54],
[45,40,48,63,61,71,0,48,48,46],
[60,56,60,79,59,87,83,0,58,65],
[68,62,68,84,70,87,83,73,0,60],
[73,61,68,77,65,77,85,66,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,73,70,75,61,67,75,76,67],
[54,0,62,65,63,66,60,65,60,62],
[58,69,0,65,64,62,66,70,64,69],
[61,66,66,0,64,61,58,71,67,56],
[56,68,67,67,0,67,65,69,66,69],
[70,65,69,70,64,0,66,69,71,71],
[64,71,65,73,66,65,0,76,60,66],
[56,66,61,60,62,62,55,0,60,61],
[55,71,67,64,65,60,71,71,0,65],
[64,69,62,75,62,60,65,70,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,70,61,73,69,73,62,76,72],
[56,0,59,57,55,56,69,44,66,67],
[61,72,0,67,57,68,71,61,83,69],
[70,74,64,0,53,56,66,69,81,77],
[58,76,74,78,0,71,72,64,79,67],
[62,75,63,75,60,0,71,67,73,70],
[58,62,60,65,59,60,0,59,71,54],
[69,87,70,62,67,64,72,0,85,67],
[55,65,48,50,52,58,60,46,0,62],
[59,64,62,54,64,61,77,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,56,68,54,57,56,60,66],
[72,0,70,61,69,68,62,67,69,69],
[71,61,0,66,65,68,65,62,64,66],
[75,70,65,0,65,62,61,63,62,73],
[63,62,66,66,0,64,56,71,58,65],
[77,63,63,69,67,0,70,71,67,75],
[74,69,66,70,75,61,0,64,68,76],
[75,64,69,68,60,60,67,0,58,72],
[71,62,67,69,73,64,63,73,0,73],
[65,62,65,58,66,56,55,59,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,70,80,68,71,81,80,75],
[64,0,67,71,70,70,69,73,76,64],
[66,64,0,72,60,63,60,60,64,74],
[61,60,59,0,67,71,63,71,74,60],
[51,61,71,64,0,67,68,63,69,64],
[63,61,68,60,64,0,74,68,76,66],
[60,62,71,68,63,57,0,67,70,64],
[50,58,71,60,68,63,64,0,66,62],
[51,55,67,57,62,55,61,65,0,57],
[56,67,57,71,67,65,67,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,67,68,72,63,67,66,50,60],
[44,0,58,67,64,58,49,58,54,52],
[64,73,0,60,58,67,63,68,67,52],
[63,64,71,0,54,70,63,65,68,59],
[59,67,73,77,0,74,61,70,79,69],
[68,73,64,61,57,0,53,61,58,62],
[64,82,68,68,70,78,0,66,64,71],
[65,73,63,66,61,70,65,0,56,75],
[81,77,64,63,52,73,67,75,0,63],
[71,79,79,72,62,69,60,56,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,63,70,64,63,69,67,68,76],
[68,0,63,59,66,66,66,61,59,67],
[68,68,0,77,70,68,75,63,69,69],
[61,72,54,0,72,64,66,60,64,69],
[67,65,61,59,0,64,61,62,65,66],
[68,65,63,67,67,0,70,64,69,64],
[62,65,56,65,70,61,0,63,65,71],
[64,70,68,71,69,67,68,0,66,67],
[63,72,62,67,66,62,66,65,0,62],
[55,64,62,62,65,67,60,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,56,73,46,58,70,53,64],
[64,0,65,52,68,55,64,56,59,70],
[67,66,0,53,67,65,62,63,53,65],
[75,79,78,0,83,61,72,65,65,75],
[58,63,64,48,0,50,58,62,52,74],
[85,76,66,70,81,0,79,73,63,63],
[73,67,69,59,73,52,0,77,70,72],
[61,75,68,66,69,58,54,0,50,64],
[78,72,78,66,79,68,61,81,0,81],
[67,61,66,56,57,68,59,67,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,63,58,66,66,67,70,53,59],
[58,0,70,56,58,66,70,69,50,62],
[68,61,0,59,68,71,69,62,54,58],
[73,75,72,0,69,77,77,74,65,66],
[65,73,63,62,0,66,60,64,58,61],
[65,65,60,54,65,0,66,69,51,61],
[64,61,62,54,71,65,0,69,57,54],
[61,62,69,57,67,62,62,0,50,59],
[78,81,77,66,73,80,74,81,0,62],
[72,69,73,65,70,70,77,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,66,81,80,61,68,72,67,57],
[71,0,73,77,78,67,72,71,67,62],
[65,58,0,77,67,59,61,64,55,64],
[50,54,54,0,59,62,55,47,44,55],
[51,53,64,72,0,50,54,54,50,53],
[70,64,72,69,81,0,67,76,59,59],
[63,59,70,76,77,64,0,67,51,71],
[59,60,67,84,77,55,64,0,53,52],
[64,64,76,87,81,72,80,78,0,70],
[74,69,67,76,78,72,60,79,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,87,68,63,57,68,52,52,60],
[54,0,68,67,51,46,60,48,50,53],
[44,63,0,52,46,41,48,51,40,48],
[63,64,79,0,64,58,65,64,55,56],
[68,80,85,67,0,81,66,70,51,61],
[74,85,90,73,50,0,67,72,73,71],
[63,71,83,66,65,64,0,63,45,53],
[79,83,80,67,61,59,68,0,56,57],
[79,81,91,76,80,58,86,75,0,64],
[71,78,83,75,70,60,78,74,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,60,75,73,71,64,70,65,63],
[60,0,62,76,73,60,63,67,62,62],
[71,69,0,72,81,73,68,69,65,68],
[56,55,59,0,76,48,56,66,56,53],
[58,58,50,55,0,52,56,54,48,45],
[60,71,58,83,79,0,57,72,57,68],
[67,68,63,75,75,74,0,66,64,60],
[61,64,62,65,77,59,65,0,60,61],
[66,69,66,75,83,74,67,71,0,62],
[68,69,63,78,86,63,71,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,65,64,54,70,61,59,67],
[65,0,74,66,67,67,66,63,67,61],
[64,57,0,66,55,62,67,59,53,57],
[66,65,65,0,65,64,71,69,64,67],
[67,64,76,66,0,66,72,69,61,60],
[77,64,69,67,65,0,76,66,72,74],
[61,65,64,60,59,55,0,56,59,72],
[70,68,72,62,62,65,75,0,62,68],
[72,64,78,67,70,59,72,69,0,75],
[64,70,74,64,71,57,59,63,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,83,63,62,71,67,80,79,82],
[60,0,68,57,58,79,72,70,72,86],
[48,63,0,50,57,73,53,74,74,79],
[68,74,81,0,71,87,61,68,81,98],
[69,73,74,60,0,78,70,78,80,80],
[60,52,58,44,53,0,50,77,60,67],
[64,59,78,70,61,81,0,71,75,85],
[51,61,57,63,53,54,60,0,79,65],
[52,59,57,50,51,71,56,52,0,77],
[49,45,52,33,51,64,46,66,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,77,75,71,57,63,66,73],
[59,0,60,54,50,57,57,54,51,62],
[59,71,0,72,56,59,67,57,69,64],
[54,77,59,0,55,63,74,56,62,69],
[56,81,75,76,0,66,76,59,61,74],
[60,74,72,68,65,0,70,61,62,78],
[74,74,64,57,55,61,0,60,52,68],
[68,77,74,75,72,70,71,0,64,76],
[65,80,62,69,70,69,79,67,0,71],
[58,69,67,62,57,53,63,55,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,66,61,65,54,56,60,64],
[62,0,51,55,56,60,58,60,62,59],
[62,80,0,79,85,70,72,67,75,67],
[65,76,52,0,57,62,53,58,65,62],
[70,75,46,74,0,75,70,68,51,68],
[66,71,61,69,56,0,60,68,64,68],
[77,73,59,78,61,71,0,67,72,55],
[75,71,64,73,63,63,64,0,70,78],
[71,69,56,66,80,67,59,61,0,64],
[67,72,64,69,63,63,76,53,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,62,62,64,50,50,58,70],
[64,0,67,57,59,67,44,57,75,60],
[60,64,0,62,69,64,66,61,67,64],
[69,74,69,0,68,73,61,71,73,73],
[69,72,62,63,0,69,59,65,69,66],
[67,64,67,58,62,0,57,59,74,60],
[81,87,65,70,72,74,0,78,68,68],
[81,74,70,60,66,72,53,0,74,74],
[73,56,64,58,62,57,63,57,0,56],
[61,71,67,58,65,71,63,57,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,72,57,60,65,66,58,73],
[71,0,62,75,63,61,60,68,62,71],
[68,69,0,69,61,69,64,71,62,80],
[59,56,62,0,55,60,56,63,51,65],
[74,68,70,76,0,64,67,73,70,72],
[71,70,62,71,67,0,59,66,55,80],
[66,71,67,75,64,72,0,68,62,72],
[65,63,60,68,58,65,63,0,51,69],
[73,69,69,80,61,76,69,80,0,78],
[58,60,51,66,59,51,59,62,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,68,56,61,59,58,57,60],
[68,0,67,57,65,63,61,73,70,64],
[67,64,0,56,61,59,69,63,61,65],
[63,74,75,0,68,69,72,65,59,64],
[75,66,70,63,0,64,64,59,65,63],
[70,68,72,62,67,0,62,64,54,58],
[72,70,62,59,67,69,0,69,63,70],
[73,58,68,66,72,67,62,0,60,57],
[74,61,70,72,66,77,68,71,0,65],
[71,67,66,67,68,73,61,74,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,72,72,69,62,62,70,61,63],
[76,0,70,75,74,66,68,66,49,67],
[59,61,0,67,70,59,66,60,58,65],
[59,56,64,0,84,59,61,59,59,66],
[62,57,61,47,0,48,68,63,68,64],
[69,65,72,72,83,0,70,62,65,71],
[69,63,65,70,63,61,0,60,67,67],
[61,65,71,72,68,69,71,0,67,70],
[70,82,73,72,63,66,64,64,0,72],
[68,64,66,65,67,60,64,61,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,57,74,65,75,71,66,68,70],
[62,0,62,67,46,66,60,55,70,70],
[74,69,0,71,77,70,70,61,73,77],
[57,64,60,0,55,65,60,64,55,68],
[66,85,54,76,0,80,73,67,81,77],
[56,65,61,66,51,0,68,49,62,71],
[60,71,61,71,58,63,0,52,67,71],
[65,76,70,67,64,82,79,0,81,76],
[63,61,58,76,50,69,64,50,0,63],
[61,61,54,63,54,60,60,55,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,75,64,69,63,67,89,69,68],
[65,0,72,61,64,54,64,80,62,71],
[56,59,0,58,58,69,70,77,70,69],
[67,70,73,0,61,76,70,76,64,82],
[62,67,73,70,0,70,69,77,68,85],
[68,77,62,55,61,0,74,79,68,73],
[64,67,61,61,62,57,0,91,59,79],
[42,51,54,55,54,52,40,0,49,64],
[62,69,61,67,63,63,72,82,0,72],
[63,60,62,49,46,58,52,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,32,50,60,69,80,82,73,49],
[40,0,42,70,50,49,57,61,48,69],
[99,89,0,56,77,71,67,91,80,45],
[81,61,75,0,71,91,71,81,70,63],
[71,81,54,60,0,72,84,83,42,70],
[62,82,60,40,59,0,80,74,73,48],
[51,74,64,60,47,51,0,81,68,49],
[49,70,40,50,48,57,50,0,47,40],
[58,83,51,61,89,58,63,84,0,50],
[82,62,86,68,61,83,82,91,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,64,62,56,63,68,64,61,64],
[73,0,75,62,73,67,66,71,68,63],
[67,56,0,68,64,65,60,58,58,62],
[69,69,63,0,67,64,67,62,60,66],
[75,58,67,64,0,65,67,64,60,74],
[68,64,66,67,66,0,58,65,59,68],
[63,65,71,64,64,73,0,64,58,71],
[67,60,73,69,67,66,67,0,71,70],
[70,63,73,71,71,72,73,60,0,74],
[67,68,69,65,57,63,60,61,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,79,74,63,70,52,58,62],
[69,0,61,67,84,61,59,57,56,72],
[67,70,0,63,65,69,62,58,60,68],
[52,64,68,0,75,68,70,71,56,74],
[57,47,66,56,0,57,56,53,55,56],
[68,70,62,63,74,0,70,72,66,59],
[61,72,69,61,75,61,0,45,59,78],
[79,74,73,60,78,59,86,0,80,71],
[73,75,71,75,76,65,72,51,0,73],
[69,59,63,57,75,72,53,60,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,60,55,63,56,63,62,67,70],
[54,0,52,60,67,49,53,59,52,63],
[71,79,0,71,62,65,74,70,73,66],
[76,71,60,0,62,56,63,66,66,72],
[68,64,69,69,0,57,56,62,60,70],
[75,82,66,75,74,0,62,66,62,71],
[68,78,57,68,75,69,0,68,65,68],
[69,72,61,65,69,65,63,0,66,67],
[64,79,58,65,71,69,66,65,0,69],
[61,68,65,59,61,60,63,64,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,68,76,72,72,73,66,67],
[68,0,73,65,71,77,72,78,68,73],
[66,58,0,59,72,60,75,69,70,67],
[63,66,72,0,69,71,72,75,64,69],
[55,60,59,62,0,61,58,68,62,55],
[59,54,71,60,70,0,60,64,60,56],
[59,59,56,59,73,71,0,72,65,70],
[58,53,62,56,63,67,59,0,66,54],
[65,63,61,67,69,71,66,65,0,71],
[64,58,64,62,76,75,61,77,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,73,66,66,75,64,66,66,66],
[60,0,65,63,56,74,61,61,50,46],
[58,66,0,61,65,68,57,57,67,50],
[65,68,70,0,56,72,62,60,63,53],
[65,75,66,75,0,69,56,61,63,64],
[56,57,63,59,62,0,53,53,68,52],
[67,70,74,69,75,78,0,57,67,61],
[65,70,74,71,70,78,74,0,76,63],
[65,81,64,68,68,63,64,55,0,59],
[65,85,81,78,67,79,70,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,56,78,65,59,67,60,77,78],
[60,0,68,67,54,61,69,55,57,66],
[75,63,0,71,67,68,80,61,69,80],
[53,64,60,0,52,57,69,50,65,69],
[66,77,64,79,0,67,72,62,63,78],
[72,70,63,74,64,0,78,66,76,83],
[64,62,51,62,59,53,0,50,57,72],
[71,76,70,81,69,65,81,0,67,74],
[54,74,62,66,68,55,74,64,0,82],
[53,65,51,62,53,48,59,57,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,65,67,63,58,72,74,62,75],
[67,0,74,60,72,54,70,65,72,65],
[66,57,0,66,76,66,65,71,62,81],
[64,71,65,0,69,70,58,64,67,73],
[68,59,55,62,0,50,69,61,65,72],
[73,77,65,61,81,0,74,70,79,72],
[59,61,66,73,62,57,0,60,71,76],
[57,66,60,67,70,61,71,0,63,73],
[69,59,69,64,66,52,60,68,0,67],
[56,66,50,58,59,59,55,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,61,79,72,59,58,66,66,70],
[60,0,73,67,69,67,65,61,65,71],
[70,58,0,72,77,65,68,66,71,70],
[52,64,59,0,65,54,60,56,58,68],
[59,62,54,66,0,63,63,57,73,78],
[72,64,66,77,68,0,59,65,66,82],
[73,66,63,71,68,72,0,64,63,75],
[65,70,65,75,74,66,67,0,63,69],
[65,66,60,73,58,65,68,68,0,77],
[61,60,61,63,53,49,56,62,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,51,67,66,92,52,78,52,51],
[53,0,54,67,66,80,25,79,55,40],
[80,77,0,82,54,93,65,66,80,52],
[64,64,49,0,51,77,51,50,50,51],
[65,65,77,80,0,80,65,65,52,65],
[39,51,38,54,51,0,26,37,39,26],
[79,106,66,80,66,105,0,79,54,93],
[53,52,65,81,66,94,52,0,66,39],
[79,76,51,81,79,92,77,65,0,52],
[80,91,79,80,66,105,38,92,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,60,60,60,61,54,68,50,47],
[58,0,56,57,52,51,60,65,55,50],
[71,75,0,65,59,74,67,66,61,71],
[71,74,66,0,68,62,72,64,60,57],
[71,79,72,63,0,71,63,70,58,60],
[70,80,57,69,60,0,71,62,62,60],
[77,71,64,59,68,60,0,65,66,59],
[63,66,65,67,61,69,66,0,59,60],
[81,76,70,71,73,69,65,72,0,62],
[84,81,60,74,71,71,72,71,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,55,67,65,56,76,68,72,72],
[65,0,48,65,67,66,75,66,64,59],
[76,83,0,67,65,75,82,76,73,68],
[64,66,64,0,61,63,58,60,66,67],
[66,64,66,70,0,66,64,72,87,75],
[75,65,56,68,65,0,71,80,61,65],
[55,56,49,73,67,60,0,63,59,66],
[63,65,55,71,59,51,68,0,62,64],
[59,67,58,65,44,70,72,69,0,73],
[59,72,63,64,56,66,65,67,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,80,69,66,69,76,60,83],
[59,0,73,68,63,63,66,68,70,79],
[64,58,0,74,63,63,71,77,64,73],
[51,63,57,0,59,58,83,79,64,78],
[62,68,68,72,0,64,66,77,65,83],
[65,68,68,73,67,0,57,70,67,84],
[62,65,60,48,65,74,0,57,47,69],
[55,63,54,52,54,61,74,0,46,65],
[71,61,67,67,66,64,84,85,0,75],
[48,52,58,53,48,47,62,66,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,67,63,68,68,68,74,64],
[68,0,61,59,58,59,71,62,64,58],
[60,70,0,64,62,57,69,77,62,68],
[64,72,67,0,70,61,74,59,71,65],
[68,73,69,61,0,57,69,64,69,63],
[63,72,74,70,74,0,78,69,64,79],
[63,60,62,57,62,53,0,62,56,57],
[63,69,54,72,67,62,69,0,65,60],
[57,67,69,60,62,67,75,66,0,69],
[67,73,63,66,68,52,74,71,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,44,44,45,43,87,43,23],
[88,0,88,87,65,44,43,109,64,45],
[86,43,0,65,42,43,65,86,43,88],
[87,44,66,0,66,66,66,86,43,45],
[87,66,89,65,0,22,87,108,65,89],
[86,87,88,65,109,0,65,108,65,88],
[88,88,66,65,44,66,0,87,87,23],
[44,22,45,45,23,23,44,0,22,45],
[88,67,88,88,66,66,44,109,0,67],
[108,86,43,86,42,43,108,86,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,60,62,59,63,59,60,50,57],
[57,0,55,58,49,67,64,52,42,52],
[71,76,0,67,62,73,75,68,69,65],
[69,73,64,0,65,60,65,56,58,67],
[72,82,69,66,0,75,63,64,63,68],
[68,64,58,71,56,0,63,67,61,61],
[72,67,56,66,68,68,0,70,59,74],
[71,79,63,75,67,64,61,0,69,69],
[81,89,62,73,68,70,72,62,0,70],
[74,79,66,64,63,70,57,62,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,60,68,69,52,59,69,65],
[73,0,75,65,69,74,65,71,60,55],
[70,56,0,50,59,69,48,62,60,60],
[71,66,81,0,67,84,60,70,71,62],
[63,62,72,64,0,75,60,62,70,68],
[62,57,62,47,56,0,54,56,52,50],
[79,66,83,71,71,77,0,73,74,64],
[72,60,69,61,69,75,58,0,62,60],
[62,71,71,60,61,79,57,69,0,56],
[66,76,71,69,63,81,67,71,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,69,72,72,74,69,68,64],
[60,0,65,74,64,64,69,64,66,62],
[65,66,0,65,65,64,62,70,74,73],
[62,57,66,0,68,66,64,63,67,54],
[59,67,66,63,0,61,61,64,65,63],
[59,67,67,65,70,0,68,64,68,61],
[57,62,69,67,70,63,0,67,67,66],
[62,67,61,68,67,67,64,0,59,59],
[63,65,57,64,66,63,64,72,0,62],
[67,69,58,77,68,70,65,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,68,73,81,74,64,71,72,68],
[52,0,47,57,67,71,57,60,74,55],
[63,84,0,63,66,72,57,65,74,58],
[58,74,68,0,79,84,69,72,76,64],
[50,64,65,52,0,69,55,56,75,57],
[57,60,59,47,62,0,57,67,52,49],
[67,74,74,62,76,74,0,67,77,73],
[60,71,66,59,75,64,64,0,71,64],
[59,57,57,55,56,79,54,60,0,59],
[63,76,73,67,74,82,58,67,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,73,89,53,82,80,69,76,56],
[77,0,75,74,58,74,75,57,103,53],
[58,56,0,49,42,60,41,62,75,48],
[42,57,82,0,46,53,34,48,68,40],
[78,73,89,85,0,83,76,71,104,63],
[49,57,71,78,48,0,44,51,86,41],
[51,56,90,97,55,87,0,63,92,43],
[62,74,69,83,60,80,68,0,89,69],
[55,28,56,63,27,45,39,42,0,19],
[75,78,83,91,68,90,88,62,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,74,69,75,61,68,55,66],
[64,0,73,67,67,79,62,75,49,59],
[64,58,0,64,61,69,63,64,52,52],
[57,64,67,0,67,65,56,70,58,64],
[62,64,70,64,0,68,68,69,60,58],
[56,52,62,66,63,0,55,73,49,64],
[70,69,68,75,63,76,0,79,67,56],
[63,56,67,61,62,58,52,0,47,62],
[76,82,79,73,71,82,64,84,0,67],
[65,72,79,67,73,67,75,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,87,66,50,66,63,58,62],
[66,0,66,80,60,59,66,54,63,54],
[61,65,0,72,64,64,53,54,61,66],
[44,51,59,0,51,62,43,45,39,47],
[65,71,67,80,0,79,51,67,66,53],
[81,72,67,69,52,0,68,60,63,48],
[65,65,78,88,80,63,0,64,56,61],
[68,77,77,86,64,71,67,0,77,55],
[73,68,70,92,65,68,75,54,0,60],
[69,77,65,84,78,83,70,76,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,64,56,64,64,46,50,65],
[65,0,64,51,59,50,57,60,47,56],
[68,67,0,60,50,61,78,72,59,66],
[67,80,71,0,68,63,70,75,57,70],
[75,72,81,63,0,74,73,76,66,88],
[67,81,70,68,57,0,77,72,69,63],
[67,74,53,61,58,54,0,58,53,57],
[85,71,59,56,55,59,73,0,63,73],
[81,84,72,74,65,62,78,68,0,78],
[66,75,65,61,43,68,74,58,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,51,74,67,56,59,67,46,53],
[72,0,76,68,73,71,60,68,57,60],
[80,55,0,63,66,54,67,74,61,63],
[57,63,68,0,52,58,55,68,46,55],
[64,58,65,79,0,65,60,72,57,60],
[75,60,77,73,66,0,65,72,57,62],
[72,71,64,76,71,66,0,80,61,67],
[64,63,57,63,59,59,51,0,35,55],
[85,74,70,85,74,74,70,96,0,55],
[78,71,68,76,71,69,64,76,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,63,64,68,63,69,56,77],
[65,0,78,67,74,71,68,71,68,81],
[68,53,0,60,63,59,66,65,55,70],
[68,64,71,0,71,67,70,78,63,71],
[67,57,68,60,0,66,70,69,61,73],
[63,60,72,64,65,0,71,76,64,71],
[68,63,65,61,61,60,0,67,64,70],
[62,60,66,53,62,55,64,0,55,71],
[75,63,76,68,70,67,67,76,0,72],
[54,50,61,60,58,60,61,60,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,66,59,73,74,62,53,47,72],
[72,0,55,75,68,81,77,79,52,74],
[65,76,0,57,62,78,70,58,66,63],
[72,56,74,0,76,79,77,73,66,63],
[58,63,69,55,0,76,58,68,47,57],
[57,50,53,52,55,0,59,60,51,55],
[69,54,61,54,73,72,0,54,72,67],
[78,52,73,58,63,71,77,0,48,62],
[84,79,65,65,84,80,59,83,0,73],
[59,57,68,68,74,76,64,69,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,67,69,74,78,64,77,69,61],
[57,0,61,66,68,61,59,63,60,54],
[64,70,0,65,67,71,68,78,68,71],
[62,65,66,0,71,73,59,69,68,58],
[57,63,64,60,0,73,66,83,62,61],
[53,70,60,58,58,0,54,71,48,58],
[67,72,63,72,65,77,0,82,74,71],
[54,68,53,62,48,60,49,0,56,58],
[62,71,63,63,69,83,57,75,0,54],
[70,77,60,73,70,73,60,73,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,80,69,87,62,85,70,88,76],
[65,0,82,67,80,79,71,78,92,80],
[51,49,0,62,76,61,69,50,75,53],
[62,64,69,0,79,68,67,72,91,81],
[44,51,55,52,0,61,80,58,78,53],
[69,52,70,63,70,0,81,75,84,67],
[46,60,62,64,51,50,0,61,67,63],
[61,53,81,59,73,56,70,0,68,66],
[43,39,56,40,53,47,64,63,0,50],
[55,51,78,50,78,64,68,65,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,56,63,45,55,44,73,17,54],
[94,0,87,82,83,83,63,64,66,73],
[75,44,0,52,44,63,54,54,47,64],
[68,49,79,0,57,66,55,56,49,47],
[86,48,87,74,0,76,65,65,67,66],
[76,48,68,65,55,0,65,56,66,84],
[87,68,77,76,66,66,0,76,76,65],
[58,67,77,75,66,75,55,0,56,38],
[114,65,84,82,64,65,55,75,0,75],
[77,58,67,84,65,47,66,93,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,56,51,59,55,51,56,46,51],
[73,0,74,70,73,69,67,63,62,68],
[75,57,0,73,65,62,65,67,57,59],
[80,61,58,0,58,64,64,66,45,61],
[72,58,66,73,0,67,59,60,59,59],
[76,62,69,67,64,0,65,65,59,63],
[80,64,66,67,72,66,0,70,71,63],
[75,68,64,65,71,66,61,0,60,69],
[85,69,74,86,72,72,60,71,0,64],
[80,63,72,70,72,68,68,62,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,57,62,63,63,68,66,70,71],
[76,0,65,76,70,76,79,61,66,80],
[74,66,0,69,65,77,64,64,63,72],
[69,55,62,0,67,62,61,68,64,57],
[68,61,66,64,0,68,78,67,69,75],
[68,55,54,69,63,0,69,68,56,68],
[63,52,67,70,53,62,0,66,54,65],
[65,70,67,63,64,63,65,0,69,73],
[61,65,68,67,62,75,77,62,0,61],
[60,51,59,74,56,63,66,58,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,77,89,78,79,66,72,89,65],
[66,0,66,81,77,70,69,55,86,61],
[54,65,0,71,72,71,69,64,72,95],
[42,50,60,0,54,58,59,57,55,59],
[53,54,59,77,0,57,84,56,64,54],
[52,61,60,73,74,0,70,57,57,58],
[65,62,62,72,47,61,0,52,79,60],
[59,76,67,74,75,74,79,0,78,73],
[42,45,59,76,67,74,52,53,0,64],
[66,70,36,72,77,73,71,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,60,65,53,64,76,66,62],
[69,0,69,64,67,60,68,78,69,62],
[61,62,0,55,61,67,66,69,64,67],
[71,67,76,0,71,59,76,81,69,72],
[66,64,70,60,0,57,71,76,64,61],
[78,71,64,72,74,0,81,77,73,75],
[67,63,65,55,60,50,0,71,66,63],
[55,53,62,50,55,54,60,0,55,55],
[65,62,67,62,67,58,65,76,0,61],
[69,69,64,59,70,56,68,76,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,59,62,65,71,63,62,60,64],
[71,0,60,65,68,73,66,63,57,68],
[72,71,0,79,70,68,68,65,68,70],
[69,66,52,0,52,59,63,54,52,57],
[66,63,61,79,0,67,66,67,64,66],
[60,58,63,72,64,0,73,60,59,57],
[68,65,63,68,65,58,0,68,58,71],
[69,68,66,77,64,71,63,0,59,62],
[71,74,63,79,67,72,73,72,0,71],
[67,63,61,74,65,74,60,69,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,69,58,71,66,60,67,64,66],
[61,0,61,57,64,55,62,63,61,63],
[62,70,0,69,73,66,67,64,71,68],
[73,74,62,0,70,63,57,73,65,77],
[60,67,58,61,0,64,60,59,67,61],
[65,76,65,68,67,0,67,73,80,83],
[71,69,64,74,71,64,0,63,66,68],
[64,68,67,58,72,58,68,0,70,66],
[67,70,60,66,64,51,65,61,0,62],
[65,68,63,54,70,48,63,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,70,58,59,77,59,81,62,53],
[59,0,62,65,43,70,62,73,64,40],
[61,69,0,63,64,57,56,73,57,55],
[73,66,68,0,58,84,68,72,81,65],
[72,88,67,73,0,78,82,78,63,68],
[54,61,74,47,53,0,56,70,62,43],
[72,69,75,63,49,75,0,67,67,47],
[50,58,58,59,53,61,64,0,61,41],
[69,67,74,50,68,69,64,70,0,64],
[78,91,76,66,63,88,84,90,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,58,62,57,81,66,59,55,66],
[67,0,58,61,72,64,70,70,64,72],
[73,73,0,57,70,71,67,62,59,64],
[69,70,74,0,66,67,62,61,64,53],
[74,59,61,65,0,64,66,70,59,63],
[50,67,60,64,67,0,59,59,58,67],
[65,61,64,69,65,72,0,70,62,58],
[72,61,69,70,61,72,61,0,66,70],
[76,67,72,67,72,73,69,65,0,66],
[65,59,67,78,68,64,73,61,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,104,77,92,65,91,89,92,92],
[55,0,105,53,81,66,67,52,106,81],
[27,26,0,39,67,40,53,51,80,39],
[54,78,92,0,92,93,65,89,92,92],
[39,50,64,39,0,64,26,51,79,39],
[66,65,91,38,67,0,53,51,79,79],
[40,64,78,66,105,78,0,77,91,104],
[42,79,80,42,80,80,54,0,106,80],
[39,25,51,39,52,52,40,25,0,26],
[39,50,92,39,92,52,27,51,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,75,74,74,78,81,82,57,69],
[69,0,83,78,81,82,84,97,60,77],
[56,48,0,58,61,53,71,71,60,52],
[57,53,73,0,68,57,65,67,61,63],
[57,50,70,63,0,61,74,73,58,54],
[53,49,78,74,70,0,75,81,53,54],
[50,47,60,66,57,56,0,68,56,54],
[49,34,60,64,58,50,63,0,47,45],
[74,71,71,70,73,78,75,84,0,62],
[62,54,79,68,77,77,77,86,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,52,47,50,60,60,51,55,65],
[74,0,54,59,66,72,63,53,65,73],
[79,77,0,66,71,75,69,62,71,70],
[84,72,65,0,62,74,60,56,68,73],
[81,65,60,69,0,81,65,64,69,70],
[71,59,56,57,50,0,62,58,56,65],
[71,68,62,71,66,69,0,66,65,67],
[80,78,69,75,67,73,65,0,70,70],
[76,66,60,63,62,75,66,61,0,70],
[66,58,61,58,61,66,64,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,66,58,68,64,65,71,71,61],
[64,0,57,71,63,66,65,73,73,59],
[65,74,0,68,62,71,65,77,74,69],
[73,60,63,0,67,73,66,75,79,58],
[63,68,69,64,0,58,58,68,66,64],
[67,65,60,58,73,0,60,70,71,65],
[66,66,66,65,73,71,0,74,73,65],
[60,58,54,56,63,61,57,0,64,65],
[60,58,57,52,65,60,58,67,0,59],
[70,72,62,73,67,66,66,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,68,75,84,66,74,77,76,63],
[55,0,70,86,76,57,60,59,81,61],
[63,61,0,78,70,60,52,63,63,51],
[56,45,53,0,69,52,47,53,71,46],
[47,55,61,62,0,45,51,49,71,36],
[65,74,71,79,86,0,52,71,77,61],
[57,71,79,84,80,79,0,72,91,68],
[54,72,68,78,82,60,59,0,79,62],
[55,50,68,60,60,54,40,52,0,43],
[68,70,80,85,95,70,63,69,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,72,61,80,51,64,48,58,88],
[84,0,78,85,91,64,58,92,84,87],
[59,53,0,60,78,52,79,60,56,99],
[70,46,71,0,87,43,66,70,57,92],
[51,40,53,44,0,51,32,52,47,58],
[80,67,79,88,80,0,61,59,33,86],
[67,73,52,65,99,70,0,66,64,78],
[83,39,71,61,79,72,65,0,51,60],
[73,47,75,74,84,98,67,80,0,80],
[43,44,32,39,73,45,53,71,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,76,74,64,72,68,66,75,69],
[54,0,58,65,56,73,63,62,64,67],
[55,73,0,75,69,75,62,65,74,75],
[57,66,56,0,63,71,58,64,70,60],
[67,75,62,68,0,83,68,70,76,69],
[59,58,56,60,48,0,55,59,61,58],
[63,68,69,73,63,76,0,68,71,69],
[65,69,66,67,61,72,63,0,74,63],
[56,67,57,61,55,70,60,57,0,73],
[62,64,56,71,62,73,62,68,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,71,63,76,73,66,63,68],
[65,0,67,63,62,65,68,65,62,63],
[66,64,0,75,76,75,77,78,66,82],
[60,68,56,0,64,73,64,67,58,62],
[68,69,55,67,0,70,67,68,64,61],
[55,66,56,58,61,0,69,56,56,56],
[58,63,54,67,64,62,0,61,48,51],
[65,66,53,64,63,75,70,0,62,63],
[68,69,65,73,67,75,83,69,0,71],
[63,68,49,69,70,75,80,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,58,43,43,35,46,18,43,58],
[101,0,79,67,67,45,78,55,67,80],
[73,52,0,61,58,64,64,51,45,77],
[88,64,70,0,64,66,60,52,63,63],
[88,64,73,67,0,65,67,59,49,78],
[96,86,67,65,66,0,82,67,63,75],
[85,53,67,71,64,49,0,48,54,67],
[113,76,80,79,72,64,83,0,60,83],
[88,64,86,68,82,68,77,71,0,77],
[73,51,54,68,53,56,64,48,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,72,69,68,66,69,64,57,66],
[67,0,66,59,46,69,57,67,51,59],
[59,65,0,65,66,63,58,73,52,77],
[62,72,66,0,55,63,64,64,60,62],
[63,85,65,76,0,65,61,73,58,68],
[65,62,68,68,66,0,66,70,67,61],
[62,74,73,67,70,65,0,67,61,62],
[67,64,58,67,58,61,64,0,57,62],
[74,80,79,71,73,64,70,74,0,68],
[65,72,54,69,63,70,69,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,67,59,61,58,59,64,55],
[70,0,65,73,61,66,78,62,71,56],
[68,66,0,70,65,75,67,59,75,55],
[64,58,61,0,65,55,61,63,63,52],
[72,70,66,66,0,63,70,68,71,69],
[70,65,56,76,68,0,65,65,74,55],
[73,53,64,70,61,66,0,69,68,57],
[72,69,72,68,63,66,62,0,66,56],
[67,60,56,68,60,57,63,65,0,51],
[76,75,76,79,62,76,74,75,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,70,73,60,51,82,72,73,62],
[65,0,72,69,78,67,66,72,66,66],
[61,59,0,67,64,55,65,61,64,64],
[58,62,64,0,61,59,71,70,68,56],
[71,53,67,70,0,61,65,70,69,60],
[80,64,76,72,70,0,72,77,73,64],
[49,65,66,60,66,59,0,70,66,50],
[59,59,70,61,61,54,61,0,68,65],
[58,65,67,63,62,58,65,63,0,59],
[69,65,67,75,71,67,81,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,74,75,70,59,64,65,69],
[61,0,67,66,61,62,59,59,60,73],
[68,64,0,63,63,57,55,59,63,63],
[57,65,68,0,67,65,71,65,69,77],
[56,70,68,64,0,61,57,62,58,65],
[61,69,74,66,70,0,63,64,67,75],
[72,72,76,60,74,68,0,68,65,77],
[67,72,72,66,69,67,63,0,64,71],
[66,71,68,62,73,64,66,67,0,75],
[62,58,68,54,66,56,54,60,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,58,59,72,65,56,71,73,66],
[47,0,46,42,60,55,49,66,55,53],
[73,85,0,74,75,62,59,73,63,65],
[72,89,57,0,76,64,66,82,71,62],
[59,71,56,55,0,62,59,77,59,62],
[66,76,69,67,69,0,64,73,65,55],
[75,82,72,65,72,67,0,68,65,66],
[60,65,58,49,54,58,63,0,56,61],
[58,76,68,60,72,66,66,75,0,71],
[65,78,66,69,69,76,65,70,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,66,62,78,61,61,58,69,53],
[53,0,54,66,69,67,69,62,65,59],
[65,77,0,67,76,63,68,75,66,67],
[69,65,64,0,63,64,58,65,61,56],
[53,62,55,68,0,63,62,59,60,44],
[70,64,68,67,68,0,67,68,62,61],
[70,62,63,73,69,64,0,62,64,64],
[73,69,56,66,72,63,69,0,65,64],
[62,66,65,70,71,69,67,66,0,54],
[78,72,64,75,87,70,67,67,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,67,63,56,64,62,57,65,73],
[70,0,70,66,56,70,67,66,62,73],
[64,61,0,62,61,70,64,64,64,79],
[68,65,69,0,66,79,71,70,66,71],
[75,75,70,65,0,73,74,66,71,85],
[67,61,61,52,58,0,70,63,62,70],
[69,64,67,60,57,61,0,63,65,70],
[74,65,67,61,65,68,68,0,67,70],
[66,69,67,65,60,69,66,64,0,73],
[58,58,52,60,46,61,61,61,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,62,59,69,57,69,72,73,54],
[58,0,65,63,66,62,69,70,69,65],
[69,66,0,62,68,61,69,73,71,60],
[72,68,69,0,79,62,77,73,81,69],
[62,65,63,52,0,64,64,67,78,56],
[74,69,70,69,67,0,78,78,69,53],
[62,62,62,54,67,53,0,74,60,55],
[59,61,58,58,64,53,57,0,64,56],
[58,62,60,50,53,62,71,67,0,55],
[77,66,71,62,75,78,76,75,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,74,71,74,76,70,76,59,79],
[63,0,69,59,72,71,70,64,59,77],
[57,62,0,63,81,69,73,66,53,65],
[60,72,68,0,69,70,72,80,68,67],
[57,59,50,62,0,55,68,65,48,58],
[55,60,62,61,76,0,63,61,55,63],
[61,61,58,59,63,68,0,62,51,73],
[55,67,65,51,66,70,69,0,59,56],
[72,72,78,63,83,76,80,72,0,72],
[52,54,66,64,73,68,58,75,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,67,73,81,65,66,66,61],
[62,0,69,61,63,73,70,56,61,60],
[61,62,0,58,61,76,66,61,68,61],
[64,70,73,0,68,81,65,62,62,61],
[58,68,70,63,0,78,67,60,66,68],
[50,58,55,50,53,0,60,50,56,52],
[66,61,65,66,64,71,0,67,62,62],
[65,75,70,69,71,81,64,0,69,66],
[65,70,63,69,65,75,69,62,0,57],
[70,71,70,70,63,79,69,65,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,61,54,53,66,68,63,77,76],
[82,0,76,57,75,80,75,80,82,85],
[70,55,0,63,61,72,68,68,68,87],
[77,74,68,0,59,82,70,72,75,85],
[78,56,70,72,0,77,74,73,72,82],
[65,51,59,49,54,0,59,58,71,70],
[63,56,63,61,57,72,0,66,70,72],
[68,51,63,59,58,73,65,0,74,69],
[54,49,63,56,59,60,61,57,0,74],
[55,46,44,46,49,61,59,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,64,57,55,79,72,80,77,85],
[76,0,62,61,60,57,65,64,40,63],
[67,69,0,40,46,56,65,71,68,70],
[74,70,91,0,68,65,76,65,70,77],
[76,71,85,63,0,93,79,78,78,91],
[52,74,75,66,38,0,47,48,81,69],
[59,66,66,55,52,84,0,76,75,76],
[51,67,60,66,53,83,55,0,81,68],
[54,91,63,61,53,50,56,50,0,78],
[46,68,61,54,40,62,55,63,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,56,63,63,80,72,60,63,66],
[59,0,61,62,66,81,72,61,64,76],
[75,70,0,67,63,79,83,71,74,69],
[68,69,64,0,67,83,77,66,70,61],
[68,65,68,64,0,76,72,66,68,67],
[51,50,52,48,55,0,67,54,53,54],
[59,59,48,54,59,64,0,56,65,60],
[71,70,60,65,65,77,75,0,69,73],
[68,67,57,61,63,78,66,62,0,68],
[65,55,62,70,64,77,71,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,66,50,76,49,65,78,75,64],
[56,0,21,43,46,40,75,47,65,28],
[65,110,0,73,99,72,85,77,86,75],
[81,88,58,0,93,66,68,70,81,77],
[55,85,32,38,0,49,74,65,62,63],
[82,91,59,65,82,0,91,59,67,90],
[66,56,46,63,57,40,0,59,76,43],
[53,84,54,61,66,72,72,0,74,50],
[56,66,45,50,69,64,55,57,0,43],
[67,103,56,54,68,41,88,81,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,87,77,64,51,64,64,64,81],
[60,0,83,87,55,59,74,79,68,85],
[44,48,0,76,65,55,50,70,46,56],
[54,44,55,0,59,53,63,70,58,57],
[67,76,66,72,0,58,74,71,52,65],
[80,72,76,78,73,0,79,61,77,69],
[67,57,81,68,57,52,0,62,75,63],
[67,52,61,61,60,70,69,0,47,68],
[67,63,85,73,79,54,56,84,0,82],
[50,46,75,74,66,62,68,63,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,60,56,47,69,61,60,48,64],
[58,0,57,55,54,57,52,60,69,67],
[71,74,0,72,60,76,64,76,68,68],
[75,76,59,0,57,78,67,62,67,73],
[84,77,71,74,0,86,74,77,63,81],
[62,74,55,53,45,0,53,71,58,63],
[70,79,67,64,57,78,0,77,76,75],
[71,71,55,69,54,60,54,0,57,71],
[83,62,63,64,68,73,55,74,0,85],
[67,64,63,58,50,68,56,60,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,52,48,56,62,66,60,67,51],
[77,0,71,63,80,72,67,58,70,67],
[79,60,0,54,84,58,77,50,75,59],
[83,68,77,0,81,80,89,77,75,63],
[75,51,47,50,0,55,54,45,70,50],
[69,59,73,51,76,0,73,44,72,58],
[65,64,54,42,77,58,0,47,67,59],
[71,73,81,54,86,87,84,0,78,66],
[64,61,56,56,61,59,64,53,0,50],
[80,64,72,68,81,73,72,65,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,56,70,44,80,50,61,53,64],
[63,0,42,61,50,87,43,49,57,66],
[75,89,0,69,59,81,69,81,53,74],
[61,70,62,0,38,86,37,42,46,76],
[87,81,72,93,0,105,67,68,64,74],
[51,44,50,45,26,0,31,50,47,51],
[81,88,62,94,64,100,0,74,71,80],
[70,82,50,89,63,81,57,0,72,79],
[78,74,78,85,67,84,60,59,0,47],
[67,65,57,55,57,80,51,52,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,56,73,69,55,50,74,67,68],
[67,0,72,59,68,59,62,79,62,67],
[75,59,0,70,59,67,61,70,72,62],
[58,72,61,0,66,69,54,62,74,63],
[62,63,72,65,0,60,78,77,64,61],
[76,72,64,62,71,0,58,87,75,70],
[81,69,70,77,53,73,0,62,78,84],
[57,52,61,69,54,44,69,0,42,51],
[64,69,59,57,67,56,53,89,0,53],
[63,64,69,68,70,61,47,80,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,62,57,62,73,64,48,65,55],
[77,0,68,68,72,76,69,68,69,64],
[69,63,0,72,62,76,72,62,60,66],
[74,63,59,0,64,71,74,60,45,62],
[69,59,69,67,0,70,77,47,64,63],
[58,55,55,60,61,0,67,55,56,63],
[67,62,59,57,54,64,0,52,59,67],
[83,63,69,71,84,76,79,0,72,68],
[66,62,71,86,67,75,72,59,0,63],
[76,67,65,69,68,68,64,63,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,56,65,66,57,70,68,54,70],
[60,0,61,65,62,61,64,55,58,65],
[75,70,0,72,67,67,70,64,59,73],
[66,66,59,0,64,58,65,53,52,60],
[65,69,64,67,0,54,62,52,60,69],
[74,70,64,73,77,0,64,67,61,80],
[61,67,61,66,69,67,0,64,65,74],
[63,76,67,78,79,64,67,0,67,73],
[77,73,72,79,71,70,66,64,0,68],
[61,66,58,71,62,51,57,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,69,65,53,57,62,57,59],
[66,0,55,61,58,53,49,60,58,57],
[65,76,0,60,69,61,56,62,60,68],
[62,70,71,0,72,59,57,72,67,65],
[66,73,62,59,0,58,61,68,70,55],
[78,78,70,72,73,0,68,74,65,72],
[74,82,75,74,70,63,0,77,70,80],
[69,71,69,59,63,57,54,0,59,59],
[74,73,71,64,61,66,61,72,0,60],
[72,74,63,66,76,59,51,72,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,69,84,63,74,72,66,67,68],
[54,0,63,74,56,71,57,56,55,56],
[62,68,0,79,59,66,58,55,46,66],
[47,57,52,0,46,69,52,54,50,54],
[68,75,72,85,0,79,65,62,58,72],
[57,60,65,62,52,0,59,50,53,63],
[59,74,73,79,66,72,0,62,64,76],
[65,75,76,77,69,81,69,0,51,71],
[64,76,85,81,73,78,67,80,0,77],
[63,75,65,77,59,68,55,60,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,77,64,69,67,69,67,68,60],
[57,0,62,57,60,60,61,54,59,60],
[54,69,0,56,57,59,57,58,52,49],
[67,74,75,0,58,63,65,66,66,67],
[62,71,74,73,0,65,67,67,69,68],
[64,71,72,68,66,0,66,57,66,59],
[62,70,74,66,64,65,0,64,61,62],
[64,77,73,65,64,74,67,0,64,58],
[63,72,79,65,62,65,70,67,0,62],
[71,71,82,64,63,72,69,73,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,61,56,65,59,78,59,61,64],
[78,0,54,69,72,60,68,54,67,60],
[70,77,0,62,73,71,77,71,67,75],
[75,62,69,0,65,59,79,64,69,63],
[66,59,58,66,0,59,72,64,69,64],
[72,71,60,72,72,0,71,62,71,66],
[53,63,54,52,59,60,0,56,45,59],
[72,77,60,67,67,69,75,0,62,67],
[70,64,64,62,62,60,86,69,0,75],
[67,71,56,68,67,65,72,64,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,62,59,48,64,69,65,58,79],
[63,0,72,59,60,67,69,69,67,68],
[69,59,0,50,51,71,71,69,57,72],
[72,72,81,0,72,66,79,71,56,72],
[83,71,80,59,0,81,74,69,68,85],
[67,64,60,65,50,0,62,72,65,78],
[62,62,60,52,57,69,0,56,45,74],
[66,62,62,60,62,59,75,0,56,62],
[73,64,74,75,63,66,86,75,0,80],
[52,63,59,59,46,53,57,69,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,62,61,58,58,57,63,70,59],
[64,0,66,61,63,60,55,67,73,61],
[69,65,0,59,66,64,59,69,71,69],
[70,70,72,0,69,71,61,73,71,64],
[73,68,65,62,0,69,67,76,71,60],
[73,71,67,60,62,0,56,70,75,65],
[74,76,72,70,64,75,0,73,73,67],
[68,64,62,58,55,61,58,0,73,56],
[61,58,60,60,60,56,58,58,0,57],
[72,70,62,67,71,66,64,75,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,58,68,69,56,72,80,57,64],
[45,0,60,69,51,62,52,58,40,53],
[73,71,0,65,60,60,49,71,46,71],
[63,62,66,0,63,71,63,64,68,68],
[62,80,71,68,0,70,75,84,64,77],
[75,69,71,60,61,0,62,94,71,93],
[59,79,82,68,56,69,0,78,60,71],
[51,73,60,67,47,37,53,0,42,68],
[74,91,85,63,67,60,71,89,0,79],
[67,78,60,63,54,38,60,63,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,58,60,64,69,57,50,61,59],
[60,0,63,74,57,62,55,57,52,63],
[73,68,0,75,68,65,69,67,63,70],
[71,57,56,0,58,55,67,57,53,53],
[67,74,63,73,0,67,66,59,64,67],
[62,69,66,76,64,0,66,65,62,67],
[74,76,62,64,65,65,0,64,57,63],
[81,74,64,74,72,66,67,0,67,68],
[70,79,68,78,67,69,74,64,0,64],
[72,68,61,78,64,64,68,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,61,55,64,50,62,57,63,61],
[78,0,68,57,72,66,68,70,64,81],
[70,63,0,69,83,66,73,67,63,75],
[76,74,62,0,76,67,63,62,66,74],
[67,59,48,55,0,58,60,58,58,69],
[81,65,65,64,73,0,62,65,60,69],
[69,63,58,68,71,69,0,66,64,62],
[74,61,64,69,73,66,65,0,69,66],
[68,67,68,65,73,71,67,62,0,70],
[70,50,56,57,62,62,69,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,78,66,61,66,85,67,76,66],
[53,0,53,51,49,51,46,61,59,50],
[53,78,0,54,50,63,75,57,57,58],
[65,80,77,0,67,72,76,71,66,72],
[70,82,81,64,0,78,73,67,72,74],
[65,80,68,59,53,0,57,68,72,55],
[46,85,56,55,58,74,0,70,66,67],
[64,70,74,60,64,63,61,0,73,65],
[55,72,74,65,59,59,65,58,0,68],
[65,81,73,59,57,76,64,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,66,78,64,66,68,65,69,73],
[53,0,65,65,54,56,54,45,48,65],
[65,66,0,69,59,51,55,59,64,63],
[53,66,62,0,52,54,59,48,54,63],
[67,77,72,79,0,68,73,64,69,74],
[65,75,80,77,63,0,68,71,60,87],
[63,77,76,72,58,63,0,64,71,66],
[66,86,72,83,67,60,67,0,65,74],
[62,83,67,77,62,71,60,66,0,85],
[58,66,68,68,57,44,65,57,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,70,61,64,66,75,73,64],
[60,0,65,62,63,69,66,81,68,71],
[64,66,0,66,70,78,73,75,73,66],
[61,69,65,0,64,70,66,79,65,66],
[70,68,61,67,0,68,66,78,68,58],
[67,62,53,61,63,0,63,70,69,55],
[65,65,58,65,65,68,0,68,65,57],
[56,50,56,52,53,61,63,0,57,56],
[58,63,58,66,63,62,66,74,0,61],
[67,60,65,65,73,76,74,75,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,59,70,60,63,62,69,54,61],
[89,0,89,93,65,75,84,88,79,84],
[72,42,0,74,68,73,73,72,63,64],
[61,38,57,0,39,49,54,57,50,57],
[71,66,63,92,0,69,75,77,63,80],
[68,56,58,82,62,0,64,71,61,66],
[69,47,58,77,56,67,0,66,61,60],
[62,43,59,74,54,60,65,0,50,55],
[77,52,68,81,68,70,70,81,0,73],
[70,47,67,74,51,65,71,76,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,57,60,61,71,50,58,53,55],
[66,0,60,62,81,69,67,64,66,61],
[74,71,0,80,75,83,77,64,65,83],
[71,69,51,0,86,92,54,74,70,79],
[70,50,56,45,0,72,57,47,52,67],
[60,62,48,39,59,0,51,51,51,54],
[81,64,54,77,74,80,0,74,75,75],
[73,67,67,57,84,80,57,0,68,74],
[78,65,66,61,79,80,56,63,0,74],
[76,70,48,52,64,77,56,57,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,74,72,64,73,63,70,58],
[61,0,55,56,68,67,63,57,67,60],
[68,76,0,60,67,71,79,74,71,58],
[57,75,71,0,67,62,66,63,56,68],
[59,63,64,64,0,55,57,62,69,61],
[67,64,60,69,76,0,69,69,62,58],
[58,68,52,65,74,62,0,55,55,58],
[68,74,57,68,69,62,76,0,65,75],
[61,64,60,75,62,69,76,66,0,64],
[73,71,73,63,70,73,73,56,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,66,64,67,72,69,76,61],
[73,0,67,68,75,75,76,58,82,72],
[70,64,0,69,75,74,67,67,70,65],
[65,63,62,0,64,80,70,69,73,71],
[67,56,56,67,0,67,69,65,78,59],
[64,56,57,51,64,0,64,56,58,68],
[59,55,64,61,62,67,0,62,60,55],
[62,73,64,62,66,75,69,0,75,70],
[55,49,61,58,53,73,71,56,0,62],
[70,59,66,60,72,63,76,61,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,51,67,53,64,64,65,62,62],
[69,0,50,58,58,63,70,70,72,70],
[80,81,0,72,68,76,79,70,64,77],
[64,73,59,0,66,69,72,75,71,65],
[78,73,63,65,0,59,72,75,75,68],
[67,68,55,62,72,0,64,77,57,64],
[67,61,52,59,59,67,0,55,51,54],
[66,61,61,56,56,54,76,0,56,58],
[69,59,67,60,56,74,80,75,0,64],
[69,61,54,66,63,67,77,73,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,52,73,57,59,68,84,55,61],
[73,0,65,73,79,81,70,86,58,56],
[79,66,0,70,70,66,77,73,58,55],
[58,58,61,0,80,72,63,82,71,48],
[74,52,61,51,0,65,79,81,61,60],
[72,50,65,59,66,0,63,90,57,58],
[63,61,54,68,52,68,0,73,62,70],
[47,45,58,49,50,41,58,0,57,47],
[76,73,73,60,70,74,69,74,0,69],
[70,75,76,83,71,73,61,84,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,69,62,63,57,73,69,63],
[59,0,66,58,55,61,57,64,60,56],
[67,65,0,65,67,65,56,72,68,66],
[62,73,66,0,50,58,53,59,74,56],
[69,76,64,81,0,67,68,69,67,55],
[68,70,66,73,64,0,62,79,66,72],
[74,74,75,78,63,69,0,81,80,65],
[58,67,59,72,62,52,50,0,62,57],
[62,71,63,57,64,65,51,69,0,67],
[68,75,65,75,76,59,66,74,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,64,77,68,71,63,58,70,70],
[54,0,63,69,56,63,56,56,60,59],
[67,68,0,70,69,65,62,56,65,66],
[54,62,61,0,64,60,60,63,64,64],
[63,75,62,67,0,68,68,61,73,66],
[60,68,66,71,63,0,64,58,66,58],
[68,75,69,71,63,67,0,56,68,64],
[73,75,75,68,70,73,75,0,69,65],
[61,71,66,67,58,65,63,62,0,65],
[61,72,65,67,65,73,67,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,71,67,53,56,73,72,70,66],
[72,0,76,68,61,67,65,68,78,64],
[60,55,0,53,60,45,51,62,71,65],
[64,63,78,0,57,60,67,73,75,66],
[78,70,71,74,0,59,67,68,72,65],
[75,64,86,71,72,0,67,71,83,75],
[58,66,80,64,64,64,0,70,77,77],
[59,63,69,58,63,60,61,0,68,72],
[61,53,60,56,59,48,54,63,0,59],
[65,67,66,65,66,56,54,59,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,55,64,55,55,65,65,64,58],
[71,0,53,63,67,61,60,67,65,61],
[76,78,0,83,72,67,63,73,71,72],
[67,68,48,0,65,54,60,60,60,52],
[76,64,59,66,0,67,69,69,63,59],
[76,70,64,77,64,0,72,69,68,69],
[66,71,68,71,62,59,0,71,69,61],
[66,64,58,71,62,62,60,0,68,58],
[67,66,60,71,68,63,62,63,0,54],
[73,70,59,79,72,62,70,73,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,75,70,82,75,70,69,63,85],
[62,0,62,67,59,68,65,53,53,66],
[56,69,0,68,65,76,68,62,66,71],
[61,64,63,0,63,65,64,61,64,84],
[49,72,66,68,0,85,76,62,64,89],
[56,63,55,66,46,0,68,54,55,66],
[61,66,63,67,55,63,0,51,57,70],
[62,78,69,70,69,77,80,0,74,85],
[68,78,65,67,67,76,74,57,0,74],
[46,65,60,47,42,65,61,46,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,64,73,71,72,64,78,68,68],
[54,0,52,63,55,61,52,52,60,54],
[67,79,0,65,64,68,59,73,64,68],
[58,68,66,0,63,74,52,67,64,65],
[60,76,67,68,0,77,61,67,71,67],
[59,70,63,57,54,0,56,57,65,64],
[67,79,72,79,70,75,0,59,61,66],
[53,79,58,64,64,74,72,0,65,69],
[63,71,67,67,60,66,70,66,0,61],
[63,77,63,66,64,67,65,62,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,78,63,72,53,82,82,53,73],
[48,0,49,39,58,61,79,59,40,70],
[53,82,0,62,71,74,83,62,63,72],
[68,92,69,0,67,82,78,58,63,92],
[59,73,60,64,0,92,79,71,64,74],
[78,70,57,49,39,0,79,58,39,60],
[49,52,48,53,52,52,0,50,52,53],
[49,72,69,73,60,73,81,0,82,62],
[78,91,68,68,67,92,79,49,0,79],
[58,61,59,39,57,71,78,69,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,61,50,64,39,42,54,53,53],
[74,0,59,66,72,65,58,61,63,76],
[70,72,0,69,73,65,71,64,65,79],
[81,65,62,0,86,59,50,64,64,81],
[67,59,58,45,0,54,62,62,51,59],
[92,66,66,72,77,0,68,63,71,68],
[89,73,60,81,69,63,0,73,68,83],
[77,70,67,67,69,68,58,0,60,82],
[78,68,66,67,80,60,63,71,0,73],
[78,55,52,50,72,63,48,49,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,65,62,82,80,73,64,72,62],
[77,0,60,69,65,79,66,58,72,47],
[66,71,0,64,74,81,68,69,78,67],
[69,62,67,0,72,68,66,59,63,69],
[49,66,57,59,0,66,55,65,63,61],
[51,52,50,63,65,0,67,51,72,56],
[58,65,63,65,76,64,0,63,81,60],
[67,73,62,72,66,80,68,0,74,59],
[59,59,53,68,68,59,50,57,0,65],
[69,84,64,62,70,75,71,72,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,70,65,71,73,72,75,67],
[63,0,69,65,61,61,72,69,71,57],
[63,62,0,66,67,63,68,70,68,60],
[61,66,65,0,68,76,72,67,62,60],
[66,70,64,63,0,77,64,70,73,64],
[60,70,68,55,54,0,59,66,59,47],
[58,59,63,59,67,72,0,55,55,58],
[59,62,61,64,61,65,76,0,74,59],
[56,60,63,69,58,72,76,57,0,65],
[64,74,71,71,67,84,73,72,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,50,69,78,58,58,65,62,64],
[55,0,61,57,63,48,64,62,59,61],
[81,70,0,70,80,66,57,72,68,59],
[62,74,61,0,77,59,73,75,68,66],
[53,68,51,54,0,56,52,71,63,59],
[73,83,65,72,75,0,64,84,72,66],
[73,67,74,58,79,67,0,80,72,70],
[66,69,59,56,60,47,51,0,60,59],
[69,72,63,63,68,59,59,71,0,56],
[67,70,72,65,72,65,61,72,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,71,72,65,68,74,61,70],
[67,0,65,66,67,64,62,73,78,67],
[62,66,0,65,61,65,62,76,66,57],
[60,65,66,0,63,62,69,67,63,55],
[59,64,70,68,0,64,66,59,69,62],
[66,67,66,69,67,0,69,70,69,63],
[63,69,69,62,65,62,0,65,73,62],
[57,58,55,64,72,61,66,0,67,60],
[70,53,65,68,62,62,58,64,0,64],
[61,64,74,76,69,68,69,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,68,57,64,69,62,67,77,60],
[75,0,75,53,73,68,50,69,67,68],
[63,56,0,43,55,52,52,58,69,45],
[74,78,88,0,69,62,74,83,70,73],
[67,58,76,62,0,65,62,64,62,62],
[62,63,79,69,66,0,57,77,70,54],
[69,81,79,57,69,74,0,61,74,65],
[64,62,73,48,67,54,70,0,66,60],
[54,64,62,61,69,61,57,65,0,65],
[71,63,86,58,69,77,66,71,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,57,105,81,104,79,79,68,81],
[63,0,75,72,62,84,71,82,83,73],
[74,56,0,70,60,82,69,60,45,60],
[26,59,61,0,59,58,55,57,46,61],
[50,69,71,72,0,71,46,58,81,73],
[27,47,49,73,60,0,69,49,46,48],
[52,60,62,76,85,62,0,49,59,63],
[52,49,71,74,73,82,82,0,59,63],
[63,48,86,85,50,85,72,72,0,99],
[50,58,71,70,58,83,68,68,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,70,68,63,69,63,64,68,72],
[59,0,76,69,72,79,69,73,68,75],
[61,55,0,68,63,70,64,68,62,65],
[63,62,63,0,60,66,70,66,76,68],
[68,59,68,71,0,68,67,66,63,67],
[62,52,61,65,63,0,56,66,68,55],
[68,62,67,61,64,75,0,68,69,69],
[67,58,63,65,65,65,63,0,58,64],
[63,63,69,55,68,63,62,73,0,72],
[59,56,66,63,64,76,62,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,54,59,52,52,56,57,63,52],
[73,0,59,72,66,57,59,63,68,56],
[77,72,0,74,69,62,66,64,70,62],
[72,59,57,0,65,63,53,64,64,55],
[79,65,62,66,0,67,58,61,60,64],
[79,74,69,68,64,0,66,72,68,68],
[75,72,65,78,73,65,0,68,68,69],
[74,68,67,67,70,59,63,0,67,66],
[68,63,61,67,71,63,63,64,0,63],
[79,75,69,76,67,63,62,65,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,62,61,66,64,68,68,55],
[65,0,70,63,62,65,60,59,69,55],
[62,61,0,59,62,63,65,58,60,60],
[69,68,72,0,60,64,58,65,66,66],
[70,69,69,71,0,69,65,67,68,61],
[65,66,68,67,62,0,61,59,61,57],
[67,71,66,73,66,70,0,62,67,57],
[63,72,73,66,64,72,69,0,65,60],
[63,62,71,65,63,70,64,66,0,60],
[76,76,71,65,70,74,74,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,66,62,75,72,63,59,68,51],
[58,0,57,66,58,67,62,39,66,52],
[65,74,0,64,71,67,58,68,69,66],
[69,65,67,0,62,62,51,67,45,63],
[56,73,60,69,0,65,54,50,68,73],
[59,64,64,69,66,0,59,53,68,60],
[68,69,73,80,77,72,0,62,67,60],
[72,92,63,64,81,78,69,0,76,70],
[63,65,62,86,63,63,64,55,0,53],
[80,79,65,68,58,71,71,61,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,83,71,73,78,70,75,59,68],
[50,0,59,55,51,56,56,68,52,45],
[48,72,0,65,61,66,62,67,65,59],
[60,76,66,0,60,72,65,73,60,64],
[58,80,70,71,0,71,66,72,60,65],
[53,75,65,59,60,0,64,67,52,59],
[61,75,69,66,65,67,0,68,59,60],
[56,63,64,58,59,64,63,0,54,56],
[72,79,66,71,71,79,72,77,0,65],
[63,86,72,67,66,72,71,75,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,87,62,64,56,58,55,76,74],
[58,0,79,56,56,57,71,77,55,66],
[44,52,0,57,35,45,54,53,55,54],
[69,75,74,0,67,61,63,73,77,73],
[67,75,96,64,0,69,74,65,81,81],
[75,74,86,70,62,0,72,74,67,65],
[73,60,77,68,57,59,0,72,60,63],
[76,54,78,58,66,57,59,0,64,78],
[55,76,76,54,50,64,71,67,0,69],
[57,65,77,58,50,66,68,53,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,43,87,43,87,44,43,87,87],
[88,0,88,44,88,88,88,88,88,88],
[88,43,0,87,43,44,44,0,87,87],
[44,87,44,0,87,44,44,44,87,44],
[88,43,88,44,0,44,44,44,87,88],
[44,43,87,87,87,0,44,87,87,87],
[87,43,87,87,87,87,0,87,131,87],
[88,43,131,87,87,44,44,0,87,131],
[44,43,44,44,44,44,0,44,0,44],
[44,43,44,87,43,44,44,0,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,70,65,55,63,66,71,69,66],
[71,0,65,68,62,62,65,71,68,70],
[61,66,0,65,64,59,71,68,54,70],
[66,63,66,0,66,64,70,63,67,71],
[76,69,67,65,0,65,76,70,64,76],
[68,69,72,67,66,0,69,73,64,67],
[65,66,60,61,55,62,0,67,56,63],
[60,60,63,68,61,58,64,0,57,69],
[62,63,77,64,67,67,75,74,0,74],
[65,61,61,60,55,64,68,62,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,61,64,51,61,51,68,59],
[74,0,80,63,65,68,76,67,73,57],
[69,51,0,49,58,60,51,57,59,54],
[70,68,82,0,65,64,83,76,71,69],
[67,66,73,66,0,56,71,65,63,54],
[80,63,71,67,75,0,68,67,69,56],
[70,55,80,48,60,63,0,59,64,60],
[80,64,74,55,66,64,72,0,70,64],
[63,58,72,60,68,62,67,61,0,74],
[72,74,77,62,77,75,71,67,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,76,64,54,41,68,51,50,57],
[68,0,69,55,59,45,70,74,64,48],
[55,62,0,60,45,52,61,54,42,57],
[67,76,71,0,64,57,74,56,66,46],
[77,72,86,67,0,77,82,47,66,73],
[90,86,79,74,54,0,84,72,74,71],
[63,61,70,57,49,47,0,49,58,46],
[80,57,77,75,84,59,82,0,68,70],
[81,67,89,65,65,57,73,63,0,58],
[74,83,74,85,58,60,85,61,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,69,69,68,72,73,74,74],
[65,0,60,76,69,68,62,68,65,63],
[66,71,0,72,63,66,65,70,70,71],
[62,55,59,0,59,58,59,64,63,64],
[62,62,68,72,0,63,67,65,57,64],
[63,63,65,73,68,0,66,68,61,72],
[59,69,66,72,64,65,0,69,63,70],
[58,63,61,67,66,63,62,0,58,68],
[57,66,61,68,74,70,68,73,0,69],
[57,68,60,67,67,59,61,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,65,74,65,57,73,63,62],
[63,0,57,66,70,69,65,62,66,59],
[73,74,0,63,67,78,69,63,71,68],
[66,65,68,0,72,68,63,66,69,60],
[57,61,64,59,0,68,56,58,65,53],
[66,62,53,63,63,0,59,64,67,61],
[74,66,62,68,75,72,0,66,72,53],
[58,69,68,65,73,67,65,0,70,70],
[68,65,60,62,66,64,59,61,0,58],
[69,72,63,71,78,70,78,61,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,65,78,73,81,72,75,70,74],
[54,0,58,54,58,69,56,66,57,58],
[66,73,0,65,68,79,66,73,64,66],
[53,77,66,0,65,84,63,69,61,69],
[58,73,63,66,0,74,56,68,66,61],
[50,62,52,47,57,0,50,62,49,52],
[59,75,65,68,75,81,0,71,74,67],
[56,65,58,62,63,69,60,0,63,54],
[61,74,67,70,65,82,57,68,0,80],
[57,73,65,62,70,79,64,77,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,61,65,69,77,74,62,64,73],
[80,0,76,60,64,67,71,62,85,68],
[70,55,0,70,69,44,57,63,63,66],
[66,71,61,0,55,62,59,43,67,57],
[62,67,62,76,0,60,56,73,77,74],
[54,64,87,69,71,0,58,67,86,72],
[57,60,74,72,75,73,0,59,59,58],
[69,69,68,88,58,64,72,0,58,78],
[67,46,68,64,54,45,72,73,0,70],
[58,63,65,74,57,59,73,53,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,73,64,72,85,76,73,72,71],
[57,0,54,63,77,71,77,68,65,63],
[58,77,0,75,76,85,82,71,71,80],
[67,68,56,0,83,73,76,71,71,74],
[59,54,55,48,0,66,66,59,60,61],
[46,60,46,58,65,0,67,57,54,56],
[55,54,49,55,65,64,0,57,55,63],
[58,63,60,60,72,74,74,0,69,69],
[59,66,60,60,71,77,76,62,0,69],
[60,68,51,57,70,75,68,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,72,52,60,59,66,46,64,64],
[71,0,82,60,66,75,62,46,65,60],
[59,49,0,51,48,60,53,48,57,63],
[79,71,80,0,66,73,62,62,60,70],
[71,65,83,65,0,74,69,60,65,66],
[72,56,71,58,57,0,49,50,56,59],
[65,69,78,69,62,82,0,58,65,63],
[85,85,83,69,71,81,73,0,64,83],
[67,66,74,71,66,75,66,67,0,65],
[67,71,68,61,65,72,68,48,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,80,80,63,72,72,60,41,73],
[39,0,74,47,59,59,59,57,59,39],
[51,57,0,64,54,54,63,42,53,55],
[51,84,67,0,52,61,61,69,71,64],
[68,72,77,79,0,50,72,71,41,60],
[59,72,77,70,81,0,81,69,50,70],
[59,72,68,70,59,50,0,71,50,48],
[71,74,89,62,60,62,60,0,71,63],
[90,72,78,60,90,81,81,60,0,70],
[58,92,76,67,71,61,83,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,70,75,52,48,53,55,58,54],
[71,0,73,61,64,48,58,52,56,74],
[61,58,0,53,52,50,52,58,51,56],
[56,70,78,0,73,54,58,60,49,70],
[79,67,79,58,0,53,66,74,63,69],
[83,83,81,77,78,0,62,71,66,68],
[78,73,79,73,65,69,0,59,64,76],
[76,79,73,71,57,60,72,0,71,85],
[73,75,80,82,68,65,67,60,0,72],
[77,57,75,61,62,63,55,46,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,54,64,70,56,61,48,68],
[59,0,62,57,59,71,34,59,44,57],
[67,69,0,61,74,78,46,61,72,67],
[77,74,70,0,68,84,36,60,60,72],
[67,72,57,63,0,73,54,54,63,65],
[61,60,53,47,58,0,42,55,51,61],
[75,97,85,95,77,89,0,65,74,82],
[70,72,70,71,77,76,66,0,65,66],
[83,87,59,71,68,80,57,66,0,69],
[63,74,64,59,66,70,49,65,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,69,70,67,73,63,61,67],
[71,0,74,63,70,68,72,71,66,60],
[68,57,0,65,69,65,54,66,65,60],
[62,68,66,0,77,69,67,68,73,61],
[61,61,62,54,0,70,62,62,71,61],
[64,63,66,62,61,0,61,69,60,58],
[58,59,77,64,69,70,0,70,68,64],
[68,60,65,63,69,62,61,0,68,60],
[70,65,66,58,60,71,63,63,0,52],
[64,71,71,70,70,73,67,71,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,57,66,59,66,70,70,67],
[64,0,75,63,66,73,62,63,72,68],
[64,56,0,67,67,74,62,62,75,61],
[74,68,64,0,64,68,61,70,71,81],
[65,65,64,67,0,63,66,66,76,71],
[72,58,57,63,68,0,61,65,67,68],
[65,69,69,70,65,70,0,73,70,72],
[61,68,69,61,65,66,58,0,68,71],
[61,59,56,60,55,64,61,63,0,58],
[64,63,70,50,60,63,59,60,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,82,69,61,68,79,82,58,46],
[71,0,80,60,50,49,82,76,51,56],
[49,51,0,52,52,55,64,62,45,65],
[62,71,79,0,63,67,79,83,62,75],
[70,81,79,68,0,63,69,66,71,70],
[63,82,76,64,68,0,68,69,53,73],
[52,49,67,52,62,63,0,59,43,50],
[49,55,69,48,65,62,72,0,46,68],
[73,80,86,69,60,78,88,85,0,79],
[85,75,66,56,61,58,81,63,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,71,84,62,62,69,71,74,68],
[61,0,59,64,67,69,65,55,55,57],
[60,72,0,66,45,62,57,58,64,64],
[47,67,65,0,66,70,66,72,65,69],
[69,64,86,65,0,70,72,75,78,53],
[69,62,69,61,61,0,58,67,76,53],
[62,66,74,65,59,73,0,55,51,60],
[60,76,73,59,56,64,76,0,65,55],
[57,76,67,66,53,55,80,66,0,51],
[63,74,67,62,78,78,71,76,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,66,60,59,53,69,61,73,66],
[76,0,72,66,68,60,68,66,69,57],
[65,59,0,52,58,54,60,43,58,54],
[71,65,79,0,56,64,79,62,71,66],
[72,63,73,75,0,69,68,70,67,62],
[78,71,77,67,62,0,71,70,64,66],
[62,63,71,52,63,60,0,53,60,60],
[70,65,88,69,61,61,78,0,70,65],
[58,62,73,60,64,67,71,61,0,61],
[65,74,77,65,69,65,71,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,72,67,59,60,66,68,66,66],
[61,0,62,63,61,57,62,60,62,61],
[59,69,0,58,61,55,64,59,58,62],
[64,68,73,0,66,66,63,69,65,65],
[72,70,70,65,0,62,60,66,67,63],
[71,74,76,65,69,0,63,72,66,72],
[65,69,67,68,71,68,0,68,68,74],
[63,71,72,62,65,59,63,0,64,62],
[65,69,73,66,64,65,63,67,0,59],
[65,70,69,66,68,59,57,69,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,63,63,67,69,71,64,74,78],
[67,0,71,75,62,71,64,70,79,72],
[68,60,0,72,63,71,71,68,78,75],
[68,56,59,0,66,64,62,62,77,68],
[64,69,68,65,0,67,65,64,75,74],
[62,60,60,67,64,0,71,65,72,63],
[60,67,60,69,66,60,0,66,74,78],
[67,61,63,69,67,66,65,0,81,73],
[57,52,53,54,56,59,57,50,0,64],
[53,59,56,63,57,68,53,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,65,74,61,56,64,64,65],
[69,0,65,65,73,66,62,69,66,67],
[68,66,0,75,64,67,57,64,67,69],
[66,66,56,0,68,60,62,63,58,66],
[57,58,67,63,0,52,57,62,52,67],
[70,65,64,71,79,0,68,74,67,66],
[75,69,74,69,74,63,0,68,67,65],
[67,62,67,68,69,57,63,0,70,68],
[67,65,64,73,79,64,64,61,0,66],
[66,64,62,65,64,65,66,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,61,61,73,69,69,73,67],
[59,0,59,67,67,68,63,58,69,68],
[65,72,0,64,70,72,63,66,71,73],
[70,64,67,0,65,72,62,69,74,71],
[70,64,61,66,0,72,70,64,70,69],
[58,63,59,59,59,0,63,61,68,61],
[62,68,68,69,61,68,0,63,72,70],
[62,73,65,62,67,70,68,0,71,69],
[58,62,60,57,61,63,59,60,0,68],
[64,63,58,60,62,70,61,62,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,62,79,61,58,66,53,58,56],
[49,0,66,63,51,44,55,55,47,50],
[69,65,0,80,66,62,71,63,45,61],
[52,68,51,0,48,57,52,60,52,51],
[70,80,65,83,0,64,76,53,61,53],
[73,87,69,74,67,0,64,59,65,68],
[65,76,60,79,55,67,0,70,61,68],
[78,76,68,71,78,72,61,0,67,64],
[73,84,86,79,70,66,70,64,0,72],
[75,81,70,80,78,63,63,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,75,73,64,77,74,71,76],
[60,0,76,76,68,64,68,66,73,78],
[65,55,0,69,70,66,70,65,61,73],
[56,55,62,0,61,50,65,62,62,66],
[58,63,61,70,0,57,68,64,66,77],
[67,67,65,81,74,0,77,75,70,74],
[54,63,61,66,63,54,0,61,65,65],
[57,65,66,69,67,56,70,0,62,68],
[60,58,70,69,65,61,66,69,0,67],
[55,53,58,65,54,57,66,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,76,91,78,70,66,63,69,61],
[73,0,72,80,81,78,92,76,86,61],
[55,59,0,75,71,72,72,73,89,70],
[40,51,56,0,54,53,61,39,58,28],
[53,50,60,77,0,58,55,55,71,58],
[61,53,59,78,73,0,70,40,77,51],
[65,39,59,70,76,61,0,41,51,48],
[68,55,58,92,76,91,90,0,87,72],
[62,45,42,73,60,54,80,44,0,57],
[70,70,61,103,73,80,83,59,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,75,68,72,70,78,65,62,59],
[59,0,67,69,69,62,76,66,59,65],
[56,64,0,60,72,68,59,62,58,62],
[63,62,71,0,68,62,77,71,68,69],
[59,62,59,63,0,59,67,60,57,68],
[61,69,63,69,72,0,66,64,62,76],
[53,55,72,54,64,65,0,62,59,62],
[66,65,69,60,71,67,69,0,63,73],
[69,72,73,63,74,69,72,68,0,65],
[72,66,69,62,63,55,69,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,66,71,71,67,77,65,74,69],
[57,0,57,59,49,57,54,72,61,59],
[65,74,0,70,65,70,71,70,77,54],
[60,72,61,0,68,74,64,79,73,62],
[60,82,66,63,0,73,69,66,67,55],
[64,74,61,57,58,0,53,71,59,67],
[54,77,60,67,62,78,0,75,62,71],
[66,59,61,52,65,60,56,0,66,60],
[57,70,54,58,64,72,69,65,0,51],
[62,72,77,69,76,64,60,71,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,66,69,70,62,63,72,57],
[68,0,74,76,71,65,63,65,71,77],
[65,57,0,75,69,77,66,73,73,64],
[65,55,56,0,59,77,59,67,72,53],
[62,60,62,72,0,73,65,53,71,54],
[61,66,54,54,58,0,58,62,69,58],
[69,68,65,72,66,73,0,58,56,63],
[68,66,58,64,78,69,73,0,77,64],
[59,60,58,59,60,62,75,54,0,50],
[74,54,67,78,77,73,68,67,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,73,71,48,84,71,60,82,60],
[35,0,12,47,36,60,59,24,35,48],
[58,119,0,82,47,94,82,71,82,59],
[60,84,49,0,47,71,46,49,46,47],
[83,95,84,84,0,47,96,73,84,59],
[47,71,37,60,84,0,84,38,60,35],
[60,72,49,85,35,47,0,49,95,47],
[71,107,60,82,58,93,82,0,70,82],
[49,96,49,85,47,71,36,61,0,47],
[71,83,72,84,72,96,84,49,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,68,65,63,53,61,64,59],
[72,0,67,71,75,75,61,71,70,59],
[64,64,0,60,66,65,62,61,67,58],
[63,60,71,0,62,67,55,63,64,64],
[66,56,65,69,0,68,56,55,60,54],
[68,56,66,64,63,0,49,52,65,56],
[78,70,69,76,75,82,0,72,63,70],
[70,60,70,68,76,79,59,0,60,67],
[67,61,64,67,71,66,68,71,0,68],
[72,72,73,67,77,75,61,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,63,57,69,62,65,61,70],
[64,0,70,67,56,67,62,61,63,64],
[59,61,0,44,39,66,66,65,57,62],
[68,64,87,0,69,78,73,69,69,70],
[74,75,92,62,0,71,80,77,73,72],
[62,64,65,53,60,0,61,60,60,60],
[69,69,65,58,51,70,0,64,61,66],
[66,70,66,62,54,71,67,0,58,67],
[70,68,74,62,58,71,70,73,0,62],
[61,67,69,61,59,71,65,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,54,53,55,47,71,66,63,53],
[65,0,58,49,57,56,55,73,59,61],
[77,73,0,57,63,70,63,78,69,73],
[78,82,74,0,66,69,64,78,73,61],
[76,74,68,65,0,68,76,77,69,74],
[84,75,61,62,63,0,77,75,68,74],
[60,76,68,67,55,54,0,71,70,57],
[65,58,53,53,54,56,60,0,56,50],
[68,72,62,58,62,63,61,75,0,62],
[78,70,58,70,57,57,74,81,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,65,53,71,63,62,61,60,73],
[56,0,69,48,68,57,60,52,63,61],
[66,62,0,57,54,62,69,64,55,63],
[78,83,74,0,66,62,83,74,71,70],
[60,63,77,65,0,47,75,53,67,63],
[68,74,69,69,84,0,70,67,68,64],
[69,71,62,48,56,61,0,56,56,65],
[70,79,67,57,78,64,75,0,63,53],
[71,68,76,60,64,63,75,68,0,70],
[58,70,68,61,68,67,66,78,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,48,63,57,58,78,75,74,71],
[76,0,66,76,59,49,95,76,67,57],
[83,65,0,77,66,48,74,84,85,93],
[68,55,54,0,75,41,69,85,75,57],
[74,72,65,56,0,57,85,95,66,67],
[73,82,83,90,74,0,111,81,82,64],
[53,36,57,62,46,20,0,56,73,55],
[56,55,47,46,36,50,75,0,47,36],
[57,64,46,56,65,49,58,84,0,57],
[60,74,38,74,64,67,76,95,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,68,56,65,69,61,64,68,74],
[66,0,63,67,58,57,59,63,64,62],
[63,68,0,59,71,69,67,59,58,63],
[75,64,72,0,72,74,69,61,67,73],
[66,73,60,59,0,56,64,67,58,67],
[62,74,62,57,75,0,60,66,60,65],
[70,72,64,62,67,71,0,63,58,64],
[67,68,72,70,64,65,68,0,60,68],
[63,67,73,64,73,71,73,71,0,72],
[57,69,68,58,64,66,67,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,73,59,85,70,67,74,69,74],
[56,0,59,67,74,60,56,58,68,64],
[58,72,0,63,77,60,60,61,62,63],
[72,64,68,0,70,73,73,65,71,70],
[46,57,54,61,0,70,53,55,60,52],
[61,71,71,58,61,0,70,60,69,62],
[64,75,71,58,78,61,0,70,64,76],
[57,73,70,66,76,71,61,0,69,73],
[62,63,69,60,71,62,67,62,0,64],
[57,67,68,61,79,69,55,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,65,56,60,65,62,68,68],
[64,0,65,66,44,63,58,63,59,70],
[58,66,0,57,44,69,39,48,54,37],
[66,65,74,0,58,75,70,68,76,76],
[75,87,87,73,0,82,61,61,71,70],
[71,68,62,56,49,0,62,56,77,57],
[66,73,92,61,70,69,0,65,71,68],
[69,68,83,63,70,75,66,0,75,54],
[63,72,77,55,60,54,60,56,0,56],
[63,61,94,55,61,74,63,77,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,68,76,84,59,91,92,85,100],
[53,0,66,49,77,67,89,73,92,100],
[63,65,0,83,75,80,92,88,64,72],
[55,82,48,0,64,56,74,91,67,75],
[47,54,56,67,0,50,83,73,84,83],
[72,64,51,75,81,0,76,66,57,64],
[40,42,39,57,48,55,0,70,72,56],
[39,58,43,40,58,65,61,0,83,76],
[46,39,67,64,47,74,59,48,0,91],
[31,31,59,56,48,67,75,55,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,64,70,63,78,65,58,59,62],
[54,0,59,65,61,62,60,53,52,50],
[67,72,0,66,64,69,62,60,60,57],
[61,66,65,0,63,66,67,60,54,59],
[68,70,67,68,0,70,62,68,55,62],
[53,69,62,65,61,0,61,60,54,56],
[66,71,69,64,69,70,0,63,55,59],
[73,78,71,71,63,71,68,0,57,72],
[72,79,71,77,76,77,76,74,0,64],
[69,81,74,72,69,75,72,59,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,66,66,60,65,55,62,75,69],
[80,0,62,86,68,92,75,81,79,88],
[65,69,0,82,79,72,59,77,77,78],
[65,45,49,0,69,72,53,70,73,68],
[71,63,52,62,0,66,43,73,69,85],
[66,39,59,59,65,0,59,67,69,73],
[76,56,72,78,88,72,0,74,86,82],
[69,50,54,61,58,64,57,0,84,72],
[56,52,54,58,62,62,45,47,0,67],
[62,43,53,63,46,58,49,59,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,62,64,55,63,66,56,63],
[71,0,63,64,75,69,77,64,67,78],
[73,68,0,71,81,72,72,65,72,76],
[69,67,60,0,68,69,84,71,56,78],
[67,56,50,63,0,54,60,59,57,67],
[76,62,59,62,77,0,64,66,51,68],
[68,54,59,47,71,67,0,62,50,74],
[65,67,66,60,72,65,69,0,58,71],
[75,64,59,75,74,80,81,73,0,70],
[68,53,55,53,64,63,57,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,54,58,64,53,54,45,61,52],
[76,0,74,60,78,67,66,66,70,70],
[77,57,0,56,62,57,59,52,56,59],
[73,71,75,0,69,50,65,64,77,84],
[67,53,69,62,0,56,64,52,65,56],
[78,64,74,81,75,0,71,61,74,70],
[77,65,72,66,67,60,0,67,64,71],
[86,65,79,67,79,70,64,0,85,72],
[70,61,75,54,66,57,67,46,0,68],
[79,61,72,47,75,61,60,59,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,66,63,64,74,65,55,58,56],
[75,0,73,70,68,74,74,63,71,68],
[65,58,0,69,60,72,62,58,59,61],
[68,61,62,0,59,72,63,69,59,58],
[67,63,71,72,0,74,68,65,68,64],
[57,57,59,59,57,0,59,58,60,58],
[66,57,69,68,63,72,0,60,73,59],
[76,68,73,62,66,73,71,0,71,68],
[73,60,72,72,63,71,58,60,0,64],
[75,63,70,73,67,73,72,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,109,111,89,64,68,86,89,68],
[45,0,66,67,89,21,45,65,111,45],
[22,65,0,44,88,86,45,44,67,68],
[20,64,87,0,64,64,46,63,87,66],
[42,42,43,67,0,41,45,64,110,65],
[67,110,45,67,90,0,90,44,90,90],
[63,86,86,85,86,41,0,63,86,65],
[45,66,87,68,67,87,68,0,68,68],
[42,20,64,44,21,41,45,63,0,23],
[63,86,63,65,66,41,66,63,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,64,57,63,51,66,70,57,62],
[82,0,78,64,68,80,85,70,76,72],
[67,53,0,65,68,60,59,71,62,69],
[74,67,66,0,71,77,74,75,75,63],
[68,63,63,60,0,60,71,75,77,71],
[80,51,71,54,71,0,79,69,72,76],
[65,46,72,57,60,52,0,69,77,68],
[61,61,60,56,56,62,62,0,68,54],
[74,55,69,56,54,59,54,63,0,65],
[69,59,62,68,60,55,63,77,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,67,58,70,53,65,59,69],
[62,0,68,65,59,66,62,66,66,74],
[64,63,0,64,61,73,59,68,59,71],
[64,66,67,0,58,64,61,70,58,67],
[73,72,70,73,0,66,66,69,63,68],
[61,65,58,67,65,0,63,73,68,65],
[78,69,72,70,65,68,0,77,64,71],
[66,65,63,61,62,58,54,0,56,70],
[72,65,72,73,68,63,67,75,0,76],
[62,57,60,64,63,66,60,61,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,80,66,93,67,81,56,52],
[63,0,77,64,78,79,68,78,79,78],
[63,54,0,80,51,53,68,65,68,54],
[51,67,51,0,63,79,69,52,56,66],
[65,53,80,68,0,79,56,82,82,92],
[38,52,78,52,52,0,67,79,66,78],
[64,63,63,62,75,64,0,64,77,104],
[50,53,66,79,49,52,67,0,66,65],
[75,52,63,75,49,65,54,65,0,66],
[79,53,77,65,39,53,27,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,75,70,43,39,67,64,48,63],
[59,0,62,47,47,44,45,61,57,61],
[56,69,0,72,52,54,65,65,52,55],
[61,84,59,0,49,44,67,72,54,53],
[88,84,79,82,0,68,93,73,61,77],
[92,87,77,87,63,0,64,73,70,76],
[64,86,66,64,38,67,0,64,52,57],
[67,70,66,59,58,58,67,0,60,46],
[83,74,79,77,70,61,79,71,0,71],
[68,70,76,78,54,55,74,85,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,70,65,66,67,67,70,72,71],
[54,0,62,59,58,52,62,59,60,65],
[61,69,0,58,55,62,64,69,71,66],
[66,72,73,0,59,60,54,59,67,68],
[65,73,76,72,0,66,67,66,67,69],
[64,79,69,71,65,0,63,79,72,75],
[64,69,67,77,64,68,0,69,84,68],
[61,72,62,72,65,52,62,0,63,73],
[59,71,60,64,64,59,47,68,0,67],
[60,66,65,63,62,56,63,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,65,68,67,60,76,81,74,60],
[71,0,58,64,51,61,64,79,75,68],
[66,73,0,57,57,63,70,81,78,64],
[63,67,74,0,66,56,66,68,77,63],
[64,80,74,65,0,71,81,86,78,71],
[71,70,68,75,60,0,70,80,81,73],
[55,67,61,65,50,61,0,80,56,67],
[50,52,50,63,45,51,51,0,59,53],
[57,56,53,54,53,50,75,72,0,57],
[71,63,67,68,60,58,64,78,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,77,35,68,77,88,67,79,35],
[52,0,54,40,43,65,75,66,55,56],
[54,77,0,42,65,76,99,78,78,66],
[96,91,89,0,78,89,89,88,57,80],
[63,88,66,53,0,88,87,88,75,77],
[54,66,55,42,43,0,66,67,67,55],
[43,56,32,42,44,65,0,55,42,33],
[64,65,53,43,43,64,76,0,67,45],
[52,76,53,74,56,64,89,64,0,64],
[96,75,65,51,54,76,98,86,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,77,69,66,64,79,65,73,72],
[60,0,73,72,64,63,61,66,68,62],
[54,58,0,61,60,57,61,58,68,61],
[62,59,70,0,62,61,63,59,67,65],
[65,67,71,69,0,62,68,71,67,73],
[67,68,74,70,69,0,68,60,69,61],
[52,70,70,68,63,63,0,62,68,56],
[66,65,73,72,60,71,69,0,67,65],
[58,63,63,64,64,62,63,64,0,65],
[59,69,70,66,58,70,75,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,55,71,64,52,58,57,52,58],
[75,0,69,66,64,59,66,58,67,67],
[76,62,0,69,76,74,66,60,67,74],
[60,65,62,0,64,55,52,50,51,63],
[67,67,55,67,0,75,66,60,53,58],
[79,72,57,76,56,0,76,63,65,66],
[73,65,65,79,65,55,0,62,65,69],
[74,73,71,81,71,68,69,0,59,73],
[79,64,64,80,78,66,66,72,0,68],
[73,64,57,68,73,65,62,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,64,76,58,77,62,72,76,63],
[56,0,59,74,54,74,54,54,60,64],
[67,72,0,74,73,77,63,67,72,74],
[55,57,57,0,57,63,59,55,67,70],
[73,77,58,74,0,71,71,71,77,72],
[54,57,54,68,60,0,60,57,72,63],
[69,77,68,72,60,71,0,60,77,70],
[59,77,64,76,60,74,71,0,71,66],
[55,71,59,64,54,59,54,60,0,51],
[68,67,57,61,59,68,61,65,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,74,72,63,79,59,65,67,66],
[70,0,63,74,69,84,70,70,60,66],
[57,68,0,69,66,79,55,64,59,60],
[59,57,62,0,62,59,69,77,60,63],
[68,62,65,69,0,81,65,57,68,72],
[52,47,52,72,50,0,62,60,62,53],
[72,61,76,62,66,69,0,70,72,61],
[66,61,67,54,74,71,61,0,51,69],
[64,71,72,71,63,69,59,80,0,69],
[65,65,71,68,59,78,70,62,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,77,65,65,76,60,64,62],
[60,0,50,53,53,64,59,64,61,54],
[65,81,0,67,73,64,79,73,79,59],
[54,78,64,0,68,64,70,72,74,57],
[66,78,58,63,0,78,65,65,65,70],
[66,67,67,67,53,0,67,71,72,65],
[55,72,52,61,66,64,0,66,68,59],
[71,67,58,59,66,60,65,0,70,61],
[67,70,52,57,66,59,63,61,0,59],
[69,77,72,74,61,66,72,70,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,73,70,69,60,76,66,68,60],
[56,0,58,59,59,64,72,68,57,50],
[58,73,0,73,57,62,72,73,59,64],
[61,72,58,0,54,62,61,64,60,44],
[62,72,74,77,0,63,73,74,59,65],
[71,67,69,69,68,0,67,66,65,70],
[55,59,59,70,58,64,0,68,61,59],
[65,63,58,67,57,65,63,0,60,63],
[63,74,72,71,72,66,70,71,0,58],
[71,81,67,87,66,61,72,68,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,59,59,82,61,59,59,90,89],
[69,0,67,60,78,61,61,48,70,59],
[72,64,0,71,82,71,52,73,69,69],
[72,71,60,0,71,73,72,49,63,81],
[49,53,49,60,0,69,52,47,69,57],
[70,70,60,58,62,0,69,38,63,71],
[72,70,79,59,79,62,0,49,80,68],
[72,83,58,82,84,93,82,0,90,81],
[41,61,62,68,62,68,51,41,0,80],
[42,72,62,50,74,60,63,50,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,55,56,69,69,68,63,60,54],
[64,0,54,51,68,55,52,68,54,46],
[76,77,0,62,76,68,61,71,63,58],
[75,80,69,0,78,68,70,66,65,69],
[62,63,55,53,0,63,50,62,53,57],
[62,76,63,63,68,0,56,68,59,55],
[63,79,70,61,81,75,0,59,52,57],
[68,63,60,65,69,63,72,0,58,54],
[71,77,68,66,78,72,79,73,0,52],
[77,85,73,62,74,76,74,77,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,72,74,55,72,91,91,55,72],
[78,0,74,98,98,77,76,55,38,19],
[59,57,0,78,78,76,57,36,40,76],
[57,33,53,0,16,17,17,52,16,17],
[76,33,53,115,0,56,57,52,35,17],
[59,54,55,114,75,0,76,52,35,40],
[40,55,74,114,74,55,0,72,35,74],
[40,76,95,79,79,79,59,0,75,79],
[76,93,91,115,96,96,96,56,0,77],
[59,112,55,114,114,91,57,52,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,67,63,70,67,67,79,75,69],
[49,0,55,63,60,57,64,67,64,67],
[64,76,0,61,71,55,63,65,66,76],
[68,68,70,0,71,65,63,66,68,71],
[61,71,60,60,0,49,64,70,67,63],
[64,74,76,66,82,0,61,69,72,79],
[64,67,68,68,67,70,0,67,76,69],
[52,64,66,65,61,62,64,0,66,72],
[56,67,65,63,64,59,55,65,0,66],
[62,64,55,60,68,52,62,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,60,80,69,86,63,81,83,73],
[53,0,55,60,62,71,62,60,67,64],
[71,76,0,69,57,76,60,73,80,71],
[51,71,62,0,58,71,68,69,72,66],
[62,69,74,73,0,77,77,73,81,73],
[45,60,55,60,54,0,51,61,74,57],
[68,69,71,63,54,80,0,76,79,70],
[50,71,58,62,58,70,55,0,74,63],
[48,64,51,59,50,57,52,57,0,55],
[58,67,60,65,58,74,61,68,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,67,60,62,63,67,61,63,65],
[58,0,67,72,66,66,67,75,64,71],
[64,64,0,73,64,62,68,71,63,74],
[71,59,58,0,70,59,58,55,64,68],
[69,65,67,61,0,61,61,68,59,64],
[68,65,69,72,70,0,64,68,64,71],
[64,64,63,73,70,67,0,66,65,70],
[70,56,60,76,63,63,65,0,66,66],
[68,67,68,67,72,67,66,65,0,70],
[66,60,57,63,67,60,61,65,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,60,91,61,75,71,62,83,69],
[48,0,71,71,65,54,58,56,72,65],
[71,60,0,65,73,62,66,57,68,74],
[40,60,66,0,52,50,52,50,54,67],
[70,66,58,79,0,65,65,61,67,72],
[56,77,69,81,66,0,59,68,71,84],
[60,73,65,79,66,72,0,70,75,79],
[69,75,74,81,70,63,61,0,70,72],
[48,59,63,77,64,60,56,61,0,76],
[62,66,57,64,59,47,52,59,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,81,66,70,66,72,65,58],
[63,0,65,63,61,57,61,59,64,57],
[63,66,0,68,56,65,62,62,68,69],
[50,68,63,0,60,61,56,57,60,54],
[65,70,75,71,0,62,75,75,73,82],
[61,74,66,70,69,0,71,64,64,68],
[65,70,69,75,56,60,0,59,75,72],
[59,72,69,74,56,67,72,0,66,62],
[66,67,63,71,58,67,56,65,0,61],
[73,74,62,77,49,63,59,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,72,70,74,74,71,64,70],
[63,0,70,80,76,73,78,74,69,69],
[60,61,0,68,61,67,63,67,53,69],
[59,51,63,0,72,63,73,65,57,67],
[61,55,70,59,0,54,64,62,55,65],
[57,58,64,68,77,0,69,60,59,64],
[57,53,68,58,67,62,0,61,61,57],
[60,57,64,66,69,71,70,0,53,73],
[67,62,78,74,76,72,70,78,0,71],
[61,62,62,64,66,67,74,58,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,63,63,62,64,68,76,66,57],
[70,0,75,70,64,74,70,67,73,59],
[68,56,0,53,51,70,66,66,62,65],
[68,61,78,0,63,70,69,75,70,58],
[69,67,80,68,0,77,63,73,74,69],
[67,57,61,61,54,0,64,70,65,54],
[63,61,65,62,68,67,0,67,68,58],
[55,64,65,56,58,61,64,0,59,54],
[65,58,69,61,57,66,63,72,0,53],
[74,72,66,73,62,77,73,77,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,88,69,68,75,60,65,74,77],
[57,0,70,59,69,63,64,60,61,61],
[43,61,0,52,58,50,59,53,60,64],
[62,72,79,0,67,70,71,62,73,73],
[63,62,73,64,0,56,74,57,72,70],
[56,68,81,61,75,0,74,60,65,66],
[71,67,72,60,57,57,0,70,62,71],
[66,71,78,69,74,71,61,0,70,75],
[57,70,71,58,59,66,69,61,0,70],
[54,70,67,58,61,65,60,56,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,62,55,59,58,63,56,53,60],
[83,0,70,63,74,72,68,68,57,68],
[69,61,0,64,67,55,64,60,54,67],
[76,68,67,0,59,69,63,62,59,63],
[72,57,64,72,0,60,70,53,58,66],
[73,59,76,62,71,0,68,50,68,67],
[68,63,67,68,61,63,0,66,61,62],
[75,63,71,69,78,81,65,0,66,67],
[78,74,77,72,73,63,70,65,0,66],
[71,63,64,68,65,64,69,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,46,46,50,52,54,62,40,61],
[83,0,62,58,65,74,66,55,52,66],
[85,69,0,62,73,78,64,71,60,72],
[85,73,69,0,67,73,71,66,52,74],
[81,66,58,64,0,73,64,75,51,63],
[79,57,53,58,58,0,45,57,52,64],
[77,65,67,60,67,86,0,71,70,79],
[69,76,60,65,56,74,60,0,53,68],
[91,79,71,79,80,79,61,78,0,77],
[70,65,59,57,68,67,52,63,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,54,59,60,47,59,52,53,53],
[77,0,59,61,69,59,66,59,46,52],
[77,72,0,58,61,70,70,62,54,49],
[72,70,73,0,62,62,78,59,46,54],
[71,62,70,69,0,53,66,65,58,67],
[84,72,61,69,78,0,82,83,63,61],
[72,65,61,53,65,49,0,58,43,51],
[79,72,69,72,66,48,73,0,54,44],
[78,85,77,85,73,68,88,77,0,64],
[78,79,82,77,64,70,80,87,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,58,71,61,64,69,69,67,75],
[68,0,70,69,57,68,71,65,69,67],
[73,61,0,82,69,72,73,63,71,75],
[60,62,49,0,55,56,57,60,67,62],
[70,74,62,76,0,64,57,73,70,67],
[67,63,59,75,67,0,62,65,65,69],
[62,60,58,74,74,69,0,69,60,66],
[62,66,68,71,58,66,62,0,67,70],
[64,62,60,64,61,66,71,64,0,64],
[56,64,56,69,64,62,65,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,61,59,64,57,64,66,64,62],
[70,0,76,72,76,67,66,73,65,62],
[70,55,0,71,62,67,66,74,57,80],
[72,59,60,0,56,58,65,73,56,47],
[67,55,69,75,0,66,62,69,71,49],
[74,64,64,73,65,0,68,66,68,57],
[67,65,65,66,69,63,0,80,57,63],
[65,58,57,58,62,65,51,0,58,65],
[67,66,74,75,60,63,74,73,0,68],
[69,69,51,84,82,74,68,66,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,76,58,56,36,39,57,59,73],
[55,0,113,58,56,56,39,77,57,73],
[55,18,0,57,0,55,18,58,40,35],
[73,73,74,0,35,55,74,38,37,55],
[75,75,131,96,0,75,94,58,75,92],
[95,75,76,76,56,0,76,96,77,73],
[92,92,113,57,37,55,0,77,75,54],
[74,54,73,93,73,35,54,0,75,91],
[72,74,91,94,56,54,56,56,0,91],
[58,58,96,76,39,58,77,40,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,63,63,69,65,75,70,68],
[60,0,56,70,54,58,70,68,60,55],
[65,75,0,64,61,66,67,81,59,57],
[68,61,67,0,63,68,58,65,58,58],
[68,77,70,68,0,57,60,71,56,65],
[62,73,65,63,74,0,63,65,67,56],
[66,61,64,73,71,68,0,72,65,54],
[56,63,50,66,60,66,59,0,71,53],
[61,71,72,73,75,64,66,60,0,64],
[63,76,74,73,66,75,77,78,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,46,74,56,60,69,56,57,40],
[78,0,64,70,70,69,76,58,69,70],
[85,67,0,88,55,64,71,58,75,72],
[57,61,43,0,64,45,81,60,67,57],
[75,61,76,67,0,66,84,74,70,70],
[71,62,67,86,65,0,81,64,68,67],
[62,55,60,50,47,50,0,62,54,64],
[75,73,73,71,57,67,69,0,88,85],
[74,62,56,64,61,63,77,43,0,53],
[91,61,59,74,61,64,67,46,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,71,77,72,69,58,75,70],
[72,0,81,66,81,68,65,63,80,72],
[64,50,0,71,69,71,59,66,63,70],
[60,65,60,0,75,70,69,64,81,69],
[54,50,62,56,0,60,55,59,57,51],
[59,63,60,61,71,0,55,61,57,64],
[62,66,72,62,76,76,0,61,76,67],
[73,68,65,67,72,70,70,0,76,68],
[56,51,68,50,74,74,55,55,0,64],
[61,59,61,62,80,67,64,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,63,62,62,66,69,75,56,59],
[63,0,63,58,69,64,64,72,56,67],
[68,68,0,62,50,62,68,69,61,65],
[69,73,69,0,66,68,66,67,59,74],
[69,62,81,65,0,72,73,78,73,75],
[65,67,69,63,59,0,69,70,57,70],
[62,67,63,65,58,62,0,69,64,66],
[56,59,62,64,53,61,62,0,53,61],
[75,75,70,72,58,74,67,78,0,68],
[72,64,66,57,56,61,65,70,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,72,62,69,74,66,65,68,74],
[56,0,61,44,58,63,57,60,59,65],
[59,70,0,66,74,62,61,65,68,67],
[69,87,65,0,76,79,66,73,70,82],
[62,73,57,55,0,56,56,57,49,69],
[57,68,69,52,75,0,66,63,61,69],
[65,74,70,65,75,65,0,74,64,78],
[66,71,66,58,74,68,57,0,65,70],
[63,72,63,61,82,70,67,66,0,76],
[57,66,64,49,62,62,53,61,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,63,67,64,78,71,87,77,73],
[46,0,70,54,62,62,70,72,68,63],
[68,61,0,46,57,63,69,72,71,59],
[64,77,85,0,75,75,77,82,75,71],
[67,69,74,56,0,70,76,84,76,85],
[53,69,68,56,61,0,79,66,68,61],
[60,61,62,54,55,52,0,62,58,63],
[44,59,59,49,47,65,69,0,66,63],
[54,63,60,56,55,63,73,65,0,64],
[58,68,72,60,46,70,68,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,68,78,77,54,92,97,67,77],
[38,0,39,59,42,36,54,65,53,54],
[63,92,0,65,67,62,83,79,88,73],
[53,72,66,0,68,49,64,67,55,62],
[54,89,64,63,0,64,85,76,63,65],
[77,95,69,82,67,0,75,89,64,73],
[39,77,48,67,46,56,0,70,59,64],
[34,66,52,64,55,42,61,0,58,62],
[64,78,43,76,68,67,72,73,0,80],
[54,77,58,69,66,58,67,69,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,68,64,71,70,63,71,72],
[60,0,56,74,63,75,69,69,69,71],
[65,75,0,65,70,70,71,74,74,78],
[63,57,66,0,69,68,66,63,70,70],
[67,68,61,62,0,68,61,62,66,70],
[60,56,61,63,63,0,66,68,64,72],
[61,62,60,65,70,65,0,65,71,76],
[68,62,57,68,69,63,66,0,65,64],
[60,62,57,61,65,67,60,66,0,68],
[59,60,53,61,61,59,55,67,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,68,61,65,67,65,65,56,70],
[49,0,56,68,60,56,79,58,65,70],
[63,75,0,68,64,71,73,65,71,78],
[70,63,63,0,51,58,73,68,66,66],
[66,71,67,80,0,68,64,73,67,77],
[64,75,60,73,63,0,79,68,64,69],
[66,52,58,58,67,52,0,58,48,58],
[66,73,66,63,58,63,73,0,61,73],
[75,66,60,65,64,67,83,70,0,78],
[61,61,53,65,54,62,73,58,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,66,63,67,58,69,52,69,64],
[55,0,62,62,58,54,64,52,56,64],
[65,69,0,60,62,65,58,53,62,63],
[68,69,71,0,73,58,64,55,71,73],
[64,73,69,58,0,54,63,52,62,71],
[73,77,66,73,77,0,71,66,64,80],
[62,67,73,67,68,60,0,58,66,63],
[79,79,78,76,79,65,73,0,78,71],
[62,75,69,60,69,67,65,53,0,61],
[67,67,68,58,60,51,68,60,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,62,46,63,56,72,66,61,82],
[65,0,78,46,68,55,72,77,69,73],
[69,53,0,55,51,54,79,65,61,72],
[85,85,76,0,65,75,73,69,70,87],
[68,63,80,66,0,61,72,69,73,72],
[75,76,77,56,70,0,77,62,75,81],
[59,59,52,58,59,54,0,69,67,64],
[65,54,66,62,62,69,62,0,62,70],
[70,62,70,61,58,56,64,69,0,76],
[49,58,59,44,59,50,67,61,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,49,81,64,68,68,65,49,80],
[84,0,49,49,50,84,51,81,66,64],
[82,82,0,98,81,85,68,99,49,81],
[50,82,33,0,49,52,35,81,49,47],
[67,81,50,82,0,67,67,99,83,64],
[63,47,46,79,64,0,17,64,80,46],
[63,80,63,96,64,114,0,97,80,80],
[66,50,32,50,32,67,34,0,65,46],
[82,65,82,82,48,51,51,66,0,97],
[51,67,50,84,67,85,51,85,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,65,67,72,72,61,65,62],
[61,0,70,55,61,62,65,61,54,68],
[61,61,0,53,66,59,64,58,51,57],
[66,76,78,0,71,65,74,69,69,65],
[64,70,65,60,0,63,68,67,59,61],
[59,69,72,66,68,0,74,59,64,65],
[59,66,67,57,63,57,0,56,54,56],
[70,70,73,62,64,72,75,0,61,63],
[66,77,80,62,72,67,77,70,0,58],
[69,63,74,66,70,66,75,68,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,85,78,76,82,70,68,77,79],
[73,0,73,73,70,76,75,61,79,80],
[46,58,0,65,57,61,50,57,66,60],
[53,58,66,0,53,68,47,54,69,68],
[55,61,74,78,0,72,73,70,68,74],
[49,55,70,63,59,0,57,60,60,61],
[61,56,81,84,58,74,0,73,75,70],
[63,70,74,77,61,71,58,0,73,68],
[54,52,65,62,63,71,56,58,0,69],
[52,51,71,63,57,70,61,63,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,70,57,81,81,71,63,74],
[68,0,73,63,62,75,68,67,62,66],
[65,58,0,66,54,79,69,64,58,63],
[61,68,65,0,59,72,67,64,66,59],
[74,69,77,72,0,73,77,64,72,71],
[50,56,52,59,58,0,60,56,54,57],
[50,63,62,64,54,71,0,66,62,57],
[60,64,67,67,67,75,65,0,63,58],
[68,69,73,65,59,77,69,68,0,70],
[57,65,68,72,60,74,74,73,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,48,66,62,69,61,64,66,44],
[72,0,70,77,73,74,72,67,68,63],
[83,61,0,73,70,72,81,72,83,68],
[65,54,58,0,66,54,60,58,69,57],
[69,58,61,65,0,60,63,48,70,57],
[62,57,59,77,71,0,70,63,72,59],
[70,59,50,71,68,61,0,58,65,54],
[67,64,59,73,83,68,73,0,81,63],
[65,63,48,62,61,59,66,50,0,61],
[87,68,63,74,74,72,77,68,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,72,74,84,68,73,67,63,76],
[52,0,64,69,71,69,57,61,50,64],
[59,67,0,69,77,69,69,64,63,65],
[57,62,62,0,74,62,68,54,61,71],
[47,60,54,57,0,55,53,44,51,55],
[63,62,62,69,76,0,68,50,58,69],
[58,74,62,63,78,63,0,64,55,68],
[64,70,67,77,87,81,67,0,66,70],
[68,81,68,70,80,73,76,65,0,73],
[55,67,66,60,76,62,63,61,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,58,55,54,53,64,47,52,43],
[80,0,61,65,68,57,77,59,69,68],
[73,70,0,37,77,57,71,59,47,58],
[76,66,94,0,68,64,64,65,61,63],
[77,63,54,63,0,66,63,48,73,63],
[78,74,74,67,65,0,73,59,79,62],
[67,54,60,67,68,58,0,58,57,63],
[84,72,72,66,83,72,73,0,65,74],
[79,62,84,70,58,52,74,66,0,63],
[88,63,73,68,68,69,68,57,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,72,52,66,66,57,66,79,65],
[69,0,68,58,69,75,64,67,83,72],
[59,63,0,55,56,61,59,66,73,66],
[79,73,76,0,70,79,62,74,80,71],
[65,62,75,61,0,69,70,65,79,70],
[65,56,70,52,62,0,55,55,74,58],
[74,67,72,69,61,76,0,71,81,75],
[65,64,65,57,66,76,60,0,77,72],
[52,48,58,51,52,57,50,54,0,50],
[66,59,65,60,61,73,56,59,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,75,95,68,72,67,80,80,79],
[67,0,70,78,59,62,55,66,71,76],
[56,61,0,76,59,65,57,60,64,50],
[36,53,55,0,50,50,55,47,63,71],
[63,72,72,81,0,50,63,70,70,76],
[59,69,66,81,81,0,68,74,73,82],
[64,76,74,76,68,63,0,83,71,90],
[51,65,71,84,61,57,48,0,69,71],
[51,60,67,68,61,58,60,62,0,70],
[52,55,81,60,55,49,41,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,67,73,81,60,81,84,72,70],
[50,0,54,50,68,54,60,76,62,43],
[64,77,0,75,77,72,87,86,67,64],
[58,81,56,0,68,69,66,65,63,65],
[50,63,54,63,0,51,55,66,55,53],
[71,77,59,62,80,0,78,81,80,48],
[50,71,44,65,76,53,0,76,58,55],
[47,55,45,66,65,50,55,0,56,49],
[59,69,64,68,76,51,73,75,0,52],
[61,88,67,66,78,83,76,82,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,70,49,54,61,50,65,67,58],
[70,0,72,65,64,69,70,72,72,65],
[61,59,0,65,62,62,60,72,65,58],
[82,66,66,0,61,76,64,72,82,75],
[77,67,69,70,0,73,63,65,77,75],
[70,62,69,55,58,0,58,60,63,64],
[81,61,71,67,68,73,0,74,73,67],
[66,59,59,59,66,71,57,0,61,57],
[64,59,66,49,54,68,58,70,0,64],
[73,66,73,56,56,67,64,74,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,59,64,64,65,70,75,77,68],
[53,0,50,56,59,65,62,64,68,67],
[72,81,0,57,57,66,68,74,73,71],
[67,75,74,0,65,75,68,70,67,65],
[67,72,74,66,0,78,76,58,74,64],
[66,66,65,56,53,0,69,66,66,57],
[61,69,63,63,55,62,0,61,78,59],
[56,67,57,61,73,65,70,0,78,73],
[54,63,58,64,57,65,53,53,0,65],
[63,64,60,66,67,74,72,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,73,51,67,54,74,58,55,49],
[79,0,75,75,81,76,84,58,71,75],
[58,56,0,55,69,52,63,55,57,58],
[80,56,76,0,82,64,79,66,77,82],
[64,50,62,49,0,57,61,67,56,55],
[77,55,79,67,74,0,67,84,71,66],
[57,47,68,52,70,64,0,62,70,58],
[73,73,76,65,64,47,69,0,60,62],
[76,60,74,54,75,60,61,71,0,55],
[82,56,73,49,76,65,73,69,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,57,41,56,57,50,66,71,65],
[71,0,63,59,64,77,55,45,58,62],
[74,68,0,57,64,77,57,60,58,67],
[90,72,74,0,57,76,66,69,71,73],
[75,67,67,74,0,74,56,59,75,66],
[74,54,54,55,57,0,46,58,63,55],
[81,76,74,65,75,85,0,73,79,67],
[65,86,71,62,72,73,58,0,66,66],
[60,73,73,60,56,68,52,65,0,61],
[66,69,64,58,65,76,64,65,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,89,76,72,75,74,71,86,65],
[63,0,79,70,77,69,72,73,76,72],
[42,52,0,60,68,65,59,67,70,72],
[55,61,71,0,72,73,59,70,75,59],
[59,54,63,59,0,64,67,68,64,66],
[56,62,66,58,67,0,55,70,69,63],
[57,59,72,72,64,76,0,73,71,73],
[60,58,64,61,63,61,58,0,70,57],
[45,55,61,56,67,62,60,61,0,52],
[66,59,59,72,65,68,58,74,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,77,64,68,84,64,74,73,70],
[67,0,65,68,72,71,66,70,81,65],
[54,66,0,64,67,79,66,66,83,69],
[67,63,67,0,62,69,61,72,81,68],
[63,59,64,69,0,76,58,58,68,66],
[47,60,52,62,55,0,51,54,66,59],
[67,65,65,70,73,80,0,71,72,74],
[57,61,65,59,73,77,60,0,75,74],
[58,50,48,50,63,65,59,56,0,61],
[61,66,62,63,65,72,57,57,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,59,77,70,77,72,80,72,68],
[68,0,61,78,70,77,76,67,69,65],
[72,70,0,75,60,88,78,76,81,70],
[54,53,56,0,50,70,71,64,57,55],
[61,61,71,81,0,78,74,68,69,62],
[54,54,43,61,53,0,52,60,57,52],
[59,55,53,60,57,79,0,64,66,59],
[51,64,55,67,63,71,67,0,61,65],
[59,62,50,74,62,74,65,70,0,75],
[63,66,61,76,69,79,72,66,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,75,75,64,55,96,74,74,88],
[75,0,67,67,41,51,76,92,68,92],
[56,64,0,65,48,71,74,91,75,81],
[56,64,66,0,40,47,82,66,57,72],
[67,90,83,91,0,58,93,99,83,84],
[76,80,60,84,73,0,98,67,60,73],
[35,55,57,49,38,33,0,68,33,40],
[57,39,40,65,32,64,63,0,58,72],
[57,63,56,74,48,71,98,73,0,89],
[43,39,50,59,47,58,91,59,42,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,59,68,76,54,61,60,64,76],
[62,0,55,62,81,57,56,65,57,67],
[72,76,0,81,78,77,75,79,61,73],
[63,69,50,0,70,57,65,74,60,81],
[55,50,53,61,0,55,57,64,59,55],
[77,74,54,74,76,0,71,75,68,79],
[70,75,56,66,74,60,0,70,64,80],
[71,66,52,57,67,56,61,0,57,71],
[67,74,70,71,72,63,67,74,0,64],
[55,64,58,50,76,52,51,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,67,48,70,63,44,66,59,70],
[71,0,73,70,70,60,72,70,79,69],
[64,58,0,59,51,57,57,56,56,76],
[83,61,72,0,74,75,65,64,63,76],
[61,61,80,57,0,70,67,57,57,67],
[68,71,74,56,61,0,65,55,61,65],
[87,59,74,66,64,66,0,66,55,83],
[65,61,75,67,74,76,65,0,69,76],
[72,52,75,68,74,70,76,62,0,62],
[61,62,55,55,64,66,48,55,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,63,49,67,51,62,47,58,65],
[77,0,85,65,64,70,65,67,61,75],
[68,46,0,52,54,36,51,39,52,59],
[82,66,79,0,55,61,76,60,74,83],
[64,67,77,76,0,48,67,66,64,69],
[80,61,95,70,83,0,83,80,72,83],
[69,66,80,55,64,48,0,57,52,64],
[84,64,92,71,65,51,74,0,87,77],
[73,70,79,57,67,59,79,44,0,61],
[66,56,72,48,62,48,67,54,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,57,67,58,58,68,70,67,64],
[69,0,70,66,68,60,67,67,69,66],
[74,61,0,62,72,58,69,68,65,71],
[64,65,69,0,70,66,70,75,69,71],
[73,63,59,61,0,66,66,70,71,68],
[73,71,73,65,65,0,68,70,65,59],
[63,64,62,61,65,63,0,66,67,65],
[61,64,63,56,61,61,65,0,64,67],
[64,62,66,62,60,66,64,67,0,59],
[67,65,60,60,63,72,66,64,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,53,78,69,71,50,76,71,82],
[52,0,53,49,62,44,50,67,60,69],
[78,78,0,69,66,73,73,77,74,64],
[53,82,62,0,75,66,73,83,74,68],
[62,69,65,56,0,71,64,70,70,73],
[60,87,58,65,60,0,59,61,73,75],
[81,81,58,58,67,72,0,72,72,66],
[55,64,54,48,61,70,59,0,58,57],
[60,71,57,57,61,58,59,73,0,74],
[49,62,67,63,58,56,65,74,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,69,54,57,62,60,65,62,53],
[75,0,70,69,58,69,67,79,76,79],
[62,61,0,53,63,66,54,65,65,54],
[77,62,78,0,58,58,71,66,62,52],
[74,73,68,73,0,67,64,79,65,61],
[69,62,65,73,64,0,65,77,76,72],
[71,64,77,60,67,66,0,65,77,63],
[66,52,66,65,52,54,66,0,63,64],
[69,55,66,69,66,55,54,68,0,65],
[78,52,77,79,70,59,68,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,71,76,67,69,70,60,70,86],
[65,0,77,74,78,71,60,73,73,70],
[60,54,0,84,58,65,62,45,66,84],
[55,57,47,0,45,57,59,47,54,59],
[64,53,73,86,0,77,65,62,76,74],
[62,60,66,74,54,0,72,54,48,66],
[61,71,69,72,66,59,0,57,68,78],
[71,58,86,84,69,77,74,0,84,81],
[61,58,65,77,55,83,63,47,0,68],
[45,61,47,72,57,65,53,50,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,64,52,67,56,68,70,58,67],
[52,0,64,55,60,53,60,60,55,76],
[67,67,0,61,65,69,68,78,60,84],
[79,76,70,0,71,83,67,71,60,82],
[64,71,66,60,0,69,69,72,77,70],
[75,78,62,48,62,0,60,62,58,76],
[63,71,63,64,62,71,0,80,79,72],
[61,71,53,60,59,69,51,0,61,68],
[73,76,71,71,54,73,52,70,0,77],
[64,55,47,49,61,55,59,63,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,73,55,76,53,73,55,55,38],
[94,0,94,94,74,55,111,56,114,94],
[58,37,0,55,56,35,54,35,94,58],
[76,37,76,0,56,92,74,93,113,96],
[55,57,75,75,0,73,75,55,75,58],
[78,76,96,39,58,0,74,95,113,77],
[58,20,77,57,56,57,0,57,77,77],
[76,75,96,38,76,36,74,0,94,76],
[76,17,37,18,56,18,54,37,0,37],
[93,37,73,35,73,54,54,55,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,61,63,62,55,56,63,55,64],
[68,0,53,60,63,57,55,56,53,63],
[70,78,0,66,64,62,70,68,62,69],
[68,71,65,0,65,61,70,66,56,68],
[69,68,67,66,0,63,76,72,59,67],
[76,74,69,70,68,0,69,65,69,67],
[75,76,61,61,55,62,0,63,56,72],
[68,75,63,65,59,66,68,0,61,70],
[76,78,69,75,72,62,75,70,0,68],
[67,68,62,63,64,64,59,61,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,58,74,76,72,74,68,77,66],
[58,0,56,71,59,82,77,70,79,79],
[73,75,0,75,68,89,83,78,73,64],
[57,60,56,0,69,72,63,64,70,60],
[55,72,63,62,0,63,61,63,64,67],
[59,49,42,59,68,0,63,59,61,54],
[57,54,48,68,70,68,0,65,65,55],
[63,61,53,67,68,72,66,0,63,65],
[54,52,58,61,67,70,66,68,0,59],
[65,52,67,71,64,77,76,66,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,83,56,75,56,63,60,75,73],
[64,0,90,82,70,63,63,70,64,78],
[48,41,0,43,65,50,45,47,63,65],
[75,49,88,0,69,73,57,64,74,76],
[56,61,66,62,0,46,67,56,69,72],
[75,68,81,58,85,0,71,70,88,77],
[68,68,86,74,64,60,0,63,84,81],
[71,61,84,67,75,61,68,0,84,88],
[56,67,68,57,62,43,47,47,0,72],
[58,53,66,55,59,54,50,43,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,72,61,60,70,63,71,60,60],
[57,0,60,60,59,60,51,75,57,58],
[59,71,0,53,66,56,56,64,53,58],
[70,71,78,0,78,61,60,73,66,62],
[71,72,65,53,0,55,52,66,53,66],
[61,71,75,70,76,0,63,72,65,70],
[68,80,75,71,79,68,0,74,57,72],
[60,56,67,58,65,59,57,0,47,56],
[71,74,78,65,78,66,74,84,0,64],
[71,73,73,69,65,61,59,75,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,59,58,50,56,57,53,64,62],
[81,0,58,60,60,64,71,63,63,73],
[72,73,0,63,60,68,74,63,56,61],
[73,71,68,0,69,65,71,68,72,69],
[81,71,71,62,0,71,76,67,69,70],
[75,67,63,66,60,0,73,68,67,75],
[74,60,57,60,55,58,0,66,56,65],
[78,68,68,63,64,63,65,0,60,76],
[67,68,75,59,62,64,75,71,0,60],
[69,58,70,62,61,56,66,55,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,54,59,71,61,67,79,68,67],
[71,0,56,57,79,61,73,69,70,67],
[77,75,0,77,80,72,71,73,67,53],
[72,74,54,0,95,70,64,67,72,75],
[60,52,51,36,0,68,54,71,56,59],
[70,70,59,61,63,0,62,77,69,60],
[64,58,60,67,77,69,0,74,65,63],
[52,62,58,64,60,54,57,0,58,63],
[63,61,64,59,75,62,66,73,0,57],
[64,64,78,56,72,71,68,68,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,25,77,79,104,27,52,52,81,52],
[106,0,79,104,79,54,106,79,81,79],
[54,52,0,79,27,54,79,27,81,79],
[52,27,52,0,52,54,79,52,81,52],
[27,52,104,79,0,54,52,52,81,52],
[104,77,77,77,77,0,77,52,106,52],
[79,25,52,52,79,54,0,27,106,52],
[79,52,104,79,79,79,104,0,106,104],
[50,50,50,50,50,25,25,25,0,25],
[79,52,52,79,79,79,79,27,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,73,73,66,75,60,77,81,88],
[59,0,65,61,59,57,63,66,58,66],
[58,66,0,52,54,62,68,62,63,72],
[58,70,79,0,72,62,67,65,57,75],
[65,72,77,59,0,77,59,72,68,77],
[56,74,69,69,54,0,62,67,70,72],
[71,68,63,64,72,69,0,72,63,74],
[54,65,69,66,59,64,59,0,62,77],
[50,73,68,74,63,61,68,69,0,76],
[43,65,59,56,54,59,57,54,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,83,50,69,78,59,59,91,72],
[41,0,72,61,80,71,60,49,63,73],
[48,59,0,50,88,88,50,68,72,79],
[81,70,81,0,68,68,59,58,51,70],
[62,51,43,63,0,59,72,52,72,82],
[53,60,43,63,72,0,62,82,61,72],
[72,71,81,72,59,69,0,59,71,51],
[72,82,63,73,79,49,72,0,72,92],
[40,68,59,80,59,70,60,59,0,60],
[59,58,52,61,49,59,80,39,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,75,76,84,84,68,66,94,65],
[58,0,74,58,67,71,71,68,74,66],
[56,57,0,59,60,55,68,71,85,67],
[55,73,72,0,69,65,67,60,81,54],
[47,64,71,62,0,69,68,67,68,58],
[47,60,76,66,62,0,61,68,76,55],
[63,60,63,64,63,70,0,72,79,65],
[65,63,60,71,64,63,59,0,75,59],
[37,57,46,50,63,55,52,56,0,57],
[66,65,64,77,73,76,66,72,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,81,85,105,85,90,75,58,83],
[57,0,50,67,74,65,85,73,74,67],
[50,81,0,59,46,74,106,75,48,48],
[46,64,72,0,88,97,89,74,48,72],
[26,57,85,43,0,59,75,60,49,58],
[46,66,57,34,72,0,66,57,42,40],
[41,46,25,42,56,65,0,57,39,58],
[56,58,56,57,71,74,74,0,57,63],
[73,57,83,83,82,89,92,74,0,82],
[48,64,83,59,73,91,73,68,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,57,71,61,73,75,78,67,69],
[54,0,60,63,64,69,64,62,58,57],
[74,71,0,77,73,85,69,76,78,65],
[60,68,54,0,58,68,65,67,59,61],
[70,67,58,73,0,79,74,76,68,58],
[58,62,46,63,52,0,56,62,61,56],
[56,67,62,66,57,75,0,60,65,56],
[53,69,55,64,55,69,71,0,65,59],
[64,73,53,72,63,70,66,66,0,52],
[62,74,66,70,73,75,75,72,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,47,67,42,52,62,41,55,47],
[66,0,55,59,40,65,49,35,53,40],
[84,76,0,58,66,72,60,59,93,64],
[64,72,73,0,58,71,60,46,61,52],
[89,91,65,73,0,97,84,87,100,79],
[79,66,59,60,34,0,66,46,79,52],
[69,82,71,71,47,65,0,72,60,64],
[90,96,72,85,44,85,59,0,85,85],
[76,78,38,70,31,52,71,46,0,59],
[84,91,67,79,52,79,67,46,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,71,64,64,67,73,72,81,68],
[57,0,67,72,56,67,73,72,81,84],
[60,64,0,41,63,70,68,66,79,67],
[67,59,90,0,74,81,87,80,73,61],
[67,75,68,57,0,68,74,66,89,68],
[64,64,61,50,63,0,76,65,55,65],
[58,58,63,44,57,55,0,60,63,60],
[59,59,65,51,65,66,71,0,72,66],
[50,50,52,58,42,76,68,59,0,67],
[63,47,64,70,63,66,71,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,46,50,51,60,51,46,63,73,50],
[85,0,50,87,65,56,62,70,55,58],
[81,81,0,66,64,79,67,65,71,66],
[80,44,65,0,83,50,73,50,77,52],
[71,66,67,48,0,57,70,82,74,53],
[80,75,52,81,74,0,55,79,77,76],
[85,69,64,58,61,76,0,70,62,80],
[68,61,66,81,49,52,61,0,56,63],
[58,76,60,54,57,54,69,75,0,64],
[81,73,65,79,78,55,51,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,75,65,72,65,70,70,77,66],
[58,0,67,66,71,66,67,67,61,68],
[56,64,0,61,67,57,68,66,66,58],
[66,65,70,0,73,70,77,70,68,65],
[59,60,64,58,0,64,64,62,65,65],
[66,65,74,61,67,0,70,69,69,69],
[61,64,63,54,67,61,0,58,60,65],
[61,64,65,61,69,62,73,0,69,63],
[54,70,65,63,66,62,71,62,0,66],
[65,63,73,66,66,62,66,68,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,64,0,64,67,34,66,0,66],
[33,0,65,33,65,67,67,99,33,67],
[67,66,0,33,99,67,67,99,67,67],
[131,98,98,0,131,99,66,98,34,66],
[67,66,32,0,0,67,34,34,34,66],
[64,64,64,32,64,0,66,66,0,32],
[97,64,64,65,97,65,0,66,65,32],
[65,32,32,33,97,65,65,0,33,65],
[131,98,64,97,97,131,66,98,0,66],
[65,64,64,65,65,99,99,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,76,62,65,60,65,61,68],
[68,0,60,68,47,66,53,71,68,58],
[69,71,0,80,65,59,55,66,63,61],
[55,63,51,0,44,59,62,60,54,60],
[69,84,66,87,0,75,64,79,64,66],
[66,65,72,72,56,0,62,68,67,65],
[71,78,76,69,67,69,0,69,69,63],
[66,60,65,71,52,63,62,0,57,56],
[70,63,68,77,67,64,62,74,0,57],
[63,73,70,71,65,66,68,75,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,54,58,56,47,53,71,52,52],
[83,0,64,68,74,64,67,93,66,67],
[77,67,0,75,66,67,58,79,68,63],
[73,63,56,0,69,54,63,73,69,62],
[75,57,65,62,0,49,65,77,63,62],
[84,67,64,77,82,0,66,82,61,63],
[78,64,73,68,66,65,0,76,72,60],
[60,38,52,58,54,49,55,0,54,50],
[79,65,63,62,68,70,59,77,0,61],
[79,64,68,69,69,68,71,81,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,76,69,86,71,72,89,74,65],
[61,0,67,54,72,67,60,81,68,66],
[55,64,0,59,77,70,58,78,69,62],
[62,77,72,0,76,76,73,75,70,75],
[45,59,54,55,0,74,56,70,62,60],
[60,64,61,55,57,0,53,64,62,63],
[59,71,73,58,75,78,0,81,66,75],
[42,50,53,56,61,67,50,0,62,49],
[57,63,62,61,69,69,65,69,0,58],
[66,65,69,56,71,68,56,82,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,61,59,78,58,79,58,89,92],
[91,0,81,60,81,111,101,81,81,101],
[70,50,0,61,70,80,70,80,61,80],
[72,71,70,0,80,100,82,61,92,62],
[53,50,61,51,0,70,102,62,73,62],
[73,20,51,31,61,0,72,51,63,62],
[52,30,61,49,29,59,0,40,49,70],
[73,50,51,70,69,80,91,0,90,100],
[42,50,70,39,58,68,82,41,0,61],
[39,30,51,69,69,69,61,31,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,74,63,89,84,69,72,63,56],
[72,0,102,54,83,78,81,82,77,72],
[57,29,0,46,75,72,67,59,64,38],
[68,77,85,0,80,83,69,60,74,65],
[42,48,56,51,0,67,62,68,60,48],
[47,53,59,48,64,0,53,61,55,50],
[62,50,64,62,69,78,0,62,48,40],
[59,49,72,71,63,70,69,0,57,46],
[68,54,67,57,71,76,83,74,0,44],
[75,59,93,66,83,81,91,85,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,65,53,62,50,79,69,61,67],
[70,0,68,52,75,60,70,62,54,62],
[66,63,0,53,68,55,70,59,57,52],
[78,79,78,0,81,63,86,73,71,82],
[69,56,63,50,0,51,71,62,47,58],
[81,71,76,68,80,0,81,70,62,65],
[52,61,61,45,60,50,0,56,51,55],
[62,69,72,58,69,61,75,0,62,70],
[70,77,74,60,84,69,80,69,0,67],
[64,69,79,49,73,66,76,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,83,80,74,85,82,75,82],
[63,0,56,63,68,72,63,52,62,62],
[73,75,0,71,67,79,64,57,68,67],
[48,68,60,0,55,43,56,44,58,68],
[51,63,64,76,0,63,63,41,68,68],
[57,59,52,88,68,0,66,44,54,61],
[46,68,67,75,68,65,0,66,49,75],
[49,79,74,87,90,87,65,0,82,76],
[56,69,63,73,63,77,82,49,0,76],
[49,69,64,63,63,70,56,55,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,65,73,79,69,77,77,69],
[64,0,65,64,68,77,76,84,79,81],
[63,66,0,67,66,76,77,81,84,76],
[66,67,64,0,66,68,69,71,90,69],
[58,63,65,65,0,61,62,67,73,62],
[52,54,55,63,70,0,66,69,75,74],
[62,55,54,62,69,65,0,75,79,65],
[54,47,50,60,64,62,56,0,68,67],
[54,52,47,41,58,56,52,63,0,58],
[62,50,55,62,69,57,66,64,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,65,65,64,66,69,74,76],
[62,0,58,69,70,63,66,68,73,68],
[65,73,0,69,71,73,58,66,77,75],
[66,62,62,0,62,64,56,62,68,72],
[66,61,60,69,0,53,66,61,74,79],
[67,68,58,67,78,0,65,73,66,69],
[65,65,73,75,65,66,0,66,76,77],
[62,63,65,69,70,58,65,0,77,81],
[57,58,54,63,57,65,55,54,0,71],
[55,63,56,59,52,62,54,50,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,64,80,60,83,69,77,68,62],
[72,0,69,68,61,83,78,78,72,55],
[67,62,0,82,65,83,63,89,67,58],
[51,63,49,0,80,75,79,80,76,59],
[71,70,66,51,0,79,71,58,72,66],
[48,48,48,56,52,0,60,71,73,55],
[62,53,68,52,60,71,0,64,53,51],
[54,53,42,51,73,60,67,0,68,43],
[63,59,64,55,59,58,78,63,0,49],
[69,76,73,72,65,76,80,88,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,66,54,57,63,56,73,40,55],
[74,0,62,63,66,71,70,76,45,59],
[65,69,0,43,62,70,80,83,57,64],
[77,68,88,0,89,82,88,69,63,71],
[74,65,69,42,0,63,60,57,39,77],
[68,60,61,49,68,0,67,63,75,67],
[75,61,51,43,71,64,0,77,44,58],
[58,55,48,62,74,68,54,0,70,56],
[91,86,74,68,92,56,87,61,0,58],
[76,72,67,60,54,64,73,75,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,72,65,64,67,58,67,85,70],
[58,0,85,58,57,56,64,53,67,65],
[59,46,0,53,47,54,60,48,55,56],
[66,73,78,0,64,60,67,68,64,66],
[67,74,84,67,0,69,73,72,65,76],
[64,75,77,71,62,0,63,64,64,82],
[73,67,71,64,58,68,0,59,71,68],
[64,78,83,63,59,67,72,0,74,67],
[46,64,76,67,66,67,60,57,0,79],
[61,66,75,65,55,49,63,64,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,67,66,79,67,66,68,76],
[67,0,72,66,68,75,64,64,71,66],
[63,59,0,58,65,71,62,57,70,62],
[64,65,73,0,70,81,65,62,70,67],
[65,63,66,61,0,77,66,61,62,67],
[52,56,60,50,54,0,56,42,53,52],
[64,67,69,66,65,75,0,64,71,65],
[65,67,74,69,70,89,67,0,74,72],
[63,60,61,61,69,78,60,57,0,69],
[55,65,69,64,64,79,66,59,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,52,79,104,79,49,79,93],
[68,0,67,52,93,67,79,80,66,67],
[65,64,0,66,79,51,92,63,54,64],
[79,79,65,0,92,78,65,65,53,91],
[52,38,52,39,0,38,39,37,38,39],
[27,64,80,53,93,0,93,38,80,66],
[52,52,39,66,92,38,0,51,67,52],
[82,51,68,66,94,93,80,0,81,68],
[52,65,77,78,93,51,64,50,0,77],
[38,64,67,40,92,65,79,63,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,64,69,71,76,79,75,82,75],
[59,0,66,62,58,59,68,71,68,69],
[67,65,0,68,70,70,73,76,69,68],
[62,69,63,0,58,71,66,73,72,68],
[60,73,61,73,0,71,68,74,77,77],
[55,72,61,60,60,0,65,74,71,62],
[52,63,58,65,63,66,0,68,70,64],
[56,60,55,58,57,57,63,0,67,59],
[49,63,62,59,54,60,61,64,0,63],
[56,62,63,63,54,69,67,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,67,72,68,59,72,66,62,72],
[78,0,83,66,73,68,71,70,63,74],
[64,48,0,76,65,64,66,67,67,63],
[59,65,55,0,70,60,61,61,55,65],
[63,58,66,61,0,51,58,71,58,71],
[72,63,67,71,80,0,74,72,62,69],
[59,60,65,70,73,57,0,74,64,76],
[65,61,64,70,60,59,57,0,56,67],
[69,68,64,76,73,69,67,75,0,72],
[59,57,68,66,60,62,55,64,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,70,67,59,63,74,62,65,62],
[67,0,77,64,54,61,66,68,67,56],
[61,54,0,66,60,58,67,58,59,59],
[64,67,65,0,76,66,73,73,70,61],
[72,77,71,55,0,58,67,64,67,63],
[68,70,73,65,73,0,61,79,69,68],
[57,65,64,58,64,70,0,59,72,55],
[69,63,73,58,67,52,72,0,62,54],
[66,64,72,61,64,62,59,69,0,58],
[69,75,72,70,68,63,76,77,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,76,74,75,61,70,61,54,67],
[63,0,72,70,63,74,66,63,64,68],
[55,59,0,55,60,66,57,60,50,61],
[57,61,76,0,59,69,58,56,61,57],
[56,68,71,72,0,65,57,59,50,56],
[70,57,65,62,66,0,60,57,47,58],
[61,65,74,73,74,71,0,60,64,58],
[70,68,71,75,72,74,71,0,61,59],
[77,67,81,70,81,84,67,70,0,64],
[64,63,70,74,75,73,73,72,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,75,67,71,69,59,68,57,84],
[61,0,77,49,64,79,59,66,64,71],
[56,54,0,61,73,63,66,60,57,76],
[64,82,70,0,72,70,76,66,65,80],
[60,67,58,59,0,64,57,57,53,72],
[62,52,68,61,67,0,49,46,60,65],
[72,72,65,55,74,82,0,66,63,72],
[63,65,71,65,74,85,65,0,67,72],
[74,67,74,66,78,71,68,64,0,71],
[47,60,55,51,59,66,59,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,77,60,58,64,71,62,59,73],
[74,0,63,76,64,71,66,70,68,72],
[54,68,0,74,74,68,75,56,72,77],
[71,55,57,0,66,56,74,71,60,92],
[73,67,57,65,0,64,70,57,71,98],
[67,60,63,75,67,0,71,67,70,84],
[60,65,56,57,61,60,0,63,66,82],
[69,61,75,60,74,64,68,0,75,82],
[72,63,59,71,60,61,65,56,0,79],
[58,59,54,39,33,47,49,49,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,66,74,71,75,67,79,66],
[69,0,76,80,76,81,73,63,80,74],
[61,55,0,76,76,57,74,60,72,73],
[65,51,55,0,72,66,66,42,51,68],
[57,55,55,59,0,61,74,61,58,46],
[60,50,74,65,70,0,76,60,62,70],
[56,58,57,65,57,55,0,53,66,58],
[64,68,71,89,70,71,78,0,84,72],
[52,51,59,80,73,69,65,47,0,63],
[65,57,58,63,85,61,73,59,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,58,75,85,63,73,69,86,64],
[51,0,54,64,76,62,61,60,71,62],
[73,77,0,81,65,73,77,75,85,84],
[56,67,50,0,68,53,58,59,64,51],
[46,55,66,63,0,39,64,64,73,66],
[68,69,58,78,92,0,75,72,76,70],
[58,70,54,73,67,56,0,60,75,72],
[62,71,56,72,67,59,71,0,80,69],
[45,60,46,67,58,55,56,51,0,67],
[67,69,47,80,65,61,59,62,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,76,75,79,73,66,76,69],
[66,0,83,65,59,57,76,53,68,65],
[61,48,0,66,70,50,71,52,76,66],
[55,66,65,0,62,54,70,46,70,53],
[56,72,61,69,0,53,74,54,51,76],
[52,74,81,77,78,0,76,56,86,72],
[58,55,60,61,57,55,0,52,60,62],
[65,78,79,85,77,75,79,0,80,67],
[55,63,55,61,80,45,71,51,0,51],
[62,66,65,78,55,59,69,64,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,77,71,67,71,58,68,58,68],
[62,0,77,79,66,83,67,62,85,72],
[54,54,0,49,69,61,53,71,66,57],
[60,52,82,0,66,79,71,69,63,70],
[64,65,62,65,0,71,53,66,69,51],
[60,48,70,52,60,0,59,58,66,69],
[73,64,78,60,78,72,0,61,65,51],
[63,69,60,62,65,73,70,0,68,71],
[73,46,65,68,62,65,66,63,0,64],
[63,59,74,61,80,62,80,60,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,83,83,82,97,64,114,48,81],
[68,0,83,66,100,82,47,83,66,83],
[48,48,0,81,81,82,48,66,31,48],
[48,65,50,0,82,66,82,65,48,48],
[49,31,50,49,0,49,48,64,49,16],
[34,49,49,65,82,0,81,65,65,65],
[67,84,83,49,83,50,0,82,82,82],
[17,48,65,66,67,66,49,0,17,17],
[83,65,100,83,82,66,49,114,0,82],
[50,48,83,83,115,66,49,114,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,47,50,60,60,55,69,49,54],
[81,0,65,74,64,59,68,83,64,70],
[84,66,0,75,73,75,79,73,75,65],
[81,57,56,0,68,75,62,68,59,64],
[71,67,58,63,0,70,64,78,68,70],
[71,72,56,56,61,0,57,64,63,59],
[76,63,52,69,67,74,0,83,61,67],
[62,48,58,63,53,67,48,0,48,63],
[82,67,56,72,63,68,70,83,0,71],
[77,61,66,67,61,72,64,68,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,73,66,63,65,81,67,57,58],
[50,0,66,58,57,64,58,54,62,60],
[58,65,0,63,63,77,68,64,53,77],
[65,73,68,0,70,76,74,62,68,60],
[68,74,68,61,0,76,60,65,65,57],
[66,67,54,55,55,0,78,52,59,59],
[50,73,63,57,71,53,0,58,58,50],
[64,77,67,69,66,79,73,0,57,69],
[74,69,78,63,66,72,73,74,0,63],
[73,71,54,71,74,72,81,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,61,63,69,65,53,60,67,66],
[71,0,58,62,74,67,61,62,65,64],
[70,73,0,71,76,72,59,65,70,69],
[68,69,60,0,73,72,67,66,73,76],
[62,57,55,58,0,67,64,57,62,74],
[66,64,59,59,64,0,71,66,66,72],
[78,70,72,64,67,60,0,61,61,77],
[71,69,66,65,74,65,70,0,67,74],
[64,66,61,58,69,65,70,64,0,70],
[65,67,62,55,57,59,54,57,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,63,78,70,70,88,66,79,57],
[74,0,68,73,76,80,85,66,72,60],
[68,63,0,79,72,74,72,62,76,54],
[53,58,52,0,54,66,67,53,61,51],
[61,55,59,77,0,59,70,53,71,55],
[61,51,57,65,72,0,64,56,71,54],
[43,46,59,64,61,67,0,47,50,40],
[65,65,69,78,78,75,84,0,79,67],
[52,59,55,70,60,60,81,52,0,51],
[74,71,77,80,76,77,91,64,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,67,73,66,78,65,77,73,63],
[64,0,70,62,60,75,72,63,62,61],
[64,61,0,58,55,63,60,59,62,61],
[58,69,73,0,72,78,73,69,65,67],
[65,71,76,59,0,78,78,70,75,63],
[53,56,68,53,53,0,54,55,59,59],
[66,59,71,58,53,77,0,68,62,61],
[54,68,72,62,61,76,63,0,66,59],
[58,69,69,66,56,72,69,65,0,62],
[68,70,70,64,68,72,70,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,64,74,66,60,54,61,69,73],
[74,0,86,70,79,58,77,75,72,82],
[67,45,0,60,55,59,66,51,59,53],
[57,61,71,0,53,48,67,36,55,66],
[65,52,76,78,0,61,69,60,73,67],
[71,73,72,83,70,0,74,62,66,73],
[77,54,65,64,62,57,0,55,65,80],
[70,56,80,95,71,69,76,0,85,77],
[62,59,72,76,58,65,66,46,0,64],
[58,49,78,65,64,58,51,54,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,71,65,71,65,62,67,72,72],
[61,0,75,64,66,68,69,67,64,68],
[60,56,0,58,67,60,62,61,56,66],
[66,67,73,0,68,66,61,63,74,67],
[60,65,64,63,0,68,66,72,58,70],
[66,63,71,65,63,0,66,67,60,60],
[69,62,69,70,65,65,0,65,73,65],
[64,64,70,68,59,64,66,0,67,66],
[59,67,75,57,73,71,58,64,0,67],
[59,63,65,64,61,71,66,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,67,76,69,71,70,63,67,70],
[56,0,50,61,54,56,61,58,53,56],
[64,81,0,79,63,73,79,76,59,75],
[55,70,52,0,63,70,63,62,59,61],
[62,77,68,68,0,67,66,68,64,63],
[60,75,58,61,64,0,71,66,64,67],
[61,70,52,68,65,60,0,65,56,62],
[68,73,55,69,63,65,66,0,60,63],
[64,78,72,72,67,67,75,71,0,69],
[61,75,56,70,68,64,69,68,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,76,78,69,58,80,61,76,57],
[58,0,72,63,76,67,67,72,68,51],
[55,59,0,64,69,45,58,57,63,58],
[53,68,67,0,59,48,63,47,68,50],
[62,55,62,72,0,47,66,46,69,56],
[73,64,86,83,84,0,80,49,59,68],
[51,64,73,68,65,51,0,58,70,47],
[70,59,74,84,85,82,73,0,69,62],
[55,63,68,63,62,72,61,62,0,57],
[74,80,73,81,75,63,84,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,65,79,71,71,79,52,69,73],
[51,0,63,64,65,53,57,57,52,60],
[66,68,0,60,64,59,60,69,74,60],
[52,67,71,0,75,67,61,53,63,69],
[60,66,67,56,0,61,57,65,64,50],
[60,78,72,64,70,0,71,54,80,67],
[52,74,71,70,74,60,0,63,62,58],
[79,74,62,78,66,77,68,0,78,70],
[62,79,57,68,67,51,69,53,0,63],
[58,71,71,62,81,64,73,61,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,50,69,62,59,57,45,62,57],
[75,0,61,71,72,72,70,69,65,59],
[81,70,0,75,86,72,64,73,73,86],
[62,60,56,0,71,70,62,65,66,59],
[69,59,45,60,0,65,63,57,66,71],
[72,59,59,61,66,0,63,61,52,65],
[74,61,67,69,68,68,0,64,59,65],
[86,62,58,66,74,70,67,0,76,77],
[69,66,58,65,65,79,72,55,0,75],
[74,72,45,72,60,66,66,54,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,74,63,59,54,52,45,67,54],
[92,0,76,58,54,48,50,52,67,76],
[57,55,0,23,36,45,57,70,65,45],
[68,73,108,0,52,74,83,79,82,69],
[72,77,95,79,0,59,85,63,92,71],
[77,83,86,57,72,0,62,62,77,66],
[79,81,74,48,46,69,0,51,76,61],
[86,79,61,52,68,69,80,0,82,60],
[64,64,66,49,39,54,55,49,0,53],
[77,55,86,62,60,65,70,71,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,58,69,64,67,80,56,57,53],
[57,0,32,42,33,36,49,27,26,40],
[73,99,0,66,65,73,71,63,32,65],
[62,89,65,0,64,74,55,48,33,34],
[67,98,66,67,0,93,66,74,26,43],
[64,95,58,57,38,0,44,56,57,40],
[51,82,60,76,65,87,0,50,59,69],
[75,104,68,83,57,75,81,0,51,60],
[74,105,99,98,105,74,72,80,0,59],
[78,91,66,97,88,91,62,71,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,71,55,58,57,61,66,65,51],
[61,0,68,62,60,50,61,65,63,49],
[60,63,0,55,61,52,58,54,54,46],
[76,69,76,0,75,63,65,65,74,63],
[73,71,70,56,0,62,57,55,66,61],
[74,81,79,68,69,0,65,73,69,69],
[70,70,73,66,74,66,0,64,74,71],
[65,66,77,66,76,58,67,0,65,65],
[66,68,77,57,65,62,57,66,0,69],
[80,82,85,68,70,62,60,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,84,73,75,70,73,76,81,74],
[69,0,75,84,71,53,74,76,80,62],
[47,56,0,55,60,53,65,65,59,59],
[58,47,76,0,67,52,77,65,64,47],
[56,60,71,64,0,62,66,60,67,62],
[61,78,78,79,69,0,82,87,72,71],
[58,57,66,54,65,49,0,69,61,60],
[55,55,66,66,71,44,62,0,60,58],
[50,51,72,67,64,59,70,71,0,60],
[57,69,72,84,69,60,71,73,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,75,79,90,61,58,55,71,73],
[70,0,68,86,88,66,78,77,87,59],
[56,63,0,79,61,61,53,55,61,41],
[52,45,52,0,58,46,66,40,58,30],
[41,43,70,73,0,44,49,38,57,38],
[70,65,70,85,87,0,57,48,83,48],
[73,53,78,65,82,74,0,87,83,64],
[76,54,76,91,93,83,44,0,93,27],
[60,44,70,73,74,48,48,38,0,31],
[58,72,90,101,93,83,67,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,85,58,75,78,91,65,73,77],
[73,0,79,82,79,75,85,58,66,83],
[46,52,0,53,59,47,84,61,60,64],
[73,49,78,0,58,89,95,64,73,81],
[56,52,72,73,0,65,80,47,54,63],
[53,56,84,42,66,0,71,57,67,63],
[40,46,47,36,51,60,0,39,36,49],
[66,73,70,67,84,74,92,0,56,77],
[58,65,71,58,77,64,95,75,0,70],
[54,48,67,50,68,68,82,54,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,54,47,48,49,66,65,61,67],
[72,0,68,67,45,61,49,57,63,69],
[77,63,0,80,71,63,69,71,70,78],
[84,64,51,0,61,63,61,59,54,64],
[83,86,60,70,0,68,67,61,64,73],
[82,70,68,68,63,0,60,69,61,66],
[65,82,62,70,64,71,0,77,58,76],
[66,74,60,72,70,62,54,0,67,75],
[70,68,61,77,67,70,73,64,0,81],
[64,62,53,67,58,65,55,56,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,66,78,66,60,69,68,77,76],
[61,0,71,84,69,61,67,65,78,77],
[65,60,0,75,69,69,63,66,75,70],
[53,47,56,0,56,58,39,54,57,69],
[65,62,62,75,0,70,74,65,69,84],
[71,70,62,73,61,0,68,72,83,76],
[62,64,68,92,57,63,0,61,68,62],
[63,66,65,77,66,59,70,0,82,73],
[54,53,56,74,62,48,63,49,0,68],
[55,54,61,62,47,55,69,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,63,62,75,69,64,72,62,71],
[78,0,65,75,71,78,81,68,70,69],
[68,66,0,66,64,66,69,59,69,70],
[69,56,65,0,61,70,70,60,57,71],
[56,60,67,70,0,60,75,65,59,63],
[62,53,65,61,71,0,70,70,62,72],
[67,50,62,61,56,61,0,65,52,73],
[59,63,72,71,66,61,66,0,66,79],
[69,61,62,74,72,69,79,65,0,68],
[60,62,61,60,68,59,58,52,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,83,80,84,65,77,71,84,75],
[46,0,64,64,58,55,65,52,68,57],
[48,67,0,66,68,57,59,57,63,59],
[51,67,65,0,61,57,57,48,51,57],
[47,73,63,70,0,70,67,53,67,65],
[66,76,74,74,61,0,68,64,76,63],
[54,66,72,74,64,63,0,62,62,60],
[60,79,74,83,78,67,69,0,87,76],
[47,63,68,80,64,55,69,44,0,60],
[56,74,72,74,66,68,71,55,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,69,62,61,56,71,71,82,72],
[54,0,72,65,57,65,69,69,68,67],
[62,59,0,59,67,54,64,47,80,68],
[69,66,72,0,59,66,58,71,75,84],
[70,74,64,72,0,72,67,61,63,82],
[75,66,77,65,59,0,65,73,75,80],
[60,62,67,73,64,66,0,69,68,72],
[60,62,84,60,70,58,62,0,76,72],
[49,63,51,56,68,56,63,55,0,78],
[59,64,63,47,49,51,59,59,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,98,65,98,65,66,66,66,98],
[33,0,66,33,65,0,66,33,33,33],
[33,65,0,66,32,0,66,33,0,33],
[66,98,65,0,65,65,66,33,33,66],
[33,66,99,66,0,66,99,99,66,99],
[66,131,131,66,65,0,66,66,66,66],
[65,65,65,65,32,65,0,65,33,65],
[65,98,98,98,32,65,66,0,33,98],
[65,98,131,98,65,65,98,98,0,98],
[33,98,98,65,32,65,66,33,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,55,66,59,57,49,64,68,64],
[77,0,66,76,70,69,52,71,60,69],
[76,65,0,82,75,67,67,79,63,67],
[65,55,49,0,53,57,55,59,54,54],
[72,61,56,78,0,58,69,69,62,66],
[74,62,64,74,73,0,55,72,56,62],
[82,79,64,76,62,76,0,78,71,66],
[67,60,52,72,62,59,53,0,52,66],
[63,71,68,77,69,75,60,79,0,67],
[67,62,64,77,65,69,65,65,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,76,83,86,85,82,75,64,77],
[57,0,65,81,68,67,64,70,55,65],
[55,66,0,79,67,63,80,64,53,66],
[48,50,52,0,59,56,58,51,41,64],
[45,63,64,72,0,70,66,64,66,67],
[46,64,68,75,61,0,74,64,68,69],
[49,67,51,73,65,57,0,46,48,72],
[56,61,67,80,67,67,85,0,50,81],
[67,76,78,90,65,63,83,81,0,86],
[54,66,65,67,64,62,59,50,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,44,67,58,51,60,55,83,78],
[70,0,65,54,61,65,55,74,79,67],
[87,66,0,68,70,62,67,76,86,64],
[64,77,63,0,61,68,52,73,90,78],
[73,70,61,70,0,56,57,69,94,84],
[80,66,69,63,75,0,73,71,74,94],
[71,76,64,79,74,58,0,81,86,85],
[76,57,55,58,62,60,50,0,88,71],
[48,52,45,41,37,57,45,43,0,62],
[53,64,67,53,47,37,46,60,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,56,75,69,68,67,70,75,73],
[59,0,57,71,72,67,64,65,67,70],
[75,74,0,74,80,71,68,65,74,75],
[56,60,57,0,67,69,68,63,73,61],
[62,59,51,64,0,65,65,65,61,66],
[63,64,60,62,66,0,65,64,62,67],
[64,67,63,63,66,66,0,68,70,70],
[61,66,66,68,66,67,63,0,60,60],
[56,64,57,58,70,69,61,71,0,70],
[58,61,56,70,65,64,61,71,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,67,57,82,80,79,79,92,90],
[45,0,57,56,74,59,46,62,72,55],
[64,74,0,71,86,71,80,79,85,84],
[74,75,60,0,76,77,78,86,86,72],
[49,57,45,55,0,59,69,66,56,66],
[51,72,60,54,72,0,62,71,72,69],
[52,85,51,53,62,69,0,55,72,78],
[52,69,52,45,65,60,76,0,75,74],
[39,59,46,45,75,59,59,56,0,62],
[41,76,47,59,65,62,53,57,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,67,61,71,70,72,62,62,67],
[73,0,64,81,82,73,75,65,75,81],
[64,67,0,69,65,67,82,67,63,76],
[70,50,62,0,62,63,72,67,63,70],
[60,49,66,69,0,58,69,65,68,73],
[61,58,64,68,73,0,78,67,67,75],
[59,56,49,59,62,53,0,57,61,71],
[69,66,64,64,66,64,74,0,66,77],
[69,56,68,68,63,64,70,65,0,81],
[64,50,55,61,58,56,60,54,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,70,61,65,67,67,70,63,68],
[70,0,76,53,69,61,71,66,72,69],
[61,55,0,62,71,62,70,68,61,61],
[70,78,69,0,67,63,67,63,62,65],
[66,62,60,64,0,58,67,65,63,64],
[64,70,69,68,73,0,75,69,65,70],
[64,60,61,64,64,56,0,66,57,59],
[61,65,63,68,66,62,65,0,61,66],
[68,59,70,69,68,66,74,70,0,59],
[63,62,70,66,67,61,72,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,74,71,78,73,62,77,73,70],
[50,0,66,59,69,64,57,62,57,51],
[57,65,0,56,71,62,56,53,56,58],
[60,72,75,0,77,75,62,63,77,72],
[53,62,60,54,0,63,56,53,46,52],
[58,67,69,56,68,0,63,60,66,63],
[69,74,75,69,75,68,0,64,79,71],
[54,69,78,68,78,71,67,0,76,71],
[58,74,75,54,85,65,52,55,0,66],
[61,80,73,59,79,68,60,60,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,68,75,64,64,63,68,65],
[63,0,70,68,71,65,68,70,63,64],
[61,61,0,65,62,60,67,63,58,59],
[63,63,66,0,70,69,64,67,67,67],
[56,60,69,61,0,61,60,59,59,53],
[67,66,71,62,70,0,65,61,60,65],
[67,63,64,67,71,66,0,58,63,58],
[68,61,68,64,72,70,73,0,66,67],
[63,68,73,64,72,71,68,65,0,64],
[66,67,72,64,78,66,73,64,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,64,68,65,74,72,72,67],
[66,0,62,69,67,74,71,63,70,60],
[65,69,0,66,66,70,72,71,71,62],
[67,62,65,0,68,71,77,67,75,68],
[63,64,65,63,0,64,69,73,65,54],
[66,57,61,60,67,0,77,65,67,59],
[57,60,59,54,62,54,0,63,69,59],
[59,68,60,64,58,66,68,0,68,54],
[59,61,60,56,66,64,62,63,0,53],
[64,71,69,63,77,72,72,77,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,61,63,70,67,60,68,66,56],
[75,0,79,69,74,65,66,66,74,72],
[70,52,0,59,53,54,60,65,67,60],
[68,62,72,0,62,65,58,71,68,66],
[61,57,78,69,0,72,59,70,72,65],
[64,66,77,66,59,0,57,63,74,76],
[71,65,71,73,72,74,0,67,71,73],
[63,65,66,60,61,68,64,0,70,73],
[65,57,64,63,59,57,60,61,0,60],
[75,59,71,65,66,55,58,58,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,63,60,57,64,70,53,60,70],
[78,0,70,72,65,74,77,73,69,68],
[68,61,0,66,61,67,75,68,54,69],
[71,59,65,0,57,64,65,65,59,66],
[74,66,70,74,0,80,81,72,64,75],
[67,57,64,67,51,0,67,64,56,66],
[61,54,56,66,50,64,0,60,59,69],
[78,58,63,66,59,67,71,0,65,62],
[71,62,77,72,67,75,72,66,0,78],
[61,63,62,65,56,65,62,69,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,71,62,64,70,57,68,73,73],
[68,0,63,60,63,64,58,70,64,68],
[60,68,0,59,65,59,56,65,66,63],
[69,71,72,0,64,72,67,79,66,74],
[67,68,66,67,0,76,61,75,71,65],
[61,67,72,59,55,0,64,66,73,66],
[74,73,75,64,70,67,0,72,72,80],
[63,61,66,52,56,65,59,0,71,66],
[58,67,65,65,60,58,59,60,0,71],
[58,63,68,57,66,65,51,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,75,66,77,62,60,78,59,58],
[90,0,78,78,71,84,73,85,72,65],
[56,53,0,57,59,70,56,69,65,58],
[65,53,74,0,59,62,64,62,59,66],
[54,60,72,72,0,69,60,76,76,54],
[69,47,61,69,62,0,59,64,67,42],
[71,58,75,67,71,72,0,68,69,64],
[53,46,62,69,55,67,63,0,72,66],
[72,59,66,72,55,64,62,59,0,58],
[73,66,73,65,77,89,67,65,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,61,66,63,63,64,81,52,66],
[74,0,68,65,73,68,76,82,63,76],
[70,63,0,59,65,69,74,77,68,66],
[65,66,72,0,68,67,65,74,62,70],
[68,58,66,63,0,64,77,74,54,73],
[68,63,62,64,67,0,65,77,57,64],
[67,55,57,66,54,66,0,60,50,46],
[50,49,54,57,57,54,71,0,44,55],
[79,68,63,69,77,74,81,87,0,74],
[65,55,65,61,58,67,85,76,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,38,47,40,56,48,54,54,56,31],
[93,0,101,60,60,81,82,89,81,81],
[84,30,0,25,59,38,65,81,40,39],
[91,71,106,0,74,64,62,64,70,63],
[75,71,72,57,0,48,71,64,39,72],
[83,50,93,67,83,0,64,67,40,41],
[77,49,66,69,60,67,0,57,57,58],
[77,42,50,67,67,64,74,0,56,51],
[75,50,91,61,92,91,74,75,0,56],
[100,50,92,68,59,90,73,80,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,30,58,60,61,70,23,42,44,51],
[101,0,82,81,65,99,71,72,62,68],
[73,49,0,77,67,79,55,64,57,56],
[71,50,54,0,63,80,29,56,50,52],
[70,66,64,68,0,78,57,53,49,59],
[61,32,52,51,53,0,35,43,45,46],
[108,60,76,102,74,96,0,54,74,66],
[89,59,67,75,78,88,77,0,71,74],
[87,69,74,81,82,86,57,60,0,66],
[80,63,75,79,72,85,65,57,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,76,69,73,64,65,74,70],
[66,0,76,77,73,75,64,66,82,86],
[61,55,0,65,63,59,50,59,58,56],
[55,54,66,0,65,63,60,60,70,69],
[62,58,68,66,0,67,65,70,65,59],
[58,56,72,68,64,0,58,66,68,67],
[67,67,81,71,66,73,0,76,68,58],
[66,65,72,71,61,65,55,0,72,63],
[57,49,73,61,66,63,63,59,0,53],
[61,45,75,62,72,64,73,68,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,45,51,82,65,54,37,50,73],
[75,0,58,52,67,66,83,36,60,81],
[86,73,0,60,75,58,76,51,64,88],
[80,79,71,0,74,87,90,50,79,80],
[49,64,56,57,0,57,61,37,34,49],
[66,65,73,44,74,0,90,44,59,89],
[77,48,55,41,70,41,0,27,48,78],
[94,95,80,81,94,87,104,0,65,102],
[81,71,67,52,97,72,83,66,0,87],
[58,50,43,51,82,42,53,29,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,69,63,72,55,51,51,72],
[68,0,63,79,69,62,72,65,73,75],
[69,68,0,76,69,51,70,73,59,71],
[62,52,55,0,71,52,58,59,68,60],
[68,62,62,60,0,57,55,68,52,52],
[59,69,80,79,74,0,68,64,68,72],
[76,59,61,73,76,63,0,59,71,68],
[80,66,58,72,63,67,72,0,59,74],
[80,58,72,63,79,63,60,72,0,74],
[59,56,60,71,79,59,63,57,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,68,65,63,66,62,65,58],
[72,0,61,76,79,65,77,67,64,66],
[71,70,0,71,69,64,74,69,69,71],
[63,55,60,0,60,58,68,61,62,62],
[66,52,62,71,0,58,69,66,69,64],
[68,66,67,73,73,0,73,67,69,65],
[65,54,57,63,62,58,0,57,50,62],
[69,64,62,70,65,64,74,0,66,65],
[66,67,62,69,62,62,81,65,0,66],
[73,65,60,69,67,66,69,66,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,76,78,62,87,72,92,74,72],
[56,0,66,66,59,82,64,72,73,71],
[55,65,0,66,58,74,64,71,57,66],
[53,65,65,0,65,76,74,88,64,54],
[69,72,73,66,0,77,79,80,64,69],
[44,49,57,55,54,0,58,78,59,57],
[59,67,67,57,52,73,0,85,63,55],
[39,59,60,43,51,53,46,0,50,46],
[57,58,74,67,67,72,68,81,0,70],
[59,60,65,77,62,74,76,85,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,65,79,59,58,65,66,64],
[67,0,66,72,72,70,76,61,62,66],
[72,65,0,67,69,57,68,61,65,62],
[66,59,64,0,72,68,73,56,70,71],
[52,59,62,59,0,57,58,57,62,64],
[72,61,74,63,74,0,71,57,70,64],
[73,55,63,58,73,60,0,69,68,62],
[66,70,70,75,74,74,62,0,69,66],
[65,69,66,61,69,61,63,62,0,62],
[67,65,69,60,67,67,69,65,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,103,103,103,103,53,103,79,76],
[79,0,131,77,131,131,53,77,77,103],
[28,0,0,0,51,50,53,24,53,26],
[28,54,131,0,105,131,53,77,53,26],
[28,0,80,26,0,80,53,26,26,52],
[28,0,81,0,51,0,27,51,27,0],
[78,78,78,78,78,104,0,50,104,104],
[28,54,107,54,105,80,81,0,81,54],
[52,54,78,78,105,104,27,50,0,78],
[55,28,105,105,79,131,27,77,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,67,65,64,62,56,64,62,68],
[62,0,62,68,66,59,63,58,59,65],
[64,69,0,72,75,67,65,63,65,77],
[66,63,59,0,73,51,61,60,63,66],
[67,65,56,58,0,59,63,59,64,63],
[69,72,64,80,72,0,68,74,69,75],
[75,68,66,70,68,63,0,68,63,71],
[67,73,68,71,72,57,63,0,63,71],
[69,72,66,68,67,62,68,68,0,79],
[63,66,54,65,68,56,60,60,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,75,61,74,70,71,68,73,62],
[62,0,52,61,67,46,65,70,72,72],
[56,79,0,72,79,68,70,70,79,75],
[70,70,59,0,86,72,67,67,80,72],
[57,64,52,45,0,48,48,70,68,65],
[61,85,63,59,83,0,73,72,79,73],
[60,66,61,64,83,58,0,61,71,70],
[63,61,61,64,61,59,70,0,69,56],
[58,59,52,51,63,52,60,62,0,61],
[69,59,56,59,66,58,61,75,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,72,61,54,67,51,46,85,46],
[72,0,61,52,56,52,31,43,45,36],
[59,70,0,61,56,68,58,52,60,47],
[70,79,70,0,51,90,44,50,50,52],
[77,75,75,80,0,79,73,72,63,83],
[64,79,63,41,52,0,51,43,60,47],
[80,100,73,87,58,80,0,79,72,59],
[85,88,79,81,59,88,52,0,72,67],
[46,86,71,81,68,71,59,59,0,52],
[85,95,84,79,48,84,72,64,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,72,61,60,58,72,66,67,60],
[65,0,68,61,56,62,73,57,60,66],
[59,63,0,67,67,68,77,56,67,65],
[70,70,64,0,64,63,86,61,73,67],
[71,75,64,67,0,78,84,70,70,64],
[73,69,63,68,53,0,77,58,61,60],
[59,58,54,45,47,54,0,55,60,54],
[65,74,75,70,61,73,76,0,72,66],
[64,71,64,58,61,70,71,59,0,57],
[71,65,66,64,67,71,77,65,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,61,52,49,49,53,58,49,51],
[74,0,71,64,59,64,67,70,70,65],
[70,60,0,58,60,59,68,62,63,65],
[79,67,73,0,74,63,71,63,75,66],
[82,72,71,57,0,56,66,65,66,63],
[82,67,72,68,75,0,68,65,71,67],
[78,64,63,60,65,63,0,61,60,67],
[73,61,69,68,66,66,70,0,58,63],
[82,61,68,56,65,60,71,73,0,64],
[80,66,66,65,68,64,64,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,60,68,62,52,58,57,70,66],
[60,0,67,67,61,58,50,65,63,61],
[71,64,0,76,65,55,66,67,74,67],
[63,64,55,0,61,48,57,56,69,60],
[69,70,66,70,0,57,56,65,73,67],
[79,73,76,83,74,0,62,68,76,73],
[73,81,65,74,75,69,0,73,77,75],
[74,66,64,75,66,63,58,0,79,66],
[61,68,57,62,58,55,54,52,0,65],
[65,70,64,71,64,58,56,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,49,61,78,52,74,66,58,70],
[50,0,67,61,80,58,82,62,62,59],
[82,64,0,75,75,61,67,67,71,72],
[70,70,56,0,68,56,59,75,56,58],
[53,51,56,63,0,60,54,74,49,55],
[79,73,70,75,71,0,77,65,75,71],
[57,49,64,72,77,54,0,65,58,57],
[65,69,64,56,57,66,66,0,67,67],
[73,69,60,75,82,56,73,64,0,61],
[61,72,59,73,76,60,74,64,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,88,69,67,88,60,61,99,51],
[72,0,80,80,69,69,83,62,90,52],
[43,51,0,44,53,50,73,53,71,42],
[62,51,87,0,69,69,81,62,91,72],
[64,62,78,62,0,71,92,74,111,73],
[43,62,81,62,60,0,70,72,79,51],
[71,48,58,50,39,61,0,54,71,52],
[70,69,78,69,57,59,77,0,100,42],
[32,41,60,40,20,52,60,31,0,42],
[80,79,89,59,58,80,79,89,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,50,61,54,60,59,50,46,63],
[72,0,79,68,69,80,77,71,47,66],
[81,52,0,70,72,71,83,63,66,67],
[70,63,61,0,69,78,74,76,61,71],
[77,62,59,62,0,63,63,58,57,65],
[71,51,60,53,68,0,65,52,53,54],
[72,54,48,57,68,66,0,76,65,58],
[81,60,68,55,73,79,55,0,58,70],
[85,84,65,70,74,78,66,73,0,69],
[68,65,64,60,66,77,73,61,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,60,63,57,81,59,63,74],
[63,0,81,65,74,73,95,65,71,90],
[61,50,0,71,69,67,72,49,75,74],
[71,66,60,0,71,47,74,66,66,67],
[68,57,62,60,0,60,71,49,64,63],
[74,58,64,84,71,0,73,64,79,81],
[50,36,59,57,60,58,0,59,67,66],
[72,66,82,65,82,67,72,0,64,68],
[68,60,56,65,67,52,64,67,0,67],
[57,41,57,64,68,50,65,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,65,65,65,59,73,69,64,62],
[50,0,58,58,53,59,55,53,56,57],
[66,73,0,57,63,66,60,53,61,62],
[66,73,74,0,56,67,60,58,63,53],
[66,78,68,75,0,72,64,69,65,74],
[72,72,65,64,59,0,60,55,74,53],
[58,76,71,71,67,71,0,57,63,61],
[62,78,78,73,62,76,74,0,64,62],
[67,75,70,68,66,57,68,67,0,63],
[69,74,69,78,57,78,70,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,57,64,62,59,53,71,55,57],
[76,0,67,73,62,58,63,69,58,83],
[74,64,0,70,68,73,68,74,68,72],
[67,58,61,0,65,55,60,72,54,62],
[69,69,63,66,0,70,66,71,69,71],
[72,73,58,76,61,0,61,73,66,74],
[78,68,63,71,65,70,0,76,71,79],
[60,62,57,59,60,58,55,0,53,64],
[76,73,63,77,62,65,60,78,0,81],
[74,48,59,69,60,57,52,67,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,61,64,56,67,72,58,69],
[67,0,65,62,67,66,62,71,62,67],
[62,66,0,62,67,56,62,72,67,61],
[70,69,69,0,79,68,64,73,65,81],
[67,64,64,52,0,62,55,65,55,56],
[75,65,75,63,69,0,67,72,68,80],
[64,69,69,67,76,64,0,73,67,68],
[59,60,59,58,66,59,58,0,63,68],
[73,69,64,66,76,63,64,68,0,73],
[62,64,70,50,75,51,63,63,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,52,66,62,55,60,67,58,57],
[72,0,62,63,71,61,67,75,58,65],
[79,69,0,67,69,59,67,69,64,62],
[65,68,64,0,61,69,59,70,59,58],
[69,60,62,70,0,56,58,62,58,60],
[76,70,72,62,75,0,65,74,66,63],
[71,64,64,72,73,66,0,62,56,63],
[64,56,62,61,69,57,69,0,60,60],
[73,73,67,72,73,65,75,71,0,68],
[74,66,69,73,71,68,68,71,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,53,55,49,59,64,55,63,64],
[57,0,51,42,67,50,57,55,60,62],
[78,80,0,59,61,57,59,66,76,83],
[76,89,72,0,72,66,65,68,71,76],
[82,64,70,59,0,64,66,72,67,62],
[72,81,74,65,67,0,62,76,80,74],
[67,74,72,66,65,69,0,70,69,73],
[76,76,65,63,59,55,61,0,76,73],
[68,71,55,60,64,51,62,55,0,65],
[67,69,48,55,69,57,58,58,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,63,67,65,68,65,65,64,73],
[67,0,60,57,65,60,69,70,65,69],
[68,71,0,62,64,57,60,59,56,71],
[64,74,69,0,64,70,64,62,66,83],
[66,66,67,67,0,59,65,64,55,66],
[63,71,74,61,72,0,65,67,59,75],
[66,62,71,67,66,66,0,67,66,70],
[66,61,72,69,67,64,64,0,63,80],
[67,66,75,65,76,72,65,68,0,75],
[58,62,60,48,65,56,61,51,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,64,69,60,67,60,79,65,65],
[45,0,47,66,49,60,45,60,59,62],
[67,84,0,75,62,61,65,79,71,82],
[62,65,56,0,45,64,51,64,64,62],
[71,82,69,86,0,64,90,73,66,90],
[64,71,70,67,67,0,65,80,67,74],
[71,86,66,80,41,66,0,68,79,92],
[52,71,52,67,58,51,63,0,67,78],
[66,72,60,67,65,64,52,64,0,77],
[66,69,49,69,41,57,39,53,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,66,57,65,56,68,59,62,66],
[71,0,70,68,67,63,77,67,72,69],
[65,61,0,62,64,59,60,58,71,58],
[74,63,69,0,64,54,63,64,67,66],
[66,64,67,67,0,57,62,66,69,61],
[75,68,72,77,74,0,81,64,71,74],
[63,54,71,68,69,50,0,61,62,73],
[72,64,73,67,65,67,70,0,80,74],
[69,59,60,64,62,60,69,51,0,67],
[65,62,73,65,70,57,58,57,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,57,76,72,73,72,73,65],
[65,0,83,65,84,79,77,87,74,68],
[62,48,0,54,69,68,69,58,57,59],
[74,66,77,0,68,68,77,73,70,65],
[55,47,62,63,0,66,77,55,55,48],
[59,52,63,63,65,0,70,74,65,60],
[58,54,62,54,54,61,0,67,60,50],
[59,44,73,58,76,57,64,0,60,43],
[58,57,74,61,76,66,71,71,0,58],
[66,63,72,66,83,71,81,88,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,63,72,73,63,64,60,70,62],
[78,0,69,73,69,70,75,57,83,62],
[68,62,0,71,60,62,61,64,71,57],
[59,58,60,0,59,72,54,63,69,55],
[58,62,71,72,0,68,66,64,72,60],
[68,61,69,59,63,0,68,67,57,59],
[67,56,70,77,65,63,0,59,79,63],
[71,74,67,68,67,64,72,0,84,66],
[61,48,60,62,59,74,52,47,0,51],
[69,69,74,76,71,72,68,65,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,72,70,64,85,77,72,75,75],
[54,0,62,60,58,66,64,62,59,53],
[59,69,0,60,59,72,67,54,50,64],
[61,71,71,0,56,70,64,63,55,69],
[67,73,72,75,0,91,80,65,67,76],
[46,65,59,61,40,0,56,67,54,56],
[54,67,64,67,51,75,0,60,65,59],
[59,69,77,68,66,64,71,0,58,72],
[56,72,81,76,64,77,66,73,0,70],
[56,78,67,62,55,75,72,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,71,67,69,68,58,56,72,71],
[57,0,70,59,67,65,68,55,59,83],
[60,61,0,66,71,64,74,64,59,83],
[64,72,65,0,58,66,56,59,63,81],
[62,64,60,73,0,54,57,58,64,74],
[63,66,67,65,77,0,67,65,55,72],
[73,63,57,75,74,64,0,65,59,85],
[75,76,67,72,73,66,66,0,60,75],
[59,72,72,68,67,76,72,71,0,72],
[60,48,48,50,57,59,46,56,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,61,75,52,83,55,60,62],
[63,0,60,53,58,58,67,52,57,59],
[64,71,0,68,72,56,74,45,49,56],
[70,78,63,0,77,49,88,66,67,68],
[56,73,59,54,0,42,56,50,54,55],
[79,73,75,82,89,0,83,55,71,71],
[48,64,57,43,75,48,0,36,48,51],
[76,79,86,65,81,76,95,0,64,73],
[71,74,82,64,77,60,83,67,0,63],
[69,72,75,63,76,60,80,58,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,62,70,66,66,67,63,60,73],
[62,0,63,71,68,62,68,67,69,75],
[69,68,0,69,68,60,65,66,57,70],
[61,60,62,0,62,54,71,58,61,67],
[65,63,63,69,0,65,70,70,69,69],
[65,69,71,77,66,0,73,72,69,81],
[64,63,66,60,61,58,0,68,62,65],
[68,64,65,73,61,59,63,0,66,75],
[71,62,74,70,62,62,69,65,0,85],
[58,56,61,64,62,50,66,56,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,64,56,68,61,70,72,71],
[64,0,69,64,70,64,62,66,73,70],
[66,62,0,57,60,73,64,56,76,73],
[67,67,74,0,62,71,67,70,68,67],
[75,61,71,69,0,64,72,70,91,70],
[63,67,58,60,67,0,60,68,80,67],
[70,69,67,64,59,71,0,58,72,71],
[61,65,75,61,61,63,73,0,75,72],
[59,58,55,63,40,51,59,56,0,53],
[60,61,58,64,61,64,60,59,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,83,73,62,57,67,82,46,68],
[70,0,84,68,64,46,65,64,45,63],
[48,47,0,60,48,36,64,69,33,56],
[58,63,71,0,36,37,50,78,43,51],
[69,67,83,95,0,70,76,98,65,69],
[74,85,95,94,61,0,90,105,67,89],
[64,66,67,81,55,41,0,89,47,77],
[49,67,62,53,33,26,42,0,37,49],
[85,86,98,88,66,64,84,94,0,75],
[63,68,75,80,62,42,54,82,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,69,64,74,67,71,73,73],
[65,0,69,57,62,66,66,57,81,62],
[62,62,0,55,63,70,64,58,65,67],
[62,74,76,0,70,71,74,69,78,70],
[67,69,68,61,0,84,73,80,83,78],
[57,65,61,60,47,0,62,65,65,68],
[64,65,67,57,58,69,0,65,63,67],
[60,74,73,62,51,66,66,0,74,68],
[58,50,66,53,48,66,68,57,0,59],
[58,69,64,61,53,63,64,63,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,59,81,84,65,70,72,68,54],
[65,0,72,79,66,75,75,83,67,81],
[72,59,0,81,69,83,84,74,82,63],
[50,52,50,0,77,57,46,59,76,49],
[47,65,62,54,0,54,55,53,60,70],
[66,56,48,74,77,0,79,76,56,49],
[61,56,47,85,76,52,0,48,54,40],
[59,48,57,72,78,55,83,0,75,53],
[63,64,49,55,71,75,77,56,0,61],
[77,50,68,82,61,82,91,78,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,70,65,69,75,73,66,78,89],
[56,0,59,67,76,65,66,54,75,73],
[61,72,0,70,72,53,59,64,57,67],
[66,64,61,0,79,54,74,60,68,85],
[62,55,59,52,0,49,57,59,58,67],
[56,66,78,77,82,0,73,72,61,75],
[58,65,72,57,74,58,0,74,63,66],
[65,77,67,71,72,59,57,0,65,67],
[53,56,74,63,73,70,68,66,0,77],
[42,58,64,46,64,56,65,64,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,62,59,64,63,67,65,62,55],
[68,0,65,57,58,62,67,65,67,71],
[69,66,0,57,58,59,69,62,66,76],
[72,74,74,0,63,69,78,73,74,70],
[67,73,73,68,0,62,73,67,72,72],
[68,69,72,62,69,0,67,71,67,75],
[64,64,62,53,58,64,0,62,60,62],
[66,66,69,58,64,60,69,0,66,69],
[69,64,65,57,59,64,71,65,0,63],
[76,60,55,61,59,56,69,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,58,57,35,54,55,72,48,49],
[71,0,86,70,60,61,85,72,72,58],
[73,45,0,57,52,46,62,60,50,53],
[74,61,74,0,62,53,75,53,60,57],
[96,71,79,69,0,54,63,66,47,72],
[77,70,85,78,77,0,75,76,56,67],
[76,46,69,56,68,56,0,64,51,61],
[59,59,71,78,65,55,67,0,54,50],
[83,59,81,71,84,75,80,77,0,67],
[82,73,78,74,59,64,70,81,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,72,57,61,67,55,70,61,58],
[78,0,61,54,68,76,59,70,57,59],
[59,70,0,66,59,62,61,80,51,66],
[74,77,65,0,77,74,68,84,63,62],
[70,63,72,54,0,78,60,81,65,57],
[64,55,69,57,53,0,62,78,61,50],
[76,72,70,63,71,69,0,83,66,64],
[61,61,51,47,50,53,48,0,50,47],
[70,74,80,68,66,70,65,81,0,65],
[73,72,65,69,74,81,67,84,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,65,66,75,69,54,55,65,56],
[52,0,57,35,52,72,42,44,54,45],
[66,74,0,64,48,75,62,46,69,59],
[65,96,67,0,82,76,66,61,53,63],
[56,79,83,49,0,70,70,63,60,53],
[62,59,56,55,61,0,48,69,64,66],
[77,89,69,65,61,83,0,71,58,71],
[76,87,85,70,68,62,60,0,71,55],
[66,77,62,78,71,67,73,60,0,56],
[75,86,72,68,78,65,60,76,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,76,78,67,78,76,60,73,77],
[56,0,65,65,67,68,61,59,58,66],
[55,66,0,66,50,66,59,61,71,63],
[53,66,65,0,55,67,52,49,54,60],
[64,64,81,76,0,74,65,70,78,81],
[53,63,65,64,57,0,52,55,59,64],
[55,70,72,79,66,79,0,73,63,74],
[71,72,70,82,61,76,58,0,73,63],
[58,73,60,77,53,72,68,58,0,67],
[54,65,68,71,50,67,57,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,45,45,89,131,87,45,45,45],
[0,0,0,45,89,42,42,0,45,45],
[86,131,0,87,131,131,42,86,45,87],
[86,86,44,0,44,86,86,44,89,0],
[42,42,0,87,0,42,42,42,45,45],
[0,89,0,45,89,0,42,0,45,45],
[44,89,89,45,89,89,0,89,45,45],
[86,131,45,87,89,131,42,0,45,45],
[86,86,86,42,86,86,86,86,0,42],
[86,86,44,131,86,86,86,86,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,57,63,59,69,61,64,70],
[64,0,60,62,60,63,70,56,64,65],
[62,71,0,69,57,69,74,62,64,71],
[74,69,62,0,65,63,76,57,63,70],
[68,71,74,66,0,66,76,55,66,69],
[72,68,62,68,65,0,70,59,65,73],
[62,61,57,55,55,61,0,50,62,71],
[70,75,69,74,76,72,81,0,64,75],
[67,67,67,68,65,66,69,67,0,67],
[61,66,60,61,62,58,60,56,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,77,66,69,59,64,68,66],
[64,0,61,66,59,57,60,57,60,63],
[63,70,0,76,61,71,63,59,67,65],
[54,65,55,0,61,69,57,62,68,59],
[65,72,70,70,0,66,61,73,59,70],
[62,74,60,62,65,0,74,67,68,69],
[72,71,68,74,70,57,0,76,69,68],
[67,74,72,69,58,64,55,0,63,58],
[63,71,64,63,72,63,62,68,0,61],
[65,68,66,72,61,62,63,73,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,83,72,84,65,86,77,84,64],
[34,0,47,48,72,50,59,53,47,44],
[48,84,0,68,90,62,70,64,71,46],
[59,83,63,0,84,51,71,70,84,61],
[47,59,41,47,0,25,56,52,44,50],
[66,81,69,80,106,0,87,57,66,74],
[45,72,61,60,75,44,0,62,68,67],
[54,78,67,61,79,74,69,0,64,68],
[47,84,60,47,87,65,63,67,0,51],
[67,87,85,70,81,57,64,63,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,54,74,65,77,71,55,55,51],
[73,0,64,75,68,75,72,58,64,66],
[77,67,0,66,72,75,81,71,63,59],
[57,56,65,0,72,80,72,61,72,56],
[66,63,59,59,0,77,69,65,59,46],
[54,56,56,51,54,0,58,49,41,50],
[60,59,50,59,62,73,0,61,52,52],
[76,73,60,70,66,82,70,0,60,65],
[76,67,68,59,72,90,79,71,0,56],
[80,65,72,75,85,81,79,66,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,68,59,71,71,65,74,74,75],
[64,0,60,58,65,67,66,72,71,75],
[63,71,0,65,71,67,68,76,75,75],
[72,73,66,0,76,75,65,72,68,76],
[60,66,60,55,0,69,63,70,65,72],
[60,64,64,56,62,0,65,69,67,72],
[66,65,63,66,68,66,0,71,65,75],
[57,59,55,59,61,62,60,0,68,69],
[57,60,56,63,66,64,66,63,0,72],
[56,56,56,55,59,59,56,62,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,66,66,66,64,69,65,74,68],
[58,0,56,59,65,64,67,67,72,63],
[65,75,0,74,74,69,72,74,77,69],
[65,72,57,0,70,58,64,70,71,70],
[65,66,57,61,0,57,61,63,59,62],
[67,67,62,73,74,0,74,69,72,70],
[62,64,59,67,70,57,0,76,68,69],
[66,64,57,61,68,62,55,0,66,64],
[57,59,54,60,72,59,63,65,0,54],
[63,68,62,61,69,61,62,67,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,64,71,61,67,65,73,68,57],
[76,0,67,68,63,66,63,67,65,61],
[67,64,0,66,58,57,61,67,70,66],
[60,63,65,0,72,62,72,74,61,60],
[70,68,73,59,0,66,69,65,67,53],
[64,65,74,69,65,0,65,75,68,61],
[66,68,70,59,62,66,0,65,72,63],
[58,64,64,57,66,56,66,0,60,59],
[63,66,61,70,64,63,59,71,0,63],
[74,70,65,71,78,70,68,72,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,80,67,73,60,67,70,77,72],
[60,0,65,54,66,56,59,60,69,61],
[51,66,0,61,60,61,50,57,59,49],
[64,77,70,0,69,66,72,68,71,63],
[58,65,71,62,0,62,56,63,63,60],
[71,75,70,65,69,0,69,68,71,63],
[64,72,81,59,75,62,0,71,75,68],
[61,71,74,63,68,63,60,0,72,62],
[54,62,72,60,68,60,56,59,0,62],
[59,70,82,68,71,68,63,69,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,62,44,61,59,57,64,56,59],
[81,0,68,57,60,68,61,72,73,67],
[69,63,0,53,64,71,59,57,67,58],
[87,74,78,0,66,69,69,61,72,71],
[70,71,67,65,0,68,43,71,62,64],
[72,63,60,62,63,0,39,66,65,67],
[74,70,72,62,88,92,0,70,77,71],
[67,59,74,70,60,65,61,0,73,61],
[75,58,64,59,69,66,54,58,0,58],
[72,64,73,60,67,64,60,70,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,82,66,65,114,80,66,82,48],
[65,0,33,83,65,113,65,84,49,66],
[49,98,0,83,81,80,81,67,83,49],
[65,48,48,0,97,113,97,83,64,49],
[66,66,50,34,0,66,82,66,66,83],
[17,18,51,18,65,0,49,68,67,34],
[51,66,50,34,49,82,0,82,82,51],
[65,47,64,48,65,63,49,0,47,66],
[49,82,48,67,65,64,49,84,0,66],
[83,65,82,82,48,97,80,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,57,54,60,62,64,71,57,58],
[71,0,70,59,65,65,72,64,69,65],
[74,61,0,66,67,72,70,72,73,69],
[77,72,65,0,74,77,77,72,75,78],
[71,66,64,57,0,67,69,66,62,78],
[69,66,59,54,64,0,68,61,60,59],
[67,59,61,54,62,63,0,63,57,67],
[60,67,59,59,65,70,68,0,60,68],
[74,62,58,56,69,71,74,71,0,67],
[73,66,62,53,53,72,64,63,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,69,65,72,69,73,61,66,69],
[65,0,77,56,66,60,74,70,61,62],
[62,54,0,55,48,54,58,44,51,59],
[66,75,76,0,62,71,65,51,67,71],
[59,65,83,69,0,64,61,56,62,69],
[62,71,77,60,67,0,76,65,68,68],
[58,57,73,66,70,55,0,54,62,58],
[70,61,87,80,75,66,77,0,69,65],
[65,70,80,64,69,63,69,62,0,61],
[62,69,72,60,62,63,73,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,78,55,72,53,65,61,68],
[60,0,51,67,57,61,47,60,53,64],
[63,80,0,74,59,77,61,65,67,66],
[53,64,57,0,51,67,50,57,52,56],
[76,74,72,80,0,75,68,65,61,67],
[59,70,54,64,56,0,51,57,49,56],
[78,84,70,81,63,80,0,73,68,70],
[66,71,66,74,66,74,58,0,67,62],
[70,78,64,79,70,82,63,64,0,70],
[63,67,65,75,64,75,61,69,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,80,51,93,63,71,103,63,74],
[48,0,69,39,49,51,80,60,60,60],
[51,62,0,71,61,72,71,112,73,63],
[80,92,60,0,71,52,51,82,40,81],
[38,82,70,60,0,41,49,70,59,69],
[68,80,59,79,90,0,80,70,89,89],
[60,51,60,80,82,51,0,72,51,52],
[28,71,19,49,61,61,59,0,49,50],
[68,71,58,91,72,42,80,82,0,60],
[57,71,68,50,62,42,79,81,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,66,69,71,70,61,77,68],
[63,0,68,62,64,68,60,54,64,64],
[61,63,0,58,57,65,56,58,69,56],
[65,69,73,0,73,57,73,63,65,67],
[62,67,74,58,0,60,55,60,64,65],
[60,63,66,74,71,0,62,70,70,59],
[61,71,75,58,76,69,0,59,74,68],
[70,77,73,68,71,61,72,0,70,60],
[54,67,62,66,67,61,57,61,0,55],
[63,67,75,64,66,72,63,71,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,73,58,78,72,82,51,42,62],
[77,0,64,80,86,74,92,79,70,67],
[58,67,0,53,78,67,65,60,75,62],
[73,51,78,0,77,77,89,69,88,73],
[53,45,53,54,0,67,58,57,64,63],
[59,57,64,54,64,0,73,49,56,57],
[49,39,66,42,73,58,0,60,66,54],
[80,52,71,62,74,82,71,0,69,66],
[89,61,56,43,67,75,65,62,0,60],
[69,64,69,58,68,74,77,65,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,83,50,99,80,66,83,115,83],
[64,0,51,66,98,64,83,65,98,81],
[48,80,0,66,97,64,98,47,81,64],
[81,65,65,0,99,80,67,65,97,81],
[32,33,34,32,0,48,33,33,65,65],
[51,67,67,51,83,0,67,67,68,99],
[65,48,33,64,98,64,0,49,98,81],
[48,66,84,66,98,64,82,0,116,83],
[16,33,50,34,66,63,33,15,0,82],
[48,50,67,50,66,32,50,48,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,93,63,73,58,82,79,65,57],
[78,0,77,61,65,77,60,84,73,94],
[38,54,0,47,59,58,23,76,47,39],
[68,70,84,0,59,73,52,72,71,70],
[58,66,72,72,0,57,67,78,65,64],
[73,54,73,58,74,0,51,72,59,77],
[49,71,108,79,64,80,0,73,51,52],
[52,47,55,59,53,59,58,0,63,55],
[66,58,84,60,66,72,80,68,0,60],
[74,37,92,61,67,54,79,76,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,68,64,61,66,75,80,76,75],
[72,0,65,62,65,67,70,67,89,72],
[63,66,0,58,76,70,77,74,82,75],
[67,69,73,0,73,65,72,76,91,78],
[70,66,55,58,0,61,64,69,78,65],
[65,64,61,66,70,0,80,82,82,66],
[56,61,54,59,67,51,0,77,74,64],
[51,64,57,55,62,49,54,0,72,61],
[55,42,49,40,53,49,57,59,0,61],
[56,59,56,53,66,65,67,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,60,51,56,46,50,57,66,41],
[74,0,71,52,72,63,66,59,56,58],
[71,60,0,60,77,75,60,80,68,79],
[80,79,71,0,55,43,68,75,82,75],
[75,59,54,76,0,66,48,58,58,60],
[85,68,56,88,65,0,76,76,70,60],
[81,65,71,63,83,55,0,76,66,69],
[74,72,51,56,73,55,55,0,68,57],
[65,75,63,49,73,61,65,63,0,61],
[90,73,52,56,71,71,62,74,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,70,70,65,68,64,60,65],
[67,0,59,70,66,65,60,66,61,61],
[69,72,0,72,68,68,64,61,65,67],
[61,61,59,0,61,65,54,66,55,60],
[61,65,63,70,0,67,67,71,66,63],
[66,66,63,66,64,0,67,64,59,62],
[63,71,67,77,64,64,0,69,71,67],
[67,65,70,65,60,67,62,0,59,57],
[71,70,66,76,65,72,60,72,0,70],
[66,70,64,71,68,69,64,74,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,50,82,51,73,68,66,75,82],
[49,0,47,49,50,75,74,55,57,83],
[81,84,0,75,52,74,83,74,75,99],
[49,82,56,0,50,72,66,73,59,74],
[80,81,79,81,0,90,63,71,97,106],
[58,56,57,59,41,0,49,49,50,75],
[63,57,48,65,68,82,0,66,74,74],
[65,76,57,58,60,82,65,0,66,83],
[56,74,56,72,34,81,57,65,0,96],
[49,48,32,57,25,56,57,48,35,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,64,55,60,60,60,57,54,54],
[74,0,72,72,66,66,60,78,61,59],
[67,59,0,56,61,52,59,63,49,57],
[76,59,75,0,66,68,65,63,57,66],
[71,65,70,65,0,56,52,53,59,59],
[71,65,79,63,75,0,69,69,61,57],
[71,71,72,66,79,62,0,68,54,56],
[74,53,68,68,78,62,63,0,53,56],
[77,70,82,74,72,70,77,78,0,56],
[77,72,74,65,72,74,75,75,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,81,72,64,78,85,89,72,78],
[46,0,63,57,62,61,63,65,55,66],
[50,68,0,49,46,51,53,57,56,61],
[59,74,82,0,55,69,65,72,72,69],
[67,69,85,76,0,74,64,78,67,72],
[53,70,80,62,57,0,68,69,70,79],
[46,68,78,66,67,63,0,75,64,71],
[42,66,74,59,53,62,56,0,61,71],
[59,76,75,59,64,61,67,70,0,71],
[53,65,70,62,59,52,60,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,77,64,44,87,55,53,34,34],
[53,0,76,64,65,98,67,53,44,66],
[54,55,0,43,64,88,78,30,24,43],
[67,67,88,0,66,67,66,64,56,57],
[87,66,67,65,0,99,79,65,46,88],
[44,33,43,64,32,0,67,41,35,23],
[76,64,53,65,52,64,0,31,31,43],
[78,78,101,67,66,90,100,0,68,56],
[97,87,107,75,85,96,100,63,0,97],
[97,65,88,74,43,108,88,75,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,83,89,86,83,88,65,81,84],
[72,0,85,88,77,73,84,64,66,91],
[48,46,0,59,58,63,59,54,50,61],
[42,43,72,0,69,62,60,61,50,65],
[45,54,73,62,0,66,56,58,54,69],
[48,58,68,69,65,0,72,64,64,66],
[43,47,72,71,75,59,0,66,58,57],
[66,67,77,70,73,67,65,0,78,66],
[50,65,81,81,77,67,73,53,0,91],
[47,40,70,66,62,65,74,65,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,46,66,60,67,72,76,72,66],
[62,0,61,67,55,71,72,76,70,63],
[85,70,0,60,62,68,68,62,67,67],
[65,64,71,0,67,68,78,67,81,62],
[71,76,69,64,0,65,84,72,70,66],
[64,60,63,63,66,0,81,75,66,59],
[59,59,63,53,47,50,0,53,57,68],
[55,55,69,64,59,56,78,0,79,55],
[59,61,64,50,61,65,74,52,0,55],
[65,68,64,69,65,72,63,76,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,63,62,59,60,57,62,56,68],
[74,0,63,62,58,65,62,59,65,60],
[68,68,0,66,62,63,57,62,66,59],
[69,69,65,0,65,61,64,64,61,69],
[72,73,69,66,0,63,67,69,67,64],
[71,66,68,70,68,0,63,70,72,66],
[74,69,74,67,64,68,0,73,68,64],
[69,72,69,67,62,61,58,0,65,68],
[75,66,65,70,64,59,63,66,0,58],
[63,71,72,62,67,65,67,63,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,79,64,55,61,67,69,56,72],
[74,0,82,55,70,63,67,72,67,71],
[52,49,0,52,50,69,62,60,45,57],
[67,76,79,0,70,64,68,70,59,72],
[76,61,81,61,0,64,69,64,54,73],
[70,68,62,67,67,0,58,67,57,73],
[64,64,69,63,62,73,0,64,64,63],
[62,59,71,61,67,64,67,0,57,73],
[75,64,86,72,77,74,67,74,0,83],
[59,60,74,59,58,58,68,58,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,69,61,58,63,61,57,57],
[63,0,54,71,70,59,57,68,48,53],
[67,77,0,76,64,61,71,85,52,71],
[62,60,55,0,56,50,55,64,52,60],
[70,61,67,75,0,69,76,74,50,66],
[73,72,70,81,62,0,68,83,48,66],
[68,74,60,76,55,63,0,71,68,77],
[70,63,46,67,57,48,60,0,51,57],
[74,83,79,79,81,83,63,80,0,76],
[74,78,60,71,65,65,54,74,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,59,67,72,61,69,65,73,64],
[54,0,62,71,62,55,66,56,63,62],
[72,69,0,73,73,56,62,57,66,66],
[64,60,58,0,65,57,63,58,55,65],
[59,69,58,66,0,61,56,54,68,58],
[70,76,75,74,70,0,68,68,71,63],
[62,65,69,68,75,63,0,58,66,64],
[66,75,74,73,77,63,73,0,70,68],
[58,68,65,76,63,60,65,61,0,66],
[67,69,65,66,73,68,67,63,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,59,66,59,64,67,67,58,63],
[75,0,70,82,66,58,75,80,73,71],
[72,61,0,69,71,56,67,71,59,70],
[65,49,62,0,60,57,68,60,61,62],
[72,65,60,71,0,66,71,77,65,68],
[67,73,75,74,65,0,81,77,73,72],
[64,56,64,63,60,50,0,63,52,63],
[64,51,60,71,54,54,68,0,59,71],
[73,58,72,70,66,58,79,72,0,65],
[68,60,61,69,63,59,68,60,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,86,66,74,81,79,63,77,72],
[54,0,70,56,73,62,70,59,64,63],
[45,61,0,64,60,62,53,55,60,60],
[65,75,67,0,74,75,65,62,74,71],
[57,58,71,57,0,60,63,52,63,71],
[50,69,69,56,71,0,61,51,65,68],
[52,61,78,66,68,70,0,68,69,68],
[68,72,76,69,79,80,63,0,72,81],
[54,67,71,57,68,66,62,59,0,66],
[59,68,71,60,60,63,63,50,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,47,60,78,55,63,74,69,54],
[52,0,58,58,65,68,54,45,74,61],
[84,73,0,65,79,68,66,68,83,90],
[71,73,66,0,77,76,54,59,67,58],
[53,66,52,54,0,74,52,37,44,66],
[76,63,63,55,57,0,50,68,81,67],
[68,77,65,77,79,81,0,67,61,82],
[57,86,63,72,94,63,64,0,97,68],
[62,57,48,64,87,50,70,34,0,55],
[77,70,41,73,65,64,49,63,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,64,84,69,63,83,65,85,69],
[64,0,59,73,71,60,63,65,72,66],
[67,72,0,76,66,57,70,50,73,64],
[47,58,55,0,65,51,60,51,77,52],
[62,60,65,66,0,67,50,54,52,57],
[68,71,74,80,64,0,75,66,77,75],
[48,68,61,71,81,56,0,62,74,74],
[66,66,81,80,77,65,69,0,76,65],
[46,59,58,54,79,54,57,55,0,63],
[62,65,67,79,74,56,57,66,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,84,66,67,69,75,77,75,56],
[62,0,70,54,63,67,74,66,64,62],
[47,61,0,71,66,69,74,79,71,58],
[65,77,60,0,57,69,81,70,74,66],
[64,68,65,74,0,73,76,68,71,57],
[62,64,62,62,58,0,63,66,67,60],
[56,57,57,50,55,68,0,55,76,58],
[54,65,52,61,63,65,76,0,71,57],
[56,67,60,57,60,64,55,60,0,57],
[75,69,73,65,74,71,73,74,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,74,72,72,75,55,64,71,83],
[42,0,61,44,68,60,31,54,37,49],
[57,70,0,53,53,57,34,44,45,46],
[59,87,78,0,72,70,47,71,53,69],
[59,63,78,59,0,70,48,64,58,71],
[56,71,74,61,61,0,44,54,59,72],
[76,100,97,84,83,87,0,63,90,75],
[67,77,87,60,67,77,68,0,61,65],
[60,94,86,78,73,72,41,70,0,64],
[48,82,85,62,60,59,56,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,53,55,48,48,54,69,69,56],
[62,0,72,66,70,71,51,64,68,66],
[78,59,0,64,67,65,53,59,66,61],
[76,65,67,0,62,77,63,76,61,53],
[83,61,64,69,0,68,51,76,75,50],
[83,60,66,54,63,0,64,55,69,53],
[77,80,78,68,80,67,0,74,76,59],
[62,67,72,55,55,76,57,0,72,55],
[62,63,65,70,56,62,55,59,0,58],
[75,65,70,78,81,78,72,76,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,65,60,82,65,59,56,62,74],
[60,0,56,54,68,51,54,53,53,66],
[66,75,0,65,71,61,62,67,62,76],
[71,77,66,0,72,67,73,56,61,78],
[49,63,60,59,0,61,55,56,58,71],
[66,80,70,64,70,0,77,74,68,83],
[72,77,69,58,76,54,0,59,66,78],
[75,78,64,75,75,57,72,0,55,79],
[69,78,69,70,73,63,65,76,0,82],
[57,65,55,53,60,48,53,52,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,66,90,66,66,51,83,92,92],
[59,0,70,89,76,71,57,76,70,85],
[65,61,0,74,82,77,67,84,87,73],
[41,42,57,0,38,54,43,59,45,52],
[65,55,49,93,0,50,51,74,60,62],
[65,60,54,77,81,0,63,71,58,69],
[80,74,64,88,80,68,0,70,76,83],
[48,55,47,72,57,60,61,0,58,59],
[39,61,44,86,71,73,55,73,0,86],
[39,46,58,79,69,62,48,72,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,70,81,72,69,65,78,72],
[63,0,62,67,76,67,61,75,64,56],
[67,69,0,70,82,77,70,73,73,59],
[61,64,61,0,70,64,57,61,66,61],
[50,55,49,61,0,49,40,46,59,49],
[59,64,54,67,82,0,59,64,63,54],
[62,70,61,74,91,72,0,65,60,68],
[66,56,58,70,85,67,66,0,73,70],
[53,67,58,65,72,68,71,58,0,49],
[59,75,72,70,82,77,63,61,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,91,69,73,82,76,60,77,63],
[77,0,89,69,64,63,67,71,68,63],
[40,42,0,49,61,58,51,59,61,50],
[62,62,82,0,74,64,85,71,75,61],
[58,67,70,57,0,53,66,63,75,57],
[49,68,73,67,78,0,67,63,75,66],
[55,64,80,46,65,64,0,64,73,59],
[71,60,72,60,68,68,67,0,71,59],
[54,63,70,56,56,56,58,60,0,54],
[68,68,81,70,74,65,72,72,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,63,58,58,68,62,57,62,67],
[62,0,68,59,66,68,73,49,67,61],
[68,63,0,55,62,60,65,45,63,65],
[73,72,76,0,78,79,86,63,63,75],
[73,65,69,53,0,73,76,59,55,68],
[63,63,71,52,58,0,67,64,56,54],
[69,58,66,45,55,64,0,50,55,58],
[74,82,86,68,72,67,81,0,69,65],
[69,64,68,68,76,75,76,62,0,55],
[64,70,66,56,63,77,73,66,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,69,73,62,71,66,58,67,74],
[59,0,69,75,63,68,69,73,63,59],
[62,62,0,72,63,70,71,54,58,61],
[58,56,59,0,57,55,55,54,55,54],
[69,68,68,74,0,68,75,63,81,69],
[60,63,61,76,63,0,70,61,54,76],
[65,62,60,76,56,61,0,61,60,67],
[73,58,77,77,68,70,70,0,65,71],
[64,68,73,76,50,77,71,66,0,77],
[57,72,70,77,62,55,64,60,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,66,93,80,53,54,105,53,66],
[78,0,67,67,54,68,67,93,41,94],
[65,64,0,91,66,65,65,78,52,91],
[38,64,40,0,26,41,66,65,39,64],
[51,77,65,105,0,79,66,91,64,77],
[78,63,66,90,52,0,77,104,66,90],
[77,64,66,65,65,54,0,91,66,91],
[26,38,53,66,40,27,40,0,39,38],
[78,90,79,92,67,65,65,92,0,92],
[65,37,40,67,54,41,40,93,39,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,58,69,61,50,70,62,63,66],
[64,0,52,53,61,51,73,50,63,57],
[73,79,0,74,68,69,86,67,67,64],
[62,78,57,0,60,62,76,55,63,59],
[70,70,63,71,0,67,79,57,71,65],
[81,80,62,69,64,0,80,64,67,75],
[61,58,45,55,52,51,0,54,50,47],
[69,81,64,76,74,67,77,0,63,61],
[68,68,64,68,60,64,81,68,0,51],
[65,74,67,72,66,56,84,70,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,58,59,63,57,67,59,73],
[63,0,62,66,60,67,58,64,66,69],
[73,69,0,61,62,57,68,63,64,76],
[73,65,70,0,69,60,62,66,63,73],
[72,71,69,62,0,75,67,68,60,78],
[68,64,74,71,56,0,60,61,51,64],
[74,73,63,69,64,71,0,69,58,75],
[64,67,68,65,63,70,62,0,62,86],
[72,65,67,68,71,80,73,69,0,79],
[58,62,55,58,53,67,56,45,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,72,72,54,70,78,62,77,65],
[57,0,61,56,54,57,57,47,75,63],
[59,70,0,63,62,61,65,59,71,68],
[59,75,68,0,64,68,46,50,63,61],
[77,77,69,67,0,58,72,74,67,68],
[61,74,70,63,73,0,66,63,79,54],
[53,74,66,85,59,65,0,63,61,63],
[69,84,72,81,57,68,68,0,71,69],
[54,56,60,68,64,52,70,60,0,50],
[66,68,63,70,63,77,68,62,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,57,65,62,70,65,77,68],
[69,0,62,61,60,59,70,68,63,79],
[68,69,0,67,58,70,65,71,66,63],
[74,70,64,0,69,70,76,70,68,71],
[66,71,73,62,0,64,72,68,72,72],
[69,72,61,61,67,0,67,64,77,68],
[61,61,66,55,59,64,0,64,60,65],
[66,63,60,61,63,67,67,0,60,63],
[54,68,65,63,59,54,71,71,0,65],
[63,52,68,60,59,63,66,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,57,100,60,72,59,44,57,44],
[57,0,42,55,58,101,56,45,42,72],
[74,89,0,43,104,104,89,74,58,74],
[31,76,88,0,61,75,46,45,31,46],
[71,73,27,70,0,100,58,72,71,57],
[59,30,27,56,31,0,59,45,44,60],
[72,75,42,85,73,72,0,74,57,58],
[87,86,57,86,59,86,57,0,57,73],
[74,89,73,100,60,87,74,74,0,60],
[87,59,57,85,74,71,73,58,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,70,67,68,70,71,70,54,63],
[66,0,78,75,70,72,75,69,63,70],
[61,53,0,56,53,61,62,59,61,57],
[64,56,75,0,56,70,71,67,58,64],
[63,61,78,75,0,76,67,61,59,68],
[61,59,70,61,55,0,64,61,58,53],
[60,56,69,60,64,67,0,57,53,54],
[61,62,72,64,70,70,74,0,69,65],
[77,68,70,73,72,73,78,62,0,69],
[68,61,74,67,63,78,77,66,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,72,39,58,43,59,62,43,42],
[54,0,57,36,45,39,48,53,54,59],
[59,74,0,51,62,40,61,61,35,52],
[92,95,80,0,64,59,80,72,65,66],
[73,86,69,67,0,75,71,74,62,52],
[88,92,91,72,56,0,71,78,69,57],
[72,83,70,51,60,60,0,53,53,66],
[69,78,70,59,57,53,78,0,60,66],
[88,77,96,66,69,62,78,71,0,74],
[89,72,79,65,79,74,65,65,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,79,80,54,66,59,78,73,67],
[60,0,70,82,60,68,70,66,72,74],
[52,61,0,68,44,53,61,68,67,70],
[51,49,63,0,46,70,73,66,59,53],
[77,71,87,85,0,71,65,68,80,82],
[65,63,78,61,60,0,64,70,73,71],
[72,61,70,58,66,67,0,70,64,70],
[53,65,63,65,63,61,61,0,64,70],
[58,59,64,72,51,58,67,67,0,75],
[64,57,61,78,49,60,61,61,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,70,63,58,67,74,66,55],
[73,0,55,65,51,61,61,68,64,60],
[70,76,0,71,63,52,77,60,60,68],
[61,66,60,0,56,54,72,59,65,43],
[68,80,68,75,0,65,78,76,67,58],
[73,70,79,77,66,0,71,74,60,74],
[64,70,54,59,53,60,0,69,66,57],
[57,63,71,72,55,57,62,0,66,55],
[65,67,71,66,64,71,65,65,0,50],
[76,71,63,88,73,57,74,76,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,65,61,56,71,62,54,70,75],
[44,0,85,62,69,62,76,69,55,67],
[66,46,0,60,61,71,53,61,61,59],
[70,69,71,0,53,56,73,64,46,61],
[75,62,70,78,0,70,63,69,78,106],
[60,69,60,75,61,0,68,52,60,76],
[69,55,78,58,68,63,0,64,62,68],
[77,62,70,67,62,79,67,0,69,67],
[61,76,70,85,53,71,69,62,0,60],
[56,64,72,70,25,55,63,64,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,66,98,32,32,32,65,65,65],
[66,0,33,131,65,66,33,66,98,33],
[65,98,0,131,32,65,32,65,65,65],
[33,0,0,0,0,0,0,33,0,0],
[99,66,99,131,0,66,33,66,66,66],
[99,65,66,131,65,0,98,98,98,98],
[99,98,99,131,98,33,0,66,131,66],
[66,65,66,98,65,33,65,0,65,32],
[66,33,66,131,65,33,0,66,0,66],
[66,98,66,131,65,33,65,99,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,69,65,70,73,77,82,67,76],
[66,0,76,58,61,62,54,84,62,66],
[62,55,0,53,56,66,52,69,66,71],
[66,73,78,0,59,67,64,71,65,75],
[61,70,75,72,0,70,64,76,65,82],
[58,69,65,64,61,0,64,79,63,72],
[54,77,79,67,67,67,0,78,70,75],
[49,47,62,60,55,52,53,0,62,64],
[64,69,65,66,66,68,61,69,0,81],
[55,65,60,56,49,59,56,67,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,76,70,72,68,57,73,88,71],
[51,0,67,66,59,63,54,59,61,67],
[55,64,0,74,60,69,53,63,67,75],
[61,65,57,0,63,66,51,66,66,64],
[59,72,71,68,0,74,41,67,65,85],
[63,68,62,65,57,0,55,77,77,67],
[74,77,78,80,90,76,0,68,89,65],
[58,72,68,65,64,54,63,0,71,69],
[43,70,64,65,66,54,42,60,0,63],
[60,64,56,67,46,64,66,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,72,77,62,81,78,83,91,71],
[58,0,62,70,85,80,75,91,88,88],
[59,69,0,61,78,71,64,61,75,74],
[54,61,70,0,63,80,88,74,85,85],
[69,46,53,68,0,75,61,71,75,78],
[50,51,60,51,56,0,58,72,65,68],
[53,56,67,43,70,73,0,91,67,57],
[48,40,70,57,60,59,40,0,62,66],
[40,43,56,46,56,66,64,69,0,54],
[60,43,57,46,53,63,74,65,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,43,87,43,66,65,65,66,87],
[66,0,109,66,87,45,109,65,65,66],
[88,22,0,67,22,45,89,43,65,66],
[44,65,64,0,42,44,64,65,65,66],
[88,44,109,89,0,67,67,65,87,66],
[65,86,86,87,64,0,108,65,87,66],
[66,22,42,67,64,23,0,43,65,44],
[66,66,88,66,66,66,88,0,65,65],
[65,66,66,66,44,44,66,66,0,65],
[44,65,65,65,65,65,87,66,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,68,60,66,71,64,63,54,67],
[60,0,67,63,57,51,58,56,49,61],
[63,64,0,60,64,61,60,65,50,64],
[71,68,71,0,67,65,59,64,56,70],
[65,74,67,64,0,66,72,70,68,68],
[60,80,70,66,65,0,57,62,60,70],
[67,73,71,72,59,74,0,70,56,73],
[68,75,66,67,61,69,61,0,58,69],
[77,82,81,75,63,71,75,73,0,81],
[64,70,67,61,63,61,58,62,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,59,52,58,68,63,59,53],
[73,0,64,67,68,74,66,66,58,50],
[70,67,0,70,67,62,70,76,66,67],
[72,64,61,0,70,60,68,69,66,53],
[79,63,64,61,0,56,72,64,60,62],
[73,57,69,71,75,0,69,65,65,57],
[63,65,61,63,59,62,0,64,59,54],
[68,65,55,62,67,66,67,0,57,63],
[72,73,65,65,71,66,72,74,0,58],
[78,81,64,78,69,74,77,68,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,80,81,58,74,74,70,81,85],
[70,0,80,74,66,70,76,62,70,91],
[51,51,0,60,64,58,63,63,54,76],
[50,57,71,0,55,61,71,59,63,85],
[73,65,67,76,0,70,76,59,69,82],
[57,61,73,70,61,0,71,62,71,69],
[57,55,68,60,55,60,0,39,61,72],
[61,69,68,72,72,69,92,0,60,72],
[50,61,77,68,62,60,70,71,0,90],
[46,40,55,46,49,62,59,59,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,56,36,43,54,53,60,54,43],
[64,0,76,61,74,53,61,78,67,67],
[75,55,0,60,73,57,54,65,50,56],
[95,70,71,0,88,68,93,75,64,59],
[88,57,58,43,0,53,73,64,62,58],
[77,78,74,63,78,0,62,75,63,66],
[78,70,77,38,58,69,0,76,56,54],
[71,53,66,56,67,56,55,0,42,47],
[77,64,81,67,69,68,75,89,0,65],
[88,64,75,72,73,65,77,84,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,66,73,64,58,62,78,55,54],
[76,0,72,76,62,63,68,73,65,56],
[65,59,0,65,68,63,63,68,64,58],
[58,55,66,0,54,56,54,59,61,41],
[67,69,63,77,0,61,65,75,64,52],
[73,68,68,75,70,0,76,74,64,68],
[69,63,68,77,66,55,0,63,68,56],
[53,58,63,72,56,57,68,0,56,45],
[76,66,67,70,67,67,63,75,0,53],
[77,75,73,90,79,63,75,86,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,70,69,75,67,66,75,61,63],
[60,0,57,64,61,67,63,65,55,56],
[61,74,0,67,70,68,67,63,66,67],
[62,67,64,0,70,76,67,70,60,64],
[56,70,61,61,0,72,65,67,58,66],
[64,64,63,55,59,0,57,58,55,56],
[65,68,64,64,66,74,0,71,65,67],
[56,66,68,61,64,73,60,0,58,64],
[70,76,65,71,73,76,66,73,0,67],
[68,75,64,67,65,75,64,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,61,54,71,61,65,65,67,70],
[62,0,61,51,74,62,62,63,69,70],
[70,70,0,64,83,68,71,71,80,69],
[77,80,67,0,81,65,72,69,78,74],
[60,57,48,50,0,50,55,57,53,53],
[70,69,63,66,81,0,63,64,72,69],
[66,69,60,59,76,68,0,69,73,65],
[66,68,60,62,74,67,62,0,71,64],
[64,62,51,53,78,59,58,60,0,60],
[61,61,62,57,78,62,66,67,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,63,62,72,63,78,64,51,67],
[55,0,65,65,63,65,73,56,66,76],
[68,66,0,66,71,66,79,67,65,76],
[69,66,65,0,73,67,78,71,64,69],
[59,68,60,58,0,56,73,75,65,69],
[68,66,65,64,75,0,80,69,58,82],
[53,58,52,53,58,51,0,62,52,59],
[67,75,64,60,56,62,69,0,61,75],
[80,65,66,67,66,73,79,70,0,79],
[64,55,55,62,62,49,72,56,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,75,67,61,68,52,58,57,51],
[68,0,79,66,76,73,55,68,77,59],
[56,52,0,61,62,70,54,66,68,55],
[64,65,70,0,76,70,59,68,76,66],
[70,55,69,55,0,65,58,53,67,50],
[63,58,61,61,66,0,51,54,64,59],
[79,76,77,72,73,80,0,63,79,62],
[73,63,65,63,78,77,68,0,72,63],
[74,54,63,55,64,67,52,59,0,52],
[80,72,76,65,81,72,69,68,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,62,77,64,54,77,72,66,60],
[58,0,53,64,65,42,51,61,56,58],
[69,78,0,81,79,60,79,76,61,65],
[54,67,50,0,59,51,76,56,64,48],
[67,66,52,72,0,53,70,61,55,57],
[77,89,71,80,78,0,79,75,60,56],
[54,80,52,55,61,52,0,61,49,51],
[59,70,55,75,70,56,70,0,63,46],
[65,75,70,67,76,71,82,68,0,69],
[71,73,66,83,74,75,80,85,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,77,70,56,63,74,61,51],
[68,0,65,75,81,49,57,68,60,53],
[65,66,0,71,68,59,66,69,63,62],
[54,56,60,0,53,58,61,78,55,52],
[61,50,63,78,0,44,61,73,66,48],
[75,82,72,73,87,0,74,77,71,64],
[68,74,65,70,70,57,0,73,56,63],
[57,63,62,53,58,54,58,0,57,62],
[70,71,68,76,65,60,75,74,0,68],
[80,78,69,79,83,67,68,69,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,75,65,69,70,71,65,68,64],
[77,0,78,66,82,70,75,82,59,71],
[56,53,0,46,69,63,56,54,54,63],
[66,65,85,0,82,87,78,63,67,70],
[62,49,62,49,0,63,50,60,61,73],
[61,61,68,44,68,0,64,64,59,68],
[60,56,75,53,81,67,0,56,58,66],
[66,49,77,68,71,67,75,0,71,66],
[63,72,77,64,70,72,73,60,0,65],
[67,60,68,61,58,63,65,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,65,75,67,70,50,73,73,73],
[47,0,62,65,49,60,39,70,55,58],
[66,69,0,68,62,63,57,61,67,49],
[56,66,63,0,70,63,55,63,52,73],
[64,82,69,61,0,67,59,63,70,61],
[61,71,68,68,64,0,60,58,68,64],
[81,92,74,76,72,71,0,64,71,78],
[58,61,70,68,68,73,67,0,68,68],
[58,76,64,79,61,63,60,63,0,60],
[58,73,82,58,70,67,53,63,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,71,63,60,74,77,74,69],
[66,0,61,64,75,48,75,77,70,67],
[69,70,0,69,65,73,66,72,70,64],
[60,67,62,0,56,57,65,75,68,64],
[68,56,66,75,0,54,67,74,72,63],
[71,83,58,74,77,0,77,81,78,73],
[57,56,65,66,64,54,0,69,64,76],
[54,54,59,56,57,50,62,0,72,66],
[57,61,61,63,59,53,67,59,0,71],
[62,64,67,67,68,58,55,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,60,102,60,117,60,88,101,59],
[88,0,73,89,89,103,61,88,86,87],
[71,58,0,57,73,85,74,117,71,89],
[29,42,74,0,74,74,59,75,72,88],
[71,42,58,57,0,102,45,88,57,87],
[14,28,46,57,29,0,16,59,57,45],
[71,70,57,72,86,115,0,72,71,71],
[43,43,14,56,43,72,59,0,72,42],
[30,45,60,59,74,74,60,59,0,73],
[72,44,42,43,44,86,60,89,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,73,92,80,75,64,88,82,69],
[43,0,55,66,57,74,54,64,77,58],
[58,76,0,74,61,79,75,90,82,57],
[39,65,57,0,57,64,54,78,71,58],
[51,74,70,74,0,68,57,70,64,69],
[56,57,52,67,63,0,64,78,69,44],
[67,77,56,77,74,67,0,78,76,56],
[43,67,41,53,61,53,53,0,35,35],
[49,54,49,60,67,62,55,96,0,55],
[62,73,74,73,62,87,75,96,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,76,65,59,58,63,63,76,64],
[64,0,70,63,59,61,65,64,66,57],
[55,61,0,58,54,54,57,61,61,47],
[66,68,73,0,71,58,70,59,68,59],
[72,72,77,60,0,65,67,70,73,53],
[73,70,77,73,66,0,65,62,81,68],
[68,66,74,61,64,66,0,62,61,59],
[68,67,70,72,61,69,69,0,73,58],
[55,65,70,63,58,50,70,58,0,59],
[67,74,84,72,78,63,72,73,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,55,89,80,63,62,99,46],
[73,0,73,71,80,80,64,65,91,58],
[71,58,0,79,96,72,54,50,99,66],
[76,60,52,0,83,55,40,69,77,62],
[42,51,35,48,0,55,54,46,84,52],
[51,51,59,76,76,0,46,77,66,70],
[68,67,77,91,77,85,0,79,92,62],
[69,66,81,62,85,54,52,0,80,43],
[32,40,32,54,47,65,39,51,0,41],
[85,73,65,69,79,61,69,88,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,71,72,65,66,66,70,61,69],
[67,0,60,67,69,70,63,66,66,67],
[60,71,0,78,74,74,70,74,63,60],
[59,64,53,0,60,59,65,69,54,57],
[66,62,57,71,0,65,70,73,55,66],
[65,61,57,72,66,0,64,68,52,64],
[65,68,61,66,61,67,0,61,64,64],
[61,65,57,62,58,63,70,0,56,56],
[70,65,68,77,76,79,67,75,0,68],
[62,64,71,74,65,67,67,75,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,64,94,68,63,66,70,69,68],
[46,0,60,59,61,46,61,75,62,61],
[67,71,0,76,60,61,64,72,47,50],
[37,72,55,0,65,45,60,79,63,61],
[63,70,71,66,0,71,70,80,59,62],
[68,85,70,86,60,0,93,90,69,72],
[65,70,67,71,61,38,0,66,62,65],
[61,56,59,52,51,41,65,0,62,65],
[62,69,84,68,72,62,69,69,0,67],
[63,70,81,70,69,59,66,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,76,77,66,65,98,77,65,66],
[54,0,64,65,98,65,119,88,64,54],
[55,67,0,54,66,54,98,55,65,55],
[54,66,77,0,87,64,108,87,76,75],
[65,33,65,44,0,64,108,57,63,53],
[66,66,77,67,67,0,76,78,65,55],
[33,12,33,23,23,55,0,23,43,33],
[54,43,76,44,74,53,108,0,52,53],
[66,67,66,55,68,66,88,79,0,67],
[65,77,76,56,78,76,98,78,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,76,74,63,78,83,73,71,80],
[49,0,63,87,64,64,83,42,76,66],
[55,68,0,90,60,83,88,65,68,54],
[57,44,41,0,49,57,65,39,60,40],
[68,67,71,82,0,79,94,52,67,66],
[53,67,48,74,52,0,65,50,67,48],
[48,48,43,66,37,66,0,47,47,45],
[58,89,66,92,79,81,84,0,87,84],
[60,55,63,71,64,64,84,44,0,55],
[51,65,77,91,65,83,86,47,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,68,69,72,76,61,71,68],
[63,0,65,66,63,66,72,61,62,53],
[62,66,0,65,67,64,68,56,71,64],
[63,65,66,0,64,70,72,61,62,60],
[62,68,64,67,0,75,79,70,74,64],
[59,65,67,61,56,0,68,58,67,51],
[55,59,63,59,52,63,0,57,68,61],
[70,70,75,70,61,73,74,0,69,66],
[60,69,60,69,57,64,63,62,0,56],
[63,78,67,71,67,80,70,65,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,62,59,63,66,61,64,64,65],
[67,0,65,67,73,71,70,65,57,76],
[69,66,0,60,68,70,63,63,60,52],
[72,64,71,0,69,70,57,80,58,67],
[68,58,63,62,0,61,65,64,52,64],
[65,60,61,61,70,0,62,73,68,71],
[70,61,68,74,66,69,0,77,58,68],
[67,66,68,51,67,58,54,0,49,60],
[67,74,71,73,79,63,73,82,0,78],
[66,55,79,64,67,60,63,71,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,70,68,72,68,72,85,66,60],
[59,0,61,63,72,59,68,73,61,65],
[61,70,0,68,70,68,76,76,76,67],
[63,68,63,0,60,53,71,72,64,60],
[59,59,61,71,0,57,68,69,61,59],
[63,72,63,78,74,0,69,77,73,61],
[59,63,55,60,63,62,0,66,62,59],
[46,58,55,59,62,54,65,0,57,60],
[65,70,55,67,70,58,69,74,0,59],
[71,66,64,71,72,70,72,71,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,58,53,64,63,56,68,79],
[64,0,80,70,72,67,72,56,65,77],
[62,51,0,53,52,57,57,49,71,75],
[73,61,78,0,54,70,65,64,69,66],
[78,59,79,77,0,73,78,67,77,87],
[67,64,74,61,58,0,55,48,72,76],
[68,59,74,66,53,76,0,61,72,72],
[75,75,82,67,64,83,70,0,81,78],
[63,66,60,62,54,59,59,50,0,70],
[52,54,56,65,44,55,59,53,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,61,66,80,75,67,71,68,71],
[58,0,59,57,76,80,68,74,72,66],
[70,72,0,57,79,70,66,72,62,73],
[65,74,74,0,73,70,68,63,65,71],
[51,55,52,58,0,66,60,58,50,60],
[56,51,61,61,65,0,56,50,55,63],
[64,63,65,63,71,75,0,67,70,72],
[60,57,59,68,73,81,64,0,65,71],
[63,59,69,66,81,76,61,66,0,67],
[60,65,58,60,71,68,59,60,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,85,66,55,67,56,68,70,64],
[69,0,72,69,75,75,59,69,74,58],
[46,59,0,51,62,68,52,52,71,50],
[65,62,80,0,70,66,63,62,77,69],
[76,56,69,61,0,73,63,63,73,76],
[64,56,63,65,58,0,62,62,62,61],
[75,72,79,68,68,69,0,63,70,64],
[63,62,79,69,68,69,68,0,75,66],
[61,57,60,54,58,69,61,56,0,59],
[67,73,81,62,55,70,67,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,72,72,65,69,67,71,67,73],
[60,0,67,64,65,63,64,57,61,58],
[59,64,0,74,66,67,78,67,67,64],
[59,67,57,0,63,59,61,65,60,52],
[66,66,65,68,0,73,63,65,61,55],
[62,68,64,72,58,0,68,65,65,64],
[64,67,53,70,68,63,0,63,63,66],
[60,74,64,66,66,66,68,0,63,67],
[64,70,64,71,70,66,68,68,0,66],
[58,73,67,79,76,67,65,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,72,74,55,60,65,63,65,57],
[76,0,75,78,75,69,73,70,79,61],
[59,56,0,66,63,63,63,67,59,49],
[57,53,65,0,54,55,63,60,62,58],
[76,56,68,77,0,58,59,57,69,62],
[71,62,68,76,73,0,73,64,70,69],
[66,58,68,68,72,58,0,66,60,57],
[68,61,64,71,74,67,65,0,67,60],
[66,52,72,69,62,61,71,64,0,58],
[74,70,82,73,69,62,74,71,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,72,72,64,70,62,62,74,68],
[66,0,65,63,62,70,66,59,79,59],
[59,66,0,62,63,61,63,68,69,66],
[59,68,69,0,61,65,60,64,66,61],
[67,69,68,70,0,70,67,64,69,60],
[61,61,70,66,61,0,61,66,68,61],
[69,65,68,71,64,70,0,63,74,64],
[69,72,63,67,67,65,68,0,79,58],
[57,52,62,65,62,63,57,52,0,56],
[63,72,65,70,71,70,67,73,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,58,63,54,62,64,67,56,65],
[73,0,69,62,57,56,71,69,69,64],
[73,62,0,65,54,62,67,71,60,61],
[68,69,66,0,60,66,64,71,60,69],
[77,74,77,71,0,69,68,73,71,64],
[69,75,69,65,62,0,66,74,67,66],
[67,60,64,67,63,65,0,68,61,64],
[64,62,60,60,58,57,63,0,54,64],
[75,62,71,71,60,64,70,77,0,73],
[66,67,70,62,67,65,67,67,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,54,57,57,66,63,50,60,52],
[72,0,50,51,54,61,68,51,60,57],
[77,81,0,65,64,82,75,69,74,70],
[74,80,66,0,69,84,69,63,61,68],
[74,77,67,62,0,73,70,65,79,69],
[65,70,49,47,58,0,62,53,61,63],
[68,63,56,62,61,69,0,61,65,59],
[81,80,62,68,66,78,70,0,73,72],
[71,71,57,70,52,70,66,58,0,57],
[79,74,61,63,62,68,72,59,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,66,74,81,73,60,74,84,74],
[60,0,76,85,75,83,60,75,77,57],
[65,55,0,84,73,75,66,73,75,72],
[57,46,47,0,67,66,34,55,65,65],
[50,56,58,64,0,60,43,74,51,60],
[58,48,56,65,71,0,43,56,41,73],
[71,71,65,97,88,88,0,90,72,80],
[57,56,58,76,57,75,41,0,58,57],
[47,54,56,66,80,90,59,73,0,88],
[57,74,59,66,71,58,51,74,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,65,69,71,68,65,77,62,64],
[59,0,63,57,69,61,53,65,46,53],
[66,68,0,59,73,69,57,77,57,64],
[62,74,72,0,70,69,65,78,68,62],
[60,62,58,61,0,61,65,69,55,56],
[63,70,62,62,70,0,60,73,55,64],
[66,78,74,66,66,71,0,69,63,68],
[54,66,54,53,62,58,62,0,54,63],
[69,85,74,63,76,76,68,77,0,70],
[67,78,67,69,75,67,63,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,53,68,71,60,74,66,63,78],
[69,0,65,68,67,70,75,65,71,72],
[78,66,0,63,73,71,76,71,66,73],
[63,63,68,0,71,67,72,62,65,65],
[60,64,58,60,0,67,72,62,74,70],
[71,61,60,64,64,0,62,63,62,63],
[57,56,55,59,59,69,0,55,57,69],
[65,66,60,69,69,68,76,0,72,85],
[68,60,65,66,57,69,74,59,0,64],
[53,59,58,66,61,68,62,46,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,66,79,64,58,64,81,74,64],
[62,0,56,83,64,53,64,74,68,70],
[65,75,0,68,61,58,70,74,68,72],
[52,48,63,0,63,53,67,64,68,47],
[67,67,70,68,0,69,61,81,75,69],
[73,78,73,78,62,0,64,100,69,79],
[67,67,61,64,70,67,0,75,55,60],
[50,57,57,67,50,31,56,0,68,57],
[57,63,63,63,56,62,76,63,0,61],
[67,61,59,84,62,52,71,74,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,58,56,46,48,64,50,59,57],
[57,0,63,60,44,54,66,48,59,55],
[73,68,0,63,59,58,81,54,59,53],
[75,71,68,0,63,54,68,49,71,65],
[85,87,72,68,0,73,86,71,68,59],
[83,77,73,77,58,0,90,62,68,57],
[67,65,50,63,45,41,0,41,53,51],
[81,83,77,82,60,69,90,0,68,66],
[72,72,72,60,63,63,78,63,0,59],
[74,76,78,66,72,74,80,65,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,72,69,63,78,76,68,65,68],
[56,0,60,62,55,70,69,64,58,61],
[59,71,0,60,57,59,65,57,55,63],
[62,69,71,0,78,74,66,69,63,68],
[68,76,74,53,0,65,72,67,63,72],
[53,61,72,57,66,0,65,69,61,68],
[55,62,66,65,59,66,0,59,64,63],
[63,67,74,62,64,62,72,0,62,70],
[66,73,76,68,68,70,67,69,0,64],
[63,70,68,63,59,63,68,61,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,57,62,77,60,57,55,64,74],
[57,0,62,64,79,58,55,63,52,63],
[74,69,0,82,77,66,62,53,68,69],
[69,67,49,0,78,59,67,58,56,67],
[54,52,54,53,0,55,56,48,56,62],
[71,73,65,72,76,0,65,63,57,71],
[74,76,69,64,75,66,0,62,61,69],
[76,68,78,73,83,68,69,0,77,64],
[67,79,63,75,75,74,70,54,0,72],
[57,68,62,64,69,60,62,67,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,46,58,78,66,69,54,70,59],
[62,0,61,56,75,57,62,59,62,62],
[85,70,0,69,82,63,80,68,70,61],
[73,75,62,0,65,62,72,62,64,64],
[53,56,49,66,0,49,57,53,49,38],
[65,74,68,69,82,0,63,65,72,69],
[62,69,51,59,74,68,0,58,69,63],
[77,72,63,69,78,66,73,0,67,81],
[61,69,61,67,82,59,62,64,0,71],
[72,69,70,67,93,62,68,50,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,78,74,70,66,65,70,78,63],
[67,0,69,64,61,68,66,72,77,64],
[53,62,0,62,60,71,77,73,70,55],
[57,67,69,0,56,86,73,73,84,61],
[61,70,71,75,0,73,68,83,75,56],
[65,63,60,45,58,0,65,73,62,69],
[66,65,54,58,63,66,0,68,70,57],
[61,59,58,58,48,58,63,0,70,47],
[53,54,61,47,56,69,61,61,0,60],
[68,67,76,70,75,62,74,84,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,73,62,73,58,69,71,68,66],
[63,0,55,62,73,64,61,63,60,61],
[58,76,0,67,75,60,73,66,63,61],
[69,69,64,0,70,61,64,66,64,54],
[58,58,56,61,0,58,51,64,59,63],
[73,67,71,70,73,0,64,68,71,71],
[62,70,58,67,80,67,0,71,61,67],
[60,68,65,65,67,63,60,0,63,64],
[63,71,68,67,72,60,70,68,0,65],
[65,70,70,77,68,60,64,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,62,78,65,82,57,61,72,74],
[52,0,47,84,54,62,46,44,44,71],
[69,84,0,75,63,69,48,69,61,71],
[53,47,56,0,45,55,52,53,43,64],
[66,77,68,86,0,69,58,59,67,68],
[49,69,62,76,62,0,51,59,52,62],
[74,85,83,79,73,80,0,77,57,66],
[70,87,62,78,72,72,54,0,62,72],
[59,87,70,88,64,79,74,69,0,74],
[57,60,60,67,63,69,65,59,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,64,47,28,43,81,27,44,67],
[112,0,91,95,85,54,102,67,46,96],
[67,40,0,60,58,37,77,47,56,87],
[84,36,71,0,63,36,74,65,51,86],
[103,46,73,68,0,34,92,36,63,93],
[88,77,94,95,97,0,85,64,75,76],
[50,29,54,57,39,46,0,27,37,49],
[104,64,84,66,95,67,104,0,74,97],
[87,85,75,80,68,56,94,57,0,87],
[64,35,44,45,38,55,82,34,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,49,43,53,74,45,56,58,59],
[89,0,62,68,81,83,76,76,73,81],
[82,69,0,61,73,79,67,58,77,67],
[88,63,70,0,77,87,81,71,78,80],
[78,50,58,54,0,65,48,56,72,59],
[57,48,52,44,66,0,46,56,61,53],
[86,55,64,50,83,85,0,67,87,66],
[75,55,73,60,75,75,64,0,78,67],
[73,58,54,53,59,70,44,53,0,62],
[72,50,64,51,72,78,65,64,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,73,73,74,64,64,79,70,75],
[57,0,66,70,68,70,58,71,66,67],
[58,65,0,62,65,56,57,71,64,65],
[58,61,69,0,56,58,59,63,61,60],
[57,63,66,75,0,60,55,66,65,63],
[67,61,75,73,71,0,64,75,61,70],
[67,73,74,72,76,67,0,72,62,62],
[52,60,60,68,65,56,59,0,60,64],
[61,65,67,70,66,70,69,71,0,67],
[56,64,66,71,68,61,69,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,74,80,61,73,94,76,68,71],
[52,0,63,68,68,51,62,47,48,57],
[57,68,0,84,68,78,92,75,69,83],
[51,63,47,0,72,53,57,58,63,54],
[70,63,63,59,0,67,56,65,44,72],
[58,80,53,78,64,0,88,73,78,78],
[37,69,39,74,75,43,0,50,51,53],
[55,84,56,73,66,58,81,0,65,76],
[63,83,62,68,87,53,80,66,0,64],
[60,74,48,77,59,53,78,55,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,65,59,58,58,62,65,65,59],
[65,0,64,63,59,63,57,65,70,63],
[66,67,0,69,56,68,60,72,69,60],
[72,68,62,0,66,59,58,67,59,66],
[73,72,75,65,0,59,63,70,67,67],
[73,68,63,72,72,0,69,69,67,64],
[69,74,71,73,68,62,0,72,71,57],
[66,66,59,64,61,62,59,0,65,60],
[66,61,62,72,64,64,60,66,0,52],
[72,68,71,65,64,67,74,71,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,70,52,57,52,65,62,57,65],
[71,0,74,59,64,53,66,68,59,68],
[61,57,0,52,50,56,55,65,59,56],
[79,72,79,0,62,62,68,70,71,69],
[74,67,81,69,0,67,59,78,71,70],
[79,78,75,69,64,0,66,65,64,74],
[66,65,76,63,72,65,0,60,67,75],
[69,63,66,61,53,66,71,0,63,59],
[74,72,72,60,60,67,64,68,0,72],
[66,63,75,62,61,57,56,72,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,58,95,83,95,98,82,49,62],
[69,0,70,70,69,83,59,71,47,35],
[73,61,0,95,59,94,85,93,49,61],
[36,61,36,0,47,85,86,95,48,61],
[48,62,72,84,0,85,85,60,72,85],
[36,48,37,46,46,0,37,84,24,35],
[33,72,46,45,46,94,0,81,49,35],
[49,60,38,36,71,47,50,0,37,25],
[82,84,82,83,59,107,82,94,0,71],
[69,96,70,70,46,96,96,106,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,82,67,64,63,62,78,67,76],
[69,0,78,67,69,60,69,76,73,78],
[49,53,0,51,53,55,67,54,51,60],
[64,64,80,0,66,67,72,70,62,68],
[67,62,78,65,0,63,74,71,62,63],
[68,71,76,64,68,0,66,76,62,79],
[69,62,64,59,57,65,0,74,58,69],
[53,55,77,61,60,55,57,0,53,55],
[64,58,80,69,69,69,73,78,0,77],
[55,53,71,63,68,52,62,76,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,74,75,59,70,66,78,72,76],
[51,0,59,63,49,63,65,63,61,59],
[57,72,0,69,57,62,56,63,62,63],
[56,68,62,0,59,60,58,65,69,58],
[72,82,74,72,0,65,62,60,66,69],
[61,68,69,71,66,0,63,67,69,69],
[65,66,75,73,69,68,0,64,68,75],
[53,68,68,66,71,64,67,0,63,63],
[59,70,69,62,65,62,63,68,0,58],
[55,72,68,73,62,62,56,68,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,60,59,63,56,54,54,56,61],
[67,0,62,67,68,58,61,62,60,63],
[71,69,0,69,64,59,59,62,62,64],
[72,64,62,0,51,54,53,55,61,64],
[68,63,67,80,0,64,63,57,71,77],
[75,73,72,77,67,0,71,65,66,64],
[77,70,72,78,68,60,0,71,71,78],
[77,69,69,76,74,66,60,0,70,62],
[75,71,69,70,60,65,60,61,0,63],
[70,68,67,67,54,67,53,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,59,72,62,76,63,69,57],
[64,0,61,59,64,63,72,75,52,53],
[58,70,0,47,63,43,65,61,48,52],
[72,72,84,0,70,72,76,75,65,55],
[59,67,68,61,0,56,77,77,60,52],
[69,68,88,59,75,0,69,76,62,62],
[55,59,66,55,54,62,0,65,60,45],
[68,56,70,56,54,55,66,0,54,57],
[62,79,83,66,71,69,71,77,0,67],
[74,78,79,76,79,69,86,74,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,60,64,73,65,77,54,49,60],
[70,0,59,80,76,72,77,66,67,54],
[71,72,0,76,81,68,72,67,61,67],
[67,51,55,0,62,42,68,52,46,56],
[58,55,50,69,0,48,58,48,41,51],
[66,59,63,89,83,0,65,70,58,65],
[54,54,59,63,73,66,0,58,48,59],
[77,65,64,79,83,61,73,0,65,72],
[82,64,70,85,90,73,83,66,0,70],
[71,77,64,75,80,66,72,59,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,47,42,51,62,61,44,65,51],
[66,0,55,40,63,53,68,38,43,55],
[84,76,0,58,59,62,75,69,75,61],
[89,91,73,0,74,69,83,65,73,80],
[80,68,72,57,0,67,79,70,69,70],
[69,78,69,62,64,0,70,70,72,65],
[70,63,56,48,52,61,0,54,66,67],
[87,93,62,66,61,61,77,0,63,79],
[66,88,56,58,62,59,65,68,0,68],
[80,76,70,51,61,66,64,52,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,64,64,59,56,63,66,67,63],
[67,0,64,59,67,70,67,64,65,62],
[67,67,0,63,57,67,68,72,63,61],
[67,72,68,0,68,67,75,73,65,64],
[72,64,74,63,0,67,70,69,64,73],
[75,61,64,64,64,0,65,73,69,68],
[68,64,63,56,61,66,0,71,65,66],
[65,67,59,58,62,58,60,0,60,56],
[64,66,68,66,67,62,66,71,0,59],
[68,69,70,67,58,63,65,75,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,61,67,68,51,64,56,66,51],
[76,0,46,66,63,63,62,57,71,66],
[70,85,0,71,66,75,71,75,75,50],
[64,65,60,0,65,64,73,61,60,62],
[63,68,65,66,0,66,59,57,53,56],
[80,68,56,67,65,0,65,68,75,57],
[67,69,60,58,72,66,0,80,65,59],
[75,74,56,70,74,63,51,0,65,51],
[65,60,56,71,78,56,66,66,0,55],
[80,65,81,69,75,74,72,80,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,56,63,67,63,76,66,66,79],
[55,0,62,70,87,71,73,70,77,76],
[75,69,0,64,75,73,66,70,68,79],
[68,61,67,0,69,57,67,56,75,78],
[64,44,56,62,0,53,68,60,55,68],
[68,60,58,74,78,0,70,64,58,87],
[55,58,65,64,63,61,0,69,75,75],
[65,61,61,75,71,67,62,0,52,65],
[65,54,63,56,76,73,56,79,0,74],
[52,55,52,53,63,44,56,66,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,78,72,64,56,54,64,61,51],
[73,0,79,61,63,59,68,66,56,60],
[53,52,0,58,59,58,57,67,53,64],
[59,70,73,0,60,61,56,66,58,52],
[67,68,72,71,0,64,58,53,64,53],
[75,72,73,70,67,0,63,65,70,66],
[77,63,74,75,73,68,0,69,59,62],
[67,65,64,65,78,66,62,0,62,56],
[70,75,78,73,67,61,72,69,0,64],
[80,71,67,79,78,65,69,75,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,71,74,82,68,68,78,62,86],
[52,0,55,62,62,60,64,61,55,72],
[60,76,0,70,75,73,72,72,66,77],
[57,69,61,0,65,68,72,72,57,70],
[49,69,56,66,0,67,64,68,57,73],
[63,71,58,63,64,0,61,67,66,72],
[63,67,59,59,67,70,0,75,69,79],
[53,70,59,59,63,64,56,0,63,66],
[69,76,65,74,74,65,62,68,0,73],
[45,59,54,61,58,59,52,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,65,84,77,66,63,87,58,56],
[37,0,46,28,48,69,46,48,49,28],
[66,85,0,63,63,76,44,77,46,37],
[47,103,68,0,75,67,55,78,60,57],
[54,83,68,56,0,58,72,78,57,65],
[65,62,55,64,73,0,62,78,47,55],
[68,85,87,76,59,69,0,87,79,60],
[44,83,54,53,53,53,44,0,58,46],
[73,82,85,71,74,84,52,73,0,72],
[75,103,94,74,66,76,71,85,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,70,59,61,67,67,70,57],
[68,0,70,75,68,71,64,71,73,64],
[65,61,0,59,60,64,72,62,62,60],
[61,56,72,0,65,65,68,64,73,59],
[72,63,71,66,0,64,70,69,65,61],
[70,60,67,66,67,0,69,58,69,60],
[64,67,59,63,61,62,0,58,62,60],
[64,60,69,67,62,73,73,0,69,67],
[61,58,69,58,66,62,69,62,0,61],
[74,67,71,72,70,71,71,64,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,75,73,75,63,65,80,65],
[63,0,74,74,70,72,63,73,84,73],
[62,57,0,80,63,68,66,60,70,72],
[56,57,51,0,52,61,57,59,65,59],
[58,61,68,79,0,74,67,66,78,66],
[56,59,63,70,57,0,55,65,76,65],
[68,68,65,74,64,76,0,68,75,69],
[66,58,71,72,65,66,63,0,78,70],
[51,47,61,66,53,55,56,53,0,58],
[66,58,59,72,65,66,62,61,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,78,71,62,78,88,73,70,76],
[59,0,76,70,65,56,85,59,62,78],
[53,55,0,49,58,52,59,54,54,60],
[60,61,82,0,44,57,63,58,65,71],
[69,66,73,87,0,60,83,81,71,69],
[53,75,79,74,71,0,69,69,70,77],
[43,46,72,68,48,62,0,62,47,66],
[58,72,77,73,50,62,69,0,68,62],
[61,69,77,66,60,61,84,63,0,66],
[55,53,71,60,62,54,65,69,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,69,56,61,43,64,69,72,48],
[59,0,53,62,68,36,82,61,74,31],
[62,78,0,68,69,53,78,64,82,66],
[75,69,63,0,67,53,62,64,74,53],
[70,63,62,64,0,52,83,75,68,50],
[88,95,78,78,79,0,92,74,92,59],
[67,49,53,69,48,39,0,73,62,50],
[62,70,67,67,56,57,58,0,56,43],
[59,57,49,57,63,39,69,75,0,40],
[83,100,65,78,81,72,81,88,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,87,80,65,78,72,76,75,84],
[56,0,73,65,65,66,51,60,59,64],
[44,58,0,70,52,50,62,59,49,69],
[51,66,61,0,56,63,56,54,59,77],
[66,66,79,75,0,64,64,69,66,72],
[53,65,81,68,67,0,64,67,67,66],
[59,80,69,75,67,67,0,67,63,69],
[55,71,72,77,62,64,64,0,63,83],
[56,72,82,72,65,64,68,68,0,65],
[47,67,62,54,59,65,62,48,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,76,64,87,109,74,76,76,76],
[65,0,77,56,77,75,87,54,64,44],
[55,54,0,42,66,74,43,54,75,76],
[67,75,89,0,67,66,76,76,65,77],
[44,54,65,64,0,64,56,76,53,76],
[22,56,57,65,67,0,65,77,75,44],
[57,44,88,55,75,66,0,66,65,67],
[55,77,77,55,55,54,65,0,76,77],
[55,67,56,66,78,56,66,55,0,42],
[55,87,55,54,55,87,64,54,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,56,68,85,77,48,67,57,86],
[56,0,56,65,66,75,74,66,47,58],
[75,75,0,57,85,93,67,77,49,65],
[63,66,74,0,102,92,66,85,64,104],
[46,65,46,29,0,65,47,66,45,76],
[54,56,38,39,66,0,48,68,48,68],
[83,57,64,65,84,83,0,56,84,66],
[64,65,54,46,65,63,75,0,66,54],
[74,84,82,67,86,83,47,65,0,93],
[45,73,66,27,55,63,65,77,38,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,65,71,71,67,61,61,67],
[60,0,66,57,59,71,62,54,66,60],
[56,65,0,69,61,68,63,61,65,53],
[66,74,62,0,68,64,64,65,67,60],
[60,72,70,63,0,57,62,51,68,67],
[60,60,63,67,74,0,71,63,64,61],
[64,69,68,67,69,60,0,69,69,61],
[70,77,70,66,80,68,62,0,67,64],
[70,65,66,64,63,67,62,64,0,60],
[64,71,78,71,64,70,70,67,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,66,57,73,75,68,73,64,68],
[68,0,74,64,67,73,75,73,68,63],
[65,57,0,56,64,73,74,70,69,69],
[74,67,75,0,62,78,78,78,64,72],
[58,64,67,69,0,71,70,69,65,68],
[56,58,58,53,60,0,55,64,55,59],
[63,56,57,53,61,76,0,66,62,60],
[58,58,61,53,62,67,65,0,60,57],
[67,63,62,67,66,76,69,71,0,70],
[63,68,62,59,63,72,71,74,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,60,63,55,71,65,63,67,60],
[65,0,58,45,63,45,72,41,50,63],
[71,73,0,61,74,73,79,65,64,66],
[68,86,70,0,80,62,73,76,81,60],
[76,68,57,51,0,63,61,60,64,54],
[60,86,58,69,68,0,74,58,68,58],
[66,59,52,58,70,57,0,71,54,63],
[68,90,66,55,71,73,60,0,72,67],
[64,81,67,50,67,63,77,59,0,66],
[71,68,65,71,77,73,68,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,61,66,68,70,73,78,67,74],
[57,0,63,58,69,67,77,73,63,69],
[70,68,0,73,69,76,74,88,64,75],
[65,73,58,0,63,59,74,72,68,69],
[63,62,62,68,0,60,76,74,66,65],
[61,64,55,72,71,0,66,73,67,66],
[58,54,57,57,55,65,0,63,61,63],
[53,58,43,59,57,58,68,0,57,57],
[64,68,67,63,65,64,70,74,0,66],
[57,62,56,62,66,65,68,74,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,63,62,71,60,71,68,60,62],
[77,0,70,78,76,73,65,67,77,67],
[68,61,0,69,75,56,64,61,60,59],
[69,53,62,0,57,57,58,57,59,63],
[60,55,56,74,0,65,61,60,55,66],
[71,58,75,74,66,0,72,62,65,61],
[60,66,67,73,70,59,0,63,62,65],
[63,64,70,74,71,69,68,0,68,69],
[71,54,71,72,76,66,69,63,0,62],
[69,64,72,68,65,70,66,62,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,71,65,80,60,68,76,81,63],
[59,0,59,73,79,41,59,50,72,76],
[60,72,0,79,60,52,66,76,87,65],
[66,58,52,0,69,52,62,57,82,57],
[51,52,71,62,0,49,54,59,68,61],
[71,90,79,79,82,0,63,88,87,91],
[63,72,65,69,77,68,0,76,89,67],
[55,81,55,74,72,43,55,0,76,50],
[50,59,44,49,63,44,42,55,0,66],
[68,55,66,74,70,40,64,81,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,56,71,61,70,50,57,56,73],
[73,0,72,76,75,74,66,72,64,76],
[75,59,0,76,68,71,58,64,67,76],
[60,55,55,0,63,65,51,62,55,71],
[70,56,63,68,0,70,58,74,63,67],
[61,57,60,66,61,0,54,61,57,68],
[81,65,73,80,73,77,0,73,73,80],
[74,59,67,69,57,70,58,0,65,74],
[75,67,64,76,68,74,58,66,0,73],
[58,55,55,60,64,63,51,57,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,52,60,64,58,48,55,50,58],
[71,0,53,77,59,73,60,54,68,54],
[79,78,0,90,83,70,61,74,73,80],
[71,54,41,0,61,60,51,63,54,75],
[67,72,48,70,0,58,64,54,55,51],
[73,58,61,71,73,0,56,63,63,62],
[83,71,70,80,67,75,0,61,69,58],
[76,77,57,68,77,68,70,0,66,68],
[81,63,58,77,76,68,62,65,0,70],
[73,77,51,56,80,69,73,63,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,61,74,66,65,75,69,59],
[65,0,60,61,74,60,72,67,62,71],
[64,71,0,62,67,64,67,73,80,68],
[70,70,69,0,69,62,64,68,71,61],
[57,57,64,62,0,57,64,65,72,64],
[65,71,67,69,74,0,78,69,78,64],
[66,59,64,67,67,53,0,67,71,69],
[56,64,58,63,66,62,64,0,69,62],
[62,69,51,60,59,53,60,62,0,64],
[72,60,63,70,67,67,62,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,56,62,48,57,53,53,58,51],
[84,0,69,67,71,77,68,65,71,66],
[75,62,0,75,70,68,68,64,68,70],
[69,64,56,0,65,70,56,55,61,68],
[83,60,61,66,0,67,60,58,65,62],
[74,54,63,61,64,0,47,57,62,57],
[78,63,63,75,71,84,0,67,69,62],
[78,66,67,76,73,74,64,0,69,62],
[73,60,63,70,66,69,62,62,0,59],
[80,65,61,63,69,74,69,69,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,55,71,82,70,53,61,38,56],
[61,0,60,81,80,74,43,55,68,50],
[76,71,0,64,81,76,70,69,52,71],
[60,50,67,0,67,55,49,42,37,54],
[49,51,50,64,0,69,44,68,50,75],
[61,57,55,76,62,0,43,62,69,62],
[78,88,61,82,87,88,0,79,64,76],
[70,76,62,89,63,69,52,0,51,77],
[93,63,79,94,81,62,67,80,0,74],
[75,81,60,77,56,69,55,54,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,52,74,73,63,67,73,71,57],
[63,0,64,64,59,58,67,70,65,54],
[79,67,0,79,78,68,53,72,78,68],
[57,67,52,0,60,65,59,68,62,54],
[58,72,53,71,0,47,59,55,70,56],
[68,73,63,66,84,0,71,80,80,69],
[64,64,78,72,72,60,0,72,75,61],
[58,61,59,63,76,51,59,0,79,51],
[60,66,53,69,61,51,56,52,0,58],
[74,77,63,77,75,62,70,80,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,52,66,61,60,60,63,74,64],
[69,0,68,70,64,66,67,68,72,76],
[79,63,0,78,70,73,71,82,80,81],
[65,61,53,0,64,67,66,60,71,69],
[70,67,61,67,0,78,70,76,72,73],
[71,65,58,64,53,0,67,72,71,73],
[71,64,60,65,61,64,0,67,74,67],
[68,63,49,71,55,59,64,0,73,62],
[57,59,51,60,59,60,57,58,0,57],
[67,55,50,62,58,58,64,69,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,53,64,53,57,62,62,61],
[60,0,60,56,66,56,60,67,61,59],
[67,71,0,64,63,61,65,87,61,61],
[78,75,67,0,77,63,63,74,67,65],
[67,65,68,54,0,55,61,68,67,55],
[78,75,70,68,76,0,70,80,71,60],
[74,71,66,68,70,61,0,71,62,70],
[69,64,44,57,63,51,60,0,56,51],
[69,70,70,64,64,60,69,75,0,63],
[70,72,70,66,76,71,61,80,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,63,62,67,59,66,71,65,75],
[71,0,70,67,67,65,69,72,63,63],
[68,61,0,72,72,70,72,62,64,66],
[69,64,59,0,69,69,67,71,66,71],
[64,64,59,62,0,56,59,64,62,61],
[72,66,61,62,75,0,72,63,69,61],
[65,62,59,64,72,59,0,63,64,62],
[60,59,69,60,67,68,68,0,66,63],
[66,68,67,65,69,62,67,65,0,65],
[56,68,65,60,70,70,69,68,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,75,75,69,63,60,61,59,65],
[66,0,78,72,65,64,66,71,61,71],
[56,53,0,63,59,56,63,49,57,63],
[56,59,68,0,64,64,57,61,63,68],
[62,66,72,67,0,66,66,53,66,59],
[68,67,75,67,65,0,57,68,58,76],
[71,65,68,74,65,74,0,65,62,68],
[70,60,82,70,78,63,66,0,65,69],
[72,70,74,68,65,73,69,66,0,71],
[66,60,68,63,72,55,63,62,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,74,58,69,63,73,59,74,66],
[57,0,52,53,72,51,63,57,53,49],
[57,79,0,55,50,42,69,64,59,68],
[73,78,76,0,73,66,66,89,56,85],
[62,59,81,58,0,54,64,70,57,62],
[68,80,89,65,77,0,81,67,74,80],
[58,68,62,65,67,50,0,52,65,66],
[72,74,67,42,61,64,79,0,65,72],
[57,78,72,75,74,57,66,66,0,59],
[65,82,63,46,69,51,65,59,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,77,61,79,74,57,65,62,67],
[43,0,66,51,75,60,45,55,49,54],
[54,65,0,62,72,69,58,68,63,56],
[70,80,69,0,82,67,68,72,63,65],
[52,56,59,49,0,45,47,55,47,44],
[57,71,62,64,86,0,66,67,63,57],
[74,86,73,63,84,65,0,69,56,70],
[66,76,63,59,76,64,62,0,53,56],
[69,82,68,68,84,68,75,78,0,60],
[64,77,75,66,87,74,61,75,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,61,65,66,61,59,66,55,66],
[80,0,76,73,78,72,68,80,63,76],
[70,55,0,63,57,62,62,62,57,58],
[66,58,68,0,73,69,56,66,64,78],
[65,53,74,58,0,56,57,63,58,59],
[70,59,69,62,75,0,66,56,65,58],
[72,63,69,75,74,65,0,69,68,77],
[65,51,69,65,68,75,62,0,65,64],
[76,68,74,67,73,66,63,66,0,67],
[65,55,73,53,72,73,54,67,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,73,62,79,57,68,69,73,72],
[63,0,68,61,78,55,68,65,70,71],
[58,63,0,59,72,49,71,58,60,60],
[69,70,72,0,79,68,67,64,66,60],
[52,53,59,52,0,53,66,63,64,69],
[74,76,82,63,78,0,74,74,81,80],
[63,63,60,64,65,57,0,62,66,71],
[62,66,73,67,68,57,69,0,67,69],
[58,61,71,65,67,50,65,64,0,63],
[59,60,71,71,62,51,60,62,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,56,66,57,82,64,65,82,44],
[82,0,104,65,58,74,81,70,93,71],
[75,27,0,57,50,60,50,51,59,54],
[65,66,74,0,26,60,49,63,66,62],
[74,73,81,105,0,65,88,62,99,52],
[49,57,71,71,66,0,65,70,81,53],
[67,50,81,82,43,66,0,63,79,58],
[66,61,80,68,69,61,68,0,76,56],
[49,38,72,65,32,50,52,55,0,54],
[87,60,77,69,79,78,73,75,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,73,51,50,46,82,69,66],
[62,0,77,94,65,41,60,68,76,61],
[62,54,0,69,53,39,49,66,76,62],
[58,37,62,0,50,41,67,67,67,52],
[80,66,78,81,0,50,65,86,71,71],
[81,90,92,90,81,0,61,87,90,84],
[85,71,82,64,66,70,0,80,61,75],
[49,63,65,64,45,44,51,0,57,66],
[62,55,55,64,60,41,70,74,0,55],
[65,70,69,79,60,47,56,65,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,63,57,77,57,63,89,53,60],
[73,0,72,71,64,64,94,89,63,62],
[68,59,0,77,83,70,71,86,57,73],
[74,60,54,0,81,63,56,59,73,68],
[54,67,48,50,0,44,64,60,42,56],
[74,67,61,68,87,0,83,80,63,78],
[68,37,60,75,67,48,0,90,66,80],
[42,42,45,72,71,51,41,0,35,48],
[78,68,74,58,89,68,65,96,0,69],
[71,69,58,63,75,53,51,83,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,78,68,61,68,63,75,76],
[65,0,66,72,64,61,63,68,61,69],
[64,65,0,69,62,61,69,64,71,62],
[53,59,62,0,52,39,50,52,49,63],
[63,67,69,79,0,66,71,68,69,68],
[70,70,70,92,65,0,71,70,71,71],
[63,68,62,81,60,60,0,77,67,75],
[68,63,67,79,63,61,54,0,67,67],
[56,70,60,82,62,60,64,64,0,70],
[55,62,69,68,63,60,56,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,69,63,67,69,83,66,69],
[65,0,59,55,71,56,55,69,61,70],
[68,72,0,70,71,73,56,79,68,71],
[62,76,61,0,72,64,64,73,72,65],
[68,60,60,59,0,59,70,64,62,65],
[64,75,58,67,72,0,72,76,68,67],
[62,76,75,67,61,59,0,86,73,69],
[48,62,52,58,67,55,45,0,58,60],
[65,70,63,59,69,63,58,73,0,77],
[62,61,60,66,66,64,62,71,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,50,45,55,45,65,70,57,51],
[77,0,70,66,71,59,76,74,62,54],
[81,61,0,73,67,61,78,80,78,75],
[86,65,58,0,67,49,71,73,83,62],
[76,60,64,64,0,79,57,74,72,57],
[86,72,70,82,52,0,74,71,71,72],
[66,55,53,60,74,57,0,71,56,62],
[61,57,51,58,57,60,60,0,49,59],
[74,69,53,48,59,60,75,82,0,61],
[80,77,56,69,74,59,69,72,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,40,40,39,59,67,106,48,69,77],
[91,0,67,55,65,73,103,56,65,66],
[91,64,0,63,66,74,96,47,66,55],
[92,76,68,0,105,85,115,76,67,54],
[72,66,65,26,0,55,96,56,46,56],
[64,58,57,46,76,0,105,29,49,39],
[25,28,35,16,35,26,0,28,19,25],
[83,75,84,55,75,102,103,0,76,63],
[62,66,65,64,85,82,112,55,0,45],
[54,65,76,77,75,92,106,68,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,67,66,77,62,59,62,71],
[63,0,59,62,62,74,61,64,62,70],
[63,72,0,66,64,78,68,68,61,74],
[64,69,65,0,63,72,56,65,59,71],
[65,69,67,68,0,74,72,69,68,71],
[54,57,53,59,57,0,58,55,53,66],
[69,70,63,75,59,73,0,68,62,78],
[72,67,63,66,62,76,63,0,63,74],
[69,69,70,72,63,78,69,68,0,70],
[60,61,57,60,60,65,53,57,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,67,70,73,68,61,81,53,65],
[71,0,64,74,73,72,72,88,67,67],
[64,67,0,69,64,81,65,73,67,64],
[61,57,62,0,55,76,58,76,60,54],
[58,58,67,76,0,65,62,73,60,59],
[63,59,50,55,66,0,59,67,57,53],
[70,59,66,73,69,72,0,84,74,74],
[50,43,58,55,58,64,47,0,43,64],
[78,64,64,71,71,74,57,88,0,77],
[66,64,67,77,72,78,57,67,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,39,77,64,79,75,69,49,66,49],
[92,0,84,53,76,65,64,48,64,57],
[54,47,0,72,59,74,55,57,27,55],
[67,78,59,0,78,58,77,67,37,86],
[52,55,72,53,0,82,71,57,25,63],
[56,66,57,73,49,0,56,49,45,64],
[62,67,76,54,60,75,0,20,35,47],
[82,83,74,64,74,82,111,0,64,72],
[65,67,104,94,106,86,96,67,0,66],
[82,74,76,45,68,67,84,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,63,60,61,66,57,76,62],
[65,0,64,60,64,60,65,59,72,59],
[64,67,0,61,65,70,62,68,74,59],
[68,71,70,0,64,65,59,64,78,71],
[71,67,66,67,0,76,67,67,85,65],
[70,71,61,66,55,0,69,61,81,67],
[65,66,69,72,64,62,0,71,67,67],
[74,72,63,67,64,70,60,0,74,73],
[55,59,57,53,46,50,64,57,0,69],
[69,72,72,60,66,64,64,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,78,66,66,68,67,68,64,77],
[66,0,78,67,63,77,66,64,70,64],
[53,53,0,71,63,64,61,69,54,57],
[65,64,60,0,57,69,62,61,56,73],
[65,68,68,74,0,79,63,75,75,65],
[63,54,67,62,52,0,63,52,57,60],
[64,65,70,69,68,68,0,71,70,63],
[63,67,62,70,56,79,60,0,60,58],
[67,61,77,75,56,74,61,71,0,73],
[54,67,74,58,66,71,68,73,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,71,69,56,62,75,72,79,69],
[71,0,75,72,67,70,76,65,79,71],
[60,56,0,62,47,58,63,58,62,67],
[62,59,69,0,65,58,74,69,62,71],
[75,64,84,66,0,79,78,71,72,69],
[69,61,73,73,52,0,70,76,74,74],
[56,55,68,57,53,61,0,69,64,59],
[59,66,73,62,60,55,62,0,78,76],
[52,52,69,69,59,57,67,53,0,60],
[62,60,64,60,62,57,72,55,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,77,67,75,51,37,62,59,66],
[75,0,72,61,84,48,45,57,44,50],
[54,59,0,48,82,46,45,36,51,55],
[64,70,83,0,72,53,52,58,54,56],
[56,47,49,59,0,40,55,49,37,54],
[80,83,85,78,91,0,68,66,60,62],
[94,86,86,79,76,63,0,76,75,74],
[69,74,95,73,82,65,55,0,79,76],
[72,87,80,77,94,71,56,52,0,70],
[65,81,76,75,77,69,57,55,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,71,68,70,73,72,67,70],
[72,0,59,77,67,82,78,54,77,80],
[64,72,0,73,70,72,70,71,70,60],
[60,54,58,0,65,69,60,61,64,66],
[63,64,61,66,0,76,69,62,64,63],
[61,49,59,62,55,0,63,61,62,68],
[58,53,61,71,62,68,0,58,76,73],
[59,77,60,70,69,70,73,0,67,65],
[64,54,61,67,67,69,55,64,0,57],
[61,51,71,65,68,63,58,66,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,75,81,70,79,79,72,63,75],
[54,0,69,55,54,58,61,58,51,56],
[56,62,0,42,48,63,58,60,47,51],
[50,76,89,0,63,70,79,62,77,67],
[61,77,83,68,0,77,69,70,60,74],
[52,73,68,61,54,0,55,59,65,63],
[52,70,73,52,62,76,0,60,56,61],
[59,73,71,69,61,72,71,0,56,65],
[68,80,84,54,71,66,75,75,0,76],
[56,75,80,64,57,68,70,66,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,60,58,72,60,63,63,70,64],
[72,0,48,57,64,63,60,65,58,70],
[71,83,0,68,75,73,67,64,70,66],
[73,74,63,0,70,72,74,57,67,71],
[59,67,56,61,0,60,66,66,65,55],
[71,68,58,59,71,0,62,66,62,61],
[68,71,64,57,65,69,0,66,71,65],
[68,66,67,74,65,65,65,0,71,57],
[61,73,61,64,66,69,60,60,0,59],
[67,61,65,60,76,70,66,74,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,72,77,62,67,79,66,83,70],
[57,0,67,45,64,57,66,62,69,58],
[59,64,0,59,89,61,70,73,81,63],
[54,86,72,0,74,69,83,76,69,76],
[69,67,42,57,0,73,59,63,71,61],
[64,74,70,62,58,0,72,58,82,61],
[52,65,61,48,72,59,0,73,59,67],
[65,69,58,55,68,73,58,0,71,60],
[48,62,50,62,60,49,72,60,0,57],
[61,73,68,55,70,70,64,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,48,63,61,71,69,67,62,59],
[64,0,50,59,58,65,59,71,67,67],
[83,81,0,80,65,78,71,78,77,76],
[68,72,51,0,70,83,65,70,66,71],
[70,73,66,61,0,78,64,73,71,74],
[60,66,53,48,53,0,46,72,55,60],
[62,72,60,66,67,85,0,71,69,66],
[64,60,53,61,58,59,60,0,76,62],
[69,64,54,65,60,76,62,55,0,63],
[72,64,55,60,57,71,65,69,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,67,71,63,66,72,64,73,63],
[56,0,65,68,58,63,66,67,69,61],
[64,66,0,70,59,56,73,66,65,54],
[60,63,61,0,59,67,61,58,69,56],
[68,73,72,72,0,68,78,65,75,80],
[65,68,75,64,63,0,74,62,70,65],
[59,65,58,70,53,57,0,65,67,63],
[67,64,65,73,66,69,66,0,66,66],
[58,62,66,62,56,61,64,65,0,71],
[68,70,77,75,51,66,68,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,96,70,62,67,77,72,68,69],
[64,0,84,74,69,66,72,74,72,58],
[35,47,0,51,46,43,54,53,49,46],
[61,57,80,0,72,69,70,74,64,63],
[69,62,85,59,0,62,68,70,64,59],
[64,65,88,62,69,0,76,67,67,61],
[54,59,77,61,63,55,0,59,53,53],
[59,57,78,57,61,64,72,0,51,52],
[63,59,82,67,67,64,78,80,0,57],
[62,73,85,68,72,70,78,79,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,67,54,74,57,57,67,55,51],
[65,0,62,59,55,58,64,72,57,49],
[64,69,0,54,49,47,50,59,50,36],
[77,72,77,0,73,54,57,73,73,68],
[57,76,82,58,0,63,52,72,71,48],
[74,73,84,77,68,0,61,75,75,59],
[74,67,81,74,79,70,0,78,68,53],
[64,59,72,58,59,56,53,0,47,50],
[76,74,81,58,60,56,63,84,0,58],
[80,82,95,63,83,72,78,81,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,73,70,80,64,69,68,64,76],
[60,0,69,60,71,61,62,54,66,74],
[58,62,0,69,75,66,66,67,68,71],
[61,71,62,0,80,60,66,59,62,68],
[51,60,56,51,0,61,60,62,59,66],
[67,70,65,71,70,0,62,65,71,72],
[62,69,65,65,71,69,0,66,63,71],
[63,77,64,72,69,66,65,0,61,76],
[67,65,63,69,72,60,68,70,0,71],
[55,57,60,63,65,59,60,55,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,76,63,70,66,59,59,62,72],
[63,0,66,69,59,59,55,68,64,68],
[55,65,0,59,60,59,63,59,57,67],
[68,62,72,0,60,58,52,55,62,69],
[61,72,71,71,0,58,58,55,62,75],
[65,72,72,73,73,0,66,58,72,77],
[72,76,68,79,73,65,0,67,77,76],
[72,63,72,76,76,73,64,0,65,69],
[69,67,74,69,69,59,54,66,0,80],
[59,63,64,62,56,54,55,62,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,45,63,65,72,59,38,55,49],
[88,0,84,64,78,83,80,67,71,81],
[86,47,0,67,76,63,66,61,47,62],
[68,67,64,0,84,73,71,49,52,63],
[66,53,55,47,0,64,67,51,43,64],
[59,48,68,58,67,0,51,47,54,58],
[72,51,65,60,64,80,0,38,54,55],
[93,64,70,82,80,84,93,0,79,68],
[76,60,84,79,88,77,77,52,0,64],
[82,50,69,68,67,73,76,63,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,73,79,88,77,62,74,79,61],
[54,0,51,60,82,65,73,52,64,70],
[58,80,0,74,80,69,64,59,61,64],
[52,71,57,0,83,61,60,48,66,77],
[43,49,51,48,0,66,62,30,44,59],
[54,66,62,70,65,0,63,69,55,64],
[69,58,67,71,69,68,0,56,62,67],
[57,79,72,83,101,62,75,0,49,69],
[52,67,70,65,87,76,69,82,0,73],
[70,61,67,54,72,67,64,62,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,67,66,77,63,69,79,61,68],
[59,0,72,58,65,51,60,60,74,61],
[64,59,0,69,75,56,62,67,56,68],
[65,73,62,0,68,69,61,66,66,83],
[54,66,56,63,0,58,55,62,56,56],
[68,80,75,62,73,0,65,79,65,74],
[62,71,69,70,76,66,0,79,80,65],
[52,71,64,65,69,52,52,0,57,66],
[70,57,75,65,75,66,51,74,0,66],
[63,70,63,48,75,57,66,65,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,78,52,54,32,107,54,52,97],
[54,0,42,30,43,46,88,66,55,68],
[53,89,0,41,53,44,65,54,43,76],
[79,101,90,0,56,59,91,80,78,78],
[77,88,78,75,0,68,85,89,56,76],
[99,85,87,72,63,0,96,85,71,85],
[24,43,66,40,46,35,0,43,43,54],
[77,65,77,51,42,46,88,0,56,76],
[79,76,88,53,75,60,88,75,0,78],
[34,63,55,53,55,46,77,55,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,63,61,61,62,60,76,50,66],
[56,0,53,56,61,55,47,65,48,55],
[68,78,0,66,66,52,53,74,51,54],
[70,75,65,0,62,59,59,71,63,53],
[70,70,65,69,0,63,63,77,60,56],
[69,76,79,72,68,0,59,77,68,69],
[71,84,78,72,68,72,0,89,67,63],
[55,66,57,60,54,54,42,0,57,53],
[81,83,80,68,71,63,64,74,0,68],
[65,76,77,78,75,62,68,78,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,63,74,72,60,83,71,59,67],
[58,0,64,60,73,80,84,70,74,71],
[68,67,0,67,75,68,85,83,69,64],
[57,71,64,0,79,65,77,73,56,69],
[59,58,56,52,0,60,79,75,58,58],
[71,51,63,66,71,0,75,74,59,62],
[48,47,46,54,52,56,0,45,38,63],
[60,61,48,58,56,57,86,0,50,59],
[72,57,62,75,73,72,93,81,0,73],
[64,60,67,62,73,69,68,72,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,70,71,72,68,60,63,65],
[63,0,73,76,70,76,68,72,62,60],
[73,58,0,77,76,76,68,66,64,65],
[61,55,54,0,62,70,60,60,62,63],
[60,61,55,69,0,73,65,55,55,57],
[59,55,55,61,58,0,53,60,52,60],
[63,63,63,71,66,78,0,71,56,58],
[71,59,65,71,76,71,60,0,62,69],
[68,69,67,69,76,79,75,69,0,65],
[66,71,66,68,74,71,73,62,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,78,70,90,66,78,80,95,93],
[66,0,75,53,70,75,70,59,78,88],
[53,56,0,62,61,66,63,89,80,85],
[61,78,69,0,65,79,55,84,93,85],
[41,61,70,66,0,52,67,86,71,63],
[65,56,65,52,79,0,55,68,79,86],
[53,61,68,76,64,76,0,94,91,94],
[51,72,42,47,45,63,37,0,66,67],
[36,53,51,38,60,52,40,65,0,68],
[38,43,46,46,68,45,37,64,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,64,82,56,62,61,64,73,64],
[32,0,45,52,41,43,75,38,48,42],
[67,86,0,62,68,60,65,44,75,56],
[49,79,69,0,58,67,68,50,76,60],
[75,90,63,73,0,68,72,70,94,70],
[69,88,71,64,63,0,63,41,60,72],
[70,56,66,63,59,68,0,66,72,65],
[67,93,87,81,61,90,65,0,74,77],
[58,83,56,55,37,71,59,57,0,64],
[67,89,75,71,61,59,66,54,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,72,68,68,70,66,61,63],
[66,0,67,69,62,62,64,59,71,67],
[67,64,0,75,73,68,57,57,66,66],
[59,62,56,0,64,60,54,50,56,53],
[63,69,58,67,0,63,58,61,64,59],
[63,69,63,71,68,0,69,61,62,62],
[61,67,74,77,73,62,0,66,66,66],
[65,72,74,81,70,70,65,0,64,61],
[70,60,65,75,67,69,65,67,0,62],
[68,64,65,78,72,69,65,70,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,50,65,62,68,58,57,56,54],
[64,0,60,67,75,72,72,65,60,64],
[81,71,0,53,64,77,77,60,65,64],
[66,64,78,0,54,70,76,67,55,68],
[69,56,67,77,0,73,70,56,60,67],
[63,59,54,61,58,0,64,51,67,64],
[73,59,54,55,61,67,0,71,59,58],
[74,66,71,64,75,80,60,0,69,62],
[75,71,66,76,71,64,72,62,0,60],
[77,67,67,63,64,67,73,69,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,52,52,78,79,52,79,78,52],
[78,0,78,78,52,52,52,79,78,52],
[79,53,0,105,79,79,79,79,105,79],
[79,53,26,0,26,27,52,27,53,53],
[53,79,52,105,0,53,78,53,105,79],
[52,79,52,104,78,0,78,53,78,52],
[79,79,52,79,53,53,0,79,79,53],
[52,52,52,104,78,78,52,0,104,52],
[53,53,26,78,26,53,52,27,0,26],
[79,79,52,78,52,79,78,79,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,58,87,80,65,67,97,75,89],
[40,0,28,50,34,31,47,55,50,61],
[73,103,0,89,94,98,60,81,52,83],
[44,81,42,0,64,64,55,57,60,61],
[51,97,37,67,0,56,45,65,33,52],
[66,100,33,67,75,0,54,71,46,69],
[64,84,71,76,86,77,0,60,52,79],
[34,76,50,74,66,60,71,0,56,77],
[56,81,79,71,98,85,79,75,0,71],
[42,70,48,70,79,62,52,54,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,70,64,59,66,65,74,71,68],
[69,0,67,65,62,64,59,62,67,57],
[61,64,0,65,56,56,46,60,62,51],
[67,66,66,0,54,71,50,69,63,51],
[72,69,75,77,0,72,62,73,85,64],
[65,67,75,60,59,0,58,67,70,60],
[66,72,85,81,69,73,0,69,79,62],
[57,69,71,62,58,64,62,0,65,46],
[60,64,69,68,46,61,52,66,0,51],
[63,74,80,80,67,71,69,85,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,58,67,61,65,57,69,71,64],
[62,0,69,66,64,61,62,64,66,57],
[73,62,0,77,67,65,68,71,75,61],
[64,65,54,0,60,57,58,58,68,62],
[70,67,64,71,0,70,63,70,72,67],
[66,70,66,74,61,0,64,77,72,62],
[74,69,63,73,68,67,0,72,64,64],
[62,67,60,73,61,54,59,0,66,53],
[60,65,56,63,59,59,67,65,0,58],
[67,74,70,69,64,69,67,78,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,51,52,57,71,68,70,66,69],
[79,0,77,68,63,71,72,95,78,66],
[80,54,0,65,62,67,69,79,79,68],
[79,63,66,0,52,77,72,78,72,64],
[74,68,69,79,0,66,80,87,80,63],
[60,60,64,54,65,0,69,71,57,51],
[63,59,62,59,51,62,0,74,64,70],
[61,36,52,53,44,60,57,0,68,58],
[65,53,52,59,51,74,67,63,0,57],
[62,65,63,67,68,80,61,73,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,71,74,73,60,67,68,65,72],
[75,0,76,74,72,63,65,82,80,76],
[60,55,0,70,65,60,65,71,61,72],
[57,57,61,0,67,62,57,58,63,66],
[58,59,66,64,0,58,62,58,71,67],
[71,68,71,69,73,0,70,65,69,73],
[64,66,66,74,69,61,0,60,60,70],
[63,49,60,73,73,66,71,0,70,71],
[66,51,70,68,60,62,71,61,0,74],
[59,55,59,65,64,58,61,60,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,53,97,84,79,66,61,75,87],
[55,0,60,77,58,66,44,65,77,75],
[78,71,0,94,89,94,83,61,76,94],
[34,54,37,0,58,55,49,48,51,69],
[47,73,42,73,0,59,38,54,75,62],
[52,65,37,76,72,0,66,64,80,62],
[65,87,48,82,93,65,0,63,83,83],
[70,66,70,83,77,67,68,0,60,87],
[56,54,55,80,56,51,48,71,0,77],
[44,56,37,62,69,69,48,44,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,78,72,66,63,67,73,60,67],
[57,0,62,64,61,63,64,67,64,60],
[53,69,0,73,62,69,61,60,70,57],
[59,67,58,0,60,59,50,62,67,70],
[65,70,69,71,0,54,62,66,71,67],
[68,68,62,72,77,0,66,65,67,58],
[64,67,70,81,69,65,0,67,79,67],
[58,64,71,69,65,66,64,0,65,69],
[71,67,61,64,60,64,52,66,0,57],
[64,71,74,61,64,73,64,62,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,44,55,63,44,46,53,53,50,52],
[87,0,71,76,69,71,44,77,88,68],
[76,60,0,83,69,80,32,49,67,57],
[68,55,48,0,53,63,63,35,79,59],
[87,62,62,78,0,63,71,59,78,68],
[85,60,51,68,68,0,60,51,67,41],
[78,87,99,68,60,71,0,80,76,67],
[78,54,82,96,72,80,51,0,76,79],
[81,43,64,52,53,64,55,55,0,62],
[79,63,74,72,63,90,64,52,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,64,72,58,66,54,85,64,63],
[68,0,69,66,49,69,66,77,61,58],
[67,62,0,84,62,81,73,90,68,66],
[59,65,47,0,44,68,56,79,57,59],
[73,82,69,87,0,71,61,81,59,67],
[65,62,50,63,60,0,72,89,66,64],
[77,65,58,75,70,59,0,85,84,71],
[46,54,41,52,50,42,46,0,44,36],
[67,70,63,74,72,65,47,87,0,48],
[68,73,65,72,64,67,60,95,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,77,72,76,72,77,77,67,60],
[57,0,71,78,60,74,74,64,62,66],
[54,60,0,73,63,58,69,70,73,53],
[59,53,58,0,62,70,74,75,66,64],
[55,71,68,69,0,73,77,73,65,70],
[59,57,73,61,58,0,77,72,71,75],
[54,57,62,57,54,54,0,65,56,52],
[54,67,61,56,58,59,66,0,59,65],
[64,69,58,65,66,60,75,72,0,62],
[71,65,78,67,61,56,79,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,30,50,40,28,38,68,46,49],
[83,0,41,64,53,65,53,52,58,61],
[101,90,0,92,81,70,69,110,65,81],
[81,67,39,0,59,47,57,56,55,46],
[91,78,50,72,0,62,72,72,86,79],
[103,66,61,84,69,0,67,83,78,59],
[93,78,62,74,59,64,0,82,68,71],
[63,79,21,75,59,48,49,0,47,58],
[85,73,66,76,45,53,63,84,0,73],
[82,70,50,85,52,72,60,73,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,56,60,69,68,60,47,70],
[63,0,61,50,60,69,59,50,64,68],
[60,70,0,59,58,69,63,56,59,68],
[75,81,72,0,67,77,66,68,64,79],
[71,71,73,64,0,75,65,63,67,72],
[62,62,62,54,56,0,67,59,58,65],
[63,72,68,65,66,64,0,62,64,63],
[71,81,75,63,68,72,69,0,71,73],
[84,67,72,67,64,73,67,60,0,76],
[61,63,63,52,59,66,68,58,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,62,63,77,68,60,84,56,61],
[66,0,71,76,74,60,79,85,66,80],
[69,60,0,65,75,49,64,80,70,68],
[68,55,66,0,72,50,57,68,48,69],
[54,57,56,59,0,41,54,72,45,68],
[63,71,82,81,90,0,74,88,71,91],
[71,52,67,74,77,57,0,83,69,78],
[47,46,51,63,59,43,48,0,47,53],
[75,65,61,83,86,60,62,84,0,83],
[70,51,63,62,63,40,53,78,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,67,74,69,62,74,68,59,54],
[72,0,65,74,67,71,68,71,71,64],
[64,66,0,76,62,73,72,65,67,65],
[57,57,55,0,54,52,60,55,55,61],
[62,64,69,77,0,73,76,69,66,71],
[69,60,58,79,58,0,72,61,60,64],
[57,63,59,71,55,59,0,57,61,53],
[63,60,66,76,62,70,74,0,64,60],
[72,60,64,76,65,71,70,67,0,64],
[77,67,66,70,60,67,78,71,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,67,78,68,71,63,67,76,70],
[57,0,61,67,67,56,49,64,69,64],
[64,70,0,84,70,71,71,70,69,68],
[53,64,47,0,67,54,53,57,64,66],
[63,64,61,64,0,64,62,67,72,64],
[60,75,60,77,67,0,63,68,70,65],
[68,82,60,78,69,68,0,66,67,69],
[64,67,61,74,64,63,65,0,70,65],
[55,62,62,67,59,61,64,61,0,64],
[61,67,63,65,67,66,62,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,72,74,66,68,67,64,71,65],
[59,0,67,70,73,63,54,61,75,73],
[59,64,0,72,71,66,64,68,70,64],
[57,61,59,0,69,62,54,61,67,64],
[65,58,60,62,0,58,51,63,69,62],
[63,68,65,69,73,0,54,72,68,69],
[64,77,67,77,80,77,0,80,79,75],
[67,70,63,70,68,59,51,0,71,72],
[60,56,61,64,62,63,52,60,0,66],
[66,58,67,67,69,62,56,59,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,74,63,66,67,70,79,68,67],
[58,0,67,70,59,63,67,65,65,66],
[57,64,0,66,56,65,73,69,70,67],
[68,61,65,0,61,61,75,75,72,76],
[65,72,75,70,0,66,71,76,68,74],
[64,68,66,70,65,0,68,76,70,77],
[61,64,58,56,60,63,0,62,70,59],
[52,66,62,56,55,55,69,0,60,60],
[63,66,61,59,63,61,61,71,0,66],
[64,65,64,55,57,54,72,71,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,56,61,68,72,63,81,63,58],
[59,0,67,59,58,60,60,76,66,60],
[75,64,0,61,63,72,58,77,65,67],
[70,72,70,0,59,64,58,92,71,64],
[63,73,68,72,0,71,67,83,68,67],
[59,71,59,67,60,0,76,82,61,63],
[68,71,73,73,64,55,0,79,62,70],
[50,55,54,39,48,49,52,0,52,48],
[68,65,66,60,63,70,69,79,0,66],
[73,71,64,67,64,68,61,83,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,60,68,62,56,65,72,69,67],
[64,0,58,56,55,58,59,59,58,67],
[71,73,0,69,71,64,72,79,68,56],
[63,75,62,0,69,57,65,78,70,60],
[69,76,60,62,0,63,65,78,64,61],
[75,73,67,74,68,0,73,77,63,67],
[66,72,59,66,66,58,0,67,62,58],
[59,72,52,53,53,54,64,0,63,53],
[62,73,63,61,67,68,69,68,0,59],
[64,64,75,71,70,64,73,78,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,76,77,76,59,71,69,71,70],
[56,0,74,61,69,69,70,74,70,66],
[55,57,0,62,68,62,62,63,70,64],
[54,70,69,0,62,58,63,69,63,64],
[55,62,63,69,0,48,74,62,69,61],
[72,62,69,73,83,0,84,75,81,67],
[60,61,69,68,57,47,0,71,65,64],
[62,57,68,62,69,56,60,0,69,64],
[60,61,61,68,62,50,66,62,0,62],
[61,65,67,67,70,64,67,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,61,74,71,83,54,63,66,68],
[51,0,43,65,51,56,49,55,41,57],
[70,88,0,74,68,84,71,81,62,72],
[57,66,57,0,53,62,38,62,50,47],
[60,80,63,78,0,73,61,77,54,65],
[48,75,47,69,58,0,64,62,50,59],
[77,82,60,93,70,67,0,70,63,77],
[68,76,50,69,54,69,61,0,63,56],
[65,90,69,81,77,81,68,68,0,73],
[63,74,59,84,66,72,54,75,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,41,59,47,52,67,51,64,61],
[78,0,59,60,68,74,75,60,57,66],
[90,72,0,82,69,74,74,61,70,68],
[72,71,49,0,59,64,71,48,66,67],
[84,63,62,72,0,69,68,66,67,70],
[79,57,57,67,62,0,64,63,56,59],
[64,56,57,60,63,67,0,65,63,67],
[80,71,70,83,65,68,66,0,69,71],
[67,74,61,65,64,75,68,62,0,70],
[70,65,63,64,61,72,64,60,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,80,77,62,78,64,79,71,90],
[65,0,82,64,65,63,58,75,57,86],
[51,49,0,66,46,66,63,63,62,69],
[54,67,65,0,54,55,62,67,64,86],
[69,66,85,77,0,68,68,74,64,84],
[53,68,65,76,63,0,71,71,59,80],
[67,73,68,69,63,60,0,72,59,75],
[52,56,68,64,57,60,59,0,57,80],
[60,74,69,67,67,72,72,74,0,82],
[41,45,62,45,47,51,56,51,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,81,71,65,76,73,74,83,80],
[47,0,74,55,66,52,57,55,77,63],
[50,57,0,55,59,52,65,63,64,59],
[60,76,76,0,71,65,65,60,74,83],
[66,65,72,60,0,63,63,60,70,74],
[55,79,79,66,68,0,63,71,70,72],
[58,74,66,66,68,68,0,65,73,80],
[57,76,68,71,71,60,66,0,76,75],
[48,54,67,57,61,61,58,55,0,75],
[51,68,72,48,57,59,51,56,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,66,58,67,74,68,77,58,64],
[69,0,55,69,62,67,67,81,61,59],
[65,76,0,63,61,56,64,68,55,72],
[73,62,68,0,63,62,64,74,64,61],
[64,69,70,68,0,55,52,82,50,65],
[57,64,75,69,76,0,62,70,66,72],
[63,64,67,67,79,69,0,69,50,73],
[54,50,63,57,49,61,62,0,62,46],
[73,70,76,67,81,65,81,69,0,74],
[67,72,59,70,66,59,58,85,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,76,70,71,71,67,64,75,78],
[62,0,75,62,65,55,59,65,59,65],
[55,56,0,53,67,54,52,58,53,68],
[61,69,78,0,58,50,60,65,57,70],
[60,66,64,73,0,64,65,63,65,71],
[60,76,77,81,67,0,77,74,67,72],
[64,72,79,71,66,54,0,55,57,71],
[67,66,73,66,68,57,76,0,66,73],
[56,72,78,74,66,64,74,65,0,74],
[53,66,63,61,60,59,60,58,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,64,69,60,58,58,61,51],
[67,0,68,64,64,61,68,63,76,58],
[62,63,0,63,69,55,70,66,64,65],
[67,67,68,0,74,70,70,72,65,65],
[62,67,62,57,0,60,63,60,71,61],
[71,70,76,61,71,0,71,71,62,66],
[73,63,61,61,68,60,0,66,66,67],
[73,68,65,59,71,60,65,0,58,60],
[70,55,67,66,60,69,65,73,0,57],
[80,73,66,66,70,65,64,71,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,67,44,48,64,56,56,50,64],
[75,0,73,65,70,81,82,69,67,55],
[64,58,0,44,73,57,88,58,62,74],
[87,66,87,0,80,74,82,61,81,71],
[83,61,58,51,0,79,71,66,58,62],
[67,50,74,57,52,0,71,41,59,54],
[75,49,43,49,60,60,0,56,81,57],
[75,62,73,70,65,90,75,0,63,69],
[81,64,69,50,73,72,50,68,0,68],
[67,76,57,60,69,77,74,62,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,75,77,77,58,65,63,68,65],
[59,0,83,70,70,66,73,64,75,68],
[56,48,0,62,52,53,61,62,58,57],
[54,61,69,0,64,67,59,56,57,62],
[54,61,79,67,0,63,67,60,65,61],
[73,65,78,64,68,0,72,61,68,63],
[66,58,70,72,64,59,0,56,65,69],
[68,67,69,75,71,70,75,0,67,63],
[63,56,73,74,66,63,66,64,0,68],
[66,63,74,69,70,68,62,68,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,64,81,72,84,61,67,74,79],
[79,0,63,71,79,76,56,71,77,70],
[67,68,0,66,69,65,68,74,64,72],
[50,60,65,0,61,75,61,58,68,78],
[59,52,62,70,0,74,57,66,66,65],
[47,55,66,56,57,0,54,61,57,71],
[70,75,63,70,74,77,0,64,70,77],
[64,60,57,73,65,70,67,0,77,77],
[57,54,67,63,65,74,61,54,0,71],
[52,61,59,53,66,60,54,54,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,66,78,69,76,82,77,70,54],
[74,0,91,72,62,67,81,69,85,79],
[65,40,0,59,70,52,74,70,66,73],
[53,59,72,0,78,61,63,64,68,49],
[62,69,61,53,0,64,66,66,65,66],
[55,64,79,70,67,0,80,68,67,73],
[49,50,57,68,65,51,0,60,55,42],
[54,62,61,67,65,63,71,0,72,55],
[61,46,65,63,66,64,76,59,0,58],
[77,52,58,82,65,58,89,76,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,64,60,56,78,74,74,37,75],
[82,0,72,60,76,89,80,78,61,82],
[67,59,0,62,71,74,67,70,49,77],
[71,71,69,0,53,80,74,83,55,85],
[75,55,60,78,0,81,61,72,67,69],
[53,42,57,51,50,0,55,50,42,64],
[57,51,64,57,70,76,0,59,55,71],
[57,53,61,48,59,81,72,0,62,73],
[94,70,82,76,64,89,76,69,0,69],
[56,49,54,46,62,67,60,58,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,65,54,87,57,70,62,80,66],
[54,0,54,57,62,58,58,61,73,64],
[66,77,0,67,88,69,69,73,74,63],
[77,74,64,0,89,69,66,67,73,60],
[44,69,43,42,0,53,53,55,72,57],
[74,73,62,62,78,0,76,73,75,60],
[61,73,62,65,78,55,0,63,72,66],
[69,70,58,64,76,58,68,0,69,63],
[51,58,57,58,59,56,59,62,0,59],
[65,67,68,71,74,71,65,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,54,65,53,48,59,55,52,53],
[76,0,67,72,60,75,68,76,61,59],
[77,64,0,64,61,71,81,68,67,56],
[66,59,67,0,66,68,61,73,59,64],
[78,71,70,65,0,78,79,76,70,66],
[83,56,60,63,53,0,73,72,63,70],
[72,63,50,70,52,58,0,62,54,62],
[76,55,63,58,55,59,69,0,53,62],
[79,70,64,72,61,68,77,78,0,67],
[78,72,75,67,65,61,69,69,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,83,60,59,83,59,58,91,72],
[62,0,64,54,62,71,54,70,70,62],
[48,67,0,67,66,65,50,65,83,55],
[71,77,64,0,65,81,56,57,72,79],
[72,69,65,66,0,73,75,74,99,72],
[48,60,66,50,58,0,50,42,66,41],
[72,77,81,75,56,81,0,74,107,71],
[73,61,66,74,57,89,57,0,97,72],
[40,61,48,59,32,65,24,34,0,32],
[59,69,76,52,59,90,60,59,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,57,58,70,67,69,55,78,63],
[69,0,66,56,61,63,60,73,84,64],
[74,65,0,63,74,63,70,71,71,66],
[73,75,68,0,68,64,79,64,86,61],
[61,70,57,63,0,69,78,63,84,62],
[64,68,68,67,62,0,68,62,82,56],
[62,71,61,52,53,63,0,61,76,68],
[76,58,60,67,68,69,70,0,66,78],
[53,47,60,45,47,49,55,65,0,56],
[68,67,65,70,69,75,63,53,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,73,66,62,71,74,63,80,80],
[48,0,45,59,46,49,47,56,59,54],
[58,86,0,54,66,51,60,45,65,56],
[65,72,77,0,68,69,78,69,73,59],
[69,85,65,63,0,76,69,68,77,92],
[60,82,80,62,55,0,73,62,61,52],
[57,84,71,53,62,58,0,66,67,56],
[68,75,86,62,63,69,65,0,84,70],
[51,72,66,58,54,70,64,47,0,49],
[51,77,75,72,39,79,75,61,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,77,80,66,66,81,66,82,82],
[67,0,63,67,61,59,63,73,89,70],
[54,68,0,76,60,52,72,68,70,67],
[51,64,55,0,54,64,76,62,58,73],
[65,70,71,77,0,62,80,66,84,71],
[65,72,79,67,69,0,71,66,72,86],
[50,68,59,55,51,60,0,50,76,63],
[65,58,63,69,65,65,81,0,73,80],
[49,42,61,73,47,59,55,58,0,54],
[49,61,64,58,60,45,68,51,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,79,52,73,53,97,62,80,51],
[59,0,83,69,67,58,75,60,74,43],
[52,48,0,35,48,35,68,55,62,48],
[79,62,96,0,78,94,70,87,79,70],
[58,64,83,53,0,66,74,52,65,50],
[78,73,96,37,65,0,63,44,69,55],
[34,56,63,61,57,68,0,61,49,48],
[69,71,76,44,79,87,70,0,71,86],
[51,57,69,52,66,62,82,60,0,49],
[80,88,83,61,81,76,83,45,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,64,62,59,55,72,49,69,67],
[69,0,64,77,65,60,78,58,58,61],
[67,67,0,68,58,60,71,55,62,69],
[69,54,63,0,67,64,80,54,73,67],
[72,66,73,64,0,66,57,66,72,63],
[76,71,71,67,65,0,80,58,80,78],
[59,53,60,51,74,51,0,52,70,53],
[82,73,76,77,65,73,79,0,75,67],
[62,73,69,58,59,51,61,56,0,66],
[64,70,62,64,68,53,78,64,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,68,72,88,65,70,58,60,74],
[56,0,50,65,79,56,43,53,52,58],
[63,81,0,86,80,62,72,72,66,82],
[59,66,45,0,63,65,56,65,57,48],
[43,52,51,68,0,65,44,40,49,57],
[66,75,69,66,66,0,51,54,60,69],
[61,88,59,75,87,80,0,72,69,72],
[73,78,59,66,91,77,59,0,84,73],
[71,79,65,74,82,71,62,47,0,64],
[57,73,49,83,74,62,59,58,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,61,67,67,57,61,62,59,64],
[61,0,65,62,65,58,53,59,57,57],
[70,66,0,63,63,61,63,56,61,69],
[64,69,68,0,66,66,60,62,67,63],
[64,66,68,65,0,51,56,61,65,66],
[74,73,70,65,80,0,75,70,78,73],
[70,78,68,71,75,56,0,72,68,70],
[69,72,75,69,70,61,59,0,67,70],
[72,74,70,64,66,53,63,64,0,67],
[67,74,62,68,65,58,61,61,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,69,72,81,55,84,70,63,61],
[75,0,60,82,84,78,77,85,78,64],
[62,71,0,79,78,67,86,83,74,59],
[59,49,52,0,70,57,67,68,63,61],
[50,47,53,61,0,47,50,67,50,48],
[76,53,64,74,84,0,80,84,85,67],
[47,54,45,64,81,51,0,85,59,54],
[61,46,48,63,64,47,46,0,55,46],
[68,53,57,68,81,46,72,76,0,49],
[70,67,72,70,83,64,77,85,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,62,60,71,65,47,68,66],
[66,0,66,67,64,68,69,66,73,74],
[66,65,0,55,68,73,59,59,65,65],
[69,64,76,0,62,85,78,76,89,79],
[71,67,63,69,0,60,64,63,73,60],
[60,63,58,46,71,0,58,60,65,66],
[66,62,72,53,67,73,0,69,78,70],
[84,65,72,55,68,71,62,0,71,70],
[63,58,66,42,58,66,53,60,0,68],
[65,57,66,52,71,65,61,61,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,58,63,57,62,66,47,65,63],
[70,0,56,67,60,69,62,59,62,70],
[73,75,0,77,72,75,65,68,83,86],
[68,64,54,0,58,70,64,53,64,66],
[74,71,59,73,0,76,65,62,70,73],
[69,62,56,61,55,0,54,64,61,60],
[65,69,66,67,66,77,0,58,67,78],
[84,72,63,78,69,67,73,0,66,78],
[66,69,48,67,61,70,64,65,0,71],
[68,61,45,65,58,71,53,53,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,64,66,68,63,72,71,60,73],
[66,0,71,64,66,72,73,64,66,71],
[67,60,0,63,62,65,71,58,58,70],
[65,67,68,0,68,64,81,57,64,66],
[63,65,69,63,0,65,74,66,62,68],
[68,59,66,67,66,0,71,62,56,66],
[59,58,60,50,57,60,0,55,56,57],
[60,67,73,74,65,69,76,0,68,73],
[71,65,73,67,69,75,75,63,0,68],
[58,60,61,65,63,65,74,58,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,69,73,68,77,72,74,59,53],
[62,0,59,67,57,63,60,68,57,50],
[62,72,0,69,62,72,69,71,60,61],
[58,64,62,0,52,59,60,57,51,46],
[63,74,69,79,0,75,75,66,69,59],
[54,68,59,72,56,0,63,62,51,52],
[59,71,62,71,56,68,0,59,67,54],
[57,63,60,74,65,69,72,0,52,45],
[72,74,71,80,62,80,64,79,0,70],
[78,81,70,85,72,79,77,86,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,61,61,63,65,64,61,59,62],
[62,0,53,57,47,46,58,52,58,48],
[70,78,0,66,55,62,78,59,58,73],
[70,74,65,0,63,63,69,74,61,63],
[68,84,76,68,0,77,69,64,67,68],
[66,85,69,68,54,0,75,64,64,71],
[67,73,53,62,62,56,0,59,54,63],
[70,79,72,57,67,67,72,0,67,65],
[72,73,73,70,64,67,77,64,0,64],
[69,83,58,68,63,60,68,66,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,51,59,56,55,60,67,72,63],
[69,0,78,56,70,62,65,59,76,60],
[80,53,0,69,58,72,64,75,90,86],
[72,75,62,0,71,74,66,81,84,83],
[75,61,73,60,0,65,65,61,85,66],
[76,69,59,57,66,0,68,82,89,63],
[71,66,67,65,66,63,0,79,95,91],
[64,72,56,50,70,49,52,0,83,63],
[59,55,41,47,46,42,36,48,0,63],
[68,71,45,48,65,68,40,68,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,71,71,74,69,64,68,64,77],
[65,0,67,63,65,66,70,62,68,63],
[60,64,0,60,64,66,57,66,57,62],
[60,68,71,0,68,70,63,66,68,64],
[57,66,67,63,0,68,73,67,65,68],
[62,65,65,61,63,0,48,55,57,62],
[67,61,74,68,58,83,0,66,71,71],
[63,69,65,65,64,76,65,0,66,66],
[67,63,74,63,66,74,60,65,0,79],
[54,68,69,67,63,69,60,65,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,48,41,55,53,56,63,53],
[72,0,74,61,58,65,74,52,78,70],
[66,57,0,54,48,58,70,58,70,63],
[83,70,77,0,64,71,78,68,82,77],
[90,73,83,67,0,65,69,63,86,70],
[76,66,73,60,66,0,64,64,79,70],
[78,57,61,53,62,67,0,61,77,72],
[75,79,73,63,68,67,70,0,78,73],
[68,53,61,49,45,52,54,53,0,53],
[78,61,68,54,61,61,59,58,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,64,69,71,71,82,73,75],
[62,0,60,73,68,70,70,71,68,71],
[66,71,0,63,68,63,75,78,74,74],
[67,58,68,0,66,76,69,76,66,76],
[62,63,63,65,0,67,68,74,63,63],
[60,61,68,55,64,0,66,79,65,76],
[60,61,56,62,63,65,0,65,54,67],
[49,60,53,55,57,52,66,0,61,66],
[58,63,57,65,68,66,77,70,0,68],
[56,60,57,55,68,55,64,65,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,63,89,68,71,81,98,89,81],
[86,0,75,77,49,79,75,92,96,100],
[68,56,0,73,62,75,74,91,94,72],
[42,54,58,0,62,60,54,83,67,71],
[63,82,69,69,0,66,81,98,89,93],
[60,52,56,71,65,0,61,93,65,75],
[50,56,57,77,50,70,0,84,58,70],
[33,39,40,48,33,38,47,0,57,64],
[42,35,37,64,42,66,73,74,0,70],
[50,31,59,60,38,56,61,67,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,85,71,102,89,102,102,86,73],
[84,0,53,68,100,73,100,87,84,102],
[46,78,0,30,76,60,92,89,60,63],
[60,63,101,0,74,90,90,90,71,74],
[29,31,55,57,0,44,59,73,73,45],
[42,58,71,41,87,0,89,60,84,58],
[29,31,39,41,72,42,0,56,43,58],
[29,44,42,41,58,71,75,0,70,29],
[45,47,71,60,58,47,88,61,0,58],
[58,29,68,57,86,73,73,102,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,88,87,69,81,80,75,68,87],
[67,0,75,82,76,59,60,68,74,81],
[43,56,0,62,44,53,36,68,56,74],
[44,49,69,0,57,41,62,76,57,82],
[62,55,87,74,0,65,54,68,74,93],
[50,72,78,90,66,0,64,77,71,76],
[51,71,95,69,77,67,0,86,69,83],
[56,63,63,55,63,54,45,0,62,56],
[63,57,75,74,57,60,62,69,0,81],
[44,50,57,49,38,55,48,75,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,72,64,66,66,70,77,69,71],
[70,0,72,68,61,73,71,74,70,69],
[59,59,0,70,57,59,55,66,69,69],
[67,63,61,0,56,64,68,68,70,62],
[65,70,74,75,0,72,70,73,66,69],
[65,58,72,67,59,0,68,67,66,61],
[61,60,76,63,61,63,0,66,70,68],
[54,57,65,63,58,64,65,0,66,70],
[62,61,62,61,65,65,61,65,0,69],
[60,62,62,69,62,70,63,61,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,82,53,71,69,56,68,52,62],
[58,0,71,59,59,58,63,54,52,52],
[49,60,0,52,65,53,61,57,39,47],
[78,72,79,0,75,62,69,67,69,67],
[60,72,66,56,0,58,62,63,51,71],
[62,73,78,69,73,0,73,77,46,70],
[75,68,70,62,69,58,0,62,52,66],
[63,77,74,64,68,54,69,0,59,67],
[79,79,92,62,80,85,79,72,0,84],
[69,79,84,64,60,61,65,64,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,72,64,73,67,70,60,62],
[64,0,64,66,70,64,65,65,62,67],
[62,67,0,65,56,72,61,66,59,59],
[59,65,66,0,66,64,66,76,64,69],
[67,61,75,65,0,73,57,64,71,67],
[58,67,59,67,58,0,56,65,62,56],
[64,66,70,65,74,75,0,68,64,66],
[61,66,65,55,67,66,63,0,59,61],
[71,69,72,67,60,69,67,72,0,71],
[69,64,72,62,64,75,65,70,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,63,65,79,80,60,63,74,69],
[58,0,48,50,50,60,53,38,61,48],
[68,83,0,66,65,76,62,69,70,62],
[66,81,65,0,78,88,63,55,86,57],
[52,81,66,53,0,79,69,53,74,65],
[51,71,55,43,52,0,59,45,56,69],
[71,78,69,68,62,72,0,51,72,59],
[68,93,62,76,78,86,80,0,88,69],
[57,70,61,45,57,75,59,43,0,55],
[62,83,69,74,66,62,72,62,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,64,73,64,64,58,63,61,66],
[65,0,63,77,62,73,54,66,55,57],
[67,68,0,74,68,67,57,69,62,66],
[58,54,57,0,62,62,53,66,56,60],
[67,69,63,69,0,65,55,65,72,68],
[67,58,64,69,66,0,62,64,63,56],
[73,77,74,78,76,69,0,70,73,65],
[68,65,62,65,66,67,61,0,60,60],
[70,76,69,75,59,68,58,71,0,73],
[65,74,65,71,63,75,66,71,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,60,70,52,66,59,59,52,58],
[73,0,69,86,67,71,72,79,58,71],
[71,62,0,81,72,67,69,67,61,67],
[61,45,50,0,56,76,49,66,51,56],
[79,64,59,75,0,62,72,69,68,66],
[65,60,64,55,69,0,67,63,64,62],
[72,59,62,82,59,64,0,73,45,56],
[72,52,64,65,62,68,58,0,53,63],
[79,73,70,80,63,67,86,78,0,67],
[73,60,64,75,65,69,75,68,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,66,64,58,61,64,66,67],
[65,0,63,79,65,64,59,65,73,71],
[68,68,0,71,62,69,68,66,74,72],
[65,52,60,0,57,66,59,58,62,67],
[67,66,69,74,0,74,65,64,72,75],
[73,67,62,65,57,0,60,53,70,72],
[70,72,63,72,66,71,0,63,75,76],
[67,66,65,73,67,78,68,0,78,78],
[65,58,57,69,59,61,56,53,0,61],
[64,60,59,64,56,59,55,53,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,60,68,59,66,67,62,60,61],
[70,0,61,74,65,71,67,68,64,65],
[71,70,0,65,58,73,63,68,64,63],
[63,57,66,0,58,66,66,70,50,60],
[72,66,73,73,0,74,63,74,65,74],
[65,60,58,65,57,0,67,66,61,64],
[64,64,68,65,68,64,0,64,55,64],
[69,63,63,61,57,65,67,0,59,63],
[71,67,67,81,66,70,76,72,0,64],
[70,66,68,71,57,67,67,68,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,55,53,63,55,58,66,60,74],
[60,0,57,55,47,58,59,66,48,57],
[76,74,0,59,72,75,69,73,68,83],
[78,76,72,0,62,59,55,70,63,72],
[68,84,59,69,0,80,69,75,64,74],
[76,73,56,72,51,0,63,68,61,80],
[73,72,62,76,62,68,0,64,63,77],
[65,65,58,61,56,63,67,0,67,78],
[71,83,63,68,67,70,68,64,0,69],
[57,74,48,59,57,51,54,53,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,59,68,52,76,69,61,59],
[74,0,75,71,78,58,83,77,67,75],
[69,56,0,64,76,65,75,72,60,68],
[72,60,67,0,68,64,75,76,61,73],
[63,53,55,63,0,58,65,64,53,64],
[79,73,66,67,73,0,84,66,62,69],
[55,48,56,56,66,47,0,57,55,51],
[62,54,59,55,67,65,74,0,55,59],
[70,64,71,70,78,69,76,76,0,71],
[72,56,63,58,67,62,80,72,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,81,82,52,81,91,50,77,59],
[31,0,49,64,42,75,77,66,67,59],
[50,82,0,72,52,67,81,66,59,52],
[49,67,59,0,78,75,75,82,53,53],
[79,89,79,53,0,81,105,56,58,66],
[50,56,64,56,50,0,81,63,67,49],
[40,54,50,56,26,50,0,48,52,41],
[81,65,65,49,75,68,83,0,60,42],
[54,64,72,78,73,64,79,71,0,62],
[72,72,79,78,65,82,90,89,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,80,53,73,66,68,63,60,66],
[60,0,65,57,65,61,60,64,56,59],
[51,66,0,52,63,57,60,65,66,61],
[78,74,79,0,72,72,76,69,63,71],
[58,66,68,59,0,61,60,62,59,69],
[65,70,74,59,70,0,66,69,59,61],
[63,71,71,55,71,65,0,66,65,69],
[68,67,66,62,69,62,65,0,59,66],
[71,75,65,68,72,72,66,72,0,74],
[65,72,70,60,62,70,62,65,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,50,60,65,75,70,63,80,68],
[64,0,66,63,72,64,70,57,66,66],
[81,65,0,66,74,79,72,69,81,70],
[71,68,65,0,69,67,64,53,63,67],
[66,59,57,62,0,73,69,70,70,62],
[56,67,52,64,58,0,57,58,64,64],
[61,61,59,67,62,74,0,63,69,66],
[68,74,62,78,61,73,68,0,73,70],
[51,65,50,68,61,67,62,58,0,59],
[63,65,61,64,69,67,65,61,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,64,65,61,59,59,63,71,52],
[63,0,72,70,71,77,65,75,66,68],
[67,59,0,59,55,53,63,55,62,65],
[66,61,72,0,64,59,79,61,67,59],
[70,60,76,67,0,55,67,64,63,69],
[72,54,78,72,76,0,77,71,64,60],
[72,66,68,52,64,54,0,62,65,59],
[68,56,76,70,67,60,69,0,57,54],
[60,65,69,64,68,67,66,74,0,60],
[79,63,66,72,62,71,72,77,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,53,54,59,54,70,50,45,60],
[74,0,73,72,77,72,68,62,71,69],
[78,58,0,62,75,73,78,54,66,78],
[77,59,69,0,72,75,72,62,58,59],
[72,54,56,59,0,64,66,59,58,68],
[77,59,58,56,67,0,70,52,66,71],
[61,63,53,59,65,61,0,54,62,60],
[81,69,77,69,72,79,77,0,59,75],
[86,60,65,73,73,65,69,72,0,73],
[71,62,53,72,63,60,71,56,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,74,75,67,64,61,54,70,56],
[59,0,62,75,61,59,65,59,68,51],
[57,69,0,70,60,59,53,54,59,55],
[56,56,61,0,58,53,56,55,59,52],
[64,70,71,73,0,60,67,59,69,56],
[67,72,72,78,71,0,62,68,64,61],
[70,66,78,75,64,69,0,62,72,59],
[77,72,77,76,72,63,69,0,73,69],
[61,63,72,72,62,67,59,58,0,55],
[75,80,76,79,75,70,72,62,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,71,59,63,69,64,66,65,68],
[63,0,68,70,80,67,66,64,58,74],
[60,63,0,59,58,59,63,64,61,59],
[72,61,72,0,75,67,59,59,57,70],
[68,51,73,56,0,72,58,63,56,64],
[62,64,72,64,59,0,61,55,57,62],
[67,65,68,72,73,70,0,65,48,72],
[65,67,67,72,68,76,66,0,67,76],
[66,73,70,74,75,74,83,64,0,82],
[63,57,72,61,67,69,59,55,49,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,45,45,89,89,89,131,45,131],
[44,0,44,44,89,44,89,86,89,44],
[86,87,0,89,89,89,89,131,45,86],
[86,87,42,0,89,86,89,86,45,86],
[42,42,42,42,0,86,0,86,42,86],
[42,87,42,45,45,0,45,131,45,42],
[42,42,42,42,131,86,0,86,87,86],
[0,45,0,45,45,0,45,0,45,0],
[86,42,86,86,89,86,44,86,0,86],
[0,87,45,45,45,89,45,131,45,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,78,70,69,65,71,64,67,69],
[58,0,69,58,61,63,69,61,62,56],
[53,62,0,62,49,61,52,59,54,61],
[61,73,69,0,68,67,68,63,63,64],
[62,70,82,63,0,70,67,63,55,70],
[66,68,70,64,61,0,62,62,61,69],
[60,62,79,63,64,69,0,61,62,69],
[67,70,72,68,68,69,70,0,63,72],
[64,69,77,68,76,70,69,68,0,71],
[62,75,70,67,61,62,62,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,70,58,63,67,65,59,67],
[66,0,66,80,68,68,73,68,62,61],
[66,65,0,74,68,68,67,74,62,62],
[61,51,57,0,54,55,56,58,47,48],
[73,63,63,77,0,69,71,67,63,67],
[68,63,63,76,62,0,70,73,60,64],
[64,58,64,75,60,61,0,69,52,58],
[66,63,57,73,64,58,62,0,55,60],
[72,69,69,84,68,71,79,76,0,63],
[64,70,69,83,64,67,73,71,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,59,68,71,68,70,65,63,69],
[69,0,64,75,83,76,76,82,70,77],
[72,67,0,73,74,67,77,68,62,61],
[63,56,58,0,66,64,76,64,58,60],
[60,48,57,65,0,59,66,60,53,61],
[63,55,64,67,72,0,75,71,60,60],
[61,55,54,55,65,56,0,61,55,59],
[66,49,63,67,71,60,70,0,53,66],
[68,61,69,73,78,71,76,78,0,73],
[62,54,70,71,70,71,72,65,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,62,68,64,63,68,70,73,73],
[55,0,63,55,68,48,56,52,68,51],
[69,68,0,73,67,60,63,60,70,68],
[63,76,58,0,61,60,61,65,70,56],
[67,63,64,70,0,60,63,59,64,68],
[68,83,71,71,71,0,63,63,73,67],
[63,75,68,70,68,68,0,66,69,71],
[61,79,71,66,72,68,65,0,79,65],
[58,63,61,61,67,58,62,52,0,54],
[58,80,63,75,63,64,60,66,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,67,81,69,71,59,83,66,82],
[56,0,78,80,77,78,66,65,65,84],
[64,53,0,64,72,61,56,69,61,73],
[50,51,67,0,70,70,50,73,59,73],
[62,54,59,61,0,49,65,73,49,71],
[60,53,70,61,82,0,72,74,66,77],
[72,65,75,81,66,59,0,81,65,75],
[48,66,62,58,58,57,50,0,56,63],
[65,66,70,72,82,65,66,75,0,77],
[49,47,58,58,60,54,56,68,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,71,59,61,76,72,61,75,62],
[55,0,50,53,52,59,61,53,62,63],
[60,81,0,63,63,71,65,65,67,69],
[72,78,68,0,68,75,69,67,71,60],
[70,79,68,63,0,72,62,64,64,62],
[55,72,60,56,59,0,70,57,62,65],
[59,70,66,62,69,61,0,60,69,57],
[70,78,66,64,67,74,71,0,72,74],
[56,69,64,60,67,69,62,59,0,66],
[69,68,62,71,69,66,74,57,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,59,54,56,46,59,43,51,47],
[83,0,64,68,69,82,73,61,59,65],
[72,67,0,78,58,74,71,74,66,69],
[77,63,53,0,62,68,81,74,58,56],
[75,62,73,69,0,61,59,66,55,45],
[85,49,57,63,70,0,47,64,57,59],
[72,58,60,50,72,84,0,80,74,57],
[88,70,57,57,65,67,51,0,73,66],
[80,72,65,73,76,74,57,58,0,65],
[84,66,62,75,86,72,74,65,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,63,70,82,72,89,58,79,63],
[58,0,71,79,76,65,80,51,64,70],
[68,60,0,87,83,88,83,59,73,86],
[61,52,44,0,90,88,90,73,65,67],
[49,55,48,41,0,64,72,51,49,56],
[59,66,43,43,67,0,51,44,58,73],
[42,51,48,41,59,80,0,73,55,71],
[73,80,72,58,80,87,58,0,72,87],
[52,67,58,66,82,73,76,59,0,81],
[68,61,45,64,75,58,60,44,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,65,67,57,60,74,56,64,50],
[62,0,62,58,63,52,68,56,49,65],
[66,69,0,46,62,54,58,45,67,51],
[64,73,85,0,76,79,70,69,73,62],
[74,68,69,55,0,61,78,67,77,57],
[71,79,77,52,70,0,84,63,67,69],
[57,63,73,61,53,47,0,58,58,61],
[75,75,86,62,64,68,73,0,59,73],
[67,82,64,58,54,64,73,72,0,70],
[81,66,80,69,74,62,70,58,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,79,59,55,53,77,56,59,67],
[61,0,92,59,58,66,77,64,67,73],
[52,39,0,54,43,56,63,50,57,57],
[72,72,77,0,51,62,76,67,67,72],
[76,73,88,80,0,77,83,58,66,77],
[78,65,75,69,54,0,77,60,62,74],
[54,54,68,55,48,54,0,44,60,64],
[75,67,81,64,73,71,87,0,69,71],
[72,64,74,64,65,69,71,62,0,84],
[64,58,74,59,54,57,67,60,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,67,68,74,78,75,60,74,75],
[60,0,58,71,71,72,60,60,64,73],
[64,73,0,69,64,74,62,63,63,72],
[63,60,62,0,65,81,64,65,64,73],
[57,60,67,66,0,78,66,61,62,74],
[53,59,57,50,53,0,50,59,47,56],
[56,71,69,67,65,81,0,69,67,63],
[71,71,68,66,70,72,62,0,66,73],
[57,67,68,67,69,84,64,65,0,62],
[56,58,59,58,57,75,68,58,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,64,57,59,55,58,73,78,67],
[60,0,52,54,36,51,52,55,59,43],
[67,79,0,68,56,54,54,70,67,62],
[74,77,63,0,52,54,53,68,71,67],
[72,95,75,79,0,59,68,79,74,59],
[76,80,77,77,72,0,70,90,68,64],
[73,79,77,78,63,61,0,70,71,66],
[58,76,61,63,52,41,61,0,69,58],
[53,72,64,60,57,63,60,62,0,59],
[64,88,69,64,72,67,65,73,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,21,85,65,23,68,0,43,43],
[108,0,108,131,107,86,108,63,65,63],
[110,23,0,85,44,43,68,21,43,43],
[46,0,46,0,0,22,67,22,20,0],
[66,24,87,131,0,42,67,22,42,20],
[108,45,88,109,89,0,67,21,64,62],
[63,23,63,64,64,64,0,20,43,64],
[131,68,110,109,109,110,111,0,43,88],
[88,66,88,111,89,67,88,88,0,45],
[88,68,88,131,111,69,67,43,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,64,64,55,72,63,63,60,68],
[61,0,65,62,61,72,64,63,57,72],
[67,66,0,68,61,60,59,59,63,62],
[67,69,63,0,68,72,70,63,67,69],
[76,70,70,63,0,72,62,71,73,69],
[59,59,71,59,59,0,54,62,70,61],
[68,67,72,61,69,77,0,60,73,77],
[68,68,72,68,60,69,71,0,67,64],
[71,74,68,64,58,61,58,64,0,65],
[63,59,69,62,62,70,54,67,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,66,69,76,73,62,70,64,65],
[73,0,66,76,78,66,70,73,63,71],
[65,65,0,69,72,59,60,62,57,59],
[62,55,62,0,76,66,60,68,53,51],
[55,53,59,55,0,52,58,60,51,59],
[58,65,72,65,79,0,70,58,59,59],
[69,61,71,71,73,61,0,69,71,60],
[61,58,69,63,71,73,62,0,62,65],
[67,68,74,78,80,72,60,69,0,51],
[66,60,72,80,72,72,71,66,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,47,50,62,64,59,60,51,65,60],
[84,0,61,63,83,76,80,69,65,80],
[81,70,0,58,65,69,72,56,70,76],
[69,68,73,0,65,65,65,55,59,75],
[67,48,66,66,0,63,66,67,64,61],
[72,55,62,66,68,0,77,54,68,70],
[71,51,59,66,65,54,0,42,60,59],
[80,62,75,76,64,77,89,0,74,80],
[66,66,61,72,67,63,71,57,0,64],
[71,51,55,56,70,61,72,51,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,68,60,60,69,61,64,65,62],
[67,0,63,62,65,67,60,70,64,66],
[63,68,0,55,70,64,67,71,60,58],
[71,69,76,0,72,62,68,77,66,61],
[71,66,61,59,0,61,67,73,59,59],
[62,64,67,69,70,0,68,68,62,70],
[70,71,64,63,64,63,0,60,66,58],
[67,61,60,54,58,63,71,0,56,59],
[66,67,71,65,72,69,65,75,0,67],
[69,65,73,70,72,61,73,72,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,58,67,67,61,67,73,60],
[71,0,63,68,64,71,65,66,69,62],
[71,68,0,63,65,62,72,66,65,60],
[73,63,68,0,71,72,81,74,65,73],
[64,67,66,60,0,61,60,64,65,69],
[64,60,69,59,70,0,69,63,68,69],
[70,66,59,50,71,62,0,69,72,70],
[64,65,65,57,67,68,62,0,60,59],
[58,62,66,66,66,63,59,71,0,66],
[71,69,71,58,62,62,61,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,49,12,40,10,31,41,22,43],
[79,0,37,32,40,19,28,31,22,22],
[82,94,0,32,42,30,49,61,31,42],
[119,99,99,0,80,58,68,38,63,60],
[91,91,89,51,0,59,58,67,52,60],
[121,112,101,73,72,0,61,59,72,83],
[100,103,82,63,73,70,0,70,62,73],
[90,100,70,93,64,72,61,0,73,62],
[109,109,100,68,79,59,69,58,0,79],
[88,109,89,71,71,48,58,69,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,63,71,73,74,78,71,87,67],
[61,0,80,82,67,71,86,71,79,58],
[68,51,0,72,69,67,74,64,72,62],
[60,49,59,0,55,65,62,66,82,54],
[58,64,62,76,0,71,67,78,79,65],
[57,60,64,66,60,0,77,58,72,59],
[53,45,57,69,64,54,0,63,73,53],
[60,60,67,65,53,73,68,0,71,45],
[44,52,59,49,52,59,58,60,0,37],
[64,73,69,77,66,72,78,86,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,52,62,49,59,57,46,58,50],
[88,0,79,62,74,67,66,62,73,73],
[79,52,0,74,69,64,66,60,66,58],
[69,69,57,0,64,66,59,60,73,65],
[82,57,62,67,0,67,58,48,62,66],
[72,64,67,65,64,0,72,67,74,67],
[74,65,65,72,73,59,0,62,72,62],
[85,69,71,71,83,64,69,0,74,76],
[73,58,65,58,69,57,59,57,0,61],
[81,58,73,66,65,64,69,55,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,74,76,63,73,66,70,71,58],
[54,0,69,56,60,62,66,57,60,59],
[57,62,0,66,53,53,57,57,63,56],
[55,75,65,0,57,69,68,59,67,60],
[68,71,78,74,0,74,76,64,76,71],
[58,69,78,62,57,0,60,62,57,55],
[65,65,74,63,55,71,0,65,61,60],
[61,74,74,72,67,69,66,0,69,62],
[60,71,68,64,55,74,70,62,0,64],
[73,72,75,71,60,76,71,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,57,58,49,55,58,60,58,59],
[60,0,66,58,46,50,50,51,46,55],
[74,65,0,59,55,57,59,62,48,65],
[73,73,72,0,49,72,65,64,48,67],
[82,85,76,82,0,79,73,57,70,79],
[76,81,74,59,52,0,74,58,46,72],
[73,81,72,66,58,57,0,55,58,77],
[71,80,69,67,74,73,76,0,51,70],
[73,85,83,83,61,85,73,80,0,88],
[72,76,66,64,52,59,54,61,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,51,51,54,56,80,57,46,50],
[69,0,75,65,66,70,73,57,74,71],
[80,56,0,61,74,69,64,45,66,67],
[80,66,70,0,79,67,80,61,76,75],
[77,65,57,52,0,72,69,47,64,59],
[75,61,62,64,59,0,63,38,50,52],
[51,58,67,51,62,68,0,60,46,58],
[74,74,86,70,84,93,71,0,64,75],
[85,57,65,55,67,81,85,67,0,75],
[81,60,64,56,72,79,73,56,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,63,46,65,67,68,51,59,59],
[69,0,75,60,73,63,61,57,63,70],
[68,56,0,69,63,59,67,58,63,69],
[85,71,62,0,75,74,69,61,80,75],
[66,58,68,56,0,57,52,60,59,50],
[64,68,72,57,74,0,68,65,71,69],
[63,70,64,62,79,63,0,60,64,59],
[80,74,73,70,71,66,71,0,67,65],
[72,68,68,51,72,60,67,64,0,61],
[72,61,62,56,81,62,72,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,45,45,74,77,64,80,68,72],
[62,0,64,68,61,69,77,70,65,52],
[86,67,0,48,81,74,67,61,66,46],
[86,63,83,0,69,63,77,72,67,80],
[57,70,50,62,0,83,65,72,59,64],
[54,62,57,68,48,0,71,77,54,49],
[67,54,64,54,66,60,0,84,56,61],
[51,61,70,59,59,54,47,0,57,64],
[63,66,65,64,72,77,75,74,0,59],
[59,79,85,51,67,82,70,67,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,62,63,75,66,74,63,78,67],
[69,0,75,61,62,55,70,60,72,52],
[69,56,0,55,68,54,75,68,72,61],
[68,70,76,0,71,81,75,68,88,52],
[56,69,63,60,0,67,53,61,69,53],
[65,76,77,50,64,0,74,52,72,62],
[57,61,56,56,78,57,0,57,69,53],
[68,71,63,63,70,79,74,0,88,60],
[53,59,59,43,62,59,62,43,0,42],
[64,79,70,79,78,69,78,71,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,90,73,85,70,84,64,67,103],
[47,0,62,71,85,76,78,78,59,77],
[41,69,0,78,77,69,75,70,81,89],
[58,60,53,0,81,47,69,53,59,59],
[46,46,54,50,0,47,70,52,54,68],
[61,55,62,84,84,0,73,64,72,70],
[47,53,56,62,61,58,0,55,66,69],
[67,53,61,78,79,67,76,0,74,87],
[64,72,50,72,77,59,65,57,0,84],
[28,54,42,72,63,61,62,44,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,71,68,63,59,66,68,65,71],
[61,0,71,60,61,61,62,58,69,56],
[60,60,0,59,64,65,61,67,66,60],
[63,71,72,0,65,65,62,60,65,63],
[68,70,67,66,0,67,68,61,67,66],
[72,70,66,66,64,0,69,67,73,65],
[65,69,70,69,63,62,0,65,68,71],
[63,73,64,71,70,64,66,0,74,65],
[66,62,65,66,64,58,63,57,0,61],
[60,75,71,68,65,66,60,66,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,66,116,81,66,60,81,82,67],
[52,0,42,85,51,30,51,59,73,67],
[65,89,0,109,80,35,65,72,73,77],
[15,46,22,0,37,22,22,30,58,60],
[50,80,51,94,0,41,73,56,64,74],
[65,101,96,109,90,0,89,87,105,83],
[71,80,66,109,58,42,0,73,82,68],
[50,72,59,101,75,44,58,0,73,76],
[49,58,58,73,67,26,49,58,0,55],
[64,64,54,71,57,48,63,55,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,65,74,70,71,62,68,61,67],
[68,0,63,64,67,66,67,69,62,62],
[66,68,0,80,74,70,70,67,59,68],
[57,67,51,0,56,62,56,53,54,50],
[61,64,57,75,0,70,67,66,62,56],
[60,65,61,69,61,0,68,70,62,63],
[69,64,61,75,64,63,0,62,68,66],
[63,62,64,78,65,61,69,0,63,65],
[70,69,72,77,69,69,63,68,0,70],
[64,69,63,81,75,68,65,66,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,55,73,62,65,57,75,66,67],
[67,0,67,79,63,65,55,76,64,63],
[76,64,0,69,61,72,64,81,54,59],
[58,52,62,0,59,57,52,66,45,58],
[69,68,70,72,0,67,56,76,58,74],
[66,66,59,74,64,0,60,68,51,60],
[74,76,67,79,75,71,0,78,61,73],
[56,55,50,65,55,63,53,0,57,59],
[65,67,77,86,73,80,70,74,0,74],
[64,68,72,73,57,71,58,72,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,77,75,62,60,54,62,65,69],
[59,0,74,72,68,62,49,53,65,75],
[54,57,0,70,55,53,52,51,50,72],
[56,59,61,0,45,53,53,59,56,70],
[69,63,76,86,0,55,57,63,55,76],
[71,69,78,78,76,0,61,62,69,81],
[77,82,79,78,74,70,0,74,63,89],
[69,78,80,72,68,69,57,0,65,67],
[66,66,81,75,76,62,68,66,0,80],
[62,56,59,61,55,50,42,64,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,67,79,64,71,72,70,70,66],
[58,0,54,60,65,61,58,57,63,62],
[64,77,0,78,77,76,72,79,72,68],
[52,71,53,0,56,68,60,66,69,58],
[67,66,54,75,0,68,68,69,76,65],
[60,70,55,63,63,0,65,65,70,54],
[59,73,59,71,63,66,0,76,67,60],
[61,74,52,65,62,66,55,0,61,61],
[61,68,59,62,55,61,64,70,0,69],
[65,69,63,73,66,77,71,70,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,62,59,69,73,76,76,69,64],
[58,0,69,61,69,77,71,76,77,66],
[69,62,0,61,62,69,76,71,70,74],
[72,70,70,0,65,81,76,73,81,67],
[62,62,69,66,0,76,67,60,72,68],
[58,54,62,50,55,0,60,62,63,60],
[55,60,55,55,64,71,0,67,62,53],
[55,55,60,58,71,69,64,0,68,65],
[62,54,61,50,59,68,69,63,0,54],
[67,65,57,64,63,71,78,66,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,60,58,75,49,66,64,67,75],
[63,0,62,57,66,54,53,54,66,67],
[71,69,0,60,77,55,58,64,73,76],
[73,74,71,0,74,64,69,61,72,80],
[56,65,54,57,0,46,52,54,69,68],
[82,77,76,67,85,0,65,75,73,83],
[65,78,73,62,79,66,0,76,71,84],
[67,77,67,70,77,56,55,0,73,72],
[64,65,58,59,62,58,60,58,0,65],
[56,64,55,51,63,48,47,59,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,72,63,72,58,66,61,79,64],
[66,0,66,61,78,69,48,57,66,74],
[59,65,0,67,66,70,63,72,74,84],
[68,70,64,0,68,73,76,68,73,75],
[59,53,65,63,0,61,55,59,64,55],
[73,62,61,58,70,0,57,55,76,56],
[65,83,68,55,76,74,0,76,79,75],
[70,74,59,63,72,76,55,0,72,69],
[52,65,57,58,67,55,52,59,0,62],
[67,57,47,56,76,75,56,62,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,72,61,68,65,77,66,79,66],
[51,0,66,61,65,52,78,56,61,68],
[59,65,0,63,60,60,65,62,71,57],
[70,70,68,0,71,70,78,57,77,73],
[63,66,71,60,0,64,74,67,75,73],
[66,79,71,61,67,0,80,69,71,69],
[54,53,66,53,57,51,0,51,70,56],
[65,75,69,74,64,62,80,0,71,65],
[52,70,60,54,56,60,61,60,0,62],
[65,63,74,58,58,62,75,66,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,80,79,66,65,64,80,73,74],
[54,0,77,62,62,61,62,65,62,65],
[51,54,0,56,56,61,56,66,52,56],
[52,69,75,0,53,57,66,65,60,55],
[65,69,75,78,0,74,78,79,68,72],
[66,70,70,74,57,0,56,67,55,65],
[67,69,75,65,53,75,0,71,62,59],
[51,66,65,66,52,64,60,0,57,61],
[58,69,79,71,63,76,69,74,0,64],
[57,66,75,76,59,66,72,70,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,74,64,84,71,74,67,69,64],
[71,0,69,70,70,68,74,52,73,71],
[57,62,0,47,58,59,64,63,64,63],
[67,61,84,0,73,72,68,65,72,81],
[47,61,73,58,0,56,71,66,73,61],
[60,63,72,59,75,0,65,47,76,64],
[57,57,67,63,60,66,0,55,69,63],
[64,79,68,66,65,84,76,0,74,64],
[62,58,67,59,58,55,62,57,0,73],
[67,60,68,50,70,67,68,67,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,62,60,69,69,64,73,69,65],
[78,0,71,76,72,64,65,76,66,70],
[69,60,0,57,65,65,67,68,64,68],
[71,55,74,0,69,77,66,69,79,74],
[62,59,66,62,0,66,70,63,66,67],
[62,67,66,54,65,0,64,78,70,66],
[67,66,64,65,61,67,0,68,72,63],
[58,55,63,62,68,53,63,0,66,60],
[62,65,67,52,65,61,59,65,0,59],
[66,61,63,57,64,65,68,71,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,55,71,70,69,57,73,66,63],
[75,0,66,71,70,73,71,71,71,61],
[76,65,0,69,67,66,64,75,73,66],
[60,60,62,0,74,65,69,67,70,63],
[61,61,64,57,0,70,66,66,72,58],
[62,58,65,66,61,0,67,55,63,59],
[74,60,67,62,65,64,0,63,67,57],
[58,60,56,64,65,76,68,0,70,60],
[65,60,58,61,59,68,64,61,0,58],
[68,70,65,68,73,72,74,71,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,75,75,64,62,69,77,66,66],
[59,0,68,67,64,61,59,59,53,52],
[56,63,0,61,68,62,71,66,63,59],
[56,64,70,0,59,65,67,72,61,71],
[67,67,63,72,0,71,70,77,63,55],
[69,70,69,66,60,0,56,73,58,49],
[62,72,60,64,61,75,0,73,66,59],
[54,72,65,59,54,58,58,0,63,58],
[65,78,68,70,68,73,65,68,0,45],
[65,79,72,60,76,82,72,73,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,70,69,65,62,62,68,62,55],
[63,0,64,66,57,58,64,63,64,59],
[61,67,0,71,59,68,62,60,61,65],
[62,65,60,0,46,60,71,61,66,48],
[66,74,72,85,0,70,76,74,59,66],
[69,73,63,71,61,0,66,69,69,61],
[69,67,69,60,55,65,0,65,77,58],
[63,68,71,70,57,62,66,0,64,68],
[69,67,70,65,72,62,54,67,0,61],
[76,72,66,83,65,70,73,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,73,74,72,76,78,63,79,73],
[64,0,73,79,75,76,81,74,74,61],
[58,58,0,64,65,73,72,58,64,55],
[57,52,67,0,72,83,67,63,73,61],
[59,56,66,59,0,70,78,58,63,66],
[55,55,58,48,61,0,63,59,63,61],
[53,50,59,64,53,68,0,58,59,54],
[68,57,73,68,73,72,73,0,71,61],
[52,57,67,58,68,68,72,60,0,63],
[58,70,76,70,65,70,77,70,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,69,65,71,65,59,50,60,61],
[64,0,72,63,64,76,59,44,71,71],
[62,59,0,73,71,65,51,51,55,56],
[66,68,58,0,71,69,53,64,69,63],
[60,67,60,60,0,73,59,63,66,66],
[66,55,66,62,58,0,68,57,56,72],
[72,72,80,78,72,63,0,68,60,79],
[81,87,80,67,68,74,63,0,60,82],
[71,60,76,62,65,75,71,71,0,73],
[70,60,75,68,65,59,52,49,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,62,88,51,75,39,80,71],
[66,0,82,73,92,56,90,66,71,82],
[64,49,0,57,72,51,68,46,71,72],
[69,58,74,0,76,46,76,53,70,76],
[43,39,59,55,0,43,60,39,47,72],
[80,75,80,85,88,0,87,52,84,85],
[56,41,63,55,71,44,0,47,63,75],
[92,65,85,78,92,79,84,0,92,85],
[51,60,60,61,84,47,68,39,0,64],
[60,49,59,55,59,46,56,46,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,57,55,71,65,64,65,69,68],
[64,0,64,61,65,62,71,62,66,59],
[74,67,0,68,70,64,71,74,68,63],
[76,70,63,0,71,65,68,73,75,67],
[60,66,61,60,0,67,78,74,74,68],
[66,69,67,66,64,0,70,67,68,58],
[67,60,60,63,53,61,0,64,59,61],
[66,69,57,58,57,64,67,0,63,63],
[62,65,63,56,57,63,72,68,0,59],
[63,72,68,64,63,73,70,68,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,83,64,60,67,69,67,73,85],
[46,0,67,62,47,70,65,75,51,77],
[48,64,0,73,41,71,76,53,63,71],
[67,69,58,0,71,76,70,75,65,86],
[71,84,90,60,0,90,88,95,85,98],
[64,61,60,55,41,0,79,63,71,86],
[62,66,55,61,43,52,0,61,63,76],
[64,56,78,56,36,68,70,0,73,78],
[58,80,68,66,46,60,68,58,0,72],
[46,54,60,45,33,45,55,53,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,69,61,56,60,57,57,56,62],
[67,0,60,62,60,61,56,56,63,53],
[62,71,0,53,60,63,54,57,54,55],
[70,69,78,0,58,65,60,64,62,64],
[75,71,71,73,0,66,69,62,65,65],
[71,70,68,66,65,0,61,57,58,68],
[74,75,77,71,62,70,0,70,65,70],
[74,75,74,67,69,74,61,0,70,64],
[75,68,77,69,66,73,66,61,0,62],
[69,78,76,67,66,63,61,67,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,69,61,67,78,76,72,74,72],
[59,0,65,47,53,66,59,61,68,71],
[62,66,0,57,56,72,55,65,58,66],
[70,84,74,0,75,84,75,72,56,77],
[64,78,75,56,0,78,71,78,61,85],
[53,65,59,47,53,0,61,62,42,73],
[55,72,76,56,60,70,0,62,61,79],
[59,70,66,59,53,69,69,0,48,75],
[57,63,73,75,70,89,70,83,0,84],
[59,60,65,54,46,58,52,56,47,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,62,72,73,67,75,69,70,67],
[55,0,60,64,68,59,60,57,64,62],
[69,71,0,69,67,63,71,59,69,64],
[59,67,62,0,64,59,56,61,64,57],
[58,63,64,67,0,62,68,67,66,63],
[64,72,68,72,69,0,72,73,71,69],
[56,71,60,75,63,59,0,63,68,54],
[62,74,72,70,64,58,68,0,71,61],
[61,67,62,67,65,60,63,60,0,52],
[64,69,67,74,68,62,77,70,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,65,54,65,64,59,67,61,64],
[64,0,59,60,67,68,61,61,71,57],
[66,72,0,60,62,68,67,63,68,64],
[77,71,71,0,68,68,68,69,70,63],
[66,64,69,63,0,73,62,65,62,66],
[67,63,63,63,58,0,62,68,69,67],
[72,70,64,63,69,69,0,61,72,66],
[64,70,68,62,66,63,70,0,63,65],
[70,60,63,61,69,62,59,68,0,67],
[67,74,67,68,65,64,65,66,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,63,77,68,81,73,72,76,66],
[65,0,63,67,64,70,70,71,73,69],
[68,68,0,69,71,74,76,66,80,63],
[54,64,62,0,69,64,71,64,76,59],
[63,67,60,62,0,69,73,62,68,59],
[50,61,57,67,62,0,69,70,71,61],
[58,61,55,60,58,62,0,68,63,55],
[59,60,65,67,69,61,63,0,70,61],
[55,58,51,55,63,60,68,61,0,60],
[65,62,68,72,72,70,76,70,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,62,61,64,56,69,59,53,59],
[74,0,57,62,66,59,71,63,65,54],
[69,74,0,85,79,69,79,68,62,66],
[70,69,46,0,74,63,65,60,67,71],
[67,65,52,57,0,61,61,60,56,56],
[75,72,62,68,70,0,71,67,65,60],
[62,60,52,66,70,60,0,60,55,44],
[72,68,63,71,71,64,71,0,60,63],
[78,66,69,64,75,66,76,71,0,70],
[72,77,65,60,75,71,87,68,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,68,67,58,66,73,69,73],
[64,0,66,72,66,70,70,75,57,72],
[60,65,0,63,77,64,73,69,59,66],
[63,59,68,0,64,67,73,72,60,71],
[64,65,54,67,0,65,80,69,53,71],
[73,61,67,64,66,0,76,68,64,72],
[65,61,58,58,51,55,0,60,57,64],
[58,56,62,59,62,63,71,0,70,65],
[62,74,72,71,78,67,74,61,0,74],
[58,59,65,60,60,59,67,66,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,73,66,67,69,72,64,68,71],
[66,0,71,67,56,62,63,64,67,68],
[58,60,0,70,58,53,62,58,67,67],
[65,64,61,0,65,67,72,61,71,61],
[64,75,73,66,0,64,72,66,70,67],
[62,69,78,64,67,0,68,67,73,61],
[59,68,69,59,59,63,0,62,60,54],
[67,67,73,70,65,64,69,0,74,72],
[63,64,64,60,61,58,71,57,0,58],
[60,63,64,70,64,70,77,59,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,65,61,64,74,71,59,64,69],
[72,0,71,64,72,73,74,65,70,71],
[66,60,0,68,69,68,68,57,68,72],
[70,67,63,0,65,71,64,67,68,71],
[67,59,62,66,0,74,69,54,61,64],
[57,58,63,60,57,0,61,54,60,65],
[60,57,63,67,62,70,0,55,64,63],
[72,66,74,64,77,77,76,0,71,77],
[67,61,63,63,70,71,67,60,0,64],
[62,60,59,60,67,66,68,54,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,58,64,73,67,70,69,63,67],
[62,0,68,70,73,66,50,57,66,63],
[73,63,0,68,70,71,68,71,67,63],
[67,61,63,0,65,64,60,71,62,67],
[58,58,61,66,0,62,54,53,73,76],
[64,65,60,67,69,0,62,69,64,68],
[61,81,63,71,77,69,0,67,63,73],
[62,74,60,60,78,62,64,0,58,70],
[68,65,64,69,58,67,68,73,0,57],
[64,68,68,64,55,63,58,61,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,61,63,64,59,62,66,66,62],
[73,0,62,65,70,65,64,70,69,61],
[70,69,0,79,80,66,72,74,64,69],
[68,66,52,0,74,67,59,73,66,63],
[67,61,51,57,0,63,59,65,62,56],
[72,66,65,64,68,0,59,75,64,57],
[69,67,59,72,72,72,0,73,69,64],
[65,61,57,58,66,56,58,0,62,55],
[65,62,67,65,69,67,62,69,0,65],
[69,70,62,68,75,74,67,76,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,65,64,70,57,72,57,93,60],
[54,0,68,53,55,61,44,54,54,54],
[66,63,0,52,58,60,44,52,76,65],
[67,78,79,0,63,66,63,58,63,57],
[61,76,73,68,0,74,62,64,74,65],
[74,70,71,65,57,0,62,62,71,51],
[59,87,87,68,69,69,0,74,87,49],
[74,77,79,73,67,69,57,0,94,71],
[38,77,55,68,57,60,44,37,0,44],
[71,77,66,74,66,80,82,60,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,63,73,64,76,73,68,67,62],
[66,0,66,64,59,66,77,70,65,68],
[68,65,0,57,60,66,71,60,72,68],
[58,67,74,0,66,70,80,65,72,69],
[67,72,71,65,0,61,78,73,79,60],
[55,65,65,61,70,0,73,56,63,69],
[58,54,60,51,53,58,0,60,62,65],
[63,61,71,66,58,75,71,0,75,70],
[64,66,59,59,52,68,69,56,0,59],
[69,63,63,62,71,62,66,61,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,56,76,86,55,84,75,76,114],
[57,0,48,58,58,38,29,67,65,95],
[75,83,0,65,76,54,92,84,56,85],
[55,73,66,0,47,72,65,84,74,85],
[45,73,55,84,0,72,64,74,73,84],
[76,93,77,59,59,0,66,94,84,67],
[47,102,39,66,67,65,0,84,55,75],
[56,64,47,47,57,37,47,0,55,67],
[55,66,75,57,58,47,76,76,0,85],
[17,36,46,46,47,64,56,64,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,54,53,56,52,59,54,50,49],
[66,0,53,51,51,53,67,43,53,47],
[77,78,0,61,62,66,67,66,61,54],
[78,80,70,0,70,75,75,70,64,61],
[75,80,69,61,0,71,73,63,69,60],
[79,78,65,56,60,0,63,62,63,66],
[72,64,64,56,58,68,0,57,69,64],
[77,88,65,61,68,69,74,0,61,54],
[81,78,70,67,62,68,62,70,0,69],
[82,84,77,70,71,65,67,77,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,65,60,55,61,57,64,63,61],
[66,0,65,69,69,62,59,66,77,64],
[66,66,0,64,64,63,63,67,65,59],
[71,62,67,0,58,67,63,73,69,62],
[76,62,67,73,0,68,69,67,58,62],
[70,69,68,64,63,0,59,67,71,60],
[74,72,68,68,62,72,0,73,67,67],
[67,65,64,58,64,64,58,0,62,66],
[68,54,66,62,73,60,64,69,0,55],
[70,67,72,69,69,71,64,65,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,67,72,75,66,72,65,67,70],
[55,0,69,60,71,59,56,65,61,55],
[64,62,0,56,76,59,74,66,55,55],
[59,71,75,0,75,74,71,63,67,67],
[56,60,55,56,0,61,54,56,56,61],
[65,72,72,57,70,0,72,58,62,64],
[59,75,57,60,77,59,0,62,69,64],
[66,66,65,68,75,73,69,0,59,66],
[64,70,76,64,75,69,62,72,0,71],
[61,76,76,64,70,67,67,65,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,75,67,70,65,72,79,68,66],
[64,0,63,66,57,67,65,68,74,49],
[56,68,0,66,69,56,69,71,66,58],
[64,65,65,0,70,72,66,75,64,58],
[61,74,62,61,0,63,73,66,68,60],
[66,64,75,59,68,0,62,72,63,57],
[59,66,62,65,58,69,0,60,61,53],
[52,63,60,56,65,59,71,0,63,59],
[63,57,65,67,63,68,70,68,0,49],
[65,82,73,73,71,74,78,72,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,63,66,73,68,72,67,76,67],
[53,0,63,66,65,58,73,51,61,68],
[68,68,0,73,75,65,73,63,74,68],
[65,65,58,0,68,65,64,49,68,77],
[58,66,56,63,0,67,70,49,70,64],
[63,73,66,66,64,0,80,62,70,81],
[59,58,58,67,61,51,0,53,60,63],
[64,80,68,82,82,69,78,0,85,76],
[55,70,57,63,61,61,71,46,0,65],
[64,63,63,54,67,50,68,55,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,64,59,85,79,67,39,70,58],
[78,0,59,63,78,69,64,56,70,49],
[67,72,0,65,77,87,64,67,63,62],
[72,68,66,0,80,88,59,54,75,66],
[46,53,54,51,0,71,48,57,49,46],
[52,62,44,43,60,0,45,36,44,33],
[64,67,67,72,83,86,0,72,72,69],
[92,75,64,77,74,95,59,0,71,68],
[61,61,68,56,82,87,59,60,0,72],
[73,82,69,65,85,98,62,63,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,71,73,77,78,73,81,59,75],
[64,0,79,78,69,64,53,84,73,68],
[60,52,0,79,69,69,58,78,64,75],
[58,53,52,0,63,69,51,70,57,57],
[54,62,62,68,0,58,63,76,59,72],
[53,67,62,62,73,0,64,78,70,64],
[58,78,73,80,68,67,0,89,84,82],
[50,47,53,61,55,53,42,0,50,59],
[72,58,67,74,72,61,47,81,0,73],
[56,63,56,74,59,67,49,72,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,60,82,60,66,71,63,54,64],
[56,0,60,72,52,70,63,67,52,66],
[71,71,0,63,58,80,67,53,57,49],
[49,59,68,0,50,61,54,49,47,58],
[71,79,73,81,0,76,69,83,60,67],
[65,61,51,70,55,0,67,69,55,59],
[60,68,64,77,62,64,0,71,51,61],
[68,64,78,82,48,62,60,0,50,62],
[77,79,74,84,71,76,80,81,0,64],
[67,65,82,73,64,72,70,69,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,57,66,66,59,67,71,67,77],
[49,0,53,57,58,46,55,76,56,55],
[74,78,0,69,62,61,58,86,72,70],
[65,74,62,0,67,66,61,86,66,68],
[65,73,69,64,0,55,68,71,63,74],
[72,85,70,65,76,0,70,83,75,80],
[64,76,73,70,63,61,0,82,72,79],
[60,55,45,45,60,48,49,0,47,60],
[64,75,59,65,68,56,59,84,0,77],
[54,76,61,63,57,51,52,71,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,88,76,76,87,67,79,74,62],
[73,0,81,83,78,79,58,79,71,81],
[43,50,0,63,52,67,49,64,47,58],
[55,48,68,0,47,74,48,60,42,51],
[55,53,79,84,0,71,64,65,59,66],
[44,52,64,57,60,0,55,59,55,54],
[64,73,82,83,67,76,0,79,63,69],
[52,52,67,71,66,72,52,0,64,46],
[57,60,84,89,72,76,68,67,0,65],
[69,50,73,80,65,77,62,85,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,50,64,57,58,67,64,72,69],
[72,0,58,65,68,60,54,58,79,74],
[81,73,0,65,67,66,69,62,80,78],
[67,66,66,0,57,62,65,67,81,74],
[74,63,64,74,0,68,55,66,82,81],
[73,71,65,69,63,0,56,68,76,75],
[64,77,62,66,76,75,0,66,76,76],
[67,73,69,64,65,63,65,0,77,79],
[59,52,51,50,49,55,55,54,0,58],
[62,57,53,57,50,56,55,52,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,68,73,60,60,71,60,59,65],
[57,0,71,67,63,59,65,58,64,61],
[63,60,0,75,62,64,59,56,67,63],
[58,64,56,0,61,59,64,54,59,50],
[71,68,69,70,0,61,72,65,67,66],
[71,72,67,72,70,0,65,70,68,72],
[60,66,72,67,59,66,0,60,56,65],
[71,73,75,77,66,61,71,0,71,74],
[72,67,64,72,64,63,75,60,0,65],
[66,70,68,81,65,59,66,57,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,69,72,63,57,65,58,65,65],
[63,0,72,67,66,56,63,58,45,69],
[62,59,0,69,69,61,69,62,63,71],
[59,64,62,0,76,60,71,55,58,69],
[68,65,62,55,0,65,67,61,48,57],
[74,75,70,71,66,0,75,58,70,70],
[66,68,62,60,64,56,0,61,53,66],
[73,73,69,76,70,73,70,0,64,76],
[66,86,68,73,83,61,78,67,0,80],
[66,62,60,62,74,61,65,55,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,64,64,65,66,64,75,65,68],
[75,0,55,68,78,72,60,61,69,74],
[67,76,0,78,79,85,69,73,64,67],
[67,63,53,0,77,79,69,62,68,68],
[66,53,52,54,0,69,63,63,66,68],
[65,59,46,52,62,0,57,54,56,63],
[67,71,62,62,68,74,0,77,67,78],
[56,70,58,69,68,77,54,0,57,66],
[66,62,67,63,65,75,64,74,0,72],
[63,57,64,63,63,68,53,65,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,61,75,61,71,64,55,64,65],
[75,0,67,77,66,68,65,62,75,71],
[70,64,0,85,61,79,72,63,61,63],
[56,54,46,0,46,60,54,45,61,58],
[70,65,70,85,0,77,75,61,79,69],
[60,63,52,71,54,0,60,59,61,59],
[67,66,59,77,56,71,0,61,62,72],
[76,69,68,86,70,72,70,0,65,75],
[67,56,70,70,52,70,69,66,0,67],
[66,60,68,73,62,72,59,56,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,68,66,61,73,67,66,61,65],
[58,0,61,66,60,66,73,61,60,63],
[63,70,0,71,62,57,70,64,66,65],
[65,65,60,0,64,51,71,61,64,60],
[70,71,69,67,0,72,66,63,62,67],
[58,65,74,80,59,0,71,69,66,61],
[64,58,61,60,65,60,0,66,60,62],
[65,70,67,70,68,62,65,0,75,66],
[70,71,65,67,69,65,71,56,0,63],
[66,68,66,71,64,70,69,65,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,61,64,71,63,77,45,50,63],
[74,0,58,56,84,56,63,45,49,64],
[70,73,0,68,67,81,74,47,55,70],
[67,75,63,0,62,71,76,60,41,66],
[60,47,64,69,0,61,59,56,60,61],
[68,75,50,60,70,0,55,70,56,74],
[54,68,57,55,72,76,0,55,51,83],
[86,86,84,71,75,61,76,0,56,80],
[81,82,76,90,71,75,80,75,0,65],
[68,67,61,65,70,57,48,51,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,50,56,48,57,53,54,69,50],
[55,0,53,51,63,68,54,58,57,57],
[81,78,0,56,52,68,69,63,64,62],
[75,80,75,0,48,65,73,83,68,81],
[83,68,79,83,0,94,62,76,69,62],
[74,63,63,66,37,0,73,67,73,77],
[78,77,62,58,69,58,0,53,85,67],
[77,73,68,48,55,64,78,0,69,68],
[62,74,67,63,62,58,46,62,0,61],
[81,74,69,50,69,54,64,63,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,89,66,77,66,74,82,54,69],
[64,0,81,65,76,70,80,71,51,67],
[42,50,0,51,68,55,64,62,47,52],
[65,66,80,0,84,82,84,81,69,65],
[54,55,63,47,0,58,62,65,45,52],
[65,61,76,49,73,0,69,62,57,55],
[57,51,67,47,69,62,0,60,51,59],
[49,60,69,50,66,69,71,0,47,56],
[77,80,84,62,86,74,80,84,0,85],
[62,64,79,66,79,76,72,75,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,61,68,70,61,58,71,66,59],
[56,0,67,67,73,62,58,68,56,66],
[70,64,0,63,70,56,52,65,53,53],
[63,64,68,0,63,57,58,71,61,59],
[61,58,61,68,0,63,55,69,59,60],
[70,69,75,74,68,0,70,68,62,66],
[73,73,79,73,76,61,0,75,69,64],
[60,63,66,60,62,63,56,0,59,59],
[65,75,78,70,72,69,62,72,0,62],
[72,65,78,72,71,65,67,72,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,73,56,74,76,54,74,74,73],
[73,0,54,75,35,74,52,52,55,54],
[58,77,0,76,37,56,52,55,37,54],
[75,56,55,0,56,92,53,72,56,90],
[57,96,94,75,0,56,73,54,58,94],
[55,57,75,39,75,0,75,73,57,75],
[77,79,79,78,58,56,0,95,96,95],
[57,79,76,59,77,58,36,0,75,76],
[57,76,94,75,73,74,35,56,0,75],
[58,77,77,41,37,56,36,55,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,61,58,55,55,82,75,61,72],
[51,0,50,39,38,71,71,77,61,57],
[70,81,0,70,68,62,101,90,65,60],
[73,92,61,0,64,79,86,84,78,58],
[76,93,63,67,0,92,79,83,76,59],
[76,60,69,52,39,0,89,60,55,63],
[49,60,30,45,52,42,0,69,35,30],
[56,54,41,47,48,71,62,0,52,36],
[70,70,66,53,55,76,96,79,0,70],
[59,74,71,73,72,68,101,95,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,84,79,77,76,79,70,64],
[61,0,74,77,72,80,63,72,66,64],
[61,57,0,73,71,70,55,63,59,57],
[47,54,58,0,72,65,58,66,61,64],
[52,59,60,59,0,67,51,61,59,62],
[54,51,61,66,64,0,65,63,58,54],
[55,68,76,73,80,66,0,64,57,67],
[52,59,68,65,70,68,67,0,54,59],
[61,65,72,70,72,73,74,77,0,66],
[67,67,74,67,69,77,64,72,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,87,84,70,64,95,90,73,58],
[65,0,74,67,64,49,70,90,77,65],
[44,57,0,63,57,55,72,84,63,49],
[47,64,68,0,55,55,70,80,57,53],
[61,67,74,76,0,73,87,94,59,66],
[67,82,76,76,58,0,86,87,72,67],
[36,61,59,61,44,45,0,83,50,46],
[41,41,47,51,37,44,48,0,35,33],
[58,54,68,74,72,59,81,96,0,54],
[73,66,82,78,65,64,85,98,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,79,64,77,87,66,81,67,81],
[74,0,80,75,77,97,52,81,66,71],
[52,51,0,43,84,77,54,89,50,81],
[67,56,88,0,97,91,53,90,69,86],
[54,54,47,34,0,70,31,59,45,70],
[44,34,54,40,61,0,39,47,61,60],
[65,79,77,78,100,92,0,78,92,77],
[50,50,42,41,72,84,53,0,51,71],
[64,65,81,62,86,70,39,80,0,77],
[50,60,50,45,61,71,54,60,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,58,57,61,62,73,58,59,60],
[77,0,67,75,69,65,81,64,68,67],
[73,64,0,64,63,70,78,68,72,74],
[74,56,67,0,62,65,68,59,69,63],
[70,62,68,69,0,59,77,57,65,65],
[69,66,61,66,72,0,74,61,61,67],
[58,50,53,63,54,57,0,53,58,58],
[73,67,63,72,74,70,78,0,70,64],
[72,63,59,62,66,70,73,61,0,64],
[71,64,57,68,66,64,73,67,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,55,69,67,69,54,61,60,58],
[55,0,55,59,58,57,55,57,51,58],
[76,76,0,72,69,72,64,62,64,57],
[62,72,59,0,68,62,56,63,59,55],
[64,73,62,63,0,69,62,69,66,59],
[62,74,59,69,62,0,57,66,55,53],
[77,76,67,75,69,74,0,66,61,58],
[70,74,69,68,62,65,65,0,64,56],
[71,80,67,72,65,76,70,67,0,67],
[73,73,74,76,72,78,73,75,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 131, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_10_131.csv", index=False, header=False)

import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,276,293,277,274,262,269,270,291,273],
[275,0,289,253,259,267,262,288,288,277],
[258,262,0,241,270,256,234,246,275,264],
[274,298,310,0,274,284,278,286,301,275],
[277,292,281,277,0,269,282,287,293,276],
[289,284,295,267,282,0,273,285,284,280],
[282,289,317,273,269,278,0,274,279,292],
[281,263,305,265,264,266,277,0,280,286],
[260,263,276,250,258,267,272,271,0,265],
[278,274,287,276,275,271,259,265,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,273,288,282,279,258,284,274,309],
[262,0,245,266,228,269,231,272,237,262],
[278,306,0,300,288,287,269,301,295,294],
[263,285,251,0,265,297,274,274,259,294],
[269,323,263,286,0,286,277,284,302,293],
[272,282,264,254,265,0,250,258,264,268],
[293,320,282,277,274,301,0,282,302,315],
[267,279,250,277,267,293,269,0,267,284],
[277,314,256,292,249,287,249,284,0,265],
[242,289,257,257,258,283,236,267,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,245,255,257,257,288,239,245,262],
[287,0,274,269,266,267,282,270,290,282],
[306,277,0,285,275,251,277,280,279,283],
[296,282,266,0,283,272,296,282,277,284],
[294,285,276,268,0,282,302,272,271,308],
[294,284,300,279,269,0,299,267,293,293],
[263,269,274,255,249,252,0,249,281,280],
[312,281,271,269,279,284,302,0,278,282],
[306,261,272,274,280,258,270,273,0,290],
[289,269,268,267,243,258,271,269,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,279,271,253,245,251,269,261,268],
[311,0,300,292,278,260,289,308,294,279],
[272,251,0,279,266,252,265,299,267,260],
[280,259,272,0,262,258,261,280,278,266],
[298,273,285,289,0,263,270,278,284,249],
[306,291,299,293,288,0,271,304,289,287],
[300,262,286,290,281,280,0,296,288,280],
[282,243,252,271,273,247,255,0,262,253],
[290,257,284,273,267,262,263,289,0,272],
[283,272,291,285,302,264,271,298,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,272,267,267,299,261,291,297,276],
[255,0,267,279,265,272,271,284,287,263],
[279,284,0,263,253,280,252,287,296,265],
[284,272,288,0,259,277,278,306,314,278],
[284,286,298,292,0,302,279,311,303,272],
[252,279,271,274,249,0,257,274,282,275],
[290,280,299,273,272,294,0,313,294,285],
[260,267,264,245,240,277,238,0,284,261],
[254,264,255,237,248,269,257,267,0,255],
[275,288,286,273,279,276,266,290,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,248,253,280,258,250,250,278,264],
[291,0,260,275,275,260,275,266,286,286],
[303,291,0,282,305,280,272,287,290,282],
[298,276,269,0,288,263,272,247,289,278],
[271,276,246,263,0,244,271,263,268,261],
[293,291,271,288,307,0,286,260,300,305],
[301,276,279,279,280,265,0,266,290,281],
[301,285,264,304,288,291,285,0,282,275],
[273,265,261,262,283,251,261,269,0,273],
[287,265,269,273,290,246,270,276,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,271,275,263,289,279,282,268,290],
[277,0,264,267,263,280,292,301,272,279],
[280,287,0,264,273,287,278,271,267,279],
[276,284,287,0,260,308,287,294,277,291],
[288,288,278,291,0,275,278,297,272,296],
[262,271,264,243,276,0,274,272,266,274],
[272,259,273,264,273,277,0,284,271,282],
[269,250,280,257,254,279,267,0,250,264],
[283,279,284,274,279,285,280,301,0,299],
[261,272,272,260,255,277,269,287,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,274,314,271,254,275,268,273,311],
[290,0,281,297,286,276,274,272,278,292],
[277,270,0,299,266,265,301,279,269,330],
[237,254,252,0,240,255,268,268,246,300],
[280,265,285,311,0,248,268,281,263,304],
[297,275,286,296,303,0,301,282,301,326],
[276,277,250,283,283,250,0,282,278,318],
[283,279,272,283,270,269,269,0,252,296],
[278,273,282,305,288,250,273,299,0,292],
[240,259,221,251,247,225,233,255,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,288,301,293,285,282,256,273,279],
[271,0,283,282,273,254,271,265,265,266],
[263,268,0,290,292,287,280,276,278,262],
[250,269,261,0,276,269,270,254,270,262],
[258,278,259,275,0,271,267,261,262,247],
[266,297,264,282,280,0,278,256,288,262],
[269,280,271,281,284,273,0,263,270,261],
[295,286,275,297,290,295,288,0,296,277],
[278,286,273,281,289,263,281,255,0,270],
[272,285,289,289,304,289,290,274,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,259,276,275,272,277,332,308,279],
[284,0,304,263,271,264,270,288,303,273],
[292,247,0,264,308,259,267,280,303,260],
[275,288,287,0,301,316,306,321,320,286],
[276,280,243,250,0,235,261,286,294,249],
[279,287,292,235,316,0,267,322,323,286],
[274,281,284,245,290,284,0,306,301,265],
[219,263,271,230,265,229,245,0,286,239],
[243,248,248,231,257,228,250,265,0,251],
[272,278,291,265,302,265,286,312,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,245,269,250,276,274,266,276,259],
[273,0,286,299,286,260,279,304,295,273],
[306,265,0,261,276,291,263,272,298,285],
[282,252,290,0,281,259,287,303,310,301],
[301,265,275,270,0,299,296,306,290,280],
[275,291,260,292,252,0,264,297,279,281],
[277,272,288,264,255,287,0,300,299,266],
[285,247,279,248,245,254,251,0,260,287],
[275,256,253,241,261,272,252,291,0,268],
[292,278,266,250,271,270,285,264,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,274,281,278,275,273,268,285,259],
[274,0,282,269,263,266,270,258,280,253],
[277,269,0,267,263,272,252,275,271,262],
[270,282,284,0,251,259,259,272,280,266],
[273,288,288,300,0,280,281,291,292,280],
[276,285,279,292,271,0,271,281,298,273],
[278,281,299,292,270,280,0,281,286,274],
[283,293,276,279,260,270,270,0,279,264],
[266,271,280,271,259,253,265,272,0,254],
[292,298,289,285,271,278,277,287,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,257,264,254,278,237,274,244,273],
[305,0,280,257,283,267,278,286,272,271],
[294,271,0,277,268,269,268,285,274,285],
[287,294,274,0,285,266,263,307,260,274],
[297,268,283,266,0,273,279,299,285,286],
[273,284,282,285,278,0,272,289,276,287],
[314,273,283,288,272,279,0,290,276,291],
[277,265,266,244,252,262,261,0,254,271],
[307,279,277,291,266,275,275,297,0,279],
[278,280,266,277,265,264,260,280,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,278,291,267,267,287,279,236,265],
[300,0,282,300,288,281,311,301,264,282],
[273,269,0,279,239,243,281,275,257,290],
[260,251,272,0,247,272,268,269,236,265],
[284,263,312,304,0,260,277,306,279,277],
[284,270,308,279,291,0,294,279,274,289],
[264,240,270,283,274,257,0,258,253,266],
[272,250,276,282,245,272,293,0,272,285],
[315,287,294,315,272,277,298,279,0,290],
[286,269,261,286,274,262,285,266,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,295,264,247,258,224,264,242,252],
[303,0,286,305,249,276,279,301,283,277],
[256,265,0,275,256,266,270,286,270,271],
[287,246,276,0,273,253,283,287,272,278],
[304,302,295,278,0,275,276,292,288,304],
[293,275,285,298,276,0,300,315,287,316],
[327,272,281,268,275,251,0,277,273,273],
[287,250,265,264,259,236,274,0,260,244],
[309,268,281,279,263,264,278,291,0,282],
[299,274,280,273,247,235,278,307,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,263,290,264,248,279,262,245,253],
[307,0,289,309,267,274,273,267,249,280],
[288,262,0,279,244,286,267,264,265,263],
[261,242,272,0,260,256,242,253,234,279],
[287,284,307,291,0,295,295,292,291,273],
[303,277,265,295,256,0,274,259,262,245],
[272,278,284,309,256,277,0,276,268,271],
[289,284,287,298,259,292,275,0,269,264],
[306,302,286,317,260,289,283,282,0,285],
[298,271,288,272,278,306,280,287,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,271,279,224,269,303,254,287,284],
[241,0,256,280,268,262,288,239,282,303],
[280,295,0,264,235,263,289,213,234,270],
[272,271,287,0,275,242,334,271,279,257],
[327,283,316,276,0,296,306,263,313,286],
[282,289,288,309,255,0,318,240,292,286],
[248,263,262,217,245,233,0,213,238,207],
[297,312,338,280,288,311,338,0,267,290],
[264,269,317,272,238,259,313,284,0,277],
[267,248,281,294,265,265,344,261,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,283,273,300,325,285,294,266,293],
[259,0,273,271,287,270,250,273,290,247],
[268,278,0,249,280,267,257,249,260,252],
[278,280,302,0,261,284,269,260,272,237],
[251,264,271,290,0,317,300,287,283,254],
[226,281,284,267,234,0,243,293,254,240],
[266,301,294,282,251,308,0,300,277,293],
[257,278,302,291,264,258,251,0,287,282],
[285,261,291,279,268,297,274,264,0,276],
[258,304,299,314,297,311,258,269,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,282,289,281,268,287,279,286,279],
[267,0,262,286,280,258,267,264,277,272],
[269,289,0,285,289,267,270,275,287,283],
[262,265,266,0,240,253,267,251,268,272],
[270,271,262,311,0,269,276,264,269,275],
[283,293,284,298,282,0,263,289,293,280],
[264,284,281,284,275,288,0,278,276,274],
[272,287,276,300,287,262,273,0,277,283],
[265,274,264,283,282,258,275,274,0,262],
[272,279,268,279,276,271,277,268,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,293,312,268,260,246,269,264,355],
[243,0,227,299,292,225,260,230,266,306],
[258,324,0,339,297,294,280,287,305,351],
[239,252,212,0,226,174,197,213,208,265],
[283,259,254,325,0,254,249,262,290,344],
[291,326,257,377,297,0,295,286,289,349],
[305,291,271,354,302,256,0,243,257,345],
[282,321,264,338,289,265,308,0,262,346],
[287,285,246,343,261,262,294,289,0,338],
[196,245,200,286,207,202,206,205,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,277,271,295,295,270,263,263,280],
[289,0,273,285,276,300,285,268,265,282],
[274,278,0,277,299,289,271,281,282,286],
[280,266,274,0,284,275,260,261,261,285],
[256,275,252,267,0,287,247,271,259,259],
[256,251,262,276,264,0,248,253,235,273],
[281,266,280,291,304,303,0,266,266,293],
[288,283,270,290,280,298,285,0,265,271],
[288,286,269,290,292,316,285,286,0,273],
[271,269,265,266,292,278,258,280,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,300,260,283,287,262,278,289,282],
[284,0,315,277,294,298,268,300,295,284],
[251,236,0,251,256,261,239,264,267,266],
[291,274,300,0,296,280,276,296,304,290],
[268,257,295,255,0,269,261,283,286,277],
[264,253,290,271,282,0,267,285,283,285],
[289,283,312,275,290,284,0,287,283,277],
[273,251,287,255,268,266,264,0,284,246],
[262,256,284,247,265,268,268,267,0,284],
[269,267,285,261,274,266,274,305,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,287,254,261,281,311,255,237,285],
[287,0,303,278,260,273,313,271,257,288],
[264,248,0,238,254,244,292,248,246,237],
[297,273,313,0,283,280,318,266,268,309],
[290,291,297,268,0,269,309,260,264,297],
[270,278,307,271,282,0,310,267,258,272],
[240,238,259,233,242,241,0,262,223,259],
[296,280,303,285,291,284,289,0,282,275],
[314,294,305,283,287,293,328,269,0,274],
[266,263,314,242,254,279,292,276,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,279,317,292,255,327,265,237,262],
[289,0,288,337,299,256,345,296,299,292],
[272,263,0,329,300,285,320,314,299,269],
[234,214,222,0,235,250,271,268,210,243],
[259,252,251,316,0,252,334,332,240,258],
[296,295,266,301,299,0,319,352,305,326],
[224,206,231,280,217,232,0,286,228,235],
[286,255,237,283,219,199,265,0,236,242],
[314,252,252,341,311,246,323,315,0,297],
[289,259,282,308,293,225,316,309,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,244,245,253,265,288,231,282,252],
[288,0,263,296,294,285,323,294,301,276],
[307,288,0,268,297,293,297,294,298,283],
[306,255,283,0,290,287,312,289,268,265],
[298,257,254,261,0,264,274,259,281,284],
[286,266,258,264,287,0,314,269,278,267],
[263,228,254,239,277,237,0,237,252,242],
[320,257,257,262,292,282,314,0,280,256],
[269,250,253,283,270,273,299,271,0,266],
[299,275,268,286,267,284,309,295,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,289,293,289,284,283,276,274,284],
[260,0,262,259,274,250,262,256,255,253],
[262,289,0,278,277,250,277,270,267,257],
[258,292,273,0,292,269,268,267,256,261],
[262,277,274,259,0,269,260,272,254,272],
[267,301,301,282,282,0,279,296,277,286],
[268,289,274,283,291,272,0,260,272,278],
[275,295,281,284,279,255,291,0,276,265],
[277,296,284,295,297,274,279,275,0,265],
[267,298,294,290,279,265,273,286,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,288,285,290,272,275,266,310,314],
[283,0,278,283,263,267,274,265,306,298],
[263,273,0,303,272,252,256,263,289,295],
[266,268,248,0,244,249,247,257,281,266],
[261,288,279,307,0,278,267,269,301,286],
[279,284,299,302,273,0,294,280,292,283],
[276,277,295,304,284,257,0,259,287,283],
[285,286,288,294,282,271,292,0,300,300],
[241,245,262,270,250,259,264,251,0,289],
[237,253,256,285,265,268,268,251,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,330,287,309,257,285,338,273,344],
[274,0,317,294,307,245,297,258,218,298],
[221,234,0,219,201,230,205,270,187,269],
[264,257,332,0,284,298,261,306,269,311],
[242,244,350,267,0,242,266,287,213,268],
[294,306,321,253,309,0,256,269,210,285],
[266,254,346,290,285,295,0,291,281,306],
[213,293,281,245,264,282,260,0,270,280],
[278,333,364,282,338,341,270,281,0,318],
[207,253,282,240,283,266,245,271,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,299,282,276,275,318,271,268,316],
[249,0,264,273,241,255,256,236,264,272],
[252,287,0,287,293,296,286,289,276,309],
[269,278,264,0,291,290,254,259,272,279],
[275,310,258,260,0,272,285,251,277,286],
[276,296,255,261,279,0,270,258,247,277],
[233,295,265,297,266,281,0,258,270,283],
[280,315,262,292,300,293,293,0,287,289],
[283,287,275,279,274,304,281,264,0,313],
[235,279,242,272,265,274,268,262,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,279,270,280,250,288,277,279,269],
[272,0,264,267,264,265,279,268,277,267],
[272,287,0,283,280,274,295,280,272,278],
[281,284,268,0,270,270,295,268,279,273],
[271,287,271,281,0,267,285,280,271,281],
[301,286,277,281,284,0,297,290,270,283],
[263,272,256,256,266,254,0,266,260,248],
[274,283,271,283,271,261,285,0,259,279],
[272,274,279,272,280,281,291,292,0,273],
[282,284,273,278,270,268,303,272,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,275,295,283,278,286,261,275,260],
[291,0,289,304,281,279,275,299,276,273],
[276,262,0,290,262,274,290,253,263,273],
[256,247,261,0,252,258,259,266,242,256],
[268,270,289,299,0,290,284,265,276,279],
[273,272,277,293,261,0,291,257,279,268],
[265,276,261,292,267,260,0,274,278,270],
[290,252,298,285,286,294,277,0,264,277],
[276,275,288,309,275,272,273,287,0,270],
[291,278,278,295,272,283,281,274,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,272,269,268,269,275,257,245,289],
[263,0,278,270,272,269,285,274,248,272],
[279,273,0,272,280,263,269,267,277,280],
[282,281,279,0,277,284,290,275,261,284],
[283,279,271,274,0,276,266,254,252,292],
[282,282,288,267,275,0,285,268,261,270],
[276,266,282,261,285,266,0,270,249,277],
[294,277,284,276,297,283,281,0,273,306],
[306,303,274,290,299,290,302,278,0,299],
[262,279,271,267,259,281,274,245,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,226,238,279,247,278,294,252,241],
[270,0,249,278,308,275,309,289,271,262],
[325,302,0,263,316,297,320,333,314,289],
[313,273,288,0,318,309,339,338,276,304],
[272,243,235,233,0,260,305,292,274,240],
[304,276,254,242,291,0,332,287,283,295],
[273,242,231,212,246,219,0,260,231,237],
[257,262,218,213,259,264,291,0,215,236],
[299,280,237,275,277,268,320,336,0,300],
[310,289,262,247,311,256,314,315,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,293,270,274,298,259,278,264,287],
[287,0,267,277,279,277,273,264,266,293],
[258,284,0,278,258,250,274,255,265,285],
[281,274,273,0,264,267,267,237,261,265],
[277,272,293,287,0,269,273,280,258,306],
[253,274,301,284,282,0,265,271,284,292],
[292,278,277,284,278,286,0,264,277,286],
[273,287,296,314,271,280,287,0,261,286],
[287,285,286,290,293,267,274,290,0,299],
[264,258,266,286,245,259,265,265,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,258,267,257,335,274,254,259,298],
[276,0,259,244,249,258,270,259,246,258],
[293,292,0,265,267,257,295,277,273,250],
[284,307,286,0,254,302,269,270,275,311],
[294,302,284,297,0,277,279,287,282,247],
[216,293,294,249,274,0,221,251,234,248],
[277,281,256,282,272,330,0,273,292,291],
[297,292,274,281,264,300,278,0,276,285],
[292,305,278,276,269,317,259,275,0,303],
[253,293,301,240,304,303,260,266,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,270,278,254,240,285,244,248,267],
[300,0,282,302,263,323,322,280,268,290],
[281,269,0,264,284,287,308,250,278,279],
[273,249,287,0,267,260,328,239,275,269],
[297,288,267,284,0,276,315,249,259,290],
[311,228,264,291,275,0,291,271,270,272],
[266,229,243,223,236,260,0,224,242,246],
[307,271,301,312,302,280,327,0,303,291],
[303,283,273,276,292,281,309,248,0,268],
[284,261,272,282,261,279,305,260,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,274,267,270,262,258,271,280,267],
[294,0,285,275,283,261,260,285,284,291],
[277,266,0,271,259,262,264,280,278,269],
[284,276,280,0,265,268,281,276,284,288],
[281,268,292,286,0,272,279,284,284,278],
[289,290,289,283,279,0,272,280,290,291],
[293,291,287,270,272,279,0,269,287,298],
[280,266,271,275,267,271,282,0,301,301],
[271,267,273,267,267,261,264,250,0,281],
[284,260,282,263,273,260,253,250,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,276,295,299,255,261,299,272,252],
[258,0,258,301,267,273,238,300,268,277],
[275,293,0,288,270,272,251,297,270,249],
[256,250,263,0,272,241,240,283,255,262],
[252,284,281,279,0,259,249,310,258,265],
[296,278,279,310,292,0,264,318,294,272],
[290,313,300,311,302,287,0,305,276,263],
[252,251,254,268,241,233,246,0,234,240],
[279,283,281,296,293,257,275,317,0,249],
[299,274,302,289,286,279,288,311,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,265,278,278,266,262,273,269,276],
[275,0,264,257,269,271,279,289,261,273],
[286,287,0,274,279,278,269,300,255,273],
[273,294,277,0,282,279,274,288,280,283],
[273,282,272,269,0,292,274,284,279,302],
[285,280,273,272,259,0,271,282,264,275],
[289,272,282,277,277,280,0,280,279,286],
[278,262,251,263,267,269,271,0,270,268],
[282,290,296,271,272,287,272,281,0,278],
[275,278,278,268,249,276,265,283,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,281,299,264,293,253,260,292,294],
[261,0,279,312,255,281,269,278,271,283],
[270,272,0,281,280,278,271,284,295,275],
[252,239,270,0,251,248,251,244,235,237],
[287,296,271,300,0,292,284,289,285,300],
[258,270,273,303,259,0,288,293,270,313],
[298,282,280,300,267,263,0,279,273,298],
[291,273,267,307,262,258,272,0,282,295],
[259,280,256,316,266,281,278,269,0,284],
[257,268,276,314,251,238,253,256,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,294,281,282,277,294,279,286,284],
[286,0,273,287,302,258,291,283,285,275],
[257,278,0,273,285,275,274,289,272,283],
[270,264,278,0,281,254,286,270,265,281],
[269,249,266,270,0,252,296,278,281,252],
[274,293,276,297,299,0,279,280,308,286],
[257,260,277,265,255,272,0,272,281,271],
[272,268,262,281,273,271,279,0,290,291],
[265,266,279,286,270,243,270,261,0,273],
[267,276,268,270,299,265,280,260,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,283,259,290,297,270,249,270,280],
[277,0,292,272,254,292,261,270,291,271],
[268,259,0,249,247,281,245,283,268,270],
[292,279,302,0,295,285,256,272,270,286],
[261,297,304,256,0,270,265,278,290,278],
[254,259,270,266,281,0,294,250,253,281],
[281,290,306,295,286,257,0,269,298,288],
[302,281,268,279,273,301,282,0,298,297],
[281,260,283,281,261,298,253,253,0,285],
[271,280,281,265,273,270,263,254,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,295,297,256,272,268,274,290,296],
[266,0,269,286,241,277,265,271,268,280],
[256,282,0,263,244,257,261,257,278,267],
[254,265,288,0,259,263,265,274,269,279],
[295,310,307,292,0,290,275,302,309,299],
[279,274,294,288,261,0,281,283,281,306],
[283,286,290,286,276,270,0,279,283,296],
[277,280,294,277,249,268,272,0,291,279],
[261,283,273,282,242,270,268,260,0,281],
[255,271,284,272,252,245,255,272,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,244,217,268,268,273,250,227,275],
[301,0,273,227,260,297,282,286,251,298],
[307,278,0,264,276,278,272,275,284,284],
[334,324,287,0,317,312,310,335,267,334],
[283,291,275,234,0,300,277,262,249,263],
[283,254,273,239,251,0,268,290,236,284],
[278,269,279,241,274,283,0,298,255,284],
[301,265,276,216,289,261,253,0,259,273],
[324,300,267,284,302,315,296,292,0,306],
[276,253,267,217,288,267,267,278,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,267,277,249,294,260,262,252,293],
[274,0,276,260,288,287,291,246,251,258],
[284,275,0,252,250,246,252,243,231,277],
[274,291,299,0,282,280,306,269,271,303],
[302,263,301,269,0,276,286,269,263,288],
[257,264,305,271,275,0,304,271,232,279],
[291,260,299,245,265,247,0,272,270,263],
[289,305,308,282,282,280,279,0,282,269],
[299,300,320,280,288,319,281,269,0,293],
[258,293,274,248,263,272,288,282,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,254,246,251,246,268,243,264,249],
[290,0,289,269,260,249,287,289,268,304],
[297,262,0,228,259,238,262,284,268,290],
[305,282,323,0,272,276,290,278,293,315],
[300,291,292,279,0,275,277,296,270,298],
[305,302,313,275,276,0,293,302,306,315],
[283,264,289,261,274,258,0,262,269,296],
[308,262,267,273,255,249,289,0,280,293],
[287,283,283,258,281,245,282,271,0,291],
[302,247,261,236,253,236,255,258,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,268,276,292,271,312,276,281,284],
[277,0,270,264,281,273,245,238,281,292],
[283,281,0,292,295,275,292,271,278,292],
[275,287,259,0,291,272,287,286,293,274],
[259,270,256,260,0,269,279,272,282,282],
[280,278,276,279,282,0,294,287,270,299],
[239,306,259,264,272,257,0,252,274,295],
[275,313,280,265,279,264,299,0,282,296],
[270,270,273,258,269,281,277,269,0,266],
[267,259,259,277,269,252,256,255,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,289,311,277,275,261,207,263,231],
[326,0,271,291,321,298,267,324,303,301],
[262,280,0,279,341,272,296,281,332,232],
[240,260,272,0,286,264,301,271,312,242],
[274,230,210,265,0,238,272,247,272,247],
[276,253,279,287,313,0,294,304,291,266],
[290,284,255,250,279,257,0,299,339,261],
[344,227,270,280,304,247,252,0,294,286],
[288,248,219,239,279,260,212,257,0,258],
[320,250,319,309,304,285,290,265,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,290,280,272,284,287,278,301,291],
[271,0,261,270,276,269,264,248,281,277],
[261,290,0,291,289,278,280,272,301,298],
[271,281,260,0,273,280,267,276,287,278],
[279,275,262,278,0,275,294,270,291,293],
[267,282,273,271,276,0,273,273,276,277],
[264,287,271,284,257,278,0,260,272,283],
[273,303,279,275,281,278,291,0,282,280],
[250,270,250,264,260,275,279,269,0,274],
[260,274,253,273,258,274,268,271,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,231,249,265,268,272,264,296,246],
[332,0,362,338,269,234,310,345,331,408],
[320,189,0,337,240,303,334,263,315,354],
[302,213,214,0,277,279,280,270,297,295],
[286,282,311,274,0,246,270,348,349,256],
[283,317,248,272,305,0,326,250,323,333],
[279,241,217,271,281,225,0,269,265,265],
[287,206,288,281,203,301,282,0,319,299],
[255,220,236,254,202,228,286,232,0,267],
[305,143,197,256,295,218,286,252,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,245,274,253,276,277,280,279,263],
[277,0,284,276,270,274,287,289,279,287],
[306,267,0,289,278,275,288,279,286,282],
[277,275,262,0,265,279,293,286,276,277],
[298,281,273,286,0,271,297,294,300,290],
[275,277,276,272,280,0,281,284,296,293],
[274,264,263,258,254,270,0,267,271,256],
[271,262,272,265,257,267,284,0,286,276],
[272,272,265,275,251,255,280,265,0,265],
[288,264,269,274,261,258,295,275,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,293,284,276,268,265,277,296,269],
[285,0,294,294,292,268,273,272,292,295],
[258,257,0,285,297,262,266,262,287,261],
[267,257,266,0,270,309,243,270,271,262],
[275,259,254,281,0,280,262,240,291,276],
[283,283,289,242,271,0,278,250,285,263],
[286,278,285,308,289,273,0,273,288,268],
[274,279,289,281,311,301,278,0,303,283],
[255,259,264,280,260,266,263,248,0,252],
[282,256,290,289,275,288,283,268,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,275,260,284,297,292,293,292,317],
[252,0,292,241,269,295,258,253,261,287],
[276,259,0,250,271,254,266,278,256,248],
[291,310,301,0,281,277,284,289,287,268],
[267,282,280,270,0,272,260,284,259,285],
[254,256,297,274,279,0,290,280,288,264],
[259,293,285,267,291,261,0,305,275,268],
[258,298,273,262,267,271,246,0,272,278],
[259,290,295,264,292,263,276,279,0,266],
[234,264,303,283,266,287,283,273,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,286,200,226,260,305,238,284,243],
[320,0,355,245,213,260,292,299,258,250],
[265,196,0,248,135,201,294,246,243,208],
[351,306,303,0,315,344,342,305,336,222],
[325,338,416,236,0,304,336,284,359,291],
[291,291,350,207,247,0,329,265,269,212],
[246,259,257,209,215,222,0,194,309,169],
[313,252,305,246,267,286,357,0,325,254],
[267,293,308,215,192,282,242,226,0,251],
[308,301,343,329,260,339,382,297,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,267,272,268,285,271,310,245,288],
[278,0,263,245,265,266,265,257,253,253],
[284,288,0,262,260,272,291,293,256,265],
[279,306,289,0,293,288,286,279,272,268],
[283,286,291,258,0,298,278,310,273,247],
[266,285,279,263,253,0,274,304,281,260],
[280,286,260,265,273,277,0,287,252,257],
[241,294,258,272,241,247,264,0,245,249],
[306,298,295,279,278,270,299,306,0,263],
[263,298,286,283,304,291,294,302,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,263,269,283,283,268,282,270,257],
[265,0,264,259,262,276,257,262,254,247],
[288,287,0,266,290,293,264,301,277,293],
[282,292,285,0,297,297,259,305,292,277],
[268,289,261,254,0,282,268,276,273,257],
[268,275,258,254,269,0,269,286,275,267],
[283,294,287,292,283,282,0,293,295,271],
[269,289,250,246,275,265,258,0,270,255],
[281,297,274,259,278,276,256,281,0,265],
[294,304,258,274,294,284,280,296,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,288,294,304,301,270,289,292,298],
[240,0,283,267,271,278,284,270,254,259],
[263,268,0,272,276,274,249,266,254,260],
[257,284,279,0,273,261,258,276,277,257],
[247,280,275,278,0,267,263,267,262,244],
[250,273,277,290,284,0,277,282,265,264],
[281,267,302,293,288,274,0,274,264,271],
[262,281,285,275,284,269,277,0,257,282],
[259,297,297,274,289,286,287,294,0,270],
[253,292,291,294,307,287,280,269,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,276,284,281,289,294,294,273,288],
[261,0,262,275,272,264,280,285,253,271],
[275,289,0,277,271,265,291,291,258,264],
[267,276,274,0,268,258,291,286,269,264],
[270,279,280,283,0,259,298,281,279,288],
[262,287,286,293,292,0,292,292,271,275],
[257,271,260,260,253,259,0,276,230,277],
[257,266,260,265,270,259,275,0,244,256],
[278,298,293,282,272,280,321,307,0,289],
[263,280,287,287,263,276,274,295,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,281,275,242,285,293,247,299,267],
[290,0,312,303,297,310,299,262,282,283],
[270,239,0,300,287,298,285,282,271,253],
[276,248,251,0,299,321,305,274,308,275],
[309,254,264,252,0,289,282,282,266,289],
[266,241,253,230,262,0,284,257,267,238],
[258,252,266,246,269,267,0,263,281,226],
[304,289,269,277,269,294,288,0,292,302],
[252,269,280,243,285,284,270,259,0,278],
[284,268,298,276,262,313,325,249,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,229,215,221,252,242,246,266,247],
[276,0,230,258,257,258,260,257,280,249],
[322,321,0,269,309,284,289,313,306,287],
[336,293,282,0,268,285,287,291,273,274],
[330,294,242,283,0,284,274,258,282,254],
[299,293,267,266,267,0,246,304,267,226],
[309,291,262,264,277,305,0,308,306,258],
[305,294,238,260,293,247,243,0,271,254],
[285,271,245,278,269,284,245,280,0,229],
[304,302,264,277,297,325,293,297,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,252,268,298,296,284,345,260,297],
[277,0,271,301,344,282,378,350,243,247],
[299,280,0,323,287,371,403,389,270,264],
[283,250,228,0,297,322,292,354,189,245],
[253,207,264,254,0,196,229,363,298,224],
[255,269,180,229,355,0,208,327,183,178],
[267,173,148,259,322,343,0,344,167,212],
[206,201,162,197,188,224,207,0,177,185],
[291,308,281,362,253,368,384,374,0,264],
[254,304,287,306,327,373,339,366,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,297,267,317,304,303,325,281,294],
[251,0,311,295,303,324,253,340,256,310],
[254,240,0,231,308,291,248,328,266,297],
[284,256,320,0,323,277,267,312,294,306],
[234,248,243,228,0,243,195,290,219,264],
[247,227,260,274,308,0,199,299,278,279],
[248,298,303,284,356,352,0,325,295,349],
[226,211,223,239,261,252,226,0,239,267],
[270,295,285,257,332,273,256,312,0,309],
[257,241,254,245,287,272,202,284,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,296,275,278,250,276,288,272,274],
[270,0,288,264,264,252,258,259,277,270],
[255,263,0,258,274,274,283,272,279,268],
[276,287,293,0,303,285,285,280,289,274],
[273,287,277,248,0,255,268,268,249,271],
[301,299,277,266,296,0,268,278,282,275],
[275,293,268,266,283,283,0,288,287,273],
[263,292,279,271,283,273,263,0,259,295],
[279,274,272,262,302,269,264,292,0,288],
[277,281,283,277,280,276,278,256,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,303,298,284,271,294,285,279,298],
[248,0,278,264,278,272,265,285,290,282],
[248,273,0,269,266,256,262,297,265,264],
[253,287,282,0,288,250,300,273,295,271],
[267,273,285,263,0,269,300,278,286,276],
[280,279,295,301,282,0,274,331,277,283],
[257,286,289,251,251,277,0,295,283,283],
[266,266,254,278,273,220,256,0,282,266],
[272,261,286,256,265,274,268,269,0,285],
[253,269,287,280,275,268,268,285,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,271,314,289,300,254,296,252,284],
[255,0,263,290,276,302,284,273,274,294],
[280,288,0,272,303,312,296,276,244,309],
[237,261,279,0,302,286,259,298,247,284],
[262,275,248,249,0,293,236,257,241,268],
[251,249,239,265,258,0,253,290,265,291],
[297,267,255,292,315,298,0,336,279,256],
[255,278,275,253,294,261,215,0,241,248],
[299,277,307,304,310,286,272,310,0,324],
[267,257,242,267,283,260,295,303,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,315,310,290,345,293,309,285,328],
[297,0,302,296,251,268,286,289,292,354],
[236,249,0,309,247,283,205,298,211,258],
[241,255,242,0,255,253,245,296,260,307],
[261,300,304,296,0,322,312,317,262,329],
[206,283,268,298,229,0,266,287,241,315],
[258,265,346,306,239,285,0,323,260,351],
[242,262,253,255,234,264,228,0,217,277],
[266,259,340,291,289,310,291,334,0,338],
[223,197,293,244,222,236,200,274,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,285,296,282,263,297,270,269,293],
[273,0,295,287,267,276,284,277,280,288],
[266,256,0,280,287,249,288,268,286,282],
[255,264,271,0,261,258,277,276,268,284],
[269,284,264,290,0,276,278,274,267,287],
[288,275,302,293,275,0,281,273,267,294],
[254,267,263,274,273,270,0,279,269,285],
[281,274,283,275,277,278,272,0,286,275],
[282,271,265,283,284,284,282,265,0,292],
[258,263,269,267,264,257,266,276,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,292,284,270,298,322,268,291,301],
[274,0,311,307,295,301,310,290,295,330],
[259,240,0,267,261,279,295,248,278,279],
[267,244,284,0,284,282,303,231,286,288],
[281,256,290,267,0,271,272,280,272,302],
[253,250,272,269,280,0,279,231,295,273],
[229,241,256,248,279,272,0,281,295,281],
[283,261,303,320,271,320,270,0,308,297],
[260,256,273,265,279,256,256,243,0,287],
[250,221,272,263,249,278,270,254,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,291,276,288,285,261,264,293,287],
[290,0,289,264,294,293,265,284,270,283],
[260,262,0,280,287,279,262,252,249,263],
[275,287,271,0,311,291,269,264,268,281],
[263,257,264,240,0,254,234,242,250,263],
[266,258,272,260,297,0,262,258,257,293],
[290,286,289,282,317,289,0,288,275,291],
[287,267,299,287,309,293,263,0,274,268],
[258,281,302,283,301,294,276,277,0,272],
[264,268,288,270,288,258,260,283,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,251,276,309,253,263,230,256,243],
[301,0,270,251,322,274,250,235,286,283],
[300,281,0,287,260,289,251,265,238,255],
[275,300,264,0,287,263,234,268,268,245],
[242,229,291,264,0,247,224,251,309,226],
[298,277,262,288,304,0,273,274,247,223],
[288,301,300,317,327,278,0,279,302,254],
[321,316,286,283,300,277,272,0,310,258],
[295,265,313,283,242,304,249,241,0,264],
[308,268,296,306,325,328,297,293,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,286,273,264,293,291,266,284,273],
[263,0,277,270,274,260,281,265,290,274],
[265,274,0,266,267,259,270,273,288,264],
[278,281,285,0,280,286,281,272,281,280],
[287,277,284,271,0,287,300,280,300,288],
[258,291,292,265,264,0,265,260,284,257],
[260,270,281,270,251,286,0,266,296,264],
[285,286,278,279,271,291,285,0,286,277],
[267,261,263,270,251,267,255,265,0,261],
[278,277,287,271,263,294,287,274,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,281,273,289,277,272,273,306,295],
[258,0,240,236,252,263,256,283,249,264],
[270,311,0,281,294,319,279,294,291,311],
[278,315,270,0,269,279,294,308,295,266],
[262,299,257,282,0,281,252,314,287,278],
[274,288,232,272,270,0,261,247,290,290],
[279,295,272,257,299,290,0,287,289,307],
[278,268,257,243,237,304,264,0,268,279],
[245,302,260,256,264,261,262,283,0,280],
[256,287,240,285,273,261,244,272,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,335,276,242,261,211,259,239,260],
[228,0,267,213,227,185,212,236,200,179],
[216,284,0,214,225,231,210,234,188,235],
[275,338,337,0,276,251,270,250,243,291],
[309,324,326,275,0,277,289,317,278,290],
[290,366,320,300,274,0,293,306,271,257],
[340,339,341,281,262,258,0,283,253,248],
[292,315,317,301,234,245,268,0,258,262],
[312,351,363,308,273,280,298,293,0,295],
[291,372,316,260,261,294,303,289,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,259,246,251,255,255,257,251,257],
[335,0,271,266,282,266,299,277,289,275],
[292,280,0,289,281,287,259,257,282,265],
[305,285,262,0,274,265,270,262,290,282],
[300,269,270,277,0,262,285,261,274,279],
[296,285,264,286,289,0,295,267,312,280],
[296,252,292,281,266,256,0,286,264,272],
[294,274,294,289,290,284,265,0,292,294],
[300,262,269,261,277,239,287,259,0,271],
[294,276,286,269,272,271,279,257,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,275,272,276,260,264,266,262,280],
[289,0,271,295,280,265,282,283,270,294],
[276,280,0,280,287,269,291,257,273,298],
[279,256,271,0,272,254,275,266,280,294],
[275,271,264,279,0,259,278,271,259,284],
[291,286,282,297,292,0,287,286,272,299],
[287,269,260,276,273,264,0,281,262,287],
[285,268,294,285,280,265,270,0,259,292],
[289,281,278,271,292,279,289,292,0,293],
[271,257,253,257,267,252,264,259,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,277,276,271,285,276,296,281,275],
[260,0,273,269,282,268,265,272,261,276],
[274,278,0,269,292,289,280,297,278,286],
[275,282,282,0,274,280,269,288,266,272],
[280,269,259,277,0,263,262,256,270,266],
[266,283,262,271,288,0,254,280,276,269],
[275,286,271,282,289,297,0,285,274,283],
[255,279,254,263,295,271,266,0,271,275],
[270,290,273,285,281,275,277,280,0,282],
[276,275,265,279,285,282,268,276,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,290,287,287,263,287,307,310,291],
[242,0,266,296,281,280,276,282,291,260],
[261,285,0,250,269,266,291,278,287,264],
[264,255,301,0,299,254,281,288,288,242],
[264,270,282,252,0,273,260,277,313,273],
[288,271,285,297,278,0,261,272,318,273],
[264,275,260,270,291,290,0,281,274,278],
[244,269,273,263,274,279,270,0,305,273],
[241,260,264,263,238,233,277,246,0,257],
[260,291,287,309,278,278,273,278,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,276,274,280,262,281,283,283,273],
[283,0,276,283,285,276,271,302,282,288],
[275,275,0,250,283,264,275,280,279,268],
[277,268,301,0,281,283,289,300,288,289],
[271,266,268,270,0,265,260,269,285,269],
[289,275,287,268,286,0,276,275,285,265],
[270,280,276,262,291,275,0,289,285,282],
[268,249,271,251,282,276,262,0,261,254],
[268,269,272,263,266,266,266,290,0,254],
[278,263,283,262,282,286,269,297,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,265,261,239,239,239,259,245,246],
[285,0,288,283,257,281,256,280,276,284],
[286,263,0,266,286,286,262,269,263,280],
[290,268,285,0,270,270,253,292,255,276],
[312,294,265,281,0,279,281,275,291,279],
[312,270,265,281,272,0,255,277,277,281],
[312,295,289,298,270,296,0,294,284,295],
[292,271,282,259,276,274,257,0,269,286],
[306,275,288,296,260,274,267,282,0,291],
[305,267,271,275,272,270,256,265,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,274,293,286,279,279,259,274,298],
[287,0,300,292,292,306,276,290,273,304],
[277,251,0,278,273,291,264,267,257,305],
[258,259,273,0,258,278,282,267,262,296],
[265,259,278,293,0,280,264,270,279,294],
[272,245,260,273,271,0,263,262,268,286],
[272,275,287,269,287,288,0,276,283,304],
[292,261,284,284,281,289,275,0,272,294],
[277,278,294,289,272,283,268,279,0,296],
[253,247,246,255,257,265,247,257,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,284,289,262,278,280,266,266,270],
[270,0,284,249,276,267,265,266,263,258],
[267,267,0,252,263,243,250,258,268,253],
[262,302,299,0,288,284,287,294,279,267],
[289,275,288,263,0,276,262,268,269,277],
[273,284,308,267,275,0,260,264,268,247],
[271,286,301,264,289,291,0,290,282,279],
[285,285,293,257,283,287,261,0,282,261],
[285,288,283,272,282,283,269,269,0,251],
[281,293,298,284,274,304,272,290,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,298,324,249,274,244,288,306,277],
[259,0,188,292,246,260,198,254,290,232],
[253,363,0,340,286,292,282,279,331,294],
[227,259,211,0,193,267,221,185,245,253],
[302,305,265,358,0,325,276,266,312,343],
[277,291,259,284,226,0,262,265,276,256],
[307,353,269,330,275,289,0,290,324,295],
[263,297,272,366,285,286,261,0,336,292],
[245,261,220,306,239,275,227,215,0,224],
[274,319,257,298,208,295,256,259,327,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,269,288,274,261,260,287,270,263],
[288,0,297,290,272,269,272,281,262,253],
[282,254,0,286,277,270,274,262,270,275],
[263,261,265,0,273,266,247,276,266,248],
[277,279,274,278,0,270,278,278,264,269],
[290,282,281,285,281,0,256,256,268,277],
[291,279,277,304,273,295,0,299,286,286],
[264,270,289,275,273,295,252,0,262,269],
[281,289,281,285,287,283,265,289,0,284],
[288,298,276,303,282,274,265,282,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,266,267,282,276,286,273,276,290],
[281,0,276,265,280,267,289,277,279,284],
[285,275,0,265,288,272,275,277,278,284],
[284,286,286,0,270,287,299,284,286,289],
[269,271,263,281,0,266,279,273,288,296],
[275,284,279,264,285,0,297,277,269,288],
[265,262,276,252,272,254,0,268,268,290],
[278,274,274,267,278,274,283,0,279,294],
[275,272,273,265,263,282,283,272,0,280],
[261,267,267,262,255,263,261,257,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,229,194,203,191,286,245,211,253],
[308,0,236,236,153,283,308,214,207,148],
[322,315,0,288,242,292,327,267,303,287],
[357,315,263,0,233,351,263,326,300,227],
[348,398,309,318,0,338,266,290,223,238],
[360,268,259,200,213,0,266,305,292,271],
[265,243,224,288,285,285,0,235,256,200],
[306,337,284,225,261,246,316,0,178,136],
[340,344,248,251,328,259,295,373,0,353],
[298,403,264,324,313,280,351,415,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,281,292,303,302,279,255,306,276],
[262,0,276,253,305,252,279,237,290,261],
[270,275,0,273,304,276,253,261,281,272],
[259,298,278,0,313,276,279,254,301,275],
[248,246,247,238,0,257,281,254,272,277],
[249,299,275,275,294,0,285,255,290,280],
[272,272,298,272,270,266,0,263,280,259],
[296,314,290,297,297,296,288,0,316,249],
[245,261,270,250,279,261,271,235,0,260],
[275,290,279,276,274,271,292,302,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,221,323,251,214,231,179,242,202],
[348,0,309,374,329,272,320,307,334,319],
[330,242,0,358,307,296,297,263,233,295],
[228,177,193,0,198,208,228,186,189,221],
[300,222,244,353,0,259,246,263,271,265],
[337,279,255,343,292,0,303,265,263,340],
[320,231,254,323,305,248,0,289,302,311],
[372,244,288,365,288,286,262,0,269,278],
[309,217,318,362,280,288,249,282,0,310],
[349,232,256,330,286,211,240,273,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,259,263,272,265,252,259,259,287],
[249,0,280,264,278,265,264,270,276,272],
[292,271,0,276,284,280,285,284,289,294],
[288,287,275,0,283,297,274,292,306,286],
[279,273,267,268,0,268,262,287,283,263],
[286,286,271,254,283,0,275,287,278,286],
[299,287,266,277,289,276,0,283,289,273],
[292,281,267,259,264,264,268,0,278,274],
[292,275,262,245,268,273,262,273,0,251],
[264,279,257,265,288,265,278,277,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,235,267,260,286,252,243,250,270],
[300,0,292,300,257,301,271,271,258,274],
[316,259,0,265,257,310,278,265,282,277],
[284,251,286,0,256,279,258,277,268,275],
[291,294,294,295,0,284,288,275,268,280],
[265,250,241,272,267,0,276,259,274,260],
[299,280,273,293,263,275,0,275,277,272],
[308,280,286,274,276,292,276,0,287,288],
[301,293,269,283,283,277,274,264,0,271],
[281,277,274,276,271,291,279,263,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,302,287,281,313,320,286,260,261],
[351,0,311,255,290,329,358,310,309,371],
[249,240,0,194,296,290,333,257,281,284],
[264,296,357,0,295,298,277,307,308,323],
[270,261,255,256,0,268,260,256,241,272],
[238,222,261,253,283,0,276,276,253,321],
[231,193,218,274,291,275,0,257,198,264],
[265,241,294,244,295,275,294,0,243,295],
[291,242,270,243,310,298,353,308,0,328],
[290,180,267,228,279,230,287,256,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,272,260,266,298,280,271,271,284],
[269,0,262,246,273,278,271,280,277,274],
[279,289,0,276,262,304,291,279,273,282],
[291,305,275,0,285,311,284,275,283,276],
[285,278,289,266,0,292,290,280,289,276],
[253,273,247,240,259,0,258,272,251,238],
[271,280,260,267,261,293,0,286,277,284],
[280,271,272,276,271,279,265,0,273,278],
[280,274,278,268,262,300,274,278,0,281],
[267,277,269,275,275,313,267,273,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,289,290,283,285,268,265,240,263],
[270,0,241,297,237,237,249,280,259,239],
[262,310,0,295,270,270,292,275,262,282],
[261,254,256,0,274,236,263,247,265,247],
[268,314,281,277,0,282,294,273,270,255],
[266,314,281,315,269,0,291,282,245,272],
[283,302,259,288,257,260,0,258,273,263],
[286,271,276,304,278,269,293,0,274,266],
[311,292,289,286,281,306,278,277,0,265],
[288,312,269,304,296,279,288,285,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,255,272,266,285,280,270,261,286],
[293,0,300,266,284,308,273,289,275,282],
[296,251,0,278,287,276,277,266,258,270],
[279,285,273,0,277,259,266,271,277,283],
[285,267,264,274,0,269,275,285,254,263],
[266,243,275,292,282,0,292,275,267,281],
[271,278,274,285,276,259,0,271,262,281],
[281,262,285,280,266,276,280,0,282,265],
[290,276,293,274,297,284,289,269,0,292],
[265,269,281,268,288,270,270,286,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,265,289,286,259,290,275,267,288],
[272,0,277,283,284,274,278,285,267,282],
[286,274,0,307,285,278,281,300,286,292],
[262,268,244,0,282,273,288,270,285,272],
[265,267,266,269,0,227,253,254,284,262],
[292,277,273,278,324,0,282,297,298,287],
[261,273,270,263,298,269,0,271,275,283],
[276,266,251,281,297,254,280,0,286,279],
[284,284,265,266,267,253,276,265,0,278],
[263,269,259,279,289,264,268,272,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,269,324,315,303,265,289,254,313],
[269,0,275,245,284,314,267,265,247,313],
[282,276,0,291,308,300,250,235,191,331],
[227,306,260,0,277,261,254,312,297,312],
[236,267,243,274,0,250,252,279,279,282],
[248,237,251,290,301,0,256,301,254,309],
[286,284,301,297,299,295,0,303,254,358],
[262,286,316,239,272,250,248,0,261,300],
[297,304,360,254,272,297,297,290,0,305],
[238,238,220,239,269,242,193,251,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,239,264,274,305,273,284,292,263],
[311,0,267,296,310,331,311,305,301,293],
[312,284,0,283,259,350,289,286,287,303],
[287,255,268,0,280,286,243,301,266,290],
[277,241,292,271,0,303,291,275,278,282],
[246,220,201,265,248,0,258,269,211,233],
[278,240,262,308,260,293,0,304,274,286],
[267,246,265,250,276,282,247,0,255,244],
[259,250,264,285,273,340,277,296,0,281],
[288,258,248,261,269,318,265,307,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,295,347,246,278,275,279,253,328],
[246,0,250,332,249,242,339,257,288,315],
[256,301,0,294,296,256,291,274,250,362],
[204,219,257,0,239,217,234,316,263,307],
[305,302,255,312,0,243,333,283,288,303],
[273,309,295,334,308,0,331,324,327,352],
[276,212,260,317,218,220,0,276,270,302],
[272,294,277,235,268,227,275,0,221,315],
[298,263,301,288,263,224,281,330,0,332],
[223,236,189,244,248,199,249,236,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,273,290,291,284,267,322,279,298],
[229,0,243,242,236,202,226,243,238,250],
[278,308,0,291,272,290,247,294,285,300],
[261,309,260,0,270,255,273,272,244,256],
[260,315,279,281,0,290,268,296,264,273],
[267,349,261,296,261,0,256,268,285,260],
[284,325,304,278,283,295,0,321,248,276],
[229,308,257,279,255,283,230,0,256,255],
[272,313,266,307,287,266,303,295,0,261],
[253,301,251,295,278,291,275,296,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,283,268,271,290,284,276,290,276],
[282,0,288,271,291,294,288,264,295,271],
[268,263,0,267,273,279,281,278,299,271],
[283,280,284,0,273,280,272,277,288,286],
[280,260,278,278,0,283,270,276,297,288],
[261,257,272,271,268,0,282,271,280,270],
[267,263,270,279,281,269,0,273,288,272],
[275,287,273,274,275,280,278,0,288,284],
[261,256,252,263,254,271,263,263,0,265],
[275,280,280,265,263,281,279,267,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,258,246,252,280,229,262,248,286],
[309,0,263,272,265,310,293,288,331,286],
[293,288,0,274,275,254,238,278,306,274],
[305,279,277,0,280,323,281,289,268,285],
[299,286,276,271,0,312,272,289,309,275],
[271,241,297,228,239,0,279,274,252,250],
[322,258,313,270,279,272,0,280,299,313],
[289,263,273,262,262,277,271,0,287,294],
[303,220,245,283,242,299,252,264,0,271],
[265,265,277,266,276,301,238,257,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,280,296,255,290,311,309,281,280],
[267,0,246,299,282,262,294,260,290,282],
[271,305,0,281,300,275,329,285,268,304],
[255,252,270,0,245,259,283,276,260,275],
[296,269,251,306,0,280,304,305,296,286],
[261,289,276,292,271,0,304,282,271,279],
[240,257,222,268,247,247,0,251,242,241],
[242,291,266,275,246,269,300,0,277,257],
[270,261,283,291,255,280,309,274,0,265],
[271,269,247,276,265,272,310,294,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,247,310,269,270,273,267,284,262],
[290,0,287,309,269,287,293,301,297,276],
[304,264,0,293,274,283,282,274,282,256],
[241,242,258,0,250,263,269,277,266,238],
[282,282,277,301,0,295,278,285,307,270],
[281,264,268,288,256,0,272,253,296,258],
[278,258,269,282,273,279,0,268,289,261],
[284,250,277,274,266,298,283,0,292,272],
[267,254,269,285,244,255,262,259,0,253],
[289,275,295,313,281,293,290,279,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,273,250,254,257,275,288,272,250],
[269,0,272,274,276,253,288,285,272,263],
[278,279,0,290,294,280,302,298,287,272],
[301,277,261,0,291,270,307,297,291,276],
[297,275,257,260,0,248,288,292,266,258],
[294,298,271,281,303,0,311,303,295,273],
[276,263,249,244,263,240,0,279,262,252],
[263,266,253,254,259,248,272,0,270,255],
[279,279,264,260,285,256,289,281,0,259],
[301,288,279,275,293,278,299,296,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,281,340,292,303,336,269,276,268],
[264,0,284,321,289,287,292,300,288,287],
[270,267,0,323,259,287,295,281,284,317],
[211,230,228,0,212,239,224,243,218,275],
[259,262,292,339,0,317,283,298,305,337],
[248,264,264,312,234,0,273,283,273,265],
[215,259,256,327,268,278,0,288,266,293],
[282,251,270,308,253,268,263,0,259,322],
[275,263,267,333,246,278,285,292,0,315],
[283,264,234,276,214,286,258,229,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,290,263,259,251,253,262,276,283],
[294,0,271,264,283,255,256,289,266,285],
[261,280,0,259,264,256,265,277,266,287],
[288,287,292,0,278,259,270,279,289,281],
[292,268,287,273,0,286,288,279,283,273],
[300,296,295,292,265,0,277,300,269,303],
[298,295,286,281,263,274,0,285,288,310],
[289,262,274,272,272,251,266,0,274,292],
[275,285,285,262,268,282,263,277,0,286],
[268,266,264,270,278,248,241,259,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,250,277,260,254,312,277,301,301],
[283,0,277,276,308,278,308,312,277,260],
[301,274,0,285,323,252,297,251,293,267],
[274,275,266,0,279,261,311,207,278,265],
[291,243,228,272,0,250,283,277,289,274],
[297,273,299,290,301,0,307,280,310,248],
[239,243,254,240,268,244,0,293,268,246],
[274,239,300,344,274,271,258,0,289,287],
[250,274,258,273,262,241,283,262,0,237],
[250,291,284,286,277,303,305,264,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,273,256,269,250,270,273,266,285],
[302,0,306,297,261,266,283,273,260,276],
[278,245,0,243,301,283,286,263,259,266],
[295,254,308,0,291,275,290,283,262,288],
[282,290,250,260,0,278,287,315,265,279],
[301,285,268,276,273,0,292,285,278,275],
[281,268,265,261,264,259,0,282,249,286],
[278,278,288,268,236,266,269,0,241,278],
[285,291,292,289,286,273,302,310,0,292],
[266,275,285,263,272,276,265,273,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,263,287,286,291,277,270,258,258],
[285,0,248,288,266,261,277,281,260,264],
[288,303,0,316,275,274,302,274,283,280],
[264,263,235,0,270,257,285,276,283,270],
[265,285,276,281,0,272,281,273,293,276],
[260,290,277,294,279,0,299,268,252,276],
[274,274,249,266,270,252,0,259,259,281],
[281,270,277,275,278,283,292,0,263,281],
[293,291,268,268,258,299,292,288,0,273],
[293,287,271,281,275,275,270,270,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,275,280,275,270,272,262,300,259],
[265,0,274,268,276,251,248,267,260,239],
[276,277,0,244,289,255,275,254,288,236],
[271,283,307,0,259,277,279,287,274,251],
[276,275,262,292,0,269,295,275,254,261],
[281,300,296,274,282,0,309,293,289,283],
[279,303,276,272,256,242,0,281,291,276],
[289,284,297,264,276,258,270,0,260,251],
[251,291,263,277,297,262,260,291,0,244],
[292,312,315,300,290,268,275,300,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,232,252,246,265,280,266,257,250],
[301,0,270,276,280,279,291,271,286,263],
[319,281,0,286,287,297,302,302,294,258],
[299,275,265,0,270,279,282,264,269,279],
[305,271,264,281,0,266,288,276,291,275],
[286,272,254,272,285,0,293,269,257,282],
[271,260,249,269,263,258,0,268,268,276],
[285,280,249,287,275,282,283,0,261,278],
[294,265,257,282,260,294,283,290,0,271],
[301,288,293,272,276,269,275,273,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,324,310,287,260,285,259,272,260],
[289,0,310,275,279,261,296,258,280,290],
[227,241,0,258,227,234,246,234,237,243],
[241,276,293,0,271,256,261,254,282,268],
[264,272,324,280,0,281,261,269,313,270],
[291,290,317,295,270,0,310,265,306,270],
[266,255,305,290,290,241,0,235,275,278],
[292,293,317,297,282,286,316,0,275,308],
[279,271,314,269,238,245,276,276,0,270],
[291,261,308,283,281,281,273,243,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,248,249,233,246,221,292,215,259],
[316,0,291,296,264,266,283,339,273,281],
[303,260,0,274,255,267,264,292,268,281],
[302,255,277,0,243,271,244,289,289,286],
[318,287,296,308,0,289,290,326,264,301],
[305,285,284,280,262,0,256,310,286,294],
[330,268,287,307,261,295,0,313,256,289],
[259,212,259,262,225,241,238,0,255,279],
[336,278,283,262,287,265,295,296,0,305],
[292,270,270,265,250,257,262,272,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,274,247,245,277,246,242,237,264],
[284,0,312,304,282,267,259,270,272,249],
[277,239,0,223,242,234,219,274,221,221],
[304,247,328,0,287,295,306,275,303,295],
[306,269,309,264,0,250,284,284,297,300],
[274,284,317,256,301,0,268,282,272,254],
[305,292,332,245,267,283,0,302,265,275],
[309,281,277,276,267,269,249,0,275,250],
[314,279,330,248,254,279,286,276,0,248],
[287,302,330,256,251,297,276,301,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,191,205,290,246,255,119,114,168],
[338,0,294,278,361,309,318,295,297,230],
[360,257,0,257,322,238,277,281,308,289],
[346,273,294,0,439,357,412,297,315,246],
[261,190,229,112,0,116,201,133,157,118],
[305,242,313,194,435,0,241,268,224,236],
[296,233,274,139,350,310,0,243,164,150],
[432,256,270,254,418,283,308,0,285,354],
[437,254,243,236,394,327,387,266,0,246],
[383,321,262,305,433,315,401,197,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,287,302,283,253,300,273,282,277],
[273,0,294,291,279,270,274,255,279,275],
[264,257,0,289,260,274,283,271,291,273],
[249,260,262,0,233,253,264,252,263,252],
[268,272,291,318,0,281,293,268,303,285],
[298,281,277,298,270,0,289,276,299,277],
[251,277,268,287,258,262,0,264,284,246],
[278,296,280,299,283,275,287,0,292,279],
[269,272,260,288,248,252,267,259,0,280],
[274,276,278,299,266,274,305,272,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,204,237,227,238,210,211,246,280],
[334,0,254,300,302,269,338,294,294,328],
[347,297,0,342,305,281,324,314,258,358],
[314,251,209,0,242,263,277,233,250,299],
[324,249,246,309,0,301,266,256,245,329],
[313,282,270,288,250,0,240,250,252,300],
[341,213,227,274,285,311,0,290,273,358],
[340,257,237,318,295,301,261,0,280,347],
[305,257,293,301,306,299,278,271,0,392],
[271,223,193,252,222,251,193,204,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,261,305,313,292,269,292,276,293],
[275,0,278,304,286,285,264,260,271,285],
[290,273,0,274,264,255,261,254,263,305],
[246,247,277,0,265,267,249,248,263,286],
[238,265,287,286,0,278,267,271,247,290],
[259,266,296,284,273,0,283,277,283,298],
[282,287,290,302,284,268,0,273,270,319],
[259,291,297,303,280,274,278,0,264,280],
[275,280,288,288,304,268,281,287,0,295],
[258,266,246,265,261,253,232,271,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,275,292,251,257,273,283,257,236],
[251,0,267,272,282,233,291,268,248,247],
[276,284,0,251,278,233,261,258,270,278],
[259,279,300,0,265,300,270,262,257,254],
[300,269,273,286,0,275,255,287,269,263],
[294,318,318,251,276,0,256,294,274,272],
[278,260,290,281,296,295,0,279,258,271],
[268,283,293,289,264,257,272,0,252,263],
[294,303,281,294,282,277,293,299,0,250],
[315,304,273,297,288,279,280,288,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,274,311,283,261,273,245,271,294],
[282,0,280,297,266,276,257,269,267,284],
[277,271,0,278,284,292,286,244,252,254],
[240,254,273,0,259,252,253,233,240,252],
[268,285,267,292,0,267,261,250,254,254],
[290,275,259,299,284,0,256,234,265,270],
[278,294,265,298,290,295,0,255,290,286],
[306,282,307,318,301,317,296,0,274,301],
[280,284,299,311,297,286,261,277,0,274],
[257,267,297,299,297,281,265,250,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,292,294,278,288,278,256,276,268],
[251,0,278,284,263,293,261,263,269,260],
[259,273,0,271,264,280,253,244,253,260],
[257,267,280,0,271,293,268,256,262,254],
[273,288,287,280,0,288,278,264,297,296],
[263,258,271,258,263,0,255,247,271,252],
[273,290,298,283,273,296,0,279,278,287],
[295,288,307,295,287,304,272,0,290,292],
[275,282,298,289,254,280,273,261,0,268],
[283,291,291,297,255,299,264,259,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,283,243,270,285,244,280,290,278],
[273,0,280,253,286,252,263,282,290,286],
[268,271,0,257,244,243,249,272,273,264],
[308,298,294,0,273,271,292,315,339,278],
[281,265,307,278,0,266,263,279,300,270],
[266,299,308,280,285,0,290,291,267,272],
[307,288,302,259,288,261,0,299,293,271],
[271,269,279,236,272,260,252,0,265,252],
[261,261,278,212,251,284,258,286,0,263],
[273,265,287,273,281,279,280,299,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,274,245,242,276,216,205,248,251],
[306,0,252,289,287,321,244,274,300,253],
[277,299,0,269,240,273,232,220,255,286],
[306,262,282,0,255,350,260,207,278,246],
[309,264,311,296,0,326,264,285,307,233],
[275,230,278,201,225,0,195,211,200,243],
[335,307,319,291,287,356,0,273,279,300],
[346,277,331,344,266,340,278,0,258,296],
[303,251,296,273,244,351,272,293,0,279],
[300,298,265,305,318,308,251,255,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,273,278,310,282,317,307,296,287],
[261,0,261,280,292,261,277,268,285,268],
[278,290,0,273,301,277,298,294,302,294],
[273,271,278,0,290,280,301,306,288,265],
[241,259,250,261,0,251,278,252,257,254],
[269,290,274,271,300,0,297,287,297,271],
[234,274,253,250,273,254,0,254,283,255],
[244,283,257,245,299,264,297,0,287,265],
[255,266,249,263,294,254,268,264,0,268],
[264,283,257,286,297,280,296,286,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,288,290,272,291,271,250,293,268],
[261,0,278,269,262,261,271,255,260,259],
[263,273,0,271,264,274,278,268,279,259],
[261,282,280,0,267,276,268,277,292,273],
[279,289,287,284,0,284,287,273,299,265],
[260,290,277,275,267,0,286,279,289,271],
[280,280,273,283,264,265,0,264,288,269],
[301,296,283,274,278,272,287,0,290,276],
[258,291,272,259,252,262,263,261,0,268],
[283,292,292,278,286,280,282,275,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,279,290,302,303,296,297,275,307],
[264,0,265,272,255,267,288,281,268,293],
[272,286,0,263,251,283,279,299,279,279],
[261,279,288,0,270,246,275,314,285,276],
[249,296,300,281,0,282,276,317,275,274],
[248,284,268,305,269,0,279,293,290,255],
[255,263,272,276,275,272,0,289,293,310],
[254,270,252,237,234,258,262,0,249,283],
[276,283,272,266,276,261,258,302,0,290],
[244,258,272,275,277,296,241,268,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,264,251,263,276,260,260,261,237],
[277,0,267,240,276,262,266,268,256,268],
[287,284,0,266,295,284,267,285,273,240],
[300,311,285,0,273,296,304,303,276,273],
[288,275,256,278,0,292,268,274,286,228],
[275,289,267,255,259,0,274,279,272,251],
[291,285,284,247,283,277,0,278,266,265],
[291,283,266,248,277,272,273,0,267,247],
[290,295,278,275,265,279,285,284,0,277],
[314,283,311,278,323,300,286,304,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,264,267,275,280,273,267,292,280],
[283,0,251,264,265,290,292,284,289,273],
[287,300,0,281,270,291,290,295,308,280],
[284,287,270,0,288,304,296,305,292,285],
[276,286,281,263,0,294,281,277,280,296],
[271,261,260,247,257,0,266,286,268,277],
[278,259,261,255,270,285,0,288,271,275],
[284,267,256,246,274,265,263,0,263,289],
[259,262,243,259,271,283,280,288,0,272],
[271,278,271,266,255,274,276,262,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,279,275,284,277,274,262,270,267],
[279,0,289,292,290,290,293,284,274,267],
[272,262,0,283,274,277,267,261,275,252],
[276,259,268,0,265,281,279,254,267,259],
[267,261,277,286,0,270,275,255,267,264],
[274,261,274,270,281,0,275,263,275,265],
[277,258,284,272,276,276,0,262,268,277],
[289,267,290,297,296,288,289,0,283,275],
[281,277,276,284,284,276,283,268,0,267],
[284,284,299,292,287,286,274,276,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,323,350,251,287,355,307,272,277],
[232,0,242,305,205,244,222,230,266,261],
[228,309,0,306,287,248,295,235,251,304],
[201,246,245,0,216,209,235,217,196,258],
[300,346,264,335,0,260,277,319,254,290],
[264,307,303,342,291,0,270,315,305,309],
[196,329,256,316,274,281,0,308,254,253],
[244,321,316,334,232,236,243,0,269,216],
[279,285,300,355,297,246,297,282,0,332],
[274,290,247,293,261,242,298,335,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,262,286,288,279,278,257,284,263],
[287,0,273,266,261,254,271,272,261,263],
[289,278,0,280,277,266,280,282,287,289],
[265,285,271,0,261,263,268,283,292,278],
[263,290,274,290,0,276,282,269,268,282],
[272,297,285,288,275,0,282,284,286,285],
[273,280,271,283,269,269,0,279,305,281],
[294,279,269,268,282,267,272,0,298,280],
[267,290,264,259,283,265,246,253,0,286],
[288,288,262,273,269,266,270,271,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,272,268,332,262,289,335,281,237],
[162,0,179,170,260,190,196,264,184,145],
[279,372,0,224,313,218,278,314,283,265],
[283,381,327,0,281,294,231,282,297,299],
[219,291,238,270,0,203,236,234,286,247],
[289,361,333,257,348,0,227,322,332,337],
[262,355,273,320,315,324,0,281,273,280],
[216,287,237,269,317,229,270,0,267,192],
[270,367,268,254,265,219,278,284,0,290],
[314,406,286,252,304,214,271,359,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,272,258,260,279,286,254,284,271],
[293,0,281,271,272,281,309,264,278,282],
[279,270,0,259,264,286,296,272,296,265],
[293,280,292,0,289,295,294,268,283,267],
[291,279,287,262,0,282,302,276,286,281],
[272,270,265,256,269,0,287,284,275,274],
[265,242,255,257,249,264,0,261,269,250],
[297,287,279,283,275,267,290,0,288,273],
[267,273,255,268,265,276,282,263,0,261],
[280,269,286,284,270,277,301,278,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,279,316,290,250,260,264,241,261],
[311,0,313,300,331,281,296,288,291,269],
[272,238,0,300,291,285,302,238,258,258],
[235,251,251,0,295,234,289,221,265,248],
[261,220,260,256,0,237,235,193,223,242],
[301,270,266,317,314,0,263,224,255,260],
[291,255,249,262,316,288,0,255,219,245],
[287,263,313,330,358,327,296,0,283,266],
[310,260,293,286,328,296,332,268,0,317],
[290,282,293,303,309,291,306,285,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,281,273,264,279,264,267,286,278],
[266,0,273,265,277,283,271,269,281,291],
[270,278,0,275,272,293,283,272,283,286],
[278,286,276,0,280,271,271,276,275,299],
[287,274,279,271,0,280,279,267,268,290],
[272,268,258,280,271,0,265,265,271,272],
[287,280,268,280,272,286,0,290,280,292],
[284,282,279,275,284,286,261,0,281,300],
[265,270,268,276,283,280,271,270,0,273],
[273,260,265,252,261,279,259,251,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,308,289,304,281,271,298,282,273],
[279,0,292,293,285,283,278,280,257,280],
[243,259,0,274,282,262,278,269,257,276],
[262,258,277,0,292,270,288,275,252,273],
[247,266,269,259,0,258,253,255,253,262],
[270,268,289,281,293,0,281,287,269,265],
[280,273,273,263,298,270,0,286,267,273],
[253,271,282,276,296,264,265,0,247,279],
[269,294,294,299,298,282,284,304,0,277],
[278,271,275,278,289,286,278,272,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,281,274,269,282,306,286,293,297],
[274,0,288,269,264,272,290,270,287,271],
[270,263,0,281,270,280,301,282,291,297],
[277,282,270,0,288,267,290,279,282,290],
[282,287,281,263,0,268,286,302,286,288],
[269,279,271,284,283,0,296,288,275,293],
[245,261,250,261,265,255,0,279,269,268],
[265,281,269,272,249,263,272,0,272,266],
[258,264,260,269,265,276,282,279,0,267],
[254,280,254,261,263,258,283,285,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,265,275,284,251,260,267,243,275],
[299,0,280,298,298,275,285,301,271,275],
[286,271,0,302,283,275,261,276,272,287],
[276,253,249,0,270,256,266,265,258,269],
[267,253,268,281,0,275,246,285,253,256],
[300,276,276,295,276,0,276,291,257,279],
[291,266,290,285,305,275,0,300,283,286],
[284,250,275,286,266,260,251,0,263,259],
[308,280,279,293,298,294,268,288,0,282],
[276,276,264,282,295,272,265,292,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,266,272,244,275,263,286,251,244],
[303,0,275,273,261,304,276,294,277,270],
[285,276,0,281,281,288,268,279,269,284],
[279,278,270,0,264,294,289,289,272,277],
[307,290,270,287,0,295,271,300,284,284],
[276,247,263,257,256,0,250,286,234,271],
[288,275,283,262,280,301,0,300,248,267],
[265,257,272,262,251,265,251,0,251,258],
[300,274,282,279,267,317,303,300,0,270],
[307,281,267,274,267,280,284,293,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,272,278,272,263,288,279,265,290],
[281,0,270,276,271,257,277,270,263,300],
[279,281,0,272,279,258,270,267,265,290],
[273,275,279,0,271,269,280,266,264,277],
[279,280,272,280,0,243,270,261,265,267],
[288,294,293,282,308,0,295,280,268,310],
[263,274,281,271,281,256,0,282,281,297],
[272,281,284,285,290,271,269,0,269,286],
[286,288,286,287,286,283,270,282,0,298],
[261,251,261,274,284,241,254,265,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,341,297,266,245,257,268,289,271],
[279,0,266,269,276,277,252,282,324,293],
[210,285,0,249,287,249,283,278,296,289],
[254,282,302,0,284,265,260,275,315,287],
[285,275,264,267,0,257,219,270,277,275],
[306,274,302,286,294,0,263,325,308,302],
[294,299,268,291,332,288,0,319,343,284],
[283,269,273,276,281,226,232,0,338,243],
[262,227,255,236,274,243,208,213,0,247],
[280,258,262,264,276,249,267,308,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,268,288,289,275,304,326,270,283],
[269,0,239,243,296,253,259,300,276,274],
[283,312,0,282,288,265,245,307,277,271],
[263,308,269,0,304,310,280,315,256,286],
[262,255,263,247,0,205,244,312,278,257],
[276,298,286,241,346,0,321,333,299,330],
[247,292,306,271,307,230,0,296,268,303],
[225,251,244,236,239,218,255,0,274,248],
[281,275,274,295,273,252,283,277,0,287],
[268,277,280,265,294,221,248,303,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,279,281,285,275,274,267,274,283],
[276,0,288,289,295,281,287,280,272,298],
[272,263,0,276,293,260,285,294,291,312],
[270,262,275,0,274,276,271,263,280,277],
[266,256,258,277,0,293,287,269,260,309],
[276,270,291,275,258,0,293,287,263,300],
[277,264,266,280,264,258,0,261,287,276],
[284,271,257,288,282,264,290,0,267,291],
[277,279,260,271,291,288,264,284,0,293],
[268,253,239,274,242,251,275,260,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,282,292,327,265,276,231,269,305],
[293,0,295,310,308,324,267,274,250,253],
[269,256,0,284,314,268,274,278,278,270],
[259,241,267,0,282,265,216,250,218,314],
[224,243,237,269,0,211,202,231,144,235],
[286,227,283,286,340,0,247,286,275,278],
[275,284,277,335,349,304,0,281,274,326],
[320,277,273,301,320,265,270,0,227,321],
[282,301,273,333,407,276,277,324,0,293],
[246,298,281,237,316,273,225,230,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,245,260,266,260,256,264,272,276],
[301,0,281,278,295,275,281,290,286,284],
[306,270,0,279,283,268,275,285,274,298],
[291,273,272,0,287,269,276,276,273,275],
[285,256,268,264,0,265,257,269,255,274],
[291,276,283,282,286,0,301,281,281,274],
[295,270,276,275,294,250,0,271,285,282],
[287,261,266,275,282,270,280,0,287,269],
[279,265,277,278,296,270,266,264,0,271],
[275,267,253,276,277,277,269,282,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,277,265,275,261,272,278,295,296],
[267,0,279,278,276,272,271,271,287,287],
[274,272,0,280,250,279,259,274,285,275],
[286,273,271,0,266,270,271,275,306,287],
[276,275,301,285,0,261,291,278,303,293],
[290,279,272,281,290,0,262,288,293,282],
[279,280,292,280,260,289,0,289,306,292],
[273,280,277,276,273,263,262,0,289,272],
[256,264,266,245,248,258,245,262,0,276],
[255,264,276,264,258,269,259,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,273,263,270,280,265,285,263,282],
[312,0,290,301,288,302,294,291,280,273],
[278,261,0,282,279,294,270,291,272,258],
[288,250,269,0,261,282,281,280,254,269],
[281,263,272,290,0,287,282,289,272,270],
[271,249,257,269,264,0,261,279,260,251],
[286,257,281,270,269,290,0,277,271,259],
[266,260,260,271,262,272,274,0,276,260],
[288,271,279,297,279,291,280,275,0,273],
[269,278,293,282,281,300,292,291,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,288,261,272,299,281,270,306,293],
[281,0,273,282,271,297,280,287,308,290],
[263,278,0,275,269,282,278,288,285,275],
[290,269,276,0,264,285,280,281,289,287],
[279,280,282,287,0,298,299,288,303,269],
[252,254,269,266,253,0,272,275,271,262],
[270,271,273,271,252,279,0,283,295,274],
[281,264,263,270,263,276,268,0,290,286],
[245,243,266,262,248,280,256,261,0,263],
[258,261,276,264,282,289,277,265,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,268,257,279,293,284,282,266,289],
[274,0,264,259,273,272,269,290,274,287],
[283,287,0,282,279,282,279,281,271,288],
[294,292,269,0,296,287,275,288,282,284],
[272,278,272,255,0,271,281,271,276,287],
[258,279,269,264,280,0,266,275,264,292],
[267,282,272,276,270,285,0,277,259,273],
[269,261,270,263,280,276,274,0,260,292],
[285,277,280,269,275,287,292,291,0,298],
[262,264,263,267,264,259,278,259,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,293,265,272,300,276,305,304,302],
[259,0,234,261,250,282,270,297,298,284],
[258,317,0,316,278,303,267,311,298,299],
[286,290,235,0,270,300,267,311,309,293],
[279,301,273,281,0,296,307,318,304,291],
[251,269,248,251,255,0,263,287,276,255],
[275,281,284,284,244,288,0,284,289,306],
[246,254,240,240,233,264,267,0,300,257],
[247,253,253,242,247,275,262,251,0,282],
[249,267,252,258,260,296,245,294,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,299,280,302,255,249,298,268,214],
[419,0,369,309,383,280,280,385,318,273],
[252,182,0,307,288,307,241,263,239,279],
[271,242,244,0,244,250,249,313,251,210],
[249,168,263,307,0,211,231,336,216,199],
[296,271,244,301,340,0,230,367,332,295],
[302,271,310,302,320,321,0,313,306,207],
[253,166,288,238,215,184,238,0,227,213],
[283,233,312,300,335,219,245,324,0,221],
[337,278,272,341,352,256,344,338,330,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,189,3,192,385,355,382,192,193],
[362,0,196,196,196,196,169,196,362,362],
[362,355,0,169,192,385,169,548,169,359],
[548,355,382,0,192,385,355,382,358,548],
[359,355,359,359,0,193,166,359,166,359],
[166,355,166,166,358,0,166,548,169,359],
[196,382,382,196,385,385,0,382,385,193],
[169,355,3,169,192,3,169,0,169,362],
[359,189,382,193,385,382,166,382,0,359],
[358,189,192,3,192,192,358,189,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,261,270,269,256,262,280,238,273],
[273,0,264,267,254,269,266,259,244,252],
[290,287,0,281,274,275,287,277,263,272],
[281,284,270,0,264,276,287,281,251,261],
[282,297,277,287,0,283,283,297,280,263],
[295,282,276,275,268,0,279,293,259,269],
[289,285,264,264,268,272,0,277,248,255],
[271,292,274,270,254,258,274,0,251,272],
[313,307,288,300,271,292,303,300,0,306],
[278,299,279,290,288,282,296,279,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,273,242,266,288,270,269,258,245],
[259,0,236,256,255,257,254,254,263,236],
[278,315,0,254,272,262,268,255,255,253],
[309,295,297,0,289,317,272,288,255,276],
[285,296,279,262,0,278,256,283,287,252],
[263,294,289,234,273,0,255,256,244,223],
[281,297,283,279,295,296,0,284,295,253],
[282,297,296,263,268,295,267,0,268,261],
[293,288,296,296,264,307,256,283,0,247],
[306,315,298,275,299,328,298,290,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,254,253,286,251,273,250,280,266],
[306,0,295,288,285,326,309,305,274,288],
[297,256,0,270,276,302,276,276,265,278],
[298,263,281,0,282,283,299,276,304,282],
[265,266,275,269,0,257,277,278,264,253],
[300,225,249,268,294,0,277,261,278,265],
[278,242,275,252,274,274,0,262,280,273],
[301,246,275,275,273,290,289,0,283,269],
[271,277,286,247,287,273,271,268,0,275],
[285,263,273,269,298,286,278,282,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,270,277,274,184,328,215,275,197],
[288,0,210,226,320,191,354,283,271,239],
[281,341,0,274,311,280,290,343,255,196],
[274,325,277,0,301,252,286,283,371,254],
[277,231,240,250,0,311,231,310,267,206],
[367,360,271,299,240,0,312,377,405,275],
[223,197,261,265,320,239,0,261,247,289],
[336,268,208,268,241,174,290,0,303,269],
[276,280,296,180,284,146,304,248,0,291],
[354,312,355,297,345,276,262,282,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,251,225,271,266,264,250,254,280],
[257,0,247,242,239,242,249,251,256,287],
[300,304,0,232,286,267,279,276,285,270],
[326,309,319,0,274,309,268,310,309,320],
[280,312,265,277,0,257,279,280,286,293],
[285,309,284,242,294,0,301,276,290,330],
[287,302,272,283,272,250,0,278,290,317],
[301,300,275,241,271,275,273,0,286,295],
[297,295,266,242,265,261,261,265,0,277],
[271,264,281,231,258,221,234,256,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,265,284,285,280,276,273,277,264],
[281,0,269,291,290,269,282,271,271,279],
[286,282,0,287,273,268,281,277,285,283],
[267,260,264,0,265,274,270,277,275,263],
[266,261,278,286,0,272,264,279,278,271],
[271,282,283,277,279,0,279,275,275,286],
[275,269,270,281,287,272,0,282,274,273],
[278,280,274,274,272,276,269,0,269,258],
[274,280,266,276,273,276,277,282,0,275],
[287,272,268,288,280,265,278,293,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,272,255,265,242,258,277,239,258],
[282,0,260,279,283,247,288,264,255,261],
[279,291,0,297,315,276,293,316,280,255],
[296,272,254,0,281,287,291,315,246,263],
[286,268,236,270,0,267,273,293,270,242],
[309,304,275,264,284,0,286,303,243,262],
[293,263,258,260,278,265,0,294,255,260],
[274,287,235,236,258,248,257,0,263,258],
[312,296,271,305,281,308,296,288,0,317],
[293,290,296,288,309,289,291,293,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,282,267,299,308,299,294,306,276],
[252,0,251,252,273,285,272,257,280,266],
[269,300,0,267,292,281,287,269,280,263],
[284,299,284,0,285,292,280,295,277,250],
[252,278,259,266,0,245,256,299,248,256],
[243,266,270,259,306,0,258,295,251,248],
[252,279,264,271,295,293,0,278,248,276],
[257,294,282,256,252,256,273,0,266,272],
[245,271,271,274,303,300,303,285,0,264],
[275,285,288,301,295,303,275,279,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,372,403,291,393,317,287,234,287],
[163,0,320,354,325,391,249,286,246,371],
[179,231,0,315,221,313,196,269,190,154],
[148,197,236,0,271,292,200,218,212,188],
[260,226,330,280,0,340,191,257,253,186],
[158,160,238,259,211,0,229,189,195,149],
[234,302,355,351,360,322,0,278,341,292],
[264,265,282,333,294,362,273,0,289,251],
[317,305,361,339,298,356,210,262,0,283],
[264,180,397,363,365,402,259,300,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,278,283,276,299,272,291,278,284],
[268,0,282,290,273,305,291,276,275,283],
[273,269,0,283,284,299,268,260,297,268],
[268,261,268,0,274,307,275,271,302,268],
[275,278,267,277,0,303,280,263,293,285],
[252,246,252,244,248,0,255,254,260,244],
[279,260,283,276,271,296,0,272,293,276],
[260,275,291,280,288,297,279,0,291,268],
[273,276,254,249,258,291,258,260,0,264],
[267,268,283,283,266,307,275,283,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,278,257,270,267,264,242,273,247],
[289,0,283,262,273,296,282,274,290,296],
[273,268,0,247,253,251,273,251,267,266],
[294,289,304,0,291,292,300,264,293,270],
[281,278,298,260,0,277,282,278,286,263],
[284,255,300,259,274,0,284,264,275,263],
[287,269,278,251,269,267,0,279,273,262],
[309,277,300,287,273,287,272,0,291,280],
[278,261,284,258,265,276,278,260,0,262],
[304,255,285,281,288,288,289,271,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,267,240,264,258,254,264,258,261],
[297,0,268,274,291,260,261,251,277,275],
[284,283,0,251,279,258,256,261,302,307],
[311,277,300,0,294,272,276,275,275,293],
[287,260,272,257,0,243,258,260,273,270],
[293,291,293,279,308,0,271,276,287,282],
[297,290,295,275,293,280,0,295,300,300],
[287,300,290,276,291,275,256,0,296,277],
[293,274,249,276,278,264,251,255,0,270],
[290,276,244,258,281,269,251,274,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,297,305,255,283,276,259,285,252],
[258,0,258,273,262,272,261,253,262,261],
[254,293,0,287,265,279,278,245,271,273],
[246,278,264,0,251,261,277,253,289,268],
[296,289,286,300,0,290,288,277,294,262],
[268,279,272,290,261,0,289,286,311,287],
[275,290,273,274,263,262,0,259,278,262],
[292,298,306,298,274,265,292,0,295,278],
[266,289,280,262,257,240,273,256,0,272],
[299,290,278,283,289,264,289,273,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,274,280,294,280,265,284,287,283],
[282,0,279,295,278,284,279,282,275,281],
[277,272,0,282,287,287,273,285,284,285],
[271,256,269,0,297,274,257,284,275,280],
[257,273,264,254,0,273,258,278,272,296],
[271,267,264,277,278,0,254,284,271,293],
[286,272,278,294,293,297,0,287,279,291],
[267,269,266,267,273,267,264,0,269,271],
[264,276,267,276,279,280,272,282,0,285],
[268,270,266,271,255,258,260,280,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,279,270,287,285,245,263,296],
[267,0,284,270,266,270,284,267,277,271],
[278,267,0,284,264,267,284,270,269,272],
[272,281,267,0,276,279,285,266,273,270],
[281,285,287,275,0,279,284,282,274,288],
[264,281,284,272,272,0,275,273,259,269],
[266,267,267,266,267,276,0,267,264,276],
[306,284,281,285,269,278,284,0,274,270],
[288,274,282,278,277,292,287,277,0,275],
[255,280,279,281,263,282,275,281,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,302,289,300,280,271,297,308,257],
[222,0,292,265,261,220,210,238,304,278],
[249,259,0,299,234,252,269,222,292,185],
[262,286,252,0,269,201,282,226,341,275],
[251,290,317,282,0,222,247,283,291,273],
[271,331,299,350,329,0,338,308,305,300],
[280,341,282,269,304,213,0,304,263,271],
[254,313,329,325,268,243,247,0,305,305],
[243,247,259,210,260,246,288,246,0,261],
[294,273,366,276,278,251,280,246,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,295,290,274,267,296,268,288,282],
[252,0,264,275,261,258,261,289,277,273],
[256,287,0,272,265,274,284,294,302,267],
[261,276,279,0,280,282,281,281,292,285],
[277,290,286,271,0,256,274,300,262,270],
[284,293,277,269,295,0,276,269,280,275],
[255,290,267,270,277,275,0,266,290,268],
[283,262,257,270,251,282,285,0,296,276],
[263,274,249,259,289,271,261,255,0,274],
[269,278,284,266,281,276,283,275,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,281,329,284,284,302,290,286,291],
[291,0,279,323,301,318,291,294,237,289],
[270,272,0,325,289,308,305,294,271,287],
[222,228,226,0,232,279,282,251,252,238],
[267,250,262,319,0,265,310,292,271,276],
[267,233,243,272,286,0,269,273,249,258],
[249,260,246,269,241,282,0,262,223,247],
[261,257,257,300,259,278,289,0,261,263],
[265,314,280,299,280,302,328,290,0,298],
[260,262,264,313,275,293,304,288,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,254,259,277,273,269,280,298,226],
[283,0,271,286,296,257,271,272,303,273],
[297,280,0,285,302,261,276,278,313,245],
[292,265,266,0,286,294,292,273,278,267],
[274,255,249,265,0,270,267,279,260,232],
[278,294,290,257,281,0,275,245,263,261],
[282,280,275,259,284,276,0,292,279,290],
[271,279,273,278,272,306,259,0,287,270],
[253,248,238,273,291,288,272,264,0,250],
[325,278,306,284,319,290,261,281,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,308,288,274,324,331,304,300,316],
[269,0,263,265,269,302,280,261,293,310],
[243,288,0,269,252,273,249,267,285,271],
[263,286,282,0,292,310,287,287,269,286],
[277,282,299,259,0,308,315,273,290,292],
[227,249,278,241,243,0,265,248,211,286],
[220,271,302,264,236,286,0,266,250,290],
[247,290,284,264,278,303,285,0,291,284],
[251,258,266,282,261,340,301,260,0,276],
[235,241,280,265,259,265,261,267,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,284,254,273,272,280,251,263,272],
[285,0,275,276,277,291,303,296,293,290],
[267,276,0,262,265,267,297,271,290,292],
[297,275,289,0,270,282,287,301,288,274],
[278,274,286,281,0,290,292,278,291,295],
[279,260,284,269,261,0,285,279,318,292],
[271,248,254,264,259,266,0,271,288,269],
[300,255,280,250,273,272,280,0,298,283],
[288,258,261,263,260,233,263,253,0,251],
[279,261,259,277,256,259,282,268,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,261,265,230,276,287,243,270,262],
[319,0,283,281,264,311,294,272,310,262],
[290,268,0,294,281,299,314,272,303,253],
[286,270,257,0,270,289,287,254,278,242],
[321,287,270,281,0,293,327,280,312,281],
[275,240,252,262,258,0,264,243,279,241],
[264,257,237,264,224,287,0,238,250,231],
[308,279,279,297,271,308,313,0,302,277],
[281,241,248,273,239,272,301,249,0,234],
[289,289,298,309,270,310,320,274,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,264,273,297,260,281,283,271,248],
[277,0,242,251,263,265,264,265,270,260],
[287,309,0,280,274,293,255,299,266,270],
[278,300,271,0,291,279,280,289,289,297],
[254,288,277,260,0,274,277,299,280,264],
[291,286,258,272,277,0,276,280,272,263],
[270,287,296,271,274,275,0,287,291,297],
[268,286,252,262,252,271,264,0,286,263],
[280,281,285,262,271,279,260,265,0,278],
[303,291,281,254,287,288,254,288,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,303,278,309,285,261,282,287,273],
[241,0,270,255,266,268,280,257,259,250],
[248,281,0,274,265,284,284,263,269,263],
[273,296,277,0,287,274,281,262,294,279],
[242,285,286,264,0,269,278,258,266,276],
[266,283,267,277,282,0,267,258,286,263],
[290,271,267,270,273,284,0,252,281,272],
[269,294,288,289,293,293,299,0,287,275],
[264,292,282,257,285,265,270,264,0,258],
[278,301,288,272,275,288,279,276,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,244,275,267,261,259,262,277,271],
[298,0,264,295,282,286,263,296,262,272],
[307,287,0,272,278,277,287,289,296,278],
[276,256,279,0,284,278,277,295,272,294],
[284,269,273,267,0,271,279,285,287,286],
[290,265,274,273,280,0,278,286,293,277],
[292,288,264,274,272,273,0,288,281,283],
[289,255,262,256,266,265,263,0,274,264],
[274,289,255,279,264,258,270,277,0,280],
[280,279,273,257,265,274,268,287,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,280,250,272,289,281,243,288,296],
[296,0,255,251,275,251,249,257,282,277],
[271,296,0,274,270,287,264,305,300,297],
[301,300,277,0,284,279,288,263,299,303],
[279,276,281,267,0,280,263,277,284,285],
[262,300,264,272,271,0,289,269,297,268],
[270,302,287,263,288,262,0,266,297,288],
[308,294,246,288,274,282,285,0,299,300],
[263,269,251,252,267,254,254,252,0,264],
[255,274,254,248,266,283,263,251,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,273,263,264,284,287,290,283,290],
[296,0,268,283,283,294,291,306,280,284],
[278,283,0,287,274,284,292,289,287,290],
[288,268,264,0,268,272,260,298,282,287],
[287,268,277,283,0,281,283,294,282,312],
[267,257,267,279,270,0,287,288,274,274],
[264,260,259,291,268,264,0,294,277,292],
[261,245,262,253,257,263,257,0,250,271],
[268,271,264,269,269,277,274,301,0,288],
[261,267,261,264,239,277,259,280,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,277,281,282,271,266,285,269,297],
[298,0,278,291,284,279,284,290,268,298],
[274,273,0,306,287,271,280,285,281,294],
[270,260,245,0,266,259,250,266,288,261],
[269,267,264,285,0,258,266,262,267,293],
[280,272,280,292,293,0,276,294,288,289],
[285,267,271,301,285,275,0,280,279,283],
[266,261,266,285,289,257,271,0,281,295],
[282,283,270,263,284,263,272,270,0,283],
[254,253,257,290,258,262,268,256,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,276,262,285,274,269,257,274,273],
[277,0,258,294,294,278,263,267,290,293],
[275,293,0,288,297,293,294,284,302,300],
[289,257,263,0,286,283,279,245,274,285],
[266,257,254,265,0,279,267,239,278,273],
[277,273,258,268,272,0,269,258,254,287],
[282,288,257,272,284,282,0,263,259,288],
[294,284,267,306,312,293,288,0,311,290],
[277,261,249,277,273,297,292,240,0,284],
[278,258,251,266,278,264,263,261,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,276,273,231,264,282,285,252,233],
[284,0,264,315,296,301,288,261,277,279],
[275,287,0,290,254,278,290,276,274,283],
[278,236,261,0,248,270,279,253,268,248],
[320,255,297,303,0,286,310,257,276,295],
[287,250,273,281,265,0,298,290,270,270],
[269,263,261,272,241,253,0,233,268,233],
[266,290,275,298,294,261,318,0,288,264],
[299,274,277,283,275,281,283,263,0,284],
[318,272,268,303,256,281,318,287,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,276,289,258,282,266,289,285,298],
[289,0,266,278,260,263,273,270,300,297],
[275,285,0,262,280,263,276,292,276,289],
[262,273,289,0,261,269,264,286,316,307],
[293,291,271,290,0,288,286,299,314,270],
[269,288,288,282,263,0,255,266,287,286],
[285,278,275,287,265,296,0,268,295,284],
[262,281,259,265,252,285,283,0,302,298],
[266,251,275,235,237,264,256,249,0,301],
[253,254,262,244,281,265,267,253,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,281,283,277,278,279,265,274,287],
[265,0,286,281,280,301,285,263,287,288],
[270,265,0,259,258,269,253,252,276,268],
[268,270,292,0,280,285,253,254,266,272],
[274,271,293,271,0,293,260,269,282,287],
[273,250,282,266,258,0,247,246,282,253],
[272,266,298,298,291,304,0,278,298,300],
[286,288,299,297,282,305,273,0,263,300],
[277,264,275,285,269,269,253,288,0,272],
[264,263,283,279,264,298,251,251,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,252,256,309,202,299,221,296,312],
[317,0,242,344,329,252,300,270,341,308],
[299,309,0,345,324,266,279,267,351,318],
[295,207,206,0,277,240,253,257,280,293],
[242,222,227,274,0,229,273,229,293,338],
[349,299,285,311,322,0,260,278,341,320],
[252,251,272,298,278,291,0,284,309,263],
[330,281,284,294,322,273,267,0,318,325],
[255,210,200,271,258,210,242,233,0,262],
[239,243,233,258,213,231,288,226,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,246,264,268,322,276,250,274,235],
[292,0,279,306,271,280,283,293,284,278],
[305,272,0,235,253,274,242,254,267,237],
[287,245,316,0,289,271,224,264,313,256],
[283,280,298,262,0,321,283,275,275,277],
[229,271,277,280,230,0,235,249,262,223],
[275,268,309,327,268,316,0,281,326,238],
[301,258,297,287,276,302,270,0,323,272],
[277,267,284,238,276,289,225,228,0,245],
[316,273,314,295,274,328,313,279,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,293,268,273,285,277,277,286,262],
[274,0,291,277,273,268,287,272,288,265],
[258,260,0,255,270,259,258,275,273,260],
[283,274,296,0,283,312,289,304,297,284],
[278,278,281,268,0,294,278,287,293,272],
[266,283,292,239,257,0,281,270,274,255],
[274,264,293,262,273,270,0,268,274,254],
[274,279,276,247,264,281,283,0,289,269],
[265,263,278,254,258,277,277,262,0,260],
[289,286,291,267,279,296,297,282,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,280,291,301,276,269,241,269],
[268,0,257,314,289,310,249,288,243,261],
[278,294,0,284,320,299,286,261,267,267],
[271,237,267,0,270,260,259,232,215,241],
[260,262,231,281,0,260,259,222,236,221],
[250,241,252,291,291,0,226,214,228,256],
[275,302,265,292,292,325,0,300,254,294],
[282,263,290,319,329,337,251,0,274,283],
[310,308,284,336,315,323,297,277,0,270],
[282,290,284,310,330,295,257,268,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,246,293,262,275,254,265,269,280],
[286,0,298,290,285,293,273,277,298,301],
[305,253,0,300,249,296,276,269,271,303],
[258,261,251,0,246,255,263,274,265,259],
[289,266,302,305,0,302,291,289,279,277],
[276,258,255,296,249,0,281,270,267,268],
[297,278,275,288,260,270,0,280,284,282],
[286,274,282,277,262,281,271,0,275,289],
[282,253,280,286,272,284,267,276,0,279],
[271,250,248,292,274,283,269,262,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,329,297,277,294,272,267,285,300],
[252,0,314,165,239,233,291,222,275,268],
[222,237,0,163,208,192,264,246,224,194],
[254,386,388,0,285,282,349,261,306,299],
[274,312,343,266,0,302,330,266,335,304],
[257,318,359,269,249,0,359,275,263,313],
[279,260,287,202,221,192,0,167,262,228],
[284,329,305,290,285,276,384,0,328,202],
[266,276,327,245,216,288,289,223,0,277],
[251,283,357,252,247,238,323,349,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,282,293,264,286,291,264,308,278],
[265,0,282,263,255,273,269,270,288,265],
[269,269,0,256,278,280,259,261,292,270],
[258,288,295,0,278,290,279,277,280,269],
[287,296,273,273,0,286,276,269,297,291],
[265,278,271,261,265,0,270,278,281,266],
[260,282,292,272,275,281,0,287,285,277],
[287,281,290,274,282,273,264,0,288,272],
[243,263,259,271,254,270,266,263,0,248],
[273,286,281,282,260,285,274,279,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,169,111,202,276,157,331,139,200],
[406,0,185,277,286,217,303,287,408,281],
[382,366,0,366,289,296,208,354,292,202],
[440,274,185,0,307,220,189,363,278,312],
[349,265,262,244,0,249,207,364,332,209],
[275,334,255,331,302,0,260,265,295,276],
[394,248,343,362,344,291,0,442,442,269],
[220,264,197,188,187,286,109,0,196,148],
[412,143,259,273,219,256,109,355,0,271],
[351,270,349,239,342,275,282,403,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,274,280,285,282,277,277,273,280],
[266,0,263,284,275,282,290,263,266,278],
[277,288,0,293,277,281,288,273,283,277],
[271,267,258,0,264,259,276,271,263,257],
[266,276,274,287,0,260,274,270,270,269],
[269,269,270,292,291,0,288,264,268,278],
[274,261,263,275,277,263,0,264,253,266],
[274,288,278,280,281,287,287,0,269,261],
[278,285,268,288,281,283,298,282,0,290],
[271,273,274,294,282,273,285,290,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,280,257,292,251,255,265,277,238],
[326,0,291,274,333,279,281,288,282,280],
[271,260,0,241,306,254,247,286,246,252],
[294,277,310,0,304,271,269,292,254,258],
[259,218,245,247,0,234,222,256,233,219],
[300,272,297,280,317,0,268,309,261,251],
[296,270,304,282,329,283,0,267,294,254],
[286,263,265,259,295,242,284,0,258,243],
[274,269,305,297,318,290,257,293,0,255],
[313,271,299,293,332,300,297,308,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,262,254,258,265,268,283,284,250],
[298,0,273,260,265,275,272,276,282,259],
[289,278,0,265,277,257,273,281,283,289],
[297,291,286,0,286,298,260,278,307,283],
[293,286,274,265,0,279,274,284,284,285],
[286,276,294,253,272,0,286,266,296,259],
[283,279,278,291,277,265,0,284,285,254],
[268,275,270,273,267,285,267,0,291,251],
[267,269,268,244,267,255,266,260,0,263],
[301,292,262,268,266,292,297,300,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,283,292,304,276,276,270,281],
[266,0,279,276,272,288,279,269,262,257],
[274,272,0,269,277,291,289,282,273,287],
[268,275,282,0,289,305,292,275,262,265],
[259,279,274,262,0,284,288,265,272,265],
[247,263,260,246,267,0,251,253,260,244],
[275,272,262,259,263,300,0,253,265,268],
[275,282,269,276,286,298,298,0,279,277],
[281,289,278,289,279,291,286,272,0,267],
[270,294,264,286,286,307,283,274,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,274,257,248,263,254,274,262,271],
[280,0,295,288,289,305,297,263,305,274],
[277,256,0,269,249,254,239,292,254,294],
[294,263,282,0,270,262,284,286,270,265],
[303,262,302,281,0,293,277,293,293,291],
[288,246,297,289,258,0,261,293,280,283],
[297,254,312,267,274,290,0,315,285,306],
[277,288,259,265,258,258,236,0,274,261],
[289,246,297,281,258,271,266,277,0,271],
[280,277,257,286,260,268,245,290,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,277,275,276,261,277,296,293,280],
[272,0,268,287,272,281,278,291,290,258],
[274,283,0,282,281,254,280,295,286,253],
[276,264,269,0,282,264,279,276,284,273],
[275,279,270,269,0,263,292,285,286,265],
[290,270,297,287,288,0,279,286,306,279],
[274,273,271,272,259,272,0,272,314,273],
[255,260,256,275,266,265,279,0,278,247],
[258,261,265,267,265,245,237,273,0,253],
[271,293,298,278,286,272,278,304,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,282,282,266,255,285,284,264,294],
[299,0,296,278,226,276,283,277,293,253],
[269,255,0,285,261,268,321,302,240,259],
[269,273,266,0,289,258,312,279,241,268],
[285,325,290,262,0,237,314,302,269,284],
[296,275,283,293,314,0,300,302,268,274],
[266,268,230,239,237,251,0,271,209,239],
[267,274,249,272,249,249,280,0,203,281],
[287,258,311,310,282,283,342,348,0,305],
[257,298,292,283,267,277,312,270,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,271,269,267,247,273,290,266,287],
[263,0,264,279,269,275,268,301,260,286],
[280,287,0,258,272,273,301,275,284,290],
[282,272,293,0,297,262,288,309,263,303],
[284,282,279,254,0,286,289,289,276,297],
[304,276,278,289,265,0,284,303,258,280],
[278,283,250,263,262,267,0,283,263,276],
[261,250,276,242,262,248,268,0,244,311],
[285,291,267,288,275,293,288,307,0,302],
[264,265,261,248,254,271,275,240,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,178,148,239,213,418,308,187,266],
[226,0,229,179,261,276,374,352,187,336],
[373,322,0,239,340,399,306,377,231,405],
[403,372,312,0,293,332,391,340,235,411],
[312,290,211,258,0,354,335,369,298,472],
[338,275,152,219,197,0,324,379,225,312],
[133,177,245,160,216,227,0,315,237,299],
[243,199,174,211,182,172,236,0,193,406],
[364,364,320,316,253,326,314,358,0,354],
[285,215,146,140,79,239,252,145,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,291,280,314,295,313,276,265,315],
[246,0,213,238,259,231,265,246,235,257],
[260,338,0,290,289,282,316,281,271,281],
[271,313,261,0,281,271,290,282,267,280],
[237,292,262,270,0,267,285,249,276,261],
[256,320,269,280,284,0,283,272,244,268],
[238,286,235,261,266,268,0,259,254,268],
[275,305,270,269,302,279,292,0,257,275],
[286,316,280,284,275,307,297,294,0,289],
[236,294,270,271,290,283,283,276,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,266,295,293,287,292,295,275,297],
[265,0,267,286,269,259,271,263,264,276],
[285,284,0,286,285,271,303,284,276,281],
[256,265,265,0,274,276,263,276,280,272],
[258,282,266,277,0,259,277,271,275,271],
[264,292,280,275,292,0,295,294,291,295],
[259,280,248,288,274,256,0,269,271,282],
[256,288,267,275,280,257,282,0,272,271],
[276,287,275,271,276,260,280,279,0,272],
[254,275,270,279,280,256,269,280,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,275,272,283,272,278,289,288,298],
[271,0,280,273,294,293,294,296,285,291],
[276,271,0,257,293,279,285,289,268,279],
[279,278,294,0,293,294,274,310,291,301],
[268,257,258,258,0,276,257,281,288,281],
[279,258,272,257,275,0,268,275,281,285],
[273,257,266,277,294,283,0,293,283,279],
[262,255,262,241,270,276,258,0,265,276],
[263,266,283,260,263,270,268,286,0,275],
[253,260,272,250,270,266,272,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,265,259,293,282,289,278,303,264],
[273,0,279,277,271,261,306,274,280,265],
[286,272,0,254,287,264,291,285,294,261],
[292,274,297,0,290,293,315,297,303,287],
[258,280,264,261,0,274,280,269,285,257],
[269,290,287,258,277,0,300,289,280,284],
[262,245,260,236,271,251,0,256,257,264],
[273,277,266,254,282,262,295,0,283,269],
[248,271,257,248,266,271,294,268,0,253],
[287,286,290,264,294,267,287,282,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,280,284,289,274,274,274,276,281],
[277,0,294,279,292,289,307,292,268,297],
[271,257,0,267,273,275,267,274,272,279],
[267,272,284,0,285,290,264,274,270,294],
[262,259,278,266,0,269,262,266,263,263],
[277,262,276,261,282,0,272,272,269,277],
[277,244,284,287,289,279,0,290,268,276],
[277,259,277,277,285,279,261,0,285,267],
[275,283,279,281,288,282,283,266,0,292],
[270,254,272,257,288,274,275,284,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,291,267,250,270,261,261,308,246],
[291,0,279,261,297,271,285,291,329,271],
[260,272,0,255,251,272,267,276,313,269],
[284,290,296,0,243,280,266,248,298,282],
[301,254,300,308,0,279,280,268,317,259],
[281,280,279,271,272,0,284,282,310,274],
[290,266,284,285,271,267,0,262,315,289],
[290,260,275,303,283,269,289,0,341,273],
[243,222,238,253,234,241,236,210,0,211],
[305,280,282,269,292,277,262,278,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,271,291,274,282,299,262,271,273],
[288,0,279,275,274,272,282,268,275,263],
[280,272,0,264,283,281,290,280,280,274],
[260,276,287,0,276,278,278,275,284,274],
[277,277,268,275,0,281,274,268,281,255],
[269,279,270,273,270,0,293,267,261,279],
[252,269,261,273,277,258,0,272,264,253],
[289,283,271,276,283,284,279,0,291,260],
[280,276,271,267,270,290,287,260,0,264],
[278,288,277,277,296,272,298,291,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,293,267,298,297,298,276,293,292],
[249,0,266,264,266,284,266,248,259,269],
[258,285,0,270,291,302,282,269,264,280],
[284,287,281,0,294,285,272,285,276,279],
[253,285,260,257,0,296,278,250,238,264],
[254,267,249,266,255,0,254,245,251,265],
[253,285,269,279,273,297,0,277,285,282],
[275,303,282,266,301,306,274,0,281,277],
[258,292,287,275,313,300,266,270,0,280],
[259,282,271,272,287,286,269,274,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,259,247,260,258,254,261,278,263],
[288,0,293,311,256,316,271,290,331,283],
[292,258,0,269,267,267,254,266,278,276],
[304,240,282,0,307,287,292,311,328,365],
[291,295,284,244,0,305,279,258,313,299],
[293,235,284,264,246,0,276,278,295,276],
[297,280,297,259,272,275,0,290,295,285],
[290,261,285,240,293,273,261,0,306,299],
[273,220,273,223,238,256,256,245,0,222],
[288,268,275,186,252,275,266,252,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,306,300,262,306,290,297,276,276],
[233,0,243,249,281,281,290,254,273,277],
[245,308,0,285,271,301,269,289,242,282],
[251,302,266,0,263,304,279,296,269,233],
[289,270,280,288,0,278,282,271,260,240],
[245,270,250,247,273,0,282,242,262,251],
[261,261,282,272,269,269,0,262,265,251],
[254,297,262,255,280,309,289,0,287,247],
[275,278,309,282,291,289,286,264,0,281],
[275,274,269,318,311,300,300,304,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,271,271,256,284,262,266,267,259],
[275,0,254,293,267,296,283,268,286,276],
[280,297,0,268,293,292,288,278,284,286],
[280,258,283,0,276,298,278,277,289,255],
[295,284,258,275,0,286,280,276,287,275],
[267,255,259,253,265,0,265,251,270,249],
[289,268,263,273,271,286,0,268,276,261],
[285,283,273,274,275,300,283,0,287,278],
[284,265,267,262,264,281,275,264,0,262],
[292,275,265,296,276,302,290,273,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,293,217,259,223,246,268,246,310],
[335,0,363,296,286,257,314,347,286,332],
[258,188,0,187,203,194,197,249,240,229],
[334,255,364,0,298,297,256,291,288,293],
[292,265,348,253,0,257,277,259,293,288],
[328,294,357,254,294,0,316,318,319,344],
[305,237,354,295,274,235,0,286,268,292],
[283,204,302,260,292,233,265,0,251,272],
[305,265,311,263,258,232,283,300,0,239],
[241,219,322,258,263,207,259,279,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,257,258,285,269,273,277,264,273],
[288,0,275,259,280,285,280,284,263,285],
[294,276,0,278,283,293,289,300,267,299],
[293,292,273,0,307,296,296,271,271,290],
[266,271,268,244,0,268,273,269,270,261],
[282,266,258,255,283,0,271,272,258,272],
[278,271,262,255,278,280,0,288,278,280],
[274,267,251,280,282,279,263,0,268,284],
[287,288,284,280,281,293,273,283,0,288],
[278,266,252,261,290,279,271,267,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,274,266,245,263,259,261,272,265],
[289,0,277,274,275,270,281,279,294,272],
[277,274,0,282,256,259,272,280,273,290],
[285,277,269,0,283,275,289,265,288,290],
[306,276,295,268,0,274,282,276,284,267],
[288,281,292,276,277,0,290,271,307,297],
[292,270,279,262,269,261,0,288,298,275],
[290,272,271,286,275,280,263,0,301,265],
[279,257,278,263,267,244,253,250,0,266],
[286,279,261,261,284,254,276,286,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,279,230,299,318,359,190,338,273],
[298,0,325,250,272,328,267,220,327,295],
[272,226,0,288,267,262,292,221,252,311],
[321,301,263,0,317,325,284,196,229,327],
[252,279,284,234,0,344,310,267,294,376],
[233,223,289,226,207,0,249,249,212,262],
[192,284,259,267,241,302,0,204,240,279],
[361,331,330,355,284,302,347,0,288,270],
[213,224,299,322,257,339,311,263,0,339],
[278,256,240,224,175,289,272,281,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,280,277,302,285,293,319,272,298],
[266,0,276,270,271,271,280,296,275,262],
[271,275,0,279,295,277,296,306,257,301],
[274,281,272,0,295,277,277,309,278,303],
[249,280,256,256,0,256,251,293,271,269],
[266,280,274,274,295,0,270,309,276,291],
[258,271,255,274,300,281,0,287,267,255],
[232,255,245,242,258,242,264,0,227,255],
[279,276,294,273,280,275,284,324,0,290],
[253,289,250,248,282,260,296,296,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,272,279,285,274,279,293,283,279],
[263,0,265,262,276,264,272,277,267,261],
[279,286,0,276,288,281,275,300,267,291],
[272,289,275,0,278,264,271,286,274,269],
[266,275,263,273,0,281,275,281,255,258],
[277,287,270,287,270,0,255,292,273,275],
[272,279,276,280,276,296,0,297,276,297],
[258,274,251,265,270,259,254,0,258,275],
[268,284,284,277,296,278,275,293,0,274],
[272,290,260,282,293,276,254,276,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,280,250,291,296,281,281,273,282],
[251,0,279,250,264,282,253,257,262,245],
[271,272,0,276,267,272,287,265,282,266],
[301,301,275,0,281,301,298,275,292,277],
[260,287,284,270,0,287,301,272,267,273],
[255,269,279,250,264,0,239,248,253,255],
[270,298,264,253,250,312,0,281,275,271],
[270,294,286,276,279,303,270,0,273,290],
[278,289,269,259,284,298,276,278,0,274],
[269,306,285,274,278,296,280,261,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,270,303,275,274,289,294,301,310],
[270,0,251,275,273,287,269,261,268,254],
[281,300,0,286,292,279,280,281,275,260],
[248,276,265,0,269,270,260,279,282,257],
[276,278,259,282,0,253,275,279,291,265],
[277,264,272,281,298,0,289,280,296,279],
[262,282,271,291,276,262,0,277,290,260],
[257,290,270,272,272,271,274,0,286,266],
[250,283,276,269,260,255,261,265,0,260],
[241,297,291,294,286,272,291,285,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,252,264,271,277,261,265,246,255],
[288,0,282,299,299,301,309,289,274,297],
[299,269,0,276,282,303,298,274,265,300],
[287,252,275,0,265,276,283,264,281,274],
[280,252,269,286,0,286,300,279,279,288],
[274,250,248,275,265,0,284,290,252,271],
[290,242,253,268,251,267,0,255,254,272],
[286,262,277,287,272,261,296,0,268,301],
[305,277,286,270,272,299,297,283,0,296],
[296,254,251,277,263,280,279,250,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,255,280,285,235,221,273,280,278],
[312,0,298,289,318,269,280,307,305,287],
[296,253,0,243,282,222,256,233,258,316],
[271,262,308,0,307,299,286,297,269,284],
[266,233,269,244,0,230,264,250,253,272],
[316,282,329,252,321,0,287,274,286,303],
[330,271,295,265,287,264,0,295,285,278],
[278,244,318,254,301,277,256,0,261,282],
[271,246,293,282,298,265,266,290,0,287],
[273,264,235,267,279,248,273,269,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,234,274,337,251,288,239,287,256],
[275,0,241,314,347,308,273,287,309,254],
[317,310,0,312,348,305,258,281,290,289],
[277,237,239,0,305,280,211,279,252,286],
[214,204,203,246,0,278,167,190,185,245],
[300,243,246,271,273,0,207,264,220,273],
[263,278,293,340,384,344,0,344,353,338],
[312,264,270,272,361,287,207,0,285,269],
[264,242,261,299,366,331,198,266,0,313],
[295,297,262,265,306,278,213,282,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,211,242,280,250,261,257,263,248],
[287,0,278,255,284,293,317,299,304,269],
[340,273,0,308,321,306,329,324,283,314],
[309,296,243,0,308,285,301,288,250,255],
[271,267,230,243,0,255,272,264,251,255],
[301,258,245,266,296,0,270,273,273,254],
[290,234,222,250,279,281,0,284,251,225],
[294,252,227,263,287,278,267,0,284,250],
[288,247,268,301,300,278,300,267,0,248],
[303,282,237,296,296,297,326,301,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,269,309,273,284,275,276,281,287],
[280,0,286,296,284,286,271,283,272,288],
[282,265,0,279,279,300,257,283,273,262],
[242,255,272,0,261,265,253,260,264,260],
[278,267,272,290,0,268,256,273,269,275],
[267,265,251,286,283,0,277,265,267,266],
[276,280,294,298,295,274,0,304,285,283],
[275,268,268,291,278,286,247,0,252,280],
[270,279,278,287,282,284,266,299,0,277],
[264,263,289,291,276,285,268,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,272,277,275,268,254,251,265,239],
[305,0,263,280,285,260,285,301,247,302],
[279,288,0,265,247,289,267,280,260,272],
[274,271,286,0,286,272,275,285,281,321],
[276,266,304,265,0,280,251,305,284,284],
[283,291,262,279,271,0,280,294,256,278],
[297,266,284,276,300,271,0,299,298,267],
[300,250,271,266,246,257,252,0,288,279],
[286,304,291,270,267,295,253,263,0,279],
[312,249,279,230,267,273,284,272,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,255,258,307,298,267,242,260,259],
[227,0,230,249,247,258,214,237,227,231],
[296,321,0,311,297,326,283,284,273,266],
[293,302,240,0,312,291,245,237,277,286],
[244,304,254,239,0,301,254,193,221,230],
[253,293,225,260,250,0,236,221,235,284],
[284,337,268,306,297,315,0,266,265,320],
[309,314,267,314,358,330,285,0,318,324],
[291,324,278,274,330,316,286,233,0,276],
[292,320,285,265,321,267,231,227,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,240,273,267,266,245,304,260,245],
[280,0,257,262,272,259,263,287,267,266],
[311,294,0,271,292,293,288,297,275,261],
[278,289,280,0,259,265,267,290,272,264],
[284,279,259,292,0,276,265,292,268,255],
[285,292,258,286,275,0,271,308,258,279],
[306,288,263,284,286,280,0,314,277,274],
[247,264,254,261,259,243,237,0,246,247],
[291,284,276,279,283,293,274,305,0,253],
[306,285,290,287,296,272,277,304,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,343,295,274,290,301,281,317,274],
[243,0,286,268,295,241,261,264,274,267],
[208,265,0,237,273,216,245,256,239,232],
[256,283,314,0,306,274,267,314,264,282],
[277,256,278,245,0,266,255,266,253,256],
[261,310,335,277,285,0,284,296,282,296],
[250,290,306,284,296,267,0,292,295,266],
[270,287,295,237,285,255,259,0,271,273],
[234,277,312,287,298,269,256,280,0,284],
[277,284,319,269,295,255,285,278,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,305,281,277,264,254,252,245,228],
[267,0,268,255,247,259,222,233,235,244],
[246,283,0,255,263,258,241,235,246,251],
[270,296,296,0,248,292,283,245,261,266],
[274,304,288,303,0,275,258,276,259,259],
[287,292,293,259,276,0,281,274,266,253],
[297,329,310,268,293,270,0,276,268,260],
[299,318,316,306,275,277,275,0,262,287],
[306,316,305,290,292,285,283,289,0,271],
[323,307,300,285,292,298,291,264,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,287,276,273,269,271,276,264,268],
[291,0,290,279,267,282,276,284,282,285],
[264,261,0,262,276,259,258,269,266,277],
[275,272,289,0,282,273,276,284,280,269],
[278,284,275,269,0,268,263,284,288,274],
[282,269,292,278,283,0,285,286,274,282],
[280,275,293,275,288,266,0,297,289,288],
[275,267,282,267,267,265,254,0,260,284],
[287,269,285,271,263,277,262,291,0,273],
[283,266,274,282,277,269,263,267,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,261,293,252,261,264,276,280,241],
[289,0,307,351,280,233,228,218,272,243],
[290,244,0,342,292,278,252,263,314,211],
[258,200,209,0,272,242,201,250,223,219],
[299,271,259,279,0,246,235,264,308,205],
[290,318,273,309,305,0,270,306,294,240],
[287,323,299,350,316,281,0,266,311,237],
[275,333,288,301,287,245,285,0,298,285],
[271,279,237,328,243,257,240,253,0,191],
[310,308,340,332,346,311,314,266,360,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,273,273,273,274,289,282,284,271],
[275,0,276,281,275,287,288,277,285,292],
[278,275,0,280,281,277,286,279,290,274],
[278,270,271,0,272,266,277,262,270,269],
[278,276,270,279,0,293,285,274,286,276],
[277,264,274,285,258,0,271,263,282,280],
[262,263,265,274,266,280,0,265,272,282],
[269,274,272,289,277,288,286,0,287,286],
[267,266,261,281,265,269,279,264,0,279],
[280,259,277,282,275,271,269,265,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,263,267,284,255,250,247,276,225],
[279,0,261,286,283,251,237,272,263,247],
[288,290,0,291,323,277,274,280,261,256],
[284,265,260,0,290,264,255,294,276,275],
[267,268,228,261,0,260,227,269,242,262],
[296,300,274,287,291,0,267,282,298,295],
[301,314,277,296,324,284,0,284,301,269],
[304,279,271,257,282,269,267,0,286,261],
[275,288,290,275,309,253,250,265,0,279],
[326,304,295,276,289,256,282,290,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,246,256,250,275,300,270,285,268],
[280,0,262,287,282,283,281,309,276,266],
[305,289,0,284,268,313,311,331,306,269],
[295,264,267,0,256,298,291,286,279,279],
[301,269,283,295,0,298,285,318,288,276],
[276,268,238,253,253,0,294,289,269,255],
[251,270,240,260,266,257,0,282,254,258],
[281,242,220,265,233,262,269,0,269,279],
[266,275,245,272,263,282,297,282,0,248],
[283,285,282,272,275,296,293,272,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,309,292,206,269,257,335,238,281],
[271,0,273,318,278,243,266,251,222,235],
[242,278,0,239,234,233,161,210,253,203],
[259,233,312,0,239,313,245,287,153,259],
[345,273,317,312,0,317,267,379,285,279],
[282,308,318,238,234,0,251,248,226,212],
[294,285,390,306,284,300,0,287,257,315],
[216,300,341,264,172,303,264,0,309,305],
[313,329,298,398,266,325,294,242,0,325],
[270,316,348,292,272,339,236,246,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,272,252,260,280,268,269,296,269],
[275,0,262,267,273,277,248,273,285,265],
[279,289,0,274,276,296,280,279,294,281],
[299,284,277,0,251,316,261,290,293,286],
[291,278,275,300,0,288,282,282,285,293],
[271,274,255,235,263,0,279,256,282,278],
[283,303,271,290,269,272,0,278,293,282],
[282,278,272,261,269,295,273,0,284,270],
[255,266,257,258,266,269,258,267,0,275],
[282,286,270,265,258,273,269,281,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,267,269,244,260,251,263,248],
[260,0,273,273,257,256,261,238,273,253],
[272,278,0,280,270,251,265,262,265,258],
[284,278,271,0,283,272,265,256,265,271],
[282,294,281,268,0,256,281,276,272,264],
[307,295,300,279,295,0,291,275,287,292],
[291,290,286,286,270,260,0,278,283,275],
[300,313,289,295,275,276,273,0,288,301],
[288,278,286,286,279,264,268,263,0,261],
[303,298,293,280,287,259,276,250,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,283,281,279,280,277,283,270,289],
[270,0,286,270,290,271,279,266,271,264],
[268,265,0,252,270,259,272,255,265,258],
[270,281,299,0,287,264,273,273,278,289],
[272,261,281,264,0,256,270,247,256,269],
[271,280,292,287,295,0,269,265,278,269],
[274,272,279,278,281,282,0,267,278,272],
[268,285,296,278,304,286,284,0,270,274],
[281,280,286,273,295,273,273,281,0,281],
[262,287,293,262,282,282,279,277,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,289,276,277,282,281,270,294,293],
[235,0,285,259,266,230,269,239,281,262],
[262,266,0,267,246,277,278,257,296,273],
[275,292,284,0,278,274,292,279,270,290],
[274,285,305,273,0,279,268,261,290,278],
[269,321,274,277,272,0,333,276,323,319],
[270,282,273,259,283,218,0,256,292,305],
[281,312,294,272,290,275,295,0,289,317],
[257,270,255,281,261,228,259,262,0,278],
[258,289,278,261,273,232,246,234,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,276,262,263,246,272,243,260],
[266,0,271,260,275,268,241,266,259,264],
[274,280,0,275,263,281,261,265,258,277],
[275,291,276,0,259,268,263,267,266,257],
[289,276,288,292,0,283,274,304,286,287],
[288,283,270,283,268,0,265,281,243,269],
[305,310,290,288,277,286,0,281,270,307],
[279,285,286,284,247,270,270,0,270,270],
[308,292,293,285,265,308,281,281,0,306],
[291,287,274,294,264,282,244,281,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,268,269,257,281,272,293,294,307],
[284,0,256,274,283,275,277,289,289,286],
[283,295,0,290,274,280,306,311,316,314],
[282,277,261,0,295,286,292,304,293,314],
[294,268,277,256,0,271,291,302,297,307],
[270,276,271,265,280,0,282,279,304,298],
[279,274,245,259,260,269,0,275,278,302],
[258,262,240,247,249,272,276,0,289,288],
[257,262,235,258,254,247,273,262,0,281],
[244,265,237,237,244,253,249,263,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,276,272,285,285,260,278,262,284],
[273,0,277,285,289,282,272,262,280,278],
[275,274,0,283,280,280,260,284,270,269],
[279,266,268,0,269,281,264,255,274,283],
[266,262,271,282,0,274,252,247,276,255],
[266,269,271,270,277,0,261,249,269,271],
[291,279,291,287,299,290,0,275,281,290],
[273,289,267,296,304,302,276,0,293,295],
[289,271,281,277,275,282,270,258,0,273],
[267,273,282,268,296,280,261,256,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,269,262,239,250,255,280,249,260],
[289,0,286,277,271,289,282,281,287,277],
[282,265,0,261,263,289,275,273,261,261],
[289,274,290,0,270,295,273,291,279,296],
[312,280,288,281,0,293,283,300,266,261],
[301,262,262,256,258,0,252,257,258,262],
[296,269,276,278,268,299,0,278,280,288],
[271,270,278,260,251,294,273,0,259,273],
[302,264,290,272,285,293,271,292,0,278],
[291,274,290,255,290,289,263,278,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,285,287,290,282,266,293,294],
[276,0,285,288,272,292,305,281,279,280],
[271,266,0,271,278,278,285,283,291,287],
[266,263,280,0,264,279,287,254,299,286],
[264,279,273,287,0,268,294,270,270,285],
[261,259,273,272,283,0,290,270,290,285],
[269,246,266,264,257,261,0,267,266,285],
[285,270,268,297,281,281,284,0,277,292],
[258,272,260,252,281,261,285,274,0,278],
[257,271,264,265,266,266,266,259,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,260,254,259,277,243,271,236,243],
[300,0,236,276,259,259,248,292,246,243],
[291,315,0,309,292,291,277,288,293,260],
[297,275,242,0,259,291,260,313,264,251],
[292,292,259,292,0,275,243,285,260,250],
[274,292,260,260,276,0,247,293,264,260],
[308,303,274,291,308,304,0,298,254,260],
[280,259,263,238,266,258,253,0,233,254],
[315,305,258,287,291,287,297,318,0,291],
[308,308,291,300,301,291,291,297,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,273,282,262,269,279,289,265,275],
[286,0,263,297,268,289,311,282,277,291],
[278,288,0,290,281,278,292,278,268,292],
[269,254,261,0,257,265,267,272,258,270],
[289,283,270,294,0,281,294,285,280,311],
[282,262,273,286,270,0,276,272,274,268],
[272,240,259,284,257,275,0,264,268,276],
[262,269,273,279,266,279,287,0,268,284],
[286,274,283,293,271,277,283,283,0,268],
[276,260,259,281,240,283,275,267,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,274,290,289,283,275,294,313,296],
[266,0,310,313,273,297,310,284,287,296],
[277,241,0,267,256,274,265,262,265,264],
[261,238,284,0,276,259,263,271,236,277],
[262,278,295,275,0,277,297,279,263,281],
[268,254,277,292,274,0,260,253,274,276],
[276,241,286,288,254,291,0,268,257,264],
[257,267,289,280,272,298,283,0,262,281],
[238,264,286,315,288,277,294,289,0,277],
[255,255,287,274,270,275,287,270,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,267,280,277,301,281,262,269],
[275,0,288,289,281,294,291,281,263,270],
[267,263,0,281,275,258,284,273,265,272],
[284,262,270,0,257,265,292,261,260,265],
[271,270,276,294,0,289,285,271,276,276],
[274,257,293,286,262,0,266,263,253,263],
[250,260,267,259,266,285,0,241,268,242],
[270,270,278,290,280,288,310,0,276,267],
[289,288,286,291,275,298,283,275,0,273],
[282,281,279,286,275,288,309,284,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,264,272,289,267,273,282,271,269],
[294,0,269,296,312,281,277,310,278,281],
[287,282,0,290,290,279,276,303,260,264],
[279,255,261,0,277,246,264,276,267,265],
[262,239,261,274,0,256,261,289,259,267],
[284,270,272,305,295,0,255,279,270,272],
[278,274,275,287,290,296,0,304,275,277],
[269,241,248,275,262,272,247,0,243,265],
[280,273,291,284,292,281,276,308,0,274],
[282,270,287,286,284,279,274,286,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,279,269,290,286,293,297,284,273],
[290,0,275,284,282,287,284,304,276,282],
[272,276,0,290,279,287,278,299,264,286],
[282,267,261,0,278,259,258,280,255,261],
[261,269,272,273,0,283,266,297,257,258],
[265,264,264,292,268,0,286,324,261,286],
[258,267,273,293,285,265,0,282,263,263],
[254,247,252,271,254,227,269,0,237,231],
[267,275,287,296,294,290,288,314,0,300],
[278,269,265,290,293,265,288,320,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,283,253,297,325,279,292,302,286],
[250,0,252,250,233,267,297,245,247,244],
[268,299,0,293,261,289,308,265,280,319],
[298,301,258,0,258,300,296,265,260,246],
[254,318,290,293,0,315,319,284,260,297],
[226,284,262,251,236,0,291,263,256,242],
[272,254,243,255,232,260,0,249,225,251],
[259,306,286,286,267,288,302,0,250,303],
[249,304,271,291,291,295,326,301,0,272],
[265,307,232,305,254,309,300,248,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,261,270,266,263,267,267,283,264],
[244,0,260,257,255,255,262,252,269,273],
[290,291,0,289,268,297,282,276,299,280],
[281,294,262,0,273,268,274,278,284,280],
[285,296,283,278,0,260,267,271,292,278],
[288,296,254,283,291,0,280,267,284,269],
[284,289,269,277,284,271,0,259,292,265],
[284,299,275,273,280,284,292,0,294,286],
[268,282,252,267,259,267,259,257,0,252],
[287,278,271,271,273,282,286,265,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,259,282,248,273,282,274,281,287],
[287,0,287,284,258,298,288,281,266,285],
[292,264,0,270,281,292,310,269,275,287],
[269,267,281,0,255,289,287,271,285,265],
[303,293,270,296,0,313,307,300,277,280],
[278,253,259,262,238,0,293,278,257,273],
[269,263,241,264,244,258,0,252,238,254],
[277,270,282,280,251,273,299,0,265,266],
[270,285,276,266,274,294,313,286,0,290],
[264,266,264,286,271,278,297,285,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,256,269,275,292,260,278,311,297],
[270,0,278,243,254,265,268,256,281,250],
[295,273,0,249,270,265,260,260,286,280],
[282,308,302,0,282,294,271,274,309,285],
[276,297,281,269,0,273,276,261,292,257],
[259,286,286,257,278,0,266,260,280,277],
[291,283,291,280,275,285,0,279,297,278],
[273,295,291,277,290,291,272,0,297,277],
[240,270,265,242,259,271,254,254,0,251],
[254,301,271,266,294,274,273,274,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,282,289,270,288,273,291,275,295],
[270,0,288,297,260,288,264,272,283,285],
[269,263,0,271,257,279,250,258,273,302],
[262,254,280,0,250,266,255,269,265,284],
[281,291,294,301,0,299,278,292,267,310],
[263,263,272,285,252,0,261,268,260,290],
[278,287,301,296,273,290,0,297,293,301],
[260,279,293,282,259,283,254,0,267,304],
[276,268,278,286,284,291,258,284,0,289],
[256,266,249,267,241,261,250,247,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,261,251,250,254,281,251,271,272],
[303,0,274,270,303,274,303,301,289,293],
[290,277,0,273,263,237,290,259,265,264],
[300,281,278,0,289,271,321,285,275,298],
[301,248,288,262,0,276,289,272,267,286],
[297,277,314,280,275,0,288,283,284,293],
[270,248,261,230,262,263,0,265,270,282],
[300,250,292,266,279,268,286,0,265,288],
[280,262,286,276,284,267,281,286,0,279],
[279,258,287,253,265,258,269,263,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,284,280,272,277,289,263,283,284],
[291,0,292,295,280,275,303,279,288,280],
[267,259,0,279,244,247,280,284,277,273],
[271,256,272,0,271,249,274,246,284,277],
[279,271,307,280,0,268,284,275,296,283],
[274,276,304,302,283,0,293,274,291,293],
[262,248,271,277,267,258,0,254,268,270],
[288,272,267,305,276,277,297,0,301,284],
[268,263,274,267,255,260,283,250,0,275],
[267,271,278,274,268,258,281,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,293,251,288,305,273,279,283,284],
[281,0,264,282,284,273,279,273,277,277],
[258,287,0,273,290,251,270,279,256,267],
[300,269,278,0,293,303,290,263,266,281],
[263,267,261,258,0,277,242,264,266,274],
[246,278,300,248,274,0,274,249,296,271],
[278,272,281,261,309,277,0,293,292,303],
[272,278,272,288,287,302,258,0,286,302],
[268,274,295,285,285,255,259,265,0,288],
[267,274,284,270,277,280,248,249,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,290,262,307,250,302,254,284,289],
[287,0,291,255,265,282,290,286,274,290],
[261,260,0,261,270,272,269,281,273,278],
[289,296,290,0,280,316,308,295,262,311],
[244,286,281,271,0,289,322,277,278,290],
[301,269,279,235,262,0,266,292,261,285],
[249,261,282,243,229,285,0,263,280,289],
[297,265,270,256,274,259,288,0,257,287],
[267,277,278,289,273,290,271,294,0,295],
[262,261,273,240,261,266,262,264,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,318,262,285,284,291,294,285,279],
[269,0,304,290,302,303,303,315,284,253],
[233,247,0,244,276,258,267,257,261,246],
[289,261,307,0,288,310,295,303,285,274],
[266,249,275,263,0,280,276,297,265,278],
[267,248,293,241,271,0,277,300,260,265],
[260,248,284,256,275,274,0,283,291,240],
[257,236,294,248,254,251,268,0,255,238],
[266,267,290,266,286,291,260,296,0,256],
[272,298,305,277,273,286,311,313,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,285,306,279,275,293,275,301,287],
[253,0,269,274,269,260,258,263,300,271],
[266,282,0,298,275,268,289,269,301,297],
[245,277,253,0,259,259,261,263,310,290],
[272,282,276,292,0,282,274,276,303,283],
[276,291,283,292,269,0,280,273,294,290],
[258,293,262,290,277,271,0,274,290,276],
[276,288,282,288,275,278,277,0,312,293],
[250,251,250,241,248,257,261,239,0,272],
[264,280,254,261,268,261,275,258,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,239,306,273,263,279,293,268,315],
[276,0,283,303,272,299,286,279,277,289],
[312,268,0,323,294,298,291,302,289,321],
[245,248,228,0,249,261,276,261,252,270],
[278,279,257,302,0,277,316,290,252,325],
[288,252,253,290,274,0,269,298,260,289],
[272,265,260,275,235,282,0,263,227,309],
[258,272,249,290,261,253,288,0,262,306],
[283,274,262,299,299,291,324,289,0,313],
[236,262,230,281,226,262,242,245,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,294,314,295,285,257,263,297,307],
[265,0,285,300,282,273,238,266,256,295],
[257,266,0,274,237,251,243,248,203,262],
[237,251,277,0,248,235,260,242,230,277],
[256,269,314,303,0,262,250,266,248,282],
[266,278,300,316,289,0,264,283,264,303],
[294,313,308,291,301,287,0,277,263,313],
[288,285,303,309,285,268,274,0,240,297],
[254,295,348,321,303,287,288,311,0,317],
[244,256,289,274,269,248,238,254,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,252,272,258,256,274,260,260,222],
[310,0,277,267,278,287,287,302,307,270],
[299,274,0,272,270,287,282,280,280,284],
[279,284,279,0,289,285,287,266,275,271],
[293,273,281,262,0,266,292,281,278,284],
[295,264,264,266,285,0,284,266,270,277],
[277,264,269,264,259,267,0,286,276,273],
[291,249,271,285,270,285,265,0,284,260],
[291,244,271,276,273,281,275,267,0,267],
[329,281,267,280,267,274,278,291,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,313,269,260,281,298,276,321,296],
[262,0,311,260,250,275,296,269,307,295],
[238,240,0,236,239,267,257,239,268,251],
[282,291,315,0,305,308,310,272,307,318],
[291,301,312,246,0,309,310,257,316,321],
[270,276,284,243,242,0,287,252,295,278],
[253,255,294,241,241,264,0,239,279,239],
[275,282,312,279,294,299,312,0,299,278],
[230,244,283,244,235,256,272,252,0,258],
[255,256,300,233,230,273,312,273,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,318,130,138,265,237,207,174,239],
[342,0,282,238,247,373,247,186,247,282],
[233,269,0,129,138,330,298,176,237,254],
[421,313,422,0,168,299,376,285,313,344],
[413,304,413,383,0,330,343,306,239,365],
[286,178,221,252,221,0,186,142,173,282],
[314,304,253,175,208,365,0,306,209,304],
[344,365,375,266,245,409,245,0,239,365],
[377,304,314,238,312,378,342,312,0,398],
[312,269,297,207,186,269,247,186,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,280,281,289,311,265,277,262,298],
[267,0,269,288,273,298,278,281,292,298],
[271,282,0,289,276,299,276,281,271,302],
[270,263,262,0,284,289,267,259,264,283],
[262,278,275,267,0,290,266,264,272,298],
[240,253,252,262,261,0,255,267,244,271],
[286,273,275,284,285,296,0,277,287,310],
[274,270,270,292,287,284,274,0,254,286],
[289,259,280,287,279,307,264,297,0,322],
[253,253,249,268,253,280,241,265,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,324,279,269,206,250,270,312,287],
[300,0,352,321,219,242,326,316,239,294],
[227,199,0,294,252,238,276,267,220,257],
[272,230,257,0,242,285,298,268,193,236],
[282,332,299,309,0,305,325,320,266,287],
[345,309,313,266,246,0,301,281,308,292],
[301,225,275,253,226,250,0,278,186,273],
[281,235,284,283,231,270,273,0,251,253],
[239,312,331,358,285,243,365,300,0,283],
[264,257,294,315,264,259,278,298,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,358,259,288,268,282,303,324,302],
[239,0,276,269,259,265,256,289,325,293],
[193,275,0,213,280,216,223,277,243,224],
[292,282,338,0,260,260,238,308,314,287],
[263,292,271,291,0,283,259,286,271,262],
[283,286,335,291,268,0,219,298,274,310],
[269,295,328,313,292,332,0,317,298,272],
[248,262,274,243,265,253,234,0,265,203],
[227,226,308,237,280,277,253,286,0,222],
[249,258,327,264,289,241,279,348,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,311,252,312,246,273,289,304,304],
[267,0,282,266,301,255,293,305,315,301],
[240,269,0,281,286,250,256,251,260,258],
[299,285,270,0,305,283,277,300,307,273],
[239,250,265,246,0,247,274,269,273,253],
[305,296,301,268,304,0,279,312,320,286],
[278,258,295,274,277,272,0,277,307,287],
[262,246,300,251,282,239,274,0,292,285],
[247,236,291,244,278,231,244,259,0,265],
[247,250,293,278,298,265,264,266,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,297,263,270,292,277,268,269,263],
[243,0,252,240,262,245,240,256,230,264],
[254,299,0,277,267,282,274,275,234,264],
[288,311,274,0,304,288,283,297,297,267],
[281,289,284,247,0,267,275,279,252,272],
[259,306,269,263,284,0,288,287,271,267],
[274,311,277,268,276,263,0,290,244,269],
[283,295,276,254,272,264,261,0,271,264],
[282,321,317,254,299,280,307,280,0,287],
[288,287,287,284,279,284,282,287,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,284,275,292,283,285,288,264,270],
[273,0,274,282,275,271,269,277,253,277],
[267,277,0,295,273,274,278,273,259,253],
[276,269,256,0,278,275,283,267,257,267],
[259,276,278,273,0,267,280,281,277,275],
[268,280,277,276,284,0,295,291,252,257],
[266,282,273,268,271,256,0,270,250,263],
[263,274,278,284,270,260,281,0,250,260],
[287,298,292,294,274,299,301,301,0,265],
[281,274,298,284,276,294,288,291,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,289,275,264,263,277,267,279,264],
[276,0,296,275,274,261,269,275,274,257],
[262,255,0,250,278,250,256,272,268,258],
[276,276,301,0,283,264,279,288,288,279],
[287,277,273,268,0,269,269,277,267,269],
[288,290,301,287,282,0,268,280,281,272],
[274,282,295,272,282,283,0,279,285,277],
[284,276,279,263,274,271,272,0,291,279],
[272,277,283,263,284,270,266,260,0,272],
[287,294,293,272,282,279,274,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,307,272,233,296,220,293,312,257],
[364,0,343,321,278,282,259,311,337,263],
[244,208,0,241,236,255,230,240,283,236],
[279,230,310,0,274,285,280,282,244,259],
[318,273,315,277,0,315,261,251,320,264],
[255,269,296,266,236,0,246,225,265,263],
[331,292,321,271,290,305,0,278,295,310],
[258,240,311,269,300,326,273,0,285,248],
[239,214,268,307,231,286,256,266,0,281],
[294,288,315,292,287,288,241,303,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,269,269,237,255,257,283,236,176],
[280,0,261,249,231,270,259,251,276,226],
[282,290,0,240,261,244,253,277,249,261],
[282,302,311,0,248,290,339,286,308,214],
[314,320,290,303,0,306,318,284,296,253],
[296,281,307,261,245,0,292,306,294,239],
[294,292,298,212,233,259,0,267,255,230],
[268,300,274,265,267,245,284,0,281,283],
[315,275,302,243,255,257,296,270,0,194],
[375,325,290,337,298,312,321,268,357,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,288,258,291,298,278,289,278,286],
[288,0,287,277,279,299,307,290,270,285],
[263,264,0,266,275,288,271,276,254,273],
[293,274,285,0,265,292,283,275,270,271],
[260,272,276,286,0,273,287,276,273,268],
[253,252,263,259,278,0,279,274,255,270],
[273,244,280,268,264,272,0,280,262,261],
[262,261,275,276,275,277,271,0,267,264],
[273,281,297,281,278,296,289,284,0,284],
[265,266,278,280,283,281,290,287,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,286,343,260,310,261,262,266,264],
[312,0,325,317,229,271,261,272,285,327],
[265,226,0,306,194,228,262,224,210,272],
[208,234,245,0,239,189,248,223,234,257],
[291,322,357,312,0,291,344,221,310,330],
[241,280,323,362,260,0,305,300,270,344],
[290,290,289,303,207,246,0,244,209,332],
[289,279,327,328,330,251,307,0,303,314],
[285,266,341,317,241,281,342,248,0,288],
[287,224,279,294,221,207,219,237,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,281,272,287,300,264,282,266,288],
[264,0,241,277,273,281,258,282,265,270],
[270,310,0,279,304,296,275,314,292,288],
[279,274,272,0,280,294,279,288,278,283],
[264,278,247,271,0,268,268,284,268,254],
[251,270,255,257,283,0,277,297,264,285],
[287,293,276,272,283,274,0,294,281,285],
[269,269,237,263,267,254,257,0,261,239],
[285,286,259,273,283,287,270,290,0,288],
[263,281,263,268,297,266,266,312,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,304,232,238,274,272,247,263,243],
[270,0,287,303,280,266,307,291,271,237],
[247,264,0,250,222,228,225,211,254,236],
[319,248,301,0,248,283,286,290,246,265],
[313,271,329,303,0,301,279,263,294,331],
[277,285,323,268,250,0,255,285,267,241],
[279,244,326,265,272,296,0,262,294,281],
[304,260,340,261,288,266,289,0,323,287],
[288,280,297,305,257,284,257,228,0,241],
[308,314,315,286,220,310,270,264,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,310,314,297,307,325,300,274,264],
[257,0,288,277,296,252,323,323,316,269],
[241,263,0,262,268,249,281,250,267,265],
[237,274,289,0,238,232,319,256,246,253],
[254,255,283,313,0,203,263,305,283,300],
[244,299,302,319,348,0,295,302,307,255],
[226,228,270,232,288,256,0,266,270,237],
[251,228,301,295,246,249,285,0,282,231],
[277,235,284,305,268,244,281,269,0,237],
[287,282,286,298,251,296,314,320,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,273,259,294,290,277,269,273,283],
[292,0,278,230,286,270,260,256,259,272],
[278,273,0,262,307,308,245,257,274,290],
[292,321,289,0,281,262,271,271,289,303],
[257,265,244,270,0,275,261,268,258,256],
[261,281,243,289,276,0,292,267,266,278],
[274,291,306,280,290,259,0,301,295,302],
[282,295,294,280,283,284,250,0,283,301],
[278,292,277,262,293,285,256,268,0,286],
[268,279,261,248,295,273,249,250,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,261,302,286,249,239,272,292,298],
[251,0,283,270,313,238,279,248,316,280],
[290,268,0,292,306,249,216,236,292,290],
[249,281,259,0,275,269,237,277,292,327],
[265,238,245,276,0,252,254,256,338,286],
[302,313,302,282,299,0,277,272,308,306],
[312,272,335,314,297,274,0,268,296,311],
[279,303,315,274,295,279,283,0,319,292],
[259,235,259,259,213,243,255,232,0,289],
[253,271,261,224,265,245,240,259,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,294,270,302,263,260,259,278,249],
[267,0,248,276,303,269,261,251,269,268],
[257,303,0,271,301,275,266,252,291,275],
[281,275,280,0,309,262,250,258,273,259],
[249,248,250,242,0,257,239,238,270,246],
[288,282,276,289,294,0,255,258,280,257],
[291,290,285,301,312,296,0,261,275,285],
[292,300,299,293,313,293,290,0,297,272],
[273,282,260,278,281,271,276,254,0,255],
[302,283,276,292,305,294,266,279,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,265,282,285,283,274,290,281],
[274,0,284,262,275,292,287,280,278,296],
[269,267,0,263,267,293,286,267,264,272],
[286,289,288,0,272,302,293,279,279,290],
[269,276,284,279,0,279,292,280,260,301],
[266,259,258,249,272,0,290,270,273,277],
[268,264,265,258,259,261,0,271,261,272],
[277,271,284,272,271,281,280,0,278,298],
[261,273,287,272,291,278,290,273,0,286],
[270,255,279,261,250,274,279,253,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,290,283,261,300,284,258,260,292],
[267,0,287,218,269,259,282,257,273,292],
[261,264,0,221,241,289,301,288,269,292],
[268,333,330,0,276,316,332,298,306,321],
[290,282,310,275,0,266,312,282,271,307],
[251,292,262,235,285,0,300,310,243,302],
[267,269,250,219,239,251,0,259,231,268],
[293,294,263,253,269,241,292,0,240,273],
[291,278,282,245,280,308,320,311,0,310],
[259,259,259,230,244,249,283,278,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,298,268,283,300,253,266,266,274],
[254,0,271,264,273,279,273,257,267,281],
[253,280,0,242,283,269,273,266,257,273],
[283,287,309,0,290,299,280,275,280,293],
[268,278,268,261,0,283,263,260,258,259],
[251,272,282,252,268,0,270,253,250,266],
[298,278,278,271,288,281,0,278,279,264],
[285,294,285,276,291,298,273,0,277,284],
[285,284,294,271,293,301,272,274,0,279],
[277,270,278,258,292,285,287,267,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,260,266,284,282,268,291,273,289],
[263,0,257,253,263,276,265,282,263,272],
[291,294,0,287,289,283,300,303,288,268],
[285,298,264,0,285,297,276,295,286,280],
[267,288,262,266,0,303,282,321,292,281],
[269,275,268,254,248,0,276,293,258,271],
[283,286,251,275,269,275,0,274,267,288],
[260,269,248,256,230,258,277,0,282,279],
[278,288,263,265,259,293,284,269,0,278],
[262,279,283,271,270,280,263,272,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,253,289,268,274,270,273,246,244],
[267,0,249,291,282,315,262,277,258,293],
[298,302,0,305,274,309,276,325,284,284],
[262,260,246,0,257,264,255,272,250,289],
[283,269,277,294,0,291,271,292,268,287],
[277,236,242,287,260,0,238,239,246,269],
[281,289,275,296,280,313,0,312,246,315],
[278,274,226,279,259,312,239,0,245,295],
[305,293,267,301,283,305,305,306,0,313],
[307,258,267,262,264,282,236,256,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,288,272,303,286,297,292,278,287],
[247,0,266,261,270,254,265,268,263,282],
[263,285,0,258,271,266,300,278,276,284],
[279,290,293,0,285,281,300,283,272,271],
[248,281,280,266,0,259,265,272,258,278],
[265,297,285,270,292,0,303,283,280,288],
[254,286,251,251,286,248,0,281,263,278],
[259,283,273,268,279,268,270,0,264,285],
[273,288,275,279,293,271,288,287,0,283],
[264,269,267,280,273,263,273,266,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,272,294,276,284,301,271,279,256],
[273,0,294,301,280,283,275,282,268,276],
[279,257,0,286,269,294,288,287,274,277],
[257,250,265,0,243,268,263,287,254,263],
[275,271,282,308,0,285,295,299,287,278],
[267,268,257,283,266,0,293,307,294,298],
[250,276,263,288,256,258,0,273,272,275],
[280,269,264,264,252,244,278,0,255,244],
[272,283,277,297,264,257,279,296,0,287],
[295,275,274,288,273,253,276,307,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,259,246,213,221,240,243,240,195],
[341,0,302,287,267,264,308,274,273,255],
[292,249,0,295,282,262,300,278,240,249],
[305,264,256,0,275,244,278,317,258,289],
[338,284,269,276,0,235,307,318,245,280],
[330,287,289,307,316,0,301,307,280,272],
[311,243,251,273,244,250,0,263,250,246],
[308,277,273,234,233,244,288,0,231,277],
[311,278,311,293,306,271,301,320,0,288],
[356,296,302,262,271,279,305,274,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,278,276,287,279,275,293,291,275],
[259,0,269,281,273,271,275,291,295,269],
[273,282,0,273,288,266,267,287,275,258],
[275,270,278,0,294,263,273,279,279,277],
[264,278,263,257,0,250,265,272,271,263],
[272,280,285,288,301,0,302,296,287,290],
[276,276,284,278,286,249,0,282,280,267],
[258,260,264,272,279,255,269,0,281,268],
[260,256,276,272,280,264,271,270,0,260],
[276,282,293,274,288,261,284,283,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,258,288,315,320,271,284,296,308],
[258,0,260,294,276,255,260,269,277,289],
[293,291,0,315,316,302,264,296,301,323],
[263,257,236,0,306,283,245,235,266,272],
[236,275,235,245,0,264,245,233,278,285],
[231,296,249,268,287,0,263,270,289,269],
[280,291,287,306,306,288,0,274,296,306],
[267,282,255,316,318,281,277,0,293,318],
[255,274,250,285,273,262,255,258,0,282],
[243,262,228,279,266,282,245,233,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,292,275,289,275,284,284,279,263],
[270,0,265,267,253,277,284,262,265,265],
[259,286,0,267,279,272,271,272,272,277],
[276,284,284,0,281,270,279,277,272,281],
[262,298,272,270,0,258,274,287,275,271],
[276,274,279,281,293,0,283,272,282,281],
[267,267,280,272,277,268,0,283,265,280],
[267,289,279,274,264,279,268,0,281,271],
[272,286,279,279,276,269,286,270,0,270],
[288,286,274,270,280,270,271,280,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,290,268,261,279,273,251,257,271],
[303,0,296,270,283,286,305,269,285,307],
[261,255,0,250,241,255,262,262,259,271],
[283,281,301,0,257,282,285,267,271,289],
[290,268,310,294,0,297,278,293,288,287],
[272,265,296,269,254,0,280,268,265,279],
[278,246,289,266,273,271,0,247,273,277],
[300,282,289,284,258,283,304,0,289,302],
[294,266,292,280,263,286,278,262,0,297],
[280,244,280,262,264,272,274,249,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,269,278,277,294,267,277,299,296],
[262,0,267,276,273,280,258,240,283,282],
[282,284,0,275,276,277,280,249,276,281],
[273,275,276,0,274,287,276,252,280,295],
[274,278,275,277,0,297,267,258,274,283],
[257,271,274,264,254,0,262,260,281,284],
[284,293,271,275,284,289,0,260,282,282],
[274,311,302,299,293,291,291,0,298,307],
[252,268,275,271,277,270,269,253,0,279],
[255,269,270,256,268,267,269,244,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,280,268,273,277,298,248,253,290],
[292,0,268,281,273,281,279,267,267,289],
[271,283,0,272,276,285,282,276,295,310],
[283,270,279,0,256,277,289,272,267,273],
[278,278,275,295,0,277,294,297,289,307],
[274,270,266,274,274,0,294,270,272,285],
[253,272,269,262,257,257,0,274,257,293],
[303,284,275,279,254,281,277,0,274,296],
[298,284,256,284,262,279,294,277,0,295],
[261,262,241,278,244,266,258,255,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,269,275,261,253,260,269,255,258],
[298,0,253,283,280,271,281,279,291,280],
[282,298,0,263,294,282,268,288,282,272],
[276,268,288,0,302,284,262,293,288,271],
[290,271,257,249,0,250,277,276,259,276],
[298,280,269,267,301,0,279,274,280,270],
[291,270,283,289,274,272,0,252,264,283],
[282,272,263,258,275,277,299,0,274,271],
[296,260,269,263,292,271,287,277,0,281],
[293,271,279,280,275,281,268,280,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,216,200,214,224,239,218,246,249],
[313,0,266,243,226,241,266,243,267,290],
[335,285,0,260,272,240,286,256,283,306],
[351,308,291,0,268,283,290,276,336,339],
[337,325,279,283,0,290,341,262,350,307],
[327,310,311,268,261,0,298,296,320,308],
[312,285,265,261,210,253,0,254,290,311],
[333,308,295,275,289,255,297,0,310,306],
[305,284,268,215,201,231,261,241,0,319],
[302,261,245,212,244,243,240,245,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,298,270,292,295,290,295,260,281],
[251,0,250,245,259,286,255,265,246,251],
[253,301,0,261,278,295,281,284,273,284],
[281,306,290,0,276,289,280,294,266,286],
[259,292,273,275,0,271,281,274,263,266],
[256,265,256,262,280,0,264,274,265,258],
[261,296,270,271,270,287,0,289,276,260],
[256,286,267,257,277,277,262,0,273,253],
[291,305,278,285,288,286,275,278,0,273],
[270,300,267,265,285,293,291,298,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,236,269,277,249,248,270,250,285],
[288,0,273,267,283,273,280,302,264,299],
[315,278,0,306,310,274,273,321,293,300],
[282,284,245,0,303,280,272,294,253,271],
[274,268,241,248,0,247,270,281,259,280],
[302,278,277,271,304,0,283,293,308,288],
[303,271,278,279,281,268,0,271,275,276],
[281,249,230,257,270,258,280,0,272,286],
[301,287,258,298,292,243,276,279,0,290],
[266,252,251,280,271,263,275,265,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,254,269,265,278,285,258,269,257],
[276,0,289,308,286,293,283,275,292,293],
[297,262,0,295,279,282,282,266,274,288],
[282,243,256,0,268,278,256,265,252,264],
[286,265,272,283,0,265,272,270,270,265],
[273,258,269,273,286,0,260,262,271,257],
[266,268,269,295,279,291,0,273,281,278],
[293,276,285,286,281,289,278,0,272,263],
[282,259,277,299,281,280,270,279,0,269],
[294,258,263,287,286,294,273,288,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,296,253,256,272,271,274,264,267],
[276,0,294,243,252,249,263,263,255,260],
[255,257,0,261,259,257,262,268,253,254],
[298,308,290,0,271,281,292,292,278,274],
[295,299,292,280,0,285,274,267,282,275],
[279,302,294,270,266,0,270,259,270,274],
[280,288,289,259,277,281,0,281,256,279],
[277,288,283,259,284,292,270,0,274,283],
[287,296,298,273,269,281,295,277,0,277],
[284,291,297,277,276,277,272,268,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,255,319,265,294,304,288,295,282],
[265,0,281,303,299,308,315,310,286,277],
[296,270,0,289,294,289,300,302,299,274],
[232,248,262,0,274,285,298,285,281,257],
[286,252,257,277,0,288,269,272,287,277],
[257,243,262,266,263,0,281,278,261,260],
[247,236,251,253,282,270,0,273,252,265],
[263,241,249,266,279,273,278,0,287,257],
[256,265,252,270,264,290,299,264,0,270],
[269,274,277,294,274,291,286,294,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,277,290,276,283,281,307,304,276],
[280,0,275,282,263,276,285,301,299,298],
[274,276,0,273,276,278,270,287,287,290],
[261,269,278,0,274,269,288,295,272,264],
[275,288,275,277,0,271,262,311,295,297],
[268,275,273,282,280,0,281,294,296,277],
[270,266,281,263,289,270,0,279,274,280],
[244,250,264,256,240,257,272,0,281,267],
[247,252,264,279,256,255,277,270,0,262],
[275,253,261,287,254,274,271,284,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,290,267,266,273,274,273,260,290],
[254,0,270,243,253,243,239,268,256,260],
[261,281,0,275,276,256,274,308,262,285],
[284,308,276,0,289,258,278,290,260,302],
[285,298,275,262,0,268,294,317,251,304],
[278,308,295,293,283,0,299,274,284,299],
[277,312,277,273,257,252,0,274,273,271],
[278,283,243,261,234,277,277,0,246,286],
[291,295,289,291,300,267,278,305,0,305],
[261,291,266,249,247,252,280,265,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,257,237,239,272,309,287,261,289],
[293,0,272,268,267,270,306,267,279,294],
[294,279,0,265,269,303,309,285,269,313],
[314,283,286,0,296,271,314,304,273,326],
[312,284,282,255,0,283,324,264,271,285],
[279,281,248,280,268,0,299,280,285,304],
[242,245,242,237,227,252,0,254,232,285],
[264,284,266,247,287,271,297,0,287,308],
[290,272,282,278,280,266,319,264,0,292],
[262,257,238,225,266,247,266,243,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,308,286,275,312,293,321,331,310],
[263,0,273,270,269,270,317,283,293,286],
[243,278,0,299,282,332,280,273,308,236],
[265,281,252,0,267,302,277,327,317,262],
[276,282,269,284,0,340,295,331,308,280],
[239,281,219,249,211,0,239,243,284,238],
[258,234,271,274,256,312,0,299,310,242],
[230,268,278,224,220,308,252,0,256,240],
[220,258,243,234,243,267,241,295,0,236],
[241,265,315,289,271,313,309,311,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,217,273,285,269,240,243,307,269],
[322,0,272,275,308,296,303,302,310,297],
[334,279,0,278,330,270,294,299,320,312],
[278,276,273,0,269,251,282,265,293,265],
[266,243,221,282,0,253,262,292,308,271],
[282,255,281,300,298,0,285,293,301,301],
[311,248,257,269,289,266,0,258,305,303],
[308,249,252,286,259,258,293,0,295,273],
[244,241,231,258,243,250,246,256,0,253],
[282,254,239,286,280,250,248,278,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,266,273,245,293,256,280,276,298],
[283,0,263,272,250,280,260,288,273,291],
[285,288,0,294,258,288,284,290,293,303],
[278,279,257,0,255,292,277,288,284,301],
[306,301,293,296,0,275,292,292,300,305],
[258,271,263,259,276,0,260,282,276,293],
[295,291,267,274,259,291,0,279,298,316],
[271,263,261,263,259,269,272,0,281,288],
[275,278,258,267,251,275,253,270,0,272],
[253,260,248,250,246,258,235,263,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,257,277,266,280,280,293,280,259],
[276,0,269,284,275,287,291,292,285,270],
[294,282,0,280,282,276,281,280,291,266],
[274,267,271,0,278,277,290,286,292,276],
[285,276,269,273,0,257,279,273,285,268],
[271,264,275,274,294,0,291,290,276,274],
[271,260,270,261,272,260,0,282,286,261],
[258,259,271,265,278,261,269,0,272,276],
[271,266,260,259,266,275,265,279,0,273],
[292,281,285,275,283,277,290,275,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,311,296,279,276,282,294,297,310],
[276,0,291,304,273,267,275,273,283,311],
[240,260,0,279,248,234,263,254,273,287],
[255,247,272,0,260,232,248,250,283,273],
[272,278,303,291,0,274,293,282,286,319],
[275,284,317,319,277,0,287,293,289,309],
[269,276,288,303,258,264,0,284,263,296],
[257,278,297,301,269,258,267,0,282,285],
[254,268,278,268,265,262,288,269,0,299],
[241,240,264,278,232,242,255,266,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,269,276,270,293,268,283,286,284],
[278,0,277,276,252,281,269,260,280,277],
[282,274,0,281,258,268,277,259,267,256],
[275,275,270,0,276,268,260,263,277,279],
[281,299,293,275,0,289,280,268,301,275],
[258,270,283,283,262,0,266,257,260,280],
[283,282,274,291,271,285,0,249,275,270],
[268,291,292,288,283,294,302,0,307,298],
[265,271,284,274,250,291,276,244,0,280],
[267,274,295,272,276,271,281,253,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,376,257,324,326,321,313,229,250,238],
[175,0,226,212,297,188,178,144,235,184],
[294,325,0,212,264,120,284,165,213,217],
[227,339,339,0,461,180,218,239,226,232],
[225,254,287,90,0,95,126,50,141,98],
[230,363,431,371,456,0,271,310,235,325],
[238,373,267,333,425,280,0,235,377,265],
[322,407,386,312,501,241,316,0,290,244],
[301,316,338,325,410,316,174,261,0,189],
[313,367,334,319,453,226,286,307,362,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,244,290,262,270,301,266,265,282],
[276,0,248,284,262,265,249,234,281,274],
[307,303,0,310,304,302,292,265,287,310],
[261,267,241,0,254,259,260,230,254,272],
[289,289,247,297,0,272,264,283,288,282],
[281,286,249,292,279,0,270,268,266,291],
[250,302,259,291,287,281,0,257,290,272],
[285,317,286,321,268,283,294,0,289,309],
[286,270,264,297,263,285,261,262,0,295],
[269,277,241,279,269,260,279,242,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,415,172,172,172,172,415,243,172],
[136,0,136,136,308,308,136,243,136,0],
[136,415,0,308,308,308,0,243,379,0],
[379,415,243,0,415,551,0,243,243,243],
[379,243,243,136,0,136,0,243,243,243],
[379,243,243,0,415,0,0,243,243,243],
[379,415,551,551,551,551,0,243,379,243],
[136,308,308,308,308,308,308,0,136,308],
[308,415,172,308,308,308,172,415,0,172],
[379,551,551,308,308,308,308,243,379,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,265,285,258,276,253,262,251,280],
[275,0,282,283,239,284,264,257,276,261],
[286,269,0,299,232,281,281,265,261,281],
[266,268,252,0,243,282,274,277,268,285],
[293,312,319,308,0,311,291,265,289,295],
[275,267,270,269,240,0,273,275,268,293],
[298,287,270,277,260,278,0,275,267,307],
[289,294,286,274,286,276,276,0,269,296],
[300,275,290,283,262,283,284,282,0,280],
[271,290,270,266,256,258,244,255,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,277,263,266,273,277,286,272,287],
[291,0,276,269,277,272,281,294,292,277],
[274,275,0,281,261,278,302,288,276,275],
[288,282,270,0,276,267,277,289,276,285],
[285,274,290,275,0,285,301,273,279,289],
[278,279,273,284,266,0,270,282,283,286],
[274,270,249,274,250,281,0,285,275,250],
[265,257,263,262,278,269,266,0,279,289],
[279,259,275,275,272,268,276,272,0,264],
[264,274,276,266,262,265,301,262,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,206,339,260,352,296,155,185,148],
[448,0,374,446,367,393,267,367,287,234],
[345,177,0,364,226,388,262,257,244,258],
[212,105,187,0,182,212,226,326,246,112],
[291,184,325,369,0,471,343,369,325,289],
[199,158,163,339,80,0,296,196,122,127],
[255,284,289,325,208,255,0,255,289,253],
[396,184,294,225,182,355,296,0,294,153],
[366,264,307,305,226,429,262,257,0,305],
[403,317,293,439,262,424,298,398,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,277,266,244,275,275,268,274,268],
[255,0,287,239,263,239,265,255,283,266],
[274,264,0,234,263,264,257,247,254,251],
[285,312,317,0,294,280,286,272,277,274],
[307,288,288,257,0,275,292,284,306,268],
[276,312,287,271,276,0,282,263,288,248],
[276,286,294,265,259,269,0,279,259,291],
[283,296,304,279,267,288,272,0,299,284],
[277,268,297,274,245,263,292,252,0,257],
[283,285,300,277,283,303,260,267,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,280,282,280,279,274,277,264,281],
[273,0,248,274,274,279,266,270,251,287],
[271,303,0,290,283,304,297,300,267,286],
[269,277,261,0,281,270,258,276,264,277],
[271,277,268,270,0,287,277,279,278,284],
[272,272,247,281,264,0,276,260,265,275],
[277,285,254,293,274,275,0,271,266,288],
[274,281,251,275,272,291,280,0,281,274],
[287,300,284,287,273,286,285,270,0,289],
[270,264,265,274,267,276,263,277,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,273,275,271,278,243,315,277,287],
[251,0,241,286,263,246,235,275,249,288],
[278,310,0,287,276,295,260,310,311,313],
[276,265,264,0,262,289,252,295,238,292],
[280,288,275,289,0,298,274,300,291,328],
[273,305,256,262,253,0,266,310,287,280],
[308,316,291,299,277,285,0,339,260,355],
[236,276,241,256,251,241,212,0,257,284],
[274,302,240,313,260,264,291,294,0,305],
[264,263,238,259,223,271,196,267,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,270,292,275,259,263,269,280,292],
[274,0,290,274,259,272,268,261,262,264],
[281,261,0,273,271,270,263,267,268,278],
[259,277,278,0,258,259,273,261,269,263],
[276,292,280,293,0,276,272,268,288,290],
[292,279,281,292,275,0,266,280,300,293],
[288,283,288,278,279,285,0,260,270,296],
[282,290,284,290,283,271,291,0,271,287],
[271,289,283,282,263,251,281,280,0,292],
[259,287,273,288,261,258,255,264,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,267,274,274,275,263,269,272,273],
[276,0,276,280,264,274,282,267,254,261],
[284,275,0,272,266,271,275,282,274,282],
[277,271,279,0,268,276,264,256,278,258],
[277,287,285,283,0,273,271,259,279,268],
[276,277,280,275,278,0,278,278,266,270],
[288,269,276,287,280,273,0,285,270,283],
[282,284,269,295,292,273,266,0,266,269],
[279,297,277,273,272,285,281,285,0,281],
[278,290,269,293,283,281,268,282,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,274,305,268,288,269,269,249,279],
[272,0,288,273,284,300,276,276,265,277],
[277,263,0,269,266,267,263,262,253,274],
[246,278,282,0,265,271,254,266,261,278],
[283,267,285,286,0,300,274,287,277,284],
[263,251,284,280,251,0,255,278,248,281],
[282,275,288,297,277,296,0,292,274,271],
[282,275,289,285,264,273,259,0,254,281],
[302,286,298,290,274,303,277,297,0,287],
[272,274,277,273,267,270,280,270,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,345,209,368,292,381,170,371,182,207],
[206,0,195,236,166,265,185,146,173,169],
[342,356,0,292,256,237,84,220,241,177],
[183,315,259,0,163,263,222,298,169,177],
[259,385,295,388,0,266,210,261,356,286],
[170,286,314,288,285,0,326,231,352,281],
[381,366,467,329,341,225,0,253,348,278],
[180,405,331,253,290,320,298,0,266,272],
[369,378,310,382,195,199,203,285,0,214],
[344,382,374,374,265,270,273,279,337,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,262,256,258,247,270,285,270,277],
[279,0,279,278,290,280,281,275,282,286],
[289,272,0,269,281,271,283,280,272,282],
[295,273,282,0,287,274,287,279,292,283],
[293,261,270,264,0,276,289,269,285,279],
[304,271,280,277,275,0,281,287,280,297],
[281,270,268,264,262,270,0,272,275,284],
[266,276,271,272,282,264,279,0,278,272],
[281,269,279,259,266,271,276,273,0,273],
[274,265,269,268,272,254,267,279,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,305,254,315,281,264,279,272,250],
[271,0,267,278,285,261,283,295,265,246],
[246,284,0,270,299,252,276,269,290,243],
[297,273,281,0,294,248,255,310,264,279],
[236,266,252,257,0,262,261,261,270,240],
[270,290,299,303,289,0,284,315,321,303],
[287,268,275,296,290,267,0,293,282,246],
[272,256,282,241,290,236,258,0,288,253],
[279,286,261,287,281,230,269,263,0,231],
[301,305,308,272,311,248,305,298,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,298,272,296,278,291,277,283,295],
[259,0,268,275,285,260,279,269,291,286],
[253,283,0,271,281,275,269,274,289,296],
[279,276,280,0,291,285,263,281,292,284],
[255,266,270,260,0,263,251,260,269,275],
[273,291,276,266,288,0,265,278,275,288],
[260,272,282,288,300,286,0,288,279,305],
[274,282,277,270,291,273,263,0,284,291],
[268,260,262,259,282,276,272,267,0,276],
[256,265,255,267,276,263,246,260,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,287,277,266,264,272,259,251,258],
[294,0,289,277,269,281,304,274,275,259],
[264,262,0,272,267,293,275,259,266,262],
[274,274,279,0,270,278,281,280,271,241],
[285,282,284,281,0,279,287,281,266,280],
[287,270,258,273,272,0,283,280,283,250],
[279,247,276,270,264,268,0,279,259,244],
[292,277,292,271,270,271,272,0,268,261],
[300,276,285,280,285,268,292,283,0,263],
[293,292,289,310,271,301,307,290,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,247,312,292,295,259,265,291,297],
[231,0,281,248,226,258,233,236,276,295],
[304,270,0,288,270,254,239,260,292,270],
[239,303,263,0,303,278,324,280,308,313],
[259,325,281,248,0,269,248,278,264,289],
[256,293,297,273,282,0,277,275,291,319],
[292,318,312,227,303,274,0,304,294,327],
[286,315,291,271,273,276,247,0,308,287],
[260,275,259,243,287,260,257,243,0,299],
[254,256,281,238,262,232,224,264,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,289,285,267,291,264,273,261,275],
[278,0,289,273,264,281,288,258,261,283],
[262,262,0,268,284,281,273,268,261,271],
[266,278,283,0,273,285,279,271,264,273],
[284,287,267,278,0,280,288,263,276,284],
[260,270,270,266,271,0,286,266,274,276],
[287,263,278,272,263,265,0,267,251,275],
[278,293,283,280,288,285,284,0,280,274],
[290,290,290,287,275,277,300,271,0,286],
[276,268,280,278,267,275,276,277,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,254,271,274,262,259,240,247,246],
[289,0,258,280,283,282,275,260,256,263],
[297,293,0,293,296,295,277,265,261,284],
[280,271,258,0,296,284,279,263,263,261],
[277,268,255,255,0,272,261,245,262,244],
[289,269,256,267,279,0,264,275,253,265],
[292,276,274,272,290,287,0,256,264,290],
[311,291,286,288,306,276,295,0,276,268],
[304,295,290,288,289,298,287,275,0,274],
[305,288,267,290,307,286,261,283,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,282,279,262,261,267,286,276,265],
[263,0,257,250,247,265,235,274,269,246],
[269,294,0,259,264,270,256,285,268,278],
[272,301,292,0,277,283,272,276,281,273],
[289,304,287,274,0,294,283,308,283,278],
[290,286,281,268,257,0,237,271,288,275],
[284,316,295,279,268,314,0,301,271,286],
[265,277,266,275,243,280,250,0,280,264],
[275,282,283,270,268,263,280,271,0,253],
[286,305,273,278,273,276,265,287,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,257,243,262,274,256,267,269,286],
[294,0,271,254,269,281,263,267,267,289],
[294,280,0,278,279,289,275,268,269,306],
[308,297,273,0,281,302,278,273,279,311],
[289,282,272,270,0,279,280,264,263,300],
[277,270,262,249,272,0,256,253,245,279],
[295,288,276,273,271,295,0,296,283,283],
[284,284,283,278,287,298,255,0,271,300],
[282,284,282,272,288,306,268,280,0,293],
[265,262,245,240,251,272,268,251,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,292,249,249,237,280,242,265,252],
[305,0,284,270,251,256,272,283,294,255],
[259,267,0,273,244,263,265,253,255,253],
[302,281,278,0,263,255,293,279,270,270],
[302,300,307,288,0,279,277,244,286,278],
[314,295,288,296,272,0,267,291,278,275],
[271,279,286,258,274,284,0,263,263,250],
[309,268,298,272,307,260,288,0,311,267],
[286,257,296,281,265,273,288,240,0,253],
[299,296,298,281,273,276,301,284,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,270,286,261,273,259,282,263,269],
[287,0,289,297,266,283,285,287,286,290],
[281,262,0,280,283,277,280,276,287,267],
[265,254,271,0,248,267,263,264,257,271],
[290,285,268,303,0,285,284,293,281,277],
[278,268,274,284,266,0,271,284,265,278],
[292,266,271,288,267,280,0,276,286,269],
[269,264,275,287,258,267,275,0,249,269],
[288,265,264,294,270,286,265,302,0,278],
[282,261,284,280,274,273,282,282,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,283,272,283,280,257,247,286,279],
[252,0,236,251,257,285,259,242,271,268],
[268,315,0,270,293,297,279,279,295,276],
[279,300,281,0,279,287,293,265,289,290],
[268,294,258,272,0,264,265,262,270,275],
[271,266,254,264,287,0,247,258,271,262],
[294,292,272,258,286,304,0,277,262,279],
[304,309,272,286,289,293,274,0,298,313],
[265,280,256,262,281,280,289,253,0,267],
[272,283,275,261,276,289,272,238,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,266,242,265,285,236,259,237,255],
[280,0,259,249,275,280,266,258,273,262],
[285,292,0,262,297,297,258,267,249,282],
[309,302,289,0,301,301,274,295,285,284],
[286,276,254,250,0,281,258,259,258,264],
[266,271,254,250,270,0,256,276,272,277],
[315,285,293,277,293,295,0,285,271,283],
[292,293,284,256,292,275,266,0,273,275],
[314,278,302,266,293,279,280,278,0,284],
[296,289,269,267,287,274,268,276,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,245,272,264,276,272,268,267,276],
[270,0,264,271,273,273,267,277,279,274],
[306,287,0,307,285,275,270,283,285,288],
[279,280,244,0,274,271,262,238,282,253],
[287,278,266,277,0,270,273,279,270,275],
[275,278,276,280,281,0,274,267,274,275],
[279,284,281,289,278,277,0,269,272,282],
[283,274,268,313,272,284,282,0,288,277],
[284,272,266,269,281,277,279,263,0,265],
[275,277,263,298,276,276,269,274,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,271,278,283,272,278,286,272,272],
[272,0,267,273,284,263,269,272,265,282],
[280,284,0,260,279,269,270,274,277,280],
[273,278,291,0,291,266,266,282,277,286],
[268,267,272,260,0,274,275,272,268,272],
[279,288,282,285,277,0,275,264,276,269],
[273,282,281,285,276,276,0,269,264,284],
[265,279,277,269,279,287,282,0,267,280],
[279,286,274,274,283,275,287,284,0,286],
[279,269,271,265,279,282,267,271,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,267,285,268,277,289,284,292,277],
[264,0,301,292,253,282,308,291,307,269],
[284,250,0,294,281,278,291,275,291,253],
[266,259,257,0,250,259,281,260,275,260],
[283,298,270,301,0,295,286,285,309,282],
[274,269,273,292,256,0,273,281,288,248],
[262,243,260,270,265,278,0,232,271,255],
[267,260,276,291,266,270,319,0,298,275],
[259,244,260,276,242,263,280,253,0,268],
[274,282,298,291,269,303,296,276,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,382,207,280,388,201,229,262,248,235],
[169,0,124,218,142,168,252,299,151,243],
[344,427,0,376,227,294,192,376,237,269],
[271,333,175,0,283,224,239,281,254,351],
[163,409,324,268,0,227,287,353,276,279],
[350,383,257,327,324,0,258,389,210,333],
[322,299,359,312,264,293,0,450,305,362],
[289,252,175,270,198,162,101,0,249,249],
[303,400,314,297,275,341,246,302,0,236],
[316,308,282,200,272,218,189,302,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,276,310,311,291,299,251,303],
[277,0,226,246,241,264,267,288,283,255],
[267,325,0,267,262,319,281,322,296,273],
[275,305,284,0,262,315,323,304,275,247],
[241,310,289,289,0,297,303,252,296,273],
[240,287,232,236,254,0,278,270,265,268],
[260,284,270,228,248,273,0,233,290,240],
[252,263,229,247,299,281,318,0,292,247],
[300,268,255,276,255,286,261,259,0,245],
[248,296,278,304,278,283,311,304,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,274,291,284,304,286,293,292,268],
[262,0,272,280,256,287,261,273,286,272],
[277,279,0,269,256,309,290,263,273,259],
[260,271,282,0,252,293,267,253,269,257],
[267,295,295,299,0,289,288,275,289,281],
[247,264,242,258,262,0,250,250,255,240],
[265,290,261,284,263,301,0,253,274,252],
[258,278,288,298,276,301,298,0,277,291],
[259,265,278,282,262,296,277,274,0,272],
[283,279,292,294,270,311,299,260,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,266,281,267,229,253,229,250,263],
[290,0,307,293,309,318,313,251,321,319],
[285,244,0,280,269,256,307,277,275,291],
[270,258,271,0,277,265,315,271,298,289],
[284,242,282,274,0,270,290,254,272,295],
[322,233,295,286,281,0,264,285,283,288],
[298,238,244,236,261,287,0,248,284,274],
[322,300,274,280,297,266,303,0,282,311],
[301,230,276,253,279,268,267,269,0,327],
[288,232,260,262,256,263,277,240,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,297,235,232,261,300,300,329,294],
[265,0,279,359,294,303,266,298,326,266],
[254,272,0,283,231,314,214,310,302,281],
[316,192,268,0,284,241,268,326,370,270],
[319,257,320,267,0,216,304,299,310,226],
[290,248,237,310,335,0,295,332,393,221],
[251,285,337,283,247,256,0,365,355,270],
[251,253,241,225,252,219,186,0,242,235],
[222,225,249,181,241,158,196,309,0,197],
[257,285,270,281,325,330,281,316,354,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,238,258,228,240,265,246,250,230],
[304,0,250,306,264,247,276,263,270,263],
[313,301,0,304,292,278,314,262,285,284],
[293,245,247,0,255,265,267,274,248,244],
[323,287,259,296,0,268,260,256,249,276],
[311,304,273,286,283,0,298,285,277,280],
[286,275,237,284,291,253,0,248,257,273],
[305,288,289,277,295,266,303,0,268,276],
[301,281,266,303,302,274,294,283,0,275],
[321,288,267,307,275,271,278,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,303,297,271,310,268,312,249,288],
[276,0,262,271,273,305,211,256,216,285],
[248,289,0,273,253,298,248,261,234,281],
[254,280,278,0,272,272,227,291,237,287],
[280,278,298,279,0,258,273,272,215,248],
[241,246,253,279,293,0,272,257,230,267],
[283,340,303,324,278,279,0,293,259,299],
[239,295,290,260,279,294,258,0,212,265],
[302,335,317,314,336,321,292,339,0,274],
[263,266,270,264,303,284,252,286,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,292,264,263,269,292,249,250,248],
[274,0,290,271,261,269,287,239,289,236],
[259,261,0,268,275,245,289,263,270,255],
[287,280,283,0,242,236,261,277,242,280],
[288,290,276,309,0,272,282,266,292,269],
[282,282,306,315,279,0,290,273,264,269],
[259,264,262,290,269,261,0,247,257,244],
[302,312,288,274,285,278,304,0,275,266],
[301,262,281,309,259,287,294,276,0,259],
[303,315,296,271,282,282,307,285,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,301,287,271,285,284,285,287,280],
[261,0,274,278,253,262,272,283,268,267],
[250,277,0,285,254,256,273,280,263,284],
[264,273,266,0,269,281,271,275,265,277],
[280,298,297,282,0,278,291,285,272,296],
[266,289,295,270,273,0,287,296,253,275],
[267,279,278,280,260,264,0,288,261,269],
[266,268,271,276,266,255,263,0,253,274],
[264,283,288,286,279,298,290,298,0,289],
[271,284,267,274,255,276,282,277,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,270,270,288,276,270,287,276,270],
[269,0,258,274,272,273,271,272,271,245],
[281,293,0,276,273,295,277,286,273,278],
[281,277,275,0,271,270,280,281,281,272],
[263,279,278,280,0,272,278,270,267,251],
[275,278,256,281,279,0,269,286,261,267],
[281,280,274,271,273,282,0,273,264,249],
[264,279,265,270,281,265,278,0,263,268],
[275,280,278,270,284,290,287,288,0,273],
[281,306,273,279,300,284,302,283,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,283,281,273,273,258,277,259,256],
[302,0,281,312,285,301,289,275,279,298],
[268,270,0,285,279,304,293,260,267,284],
[270,239,266,0,254,259,279,254,260,249],
[278,266,272,297,0,278,258,272,269,296],
[278,250,247,292,273,0,268,280,254,261],
[293,262,258,272,293,283,0,254,255,262],
[274,276,291,297,279,271,297,0,258,276],
[292,272,284,291,282,297,296,293,0,281],
[295,253,267,302,255,290,289,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,274,270,318,295,289,265,295,308],
[267,0,250,263,308,262,259,245,273,291],
[277,301,0,298,318,297,299,270,288,325],
[281,288,253,0,306,282,293,283,290,327],
[233,243,233,245,0,262,265,238,264,265],
[256,289,254,269,289,0,280,241,267,293],
[262,292,252,258,286,271,0,238,279,312],
[286,306,281,268,313,310,313,0,297,341],
[256,278,263,261,287,284,272,254,0,290],
[243,260,226,224,286,258,239,210,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,272,294,273,251,262,280,257,247],
[305,0,287,285,298,246,277,261,269,289],
[279,264,0,256,293,241,245,264,248,239],
[257,266,295,0,287,247,249,255,266,260],
[278,253,258,264,0,263,271,259,248,247],
[300,305,310,304,288,0,291,295,286,263],
[289,274,306,302,280,260,0,275,263,286],
[271,290,287,296,292,256,276,0,289,273],
[294,282,303,285,303,265,288,262,0,266],
[304,262,312,291,304,288,265,278,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,263,269,271,254,282,273,258,275],
[266,0,255,266,249,261,254,276,255,250],
[288,296,0,284,291,295,271,297,293,284],
[282,285,267,0,274,280,246,299,268,282],
[280,302,260,277,0,277,256,285,290,264],
[297,290,256,271,274,0,276,306,268,273],
[269,297,280,305,295,275,0,287,271,281],
[278,275,254,252,266,245,264,0,261,252],
[293,296,258,283,261,283,280,290,0,277],
[276,301,267,269,287,278,270,299,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,286,269,279,276,276,271,279,291],
[273,0,276,261,278,271,277,258,267,255],
[265,275,0,252,269,261,267,250,242,266],
[282,290,299,0,283,289,293,278,273,297],
[272,273,282,268,0,277,273,263,262,265],
[275,280,290,262,274,0,271,269,248,281],
[275,274,284,258,278,280,0,255,253,283],
[280,293,301,273,288,282,296,0,274,285],
[272,284,309,278,289,303,298,277,0,275],
[260,296,285,254,286,270,268,266,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,268,284,278,306,292,306,305,304],
[268,0,267,313,283,303,311,300,320,294],
[283,284,0,264,279,285,280,298,304,300],
[267,238,287,0,258,285,280,270,268,263],
[273,268,272,293,0,256,275,253,312,275],
[245,248,266,266,295,0,288,267,300,260],
[259,240,271,271,276,263,0,233,285,291],
[245,251,253,281,298,284,318,0,311,290],
[246,231,247,283,239,251,266,240,0,253],
[247,257,251,288,276,291,260,261,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,283,257,271,265,300,265,273,276],
[289,0,303,284,269,276,282,295,277,302],
[268,248,0,276,269,277,275,265,283,278],
[294,267,275,0,261,272,290,301,276,288],
[280,282,282,290,0,291,289,285,269,302],
[286,275,274,279,260,0,282,276,268,310],
[251,269,276,261,262,269,0,268,273,308],
[286,256,286,250,266,275,283,0,269,289],
[278,274,268,275,282,283,278,282,0,299],
[275,249,273,263,249,241,243,262,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,254,262,253,254,269,263,266,275],
[257,0,240,261,265,239,231,249,252,257],
[297,311,0,267,304,277,271,279,267,298],
[289,290,284,0,284,254,265,259,276,278],
[298,286,247,267,0,252,267,267,255,281],
[297,312,274,297,299,0,287,270,266,290],
[282,320,280,286,284,264,0,260,276,279],
[288,302,272,292,284,281,291,0,261,268],
[285,299,284,275,296,285,275,290,0,289],
[276,294,253,273,270,261,272,283,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,272,280,294,263,247,257,250,269],
[282,0,259,267,299,271,267,269,254,267],
[279,292,0,275,324,296,279,273,284,283],
[271,284,276,0,308,282,278,244,246,281],
[257,252,227,243,0,269,252,229,253,261],
[288,280,255,269,282,0,257,245,257,294],
[304,284,272,273,299,294,0,283,264,269],
[294,282,278,307,322,306,268,0,264,294],
[301,297,267,305,298,294,287,287,0,304],
[282,284,268,270,290,257,282,257,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,275,281,269,259,296,272,240,244],
[250,0,274,281,276,242,320,256,273,286],
[276,277,0,304,268,265,311,267,252,272],
[270,270,247,0,256,261,315,266,233,248],
[282,275,283,295,0,268,298,255,234,289],
[292,309,286,290,283,0,331,287,264,295],
[255,231,240,236,253,220,0,257,209,245],
[279,295,284,285,296,264,294,0,279,307],
[311,278,299,318,317,287,342,272,0,314],
[307,265,279,303,262,256,306,244,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,276,285,267,283,275,280,269,281],
[281,0,280,268,287,284,290,269,285,274],
[275,271,0,272,270,265,264,269,269,282],
[266,283,279,0,280,273,272,272,261,289],
[284,264,281,271,0,271,252,277,265,272],
[268,267,286,278,280,0,275,285,280,283],
[276,261,287,279,299,276,0,294,278,296],
[271,282,282,279,274,266,257,0,280,271],
[282,266,282,290,286,271,273,271,0,284],
[270,277,269,262,279,268,255,280,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,283,288,272,286,266,288,261,303],
[260,0,285,264,271,277,260,282,270,284],
[268,266,0,283,263,257,255,265,262,284],
[263,287,268,0,263,261,252,274,249,278],
[279,280,288,288,0,258,279,290,276,293],
[265,274,294,290,293,0,264,272,293,304],
[285,291,296,299,272,287,0,285,283,300],
[263,269,286,277,261,279,266,0,262,283],
[290,281,289,302,275,258,268,289,0,280],
[248,267,267,273,258,247,251,268,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,274,288,261,272,274,273,267,277],
[271,0,283,300,281,285,278,285,282,289],
[277,268,0,292,268,280,272,283,281,276],
[263,251,259,0,245,259,253,249,259,257],
[290,270,283,306,0,272,279,269,279,284],
[279,266,271,292,279,0,267,287,283,282],
[277,273,279,298,272,284,0,284,287,282],
[278,266,268,302,282,264,267,0,283,288],
[284,269,270,292,272,268,264,268,0,277],
[274,262,275,294,267,269,269,263,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,312,268,294,246,330,251,309,277],
[280,0,315,303,288,268,275,269,299,263],
[239,236,0,261,285,239,275,249,326,255],
[283,248,290,0,296,235,277,247,300,267],
[257,263,266,255,0,235,283,290,297,272],
[305,283,312,316,316,0,320,280,315,258],
[221,276,276,274,268,231,0,234,274,233],
[300,282,302,304,261,271,317,0,297,263],
[242,252,225,251,254,236,277,254,0,248],
[274,288,296,284,279,293,318,288,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,265,302,303,313,290,323,295,283],
[285,0,294,311,320,284,293,311,291,268],
[286,257,0,277,299,269,268,301,283,283],
[249,240,274,0,266,251,260,250,252,247],
[248,231,252,285,0,263,258,290,259,267],
[238,267,282,300,288,0,258,296,277,262],
[261,258,283,291,293,293,0,295,281,281],
[228,240,250,301,261,255,256,0,255,242],
[256,260,268,299,292,274,270,296,0,290],
[268,283,268,304,284,289,270,309,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,254,286,259,277,276,261,267,258],
[284,0,274,293,267,312,281,268,301,287],
[297,277,0,291,296,298,291,286,304,268],
[265,258,260,0,260,270,271,267,271,274],
[292,284,255,291,0,305,293,267,285,276],
[274,239,253,281,246,0,289,248,283,270],
[275,270,260,280,258,262,0,250,285,273],
[290,283,265,284,284,303,301,0,296,285],
[284,250,247,280,266,268,266,255,0,252],
[293,264,283,277,275,281,278,266,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,284,253,260,290,273,279,285,267],
[274,0,266,264,268,285,283,287,281,275],
[267,285,0,269,262,263,286,291,257,279],
[298,287,282,0,276,305,299,308,281,264],
[291,283,289,275,0,282,283,298,272,273],
[261,266,288,246,269,0,273,279,269,276],
[278,268,265,252,268,278,0,279,253,269],
[272,264,260,243,253,272,272,0,264,261],
[266,270,294,270,279,282,298,287,0,278],
[284,276,272,287,278,275,282,290,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,252,263,257,261,289,280,292,272],
[264,0,254,267,268,276,282,293,272,287],
[299,297,0,262,283,271,293,279,293,303],
[288,284,289,0,269,287,287,290,279,290],
[294,283,268,282,0,250,288,302,276,303],
[290,275,280,264,301,0,277,293,296,291],
[262,269,258,264,263,274,0,271,259,268],
[271,258,272,261,249,258,280,0,279,287],
[259,279,258,272,275,255,292,272,0,269],
[279,264,248,261,248,260,283,264,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,289,287,286,274,284,294,279],
[277,0,305,276,286,278,274,293,308,290],
[267,246,0,265,270,277,265,281,288,285],
[262,275,286,0,280,279,262,286,277,284],
[264,265,281,271,0,266,274,279,291,293],
[265,273,274,272,285,0,279,286,280,289],
[277,277,286,289,277,272,0,306,313,296],
[267,258,270,265,272,265,245,0,274,271],
[257,243,263,274,260,271,238,277,0,268],
[272,261,266,267,258,262,255,280,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,287,283,266,296,283,264,282,277],
[280,0,272,273,275,305,282,280,292,283],
[264,279,0,287,294,304,313,264,291,288],
[268,278,264,0,288,275,300,259,280,275],
[285,276,257,263,0,297,279,270,301,276],
[255,246,247,276,254,0,263,246,272,268],
[268,269,238,251,272,288,0,259,270,262],
[287,271,287,292,281,305,292,0,284,284],
[269,259,260,271,250,279,281,267,0,278],
[274,268,263,276,275,283,289,267,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,286,254,274,255,262,275,290,271],
[282,0,279,270,285,278,262,277,300,281],
[265,272,0,255,285,272,259,281,292,280],
[297,281,296,0,302,282,274,308,299,268],
[277,266,266,249,0,270,240,266,292,255],
[296,273,279,269,281,0,276,284,299,282],
[289,289,292,277,311,275,0,287,307,272],
[276,274,270,243,285,267,264,0,295,256],
[261,251,259,252,259,252,244,256,0,254],
[280,270,271,283,296,269,279,295,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,301,286,288,292,292,286,269,286],
[266,0,266,263,269,301,291,266,236,277],
[250,285,0,273,268,292,304,291,262,281],
[265,288,278,0,291,301,309,264,278,304],
[263,282,283,260,0,277,286,254,254,272],
[259,250,259,250,274,0,262,247,209,267],
[259,260,247,242,265,289,0,288,234,272],
[265,285,260,287,297,304,263,0,269,249],
[282,315,289,273,297,342,317,282,0,307],
[265,274,270,247,279,284,279,302,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,285,270,287,308,321,285,302,301],
[245,0,258,264,267,282,283,263,276,285],
[266,293,0,280,281,293,290,258,282,275],
[281,287,271,0,279,294,296,281,278,282],
[264,284,270,272,0,294,294,269,277,284],
[243,269,258,257,257,0,271,238,270,275],
[230,268,261,255,257,280,0,254,261,253],
[266,288,293,270,282,313,297,0,283,287],
[249,275,269,273,274,281,290,268,0,279],
[250,266,276,269,267,276,298,264,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,269,276,298,286,288,296,301,280],
[257,0,273,283,274,282,258,283,313,241],
[282,278,0,266,271,255,267,281,294,259],
[275,268,285,0,262,260,246,294,270,253],
[253,277,280,289,0,266,253,279,277,282],
[265,269,296,291,285,0,271,283,307,260],
[263,293,284,305,298,280,0,302,312,273],
[255,268,270,257,272,268,249,0,281,238],
[250,238,257,281,274,244,239,270,0,241],
[271,310,292,298,269,291,278,313,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,292,286,265,289,287,273,257,269],
[269,0,273,298,250,284,317,278,276,276],
[259,278,0,277,240,286,315,290,269,267],
[265,253,274,0,250,284,306,274,254,244],
[286,301,311,301,0,307,307,297,276,274],
[262,267,265,267,244,0,317,297,261,234],
[264,234,236,245,244,234,0,248,248,234],
[278,273,261,277,254,254,303,0,251,247],
[294,275,282,297,275,290,303,300,0,278],
[282,275,284,307,277,317,317,304,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,294,322,316,283,295,299,272,325],
[241,0,276,262,324,284,241,319,243,301],
[257,275,0,275,294,269,268,292,253,285],
[229,289,276,0,302,256,226,289,267,285],
[235,227,257,249,0,247,203,274,216,237],
[268,267,282,295,304,0,223,318,260,278],
[256,310,283,325,348,328,0,298,287,333],
[252,232,259,262,277,233,253,0,251,244],
[279,308,298,284,335,291,264,300,0,291],
[226,250,266,266,314,273,218,307,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,268,278,283,301,308,296,285,284],
[263,0,289,278,284,294,282,280,262,263],
[283,262,0,270,276,291,305,276,278,263],
[273,273,281,0,277,279,288,259,281,268],
[268,267,275,274,0,264,288,246,275,256],
[250,257,260,272,287,0,285,249,255,259],
[243,269,246,263,263,266,0,264,242,252],
[255,271,275,292,305,302,287,0,284,262],
[266,289,273,270,276,296,309,267,0,270],
[267,288,288,283,295,292,299,289,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,256,258,285,273,269,289,273,274],
[265,0,265,256,286,275,271,284,277,273],
[295,286,0,262,267,294,290,289,287,294],
[293,295,289,0,289,291,292,266,281,296],
[266,265,284,262,0,283,265,254,274,286],
[278,276,257,260,268,0,275,285,282,271],
[282,280,261,259,286,276,0,264,275,285],
[262,267,262,285,297,266,287,0,280,285],
[278,274,264,270,277,269,276,271,0,286],
[277,278,257,255,265,280,266,266,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,274,281,264,272,279,291,285,285],
[262,0,268,270,272,260,260,290,274,294],
[277,283,0,259,267,277,276,287,270,291],
[270,281,292,0,284,291,297,303,286,292],
[287,279,284,267,0,276,273,295,282,290],
[279,291,274,260,275,0,280,297,281,296],
[272,291,275,254,278,271,0,290,279,282],
[260,261,264,248,256,254,261,0,263,277],
[266,277,281,265,269,270,272,288,0,283],
[266,257,260,259,261,255,269,274,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,233,253,255,231,254,262,248,249],
[286,0,224,245,251,220,248,240,244,262],
[318,327,0,280,290,277,285,305,269,294],
[298,306,271,0,297,275,285,277,257,273],
[296,300,261,254,0,259,271,272,234,253],
[320,331,274,276,292,0,297,287,279,274],
[297,303,266,266,280,254,0,288,263,290],
[289,311,246,274,279,264,263,0,247,273],
[303,307,282,294,317,272,288,304,0,278],
[302,289,257,278,298,277,261,278,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,292,275,253,289,261,279,274,272],
[264,0,279,271,271,283,284,276,274,277],
[259,272,0,274,273,289,264,278,253,263],
[276,280,277,0,288,275,278,274,287,267],
[298,280,278,263,0,275,300,288,283,268],
[262,268,262,276,276,0,283,292,279,283],
[290,267,287,273,251,268,0,306,257,278],
[272,275,273,277,263,259,245,0,262,257],
[277,277,298,264,268,272,294,289,0,264],
[279,274,288,284,283,268,273,294,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,280,291,265,252,241,289,306,292],
[278,0,258,261,258,224,267,281,266,267],
[271,293,0,271,262,276,270,291,285,280],
[260,290,280,0,289,241,266,252,253,291],
[286,293,289,262,0,259,249,296,304,291],
[299,327,275,310,292,0,293,314,302,303],
[310,284,281,285,302,258,0,313,291,269],
[262,270,260,299,255,237,238,0,266,276],
[245,285,266,298,247,249,260,285,0,286],
[259,284,271,260,260,248,282,275,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,280,264,296,292,291,313,297,275],
[255,0,283,271,272,280,262,285,274,290],
[271,268,0,269,260,297,268,277,257,270],
[287,280,282,0,282,296,272,289,283,292],
[255,279,291,269,0,297,276,291,290,297],
[259,271,254,255,254,0,267,271,272,274],
[260,289,283,279,275,284,0,304,277,297],
[238,266,274,262,260,280,247,0,280,278],
[254,277,294,268,261,279,274,271,0,274],
[276,261,281,259,254,277,254,273,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,267,271,268,285,295,312,273,272],
[261,0,264,266,279,286,280,289,275,271],
[284,287,0,281,276,298,290,307,291,260],
[280,285,270,0,278,280,286,296,282,280],
[283,272,275,273,0,269,290,309,287,258],
[266,265,253,271,282,0,268,276,267,265],
[256,271,261,265,261,283,0,298,267,267],
[239,262,244,255,242,275,253,0,265,255],
[278,276,260,269,264,284,284,286,0,257],
[279,280,291,271,293,286,284,296,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,274,263,235,242,285,287,280,274],
[275,0,285,276,282,265,276,305,282,258],
[277,266,0,286,273,279,263,288,282,260],
[288,275,265,0,257,272,270,292,296,268],
[316,269,278,294,0,281,282,309,285,283],
[309,286,272,279,270,0,273,275,258,258],
[266,275,288,281,269,278,0,289,271,245],
[264,246,263,259,242,276,262,0,254,258],
[271,269,269,255,266,293,280,297,0,263],
[277,293,291,283,268,293,306,293,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,226,312,238,466,318,414,354,263],
[364,0,201,346,169,424,310,499,403,348],
[325,350,0,273,298,325,306,366,306,273],
[239,205,278,0,256,241,213,343,312,343],
[313,382,253,295,0,407,259,448,440,349],
[85,127,226,310,144,0,403,388,352,252],
[233,241,245,338,292,148,0,343,340,250],
[137,52,185,208,103,163,208,0,302,265],
[197,148,245,239,111,199,211,249,0,249],
[288,203,278,208,202,299,301,286,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,275,270,268,284,275,289,277,283],
[291,0,301,286,269,298,283,299,285,277],
[276,250,0,275,256,263,253,288,272,263],
[281,265,276,0,280,269,276,279,280,299],
[283,282,295,271,0,277,283,267,279,293],
[267,253,288,282,274,0,266,286,273,275],
[276,268,298,275,268,285,0,285,261,284],
[262,252,263,272,284,265,266,0,269,285],
[274,266,279,271,272,278,290,282,0,276],
[268,274,288,252,258,276,267,266,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,303,286,248,289,310,295,291,270],
[295,0,330,273,267,305,321,294,301,289],
[248,221,0,295,258,254,268,280,264,226],
[265,278,256,0,244,278,278,280,270,247],
[303,284,293,307,0,273,307,299,282,280],
[262,246,297,273,278,0,271,288,291,242],
[241,230,283,273,244,280,0,278,263,273],
[256,257,271,271,252,263,273,0,276,272],
[260,250,287,281,269,260,288,275,0,263],
[281,262,325,304,271,309,278,279,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,314,294,278,316,260,299,302],
[274,0,311,307,273,281,297,284,286,316],
[269,240,0,290,264,270,299,246,280,281],
[237,244,261,0,257,267,282,259,290,285],
[257,278,287,294,0,259,321,272,297,293],
[273,270,281,284,292,0,293,291,292,324],
[235,254,252,269,230,258,0,226,279,265],
[291,267,305,292,279,260,325,0,299,311],
[252,265,271,261,254,259,272,252,0,287],
[249,235,270,266,258,227,286,240,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,235,249,254,297,309,341,335,273],
[278,0,206,250,280,294,255,269,339,282],
[316,345,0,238,268,310,325,267,367,269],
[302,301,313,0,260,285,330,342,311,285],
[297,271,283,291,0,222,315,319,304,241],
[254,257,241,266,329,0,250,263,304,224],
[242,296,226,221,236,301,0,288,329,262],
[210,282,284,209,232,288,263,0,337,257],
[216,212,184,240,247,247,222,214,0,227],
[278,269,282,266,310,327,289,294,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,291,274,304,284,296,286,286,267],
[275,0,296,285,289,280,294,262,291,284],
[260,255,0,254,283,249,291,268,284,278],
[277,266,297,0,300,270,306,262,281,275],
[247,262,268,251,0,255,287,270,257,244],
[267,271,302,281,296,0,299,274,282,277],
[255,257,260,245,264,252,0,249,271,257],
[265,289,283,289,281,277,302,0,289,287],
[265,260,267,270,294,269,280,262,0,268],
[284,267,273,276,307,274,294,264,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,306,312,316,264,339,312,288,270],
[251,0,280,269,272,231,292,290,289,252],
[245,271,0,289,299,257,289,276,286,294],
[239,282,262,0,255,264,309,281,266,255],
[235,279,252,296,0,257,305,266,253,253],
[287,320,294,287,294,0,332,307,296,256],
[212,259,262,242,246,219,0,264,237,225],
[239,261,275,270,285,244,287,0,253,272],
[263,262,265,285,298,255,314,298,0,265],
[281,299,257,296,298,295,326,279,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,290,277,290,245,264,277,273,242],
[281,0,273,309,291,280,258,315,248,269],
[261,278,0,267,246,237,227,327,275,235],
[274,242,284,0,292,283,241,296,256,227],
[261,260,305,259,0,275,249,299,280,255],
[306,271,314,268,276,0,281,297,292,273],
[287,293,324,310,302,270,0,290,273,258],
[274,236,224,255,252,254,261,0,251,216],
[278,303,276,295,271,259,278,300,0,288],
[309,282,316,324,296,278,293,335,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,268,292,261,271,231,292,273,253],
[302,0,268,277,280,257,282,290,268,299],
[283,283,0,261,289,276,290,278,272,257],
[259,274,290,0,281,260,263,272,296,267],
[290,271,262,270,0,250,299,279,280,250],
[280,294,275,291,301,0,307,289,280,289],
[320,269,261,288,252,244,0,296,283,285],
[259,261,273,279,272,262,255,0,258,269],
[278,283,279,255,271,271,268,293,0,271],
[298,252,294,284,301,262,266,282,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,264,271,267,286,255,280,272,253],
[272,0,273,276,263,288,262,280,265,263],
[287,278,0,262,264,294,255,292,266,263],
[280,275,289,0,296,310,267,280,290,282],
[284,288,287,255,0,313,279,284,284,268],
[265,263,257,241,238,0,246,267,249,258],
[296,289,296,284,272,305,0,286,276,276],
[271,271,259,271,267,284,265,0,261,268],
[279,286,285,261,267,302,275,290,0,283],
[298,288,288,269,283,293,275,283,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,316,274,286,216,255,310,326,345],
[254,0,378,290,301,223,265,308,321,329],
[235,173,0,232,240,175,211,258,248,258],
[277,261,319,0,293,236,227,304,335,301],
[265,250,311,258,0,235,222,337,265,329],
[335,328,376,315,316,0,271,339,343,338],
[296,286,340,324,329,280,0,266,324,343],
[241,243,293,247,214,212,285,0,287,294],
[225,230,303,216,286,208,227,264,0,264],
[206,222,293,250,222,213,208,257,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,279,305,290,284,281,270,279,285],
[253,0,275,274,275,267,262,273,252,259],
[272,276,0,285,274,281,270,279,259,295],
[246,277,266,0,256,283,264,261,263,272],
[261,276,277,295,0,271,258,277,269,280],
[267,284,270,268,280,0,283,261,271,283],
[270,289,281,287,293,268,0,289,268,294],
[281,278,272,290,274,290,262,0,279,286],
[272,299,292,288,282,280,283,272,0,291],
[266,292,256,279,271,268,257,265,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,266,303,287,283,308,276,300,295],
[284,0,299,301,290,297,306,251,270,276],
[285,252,0,311,281,286,294,277,279,266],
[248,250,240,0,260,243,269,230,226,241],
[264,261,270,291,0,221,334,244,264,273],
[268,254,265,308,330,0,316,269,254,275],
[243,245,257,282,217,235,0,232,266,256],
[275,300,274,321,307,282,319,0,267,277],
[251,281,272,325,287,297,285,284,0,278],
[256,275,285,310,278,276,295,274,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,286,306,278,311,274,280,273,298],
[260,0,261,284,264,285,248,271,268,263],
[265,290,0,295,271,283,268,262,283,299],
[245,267,256,0,242,293,257,248,263,267],
[273,287,280,309,0,292,271,292,292,295],
[240,266,268,258,259,0,259,262,255,258],
[277,303,283,294,280,292,0,267,287,296],
[271,280,289,303,259,289,284,0,294,300],
[278,283,268,288,259,296,264,257,0,298],
[253,288,252,284,256,293,255,251,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,257,250,273,269,270,256,255,287],
[302,0,288,285,302,283,294,273,292,297],
[294,263,0,285,292,272,287,278,283,295],
[301,266,266,0,266,277,276,274,273,288],
[278,249,259,285,0,271,264,277,280,285],
[282,268,279,274,280,0,302,271,277,283],
[281,257,264,275,287,249,0,264,274,281],
[295,278,273,277,274,280,287,0,274,298],
[296,259,268,278,271,274,277,277,0,283],
[264,254,256,263,266,268,270,253,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,293,253,322,259,250,296,288,276],
[262,0,286,248,307,279,263,280,233,272],
[258,265,0,262,312,256,277,282,249,277],
[298,303,289,0,319,302,292,272,301,293],
[229,244,239,232,0,250,243,222,223,241],
[292,272,295,249,301,0,287,275,253,265],
[301,288,274,259,308,264,0,283,257,293],
[255,271,269,279,329,276,268,0,293,291],
[263,318,302,250,328,298,294,258,0,287],
[275,279,274,258,310,286,258,260,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,239,226,267,255,258,243,262,228],
[329,0,288,285,301,329,307,297,294,265],
[312,263,0,285,295,278,285,258,282,251],
[325,266,266,0,288,282,300,279,285,255],
[284,250,256,263,0,258,282,250,280,254],
[296,222,273,269,293,0,278,258,270,266],
[293,244,266,251,269,273,0,267,273,277],
[308,254,293,272,301,293,284,0,288,252],
[289,257,269,266,271,281,278,263,0,255],
[323,286,300,296,297,285,274,299,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,285,297,300,290,288,274,305,260],
[258,0,269,286,285,283,272,273,254,243],
[266,282,0,282,255,275,273,265,253,233],
[254,265,269,0,282,313,276,285,280,260],
[251,266,296,269,0,285,234,242,258,229],
[261,268,276,238,266,0,253,223,252,253],
[263,279,278,275,317,298,0,238,290,241],
[277,278,286,266,309,328,313,0,286,283],
[246,297,298,271,293,299,261,265,0,249],
[291,308,318,291,322,298,310,268,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,307,216,335,244,460,244,244,460],
[307,0,307,307,335,335,216,244,244,307],
[244,244,0,460,244,244,460,244,244,460],
[335,244,91,0,335,244,460,244,244,460],
[216,216,307,216,0,0,216,216,460,216],
[307,216,307,307,551,0,216,216,460,307],
[91,335,91,91,335,335,0,244,244,551],
[307,307,307,307,335,335,307,0,244,307],
[307,307,307,307,91,91,307,307,0,307],
[91,244,91,91,335,244,0,244,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,288,269,298,287,271,281,289,282],
[261,0,276,266,281,276,263,265,263,269],
[263,275,0,274,271,269,255,277,269,271],
[282,285,277,0,285,293,271,294,268,294],
[253,270,280,266,0,270,267,273,266,300],
[264,275,282,258,281,0,264,270,273,269],
[280,288,296,280,284,287,0,273,272,288],
[270,286,274,257,278,281,278,0,272,277],
[262,288,282,283,285,278,279,279,0,269],
[269,282,280,257,251,282,263,274,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,367,260,313,320,336,348,333,329,303],
[184,0,198,165,207,231,208,231,168,146],
[291,353,0,274,325,324,390,307,351,337],
[238,386,277,0,356,273,317,331,275,276],
[231,344,226,195,0,229,233,210,246,219],
[215,320,227,278,322,0,175,245,203,168],
[203,343,161,234,318,376,0,224,252,214],
[218,320,244,220,341,306,327,0,305,234],
[222,383,200,276,305,348,299,246,0,309],
[248,405,214,275,332,383,337,317,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,277,259,282,308,283,317,298,298],
[251,0,264,270,260,286,286,291,291,277],
[274,287,0,264,278,290,283,294,290,294],
[292,281,287,0,269,288,298,315,287,285],
[269,291,273,282,0,269,285,306,289,285],
[243,265,261,263,282,0,271,291,279,275],
[268,265,268,253,266,280,0,302,257,285],
[234,260,257,236,245,260,249,0,255,248],
[253,260,261,264,262,272,294,296,0,275],
[253,274,257,266,266,276,266,303,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,289,281,261,279,287,281,265,290],
[269,0,287,266,260,248,266,261,245,282],
[262,264,0,263,265,257,274,237,245,284],
[270,285,288,0,274,266,295,232,249,286],
[290,291,286,277,0,285,296,270,270,293],
[272,303,294,285,266,0,301,275,263,298],
[264,285,277,256,255,250,0,253,258,265],
[270,290,314,319,281,276,298,0,277,303],
[286,306,306,302,281,288,293,274,0,280],
[261,269,267,265,258,253,286,248,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,320,228,268,280,310,281,284,229],
[250,0,305,273,275,227,267,313,285,264],
[231,246,0,243,250,240,259,241,249,230],
[323,278,308,0,302,260,339,284,292,305],
[283,276,301,249,0,246,286,263,277,259],
[271,324,311,291,305,0,282,280,308,276],
[241,284,292,212,265,269,0,238,291,272],
[270,238,310,267,288,271,313,0,288,233],
[267,266,302,259,274,243,260,263,0,266],
[322,287,321,246,292,275,279,318,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,262,280,252,220,278,283,265,271],
[264,0,277,276,273,248,286,295,291,255],
[289,274,0,264,275,232,272,294,286,274],
[271,275,287,0,280,255,274,295,303,264],
[299,278,276,271,0,254,263,296,286,282],
[331,303,319,296,297,0,274,291,308,304],
[273,265,279,277,288,277,0,293,277,285],
[268,256,257,256,255,260,258,0,280,256],
[286,260,265,248,265,243,274,271,0,278],
[280,296,277,287,269,247,266,295,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,255,282,264,291,278,294,289,264],
[277,0,266,298,279,299,309,290,296,273],
[296,285,0,281,275,286,318,275,299,292],
[269,253,270,0,263,276,279,269,269,287],
[287,272,276,288,0,281,305,297,306,264],
[260,252,265,275,270,0,283,271,274,257],
[273,242,233,272,246,268,0,274,269,240],
[257,261,276,282,254,280,277,0,278,248],
[262,255,252,282,245,277,282,273,0,237],
[287,278,259,264,287,294,311,303,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,246,239,246,271,253,250,251,264],
[303,0,287,269,299,305,302,305,290,284],
[305,264,0,283,298,284,314,283,293,298],
[312,282,268,0,284,294,280,301,294,274],
[305,252,253,267,0,285,274,281,270,284],
[280,246,267,257,266,0,301,290,278,271],
[298,249,237,271,277,250,0,288,274,268],
[301,246,268,250,270,261,263,0,267,276],
[300,261,258,257,281,273,277,284,0,264],
[287,267,253,277,267,280,283,275,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,278,288,275,274,271,301,259,263],
[266,0,288,275,251,256,272,280,255,276],
[273,263,0,269,264,268,262,268,261,264],
[263,276,282,0,266,270,258,286,251,242],
[276,300,287,285,0,285,268,295,271,268],
[277,295,283,281,266,0,263,298,278,265],
[280,279,289,293,283,288,0,287,281,268],
[250,271,283,265,256,253,264,0,249,260],
[292,296,290,300,280,273,270,302,0,283],
[288,275,287,309,283,286,283,291,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,274,184,245,342,185,243,271,236],
[274,0,231,159,293,263,171,305,287,181],
[277,320,0,217,256,238,184,292,305,171],
[367,392,334,0,384,368,256,377,357,261],
[306,258,295,167,0,257,191,342,259,216],
[209,288,313,183,294,0,276,305,302,205],
[366,380,367,295,360,275,0,386,319,318],
[308,246,259,174,209,246,165,0,259,168],
[280,264,246,194,292,249,232,292,0,196],
[315,370,380,290,335,346,233,383,355,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,265,261,282,284,270,279,292,268],
[268,0,259,255,278,264,270,273,289,267],
[286,292,0,270,284,262,267,274,277,293],
[290,296,281,0,290,276,273,286,281,297],
[269,273,267,261,0,276,285,254,266,283],
[267,287,289,275,275,0,269,280,286,285],
[281,281,284,278,266,282,0,283,289,289],
[272,278,277,265,297,271,268,0,288,290],
[259,262,274,270,285,265,262,263,0,274],
[283,284,258,254,268,266,262,261,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,260,309,319,283,311,301,312,282],
[282,0,272,284,289,281,276,288,307,256],
[291,279,0,307,290,305,288,300,300,275],
[242,267,244,0,283,265,270,269,295,242],
[232,262,261,268,0,276,280,273,263,235],
[268,270,246,286,275,0,285,326,264,239],
[240,275,263,281,271,266,0,272,276,237],
[250,263,251,282,278,225,279,0,282,209],
[239,244,251,256,288,287,275,269,0,227],
[269,295,276,309,316,312,314,342,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,260,248,276,258,267,275,271,274],
[283,0,283,253,282,273,290,262,281,279],
[291,268,0,251,281,278,277,272,281,290],
[303,298,300,0,293,270,283,298,302,294],
[275,269,270,258,0,271,268,265,294,283],
[293,278,273,281,280,0,289,274,279,294],
[284,261,274,268,283,262,0,272,268,286],
[276,289,279,253,286,277,279,0,261,291],
[280,270,270,249,257,272,283,290,0,278],
[277,272,261,257,268,257,265,260,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,285,283,272,276,285,293,271,293],
[281,0,287,302,281,272,272,300,296,302],
[266,264,0,285,262,246,263,272,258,268],
[268,249,266,0,275,246,288,269,265,276],
[279,270,289,276,0,266,298,293,297,280],
[275,279,305,305,285,0,282,296,285,301],
[266,279,288,263,253,269,0,276,283,272],
[258,251,279,282,258,255,275,0,272,267],
[280,255,293,286,254,266,268,279,0,282],
[258,249,283,275,271,250,279,284,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,284,286,282,254,269,277,278,263],
[286,0,296,286,289,276,281,272,271,263],
[267,255,0,276,276,260,265,264,261,268],
[265,265,275,0,285,272,271,265,269,265],
[269,262,275,266,0,251,249,263,257,258],
[297,275,291,279,300,0,290,285,274,264],
[282,270,286,280,302,261,0,259,275,276],
[274,279,287,286,288,266,292,0,277,281],
[273,280,290,282,294,277,276,274,0,273],
[288,288,283,286,293,287,275,270,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,265,265,260,268,268,272,261,268],
[284,0,277,270,263,273,266,257,282,283],
[286,274,0,264,272,266,277,266,283,288],
[286,281,287,0,287,275,284,280,285,292],
[291,288,279,264,0,268,276,273,281,289],
[283,278,285,276,283,0,287,286,265,282],
[283,285,274,267,275,264,0,282,269,279],
[279,294,285,271,278,265,269,0,282,296],
[290,269,268,266,270,286,282,269,0,281],
[283,268,263,259,262,269,272,255,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,286,293,280,263,237,282,336,278],
[253,0,227,268,305,271,259,264,303,277],
[265,324,0,321,328,296,256,303,337,291],
[258,283,230,0,295,228,226,263,306,263],
[271,246,223,256,0,197,221,241,238,247],
[288,280,255,323,354,0,282,258,331,305],
[314,292,295,325,330,269,0,314,319,307],
[269,287,248,288,310,293,237,0,309,280],
[215,248,214,245,313,220,232,242,0,227],
[273,274,260,288,304,246,244,271,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,296,268,241,273,237,280,268,240],
[285,0,273,264,230,270,243,252,261,234],
[255,278,0,263,221,265,226,264,263,248],
[283,287,288,0,281,300,299,300,264,278],
[310,321,330,270,0,315,295,276,278,261],
[278,281,286,251,236,0,256,261,251,242],
[314,308,325,252,256,295,0,265,318,267],
[271,299,287,251,275,290,286,0,291,268],
[283,290,288,287,273,300,233,260,0,264],
[311,317,303,273,290,309,284,283,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,284,253,255,265,266,260,268,282],
[280,0,287,287,283,261,295,267,283,273],
[267,264,0,268,290,257,267,237,261,262],
[298,264,283,0,292,277,298,271,295,275],
[296,268,261,259,0,248,273,269,257,260],
[286,290,294,274,303,0,267,279,287,289],
[285,256,284,253,278,284,0,261,268,288],
[291,284,314,280,282,272,290,0,271,293],
[283,268,290,256,294,264,283,280,0,281],
[269,278,289,276,291,262,263,258,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,275,277,314,286,285,271,259,303],
[261,0,254,263,274,243,243,261,247,274],
[276,297,0,260,292,275,260,257,253,283],
[274,288,291,0,287,270,237,275,243,289],
[237,277,259,264,0,251,249,255,257,268],
[265,308,276,281,300,0,278,276,262,288],
[266,308,291,314,302,273,0,295,278,298],
[280,290,294,276,296,275,256,0,251,267],
[292,304,298,308,294,289,273,300,0,319],
[248,277,268,262,283,263,253,284,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,292,265,281,298,303,249,329,281],
[256,0,231,213,257,262,258,226,282,222],
[259,320,0,263,289,316,268,272,299,232],
[286,338,288,0,298,269,282,258,283,307],
[270,294,262,253,0,296,254,235,253,275],
[253,289,235,282,255,0,276,250,270,275],
[248,293,283,269,297,275,0,256,322,253],
[302,325,279,293,316,301,295,0,313,268],
[222,269,252,268,298,281,229,238,0,254],
[270,329,319,244,276,276,298,283,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,293,265,251,249,276,267,277,268],
[268,0,275,260,265,267,250,267,269,270],
[258,276,0,271,264,279,271,276,264,273],
[286,291,280,0,278,266,269,280,283,269],
[300,286,287,273,0,275,274,287,275,278],
[302,284,272,285,276,0,277,297,267,283],
[275,301,280,282,277,274,0,290,275,280],
[284,284,275,271,264,254,261,0,261,259],
[274,282,287,268,276,284,276,290,0,281],
[283,281,278,282,273,268,271,292,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,278,279,305,276,303,274,284,285],
[270,0,315,282,300,290,297,275,289,291],
[273,236,0,259,264,260,252,268,261,281],
[272,269,292,0,278,308,269,284,272,282],
[246,251,287,273,0,290,276,266,264,259],
[275,261,291,243,261,0,268,259,283,252],
[248,254,299,282,275,283,0,266,270,280],
[277,276,283,267,285,292,285,0,267,270],
[267,262,290,279,287,268,281,284,0,265],
[266,260,270,269,292,299,271,281,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,291,277,290,297,283,291,295,269],
[267,0,269,275,275,263,267,266,268,256],
[260,282,0,274,286,267,262,256,274,265],
[274,276,277,0,269,285,280,273,287,274],
[261,276,265,282,0,288,279,264,260,282],
[254,288,284,266,263,0,262,257,277,278],
[268,284,289,271,272,289,0,286,280,281],
[260,285,295,278,287,294,265,0,290,283],
[256,283,277,264,291,274,271,261,0,256],
[282,295,286,277,269,273,270,268,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,366,303,297,335,281,287,300,254],
[278,0,317,324,269,299,274,264,325,286],
[185,234,0,228,198,217,222,173,281,238],
[248,227,323,0,206,257,243,236,279,225],
[254,282,353,345,0,308,338,266,296,286],
[216,252,334,294,243,0,298,249,328,224],
[270,277,329,308,213,253,0,234,312,267],
[264,287,378,315,285,302,317,0,351,286],
[251,226,270,272,255,223,239,200,0,256],
[297,265,313,326,265,327,284,265,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,244,249,318,224,292,279,277,287],
[274,0,273,231,305,265,280,280,283,287],
[307,278,0,265,321,267,289,307,286,288],
[302,320,286,0,318,260,314,290,298,284],
[233,246,230,233,0,221,252,239,240,262],
[327,286,284,291,330,0,325,268,265,301],
[259,271,262,237,299,226,0,251,249,253],
[272,271,244,261,312,283,300,0,261,281],
[274,268,265,253,311,286,302,290,0,254],
[264,264,263,267,289,250,298,270,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,240,261,250,237,238,249,257,239],
[314,0,284,286,272,278,284,273,283,261],
[311,267,0,314,271,264,257,285,292,255],
[290,265,237,0,252,252,235,247,254,233],
[301,279,280,299,0,246,274,284,268,255],
[314,273,287,299,305,0,273,292,306,263],
[313,267,294,316,277,278,0,254,287,260],
[302,278,266,304,267,259,297,0,284,270],
[294,268,259,297,283,245,264,267,0,293],
[312,290,296,318,296,288,291,281,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,282,241,242,259,279,241,258,241],
[285,0,297,299,277,262,293,293,267,244],
[269,254,0,265,238,231,281,243,275,238],
[310,252,286,0,282,262,276,276,286,257],
[309,274,313,269,0,275,284,270,269,281],
[292,289,320,289,276,0,297,279,285,270],
[272,258,270,275,267,254,0,234,258,249],
[310,258,308,275,281,272,317,0,274,314],
[293,284,276,265,282,266,293,277,0,234],
[310,307,313,294,270,281,302,237,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,299,299,377,278,291,284,338,269],
[227,0,278,239,294,253,274,161,313,263],
[252,273,0,224,227,222,170,190,272,181],
[252,312,327,0,351,334,255,254,337,290],
[174,257,324,200,0,254,262,181,343,197],
[273,298,329,217,297,0,261,233,320,262],
[260,277,381,296,289,290,0,208,332,270],
[267,390,361,297,370,318,343,0,363,294],
[213,238,279,214,208,231,219,188,0,233],
[282,288,370,261,354,289,281,257,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,274,257,277,285,273,266,267,275],
[265,0,273,254,269,261,261,250,257,267],
[277,278,0,259,275,265,275,269,273,269],
[294,297,292,0,292,272,287,289,285,281],
[274,282,276,259,0,265,265,266,269,266],
[266,290,286,279,286,0,276,279,274,272],
[278,290,276,264,286,275,0,280,266,277],
[285,301,282,262,285,272,271,0,264,275],
[284,294,278,266,282,277,285,287,0,287],
[276,284,282,270,285,279,274,276,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,270,312,304,248,310,290,250,303],
[283,0,258,296,283,276,293,292,285,291],
[281,293,0,320,303,283,314,305,271,282],
[239,255,231,0,275,237,254,246,229,265],
[247,268,248,276,0,244,274,275,252,270],
[303,275,268,314,307,0,310,323,303,330],
[241,258,237,297,277,241,0,256,254,275],
[261,259,246,305,276,228,295,0,248,283],
[301,266,280,322,299,248,297,303,0,297],
[248,260,269,286,281,221,276,268,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,272,268,278,293,293,300,285,277],
[259,0,268,277,270,280,266,278,270,281],
[279,283,0,266,279,277,286,280,286,292],
[283,274,285,0,286,295,270,283,280,288],
[273,281,272,265,0,296,275,286,278,316],
[258,271,274,256,255,0,250,282,266,286],
[258,285,265,281,276,301,0,284,300,281],
[251,273,271,268,265,269,267,0,264,284],
[266,281,265,271,273,285,251,287,0,284],
[274,270,259,263,235,265,270,267,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,302,295,272,274,285,293,289,276],
[276,0,300,281,271,277,283,287,280,276],
[249,251,0,270,268,277,264,263,261,247],
[256,270,281,0,274,260,267,265,261,257],
[279,280,283,277,0,259,272,289,278,262],
[277,274,274,291,292,0,279,277,282,273],
[266,268,287,284,279,272,0,272,266,279],
[258,264,288,286,262,274,279,0,280,275],
[262,271,290,290,273,269,285,271,0,276],
[275,275,304,294,289,278,272,276,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,258,282,287,287,271,275,257,283],
[276,0,297,293,288,306,283,277,259,288],
[293,254,0,267,270,302,255,270,281,287],
[269,258,284,0,288,280,273,291,266,281],
[264,263,281,263,0,282,293,280,254,297],
[264,245,249,271,269,0,255,236,245,264],
[280,268,296,278,258,296,0,266,246,268],
[276,274,281,260,271,315,285,0,261,275],
[294,292,270,285,297,306,305,290,0,287],
[268,263,264,270,254,287,283,276,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,305,300,260,294,272,287,280,284],
[264,0,276,274,272,287,275,272,282,251],
[246,275,0,271,269,279,304,276,287,269],
[251,277,280,0,262,267,275,274,285,274],
[291,279,282,289,0,291,281,284,276,275],
[257,264,272,284,260,0,276,266,265,273],
[279,276,247,276,270,275,0,276,274,264],
[264,279,275,277,267,285,275,0,266,272],
[271,269,264,266,275,286,277,285,0,266],
[267,300,282,277,276,278,287,279,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,307,289,291,312,268,329,319,299],
[262,0,301,275,266,299,286,313,285,276],
[244,250,0,293,236,276,231,330,245,266],
[262,276,258,0,230,272,219,302,239,259],
[260,285,315,321,0,335,256,351,269,291],
[239,252,275,279,216,0,221,297,251,289],
[283,265,320,332,295,330,0,358,295,306],
[222,238,221,249,200,254,193,0,221,207],
[232,266,306,312,282,300,256,330,0,284],
[252,275,285,292,260,262,245,344,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,314,185,313,183,274,296,168,312],
[260,0,286,236,257,182,445,257,288,85],
[237,265,0,118,316,201,276,123,237,247],
[366,315,433,0,342,312,448,257,264,324],
[238,294,235,209,0,131,394,235,300,97],
[368,369,350,239,420,0,487,350,313,369],
[277,106,275,103,157,64,0,192,142,89],
[255,294,428,294,316,201,359,0,277,226],
[383,263,314,287,251,238,409,274,0,250],
[239,466,304,227,454,182,462,325,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,274,281,254,294,267,271,271,278],
[290,0,284,258,253,293,289,265,293,263],
[277,267,0,262,272,275,270,291,269,271],
[270,293,289,0,254,283,263,290,264,273],
[297,298,279,297,0,283,278,285,278,261],
[257,258,276,268,268,0,249,280,262,256],
[284,262,281,288,273,302,0,285,287,266],
[280,286,260,261,266,271,266,0,277,250],
[280,258,282,287,273,289,264,274,0,266],
[273,288,280,278,290,295,285,301,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,276,270,256,271,274,259,273,262],
[264,0,268,253,265,264,268,257,267,259],
[275,283,0,260,278,288,268,274,285,277],
[281,298,291,0,272,303,287,276,280,281],
[295,286,273,279,0,281,285,275,293,273],
[280,287,263,248,270,0,272,251,281,268],
[277,283,283,264,266,279,0,278,279,283],
[292,294,277,275,276,300,273,0,283,294],
[278,284,266,271,258,270,272,268,0,273],
[289,292,274,270,278,283,268,257,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,272,311,255,254,304,286,291,280],
[259,0,275,297,263,247,302,278,267,266],
[279,276,0,299,270,261,293,285,268,277],
[240,254,252,0,258,227,285,246,280,250],
[296,288,281,293,0,281,306,312,303,273],
[297,304,290,324,270,0,306,313,297,289],
[247,249,258,266,245,245,0,247,250,250],
[265,273,266,305,239,238,304,0,284,269],
[260,284,283,271,248,254,301,267,0,260],
[271,285,274,301,278,262,301,282,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,218,245,242,222,232,274,262,256],
[296,0,259,270,270,252,320,297,292,276],
[333,292,0,264,287,300,301,334,323,308],
[306,281,287,0,295,292,268,315,305,269],
[309,281,264,256,0,248,278,291,300,302],
[329,299,251,259,303,0,288,304,296,314],
[319,231,250,283,273,263,0,289,288,251],
[277,254,217,236,260,247,262,0,263,249],
[289,259,228,246,251,255,263,288,0,252],
[295,275,243,282,249,237,300,302,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,270,277,289,281,275,295,268,287],
[263,0,280,243,259,248,250,269,250,251],
[281,271,0,274,272,284,273,304,269,272],
[274,308,277,0,275,289,277,301,279,280],
[262,292,279,276,0,284,268,296,272,274],
[270,303,267,262,267,0,263,269,259,258],
[276,301,278,274,283,288,0,286,280,270],
[256,282,247,250,255,282,265,0,255,258],
[283,301,282,272,279,292,271,296,0,279],
[264,300,279,271,277,293,281,293,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,295,293,295,295,287,263,280,316],
[251,0,275,283,260,282,261,280,284,300],
[256,276,0,285,252,266,264,290,272,291],
[258,268,266,0,278,288,281,298,279,281],
[256,291,299,273,0,289,264,256,289,313],
[256,269,285,263,262,0,264,275,251,303],
[264,290,287,270,287,287,0,258,270,289],
[288,271,261,253,295,276,293,0,275,294],
[271,267,279,272,262,300,281,276,0,310],
[235,251,260,270,238,248,262,257,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,271,240,264,241,259,237,251,269],
[277,0,270,271,267,269,283,271,262,269],
[280,281,0,250,267,263,278,260,239,258],
[311,280,301,0,266,286,288,266,275,285],
[287,284,284,285,0,272,291,264,268,280],
[310,282,288,265,279,0,297,268,280,270],
[292,268,273,263,260,254,0,261,260,271],
[314,280,291,285,287,283,290,0,265,284],
[300,289,312,276,283,271,291,286,0,283],
[282,282,293,266,271,281,280,267,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,322,369,296,254,433,284,263,270],
[258,0,296,405,382,252,402,338,284,277],
[229,255,0,305,292,183,354,257,209,163],
[182,146,246,0,276,175,313,261,196,157],
[255,169,259,275,0,157,288,207,163,189],
[297,299,368,376,394,0,354,364,338,218],
[118,149,197,238,263,197,0,255,213,183],
[267,213,294,290,344,187,296,0,304,203],
[288,267,342,355,388,213,338,247,0,250],
[281,274,388,394,362,333,368,348,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,297,274,214,248,250,223,272,220],
[293,0,290,266,236,253,240,242,250,245],
[254,261,0,259,199,240,249,268,208,222],
[277,285,292,0,214,202,251,232,261,269],
[337,315,352,337,0,266,310,303,269,306],
[303,298,311,349,285,0,261,271,310,281],
[301,311,302,300,241,290,0,290,276,279],
[328,309,283,319,248,280,261,0,314,262],
[279,301,343,290,282,241,275,237,0,218],
[331,306,329,282,245,270,272,289,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,253,225,245,290,235,173,190,379],
[283,0,258,256,219,161,208,131,308,320],
[298,293,0,305,225,173,243,204,284,275],
[326,295,246,0,223,186,233,212,294,288],
[306,332,326,328,0,219,316,236,272,428],
[261,390,378,365,332,0,286,311,289,385],
[316,343,308,318,235,265,0,174,331,378],
[378,420,347,339,315,240,377,0,311,526],
[361,243,267,257,279,262,220,240,0,313],
[172,231,276,263,123,166,173,25,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,270,281,273,267,276,289,280,283],
[286,0,278,282,265,293,282,282,283,281],
[281,273,0,265,291,293,291,295,271,292],
[270,269,286,0,277,290,287,276,268,277],
[278,286,260,274,0,303,288,300,263,266],
[284,258,258,261,248,0,265,293,279,264],
[275,269,260,264,263,286,0,273,281,277],
[262,269,256,275,251,258,278,0,270,271],
[271,268,280,283,288,272,270,281,0,278],
[268,270,259,274,285,287,274,280,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,262,269,282,284,291,290,290,277],
[268,0,279,290,290,279,302,285,296,273],
[289,272,0,281,286,281,282,293,273,294],
[282,261,270,0,266,271,276,279,274,276],
[269,261,265,285,0,262,289,273,278,280],
[267,272,270,280,289,0,278,275,294,281],
[260,249,269,275,262,273,0,270,263,259],
[261,266,258,272,278,276,281,0,272,269],
[261,255,278,277,273,257,288,279,0,264],
[274,278,257,275,271,270,292,282,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,253,285,276,284,260,260,269,272],
[278,0,277,287,294,266,268,287,266,284],
[298,274,0,307,299,271,271,278,278,305],
[266,264,244,0,292,267,259,262,248,276],
[275,257,252,259,0,276,245,275,252,264],
[267,285,280,284,275,0,285,274,270,275],
[291,283,280,292,306,266,0,281,277,284],
[291,264,273,289,276,277,270,0,275,279],
[282,285,273,303,299,281,274,276,0,283],
[279,267,246,275,287,276,267,272,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,275,274,268,286,267,280,284,252],
[285,0,271,279,272,273,282,274,278,276],
[276,280,0,299,278,286,291,274,306,294],
[277,272,252,0,264,281,271,270,274,272],
[283,279,273,287,0,277,277,285,298,275],
[265,278,265,270,274,0,264,269,283,264],
[284,269,260,280,274,287,0,265,280,271],
[271,277,277,281,266,282,286,0,290,270],
[267,273,245,277,253,268,271,261,0,278],
[299,275,257,279,276,287,280,281,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,289,256,270,253,269,314,267,284],
[306,0,306,302,294,301,274,315,270,270],
[262,245,0,266,282,269,278,280,232,257],
[295,249,285,0,252,307,262,315,253,286],
[281,257,269,299,0,260,246,298,248,279],
[298,250,282,244,291,0,295,276,277,264],
[282,277,273,289,305,256,0,293,271,292],
[237,236,271,236,253,275,258,0,267,244],
[284,281,319,298,303,274,280,284,0,269],
[267,281,294,265,272,287,259,307,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,284,315,300,299,276,252,233,254],
[286,0,282,304,281,265,292,285,250,267],
[267,269,0,310,291,299,279,234,240,256],
[236,247,241,0,256,249,230,252,248,270],
[251,270,260,295,0,283,276,229,252,239],
[252,286,252,302,268,0,238,267,229,277],
[275,259,272,321,275,313,0,258,260,288],
[299,266,317,299,322,284,293,0,279,281],
[318,301,311,303,299,322,291,272,0,308],
[297,284,295,281,312,274,263,270,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,267,247,293,255,233,242,270,241],
[315,0,277,304,307,277,279,309,271,262],
[284,274,0,260,264,231,242,245,268,223],
[304,247,291,0,321,322,255,281,280,296],
[258,244,287,230,0,263,238,244,267,231],
[296,274,320,229,288,0,275,248,293,285],
[318,272,309,296,313,276,0,292,286,278],
[309,242,306,270,307,303,259,0,315,261],
[281,280,283,271,284,258,265,236,0,233],
[310,289,328,255,320,266,273,290,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,259,265,274,244,254,268,267,267],
[304,0,284,291,291,262,291,276,284,282],
[292,267,0,287,282,293,296,278,288,288],
[286,260,264,0,290,285,254,277,254,266],
[277,260,269,261,0,259,288,272,276,289],
[307,289,258,266,292,0,280,289,291,276],
[297,260,255,297,263,271,0,275,258,282],
[283,275,273,274,279,262,276,0,255,269],
[284,267,263,297,275,260,293,296,0,269],
[284,269,263,285,262,275,269,282,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,305,278,266,268,307,255,302,297],
[251,0,263,233,212,263,240,261,265,272],
[246,288,0,270,275,286,275,244,288,262],
[273,318,281,0,265,281,286,289,308,294],
[285,339,276,286,0,275,295,278,282,301],
[283,288,265,270,276,0,286,290,301,278],
[244,311,276,265,256,265,0,292,262,280],
[296,290,307,262,273,261,259,0,306,316],
[249,286,263,243,269,250,289,245,0,261],
[254,279,289,257,250,273,271,235,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,228,225,234,252,230,287,267,240],
[335,0,317,316,334,271,284,321,300,276],
[323,234,0,335,309,280,337,361,243,297],
[326,235,216,0,268,259,331,273,248,226],
[317,217,242,283,0,270,294,326,244,263],
[299,280,271,292,281,0,272,285,279,266],
[321,267,214,220,257,279,0,281,284,250],
[264,230,190,278,225,266,270,0,261,251],
[284,251,308,303,307,272,267,290,0,277],
[311,275,254,325,288,285,301,300,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,290,297,269,275,281,288,299,288],
[263,0,262,250,275,247,268,278,277,261],
[261,289,0,280,277,274,280,293,296,265],
[254,301,271,0,293,273,281,295,295,302],
[282,276,274,258,0,284,288,283,273,270],
[276,304,277,278,267,0,271,290,285,271],
[270,283,271,270,263,280,0,277,267,286],
[263,273,258,256,268,261,274,0,276,279],
[252,274,255,256,278,266,284,275,0,298],
[263,290,286,249,281,280,265,272,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,319,322,305,307,311,301,276,277],
[291,0,279,255,288,290,276,286,242,271],
[232,272,0,240,265,300,274,290,260,243],
[229,296,311,0,292,279,285,264,285,250],
[246,263,286,259,0,272,258,312,263,257],
[244,261,251,272,279,0,267,283,290,277],
[240,275,277,266,293,284,0,265,259,256],
[250,265,261,287,239,268,286,0,245,223],
[275,309,291,266,288,261,292,306,0,251],
[274,280,308,301,294,274,295,328,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,294,306,328,285,284,283,285,298],
[278,0,285,287,320,288,291,270,289,303],
[257,266,0,276,272,249,269,254,274,253],
[245,264,275,0,303,252,268,242,267,262],
[223,231,279,248,0,253,257,248,269,255],
[266,263,302,299,298,0,268,256,294,282],
[267,260,282,283,294,283,0,257,257,272],
[268,281,297,309,303,295,294,0,271,303],
[266,262,277,284,282,257,294,280,0,272],
[253,248,298,289,296,269,279,248,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,280,295,306,282,262,271,281,286],
[253,0,265,264,263,265,265,256,270,277],
[271,286,0,279,291,267,274,276,276,289],
[256,287,272,0,280,261,262,252,268,266],
[245,288,260,271,0,250,244,252,253,269],
[269,286,284,290,301,0,278,270,283,287],
[289,286,277,289,307,273,0,269,294,287],
[280,295,275,299,299,281,282,0,280,279],
[270,281,275,283,298,268,257,271,0,281],
[265,274,262,285,282,264,264,272,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,275,294,274,263,278,267,268,287],
[264,0,272,291,275,263,260,276,261,291],
[276,279,0,289,275,263,264,292,271,276],
[257,260,262,0,257,256,261,269,267,276],
[277,276,276,294,0,282,290,301,268,286],
[288,288,288,295,269,0,271,284,276,280],
[273,291,287,290,261,280,0,284,264,298],
[284,275,259,282,250,267,267,0,272,282],
[283,290,280,284,283,275,287,279,0,298],
[264,260,275,275,265,271,253,269,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,281,283,266,279,283,277,274,260],
[278,0,263,264,269,264,266,257,267,274],
[270,288,0,294,284,286,282,253,263,280],
[268,287,257,0,273,257,271,235,251,269],
[285,282,267,278,0,281,281,266,269,268],
[272,287,265,294,270,0,279,254,262,268],
[268,285,269,280,270,272,0,267,254,267],
[274,294,298,316,285,297,284,0,277,281],
[277,284,288,300,282,289,297,274,0,276],
[291,277,271,282,283,283,284,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,254,267,264,271,242,262,271,258],
[280,0,307,279,289,300,280,292,260,272],
[297,244,0,280,261,269,279,284,281,281],
[284,272,271,0,281,275,273,290,265,288],
[287,262,290,270,0,288,271,266,274,254],
[280,251,282,276,263,0,270,267,258,264],
[309,271,272,278,280,281,0,299,289,281],
[289,259,267,261,285,284,252,0,254,277],
[280,291,270,286,277,293,262,297,0,295],
[293,279,270,263,297,287,270,274,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,284,293,299,296,251,285,275,272],
[278,0,256,312,262,274,246,254,291,254],
[267,295,0,327,291,275,251,282,289,237],
[258,239,224,0,255,255,191,229,283,218],
[252,289,260,296,0,341,234,287,278,291],
[255,277,276,296,210,0,232,273,229,253],
[300,305,300,360,317,319,0,272,303,306],
[266,297,269,322,264,278,279,0,291,249],
[276,260,262,268,273,322,248,260,0,281],
[279,297,314,333,260,298,245,302,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,277,256,255,294,259,252,267,299],
[263,0,260,239,248,281,232,249,267,273],
[274,291,0,275,264,290,249,262,273,260],
[295,312,276,0,255,282,257,279,259,261],
[296,303,287,296,0,298,267,279,301,298],
[257,270,261,269,253,0,247,243,267,273],
[292,319,302,294,284,304,0,269,297,304],
[299,302,289,272,272,308,282,0,290,264],
[284,284,278,292,250,284,254,261,0,249],
[252,278,291,290,253,278,247,287,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,252,289,280,276,275,284,273,287],
[280,0,280,283,276,276,271,300,294,279],
[299,271,0,302,292,284,275,297,292,290],
[262,268,249,0,266,269,254,272,261,276],
[271,275,259,285,0,268,260,276,279,274],
[275,275,267,282,283,0,273,293,274,273],
[276,280,276,297,291,278,0,287,274,296],
[267,251,254,279,275,258,264,0,278,257],
[278,257,259,290,272,277,277,273,0,285],
[264,272,261,275,277,278,255,294,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,267,266,276,306,257,287,285,268],
[287,0,291,277,280,306,273,278,299,276],
[284,260,0,280,260,291,256,270,278,274],
[285,274,271,0,277,283,275,293,284,294],
[275,271,291,274,0,281,264,276,292,282],
[245,245,260,268,270,0,260,253,264,268],
[294,278,295,276,287,291,0,273,289,287],
[264,273,281,258,275,298,278,0,292,281],
[266,252,273,267,259,287,262,259,0,272],
[283,275,277,257,269,283,264,270,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,343,375,304,235,238,335,293,278],
[316,0,302,315,259,271,281,330,322,293],
[208,249,0,279,323,239,282,231,352,257],
[176,236,272,0,255,214,158,237,273,179],
[247,292,228,296,0,276,218,303,359,295],
[316,280,312,337,275,0,274,350,332,353],
[313,270,269,393,333,277,0,317,300,368],
[216,221,320,314,248,201,234,0,231,306],
[258,229,199,278,192,219,251,320,0,208],
[273,258,294,372,256,198,183,245,343,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,273,260,254,259,248,250,275,254],
[284,0,271,258,272,264,246,235,273,272],
[278,280,0,270,262,279,267,246,262,270],
[291,293,281,0,277,266,275,252,282,305],
[297,279,289,274,0,262,252,265,288,283],
[292,287,272,285,289,0,282,271,295,291],
[303,305,284,276,299,269,0,277,279,302],
[301,316,305,299,286,280,274,0,298,293],
[276,278,289,269,263,256,272,253,0,276],
[297,279,281,246,268,260,249,258,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,265,269,278,260,261,262,278,273],
[277,0,260,258,267,261,277,279,282,269],
[286,291,0,280,292,272,294,296,294,288],
[282,293,271,0,287,284,292,298,293,288],
[273,284,259,264,0,273,283,274,282,274],
[291,290,279,267,278,0,291,294,286,277],
[290,274,257,259,268,260,0,281,285,270],
[289,272,255,253,277,257,270,0,257,279],
[273,269,257,258,269,265,266,294,0,258],
[278,282,263,263,277,274,281,272,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,236,274,239,309,263,296,264,274],
[307,0,260,327,228,279,256,303,315,258],
[315,291,0,305,268,286,278,327,250,234],
[277,224,246,0,238,299,282,257,283,221],
[312,323,283,313,0,297,275,311,277,259],
[242,272,265,252,254,0,247,265,294,244],
[288,295,273,269,276,304,0,321,341,286],
[255,248,224,294,240,286,230,0,273,223],
[287,236,301,268,274,257,210,278,0,183],
[277,293,317,330,292,307,265,328,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,297,270,292,268,284,298,265,293],
[266,0,264,266,268,270,267,256,265,269],
[254,287,0,271,297,272,268,274,263,284],
[281,285,280,0,288,279,259,290,271,259],
[259,283,254,263,0,282,274,259,257,281],
[283,281,279,272,269,0,256,268,266,286],
[267,284,283,292,277,295,0,262,273,283],
[253,295,277,261,292,283,289,0,285,299],
[286,286,288,280,294,285,278,266,0,300],
[258,282,267,292,270,265,268,252,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,280,312,299,303,291,278,210,262],
[273,0,306,305,253,291,289,241,225,273],
[271,245,0,258,269,255,277,254,220,242],
[239,246,293,0,249,215,294,227,226,243],
[252,298,282,302,0,220,290,287,263,267],
[248,260,296,336,331,0,298,263,237,304],
[260,262,274,257,261,253,0,236,216,259],
[273,310,297,324,264,288,315,0,279,290],
[341,326,331,325,288,314,335,272,0,302],
[289,278,309,308,284,247,292,261,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,267,259,271,282,293,289,278,263],
[273,0,245,258,254,273,278,262,267,248],
[284,306,0,284,263,286,307,280,302,279],
[292,293,267,0,271,274,309,261,288,277],
[280,297,288,280,0,287,302,274,304,268],
[269,278,265,277,264,0,292,259,291,254],
[258,273,244,242,249,259,0,238,262,239],
[262,289,271,290,277,292,313,0,296,247],
[273,284,249,263,247,260,289,255,0,255],
[288,303,272,274,283,297,312,304,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,253,263,276,254,234,262,248,263],
[286,0,270,264,271,294,246,294,272,272],
[298,281,0,310,250,300,284,304,276,279],
[288,287,241,0,260,288,256,271,254,236],
[275,280,301,291,0,269,273,260,266,274],
[297,257,251,263,282,0,259,264,246,250],
[317,305,267,295,278,292,0,286,248,279],
[289,257,247,280,291,287,265,0,256,268],
[303,279,275,297,285,305,303,295,0,272],
[288,279,272,315,277,301,272,283,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,306,248,236,252,287,291,295,255],
[257,0,296,254,252,265,303,287,300,265],
[245,255,0,248,240,254,289,284,244,248],
[303,297,303,0,269,285,316,300,302,307],
[315,299,311,282,0,270,289,285,303,271],
[299,286,297,266,281,0,287,290,313,279],
[264,248,262,235,262,264,0,274,270,278],
[260,264,267,251,266,261,277,0,280,245],
[256,251,307,249,248,238,281,271,0,240],
[296,286,303,244,280,272,273,306,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,238,276,263,231,256,275,273,249],
[252,0,247,288,251,290,225,266,240,227],
[313,304,0,313,263,289,265,295,277,283],
[275,263,238,0,260,249,225,268,266,243],
[288,300,288,291,0,284,258,277,307,282],
[320,261,262,302,267,0,265,275,282,261],
[295,326,286,326,293,286,0,290,308,273],
[276,285,256,283,274,276,261,0,258,252],
[278,311,274,285,244,269,243,293,0,289],
[302,324,268,308,269,290,278,299,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,295,293,275,282,273,284,262,265],
[264,0,277,289,266,278,283,273,279,238],
[256,274,0,297,270,289,266,301,259,275],
[258,262,254,0,249,261,241,243,227,228],
[276,285,281,302,0,287,274,285,255,272],
[269,273,262,290,264,0,277,289,267,272],
[278,268,285,310,277,274,0,289,256,266],
[267,278,250,308,266,262,262,0,253,256],
[289,272,292,324,296,284,295,298,0,279],
[286,313,276,323,279,279,285,295,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,277,278,351,292,322,283,307,298],
[278,0,297,269,365,294,356,328,288,337],
[274,254,0,293,337,345,339,255,358,279],
[273,282,258,0,299,347,364,329,332,280],
[200,186,214,252,0,273,323,243,254,221],
[259,257,206,204,278,0,398,286,268,198],
[229,195,212,187,228,153,0,241,224,220],
[268,223,296,222,308,265,310,0,210,251],
[244,263,193,219,297,283,327,341,0,256],
[253,214,272,271,330,353,331,300,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,280,285,271,254,285,280,274,286],
[266,0,274,271,267,252,284,273,272,279],
[271,277,0,279,267,268,277,272,285,286],
[266,280,272,0,265,268,284,274,266,279],
[280,284,284,286,0,275,294,283,288,291],
[297,299,283,283,276,0,297,298,271,301],
[266,267,274,267,257,254,0,271,260,276],
[271,278,279,277,268,253,280,0,272,281],
[277,279,266,285,263,280,291,279,0,292],
[265,272,265,272,260,250,275,270,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,286,272,286,283,270,266,289,282],
[279,0,274,268,289,279,278,280,283,278],
[265,277,0,253,280,273,271,263,273,271],
[279,283,298,0,288,270,284,287,277,283],
[265,262,271,263,0,268,271,272,269,272],
[268,272,278,281,283,0,294,272,284,300],
[281,273,280,267,280,257,0,257,278,278],
[285,271,288,264,279,279,294,0,265,279],
[262,268,278,274,282,267,273,286,0,288],
[269,273,280,268,279,251,273,272,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,260,244,215,249,282,270,228,217],
[283,0,329,298,264,272,280,250,277,287],
[291,222,0,269,241,235,245,222,237,240],
[307,253,282,0,248,293,282,256,263,263],
[336,287,310,303,0,298,275,225,301,251],
[302,279,316,258,253,0,276,240,231,236],
[269,271,306,269,276,275,0,265,247,249],
[281,301,329,295,326,311,286,0,284,257],
[323,274,314,288,250,320,304,267,0,260],
[334,264,311,288,300,315,302,294,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,267,266,287,253,274,261,273,270],
[277,0,285,272,295,280,271,272,274,282],
[284,266,0,255,280,269,253,270,250,277],
[285,279,296,0,294,276,278,265,273,277],
[264,256,271,257,0,267,262,266,266,280],
[298,271,282,275,284,0,272,287,288,285],
[277,280,298,273,289,279,0,272,274,284],
[290,279,281,286,285,264,279,0,273,289],
[278,277,301,278,285,263,277,278,0,282],
[281,269,274,274,271,266,267,262,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,366,404,236,168,314,287,408,236,340],
[185,0,349,226,290,203,228,341,233,346],
[147,202,0,130,239,153,201,367,206,147],
[315,325,421,0,226,321,235,481,251,343],
[383,261,312,325,0,260,385,386,266,312],
[237,348,398,230,291,0,229,463,278,328],
[264,323,350,316,166,322,0,479,187,251],
[143,210,184,70,165,88,72,0,139,138],
[315,318,345,300,285,273,364,412,0,339],
[211,205,404,208,239,223,300,413,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,312,298,294,271,308,292,260,311],
[255,0,280,287,262,265,283,259,254,269],
[239,271,0,265,242,238,262,277,247,258],
[253,264,286,0,263,259,264,292,261,292],
[257,289,309,288,0,285,291,303,277,278],
[280,286,313,292,266,0,292,295,263,297],
[243,268,289,287,260,259,0,274,240,267],
[259,292,274,259,248,256,277,0,247,287],
[291,297,304,290,274,288,311,304,0,305],
[240,282,293,259,273,254,284,264,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,323,328,350,319,243,296,308,324],
[236,0,289,266,297,286,258,270,258,304],
[228,262,0,328,306,266,278,256,217,270],
[223,285,223,0,278,270,224,240,220,210],
[201,254,245,273,0,265,258,252,257,224],
[232,265,285,281,286,0,284,270,229,245],
[308,293,273,327,293,267,0,263,300,318],
[255,281,295,311,299,281,288,0,282,288],
[243,293,334,331,294,322,251,269,0,317],
[227,247,281,341,327,306,233,263,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,261,285,257,273,297,282,270,246],
[285,0,297,298,277,283,293,290,304,269],
[290,254,0,279,260,296,300,281,282,272],
[266,253,272,0,241,293,257,263,281,233],
[294,274,291,310,0,309,284,291,314,285],
[278,268,255,258,242,0,258,273,286,233],
[254,258,251,294,267,293,0,294,279,223],
[269,261,270,288,260,278,257,0,286,261],
[281,247,269,270,237,265,272,265,0,240],
[305,282,279,318,266,318,328,290,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,313,422,253,402,418,336,371,343],
[246,0,330,304,234,340,304,297,364,322],
[238,221,0,273,265,296,314,323,338,307],
[129,247,278,0,262,318,244,207,376,295],
[298,317,286,289,0,395,347,328,363,252],
[149,211,255,233,156,0,287,250,323,207],
[133,247,237,307,204,264,0,179,319,223],
[215,254,228,344,223,301,372,0,331,287],
[180,187,213,175,188,228,232,220,0,182],
[208,229,244,256,299,344,328,264,369,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,284,267,272,278,264,253,265,289],
[272,0,294,284,282,281,288,270,276,276],
[267,257,0,268,273,281,267,254,256,258],
[284,267,283,0,272,273,265,264,254,271],
[279,269,278,279,0,287,293,284,275,287],
[273,270,270,278,264,0,269,259,263,272],
[287,263,284,286,258,282,0,271,273,289],
[298,281,297,287,267,292,280,0,294,277],
[286,275,295,297,276,288,278,257,0,265],
[262,275,293,280,264,279,262,274,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,298,290,362,211,248,252,293,231],
[273,0,347,317,356,297,259,384,341,301],
[253,204,0,288,312,240,141,219,241,200],
[261,234,263,0,287,200,205,291,200,205],
[189,195,239,264,0,197,190,187,199,251],
[340,254,311,351,354,0,281,320,307,334],
[303,292,410,346,361,270,0,316,355,299],
[299,167,332,260,364,231,235,0,271,252],
[258,210,310,351,352,244,196,280,0,271],
[320,250,351,346,300,217,252,299,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,269,248,260,266,276,270,262,265],
[302,0,305,236,279,287,295,291,289,261],
[282,246,0,236,246,235,243,259,271,268],
[303,315,315,0,323,321,309,274,268,312],
[291,272,305,228,0,265,277,280,282,294],
[285,264,316,230,286,0,258,262,258,260],
[275,256,308,242,274,293,0,253,260,258],
[281,260,292,277,271,289,298,0,275,271],
[289,262,280,283,269,293,291,276,0,275],
[286,290,283,239,257,291,293,280,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,232,235,259,261,230,254,243,258],
[289,0,277,286,287,303,243,250,284,258],
[319,274,0,293,298,306,292,308,282,279],
[316,265,258,0,285,292,254,310,291,277],
[292,264,253,266,0,284,253,275,287,292],
[290,248,245,259,267,0,246,259,270,279],
[321,308,259,297,298,305,0,302,274,309],
[297,301,243,241,276,292,249,0,261,263],
[308,267,269,260,264,281,277,290,0,272],
[293,293,272,274,259,272,242,288,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,265,260,292,260,249,263,268,272],
[240,0,265,259,278,253,231,252,255,233],
[286,286,0,272,298,272,276,290,274,254],
[291,292,279,0,291,278,261,273,277,271],
[259,273,253,260,0,249,237,239,261,253],
[291,298,279,273,302,0,282,280,278,275],
[302,320,275,290,314,269,0,284,294,286],
[288,299,261,278,312,271,267,0,276,300],
[283,296,277,274,290,273,257,275,0,269],
[279,318,297,280,298,276,265,251,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,273,284,272,291,295,282,268,280],
[274,0,303,294,277,291,293,291,286,298],
[278,248,0,277,262,287,268,267,270,274],
[267,257,274,0,260,286,276,280,286,285],
[279,274,289,291,0,294,290,299,284,306],
[260,260,264,265,257,0,283,268,277,267],
[256,258,283,275,261,268,0,273,273,287],
[269,260,284,271,252,283,278,0,265,272],
[283,265,281,265,267,274,278,286,0,282],
[271,253,277,266,245,284,264,279,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,248,269,275,250,269,260,272,276],
[275,0,281,283,278,274,277,276,275,284],
[303,270,0,285,286,306,298,295,298,287],
[282,268,266,0,282,259,249,261,280,284],
[276,273,265,269,0,276,255,268,261,273],
[301,277,245,292,275,0,271,268,286,271],
[282,274,253,302,296,280,0,278,286,296],
[291,275,256,290,283,283,273,0,274,265],
[279,276,253,271,290,265,265,277,0,277],
[275,267,264,267,278,280,255,286,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,276,268,294,275,260,261,292],
[282,0,263,281,282,280,284,266,258,292],
[276,288,0,306,283,292,298,268,267,300],
[275,270,245,0,262,272,267,276,258,283],
[283,269,268,289,0,280,276,277,278,289],
[257,271,259,279,271,0,272,269,259,281],
[276,267,253,284,275,279,0,266,270,278],
[291,285,283,275,274,282,285,0,255,304],
[290,293,284,293,273,292,281,296,0,311],
[259,259,251,268,262,270,273,247,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,308,294,276,313,278,292,274,284],
[283,0,318,300,308,294,310,267,306,301],
[243,233,0,267,282,262,263,269,253,281],
[257,251,284,0,280,289,253,255,280,269],
[275,243,269,271,0,292,284,252,272,282],
[238,257,289,262,259,0,259,240,292,271],
[273,241,288,298,267,292,0,251,281,283],
[259,284,282,296,299,311,300,0,269,281],
[277,245,298,271,279,259,270,282,0,272],
[267,250,270,282,269,280,268,270,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,328,308,262,291,291,305,278,297],
[274,0,312,302,279,284,285,316,288,277],
[223,239,0,263,205,233,269,242,246,235],
[243,249,288,0,246,278,265,298,260,265],
[289,272,346,305,0,290,286,336,271,297],
[260,267,318,273,261,0,261,306,245,241],
[260,266,282,286,265,290,0,298,292,265],
[246,235,309,253,215,245,253,0,230,259],
[273,263,305,291,280,306,259,321,0,292],
[254,274,316,286,254,310,286,292,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,236,309,266,241,275,327,270,281],
[267,0,267,346,294,294,283,336,298,326],
[315,284,0,333,268,284,262,338,293,294],
[242,205,218,0,234,249,211,289,212,226],
[285,257,283,317,0,309,262,307,271,291],
[310,257,267,302,242,0,240,299,254,260],
[276,268,289,340,289,311,0,362,278,337],
[224,215,213,262,244,252,189,0,242,217],
[281,253,258,339,280,297,273,309,0,309],
[270,225,257,325,260,291,214,334,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,257,273,257,274,262,274,258,256],
[282,0,276,285,258,282,257,273,266,261],
[294,275,0,289,262,291,270,265,283,278],
[278,266,262,0,253,290,271,270,266,265],
[294,293,289,298,0,284,267,278,271,290],
[277,269,260,261,267,0,257,275,245,256],
[289,294,281,280,284,294,0,284,273,277],
[277,278,286,281,273,276,267,0,270,269],
[293,285,268,285,280,306,278,281,0,289],
[295,290,273,286,261,295,274,282,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,259,271,270,276,298,276,274,290],
[263,0,273,269,267,275,285,271,263,275],
[292,278,0,289,280,262,292,296,272,284],
[280,282,262,0,255,269,282,257,289,278],
[281,284,271,296,0,280,295,291,291,294],
[275,276,289,282,271,0,288,257,280,293],
[253,266,259,269,256,263,0,265,277,273],
[275,280,255,294,260,294,286,0,279,281],
[277,288,279,262,260,271,274,272,0,279],
[261,276,267,273,257,258,278,270,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,263,279,282,266,267,271,278,289],
[270,0,276,273,276,267,282,260,272,278],
[288,275,0,276,288,290,280,280,281,280],
[272,278,275,0,285,279,276,277,285,288],
[269,275,263,266,0,281,262,275,278,287],
[285,284,261,272,270,0,274,263,296,288],
[284,269,271,275,289,277,0,271,297,284],
[280,291,271,274,276,288,280,0,286,293],
[273,279,270,266,273,255,254,265,0,266],
[262,273,271,263,264,263,267,258,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,273,222,250,232,266,246,225,244],
[303,0,277,258,276,263,263,263,253,252],
[278,274,0,268,276,267,273,283,240,258],
[329,293,283,0,319,269,316,296,265,303],
[301,275,275,232,0,249,279,254,266,266],
[319,288,284,282,302,0,317,263,297,287],
[285,288,278,235,272,234,0,275,257,287],
[305,288,268,255,297,288,276,0,256,295],
[326,298,311,286,285,254,294,295,0,304],
[307,299,293,248,285,264,264,256,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,271,289,290,294,275,296,283,272],
[265,0,277,275,267,277,271,282,276,271],
[280,274,0,279,281,293,284,287,276,282],
[262,276,272,0,284,287,266,280,279,277],
[261,284,270,267,0,283,274,277,269,279],
[257,274,258,264,268,0,276,282,273,277],
[276,280,267,285,277,275,0,273,258,283],
[255,269,264,271,274,269,278,0,272,276],
[268,275,275,272,282,278,293,279,0,278],
[279,280,269,274,272,274,268,275,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,238,285,288,282,285,280,280,257],
[278,0,230,267,279,292,290,255,286,264],
[313,321,0,283,317,298,343,274,319,301],
[266,284,268,0,321,320,321,280,273,275],
[263,272,234,230,0,268,282,276,263,269],
[269,259,253,231,283,0,283,274,268,270],
[266,261,208,230,269,268,0,248,254,247],
[271,296,277,271,275,277,303,0,299,277],
[271,265,232,278,288,283,297,252,0,261],
[294,287,250,276,282,281,304,274,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,290,281,274,297,273,282,273,291],
[256,0,272,287,281,300,265,258,265,256],
[261,279,0,291,282,265,262,257,274,255],
[270,264,260,0,277,261,235,245,267,258],
[277,270,269,274,0,266,256,259,268,260],
[254,251,286,290,285,0,254,263,276,269],
[278,286,289,316,295,297,0,257,273,289],
[269,293,294,306,292,288,294,0,275,279],
[278,286,277,284,283,275,278,276,0,263],
[260,295,296,293,291,282,262,272,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,286,281,273,270,294,259,278,297],
[264,0,262,265,276,245,281,285,271,279],
[265,289,0,264,298,267,273,267,261,282],
[270,286,287,0,281,292,278,263,274,301],
[278,275,253,270,0,262,287,278,268,272],
[281,306,284,259,289,0,298,264,275,297],
[257,270,278,273,264,253,0,269,258,271],
[292,266,284,288,273,287,282,0,260,288],
[273,280,290,277,283,276,293,291,0,304],
[254,272,269,250,279,254,280,263,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,319,261,250,271,288,273,249,288],
[267,0,282,250,282,249,295,274,265,261],
[232,269,0,283,260,266,262,287,263,272],
[290,301,268,0,291,308,289,309,288,301],
[301,269,291,260,0,298,254,291,271,275],
[280,302,285,243,253,0,260,302,266,273],
[263,256,289,262,297,291,0,274,254,264],
[278,277,264,242,260,249,277,0,246,295],
[302,286,288,263,280,285,297,305,0,285],
[263,290,279,250,276,278,287,256,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,370,254,271,349,374,303,281,359],
[270,0,312,196,244,208,304,262,235,346],
[181,239,0,239,236,237,293,207,271,270],
[297,355,312,0,292,320,348,358,260,321],
[280,307,315,259,0,287,318,275,248,340],
[202,343,314,231,264,0,372,311,258,350],
[177,247,258,203,233,179,0,211,192,314],
[248,289,344,193,276,240,340,0,242,309],
[270,316,280,291,303,293,359,309,0,382],
[192,205,281,230,211,201,237,242,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,271,280,274,269,292,275,291,272],
[290,0,284,293,266,286,287,291,299,282],
[280,267,0,308,293,291,290,296,305,296],
[271,258,243,0,259,268,273,265,257,261],
[277,285,258,292,0,270,268,264,278,286],
[282,265,260,283,281,0,262,284,300,293],
[259,264,261,278,283,289,0,293,276,264],
[276,260,255,286,287,267,258,0,296,258],
[260,252,246,294,273,251,275,255,0,265],
[279,269,255,290,265,258,287,293,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,269,286,253,366,249,313,279,241],
[270,0,296,370,331,292,283,214,270,313],
[282,255,0,262,332,289,264,242,245,231],
[265,181,289,0,299,271,245,245,217,291],
[298,220,219,252,0,331,256,268,204,284],
[185,259,262,280,220,0,210,214,211,236],
[302,268,287,306,295,341,0,210,305,258],
[238,337,309,306,283,337,341,0,233,205],
[272,281,306,334,347,340,246,318,0,338],
[310,238,320,260,267,315,293,346,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,279,278,272,265,291,300,281,285],
[257,0,275,278,272,269,277,272,273,262],
[272,276,0,282,266,276,284,277,281,264],
[273,273,269,0,270,271,276,257,271,260],
[279,279,285,281,0,277,292,281,274,278],
[286,282,275,280,274,0,276,270,282,257],
[260,274,267,275,259,275,0,272,272,259],
[251,279,274,294,270,281,279,0,274,268],
[270,278,270,280,277,269,279,277,0,272],
[266,289,287,291,273,294,292,283,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,221,176,202,266,216,265,145,176],
[398,0,296,398,377,251,367,343,343,291],
[330,255,0,459,339,310,226,257,266,273],
[375,153,92,0,313,137,216,225,192,192],
[349,174,212,238,0,116,214,261,141,224],
[285,300,241,414,435,0,327,343,359,385],
[335,184,325,335,337,224,0,257,338,282],
[286,208,294,326,290,208,294,0,270,195],
[406,208,285,359,410,192,213,281,0,224],
[375,260,278,359,327,166,269,356,327,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,264,264,291,276,286,285,268,261],
[285,0,280,272,292,265,272,279,277,271],
[287,271,0,280,280,277,287,284,269,282],
[287,279,271,0,292,275,293,291,260,292],
[260,259,271,259,0,256,268,272,270,262],
[275,286,274,276,295,0,269,280,259,274],
[265,279,264,258,283,282,0,274,270,263],
[266,272,267,260,279,271,277,0,260,263],
[283,274,282,291,281,292,281,291,0,262],
[290,280,269,259,289,277,288,288,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,339,265,336,261,259,279,289,255],
[230,0,303,276,290,298,271,263,282,239],
[212,248,0,258,287,264,215,234,259,236],
[286,275,293,0,319,283,271,276,280,282],
[215,261,264,232,0,227,213,240,231,213],
[290,253,287,268,324,0,227,231,263,252],
[292,280,336,280,338,324,0,264,298,272],
[272,288,317,275,311,320,287,0,305,299],
[262,269,292,271,320,288,253,246,0,269],
[296,312,315,269,338,299,279,252,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,269,300,283,306,285,278,304,304],
[265,0,246,282,242,241,239,233,293,274],
[282,305,0,315,307,309,292,275,316,306],
[251,269,236,0,255,234,247,269,307,253],
[268,309,244,296,0,271,265,300,276,292],
[245,310,242,317,280,0,278,281,289,276],
[266,312,259,304,286,273,0,266,280,297],
[273,318,276,282,251,270,285,0,284,287],
[247,258,235,244,275,262,271,267,0,260],
[247,277,245,298,259,275,254,264,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,268,264,256,301,277,276,263,282],
[277,0,282,257,263,285,256,270,266,275],
[283,269,0,268,263,286,259,285,265,254],
[287,294,283,0,271,295,279,265,270,286],
[295,288,288,280,0,284,254,263,266,275],
[250,266,265,256,267,0,258,272,251,271],
[274,295,292,272,297,293,0,275,275,288],
[275,281,266,286,288,279,276,0,278,281],
[288,285,286,281,285,300,276,273,0,280],
[269,276,297,265,276,280,263,270,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,355,381,342,307,330,265,302,312],
[236,0,293,301,283,254,253,193,180,181],
[196,258,0,297,227,207,257,217,284,224],
[170,250,254,0,199,250,251,203,252,224],
[209,268,324,352,0,263,261,290,311,265],
[244,297,344,301,288,0,277,311,312,241],
[221,298,294,300,290,274,0,272,255,254],
[286,358,334,348,261,240,279,0,342,268],
[249,371,267,299,240,239,296,209,0,205],
[239,370,327,327,286,310,297,283,346,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,248,299,255,280,298,257,268,265],
[321,0,251,308,251,313,307,293,264,293],
[303,300,0,327,283,309,324,268,273,299],
[252,243,224,0,239,268,280,275,203,263],
[296,300,268,312,0,306,312,324,286,309],
[271,238,242,283,245,0,261,249,234,259],
[253,244,227,271,239,290,0,258,238,263],
[294,258,283,276,227,302,293,0,240,287],
[283,287,278,348,265,317,313,311,0,283],
[286,258,252,288,242,292,288,264,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,319,321,294,313,275,301,300,287],
[262,0,315,313,283,284,266,290,288,275],
[232,236,0,320,279,276,254,306,266,276],
[230,238,231,0,231,243,240,263,248,246],
[257,268,272,320,0,280,237,291,268,269],
[238,267,275,308,271,0,235,267,269,276],
[276,285,297,311,314,316,0,307,262,286],
[250,261,245,288,260,284,244,0,255,260],
[251,263,285,303,283,282,289,296,0,280],
[264,276,275,305,282,275,265,291,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,259,259,266,251,266,280,264,276],
[280,0,284,286,276,266,276,265,265,276],
[292,267,0,277,271,283,265,274,263,299],
[292,265,274,0,274,265,274,271,281,275],
[285,275,280,277,0,278,284,287,281,291],
[300,285,268,286,273,0,276,293,282,299],
[285,275,286,277,267,275,0,279,275,290],
[271,286,277,280,264,258,272,0,264,286],
[287,286,288,270,270,269,276,287,0,303],
[275,275,252,276,260,252,261,265,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,253,319,373,289,289,399,250,314],
[162,0,283,272,358,299,299,283,277,298],
[298,268,0,325,352,282,302,324,268,325],
[232,279,226,0,296,268,275,321,257,262],
[178,193,199,255,0,218,201,195,170,230],
[262,252,269,283,333,0,272,282,220,292],
[262,252,249,276,350,279,0,290,244,299],
[152,268,227,230,356,269,261,0,240,308],
[301,274,283,294,381,331,307,311,0,263],
[237,253,226,289,321,259,252,243,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,302,274,281,272,282,294,270,274],
[266,0,281,268,294,296,263,297,276,260],
[249,270,0,260,289,270,265,308,271,276],
[277,283,291,0,267,286,264,275,282,257],
[270,257,262,284,0,267,294,296,268,278],
[279,255,281,265,284,0,288,296,274,265],
[269,288,286,287,257,263,0,289,281,300],
[257,254,243,276,255,255,262,0,266,253],
[281,275,280,269,283,277,270,285,0,271],
[277,291,275,294,273,286,251,298,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,223,240,248,217,224,269,250,244],
[339,0,286,274,273,310,288,293,292,316],
[328,265,0,312,263,311,261,329,304,263],
[311,277,239,0,222,208,232,309,289,257],
[303,278,288,329,0,284,263,343,266,286],
[334,241,240,343,267,0,264,348,313,332],
[327,263,290,319,288,287,0,368,285,325],
[282,258,222,242,208,203,183,0,261,270],
[301,259,247,262,285,238,266,290,0,312],
[307,235,288,294,265,219,226,281,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,285,268,241,249,256,261,269,249],
[281,0,239,251,227,225,213,231,231,281],
[266,312,0,231,256,237,221,234,270,248],
[283,300,320,0,269,259,295,233,293,352],
[310,324,295,282,0,254,221,258,252,292],
[302,326,314,292,297,0,303,273,247,328],
[295,338,330,256,330,248,0,291,278,319],
[290,320,317,318,293,278,260,0,263,325],
[282,320,281,258,299,304,273,288,0,315],
[302,270,303,199,259,223,232,226,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,288,283,268,276,270,296,278,326],
[269,0,315,284,269,254,281,290,284,311],
[263,236,0,260,240,229,246,279,229,273],
[268,267,291,0,247,259,274,280,290,287],
[283,282,311,304,0,268,273,287,285,316],
[275,297,322,292,283,0,297,320,291,313],
[281,270,305,277,278,254,0,278,272,285],
[255,261,272,271,264,231,273,0,266,286],
[273,267,322,261,266,260,279,285,0,311],
[225,240,278,264,235,238,266,265,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,275,264,264,275,266,245,289,282],
[302,0,325,279,292,287,286,249,353,317],
[276,226,0,273,279,247,233,224,295,285],
[287,272,278,0,244,281,260,302,341,314],
[287,259,272,307,0,311,305,268,333,307],
[276,264,304,270,240,0,286,286,312,282],
[285,265,318,291,246,265,0,276,266,297],
[306,302,327,249,283,265,275,0,310,294],
[262,198,256,210,218,239,285,241,0,223],
[269,234,266,237,244,269,254,257,328,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,286,252,246,271,268,261,277,260],
[297,0,302,265,309,259,266,281,299,283],
[265,249,0,261,251,258,248,257,271,264],
[299,286,290,0,262,257,252,249,272,255],
[305,242,300,289,0,286,270,277,301,263],
[280,292,293,294,265,0,276,257,301,265],
[283,285,303,299,281,275,0,279,299,274],
[290,270,294,302,274,294,272,0,305,277],
[274,252,280,279,250,250,252,246,0,264],
[291,268,287,296,288,286,277,274,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,283,313,298,291,298,257,277,283],
[272,0,293,298,297,286,305,279,263,291],
[268,258,0,304,290,277,277,286,272,302],
[238,253,247,0,260,256,245,260,245,250],
[253,254,261,291,0,273,254,272,263,282],
[260,265,274,295,278,0,265,258,258,285],
[253,246,274,306,297,286,0,262,265,261],
[294,272,265,291,279,293,289,0,257,294],
[274,288,279,306,288,293,286,294,0,301],
[268,260,249,301,269,266,290,257,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,287,281,278,272,266,286,264,297],
[279,0,282,267,261,281,264,288,276,279],
[264,269,0,263,261,267,256,266,268,301],
[270,284,288,0,275,291,288,295,276,284],
[273,290,290,276,0,283,274,291,278,290],
[279,270,284,260,268,0,258,286,280,286],
[285,287,295,263,277,293,0,279,272,294],
[265,263,285,256,260,265,272,0,257,295],
[287,275,283,275,273,271,279,294,0,299],
[254,272,250,267,261,265,257,256,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,296,294,272,306,262,297,287,278],
[271,0,306,320,302,306,283,283,298,297],
[255,245,0,265,274,297,247,261,272,276],
[257,231,286,0,264,275,238,284,259,288],
[279,249,277,287,0,286,250,255,281,274],
[245,245,254,276,265,0,235,262,276,260],
[289,268,304,313,301,316,0,280,304,286],
[254,268,290,267,296,289,271,0,277,282],
[264,253,279,292,270,275,247,274,0,274],
[273,254,275,263,277,291,265,269,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,290,285,273,308,267,258,286,293],
[272,0,296,309,277,300,289,269,282,286],
[261,255,0,285,246,303,265,231,265,248],
[266,242,266,0,263,288,271,255,265,263],
[278,274,305,288,0,304,286,271,276,277],
[243,251,248,263,247,0,269,248,254,228],
[284,262,286,280,265,282,0,275,274,289],
[293,282,320,296,280,303,276,0,268,277],
[265,269,286,286,275,297,277,283,0,299],
[258,265,303,288,274,323,262,274,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,267,259,280,252,245,262,278,264],
[261,0,269,245,262,254,259,254,268,271],
[284,282,0,275,276,246,257,267,269,248],
[292,306,276,0,276,268,304,272,277,283],
[271,289,275,275,0,255,280,255,288,245],
[299,297,305,283,296,0,285,293,290,275],
[306,292,294,247,271,266,0,283,292,277],
[289,297,284,279,296,258,268,0,295,272],
[273,283,282,274,263,261,259,256,0,273],
[287,280,303,268,306,276,274,279,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,268,289,275,288,326,303,283,322],
[254,0,247,257,265,270,293,292,237,275],
[283,304,0,264,296,289,303,298,288,285],
[262,294,287,0,285,299,318,286,290,242],
[276,286,255,266,0,293,308,273,269,263],
[263,281,262,252,258,0,306,277,265,288],
[225,258,248,233,243,245,0,245,229,248],
[248,259,253,265,278,274,306,0,247,244],
[268,314,263,261,282,286,322,304,0,302],
[229,276,266,309,288,263,303,307,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,303,298,307,259,300,308,313,295],
[260,0,303,316,288,274,280,303,336,273],
[248,248,0,252,251,226,259,280,292,274],
[253,235,299,0,301,254,294,293,321,286],
[244,263,300,250,0,238,263,289,320,262],
[292,277,325,297,313,0,292,323,345,252],
[251,271,292,257,288,259,0,295,312,266],
[243,248,271,258,262,228,256,0,278,250],
[238,215,259,230,231,206,239,273,0,215],
[256,278,277,265,289,299,285,301,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,260,274,270,288,275,269,259,287],
[299,0,264,262,280,303,299,292,276,297],
[291,287,0,273,305,305,296,289,288,294],
[277,289,278,0,268,298,285,291,285,284],
[281,271,246,283,0,295,276,271,292,272],
[263,248,246,253,256,0,266,266,258,276],
[276,252,255,266,275,285,0,259,283,270],
[282,259,262,260,280,285,292,0,277,285],
[292,275,263,266,259,293,268,274,0,277],
[264,254,257,267,279,275,281,266,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,264,268,268,294,276,302,276,306],
[277,0,258,259,265,271,293,290,277,292],
[287,293,0,271,266,294,272,304,291,301],
[283,292,280,0,264,280,299,299,291,276],
[283,286,285,287,0,297,271,323,288,304],
[257,280,257,271,254,0,283,301,296,303],
[275,258,279,252,280,268,0,279,280,294],
[249,261,247,252,228,250,272,0,256,288],
[275,274,260,260,263,255,271,295,0,297],
[245,259,250,275,247,248,257,263,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,275,261,259,269,255,261,267,267],
[305,0,283,292,272,294,273,267,283,269],
[276,268,0,276,260,287,271,269,284,270],
[290,259,275,0,272,286,273,272,283,280],
[292,279,291,279,0,289,269,284,276,272],
[282,257,264,265,262,0,275,274,274,263],
[296,278,280,278,282,276,0,272,283,278],
[290,284,282,279,267,277,279,0,289,286],
[284,268,267,268,275,277,268,262,0,272],
[284,282,281,271,279,288,273,265,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,337,326,334,284,302,307,371,318,268],
[214,0,260,279,239,248,234,256,283,214],
[225,291,0,297,266,263,279,297,316,278],
[217,272,254,0,299,278,304,282,318,280],
[267,312,285,252,0,264,286,308,299,255],
[249,303,288,273,287,0,282,302,303,273],
[244,317,272,247,265,269,0,294,322,252],
[180,295,254,269,243,249,257,0,240,212],
[233,268,235,233,252,248,229,311,0,236],
[283,337,273,271,296,278,299,339,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,266,268,262,296,301,239,280,261],
[262,0,237,238,273,258,268,236,280,276],
[285,314,0,249,313,331,319,280,318,320],
[283,313,302,0,298,284,278,271,325,295],
[289,278,238,253,0,247,260,220,274,257],
[255,293,220,267,304,0,264,224,257,265],
[250,283,232,273,291,287,0,268,292,290],
[312,315,271,280,331,327,283,0,281,281],
[271,271,233,226,277,294,259,270,0,272],
[290,275,231,256,294,286,261,270,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,261,283,281,257,248,285,284,301],
[283,0,270,279,274,257,247,268,261,286],
[290,281,0,286,296,293,275,280,276,301],
[268,272,265,0,273,273,284,291,271,295],
[270,277,255,278,0,276,267,286,281,292],
[294,294,258,278,275,0,254,293,273,303],
[303,304,276,267,284,297,0,313,294,299],
[266,283,271,260,265,258,238,0,248,278],
[267,290,275,280,270,278,257,303,0,284],
[250,265,250,256,259,248,252,273,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,263,279,262,257,279,284,276,266],
[272,0,266,290,261,276,299,292,297,285],
[288,285,0,285,286,277,277,278,274,283],
[272,261,266,0,273,274,290,278,300,284],
[289,290,265,278,0,280,278,284,286,284],
[294,275,274,277,271,0,268,282,290,274],
[272,252,274,261,273,283,0,287,265,273],
[267,259,273,273,267,269,264,0,272,279],
[275,254,277,251,265,261,286,279,0,286],
[285,266,268,267,267,277,278,272,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,258,269,243,264,277,290,318,281],
[299,0,285,282,270,309,300,308,318,272],
[293,266,0,264,292,289,280,312,318,274],
[282,269,287,0,269,290,287,312,320,273],
[308,281,259,282,0,300,276,305,317,302],
[287,242,262,261,251,0,260,261,294,262],
[274,251,271,264,275,291,0,287,302,259],
[261,243,239,239,246,290,264,0,263,259],
[233,233,233,231,234,257,249,288,0,239],
[270,279,277,278,249,289,292,292,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,280,165,258,231,325,277,245,233],
[349,0,347,293,321,312,409,268,315,277],
[271,204,0,196,174,211,310,230,230,189],
[386,258,355,0,310,240,396,290,306,290],
[293,230,377,241,0,226,343,275,299,242],
[320,239,340,311,325,0,378,373,331,315],
[226,142,241,155,208,173,0,218,222,208],
[274,283,321,261,276,178,333,0,289,238],
[306,236,321,245,252,220,329,262,0,297],
[318,274,362,261,309,236,343,313,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,286,286,283,329,300,273,274,284],
[243,0,237,248,280,270,285,275,275,257],
[265,314,0,304,271,276,304,265,303,304],
[265,303,247,0,265,300,336,309,294,254],
[268,271,280,286,0,295,306,275,273,259],
[222,281,275,251,256,0,302,294,273,254],
[251,266,247,215,245,249,0,244,245,250],
[278,276,286,242,276,257,307,0,295,262],
[277,276,248,257,278,278,306,256,0,312],
[267,294,247,297,292,297,301,289,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,278,260,276,282,296,296,254],
[270,0,280,286,283,266,283,294,296,261],
[277,271,0,266,276,269,265,300,287,266],
[273,265,285,0,283,261,279,281,283,264],
[291,268,275,268,0,273,272,293,292,269],
[275,285,282,290,278,0,286,294,297,282],
[269,268,286,272,279,265,0,269,269,265],
[255,257,251,270,258,257,282,0,277,256],
[255,255,264,268,259,254,282,274,0,254],
[297,290,285,287,282,269,286,295,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,273,303,306,274,293,299,290,286],
[278,0,273,287,294,273,289,290,282,279],
[278,278,0,269,290,298,288,283,288,285],
[248,264,282,0,275,272,268,257,262,267],
[245,257,261,276,0,269,269,277,261,276],
[277,278,253,279,282,0,298,278,280,271],
[258,262,263,283,282,253,0,279,277,282],
[252,261,268,294,274,273,272,0,278,261],
[261,269,263,289,290,271,274,273,0,277],
[265,272,266,284,275,280,269,290,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,253,239,284,270,212,267,337,287],
[397,0,355,307,357,325,272,324,386,351],
[298,196,0,198,268,227,238,208,249,260],
[312,244,353,0,333,297,322,359,370,284],
[267,194,283,218,0,274,209,257,289,326],
[281,226,324,254,277,0,295,210,268,259],
[339,279,313,229,342,256,0,326,345,314],
[284,227,343,192,294,341,225,0,338,276],
[214,165,302,181,262,283,206,213,0,221],
[264,200,291,267,225,292,237,275,330,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,196,230,211,148,300,228,207,211],
[323,0,395,245,240,277,367,323,298,290],
[355,156,0,186,205,165,310,292,265,199],
[321,306,365,0,280,240,371,342,265,261],
[340,311,346,271,0,294,342,352,318,279],
[403,274,386,311,257,0,370,368,323,243],
[251,184,241,180,209,181,0,278,177,249],
[323,228,259,209,199,183,273,0,267,201],
[344,253,286,286,233,228,374,284,0,251],
[340,261,352,290,272,308,302,350,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,279,293,267,280,273,275,259,289],
[264,0,259,269,282,253,264,265,286,298],
[272,292,0,275,273,278,300,265,270,281],
[258,282,276,0,299,253,248,264,267,293],
[284,269,278,252,0,260,286,256,275,287],
[271,298,273,298,291,0,271,297,267,305],
[278,287,251,303,265,280,0,282,288,287],
[276,286,286,287,295,254,269,0,285,302],
[292,265,281,284,276,284,263,266,0,307],
[262,253,270,258,264,246,264,249,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,258,270,269,278,272,273,266,258],
[278,0,264,277,260,271,271,267,266,260],
[293,287,0,283,266,287,257,280,253,260],
[281,274,268,0,264,277,265,289,270,248],
[282,291,285,287,0,281,285,287,277,267],
[273,280,264,274,270,0,266,270,257,248],
[279,280,294,286,266,285,0,286,278,279],
[278,284,271,262,264,281,265,0,251,269],
[285,285,298,281,274,294,273,300,0,276],
[293,291,291,303,284,303,272,282,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,268,278,272,263,270,253,269,266],
[257,0,260,275,251,261,254,249,259,255],
[283,291,0,268,285,266,296,279,271,271],
[273,276,283,0,284,276,266,275,264,273],
[279,300,266,267,0,276,287,270,254,269],
[288,290,285,275,275,0,295,276,273,283],
[281,297,255,285,264,256,0,270,279,263],
[298,302,272,276,281,275,281,0,273,266],
[282,292,280,287,297,278,272,278,0,273],
[285,296,280,278,282,268,288,285,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,245,100,186,310,307,309,167,228],
[324,0,318,242,285,393,419,276,370,212],
[306,233,0,173,115,291,336,228,255,141],
[451,309,378,0,261,357,406,330,339,286],
[365,266,436,290,0,335,398,285,306,240],
[241,158,260,194,216,0,356,199,197,221],
[244,132,215,145,153,195,0,199,128,143],
[242,275,323,221,266,352,352,0,193,186],
[384,181,296,212,245,354,423,358,0,189],
[323,339,410,265,311,330,408,365,362,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,304,271,321,285,282,312,317,281],
[270,0,306,294,297,295,282,292,328,261],
[247,245,0,254,295,296,249,298,306,255],
[280,257,297,0,309,318,274,285,311,274],
[230,254,256,242,0,283,261,269,278,229],
[266,256,255,233,268,0,266,259,283,227],
[269,269,302,277,290,285,0,276,311,247],
[239,259,253,266,282,292,275,0,300,277],
[234,223,245,240,273,268,240,251,0,237],
[270,290,296,277,322,324,304,274,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,279,242,253,286,246,252,243,248],
[282,0,279,228,278,268,253,253,244,289],
[272,272,0,290,261,249,259,264,238,218],
[309,323,261,0,266,290,275,256,261,261],
[298,273,290,285,0,305,286,277,269,281],
[265,283,302,261,246,0,268,282,240,249],
[305,298,292,276,265,283,0,277,290,250],
[299,298,287,295,274,269,274,0,283,275],
[308,307,313,290,282,311,261,268,0,271],
[303,262,333,290,270,302,301,276,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,267,292,292,279,289,283,275,306],
[266,0,251,293,277,274,289,274,279,291],
[284,300,0,285,276,286,291,277,275,292],
[259,258,266,0,288,272,290,273,264,289],
[259,274,275,263,0,275,282,274,263,275],
[272,277,265,279,276,0,304,268,263,293],
[262,262,260,261,269,247,0,253,256,281],
[268,277,274,278,277,283,298,0,262,264],
[276,272,276,287,288,288,295,289,0,288],
[245,260,259,262,276,258,270,287,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,283,279,268,274,293,297,282,281],
[263,0,282,277,273,277,274,266,275,275],
[268,269,0,278,246,288,261,269,272,276],
[272,274,273,0,254,273,262,257,270,276],
[283,278,305,297,0,289,291,272,287,285],
[277,274,263,278,262,0,267,264,272,253],
[258,277,290,289,260,284,0,257,263,264],
[254,285,282,294,279,287,294,0,261,290],
[269,276,279,281,264,279,288,290,0,281],
[270,276,275,275,266,298,287,261,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,280,194,216,260,192,267,187,229],
[269,0,269,298,269,249,252,311,244,269],
[271,282,0,174,157,293,245,228,249,302],
[357,253,377,0,328,361,246,285,262,372],
[335,282,394,223,0,316,264,295,257,323],
[291,302,258,190,235,0,279,237,256,320],
[359,299,306,305,287,272,0,281,143,247],
[284,240,323,266,256,314,270,0,274,349],
[364,307,302,289,294,295,408,277,0,245],
[322,282,249,179,228,231,304,202,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,309,276,274,277,282,287,284,299],
[269,0,303,268,267,267,286,294,285,314],
[242,248,0,262,254,243,264,252,254,256],
[275,283,289,0,256,266,290,264,262,263],
[277,284,297,295,0,285,290,248,281,285],
[274,284,308,285,266,0,285,292,283,279],
[269,265,287,261,261,266,0,280,285,285],
[264,257,299,287,303,259,271,0,286,289],
[267,266,297,289,270,268,266,265,0,301],
[252,237,295,288,266,272,266,262,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,270,256,271,276,288,276,281,277],
[288,0,289,254,289,285,278,270,261,270],
[281,262,0,261,279,274,286,257,271,271],
[295,297,290,0,285,314,290,273,291,285],
[280,262,272,266,0,277,286,268,262,268],
[275,266,277,237,274,0,269,263,272,267],
[263,273,265,261,265,282,0,274,272,257],
[275,281,294,278,283,288,277,0,266,270],
[270,290,280,260,289,279,279,285,0,288],
[274,281,280,266,283,284,294,281,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,276,265,273,276,290,295,273,283],
[254,0,251,267,278,240,292,276,269,278],
[275,300,0,274,247,291,293,305,265,325],
[286,284,277,0,271,278,321,290,229,317],
[278,273,304,280,0,276,288,286,274,318],
[275,311,260,273,275,0,288,283,254,267],
[261,259,258,230,263,263,0,298,236,282],
[256,275,246,261,265,268,253,0,276,313],
[278,282,286,322,277,297,315,275,0,250],
[268,273,226,234,233,284,269,238,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,282,277,284,268,260,272,276,290],
[263,0,291,280,279,265,264,276,266,290],
[269,260,0,276,271,252,256,251,275,265],
[274,271,275,0,287,266,271,271,274,290],
[267,272,280,264,0,240,268,249,254,288],
[283,286,299,285,311,0,291,284,274,292],
[291,287,295,280,283,260,0,274,277,298],
[279,275,300,280,302,267,277,0,274,286],
[275,285,276,277,297,277,274,277,0,308],
[261,261,286,261,263,259,253,265,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,248,256,271,260,256,240,236,257],
[287,0,268,248,256,256,257,260,261,274],
[303,283,0,302,297,296,279,295,263,322],
[295,303,249,0,274,284,261,263,288,272],
[280,295,254,277,0,289,254,252,254,288],
[291,295,255,267,262,0,261,251,258,255],
[295,294,272,290,297,290,0,282,270,281],
[311,291,256,288,299,300,269,0,274,288],
[315,290,288,263,297,293,281,277,0,299],
[294,277,229,279,263,296,270,263,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,255,270,286,279,283,273,260,256],
[282,0,280,266,281,286,283,269,277,252],
[296,271,0,289,290,300,306,289,295,298],
[281,285,262,0,280,291,306,293,266,276],
[265,270,261,271,0,284,285,268,274,266],
[272,265,251,260,267,0,287,282,258,243],
[268,268,245,245,266,264,0,281,272,244],
[278,282,262,258,283,269,270,0,238,263],
[291,274,256,285,277,293,279,313,0,275],
[295,299,253,275,285,308,307,288,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,239,339,254,154,203,360,214,380],
[231,0,208,289,284,231,283,246,283,455],
[312,343,0,418,336,333,252,323,326,446],
[212,262,133,0,192,260,271,260,231,198],
[297,267,215,359,0,293,212,219,201,422],
[397,320,218,291,258,0,312,274,233,394],
[348,268,299,280,339,239,0,386,278,380],
[191,305,228,291,332,277,165,0,141,328],
[337,268,225,320,350,318,273,410,0,315],
[171,96,105,353,129,157,171,223,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,241,183,254,292,256,275,291,303],
[246,0,232,252,221,295,216,324,307,440],
[310,319,0,233,323,294,282,302,316,387],
[368,299,318,0,294,282,306,254,357,369],
[297,330,228,257,0,300,250,282,363,396],
[259,256,257,269,251,0,243,264,311,307],
[295,335,269,245,301,308,0,311,380,357],
[276,227,249,297,269,287,240,0,332,387],
[260,244,235,194,188,240,171,219,0,325],
[248,111,164,182,155,244,194,164,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,298,279,269,286,269,296,272,292],
[277,0,294,270,275,282,265,276,282,292],
[253,257,0,246,262,262,251,279,267,278],
[272,281,305,0,275,281,281,291,283,304],
[282,276,289,276,0,282,269,298,270,282],
[265,269,289,270,269,0,269,278,267,282],
[282,286,300,270,282,282,0,291,290,306],
[255,275,272,260,253,273,260,0,266,286],
[279,269,284,268,281,284,261,285,0,288],
[259,259,273,247,269,269,245,265,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,234,196,279,236,221,256,248,237],
[310,0,308,256,282,331,294,289,224,295],
[317,243,0,245,310,214,266,286,281,265],
[355,295,306,0,364,375,273,377,330,342],
[272,269,241,187,0,230,218,243,207,333],
[315,220,337,176,321,0,218,324,273,305],
[330,257,285,278,333,333,0,353,257,327],
[295,262,265,174,308,227,198,0,278,260],
[303,327,270,221,344,278,294,273,0,325],
[314,256,286,209,218,246,224,291,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,291,300,271,299,286,275,288,257],
[246,0,264,273,239,261,277,271,223,239],
[260,287,0,260,254,257,301,258,221,248],
[251,278,291,0,292,246,266,247,260,250],
[280,312,297,259,0,282,275,270,240,313],
[252,290,294,305,269,0,287,249,283,241],
[265,274,250,285,276,264,0,241,239,258],
[276,280,293,304,281,302,310,0,262,260],
[263,328,330,291,311,268,312,289,0,314],
[294,312,303,301,238,310,293,291,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,282,275,295,277,281,289,264,271],
[238,0,249,269,271,257,278,272,270,265],
[269,302,0,284,297,278,281,287,290,268],
[276,282,267,0,316,287,281,293,257,250],
[256,280,254,235,0,271,265,260,253,252],
[274,294,273,264,280,0,296,280,255,277],
[270,273,270,270,286,255,0,271,262,264],
[262,279,264,258,291,271,280,0,268,272],
[287,281,261,294,298,296,289,283,0,256],
[280,286,283,301,299,274,287,279,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,278,287,276,274,292,286,291,305],
[263,0,270,276,282,274,287,281,288,286],
[273,281,0,290,264,276,271,277,283,294],
[264,275,261,0,280,276,273,268,268,280],
[275,269,287,271,0,271,284,287,274,292],
[277,277,275,275,280,0,274,277,280,279],
[259,264,280,278,267,277,0,265,272,292],
[265,270,274,283,264,274,286,0,279,304],
[260,263,268,283,277,271,279,272,0,284],
[246,265,257,271,259,272,259,247,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,249,302,272,255,265,267,280,270],
[299,0,271,311,263,262,242,270,281,265],
[302,280,0,298,281,269,277,302,264,274],
[249,240,253,0,261,261,255,243,251,249],
[279,288,270,290,0,298,276,293,283,294],
[296,289,282,290,253,0,266,274,259,291],
[286,309,274,296,275,285,0,277,265,300],
[284,281,249,308,258,277,274,0,269,293],
[271,270,287,300,268,292,286,282,0,285],
[281,286,277,302,257,260,251,258,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,306,280,299,288,290,276,270,265],
[280,0,285,303,292,255,280,277,274,267],
[245,266,0,290,277,253,255,273,277,253],
[271,248,261,0,265,245,254,255,265,258],
[252,259,274,286,0,244,259,241,252,223],
[263,296,298,306,307,0,294,307,294,277],
[261,271,296,297,292,257,0,290,274,269],
[275,274,278,296,310,244,261,0,264,257],
[281,277,274,286,299,257,277,287,0,242],
[286,284,298,293,328,274,282,294,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,268,254,215,244,242,322,223,213],
[318,0,288,300,249,261,332,356,283,272],
[283,263,0,277,230,279,304,275,290,291],
[297,251,274,0,244,241,295,315,259,249],
[336,302,321,307,0,331,312,347,283,255],
[307,290,272,310,220,0,298,313,311,242],
[309,219,247,256,239,253,0,285,232,264],
[229,195,276,236,204,238,266,0,245,246],
[328,268,261,292,268,240,319,306,0,276],
[338,279,260,302,296,309,287,305,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,282,269,281,267,304,281,278,273],
[277,0,255,270,262,248,265,270,266,267],
[269,296,0,288,277,293,302,280,283,299],
[282,281,263,0,270,262,297,270,279,273],
[270,289,274,281,0,275,292,272,279,282],
[284,303,258,289,276,0,298,285,285,283],
[247,286,249,254,259,253,0,260,264,260],
[270,281,271,281,279,266,291,0,274,278],
[273,285,268,272,272,266,287,277,0,253],
[278,284,252,278,269,268,291,273,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,277,266,271,273,274,292,273,285],
[284,0,291,288,281,292,273,294,276,299],
[274,260,0,271,274,271,267,291,275,295],
[285,263,280,0,276,289,282,287,267,295],
[280,270,277,275,0,284,253,272,277,288],
[278,259,280,262,267,0,271,279,257,290],
[277,278,284,269,298,280,0,294,272,285],
[259,257,260,264,279,272,257,0,263,283],
[278,275,276,284,274,294,279,288,0,295],
[266,252,256,256,263,261,266,268,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,279,249,271,284,297,322,244,263],
[272,0,305,247,273,286,270,314,310,260],
[272,246,0,223,255,312,272,325,277,256],
[302,304,328,0,300,316,336,347,263,325],
[280,278,296,251,0,337,288,367,308,265],
[267,265,239,235,214,0,291,310,275,273],
[254,281,279,215,263,260,0,356,246,274],
[229,237,226,204,184,241,195,0,179,215],
[307,241,274,288,243,276,305,372,0,233],
[288,291,295,226,286,278,277,336,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,264,241,281,282,262,257,274,254],
[279,0,292,275,315,294,271,293,279,282],
[287,259,0,265,279,285,264,247,280,268],
[310,276,286,0,280,282,272,277,279,263],
[270,236,272,271,0,287,255,275,277,272],
[269,257,266,269,264,0,240,241,250,263],
[289,280,287,279,296,311,0,259,284,299],
[294,258,304,274,276,310,292,0,297,299],
[277,272,271,272,274,301,267,254,0,258],
[297,269,283,288,279,288,252,252,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,287,270,272,277,303,283,284,288],
[273,0,268,258,245,244,275,256,282,261],
[264,283,0,266,264,251,286,260,274,275],
[281,293,285,0,272,268,289,255,267,287],
[279,306,287,279,0,261,285,266,267,281],
[274,307,300,283,290,0,306,283,291,292],
[248,276,265,262,266,245,0,252,268,276],
[268,295,291,296,285,268,299,0,285,284],
[267,269,277,284,284,260,283,266,0,273],
[263,290,276,264,270,259,275,267,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,268,258,273,240,266,259,268,245],
[281,0,286,263,278,261,268,271,271,249],
[283,265,0,279,271,259,267,268,278,255],
[293,288,272,0,294,260,282,262,277,284],
[278,273,280,257,0,266,267,262,261,273],
[311,290,292,291,285,0,274,271,296,286],
[285,283,284,269,284,277,0,284,270,262],
[292,280,283,289,289,280,267,0,282,273],
[283,280,273,274,290,255,281,269,0,272],
[306,302,296,267,278,265,289,278,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,279,290,272,262,305,293,276,287],
[273,0,277,286,260,276,285,276,272,253],
[272,274,0,281,292,284,291,295,269,268],
[261,265,270,0,255,266,281,263,276,264],
[279,291,259,296,0,269,280,288,269,281],
[289,275,267,285,282,0,312,282,282,268],
[246,266,260,270,271,239,0,257,255,263],
[258,275,256,288,263,269,294,0,277,261],
[275,279,282,275,282,269,296,274,0,268],
[264,298,283,287,270,283,288,290,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,315,284,278,283,274,287,314,276],
[241,0,298,275,285,282,258,252,297,252],
[236,253,0,255,265,262,247,240,264,255],
[267,276,296,0,280,265,250,262,279,264],
[273,266,286,271,0,271,259,270,275,266],
[268,269,289,286,280,0,279,253,307,274],
[277,293,304,301,292,272,0,281,285,279],
[264,299,311,289,281,298,270,0,287,288],
[237,254,287,272,276,244,266,264,0,249],
[275,299,296,287,285,277,272,263,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,284,265,287,259,270,280,281,279],
[269,0,275,275,263,270,265,264,270,269],
[267,276,0,267,278,281,269,254,262,270],
[286,276,284,0,290,265,285,271,277,288],
[264,288,273,261,0,277,288,267,291,273],
[292,281,270,286,274,0,309,283,280,283],
[281,286,282,266,263,242,0,278,281,274],
[271,287,297,280,284,268,273,0,288,283],
[270,281,289,274,260,271,270,263,0,286],
[272,282,281,263,278,268,277,268,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,368,262,327,276,311,246,351,314,307],
[183,0,220,348,237,345,168,334,249,256],
[289,331,0,390,332,353,197,364,280,201],
[224,203,161,0,204,216,194,322,233,195],
[275,314,219,347,0,360,219,388,260,358],
[240,206,198,335,191,0,295,321,300,208],
[305,383,354,357,332,256,0,375,276,312],
[200,217,187,229,163,230,176,0,176,180],
[237,302,271,318,291,251,275,375,0,227],
[244,295,350,356,193,343,239,371,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,300,288,289,292,285,302,306,305],
[279,0,277,273,277,261,281,275,315,307],
[251,274,0,250,316,248,288,262,293,264],
[263,278,301,0,309,311,282,274,288,331],
[262,274,235,242,0,283,290,263,278,294],
[259,290,303,240,268,0,286,244,269,299],
[266,270,263,269,261,265,0,259,292,308],
[249,276,289,277,288,307,292,0,301,301],
[245,236,258,263,273,282,259,250,0,284],
[246,244,287,220,257,252,243,250,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,271,254,265,250,239,242,239,249],
[305,0,301,282,308,295,290,272,275,308],
[280,250,0,245,264,270,261,249,249,275],
[297,269,306,0,335,288,246,274,265,304],
[286,243,287,216,0,262,250,233,236,249],
[301,256,281,263,289,0,259,254,269,247],
[312,261,290,305,301,292,0,298,279,280],
[309,279,302,277,318,297,253,0,270,282],
[312,276,302,286,315,282,272,281,0,291],
[302,243,276,247,302,304,271,269,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,266,261,277,268,279,286,267,296],
[265,0,282,266,261,276,288,281,264,285],
[285,269,0,277,265,269,281,284,268,297],
[290,285,274,0,269,273,289,284,272,292],
[274,290,286,282,0,270,287,295,276,293],
[283,275,282,278,281,0,288,278,287,296],
[272,263,270,262,264,263,0,274,267,280],
[265,270,267,267,256,273,277,0,259,288],
[284,287,283,279,275,264,284,292,0,283],
[255,266,254,259,258,255,271,263,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,256,258,275,226,282,254,271,230],
[277,0,271,259,240,267,264,298,260,247],
[295,280,0,221,282,202,282,224,242,209],
[293,292,330,0,272,245,276,315,279,243],
[276,311,269,279,0,287,297,238,284,239],
[325,284,349,306,264,0,309,245,279,284],
[269,287,269,275,254,242,0,234,270,226],
[297,253,327,236,313,306,317,0,249,288],
[280,291,309,272,267,272,281,302,0,240],
[321,304,342,308,312,267,325,263,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,256,277,291,269,288,282,262,276],
[270,0,282,286,278,270,291,287,281,296],
[295,269,0,263,266,250,267,267,248,265],
[274,265,288,0,301,268,266,274,267,261],
[260,273,285,250,0,242,283,274,277,241],
[282,281,301,283,309,0,267,290,276,287],
[263,260,284,285,268,284,0,280,273,269],
[269,264,284,277,277,261,271,0,288,250],
[289,270,303,284,274,275,278,263,0,287],
[275,255,286,290,310,264,282,301,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,287,274,254,269,279,277,269,274],
[271,0,279,258,265,277,266,271,275,253],
[264,272,0,266,262,284,271,270,268,260],
[277,293,285,0,281,270,284,273,300,268],
[297,286,289,270,0,286,277,280,287,268],
[282,274,267,281,265,0,279,274,290,265],
[272,285,280,267,274,272,0,268,299,266],
[274,280,281,278,271,277,283,0,274,285],
[282,276,283,251,264,261,252,277,0,259],
[277,298,291,283,283,286,285,266,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,273,253,286,273,273,288,248,240],
[292,0,300,291,307,300,314,290,254,280],
[278,251,0,252,276,269,293,253,249,253],
[298,260,299,0,314,290,282,289,277,282],
[265,244,275,237,0,297,294,270,245,242],
[278,251,282,261,254,0,287,257,248,242],
[278,237,258,269,257,264,0,268,246,242],
[263,261,298,262,281,294,283,0,224,254],
[303,297,302,274,306,303,305,327,0,272],
[311,271,298,269,309,309,309,297,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,236,258,279,320,251,263,270,261],
[309,0,247,283,291,306,317,303,320,274],
[315,304,0,290,261,332,295,325,331,298],
[293,268,261,0,320,331,321,299,314,273],
[272,260,290,231,0,306,270,277,300,234],
[231,245,219,220,245,0,270,268,275,240],
[300,234,256,230,281,281,0,278,296,237],
[288,248,226,252,274,283,273,0,299,226],
[281,231,220,237,251,276,255,252,0,218],
[290,277,253,278,317,311,314,325,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,245,261,245,269,280,277,268,250],
[262,0,264,273,261,275,279,264,280,272],
[306,287,0,280,267,285,290,278,285,270],
[290,278,271,0,265,281,302,282,271,262],
[306,290,284,286,0,290,308,291,272,278],
[282,276,266,270,261,0,279,282,255,256],
[271,272,261,249,243,272,0,258,254,260],
[274,287,273,269,260,269,293,0,275,258],
[283,271,266,280,279,296,297,276,0,272],
[301,279,281,289,273,295,291,293,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,265,251,284,249,259,268,262,293],
[255,0,241,264,264,261,236,274,255,260],
[286,310,0,276,301,278,261,273,292,303],
[300,287,275,0,288,267,261,287,286,284],
[267,287,250,263,0,250,250,260,281,273],
[302,290,273,284,301,0,274,289,265,299],
[292,315,290,290,301,277,0,274,287,293],
[283,277,278,264,291,262,277,0,275,287],
[289,296,259,265,270,286,264,276,0,278],
[258,291,248,267,278,252,258,264,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,269,273,287,270,291,268,270,293],
[276,0,265,275,267,261,266,260,253,270],
[282,286,0,292,296,272,286,274,275,299],
[278,276,259,0,266,272,264,264,266,279],
[264,284,255,285,0,276,272,266,272,283],
[281,290,279,279,275,0,287,286,269,290],
[260,285,265,287,279,264,0,265,277,292],
[283,291,277,287,285,265,286,0,299,285],
[281,298,276,285,279,282,274,252,0,273],
[258,281,252,272,268,261,259,266,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,280,284,298,283,291,286,270,284],
[249,0,263,256,305,248,277,260,236,261],
[271,288,0,272,294,261,287,283,259,277],
[267,295,279,0,300,272,302,286,247,279],
[253,246,257,251,0,262,271,270,250,251],
[268,303,290,279,289,0,292,298,281,282],
[260,274,264,249,280,259,0,271,251,258],
[265,291,268,265,281,253,280,0,258,268],
[281,315,292,304,301,270,300,293,0,293],
[267,290,274,272,300,269,293,283,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,296,277,275,286,285,271,278,281],
[264,0,289,291,262,273,267,287,290,264],
[255,262,0,254,256,267,265,258,283,245],
[274,260,297,0,254,267,263,252,262,267],
[276,289,295,297,0,281,292,273,289,262],
[265,278,284,284,270,0,273,272,280,264],
[266,284,286,288,259,278,0,282,271,268],
[280,264,293,299,278,279,269,0,281,272],
[273,261,268,289,262,271,280,270,0,253],
[270,287,306,284,289,287,283,279,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,261,290,286,269,294,265,268,272],
[268,0,249,271,284,270,272,257,258,255],
[290,302,0,283,300,295,319,264,297,285],
[261,280,268,0,286,265,295,266,267,237],
[265,267,251,265,0,250,277,245,233,258],
[282,281,256,286,301,0,267,278,262,280],
[257,279,232,256,274,284,0,277,240,246],
[286,294,287,285,306,273,274,0,266,263],
[283,293,254,284,318,289,311,285,0,306],
[279,296,266,314,293,271,305,288,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,271,275,286,274,284,288,283,281],
[277,0,252,270,272,261,265,283,266,269],
[280,299,0,275,295,274,277,288,294,281],
[276,281,276,0,266,281,267,284,282,276],
[265,279,256,285,0,263,275,270,270,275],
[277,290,277,270,288,0,261,299,275,287],
[267,286,274,284,276,290,0,287,296,287],
[263,268,263,267,281,252,264,0,281,278],
[268,285,257,269,281,276,255,270,0,268],
[270,282,270,275,276,264,264,273,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,305,270,286,272,272,276,275,296],
[271,0,272,274,264,237,261,245,239,284],
[246,279,0,239,269,269,232,247,251,273],
[281,277,312,0,306,283,272,303,236,321],
[265,287,282,245,0,245,252,264,268,280],
[279,314,282,268,306,0,254,277,278,302],
[279,290,319,279,299,297,0,295,270,288],
[275,306,304,248,287,274,256,0,275,312],
[276,312,300,315,283,273,281,276,0,299],
[255,267,278,230,271,249,263,239,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,306,294,272,275,272,287,273,268],
[250,0,257,262,271,262,259,259,263,252],
[245,294,0,273,290,284,252,261,268,266],
[257,289,278,0,289,283,273,267,267,266],
[279,280,261,262,0,278,279,262,263,251],
[276,289,267,268,273,0,260,266,257,276],
[279,292,299,278,272,291,0,285,281,288],
[264,292,290,284,289,285,266,0,280,292],
[278,288,283,284,288,294,270,271,0,271],
[283,299,285,285,300,275,263,259,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,269,270,292,295,292,279,270,276],
[278,0,270,268,288,274,289,281,276,276],
[282,281,0,279,295,297,286,270,288,273],
[281,283,272,0,296,301,289,286,293,295],
[259,263,256,255,0,292,273,269,266,263],
[256,277,254,250,259,0,267,246,267,250],
[259,262,265,262,278,284,0,279,272,273],
[272,270,281,265,282,305,272,0,286,270],
[281,275,263,258,285,284,279,265,0,251],
[275,275,278,256,288,301,278,281,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,279,286,289,282,269,276,292,283],
[277,0,272,284,266,280,282,268,277,278],
[272,279,0,279,274,290,282,272,271,278],
[265,267,272,0,258,269,252,260,278,272],
[262,285,277,293,0,264,276,294,278,284],
[269,271,261,282,287,0,265,260,274,274],
[282,269,269,299,275,286,0,258,286,285],
[275,283,279,291,257,291,293,0,292,286],
[259,274,280,273,273,277,265,259,0,266],
[268,273,273,279,267,277,266,265,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,278,281,273,299,287,276,282,285],
[298,0,286,279,282,298,270,295,281,280],
[273,265,0,283,280,295,268,275,264,265],
[270,272,268,0,271,296,267,281,256,253],
[278,269,271,280,0,274,266,284,283,268],
[252,253,256,255,277,0,260,266,244,261],
[264,281,283,284,285,291,0,300,282,285],
[275,256,276,270,267,285,251,0,260,276],
[269,270,287,295,268,307,269,291,0,272],
[266,271,286,298,283,290,266,275,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,293,238,272,254,286,256,267,262],
[312,0,294,267,282,293,276,265,300,272],
[258,257,0,256,249,243,251,268,256,271],
[313,284,295,0,270,279,304,285,301,295],
[279,269,302,281,0,283,250,248,268,293],
[297,258,308,272,268,0,284,285,270,298],
[265,275,300,247,301,267,0,266,283,261],
[295,286,283,266,303,266,285,0,291,290],
[284,251,295,250,283,281,268,260,0,279],
[289,279,280,256,258,253,290,261,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,271,283,276,301,289,265,272,290],
[268,0,276,297,257,275,269,280,283,298],
[280,275,0,288,260,276,270,272,267,272],
[268,254,263,0,261,283,257,258,278,263],
[275,294,291,290,0,283,288,284,288,294],
[250,276,275,268,268,0,291,274,282,284],
[262,282,281,294,263,260,0,266,265,284],
[286,271,279,293,267,277,285,0,280,291],
[279,268,284,273,263,269,286,271,0,277],
[261,253,279,288,257,267,267,260,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,310,266,271,225,248,350,253,194],
[341,0,364,299,312,282,278,350,285,227],
[241,187,0,211,246,149,207,292,250,244],
[285,252,340,0,223,229,240,296,217,190],
[280,239,305,328,0,227,295,323,283,299],
[326,269,402,322,324,0,263,353,278,294],
[303,273,344,311,256,288,0,324,268,265],
[201,201,259,255,228,198,227,0,193,242],
[298,266,301,334,268,273,283,358,0,256],
[357,324,307,361,252,257,286,309,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,261,285,319,263,262,258,262,249],
[288,0,269,286,302,259,263,275,271,258],
[290,282,0,308,307,283,271,282,285,266],
[266,265,243,0,300,272,260,267,254,276],
[232,249,244,251,0,235,241,235,252,252],
[288,292,268,279,316,0,271,258,268,276],
[289,288,280,291,310,280,0,287,271,286],
[293,276,269,284,316,293,264,0,283,276],
[289,280,266,297,299,283,280,268,0,294],
[302,293,285,275,299,275,265,275,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,281,243,263,270,281,256,246,301],
[237,0,213,193,207,243,228,183,205,266],
[270,338,0,271,287,289,283,252,293,306],
[308,358,280,0,286,317,303,264,281,297],
[288,344,264,265,0,297,310,247,266,315],
[281,308,262,234,254,0,255,228,252,279],
[270,323,268,248,241,296,0,257,249,240],
[295,368,299,287,304,323,294,0,269,285],
[305,346,258,270,285,299,302,282,0,288],
[250,285,245,254,236,272,311,266,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,267,272,282,280,284,296,275],
[272,0,275,264,248,257,288,251,287,269],
[276,276,0,271,289,285,273,270,285,275],
[284,287,280,0,287,284,283,269,281,295],
[279,303,262,264,0,263,278,270,284,265],
[269,294,266,267,288,0,308,272,276,297],
[271,263,278,268,273,243,0,287,297,267],
[267,300,281,282,281,279,264,0,290,272],
[255,264,266,270,267,275,254,261,0,271],
[276,282,276,256,286,254,284,279,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,276,291,259,306,282,270,270,268],
[280,0,277,284,264,306,264,254,283,284],
[275,274,0,270,272,310,281,252,270,269],
[260,267,281,0,277,294,277,280,259,273],
[292,287,279,274,0,309,301,280,282,279],
[245,245,241,257,242,0,279,233,253,260],
[269,287,270,274,250,272,0,259,256,263],
[281,297,299,271,271,318,292,0,272,287],
[281,268,281,292,269,298,295,279,0,271],
[283,267,282,278,272,291,288,264,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,265,242,258,273,266,260,264],
[278,0,283,257,258,250,227,266,247,249],
[272,268,0,245,260,262,241,273,237,239],
[286,294,306,0,267,284,267,296,282,283],
[309,293,291,284,0,294,262,281,276,276],
[293,301,289,267,257,0,266,279,280,268],
[278,324,310,284,289,285,0,295,281,273],
[285,285,278,255,270,272,256,0,238,241],
[291,304,314,269,275,271,270,313,0,282],
[287,302,312,268,275,283,278,310,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,249,292,261,258,257,262,288,265],
[305,0,271,292,276,282,286,264,286,285],
[302,280,0,300,282,279,272,262,298,282],
[259,259,251,0,262,270,277,257,287,290],
[290,275,269,289,0,265,290,280,277,288],
[293,269,272,281,286,0,278,284,304,290],
[294,265,279,274,261,273,0,265,287,264],
[289,287,289,294,271,267,286,0,313,279],
[263,265,253,264,274,247,264,238,0,270],
[286,266,269,261,263,261,287,272,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,264,283,268,272,281,273,285,260],
[278,0,279,279,266,264,277,275,280,282],
[287,272,0,321,284,283,272,278,286,282],
[268,272,230,0,249,267,261,268,280,265],
[283,285,267,302,0,307,304,285,306,285],
[279,287,268,284,244,0,263,299,292,275],
[270,274,279,290,247,288,0,294,298,263],
[278,276,273,283,266,252,257,0,274,269],
[266,271,265,271,245,259,253,277,0,259],
[291,269,269,286,266,276,288,282,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,277,299,259,266,261,289,283,289],
[284,0,271,300,265,259,262,315,270,290],
[274,280,0,290,252,266,285,296,269,292],
[252,251,261,0,262,238,246,260,269,268],
[292,286,299,289,0,285,256,294,282,288],
[285,292,285,313,266,0,290,320,316,294],
[290,289,266,305,295,261,0,304,276,299],
[262,236,255,291,257,231,247,0,280,272],
[268,281,282,282,269,235,275,271,0,302],
[262,261,259,283,263,257,252,279,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,299,298,278,259,283,298,297,285],
[268,0,289,283,247,278,269,298,291,280],
[252,262,0,303,252,266,288,287,285,263],
[253,268,248,0,264,249,275,262,273,260],
[273,304,299,287,0,274,303,292,310,290],
[292,273,285,302,277,0,293,301,279,289],
[268,282,263,276,248,258,0,319,294,276],
[253,253,264,289,259,250,232,0,265,274],
[254,260,266,278,241,272,257,286,0,250],
[266,271,288,291,261,262,275,277,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,252,256,253,288,256,279,284,267],
[269,0,290,312,298,305,273,264,320,282],
[299,261,0,310,293,277,256,272,296,278],
[295,239,241,0,271,282,232,202,285,244],
[298,253,258,280,0,281,230,233,305,293],
[263,246,274,269,270,0,285,268,279,246],
[295,278,295,319,321,266,0,268,317,274],
[272,287,279,349,318,283,283,0,281,303],
[267,231,255,266,246,272,234,270,0,266],
[284,269,273,307,258,305,277,248,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,228,301,251,266,231,311,187,265],
[301,0,280,297,279,343,294,360,247,285],
[323,271,0,259,324,356,347,339,305,341],
[250,254,292,0,243,299,328,267,263,331],
[300,272,227,308,0,293,313,299,245,309],
[285,208,195,252,258,0,268,247,208,277],
[320,257,204,223,238,283,0,272,220,333],
[240,191,212,284,252,304,279,0,186,302],
[364,304,246,288,306,343,331,365,0,303],
[286,266,210,220,242,274,218,249,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,276,301,245,281,279,275,244,285],
[291,0,250,290,248,264,271,265,239,267],
[275,301,0,300,261,294,276,312,264,297],
[250,261,251,0,258,229,270,270,244,258],
[306,303,290,293,0,299,291,302,269,309],
[270,287,257,322,252,0,267,275,280,325],
[272,280,275,281,260,284,0,288,234,266],
[276,286,239,281,249,276,263,0,265,249],
[307,312,287,307,282,271,317,286,0,291],
[266,284,254,293,242,226,285,302,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,283,288,277,280,263,295,291,292],
[248,0,256,263,265,261,266,275,246,269],
[268,295,0,286,268,282,264,277,275,273],
[263,288,265,0,270,277,272,280,266,277],
[274,286,283,281,0,291,286,297,283,284],
[271,290,269,274,260,0,279,273,265,297],
[288,285,287,279,265,272,0,284,265,278],
[256,276,274,271,254,278,267,0,250,282],
[260,305,276,285,268,286,286,301,0,295],
[259,282,278,274,267,254,273,269,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,277,262,245,284,258,255,301,298],
[271,0,266,244,228,275,249,259,255,273],
[274,285,0,295,259,285,273,288,297,325],
[289,307,256,0,266,274,233,235,278,280],
[306,323,292,285,0,291,274,276,299,314],
[267,276,266,277,260,0,276,253,305,289],
[293,302,278,318,277,275,0,264,295,287],
[296,292,263,316,275,298,287,0,298,298],
[250,296,254,273,252,246,256,253,0,298],
[253,278,226,271,237,262,264,253,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,282,274,259,276,262,268,259,262],
[286,0,274,295,270,275,264,271,283,271],
[269,277,0,292,272,276,270,266,278,270],
[277,256,259,0,265,269,256,256,259,261],
[292,281,279,286,0,282,280,267,294,257],
[275,276,275,282,269,0,267,271,282,276],
[289,287,281,295,271,284,0,289,295,286],
[283,280,285,295,284,280,262,0,273,273],
[292,268,273,292,257,269,256,278,0,264],
[289,280,281,290,294,275,265,278,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,292,292,293,281,275,277,293,285],
[259,0,269,277,285,268,279,273,276,264],
[259,282,0,279,282,271,295,275,273,278],
[259,274,272,0,280,267,283,262,268,278],
[258,266,269,271,0,263,270,255,277,280],
[270,283,280,284,288,0,271,266,278,280],
[276,272,256,268,281,280,0,264,266,284],
[274,278,276,289,296,285,287,0,295,286],
[258,275,278,283,274,273,285,256,0,263],
[266,287,273,273,271,271,267,265,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,290,271,285,298,272,262,257,262],
[267,0,259,271,268,287,275,258,258,257],
[261,292,0,278,279,289,265,264,272,281],
[280,280,273,0,281,295,278,277,276,278],
[266,283,272,270,0,278,266,269,262,255],
[253,264,262,256,273,0,256,255,247,260],
[279,276,286,273,285,295,0,272,267,264],
[289,293,287,274,282,296,279,0,267,279],
[294,293,279,275,289,304,284,284,0,265],
[289,294,270,273,296,291,287,272,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,267,275,294,288,282,274,282,265],
[275,0,260,274,293,271,271,269,274,254],
[284,291,0,278,287,277,271,273,273,263],
[276,277,273,0,269,276,275,278,274,269],
[257,258,264,282,0,270,274,277,269,262],
[263,280,274,275,281,0,273,278,267,269],
[269,280,280,276,277,278,0,264,273,251],
[277,282,278,273,274,273,287,0,279,276],
[269,277,278,277,282,284,278,272,0,269],
[286,297,288,282,289,282,300,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,292,275,253,257,236,278,260,275],
[277,0,258,281,281,261,261,296,255,276],
[259,293,0,268,263,266,235,276,264,249],
[276,270,283,0,282,262,260,294,249,307],
[298,270,288,269,0,288,266,286,252,296],
[294,290,285,289,263,0,244,294,271,306],
[315,290,316,291,285,307,0,293,275,282],
[273,255,275,257,265,257,258,0,283,248],
[291,296,287,302,299,280,276,268,0,303],
[276,275,302,244,255,245,269,303,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,277,277,274,273,280,277,260],
[276,0,267,265,283,277,260,276,270,253],
[276,284,0,268,260,257,279,264,266,262],
[274,286,283,0,282,263,269,273,280,270],
[274,268,291,269,0,266,288,275,270,274],
[277,274,294,288,285,0,277,277,280,274],
[278,291,272,282,263,274,0,264,268,277],
[271,275,287,278,276,274,287,0,271,271],
[274,281,285,271,281,271,283,280,0,283],
[291,298,289,281,277,277,274,280,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,224,275,248,274,236,233,285,281],
[306,0,290,280,256,266,260,282,288,280],
[327,261,0,268,269,262,275,218,298,295],
[276,271,283,0,262,280,226,253,272,287],
[303,295,282,289,0,303,294,267,307,288],
[277,285,289,271,248,0,259,259,300,281],
[315,291,276,325,257,292,0,284,315,294],
[318,269,333,298,284,292,267,0,297,299],
[266,263,253,279,244,251,236,254,0,264],
[270,271,256,264,263,270,257,252,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,298,278,260,262,261,263,275],
[276,0,280,290,266,265,256,260,284,284],
[271,271,0,264,259,253,257,258,272,275],
[253,261,287,0,254,246,255,253,268,277],
[273,285,292,297,0,284,279,268,284,300],
[291,286,298,305,267,0,290,290,289,296],
[289,295,294,296,272,261,0,298,272,295],
[290,291,293,298,283,261,253,0,288,270],
[288,267,279,283,267,262,279,263,0,277],
[276,267,276,274,251,255,256,281,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,284,296,288,275,279,290,279,300],
[282,0,275,283,287,279,277,277,272,274],
[267,276,0,294,280,269,278,289,270,307],
[255,268,257,0,291,258,263,268,266,278],
[263,264,271,260,0,282,245,282,249,276],
[276,272,282,293,269,0,276,280,296,299],
[272,274,273,288,306,275,0,279,270,287],
[261,274,262,283,269,271,272,0,256,266],
[272,279,281,285,302,255,281,295,0,292],
[251,277,244,273,275,252,264,285,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,241,172,207,145,209,218,260,195],
[289,0,171,226,289,217,213,229,198,244],
[310,380,0,266,304,223,291,287,325,272],
[379,325,285,0,285,237,374,244,319,278],
[344,262,247,266,0,181,170,282,308,231],
[406,334,328,314,370,0,339,271,304,318],
[342,338,260,177,381,212,0,191,253,281],
[333,322,264,307,269,280,360,0,249,342],
[291,353,226,232,243,247,298,302,0,248],
[356,307,279,273,320,233,270,209,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,213,73,341,73,341,0,283,210],
[338,0,551,338,338,338,338,268,478,338],
[338,0,0,268,338,268,338,268,478,338],
[478,213,283,0,551,341,551,408,551,478],
[210,213,213,0,0,0,213,140,283,210],
[478,213,283,210,551,0,551,140,283,210],
[210,213,213,0,338,0,0,0,283,210],
[551,283,283,143,411,411,551,0,551,283],
[268,73,73,0,268,268,268,0,0,0],
[341,213,213,73,341,341,341,268,551,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,258,275,263,277,261,276,273,269],
[281,0,257,277,259,267,275,250,259,267],
[293,294,0,289,269,294,281,284,282,260],
[276,274,262,0,269,259,250,281,274,261],
[288,292,282,282,0,294,277,306,277,272],
[274,284,257,292,257,0,282,284,284,278],
[290,276,270,301,274,269,0,290,281,270],
[275,301,267,270,245,267,261,0,267,262],
[278,292,269,277,274,267,270,284,0,253],
[282,284,291,290,279,273,281,289,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,180,202,219,181,95,215,111,104],
[326,0,334,323,138,293,392,144,105,105],
[371,217,0,367,296,181,316,325,263,286],
[349,228,184,0,219,270,183,303,111,75],
[332,413,255,332,0,332,368,336,443,189],
[370,258,370,281,219,0,314,288,186,150],
[456,159,235,368,183,237,0,274,150,150],
[336,407,226,248,215,263,277,0,293,182],
[440,446,288,440,108,365,401,258,0,144],
[447,446,265,476,362,401,401,369,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,287,283,269,267,292,266,269,300],
[268,0,258,258,266,274,274,262,266,262],
[264,293,0,278,271,268,271,274,285,289],
[268,293,273,0,264,274,296,275,258,284],
[282,285,280,287,0,271,280,282,272,274],
[284,277,283,277,280,0,271,275,272,298],
[259,277,280,255,271,280,0,261,272,276],
[285,289,277,276,269,276,290,0,287,303],
[282,285,266,293,279,279,279,264,0,278],
[251,289,262,267,277,253,275,248,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,341,267,305,307,290,306,268,344],
[230,0,319,233,274,273,251,273,240,313],
[210,232,0,240,199,253,210,252,190,286],
[284,318,311,0,297,279,273,244,318,307],
[246,277,352,254,0,284,269,350,294,344],
[244,278,298,272,267,0,256,265,291,297],
[261,300,341,278,282,295,0,295,285,307],
[245,278,299,307,201,286,256,0,271,334],
[283,311,361,233,257,260,266,280,0,313],
[207,238,265,244,207,254,244,217,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,257,281,257,266,256,265,287,247],
[307,0,277,290,293,309,269,284,314,302],
[294,274,0,282,267,289,263,262,294,297],
[270,261,269,0,265,257,248,263,277,254],
[294,258,284,286,0,258,237,284,290,273],
[285,242,262,294,293,0,276,239,278,256],
[295,282,288,303,314,275,0,303,320,289],
[286,267,289,288,267,312,248,0,290,275],
[264,237,257,274,261,273,231,261,0,260],
[304,249,254,297,278,295,262,276,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,264,258,259,291,257,280,277,250],
[290,0,278,276,256,302,268,269,259,267],
[287,273,0,277,257,284,275,266,279,286],
[293,275,274,0,266,307,268,292,284,290],
[292,295,294,285,0,325,292,304,275,289],
[260,249,267,244,226,0,258,261,253,255],
[294,283,276,283,259,293,0,289,272,294],
[271,282,285,259,247,290,262,0,275,272],
[274,292,272,267,276,298,279,276,0,278],
[301,284,265,261,262,296,257,279,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,264,275,271,280,265,270,266,272],
[303,0,278,275,286,291,284,285,280,284],
[287,273,0,271,299,284,285,271,275,293],
[276,276,280,0,289,266,280,271,275,304],
[280,265,252,262,0,279,251,267,247,279],
[271,260,267,285,272,0,278,264,269,285],
[286,267,266,271,300,273,0,273,278,286],
[281,266,280,280,284,287,278,0,274,288],
[285,271,276,276,304,282,273,277,0,298],
[279,267,258,247,272,266,265,263,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,299,275,279,279,272,283,286,295],
[289,0,311,278,306,269,275,293,282,286],
[252,240,0,239,276,278,259,277,278,270],
[276,273,312,0,282,276,290,300,281,288],
[272,245,275,269,0,262,263,285,277,283],
[272,282,273,275,289,0,287,283,289,279],
[279,276,292,261,288,264,0,298,282,274],
[268,258,274,251,266,268,253,0,262,284],
[265,269,273,270,274,262,269,289,0,278],
[256,265,281,263,268,272,277,267,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,310,215,122,230,314,234,210,250],
[368,0,327,293,217,276,332,262,210,336],
[241,224,0,285,173,250,261,223,202,280],
[336,258,266,0,198,195,345,263,203,280],
[429,334,378,353,0,242,315,296,284,362],
[321,275,301,356,309,0,348,257,204,279],
[237,219,290,206,236,203,0,289,218,297],
[317,289,328,288,255,294,262,0,266,358],
[341,341,349,348,267,347,333,285,0,330],
[301,215,271,271,189,272,254,193,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,258,289,281,277,267,265,265,268],
[281,0,279,278,257,295,274,276,260,276],
[293,272,0,290,275,293,289,284,279,287],
[262,273,261,0,272,276,264,259,275,256],
[270,294,276,279,0,286,289,269,269,278],
[274,256,258,275,265,0,269,255,262,267],
[284,277,262,287,262,282,0,279,274,293],
[286,275,267,292,282,296,272,0,278,284],
[286,291,272,276,282,289,277,273,0,285],
[283,275,264,295,273,284,258,267,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,302,266,269,300,265,317,259,281],
[224,0,265,242,267,247,264,269,235,278],
[249,286,0,257,260,262,262,301,252,271],
[285,309,294,0,297,301,297,311,273,287],
[282,284,291,254,0,285,270,284,276,298],
[251,304,289,250,266,0,255,288,239,273],
[286,287,289,254,281,296,0,280,265,293],
[234,282,250,240,267,263,271,0,249,282],
[292,316,299,278,275,312,286,302,0,281],
[270,273,280,264,253,278,258,269,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,274,268,267,270,276,262,263,276],
[284,0,265,263,255,269,265,251,285,272],
[277,286,0,262,255,269,262,259,262,261],
[283,288,289,0,279,284,275,280,281,282],
[284,296,296,272,0,281,280,275,281,281],
[281,282,282,267,270,0,298,271,258,282],
[275,286,289,276,271,253,0,258,266,275],
[289,300,292,271,276,280,293,0,292,282],
[288,266,289,270,270,293,285,259,0,272],
[275,279,290,269,270,269,276,269,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,303,320,286,283,270,290,287,316],
[262,0,238,256,257,242,235,300,256,262],
[248,313,0,287,257,224,275,301,273,281],
[231,295,264,0,259,242,268,263,230,294],
[265,294,294,292,0,284,297,290,276,320],
[268,309,327,309,267,0,302,316,288,297],
[281,316,276,283,254,249,0,262,272,305],
[261,251,250,288,261,235,289,0,228,271],
[264,295,278,321,275,263,279,323,0,305],
[235,289,270,257,231,254,246,280,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,415,391,320,351,311,309,154,338],
[321,0,384,385,412,435,261,467,365,382],
[136,167,0,281,312,174,263,368,92,269],
[160,166,270,0,191,202,99,270,94,215],
[231,139,239,360,0,132,197,275,211,261],
[200,116,377,349,419,0,211,421,233,269],
[240,290,288,452,354,340,0,350,204,274],
[242,84,183,281,276,130,201,0,81,220],
[397,186,459,457,340,318,347,470,0,262],
[213,169,282,336,290,282,277,331,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,308,235,172,299,206,221,230,318],
[298,0,281,342,283,354,331,313,273,331],
[243,270,0,278,307,297,291,293,327,366],
[316,209,273,0,232,357,295,309,300,348],
[379,268,244,319,0,341,331,308,363,342],
[252,197,254,194,210,0,218,197,284,229],
[345,220,260,256,220,333,0,211,252,342],
[330,238,258,242,243,354,340,0,282,337],
[321,278,224,251,188,267,299,269,0,245],
[233,220,185,203,209,322,209,214,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,264,255,251,270,276,261,277,272],
[299,0,269,255,279,274,285,286,294,275],
[287,282,0,264,265,275,265,270,295,267],
[296,296,287,0,256,290,296,297,310,301],
[300,272,286,295,0,290,292,281,293,298],
[281,277,276,261,261,0,271,267,298,262],
[275,266,286,255,259,280,0,268,281,275],
[290,265,281,254,270,284,283,0,298,270],
[274,257,256,241,258,253,270,253,0,268],
[279,276,284,250,253,289,276,281,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,339,307,283,322,316,273,274,303,318],
[212,0,269,264,276,244,242,218,271,215],
[244,282,0,272,269,248,220,237,269,268],
[268,287,279,0,272,276,253,233,245,268],
[229,275,282,279,0,252,247,251,242,276],
[235,307,303,275,299,0,255,280,317,297],
[278,309,331,298,304,296,0,257,306,262],
[277,333,314,318,300,271,294,0,294,278],
[248,280,282,306,309,234,245,257,0,246],
[233,336,283,283,275,254,289,273,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,295,274,279,290,283,289,288,297],
[266,0,259,272,283,293,270,283,267,265],
[256,292,0,269,268,266,264,256,259,275],
[277,279,282,0,295,286,277,284,279,274],
[272,268,283,256,0,280,255,259,264,271],
[261,258,285,265,271,0,270,275,258,272],
[268,281,287,274,296,281,0,272,267,289],
[262,268,295,267,292,276,279,0,282,267],
[263,284,292,272,287,293,284,269,0,272],
[254,286,276,277,280,279,262,284,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,268,267,275,274,247,260,236,245],
[293,0,289,273,285,303,291,296,288,290],
[283,262,0,262,266,282,266,305,262,264],
[284,278,289,0,283,309,275,290,294,293],
[276,266,285,268,0,263,286,269,261,271],
[277,248,269,242,288,0,280,269,266,277],
[304,260,285,276,265,271,0,286,269,256],
[291,255,246,261,282,282,265,0,264,258],
[315,263,289,257,290,285,282,287,0,285],
[306,261,287,258,280,274,295,293,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,257,281,270,256,268,307,285,261],
[281,0,288,290,281,276,292,315,297,248],
[294,263,0,286,270,241,264,299,274,232],
[270,261,265,0,246,251,260,306,255,250],
[281,270,281,305,0,259,286,280,286,279],
[295,275,310,300,292,0,276,307,278,271],
[283,259,287,291,265,275,0,281,257,288],
[244,236,252,245,271,244,270,0,248,274],
[266,254,277,296,265,273,294,303,0,289],
[290,303,319,301,272,280,263,277,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,285,281,275,262,285,269,273,288],
[285,0,290,299,289,271,282,277,277,282],
[266,261,0,279,269,264,267,273,266,285],
[270,252,272,0,266,259,253,259,262,279],
[276,262,282,285,0,272,271,268,265,256],
[289,280,287,292,279,0,264,277,283,286],
[266,269,284,298,280,287,0,266,279,271],
[282,274,278,292,283,274,285,0,288,283],
[278,274,285,289,286,268,272,263,0,274],
[263,269,266,272,295,265,280,268,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,278,302,305,290,298,283,285,276],
[284,0,299,278,297,255,241,286,296,266],
[273,252,0,260,286,287,263,292,293,276],
[249,273,291,0,276,272,244,268,282,265],
[246,254,265,275,0,265,260,264,244,259],
[261,296,264,279,286,0,295,264,279,268],
[253,310,288,307,291,256,0,271,296,301],
[268,265,259,283,287,287,280,0,293,255],
[266,255,258,269,307,272,255,258,0,252],
[275,285,275,286,292,283,250,296,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,281,276,263,256,253,249,276,278],
[258,0,262,278,269,235,291,300,272,257],
[270,289,0,260,258,247,269,274,288,256],
[275,273,291,0,283,259,243,288,256,317],
[288,282,293,268,0,286,278,278,297,302],
[295,316,304,292,265,0,254,284,284,253],
[298,260,282,308,273,297,0,277,272,295],
[302,251,277,263,273,267,274,0,254,294],
[275,279,263,295,254,267,279,297,0,301],
[273,294,295,234,249,298,256,257,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,258,247,243,239,255,262,252,256],
[296,0,292,272,291,275,313,296,293,293],
[293,259,0,271,280,281,259,295,262,279],
[304,279,280,0,257,282,301,283,288,310],
[308,260,271,294,0,284,301,284,263,293],
[312,276,270,269,267,0,303,276,282,287],
[296,238,292,250,250,248,0,268,264,285],
[289,255,256,268,267,275,283,0,247,283],
[299,258,289,263,288,269,287,304,0,297],
[295,258,272,241,258,264,266,268,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,263,301,278,285,276,291,289,283],
[280,0,270,286,260,274,288,270,277,287],
[288,281,0,291,272,233,292,288,279,285],
[250,265,260,0,248,267,286,258,259,280],
[273,291,279,303,0,276,294,275,300,287],
[266,277,318,284,275,0,336,284,291,271],
[275,263,259,265,257,215,0,261,255,246],
[260,281,263,293,276,267,290,0,262,276],
[262,274,272,292,251,260,296,289,0,273],
[268,264,266,271,264,280,305,275,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,286,296,267,292,291,288,290,262],
[241,0,273,275,258,282,249,267,267,252],
[265,278,0,282,304,287,255,275,261,263],
[255,276,269,0,263,294,263,250,271,276],
[284,293,247,288,0,299,302,267,287,256],
[259,269,264,257,252,0,237,248,264,259],
[260,302,296,288,249,314,0,249,283,273],
[263,284,276,301,284,303,302,0,263,291],
[261,284,290,280,264,287,268,288,0,277],
[289,299,288,275,295,292,278,260,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,287,272,300,291,270,279,264,268],
[268,0,273,278,283,277,264,275,270,264],
[264,278,0,269,272,273,265,276,272,260],
[279,273,282,0,281,293,274,271,273,276],
[251,268,279,270,0,280,265,262,269,269],
[260,274,278,258,271,0,259,276,249,258],
[281,287,286,277,286,292,0,276,274,285],
[272,276,275,280,289,275,275,0,276,268],
[287,281,279,278,282,302,277,275,0,264],
[283,287,291,275,282,293,266,283,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,275,277,285,278,273,292,287,274],
[255,0,280,275,270,267,264,276,278,289],
[276,271,0,274,280,258,256,282,260,267],
[274,276,277,0,277,257,256,271,271,271],
[266,281,271,274,0,264,263,280,276,260],
[273,284,293,294,287,0,277,293,282,285],
[278,287,295,295,288,274,0,294,282,297],
[259,275,269,280,271,258,257,0,262,266],
[264,273,291,280,275,269,269,289,0,302],
[277,262,284,280,291,266,254,285,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,281,267,255,258,272,249,251,265],
[286,0,263,281,267,256,258,257,271,270],
[270,288,0,271,266,271,278,274,275,277],
[284,270,280,0,281,258,288,269,285,275],
[296,284,285,270,0,275,276,280,285,280],
[293,295,280,293,276,0,274,283,281,277],
[279,293,273,263,275,277,0,256,279,274],
[302,294,277,282,271,268,295,0,295,274],
[300,280,276,266,266,270,272,256,0,275],
[286,281,274,276,271,274,277,277,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,261,280,273,294,254,256,278,263],
[274,0,251,275,262,292,254,264,257,261],
[290,300,0,289,277,289,288,272,278,278],
[271,276,262,0,269,271,262,260,266,267],
[278,289,274,282,0,296,256,277,283,266],
[257,259,262,280,255,0,266,253,246,264],
[297,297,263,289,295,285,0,275,282,293],
[295,287,279,291,274,298,276,0,287,281],
[273,294,273,285,268,305,269,264,0,273],
[288,290,273,284,285,287,258,270,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,223,249,279,215,280,223,242,222],
[289,0,279,240,253,248,259,265,299,269],
[328,272,0,215,236,242,268,274,327,249],
[302,311,336,0,302,293,308,311,318,275],
[272,298,315,249,0,288,288,319,301,265],
[336,303,309,258,263,0,321,310,250,277],
[271,292,283,243,263,230,0,244,308,256],
[328,286,277,240,232,241,307,0,312,283],
[309,252,224,233,250,301,243,239,0,233],
[329,282,302,276,286,274,295,268,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,262,286,283,288,276,264,263,270],
[275,0,264,256,273,273,268,260,255,279],
[289,287,0,271,267,279,274,287,271,267],
[265,295,280,0,274,291,273,265,275,269],
[268,278,284,277,0,294,261,271,259,270],
[263,278,272,260,257,0,261,269,258,274],
[275,283,277,278,290,290,0,279,291,268],
[287,291,264,286,280,282,272,0,272,298],
[288,296,280,276,292,293,260,279,0,283],
[281,272,284,282,281,277,283,253,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,279,331,359,308,326,313,283,243],
[228,0,274,277,405,260,309,273,330,199],
[272,277,0,232,343,308,246,289,247,264],
[220,274,319,0,337,284,295,288,306,321],
[192,146,208,214,0,229,200,260,283,196],
[243,291,243,267,322,0,283,255,248,249],
[225,242,305,256,351,268,0,306,268,284],
[238,278,262,263,291,296,245,0,263,265],
[268,221,304,245,268,303,283,288,0,222],
[308,352,287,230,355,302,267,286,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,280,272,281,285,262,264,277,288],
[287,0,283,277,273,284,267,287,282,285],
[271,268,0,271,279,271,278,266,277,273],
[279,274,280,0,259,282,261,270,277,273],
[270,278,272,292,0,279,262,272,274,295],
[266,267,280,269,272,0,265,265,258,270],
[289,284,273,290,289,286,0,264,284,288],
[287,264,285,281,279,286,287,0,280,293],
[274,269,274,274,277,293,267,271,0,283],
[263,266,278,278,256,281,263,258,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,272,266,278,258,262,264,258,251],
[308,0,284,269,290,258,266,261,283,270],
[279,267,0,270,272,260,274,284,272,280],
[285,282,281,0,269,265,271,278,273,280],
[273,261,279,282,0,273,261,263,258,276],
[293,293,291,286,278,0,288,276,273,275],
[289,285,277,280,290,263,0,287,266,270],
[287,290,267,273,288,275,264,0,270,256],
[293,268,279,278,293,278,285,281,0,265],
[300,281,271,271,275,276,281,295,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,310,255,186,299,228,217,291,250],
[289,0,323,269,276,303,264,226,340,232],
[241,228,0,253,272,332,245,292,350,249],
[296,282,298,0,190,273,264,236,270,325],
[365,275,279,361,0,317,292,242,346,308],
[252,248,219,278,234,0,245,194,306,247],
[323,287,306,287,259,306,0,226,292,291],
[334,325,259,315,309,357,325,0,318,362],
[260,211,201,281,205,245,259,233,0,242],
[301,319,302,226,243,304,260,189,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,286,299,283,300,289,292,270,276],
[258,0,263,280,287,278,263,275,268,260],
[265,288,0,281,272,280,263,262,270,267],
[252,271,270,0,250,284,257,270,263,257],
[268,264,279,301,0,273,267,273,269,262],
[251,273,271,267,278,0,285,266,255,273],
[262,288,288,294,284,266,0,269,257,265],
[259,276,289,281,278,285,282,0,284,268],
[281,283,281,288,282,296,294,267,0,264],
[275,291,284,294,289,278,286,283,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,266,265,275,270,269,259,266,267],
[259,0,288,270,274,276,272,269,265,257],
[285,263,0,277,256,277,265,276,264,262],
[286,281,274,0,286,287,281,272,270,269],
[276,277,295,265,0,294,285,265,265,270],
[281,275,274,264,257,0,271,269,265,264],
[282,279,286,270,266,280,0,276,266,265],
[292,282,275,279,286,282,275,0,279,260],
[285,286,287,281,286,286,285,272,0,279],
[284,294,289,282,281,287,286,291,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,299,256,265,276,273,258,273,269],
[289,0,270,295,274,250,302,265,308,305],
[252,281,0,253,244,251,261,252,287,316],
[295,256,298,0,263,259,262,256,292,279],
[286,277,307,288,0,269,305,285,300,285],
[275,301,300,292,282,0,283,291,283,308],
[278,249,290,289,246,268,0,242,311,281],
[293,286,299,295,266,260,309,0,318,283],
[278,243,264,259,251,268,240,233,0,287],
[282,246,235,272,266,243,270,268,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,251,264,254,250,282,285,261,293],
[298,0,276,275,265,278,276,285,280,320],
[300,275,0,278,271,258,256,286,263,289],
[287,276,273,0,303,281,280,290,289,279],
[297,286,280,248,0,287,287,313,278,302],
[301,273,293,270,264,0,298,288,304,307],
[269,275,295,271,264,253,0,286,274,290],
[266,266,265,261,238,263,265,0,263,292],
[290,271,288,262,273,247,277,288,0,299],
[258,231,262,272,249,244,261,259,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,251,316,296,247,259,260,291,282],
[274,0,291,272,290,282,325,293,278,333],
[300,260,0,287,296,251,294,312,299,307],
[235,279,264,0,299,258,254,259,233,341],
[255,261,255,252,0,226,277,302,248,281],
[304,269,300,293,325,0,308,298,283,318],
[292,226,257,297,274,243,0,239,252,283],
[291,258,239,292,249,253,312,0,260,296],
[260,273,252,318,303,268,299,291,0,278],
[269,218,244,210,270,233,268,255,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,240,294,257,270,230,237,250,256],
[262,0,257,280,252,267,231,236,247,242],
[311,294,0,289,302,308,253,316,256,279],
[257,271,262,0,268,276,237,256,262,228],
[294,299,249,283,0,287,246,278,280,268],
[281,284,243,275,264,0,242,287,251,250],
[321,320,298,314,305,309,0,308,273,308],
[314,315,235,295,273,264,243,0,264,248],
[301,304,295,289,271,300,278,287,0,266],
[295,309,272,323,283,301,243,303,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,306,250,281,286,290,298,291,281],
[282,0,304,264,282,269,282,279,303,274],
[245,247,0,256,264,256,271,268,291,255],
[301,287,295,0,279,273,287,306,299,275],
[270,269,287,272,0,263,283,290,278,264],
[265,282,295,278,288,0,283,305,278,273],
[261,269,280,264,268,268,0,295,293,279],
[253,272,283,245,261,246,256,0,284,252],
[260,248,260,252,273,273,258,267,0,259],
[270,277,296,276,287,278,272,299,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,287,278,263,303,285,302,279,305],
[266,0,274,284,266,285,268,287,282,300],
[264,277,0,262,255,267,266,284,268,268],
[273,267,289,0,265,289,259,279,271,297],
[288,285,296,286,0,282,289,305,272,309],
[248,266,284,262,269,0,269,267,263,293],
[266,283,285,292,262,282,0,283,275,283],
[249,264,267,272,246,284,268,0,280,285],
[272,269,283,280,279,288,276,271,0,296],
[246,251,283,254,242,258,268,266,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,280,240,293,296,263,316,270,336],
[272,0,274,240,241,266,252,281,251,246],
[271,277,0,265,291,265,265,293,267,279],
[311,311,286,0,288,310,278,308,269,309],
[258,310,260,263,0,284,264,315,278,288],
[255,285,286,241,267,0,242,298,258,293],
[288,299,286,273,287,309,0,304,289,287],
[235,270,258,243,236,253,247,0,246,244],
[281,300,284,282,273,293,262,305,0,277],
[215,305,272,242,263,258,264,307,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,292,285,315,282,268,294,290,285],
[249,0,254,269,306,263,246,256,253,263],
[259,297,0,275,308,281,282,295,264,270],
[266,282,276,0,291,262,257,276,275,282],
[236,245,243,260,0,246,241,273,255,241],
[269,288,270,289,305,0,261,283,268,275],
[283,305,269,294,310,290,0,284,288,272],
[257,295,256,275,278,268,267,0,274,263],
[261,298,287,276,296,283,263,277,0,267],
[266,288,281,269,310,276,279,288,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,291,257,267,258,244,225,249,293],
[261,0,264,242,268,259,221,228,235,286],
[260,287,0,263,260,259,255,242,244,297],
[294,309,288,0,294,296,264,262,245,312],
[284,283,291,257,0,283,275,265,281,315],
[293,292,292,255,268,0,263,240,253,310],
[307,330,296,287,276,288,0,257,257,332],
[326,323,309,289,286,311,294,0,268,343],
[302,316,307,306,270,298,294,283,0,304],
[258,265,254,239,236,241,219,208,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,292,282,271,288,268,265,280,293],
[281,0,289,284,277,285,276,273,284,292],
[259,262,0,273,253,269,264,260,280,279],
[269,267,278,0,263,271,274,254,274,283],
[280,274,298,288,0,288,278,289,295,311],
[263,266,282,280,263,0,260,263,267,276],
[283,275,287,277,273,291,0,272,277,286],
[286,278,291,297,262,288,279,0,290,285],
[271,267,271,277,256,284,274,261,0,285],
[258,259,272,268,240,275,265,266,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,256,286,260,260,278,232,282,241],
[307,0,265,308,294,313,306,291,307,261],
[295,286,0,301,315,275,306,257,285,226],
[265,243,250,0,285,290,301,265,285,282],
[291,257,236,266,0,313,292,259,288,250],
[291,238,276,261,238,0,276,233,269,276],
[273,245,245,250,259,275,0,253,259,261],
[319,260,294,286,292,318,298,0,279,277],
[269,244,266,266,263,282,292,272,0,296],
[310,290,325,269,301,275,290,274,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,264,276,267,282,269,261,270,275],
[277,0,280,275,266,279,279,269,292,295],
[287,271,0,288,283,284,291,278,288,290],
[275,276,263,0,275,293,268,277,271,283],
[284,285,268,276,0,302,279,259,294,292],
[269,272,267,258,249,0,281,250,279,281],
[282,272,260,283,272,270,0,250,266,268],
[290,282,273,274,292,301,301,0,293,289],
[281,259,263,280,257,272,285,258,0,277],
[276,256,261,268,259,270,283,262,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,199,278,274,275,266,270,288,225],
[302,0,223,269,297,275,245,312,240,280],
[352,328,0,327,299,285,283,323,244,247],
[273,282,224,0,288,288,234,284,318,263],
[277,254,252,263,0,336,211,222,251,263],
[276,276,266,263,215,0,266,293,219,263],
[285,306,268,317,340,285,0,308,323,288],
[281,239,228,267,329,258,243,0,298,284],
[263,311,307,233,300,332,228,253,0,257],
[326,271,304,288,288,288,263,267,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,274,268,283,253,281,260,278,251],
[286,0,261,266,292,277,251,277,290,247],
[277,290,0,267,290,267,259,276,287,261],
[283,285,284,0,298,290,269,293,288,269],
[268,259,261,253,0,266,262,266,284,235],
[298,274,284,261,285,0,261,278,287,254],
[270,300,292,282,289,290,0,282,304,277],
[291,274,275,258,285,273,269,0,292,245],
[273,261,264,263,267,264,247,259,0,232],
[300,304,290,282,316,297,274,306,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,269,273,247,283,261,291,264,257],
[232,0,244,238,245,212,236,212,229,235],
[282,307,0,263,296,307,268,242,272,240],
[278,313,288,0,281,299,265,272,246,260],
[304,306,255,270,0,259,260,269,260,245],
[268,339,244,252,292,0,240,261,274,271],
[290,315,283,286,291,311,0,285,273,260],
[260,339,309,279,282,290,266,0,277,267],
[287,322,279,305,291,277,278,274,0,276],
[294,316,311,291,306,280,291,284,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,262,268,268,278,282,275,267,268],
[296,0,267,263,265,284,296,287,301,270],
[289,284,0,270,278,294,304,285,309,289],
[283,288,281,0,274,289,288,299,290,276],
[283,286,273,277,0,278,292,288,286,278],
[273,267,257,262,273,0,289,293,280,266],
[269,255,247,263,259,262,0,256,280,267],
[276,264,266,252,263,258,295,0,277,264],
[284,250,242,261,265,271,271,274,0,264],
[283,281,262,275,273,285,284,287,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,305,293,309,297,292,296,254,255],
[317,0,274,330,336,332,308,354,298,288],
[246,277,0,283,299,268,295,270,282,249],
[258,221,268,0,246,253,286,269,242,253],
[242,215,252,305,0,284,308,268,284,263],
[254,219,283,298,267,0,301,270,247,267],
[259,243,256,265,243,250,0,260,221,227],
[255,197,281,282,283,281,291,0,241,235],
[297,253,269,309,267,304,330,310,0,268],
[296,263,302,298,288,284,324,316,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,276,244,284,270,256,224,280,285],
[309,0,284,262,262,267,280,258,282,293],
[275,267,0,247,247,268,283,227,286,266],
[307,289,304,0,280,282,291,269,297,301],
[267,289,304,271,0,281,306,287,307,283],
[281,284,283,269,270,0,301,265,291,293],
[295,271,268,260,245,250,0,258,273,277],
[327,293,324,282,264,286,293,0,311,292],
[271,269,265,254,244,260,278,240,0,286],
[266,258,285,250,268,258,274,259,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,282,275,254,274,272,278,260,278],
[294,0,293,286,273,304,287,307,276,280],
[269,258,0,289,264,278,263,290,267,263],
[276,265,262,0,286,280,266,285,259,254],
[297,278,287,265,0,291,282,302,293,287],
[277,247,273,271,260,0,265,279,268,259],
[279,264,288,285,269,286,0,283,282,289],
[273,244,261,266,249,272,268,0,271,260],
[291,275,284,292,258,283,269,280,0,270],
[273,271,288,297,264,292,262,291,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,289,314,281,306,282,288,324,277],
[280,0,285,271,274,275,284,270,308,258],
[262,266,0,271,256,274,299,264,276,250],
[237,280,280,0,263,298,260,273,297,262],
[270,277,295,288,0,289,296,273,294,285],
[245,276,277,253,262,0,306,277,305,282],
[269,267,252,291,255,245,0,253,276,266],
[263,281,287,278,278,274,298,0,316,277],
[227,243,275,254,257,246,275,235,0,252],
[274,293,301,289,266,269,285,274,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,260,284,268,280,309,279,266,248],
[315,0,290,293,292,290,297,274,303,277],
[291,261,0,282,281,292,274,271,281,258],
[267,258,269,0,284,273,286,261,264,268],
[283,259,270,267,0,300,309,259,267,243],
[271,261,259,278,251,0,303,264,264,247],
[242,254,277,265,242,248,0,261,266,243],
[272,277,280,290,292,287,290,0,280,273],
[285,248,270,287,284,287,285,271,0,253],
[303,274,293,283,308,304,308,278,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,300,265,306,300,301,315,333,294],
[254,0,261,306,315,258,298,297,282,292],
[251,290,0,302,272,249,299,269,299,267],
[286,245,249,0,287,250,303,275,282,266],
[245,236,279,264,0,241,265,223,282,239],
[251,293,302,301,310,0,312,316,299,308],
[250,253,252,248,286,239,0,264,261,260],
[236,254,282,276,328,235,287,0,302,277],
[218,269,252,269,269,252,290,249,0,274],
[257,259,284,285,312,243,291,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,284,258,304,247,295,267,276,276],
[301,0,281,267,310,254,299,280,296,267],
[267,270,0,261,291,250,277,276,265,251],
[293,284,290,0,306,288,310,281,278,272],
[247,241,260,245,0,262,273,249,264,245],
[304,297,301,263,289,0,279,275,303,282],
[256,252,274,241,278,272,0,261,256,252],
[284,271,275,270,302,276,290,0,267,263],
[275,255,286,273,287,248,295,284,0,256],
[275,284,300,279,306,269,299,288,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,271,311,273,282,247,281,277,276],
[282,0,285,303,255,269,287,277,285,301],
[280,266,0,315,274,282,277,269,272,292],
[240,248,236,0,252,248,258,246,273,269],
[278,296,277,299,0,285,290,265,279,285],
[269,282,269,303,266,0,266,256,286,293],
[304,264,274,293,261,285,0,260,276,284],
[270,274,282,305,286,295,291,0,303,287],
[274,266,279,278,272,265,275,248,0,283],
[275,250,259,282,266,258,267,264,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,282,268,279,265,266,277,287,276],
[266,0,274,267,255,273,258,261,273,275],
[269,277,0,279,283,284,264,264,275,293],
[283,284,272,0,267,279,269,263,270,277],
[272,296,268,284,0,292,266,270,281,286],
[286,278,267,272,259,0,266,271,267,279],
[285,293,287,282,285,285,0,262,288,292],
[274,290,287,288,281,280,289,0,288,287],
[264,278,276,281,270,284,263,263,0,284],
[275,276,258,274,265,272,259,264,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,278,277,286,279,275,265,273,243],
[271,0,303,303,299,271,280,272,278,290],
[273,248,0,284,272,280,262,234,252,267],
[274,248,267,0,268,258,260,257,234,254],
[265,252,279,283,0,269,293,272,240,273],
[272,280,271,293,282,0,256,274,258,281],
[276,271,289,291,258,295,0,277,241,266],
[286,279,317,294,279,277,274,0,263,268],
[278,273,299,317,311,293,310,288,0,283],
[308,261,284,297,278,270,285,283,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,227,283,223,242,234,221,215,230],
[285,0,242,270,273,271,219,237,229,259],
[324,309,0,309,279,258,229,266,220,281],
[268,281,242,0,265,253,249,226,225,227],
[328,278,272,286,0,279,256,270,251,295],
[309,280,293,298,272,0,251,254,257,267],
[317,332,322,302,295,300,0,262,271,298],
[330,314,285,325,281,297,289,0,273,295],
[336,322,331,326,300,294,280,278,0,254],
[321,292,270,324,256,284,253,256,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,280,281,304,277,290,287,258,270],
[287,0,284,283,292,273,291,279,277,270],
[271,267,0,278,292,288,299,277,288,285],
[270,268,273,0,297,275,271,271,271,260],
[247,259,259,254,0,259,280,269,282,264],
[274,278,263,276,292,0,258,273,272,262],
[261,260,252,280,271,293,0,287,265,269],
[264,272,274,280,282,278,264,0,272,258],
[293,274,263,280,269,279,286,279,0,263],
[281,281,266,291,287,289,282,293,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,281,279,277,265,277,295,288,279],
[272,0,285,269,276,258,280,292,296,272],
[270,266,0,277,251,273,247,307,291,278],
[272,282,274,0,270,271,254,293,291,267],
[274,275,300,281,0,288,262,303,307,285],
[286,293,278,280,263,0,267,293,282,280],
[274,271,304,297,289,284,0,304,297,274],
[256,259,244,258,248,258,247,0,275,257],
[263,255,260,260,244,269,254,276,0,261],
[272,279,273,284,266,271,277,294,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,278,274,259,260,256,266,268,266],
[295,0,285,289,273,274,283,290,294,293],
[273,266,0,276,275,263,257,261,273,273],
[277,262,275,0,278,256,268,256,277,268],
[292,278,276,273,0,276,272,273,278,271],
[291,277,288,295,275,0,292,278,283,279],
[295,268,294,283,279,259,0,271,283,290],
[285,261,290,295,278,273,280,0,292,279],
[283,257,278,274,273,268,268,259,0,285],
[285,258,278,283,280,272,261,272,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,258,276,264,303,276,282,276,280],
[251,0,263,269,269,271,263,263,260,263],
[293,288,0,281,275,291,287,280,271,271],
[275,282,270,0,266,272,290,273,276,264],
[287,282,276,285,0,287,266,287,262,289],
[248,280,260,279,264,0,266,270,268,263],
[275,288,264,261,285,285,0,285,280,272],
[269,288,271,278,264,281,266,0,265,272],
[275,291,280,275,289,283,271,286,0,286],
[271,288,280,287,262,288,279,279,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,310,256,290,254,289,280,274,248],
[262,0,269,231,274,228,268,248,245,207],
[241,282,0,225,277,247,268,256,258,228],
[295,320,326,0,332,257,326,283,300,287],
[261,277,274,219,0,234,272,246,239,237],
[297,323,304,294,317,0,300,251,295,264],
[262,283,283,225,279,251,0,251,253,254],
[271,303,295,268,305,300,300,0,274,254],
[277,306,293,251,312,256,298,277,0,255],
[303,344,323,264,314,287,297,297,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,289,263,262,268,317,301,295,281],
[261,0,250,269,226,249,271,267,245,268],
[262,301,0,267,245,284,294,281,261,273],
[288,282,284,0,281,286,295,272,278,289],
[289,325,306,270,0,287,317,269,300,299],
[283,302,267,265,264,0,288,283,281,273],
[234,280,257,256,234,263,0,262,257,266],
[250,284,270,279,282,268,289,0,272,288],
[256,306,290,273,251,270,294,279,0,293],
[270,283,278,262,252,278,285,263,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,307,288,300,248,304,261,260,268],
[328,0,353,274,292,286,357,301,331,326],
[244,198,0,243,283,207,260,238,248,241],
[263,277,308,0,294,255,317,281,316,286],
[251,259,268,257,0,285,300,274,296,264],
[303,265,344,296,266,0,309,270,263,296],
[247,194,291,234,251,242,0,256,251,283],
[290,250,313,270,277,281,295,0,295,301],
[291,220,303,235,255,288,300,256,0,292],
[283,225,310,265,287,255,268,250,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,289,275,298,277,285,281,294,293],
[256,0,262,279,300,265,284,277,284,258],
[262,289,0,277,292,284,280,270,277,277],
[276,272,274,0,284,256,281,276,280,262],
[253,251,259,267,0,255,269,251,270,267],
[274,286,267,295,296,0,280,279,295,288],
[266,267,271,270,282,271,0,277,284,267],
[270,274,281,275,300,272,274,0,283,269],
[257,267,274,271,281,256,267,268,0,283],
[258,293,274,289,284,263,284,282,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,337,310,239,230,235,358,166,240,354],
[214,0,349,294,241,406,328,275,282,420],
[241,202,0,290,269,247,355,335,322,409],
[312,257,261,0,248,348,360,155,247,298],
[321,310,282,303,0,403,344,219,268,357],
[316,145,304,203,148,0,221,143,234,175],
[193,223,196,191,207,330,0,187,265,294],
[385,276,216,396,332,408,364,0,441,339],
[311,269,229,304,283,317,286,110,0,346],
[197,131,142,253,194,376,257,212,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,321,237,293,373,402,296,344,352],
[343,0,368,324,313,360,432,247,370,383],
[230,183,0,257,305,303,357,278,251,350],
[314,227,294,0,304,308,305,293,318,358],
[258,238,246,247,0,298,443,325,337,262],
[178,191,248,243,253,0,252,211,317,315],
[149,119,194,246,108,299,0,193,207,164],
[255,304,273,258,226,340,358,0,278,288],
[207,181,300,233,214,234,344,273,0,300],
[199,168,201,193,289,236,387,263,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,237,225,238,222,279,228,205,328],
[283,0,231,228,277,283,283,275,296,295],
[314,320,0,260,296,344,347,306,351,311],
[326,323,291,0,300,341,391,258,343,342],
[313,274,255,251,0,247,358,324,248,330],
[329,268,207,210,304,0,298,283,310,302],
[272,268,204,160,193,253,0,230,290,265],
[323,276,245,293,227,268,321,0,315,349],
[346,255,200,208,303,241,261,236,0,317],
[223,256,240,209,221,249,286,202,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,254,275,252,250,263,256,276,279],
[270,0,268,292,282,278,262,275,297,285],
[297,283,0,307,269,280,290,274,284,287],
[276,259,244,0,248,275,257,261,268,272],
[299,269,282,303,0,285,276,272,301,294],
[301,273,271,276,266,0,283,293,304,295],
[288,289,261,294,275,268,0,274,283,285],
[295,276,277,290,279,258,277,0,283,291],
[275,254,267,283,250,247,268,268,0,282],
[272,266,264,279,257,256,266,260,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,276,253,288,275,267,207,207,221],
[282,0,295,315,308,277,301,267,236,312],
[275,256,0,379,324,284,318,298,283,275],
[298,236,172,0,231,255,227,263,156,250],
[263,243,227,320,0,253,248,235,196,216],
[276,274,267,296,298,0,281,264,240,271],
[284,250,233,324,303,270,0,265,242,243],
[344,284,253,288,316,287,286,0,239,297],
[344,315,268,395,355,311,309,312,0,287],
[330,239,276,301,335,280,308,254,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,244,278,282,280,270,289,297,313],
[247,0,255,265,272,268,257,269,288,275],
[307,296,0,293,300,284,280,302,273,315],
[273,286,258,0,284,298,260,283,288,279],
[269,279,251,267,0,260,254,282,277,293],
[271,283,267,253,291,0,260,293,291,295],
[281,294,271,291,297,291,0,306,293,320],
[262,282,249,268,269,258,245,0,274,280],
[254,263,278,263,274,260,258,277,0,295],
[238,276,236,272,258,256,231,271,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,278,278,284,283,292,281,260,267],
[271,0,272,267,278,287,276,269,257,271],
[273,279,0,281,292,293,284,295,271,278],
[273,284,270,0,285,294,282,282,274,264],
[267,273,259,266,0,270,272,255,269,245],
[268,264,258,257,281,0,270,261,268,274],
[259,275,267,269,279,281,0,265,255,256],
[270,282,256,269,296,290,286,0,276,258],
[291,294,280,277,282,283,296,275,0,283],
[284,280,273,287,306,277,295,293,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,375,300,274,317,338,257,321,313,338],
[176,0,260,246,341,205,241,244,264,298],
[251,291,0,227,309,261,221,349,242,305],
[277,305,324,0,284,193,262,292,249,305],
[234,210,242,267,0,187,246,298,254,227],
[213,346,290,358,364,0,285,300,363,350],
[294,310,330,289,305,266,0,328,356,312],
[230,307,202,259,253,251,223,0,312,339],
[238,287,309,302,297,188,195,239,0,311],
[213,253,246,246,324,201,239,212,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,291,267,267,283,282,258,261,268],
[276,0,289,273,296,287,278,279,267,262],
[260,262,0,251,285,266,259,263,269,250],
[284,278,300,0,273,285,288,283,279,277],
[284,255,266,278,0,287,264,264,272,258],
[268,264,285,266,264,0,267,276,256,275],
[269,273,292,263,287,284,0,288,283,253],
[293,272,288,268,287,275,263,0,285,271],
[290,284,282,272,279,295,268,266,0,267],
[283,289,301,274,293,276,298,280,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,282,281,278,266,295,268,280],
[272,0,269,281,293,276,271,285,268,264],
[276,282,0,274,286,284,285,298,284,271],
[269,270,277,0,274,277,270,300,276,272],
[270,258,265,277,0,275,261,285,273,270],
[273,275,267,274,276,0,269,274,269,270],
[285,280,266,281,290,282,0,290,272,265],
[256,266,253,251,266,277,261,0,256,261],
[283,283,267,275,278,282,279,295,0,270],
[271,287,280,279,281,281,286,290,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,262,268,251,271,277,268,264,278],
[289,0,269,282,263,278,292,262,277,286],
[289,282,0,276,284,294,316,289,268,297],
[283,269,275,0,274,280,306,276,277,295],
[300,288,267,277,0,293,285,270,268,283],
[280,273,257,271,258,0,291,277,272,278],
[274,259,235,245,266,260,0,261,241,273],
[283,289,262,275,281,274,290,0,262,287],
[287,274,283,274,283,279,310,289,0,297],
[273,265,254,256,268,273,278,264,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,293,310,276,276,291,270,304,271],
[258,0,292,289,266,268,277,289,306,294],
[258,259,0,304,269,279,283,276,298,282],
[241,262,247,0,259,241,248,254,273,272],
[275,285,282,292,0,290,301,273,294,286],
[275,283,272,310,261,0,271,281,310,297],
[260,274,268,303,250,280,0,261,296,288],
[281,262,275,297,278,270,290,0,290,284],
[247,245,253,278,257,241,255,261,0,267],
[280,257,269,279,265,254,263,267,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,333,266,277,278,282,251,363,334,286],
[218,0,256,311,254,282,221,289,290,249],
[285,295,0,273,302,239,230,373,261,245],
[274,240,278,0,286,270,256,289,324,278],
[273,297,249,265,0,285,280,282,268,225],
[269,269,312,281,266,0,254,295,296,251],
[300,330,321,295,271,297,0,376,367,281],
[188,262,178,262,269,256,175,0,229,283],
[217,261,290,227,283,255,184,322,0,223],
[265,302,306,273,326,300,270,268,328,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,263,257,258,205,246,258,238,271],
[288,0,318,275,325,277,284,277,286,321],
[288,233,0,176,286,183,233,240,239,241],
[294,276,375,0,331,302,303,286,270,320],
[293,226,265,220,0,216,239,256,267,287],
[346,274,368,249,335,0,274,263,314,272],
[305,267,318,248,312,277,0,322,245,298],
[293,274,311,265,295,288,229,0,288,281],
[313,265,312,281,284,237,306,263,0,290],
[280,230,310,231,264,279,253,270,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,272,292,274,273,285,267,284,268],
[273,0,275,304,286,273,274,279,295,276],
[279,276,0,307,284,273,272,286,305,280],
[259,247,244,0,276,254,262,267,280,249],
[277,265,267,275,0,270,274,275,284,265],
[278,278,278,297,281,0,263,269,289,278],
[266,277,279,289,277,288,0,271,301,264],
[284,272,265,284,276,282,280,0,297,268],
[267,256,246,271,267,262,250,254,0,270],
[283,275,271,302,286,273,287,283,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,274,249,249,290,247,255,270,280],
[301,0,275,278,264,269,271,262,272,274],
[277,276,0,287,287,302,266,281,259,276],
[302,273,264,0,271,280,267,261,273,277],
[302,287,264,280,0,292,273,274,274,272],
[261,282,249,271,259,0,270,268,268,281],
[304,280,285,284,278,281,0,287,291,272],
[296,289,270,290,277,283,264,0,276,269],
[281,279,292,278,277,283,260,275,0,262],
[271,277,275,274,279,270,279,282,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,270,286,294,254,281,280,256,283],
[278,0,280,272,281,276,274,269,272,279],
[281,271,0,271,283,279,285,292,275,288],
[265,279,280,0,280,282,283,280,280,286],
[257,270,268,271,0,267,273,268,274,282],
[297,275,272,269,284,0,291,273,281,284],
[270,277,266,268,278,260,0,280,274,283],
[271,282,259,271,283,278,271,0,260,289],
[295,279,276,271,277,270,277,291,0,280],
[268,272,263,265,269,267,268,262,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,303,302,275,303,284,281,277,303],
[249,0,273,271,265,263,271,249,266,272],
[248,278,0,286,266,279,257,249,279,279],
[249,280,265,0,271,265,280,253,264,269],
[276,286,285,280,0,277,272,270,263,303],
[248,288,272,286,274,0,295,248,267,281],
[267,280,294,271,279,256,0,283,272,291],
[270,302,302,298,281,303,268,0,300,303],
[274,285,272,287,288,284,279,251,0,292],
[248,279,272,282,248,270,260,248,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,284,281,295,280,280,259,282,293],
[244,0,270,219,275,296,263,250,283,282],
[267,281,0,234,249,272,273,298,272,291],
[270,332,317,0,299,304,305,290,295,327],
[256,276,302,252,0,269,309,284,279,275],
[271,255,279,247,282,0,288,283,285,279],
[271,288,278,246,242,263,0,266,267,312],
[292,301,253,261,267,268,285,0,267,316],
[269,268,279,256,272,266,284,284,0,268],
[258,269,260,224,276,272,239,235,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,275,263,281,258,278,289,281,270],
[278,0,290,267,285,283,291,291,287,275],
[276,261,0,265,267,275,277,296,267,257],
[288,284,286,0,288,259,287,284,282,295],
[270,266,284,263,0,275,278,285,276,280],
[293,268,276,292,276,0,283,289,294,296],
[273,260,274,264,273,268,0,287,278,263],
[262,260,255,267,266,262,264,0,262,260],
[270,264,284,269,275,257,273,289,0,285],
[281,276,294,256,271,255,288,291,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,212,197,245,211,232,250,216,263],
[293,0,251,238,298,259,263,210,284,300],
[339,300,0,237,291,301,305,272,299,291],
[354,313,314,0,362,331,300,285,274,274],
[306,253,260,189,0,256,251,243,244,216],
[340,292,250,220,295,0,252,212,272,242],
[319,288,246,251,300,299,0,231,289,248],
[301,341,279,266,308,339,320,0,263,299],
[335,267,252,277,307,279,262,288,0,238],
[288,251,260,277,335,309,303,252,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,310,256,237,285,278,289,290,260],
[274,0,316,270,248,268,283,263,271,265],
[241,235,0,233,211,237,263,250,245,229],
[295,281,318,0,253,283,291,274,280,266],
[314,303,340,298,0,296,273,297,271,272],
[266,283,314,268,255,0,302,292,262,251],
[273,268,288,260,278,249,0,253,257,271],
[262,288,301,277,254,259,298,0,271,252],
[261,280,306,271,280,289,294,280,0,283],
[291,286,322,285,279,300,280,299,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,259,270,275,281,265,275,266,260],
[277,0,262,273,275,277,255,282,269,242],
[292,289,0,280,270,291,273,284,277,266],
[281,278,271,0,279,278,285,276,279,268],
[276,276,281,272,0,288,271,282,286,273],
[270,274,260,273,263,0,267,264,259,272],
[286,296,278,266,280,284,0,294,275,258],
[276,269,267,275,269,287,257,0,272,282],
[285,282,274,272,265,292,276,279,0,266],
[291,309,285,283,278,279,293,269,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,272,274,276,292,284,296,294],
[267,0,281,268,279,264,287,293,296,269],
[278,270,0,261,277,261,276,271,279,264],
[279,283,290,0,270,269,259,284,284,285],
[277,272,274,281,0,262,258,288,294,265],
[275,287,290,282,289,0,277,300,287,285],
[259,264,275,292,293,274,0,291,286,286],
[267,258,280,267,263,251,260,0,259,267],
[255,255,272,267,257,264,265,292,0,268],
[257,282,287,266,286,266,265,284,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,270,252,271,244,237,250,285,272],
[285,0,271,270,254,269,278,270,289,270],
[281,280,0,260,274,276,253,282,271,261],
[299,281,291,0,273,290,274,314,294,282],
[280,297,277,278,0,284,264,284,275,288],
[307,282,275,261,267,0,257,280,274,275],
[314,273,298,277,287,294,0,279,264,289],
[301,281,269,237,267,271,272,0,291,305],
[266,262,280,257,276,277,287,260,0,265],
[279,281,290,269,263,276,262,246,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,331,255,288,264,238,269,255,301],
[251,0,304,242,233,272,231,220,276,251],
[220,247,0,242,199,258,211,190,230,243],
[296,309,309,0,258,264,277,235,271,242],
[263,318,352,293,0,285,236,230,250,287],
[287,279,293,287,266,0,309,224,267,258],
[313,320,340,274,315,242,0,283,275,260],
[282,331,361,316,321,327,268,0,274,267],
[296,275,321,280,301,284,276,277,0,291],
[250,300,308,309,264,293,291,284,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,262,281,277,265,284,268,276],
[282,0,276,272,271,291,270,279,278,272],
[276,275,0,255,263,267,257,270,267,265],
[289,279,296,0,286,287,276,307,282,274],
[270,280,288,265,0,284,278,275,289,289],
[274,260,284,264,267,0,273,281,268,270],
[286,281,294,275,273,278,0,293,277,272],
[267,272,281,244,276,270,258,0,263,275],
[283,273,284,269,262,283,274,288,0,269],
[275,279,286,277,262,281,279,276,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,278,234,271,277,267,262,264],
[270,0,285,275,264,291,267,261,270,286],
[277,266,0,286,267,285,264,301,271,273],
[273,276,265,0,277,292,270,281,274,286],
[317,287,284,274,0,305,278,293,308,280],
[280,260,266,259,246,0,256,268,265,233],
[274,284,287,281,273,295,0,291,301,278],
[284,290,250,270,258,283,260,0,267,272],
[289,281,280,277,243,286,250,284,0,272],
[287,265,278,265,271,318,273,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,289,265,289,272,283,284,296,281],
[262,0,285,281,287,283,298,274,294,296],
[262,266,0,252,289,263,269,275,274,291],
[286,270,299,0,295,276,298,295,297,295],
[262,264,262,256,0,256,255,267,292,261],
[279,268,288,275,295,0,284,272,294,278],
[268,253,282,253,296,267,0,270,294,284],
[267,277,276,256,284,279,281,0,300,282],
[255,257,277,254,259,257,257,251,0,260],
[270,255,260,256,290,273,267,269,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,263,288,294,260,319,291,278,281],
[247,0,247,259,254,240,303,250,284,275],
[288,304,0,283,275,280,313,276,308,302],
[263,292,268,0,263,265,320,278,269,309],
[257,297,276,288,0,269,304,284,278,267],
[291,311,271,286,282,0,314,290,311,285],
[232,248,238,231,247,237,0,239,248,259],
[260,301,275,273,267,261,312,0,296,275],
[273,267,243,282,273,240,303,255,0,279],
[270,276,249,242,284,266,292,276,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,251,283,278,254,283,255,248,269],
[319,0,281,314,336,280,292,273,287,310],
[300,270,0,315,300,288,289,302,282,313],
[268,237,236,0,291,250,259,237,239,283],
[273,215,251,260,0,253,252,250,251,279],
[297,271,263,301,298,0,290,274,251,292],
[268,259,262,292,299,261,0,279,255,263],
[296,278,249,314,301,277,272,0,269,303],
[303,264,269,312,300,300,296,282,0,294],
[282,241,238,268,272,259,288,248,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,298,278,279,279,288,277,278,272],
[275,0,297,289,318,304,284,256,287,288],
[253,254,0,278,284,300,281,264,269,288],
[273,262,273,0,276,291,281,253,269,265],
[272,233,267,275,0,288,281,252,254,264],
[272,247,251,260,263,0,268,263,248,267],
[263,267,270,270,270,283,0,274,263,281],
[274,295,287,298,299,288,277,0,282,270],
[273,264,282,282,297,303,288,269,0,276],
[279,263,263,286,287,284,270,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,247,281,242,293,283,259,237,253],
[289,0,310,308,300,296,285,283,324,274],
[304,241,0,294,280,301,273,250,316,266],
[270,243,257,0,235,267,269,228,278,234],
[309,251,271,316,0,300,293,233,291,251],
[258,255,250,284,251,0,257,233,285,255],
[268,266,278,282,258,294,0,241,291,268],
[292,268,301,323,318,318,310,0,318,308],
[314,227,235,273,260,266,260,233,0,245],
[298,277,285,317,300,296,283,243,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,234,168,401,225,322,105,253,184],
[406,0,410,273,416,314,293,323,323,426],
[317,141,0,231,381,343,277,230,256,376],
[383,278,320,0,388,275,187,208,259,397],
[150,135,170,163,0,80,228,118,189,278],
[326,237,208,276,471,0,430,326,275,409],
[229,258,274,364,323,121,0,73,245,307],
[446,228,321,343,433,225,478,0,253,462],
[298,228,295,292,362,276,306,298,0,309],
[367,125,175,154,273,142,244,89,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,267,269,269,278,276,286,293,270],
[272,0,267,280,276,283,278,284,278,298],
[284,284,0,283,272,293,266,284,291,286],
[282,271,268,0,287,274,256,283,296,284],
[282,275,279,264,0,271,276,273,277,288],
[273,268,258,277,280,0,266,288,281,287],
[275,273,285,295,275,285,0,294,283,306],
[265,267,267,268,278,263,257,0,281,289],
[258,273,260,255,274,270,268,270,0,274],
[281,253,265,267,263,264,245,262,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,239,205,313,229,234,254,215,176],
[343,0,337,290,329,316,264,325,307,273],
[312,214,0,203,288,231,249,264,259,216],
[346,261,348,0,259,294,176,320,245,239],
[238,222,263,292,0,228,260,303,256,243],
[322,235,320,257,323,0,228,396,280,301],
[317,287,302,375,291,323,0,326,283,266],
[297,226,287,231,248,155,225,0,258,191],
[336,244,292,306,295,271,268,293,0,257],
[375,278,335,312,308,250,285,360,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,302,325,252,262,267,367,299,249],
[328,0,302,327,292,245,342,395,306,277],
[249,249,0,234,283,216,239,337,292,287],
[226,224,317,0,249,225,275,325,284,244],
[299,259,268,302,0,283,292,393,316,270],
[289,306,335,326,268,0,249,365,290,286],
[284,209,312,276,259,302,0,328,292,280],
[184,156,214,226,158,186,223,0,246,250],
[252,245,259,267,235,261,259,305,0,243],
[302,274,264,307,281,265,271,301,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,319,298,280,257,297,295,267,303],
[289,0,262,282,277,254,273,259,252,300],
[232,289,0,283,245,241,249,273,227,276],
[253,269,268,0,268,250,264,245,242,275],
[271,274,306,283,0,264,291,277,237,310],
[294,297,310,301,287,0,269,316,276,297],
[254,278,302,287,260,282,0,287,236,315],
[256,292,278,306,274,235,264,0,247,295],
[284,299,324,309,314,275,315,304,0,298],
[248,251,275,276,241,254,236,256,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,275,352,324,333,296,340,308,306],
[240,0,281,316,253,307,284,295,306,266],
[276,270,0,326,280,293,303,338,316,281],
[199,235,225,0,246,256,232,269,265,248],
[227,298,271,305,0,278,282,283,288,265],
[218,244,258,295,273,0,255,305,298,283],
[255,267,248,319,269,296,0,312,312,261],
[211,256,213,282,268,246,239,0,270,236],
[243,245,235,286,263,253,239,281,0,255],
[245,285,270,303,286,268,290,315,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,246,231,254,253,251,276,251,234],
[310,0,288,288,276,296,295,282,267,288],
[305,263,0,252,286,278,269,284,271,294],
[320,263,299,0,257,276,275,268,249,268],
[297,275,265,294,0,319,296,291,275,270],
[298,255,273,275,232,0,314,290,283,253],
[300,256,282,276,255,237,0,275,258,261],
[275,269,267,283,260,261,276,0,273,283],
[300,284,280,302,276,268,293,278,0,301],
[317,263,257,283,281,298,290,268,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,279,281,295,296,273,290,260,275],
[261,0,257,267,274,281,270,281,253,266],
[272,294,0,260,284,282,254,263,254,258],
[270,284,291,0,306,292,283,277,270,284],
[256,277,267,245,0,249,251,275,248,248],
[255,270,269,259,302,0,257,280,248,251],
[278,281,297,268,300,294,0,288,260,297],
[261,270,288,274,276,271,263,0,253,256],
[291,298,297,281,303,303,291,298,0,275],
[276,285,293,267,303,300,254,295,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,280,257,245,274,286,296,257,236],
[284,0,285,293,232,274,315,298,269,270],
[271,266,0,278,290,271,289,282,277,313],
[294,258,273,0,269,258,277,310,293,273],
[306,319,261,282,0,274,285,306,321,296],
[277,277,280,293,277,0,299,275,264,266],
[265,236,262,274,266,252,0,299,278,292],
[255,253,269,241,245,276,252,0,207,270],
[294,282,274,258,230,287,273,344,0,305],
[315,281,238,278,255,285,259,281,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,280,294,286,283,280,293,282,270],
[278,0,283,284,277,288,279,285,280,271],
[271,268,0,265,270,282,250,254,278,256],
[257,267,286,0,273,280,284,284,268,278],
[265,274,281,278,0,281,287,296,296,283],
[268,263,269,271,270,0,274,279,268,276],
[271,272,301,267,264,277,0,273,282,269],
[258,266,297,267,255,272,278,0,274,267],
[269,271,273,283,255,283,269,277,0,280],
[281,280,295,273,268,275,282,284,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,261,246,274,241,276,253,288,258],
[282,0,267,266,271,251,271,249,270,259],
[290,284,0,288,276,258,276,251,254,268],
[305,285,263,0,275,251,291,255,273,302],
[277,280,275,276,0,276,289,275,256,255],
[310,300,293,300,275,0,316,264,271,279],
[275,280,275,260,262,235,0,240,257,272],
[298,302,300,296,276,287,311,0,278,262],
[263,281,297,278,295,280,294,273,0,277],
[293,292,283,249,296,272,279,289,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,276,264,272,291,267,270,280,282],
[280,0,311,301,311,275,261,267,286,293],
[275,240,0,291,246,283,241,257,281,248],
[287,250,260,0,280,276,253,234,297,244],
[279,240,305,271,0,264,264,246,271,281],
[260,276,268,275,287,0,278,272,275,267],
[284,290,310,298,287,273,0,293,273,312],
[281,284,294,317,305,279,258,0,298,275],
[271,265,270,254,280,276,278,253,0,253],
[269,258,303,307,270,284,239,276,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,249,292,269,257,257,275,235,277],
[297,0,272,253,249,290,223,246,238,260],
[302,279,0,315,259,311,298,290,287,291],
[259,298,236,0,243,251,250,303,241,259],
[282,302,292,308,0,289,247,292,271,248],
[294,261,240,300,262,0,253,286,226,287],
[294,328,253,301,304,298,0,287,270,296],
[276,305,261,248,259,265,264,0,265,260],
[316,313,264,310,280,325,281,286,0,290],
[274,291,260,292,303,264,255,291,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,301,275,270,297,281,289,289,262],
[266,0,284,269,269,298,271,283,283,248],
[250,267,0,268,268,293,270,284,273,250],
[276,282,283,0,280,279,270,281,280,278],
[281,282,283,271,0,306,288,298,294,282],
[254,253,258,272,245,0,264,269,264,248],
[270,280,281,281,263,287,0,276,281,270],
[262,268,267,270,253,282,275,0,270,254],
[262,268,278,271,257,287,270,281,0,257],
[289,303,301,273,269,303,281,297,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,253,337,287,343,237,268,296,301],
[285,0,296,320,257,344,267,270,227,368],
[298,255,0,319,218,351,236,304,257,307],
[214,231,232,0,250,302,272,276,218,315],
[264,294,333,301,0,318,286,260,339,352],
[208,207,200,249,233,0,248,277,239,245],
[314,284,315,279,265,303,0,224,303,302],
[283,281,247,275,291,274,327,0,337,323],
[255,324,294,333,212,312,248,214,0,301],
[250,183,244,236,199,306,249,228,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,271,276,287,301,256,286,242,251],
[294,0,278,316,284,309,273,294,290,301],
[280,273,0,281,268,292,295,271,258,258],
[275,235,270,0,272,248,245,279,248,247],
[264,267,283,279,0,268,281,282,220,277],
[250,242,259,303,283,0,243,276,268,241],
[295,278,256,306,270,308,0,302,256,285],
[265,257,280,272,269,275,249,0,252,278],
[309,261,293,303,331,283,295,299,0,290],
[300,250,293,304,274,310,266,273,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,246,286,270,236,265,299,297,265],
[266,0,283,271,295,262,260,337,324,296],
[305,268,0,267,273,248,252,319,292,239],
[265,280,284,0,279,281,264,311,296,300],
[281,256,278,272,0,253,273,310,290,278],
[315,289,303,270,298,0,284,310,304,285],
[286,291,299,287,278,267,0,333,314,285],
[252,214,232,240,241,241,218,0,257,224],
[254,227,259,255,261,247,237,294,0,252],
[286,255,312,251,273,266,266,327,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,261,261,243,236,256,240,261,240],
[285,0,289,262,262,257,291,303,255,287],
[290,262,0,249,220,258,267,267,252,280],
[290,289,302,0,273,251,278,287,277,271],
[308,289,331,278,0,270,315,314,293,285],
[315,294,293,300,281,0,301,288,293,275],
[295,260,284,273,236,250,0,281,261,275],
[311,248,284,264,237,263,270,0,273,276],
[290,296,299,274,258,258,290,278,0,278],
[311,264,271,280,266,276,276,275,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,253,302,269,298,312,311,300,302],
[266,0,275,311,288,331,327,309,282,268],
[298,276,0,320,275,313,308,323,288,274],
[249,240,231,0,261,249,303,265,260,272],
[282,263,276,290,0,288,308,295,277,274],
[253,220,238,302,263,0,297,271,274,268],
[239,224,243,248,243,254,0,276,245,252],
[240,242,228,286,256,280,275,0,250,258],
[251,269,263,291,274,277,306,301,0,287],
[249,283,277,279,277,283,299,293,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,334,285,311,281,325,298,297,295],
[278,0,318,261,294,280,318,292,324,309],
[217,233,0,254,260,263,267,287,220,251],
[266,290,297,0,281,233,269,283,279,231],
[240,257,291,270,0,229,283,278,264,251],
[270,271,288,318,322,0,321,284,288,247],
[226,233,284,282,268,230,0,271,268,220],
[253,259,264,268,273,267,280,0,280,249],
[254,227,331,272,287,263,283,271,0,249],
[256,242,300,320,300,304,331,302,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,245,303,255,264,232,279,283,284],
[278,0,258,296,271,291,237,299,267,301],
[306,293,0,292,281,278,265,317,311,290],
[248,255,259,0,241,271,217,270,256,274],
[296,280,270,310,0,292,278,316,315,292],
[287,260,273,280,259,0,238,286,288,282],
[319,314,286,334,273,313,0,289,317,302],
[272,252,234,281,235,265,262,0,267,262],
[268,284,240,295,236,263,234,284,0,270],
[267,250,261,277,259,269,249,289,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,356,305,250,291,316,302,317,270,298],
[195,0,250,294,248,206,264,195,299,321],
[246,301,0,266,356,362,325,292,324,390],
[301,257,285,0,253,381,234,248,308,314],
[260,303,195,298,0,230,255,316,272,285],
[235,345,189,170,321,0,261,245,349,325],
[249,287,226,317,296,290,0,299,266,314],
[234,356,259,303,235,306,252,0,190,384],
[281,252,227,243,279,202,285,361,0,325],
[253,230,161,237,266,226,237,167,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,228,218,272,229,226,239,228,257],
[308,0,277,235,316,273,284,261,274,290],
[323,274,0,224,294,271,282,258,270,277],
[333,316,327,0,356,281,301,301,256,318],
[279,235,257,195,0,256,260,240,249,252],
[322,278,280,270,295,0,269,249,256,290],
[325,267,269,250,291,282,0,250,259,274],
[312,290,293,250,311,302,301,0,287,260],
[323,277,281,295,302,295,292,264,0,303],
[294,261,274,233,299,261,277,291,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,260,275,305,257,270,270,277,256],
[286,0,276,290,321,272,285,281,284,289],
[291,275,0,299,322,284,290,268,281,289],
[276,261,252,0,297,290,285,267,283,285],
[246,230,229,254,0,230,246,209,233,232],
[294,279,267,261,321,0,285,275,266,275],
[281,266,261,266,305,266,0,266,277,285],
[281,270,283,284,342,276,285,0,280,292],
[274,267,270,268,318,285,274,271,0,279],
[295,262,262,266,319,276,266,259,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,259,325,303,292,282,290,305,340],
[278,0,297,316,279,294,267,279,296,291],
[292,254,0,343,284,307,250,252,302,309],
[226,235,208,0,251,266,221,227,283,244],
[248,272,267,300,0,258,244,250,287,267],
[259,257,244,285,293,0,248,257,268,291],
[269,284,301,330,307,303,0,242,331,308],
[261,272,299,324,301,294,309,0,327,282],
[246,255,249,268,264,283,220,224,0,244],
[211,260,242,307,284,260,243,269,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,259,253,258,279,271,283,293],
[277,0,273,254,261,268,273,266,279,297],
[279,278,0,264,260,265,280,252,290,296],
[292,297,287,0,273,277,288,281,301,288],
[298,290,291,278,0,270,287,280,309,304],
[293,283,286,274,281,0,279,290,293,282],
[272,278,271,263,264,272,0,286,283,287],
[280,285,299,270,271,261,265,0,271,271],
[268,272,261,250,242,258,268,280,0,290],
[258,254,255,263,247,269,264,280,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,264,262,267,261,260,269,250,270],
[284,0,278,282,271,253,268,275,261,268],
[287,273,0,286,272,258,268,266,263,278],
[289,269,265,0,256,265,266,260,261,257],
[284,280,279,295,0,261,280,286,262,276],
[290,298,293,286,290,0,279,300,263,284],
[291,283,283,285,271,272,0,280,278,266],
[282,276,285,291,265,251,271,0,256,281],
[301,290,288,290,289,288,273,295,0,283],
[281,283,273,294,275,267,285,270,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,286,276,262,292,257,294,297,286],
[233,0,249,243,237,293,185,206,201,281],
[265,302,0,198,357,349,292,245,210,295],
[275,308,353,0,319,331,324,263,264,363],
[289,314,194,232,0,299,200,240,267,292],
[259,258,202,220,252,0,223,240,247,239],
[294,366,259,227,351,328,0,290,269,304],
[257,345,306,288,311,311,261,0,294,320],
[254,350,341,287,284,304,282,257,0,371],
[265,270,256,188,259,312,247,231,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,268,282,289,269,290,276,265,259],
[283,0,258,272,256,282,280,264,276,303],
[283,293,0,270,279,301,304,286,274,311],
[269,279,281,0,274,271,285,294,271,284],
[262,295,272,277,0,272,290,278,287,279],
[282,269,250,280,279,0,272,262,272,287],
[261,271,247,266,261,279,0,270,280,283],
[275,287,265,257,273,289,281,0,261,282],
[286,275,277,280,264,279,271,290,0,285],
[292,248,240,267,272,264,268,269,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,281,290,271,269,303,275,259],
[275,0,294,291,262,282,259,287,258,251],
[267,257,0,267,266,261,258,284,253,249],
[270,260,284,0,292,276,272,300,256,261],
[261,289,285,259,0,263,249,273,238,254],
[280,269,290,275,288,0,272,282,253,271],
[282,292,293,279,302,279,0,309,265,291],
[248,264,267,251,278,269,242,0,238,260],
[276,293,298,295,313,298,286,313,0,273],
[292,300,302,290,297,280,260,291,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,298,274,282,284,242,289,284,267],
[273,0,290,283,258,252,270,284,279,262],
[253,261,0,269,280,262,226,292,289,260],
[277,268,282,0,281,285,274,318,295,277],
[269,293,271,270,0,261,273,280,306,264],
[267,299,289,266,290,0,277,293,298,288],
[309,281,325,277,278,274,0,298,306,299],
[262,267,259,233,271,258,253,0,274,241],
[267,272,262,256,245,253,245,277,0,252],
[284,289,291,274,287,263,252,310,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,296,283,285,298,263,285,266,265],
[264,0,292,271,269,301,278,277,279,283],
[255,259,0,267,272,277,250,271,283,266],
[268,280,284,0,280,295,264,296,270,300],
[266,282,279,271,0,288,279,270,255,283],
[253,250,274,256,263,0,257,271,245,273],
[288,273,301,287,272,294,0,287,286,302],
[266,274,280,255,281,280,264,0,277,268],
[285,272,268,281,296,306,265,274,0,266],
[286,268,285,251,268,278,249,283,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,250,324,296,309,248,325,275,275],
[241,0,280,279,273,307,272,353,297,284],
[301,271,0,291,281,307,293,284,307,298],
[227,272,260,0,289,270,254,252,304,252],
[255,278,270,262,0,275,271,303,300,245],
[242,244,244,281,276,0,275,302,256,247],
[303,279,258,297,280,276,0,311,276,299],
[226,198,267,299,248,249,240,0,288,264],
[276,254,244,247,251,295,275,263,0,275],
[276,267,253,299,306,304,252,287,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,257,262,262,261,255,242,247,250],
[278,0,276,250,283,277,248,247,279,267],
[294,275,0,267,288,294,260,282,268,274],
[289,301,284,0,299,316,281,256,310,287],
[289,268,263,252,0,293,294,257,289,270],
[290,274,257,235,258,0,252,258,280,278],
[296,303,291,270,257,299,0,288,292,296],
[309,304,269,295,294,293,263,0,288,260],
[304,272,283,241,262,271,259,263,0,273],
[301,284,277,264,281,273,255,291,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,295,272,274,245,270,275,332,274],
[263,0,258,255,265,233,286,234,319,203],
[256,293,0,266,270,258,297,238,301,275],
[279,296,285,0,292,254,305,287,331,277],
[277,286,281,259,0,189,290,253,270,221],
[306,318,293,297,362,0,303,295,338,255],
[281,265,254,246,261,248,0,263,280,243],
[276,317,313,264,298,256,288,0,317,271],
[219,232,250,220,281,213,271,234,0,184],
[277,348,276,274,330,296,308,280,367,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,273,257,271,285,263,310,279,369],
[258,0,257,262,241,242,238,281,240,328],
[278,294,0,263,270,324,264,305,258,304],
[294,289,288,0,280,301,296,278,245,342],
[280,310,281,271,0,323,294,296,252,345],
[266,309,227,250,228,0,234,324,252,324],
[288,313,287,255,257,317,0,276,255,342],
[241,270,246,273,255,227,275,0,257,312],
[272,311,293,306,299,299,296,294,0,329],
[182,223,247,209,206,227,209,239,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,280,305,276,301,301,294,276,272],
[263,0,250,258,267,285,279,253,274,257],
[271,301,0,303,284,293,269,262,273,271],
[246,293,248,0,274,269,263,253,252,243],
[275,284,267,277,0,287,263,276,278,267],
[250,266,258,282,264,0,259,281,256,252],
[250,272,282,288,288,292,0,270,272,264],
[257,298,289,298,275,270,281,0,287,269],
[275,277,278,299,273,295,279,264,0,279],
[279,294,280,308,284,299,287,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,270,261,297,283,264,287,334,275],
[279,0,299,275,289,289,285,289,312,293],
[281,252,0,269,260,272,259,276,320,287],
[290,276,282,0,308,283,275,281,340,284],
[254,262,291,243,0,280,276,274,306,277],
[268,262,279,268,271,0,282,285,327,282],
[287,266,292,276,275,269,0,296,310,273],
[264,262,275,270,277,266,255,0,325,268],
[217,239,231,211,245,224,241,226,0,237],
[276,258,264,267,274,269,278,283,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,256,277,263,261,271,257,281,266],
[280,0,288,285,276,266,265,260,279,284],
[295,263,0,274,272,271,289,269,285,300],
[274,266,277,0,283,250,254,284,270,280],
[288,275,279,268,0,257,263,261,263,262],
[290,285,280,301,294,0,287,273,286,288],
[280,286,262,297,288,264,0,259,273,274],
[294,291,282,267,290,278,292,0,287,280],
[270,272,266,281,288,265,278,264,0,283],
[285,267,251,271,289,263,277,271,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,270,283,260,280,272,257,268,270],
[288,0,274,285,276,288,273,278,283,268],
[281,277,0,265,266,297,265,270,274,280],
[268,266,286,0,286,294,273,276,267,279],
[291,275,285,265,0,287,271,274,272,278],
[271,263,254,257,264,0,262,261,252,267],
[279,278,286,278,280,289,0,278,290,275],
[294,273,281,275,277,290,273,0,272,294],
[283,268,277,284,279,299,261,279,0,280],
[281,283,271,272,273,284,276,257,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,272,257,262,288,267,275,285,274],
[274,0,276,265,271,278,275,277,257,285],
[279,275,0,273,266,272,291,293,277,295],
[294,286,278,0,269,292,295,301,318,287],
[289,280,285,282,0,266,266,303,304,304],
[263,273,279,259,285,0,257,271,278,295],
[284,276,260,256,285,294,0,257,283,290],
[276,274,258,250,248,280,294,0,281,273],
[266,294,274,233,247,273,268,270,0,286],
[277,266,256,264,247,256,261,278,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,245,288,283,264,297,273,293,273],
[294,0,272,294,278,278,311,282,314,279],
[306,279,0,289,291,296,310,264,313,298],
[263,257,262,0,269,256,275,239,287,253],
[268,273,260,282,0,278,289,263,310,278],
[287,273,255,295,273,0,293,252,295,291],
[254,240,241,276,262,258,0,244,284,279],
[278,269,287,312,288,299,307,0,337,287],
[258,237,238,264,241,256,267,214,0,271],
[278,272,253,298,273,260,272,264,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,292,294,326,295,341,258,291,274],
[297,0,296,278,307,317,345,249,284,298],
[259,255,0,247,302,290,316,277,290,292],
[257,273,304,0,316,331,329,294,304,289],
[225,244,249,235,0,269,297,243,237,240],
[256,234,261,220,282,0,292,252,259,260],
[210,206,235,222,254,259,0,227,211,255],
[293,302,274,257,308,299,324,0,299,300],
[260,267,261,247,314,292,340,252,0,296],
[277,253,259,262,311,291,296,251,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,395,339,365,387,390,240,298,291],
[270,0,270,307,229,255,368,280,127,319],
[156,281,0,242,285,237,290,250,147,293],
[212,244,309,0,312,338,303,142,166,343],
[186,322,266,239,0,242,335,273,70,270],
[164,296,314,213,309,0,296,206,132,281],
[161,183,261,248,216,255,0,180,204,212],
[311,271,301,409,278,345,371,0,291,344],
[253,424,404,385,481,419,347,260,0,441],
[260,232,258,208,281,270,339,207,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,303,284,304,268,254,288,295,301],
[255,0,260,277,231,236,253,259,254,254],
[248,291,0,290,253,244,279,270,254,290],
[267,274,261,0,277,275,260,267,248,294],
[247,320,298,274,0,278,258,309,285,291],
[283,315,307,276,273,0,294,261,279,295],
[297,298,272,291,293,257,0,299,249,304],
[263,292,281,284,242,290,252,0,269,281],
[256,297,297,303,266,272,302,282,0,294],
[250,297,261,257,260,256,247,270,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,275,283,300,275,286,292,263,285],
[267,0,279,259,285,277,287,280,259,286],
[276,272,0,267,286,277,278,284,267,291],
[268,292,284,0,297,279,290,292,272,279],
[251,266,265,254,0,262,279,263,242,270],
[276,274,274,272,289,0,292,283,278,276],
[265,264,273,261,272,259,0,269,256,271],
[259,271,267,259,288,268,282,0,272,278],
[288,292,284,279,309,273,295,279,0,304],
[266,265,260,272,281,275,280,273,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,266,281,273,281,282,290,285],
[278,0,267,283,290,288,291,287,280,289],
[272,284,0,285,286,297,289,278,298,286],
[285,268,266,0,293,271,279,259,298,266],
[270,261,265,258,0,271,266,256,280,256],
[278,263,254,280,280,0,280,269,285,284],
[270,260,262,272,285,271,0,266,285,274],
[269,264,273,292,295,282,285,0,293,284],
[261,271,253,253,271,266,266,258,0,274],
[266,262,265,285,295,267,277,267,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,283,289,263,238,229,267,245,305],
[282,0,251,272,276,265,249,254,241,308],
[268,300,0,268,259,290,244,217,227,303],
[262,279,283,0,268,266,268,241,243,310],
[288,275,292,283,0,315,281,282,293,318],
[313,286,261,285,236,0,288,287,269,326],
[322,302,307,283,270,263,0,273,268,337],
[284,297,334,310,269,264,278,0,270,319],
[306,310,324,308,258,282,283,281,0,310],
[246,243,248,241,233,225,214,232,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,182,102,283,289,192,118,293,353],
[360,0,181,166,479,393,220,185,302,339],
[369,370,0,233,394,414,333,212,305,388],
[449,385,318,0,546,461,355,232,336,503],
[268,72,157,5,0,118,116,148,219,339],
[262,158,137,90,433,0,195,119,299,396],
[359,331,218,196,435,356,0,322,359,450],
[433,366,339,319,403,432,229,0,348,473],
[258,249,246,215,332,252,192,203,0,478],
[198,212,163,48,212,155,101,78,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,285,302,313,268,306,290,327,323],
[254,0,269,262,276,283,282,300,275,308],
[266,282,0,264,306,286,311,296,306,293],
[249,289,287,0,341,278,313,322,340,330],
[238,275,245,210,0,265,258,257,259,278],
[283,268,265,273,286,0,305,292,319,315],
[245,269,240,238,293,246,0,256,264,278],
[261,251,255,229,294,259,295,0,324,309],
[224,276,245,211,292,232,287,227,0,269],
[228,243,258,221,273,236,273,242,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,289,286,240,265,271,242,262,290],
[311,0,337,325,300,252,266,271,323,318],
[262,214,0,302,257,241,240,215,253,266],
[265,226,249,0,249,225,253,208,252,234],
[311,251,294,302,0,257,286,235,282,274],
[286,299,310,326,294,0,246,277,317,303],
[280,285,311,298,265,305,0,275,316,318],
[309,280,336,343,316,274,276,0,330,322],
[289,228,298,299,269,234,235,221,0,285],
[261,233,285,317,277,248,233,229,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,261,242,278,300,319,266,238,273],
[270,0,314,280,266,268,309,297,273,286],
[290,237,0,233,263,232,273,246,285,294],
[309,271,318,0,291,295,294,275,244,255],
[273,285,288,260,0,285,279,270,271,265],
[251,283,319,256,266,0,326,309,249,262],
[232,242,278,257,272,225,0,242,246,244],
[285,254,305,276,281,242,309,0,248,278],
[313,278,266,307,280,302,305,303,0,285],
[278,265,257,296,286,289,307,273,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,275,280,261,253,274,264,259,277],
[264,0,248,262,255,263,275,271,231,253],
[276,303,0,305,258,266,288,262,262,288],
[271,289,246,0,246,276,283,247,241,260],
[290,296,293,305,0,273,306,287,284,300],
[298,288,285,275,278,0,284,268,266,284],
[277,276,263,268,245,267,0,260,257,277],
[287,280,289,304,264,283,291,0,249,293],
[292,320,289,310,267,285,294,302,0,284],
[274,298,263,291,251,267,274,258,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,282,274,267,274,274,286,295,280],
[273,0,302,279,278,271,307,289,290,297],
[269,249,0,268,285,280,273,283,273,264],
[277,272,283,0,274,287,293,286,283,285],
[284,273,266,277,0,282,261,284,294,263],
[277,280,271,264,269,0,285,286,284,281],
[277,244,278,258,290,266,0,270,273,249],
[265,262,268,265,267,265,281,0,277,269],
[256,261,278,268,257,267,278,274,0,274],
[271,254,287,266,288,270,302,282,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,338,273,300,254,256,327,279,318,285],
[213,0,246,217,222,253,266,254,282,259],
[278,305,0,239,291,243,257,245,257,291],
[251,334,312,0,238,214,267,268,280,324],
[297,329,260,313,0,285,347,323,294,326],
[295,298,308,337,266,0,338,304,314,340],
[224,285,294,284,204,213,0,258,246,295],
[272,297,306,283,228,247,293,0,334,308],
[233,269,294,271,257,237,305,217,0,281],
[266,292,260,227,225,211,256,243,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,275,256,298,272,276,249,269,283],
[269,0,264,251,284,264,281,271,262,281],
[276,287,0,266,300,255,295,281,276,293],
[295,300,285,0,281,281,266,296,284,311],
[253,267,251,270,0,258,271,255,291,279],
[279,287,296,270,293,0,301,282,274,320],
[275,270,256,285,280,250,0,294,295,298],
[302,280,270,255,296,269,257,0,270,301],
[282,289,275,267,260,277,256,281,0,298],
[268,270,258,240,272,231,253,250,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,250,266,264,250,268,244,283,280],
[320,0,276,282,249,266,297,290,278,296],
[301,275,0,266,255,266,265,284,261,264],
[285,269,285,0,269,277,304,314,284,304],
[287,302,296,282,0,270,308,302,263,312],
[301,285,285,274,281,0,295,300,288,279],
[283,254,286,247,243,256,0,275,262,279],
[307,261,267,237,249,251,276,0,265,272],
[268,273,290,267,288,263,289,286,0,274],
[271,255,287,247,239,272,272,279,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,293,261,289,281,275,285,286,274],
[272,0,292,281,282,269,281,279,286,292],
[258,259,0,270,262,273,270,279,274,290],
[290,270,281,0,280,286,277,277,281,291],
[262,269,289,271,0,260,281,273,282,277],
[270,282,278,265,291,0,284,278,293,286],
[276,270,281,274,270,267,0,263,273,282],
[266,272,272,274,278,273,288,0,290,290],
[265,265,277,270,269,258,278,261,0,282],
[277,259,261,260,274,265,269,261,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,266,272,245,267,281,265,262,251],
[282,0,272,246,260,282,299,266,277,253],
[285,279,0,270,257,278,281,268,273,261],
[279,305,281,0,305,286,313,285,269,279],
[306,291,294,246,0,293,282,289,269,267],
[284,269,273,265,258,0,274,278,252,277],
[270,252,270,238,269,277,0,269,244,263],
[286,285,283,266,262,273,282,0,266,280],
[289,274,278,282,282,299,307,285,0,268],
[300,298,290,272,284,274,288,271,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,264,288,236,272,255,261,255,267],
[323,0,262,291,294,316,265,272,277,283],
[287,289,0,287,259,302,284,286,282,315],
[263,260,264,0,255,266,238,244,236,250],
[315,257,292,296,0,287,273,297,246,299],
[279,235,249,285,264,0,252,265,246,273],
[296,286,267,313,278,299,0,280,265,272],
[290,279,265,307,254,286,271,0,260,287],
[296,274,269,315,305,305,286,291,0,316],
[284,268,236,301,252,278,279,264,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,268,288,270,268,302,284,272,275],
[273,0,274,276,279,270,310,276,273,273],
[283,277,0,291,291,274,287,273,280,289],
[263,275,260,0,263,264,281,266,261,260],
[281,272,260,288,0,292,301,278,268,264],
[283,281,277,287,259,0,304,272,274,265],
[249,241,264,270,250,247,0,265,253,254],
[267,275,278,285,273,279,286,0,271,270],
[279,278,271,290,283,277,298,280,0,273],
[276,278,262,291,287,286,297,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,257,251,245,243,241,276,239,261],
[300,0,299,253,257,259,266,288,254,282],
[294,252,0,251,262,255,226,297,254,263],
[300,298,300,0,280,287,289,300,268,283],
[306,294,289,271,0,291,265,306,259,314],
[308,292,296,264,260,0,273,313,259,283],
[310,285,325,262,286,278,0,304,281,296],
[275,263,254,251,245,238,247,0,225,248],
[312,297,297,283,292,292,270,326,0,287],
[290,269,288,268,237,268,255,303,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,268,263,245,242,275,288,264,285],
[302,0,286,287,266,280,252,290,254,266],
[283,265,0,279,219,283,241,297,286,252],
[288,264,272,0,236,292,247,321,265,262],
[306,285,332,315,0,267,328,331,318,333],
[309,271,268,259,284,0,286,287,317,276],
[276,299,310,304,223,265,0,282,295,278],
[263,261,254,230,220,264,269,0,276,259],
[287,297,265,286,233,234,256,275,0,243],
[266,285,299,289,218,275,273,292,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,244,233,260,277,225,233,245,246],
[300,0,279,298,291,296,297,288,282,254],
[307,272,0,257,298,306,287,273,290,249],
[318,253,294,0,294,288,289,267,307,299],
[291,260,253,257,0,278,271,273,242,229],
[274,255,245,263,273,0,290,267,251,238],
[326,254,264,262,280,261,0,293,246,254],
[318,263,278,284,278,284,258,0,250,264],
[306,269,261,244,309,300,305,301,0,278],
[305,297,302,252,322,313,297,287,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,284,279,279,280,265,271,282,281],
[257,0,268,265,284,274,264,262,273,287],
[267,283,0,274,272,279,272,264,285,273],
[272,286,277,0,282,267,260,254,257,265],
[272,267,279,269,0,288,268,254,265,263],
[271,277,272,284,263,0,251,253,265,281],
[286,287,279,291,283,300,0,271,268,299],
[280,289,287,297,297,298,280,0,266,287],
[269,278,266,294,286,286,283,285,0,305],
[270,264,278,286,288,270,252,264,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,262,263,266,269,268,256,270,251],
[287,0,268,270,267,263,271,257,273,271],
[289,283,0,288,284,280,272,264,305,273],
[288,281,263,0,286,283,266,254,283,268],
[285,284,267,265,0,265,279,245,295,256],
[282,288,271,268,286,0,265,280,282,262],
[283,280,279,285,272,286,0,285,282,279],
[295,294,287,297,306,271,266,0,301,288],
[281,278,246,268,256,269,269,250,0,264],
[300,280,278,283,295,289,272,263,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,277,273,275,284,275,289,281,267],
[279,0,291,271,269,299,286,268,270,259],
[274,260,0,250,263,294,277,259,268,244],
[278,280,301,0,269,293,271,285,290,258],
[276,282,288,282,0,307,285,302,286,266],
[267,252,257,258,244,0,253,277,271,237],
[276,265,274,280,266,298,0,275,280,245],
[262,283,292,266,249,274,276,0,266,280],
[270,281,283,261,265,280,271,285,0,262],
[284,292,307,293,285,314,306,271,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,276,264,278,280,284,290,266,282],
[273,0,271,262,269,263,270,271,265,261],
[275,280,0,274,267,268,276,269,278,273],
[287,289,277,0,265,275,277,288,280,283],
[273,282,284,286,0,286,269,280,287,297],
[271,288,283,276,265,0,279,267,283,293],
[267,281,275,274,282,272,0,272,280,270],
[261,280,282,263,271,284,279,0,286,288],
[285,286,273,271,264,268,271,265,0,278],
[269,290,278,268,254,258,281,263,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,281,275,280,282,300,291,284,288],
[241,0,253,257,262,244,264,256,242,249],
[270,298,0,277,299,273,288,299,257,285],
[276,294,274,0,264,273,272,269,275,280],
[271,289,252,287,0,260,278,272,252,269],
[269,307,278,278,291,0,324,280,268,278],
[251,287,263,279,273,227,0,266,254,269],
[260,295,252,282,279,271,285,0,260,272],
[267,309,294,276,299,283,297,291,0,312],
[263,302,266,271,282,273,282,279,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,265,279,278,280,284,281,271,292],
[269,0,265,273,280,268,269,264,260,281],
[286,286,0,269,269,264,283,276,277,285],
[272,278,282,0,268,277,267,276,266,280],
[273,271,282,283,0,272,279,271,270,286],
[271,283,287,274,279,0,271,267,274,267],
[267,282,268,284,272,280,0,260,269,288],
[270,287,275,275,280,284,291,0,268,280],
[280,291,274,285,281,277,282,283,0,277],
[259,270,266,271,265,284,263,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,268,266,261,286,274,259,245,290],
[268,0,264,253,247,276,274,250,265,287],
[283,287,0,288,280,298,301,270,259,304],
[285,298,263,0,278,295,294,263,279,281],
[290,304,271,273,0,306,290,265,281,289],
[265,275,253,256,245,0,269,250,255,265],
[277,277,250,257,261,282,0,246,266,273],
[292,301,281,288,286,301,305,0,272,316],
[306,286,292,272,270,296,285,279,0,289],
[261,264,247,270,262,286,278,235,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,284,267,276,289,262,283,273,242],
[301,0,288,283,282,278,275,293,287,287],
[267,263,0,249,281,281,275,283,271,266],
[284,268,302,0,303,289,298,291,270,284],
[275,269,270,248,0,254,267,286,254,269],
[262,273,270,262,297,0,264,283,244,265],
[289,276,276,253,284,287,0,287,258,275],
[268,258,268,260,265,268,264,0,263,260],
[278,264,280,281,297,307,293,288,0,284],
[309,264,285,267,282,286,276,291,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,293,283,298,302,281,276,286,270],
[252,0,262,253,282,282,266,279,271,273],
[258,289,0,289,295,290,285,293,279,277],
[268,298,262,0,283,280,256,272,261,259],
[253,269,256,268,0,276,270,281,287,256],
[249,269,261,271,275,0,281,275,255,259],
[270,285,266,295,281,270,0,282,290,277],
[275,272,258,279,270,276,269,0,261,264],
[265,280,272,290,264,296,261,290,0,279],
[281,278,274,292,295,292,274,287,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,282,237,274,252,269,268,265,278],
[317,0,279,312,312,292,350,316,293,264],
[269,272,0,247,266,268,289,295,277,292],
[314,239,304,0,280,262,289,260,301,245],
[277,239,285,271,0,240,307,308,299,277],
[299,259,283,289,311,0,277,278,299,273],
[282,201,262,262,244,274,0,247,243,261],
[283,235,256,291,243,273,304,0,281,256],
[286,258,274,250,252,252,308,270,0,228],
[273,287,259,306,274,278,290,295,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,273,264,301,261,271,261,288,286],
[283,0,279,270,294,263,271,271,298,283],
[278,272,0,259,287,274,289,279,286,286],
[287,281,292,0,293,281,291,266,294,305],
[250,257,264,258,0,268,253,246,271,253],
[290,288,277,270,283,0,267,268,299,284],
[280,280,262,260,298,284,0,276,288,282],
[290,280,272,285,305,283,275,0,305,284],
[263,253,265,257,280,252,263,246,0,260],
[265,268,265,246,298,267,269,267,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,273,270,285,280,270,270,269,269],
[273,0,257,248,278,282,272,268,266,276],
[278,294,0,272,277,279,273,280,296,285],
[281,303,279,0,281,292,284,282,276,266],
[266,273,274,270,0,266,271,271,270,262],
[271,269,272,259,285,0,253,261,266,255],
[281,279,278,267,280,298,0,275,287,272],
[281,283,271,269,280,290,276,0,273,279],
[282,285,255,275,281,285,264,278,0,266],
[282,275,266,285,289,296,279,272,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,284,287,277,301,334,278,256,294],
[266,0,269,304,282,273,326,291,271,308],
[267,282,0,277,248,243,262,246,282,249],
[264,247,274,0,264,261,282,249,299,247],
[274,269,303,287,0,252,317,282,283,278],
[250,278,308,290,299,0,294,273,288,274],
[217,225,289,269,234,257,0,216,254,246],
[273,260,305,302,269,278,335,0,285,280],
[295,280,269,252,268,263,297,266,0,298],
[257,243,302,304,273,277,305,271,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,252,278,272,270,264,259,273,276],
[289,0,274,304,292,298,278,277,289,285],
[299,277,0,291,289,289,283,270,297,283],
[273,247,260,0,262,274,269,250,266,264],
[279,259,262,289,0,272,277,258,291,278],
[281,253,262,277,279,0,264,247,286,276],
[287,273,268,282,274,287,0,271,279,290],
[292,274,281,301,293,304,280,0,284,296],
[278,262,254,285,260,265,272,267,0,273],
[275,266,268,287,273,275,261,255,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,268,286,282,284,280,279,275,254],
[263,0,269,287,266,250,285,258,269,270],
[283,282,0,298,289,279,288,283,274,282],
[265,264,253,0,268,254,279,256,256,247],
[269,285,262,283,0,279,272,263,257,253],
[267,301,272,297,272,0,286,281,282,257],
[271,266,263,272,279,265,0,270,260,256],
[272,293,268,295,288,270,281,0,255,264],
[276,282,277,295,294,269,291,296,0,273],
[297,281,269,304,298,294,295,287,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,258,290,251,266,286,245,242,294],
[260,0,275,325,252,233,261,256,236,282],
[293,276,0,271,260,234,256,234,252,257],
[261,226,280,0,244,245,241,236,256,284],
[300,299,291,307,0,292,287,252,276,299],
[285,318,317,306,259,0,232,253,287,335],
[265,290,295,310,264,319,0,285,276,282],
[306,295,317,315,299,298,266,0,260,342],
[309,315,299,295,275,264,275,291,0,323],
[257,269,294,267,252,216,269,209,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,267,264,282,275,258,288,253,259],
[285,0,290,284,271,281,277,294,281,297],
[284,261,0,263,267,266,273,281,265,290],
[287,267,288,0,274,262,278,275,274,289],
[269,280,284,277,0,266,290,286,272,285],
[276,270,285,289,285,0,269,277,260,289],
[293,274,278,273,261,282,0,274,261,275],
[263,257,270,276,265,274,277,0,266,265],
[298,270,286,277,279,291,290,285,0,298],
[292,254,261,262,266,262,276,286,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,241,265,268,292,270,268,302,261],
[280,0,256,260,264,290,271,284,289,265],
[310,295,0,304,290,292,316,273,321,297],
[286,291,247,0,282,278,307,279,307,281],
[283,287,261,269,0,272,274,250,305,289],
[259,261,259,273,279,0,273,273,290,279],
[281,280,235,244,277,278,0,261,310,289],
[283,267,278,272,301,278,290,0,306,293],
[249,262,230,244,246,261,241,245,0,246],
[290,286,254,270,262,272,262,258,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,150,266,247,72,235,379,341,131],
[416,0,388,341,275,341,313,313,485,369],
[401,163,0,407,285,254,401,266,438,438],
[285,210,144,0,288,119,295,182,419,322],
[304,276,266,263,0,110,191,313,369,225],
[479,210,297,432,441,0,448,335,507,507],
[316,238,150,256,360,103,0,313,341,244],
[172,238,285,369,238,216,238,0,400,244],
[210,66,113,132,182,44,210,151,0,100],
[420,182,113,229,326,44,307,307,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,265,283,258,265,250,254,252,273],
[295,0,282,297,283,292,285,289,271,291],
[286,269,0,276,291,284,283,285,277,286],
[268,254,275,0,272,276,265,269,264,276],
[293,268,260,279,0,278,273,288,266,278],
[286,259,267,275,273,0,274,279,260,280],
[301,266,268,286,278,277,0,281,276,288],
[297,262,266,282,263,272,270,0,274,278],
[299,280,274,287,285,291,275,277,0,277],
[278,260,265,275,273,271,263,273,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,269,249,259,275,254,239,255,287],
[277,0,277,241,262,254,262,257,260,257],
[282,274,0,259,260,267,259,255,281,257],
[302,310,292,0,280,287,282,287,297,264],
[292,289,291,271,0,291,281,258,284,278],
[276,297,284,264,260,0,261,267,265,267],
[297,289,292,269,270,290,0,256,278,292],
[312,294,296,264,293,284,295,0,285,290],
[296,291,270,254,267,286,273,266,0,275],
[264,294,294,287,273,284,259,261,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,273,251,301,296,253,254,286,257],
[290,0,292,270,310,303,272,274,320,274],
[278,259,0,257,293,321,254,237,282,261],
[300,281,294,0,289,287,271,286,267,272],
[250,241,258,262,0,271,222,248,291,272],
[255,248,230,264,280,0,253,203,270,261],
[298,279,297,280,329,298,0,259,321,308],
[297,277,314,265,303,348,292,0,294,298],
[265,231,269,284,260,281,230,257,0,232],
[294,277,290,279,279,290,243,253,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,276,284,304,274,266,278,274,282],
[280,0,273,276,282,270,270,284,262,264],
[275,278,0,287,295,268,283,278,275,276],
[267,275,264,0,285,258,262,261,267,287],
[247,269,256,266,0,262,269,250,256,261],
[277,281,283,293,289,0,266,267,260,284],
[285,281,268,289,282,285,0,280,279,287],
[273,267,273,290,301,284,271,0,276,276],
[277,289,276,284,295,291,272,275,0,272],
[269,287,275,264,290,267,264,275,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,262,267,265,267,256,265,256,269],
[274,0,285,265,282,282,262,289,274,292],
[289,266,0,279,286,289,275,282,280,285],
[284,286,272,0,289,292,286,280,282,296],
[286,269,265,262,0,282,269,308,286,294],
[284,269,262,259,269,0,281,268,271,273],
[295,289,276,265,282,270,0,292,280,280],
[286,262,269,271,243,283,259,0,256,281],
[295,277,271,269,265,280,271,295,0,274],
[282,259,266,255,257,278,271,270,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,295,232,318,303,283,300,281,291],
[297,0,274,297,321,285,304,310,287,271],
[256,277,0,264,282,284,259,307,268,268],
[319,254,287,0,295,286,291,320,276,296],
[233,230,269,256,0,277,267,295,225,249],
[248,266,267,265,274,0,280,282,258,275],
[268,247,292,260,284,271,0,297,273,254],
[251,241,244,231,256,269,254,0,251,289],
[270,264,283,275,326,293,278,300,0,259],
[260,280,283,255,302,276,297,262,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,273,293,302,269,307,296,316,292],
[228,0,230,258,266,236,227,279,273,242],
[278,321,0,310,373,318,339,261,316,324],
[258,293,241,0,313,251,257,283,285,289],
[249,285,178,238,0,215,271,257,275,277],
[282,315,233,300,336,0,307,320,312,301],
[244,324,212,294,280,244,0,251,274,323],
[255,272,290,268,294,231,300,0,290,273],
[235,278,235,266,276,239,277,261,0,277],
[259,309,227,262,274,250,228,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,300,284,284,293,293,286,277,270],
[260,0,289,268,256,287,268,258,259,271],
[251,262,0,260,261,275,269,255,247,252],
[267,283,291,0,271,283,279,282,264,276],
[267,295,290,280,0,280,281,263,258,253],
[258,264,276,268,271,0,274,259,256,271],
[258,283,282,272,270,277,0,264,267,266],
[265,293,296,269,288,292,287,0,272,281],
[274,292,304,287,293,295,284,279,0,281],
[281,280,299,275,298,280,285,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,286,290,305,276,306,285,305,263],
[236,0,273,281,310,279,302,271,298,274],
[265,278,0,297,299,269,300,287,278,262],
[261,270,254,0,286,247,295,271,301,256],
[246,241,252,265,0,232,270,244,268,257],
[275,272,282,304,319,0,312,286,322,284],
[245,249,251,256,281,239,0,261,265,270],
[266,280,264,280,307,265,290,0,281,258],
[246,253,273,250,283,229,286,270,0,244],
[288,277,289,295,294,267,281,293,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,280,267,271,253,250,275,259,262],
[259,0,272,250,267,254,228,255,269,247],
[271,279,0,250,284,260,230,269,224,240],
[284,301,301,0,267,298,261,290,283,277],
[280,284,267,284,0,264,248,250,278,268],
[298,297,291,253,287,0,258,288,277,260],
[301,323,321,290,303,293,0,279,255,279],
[276,296,282,261,301,263,272,0,253,264],
[292,282,327,268,273,274,296,298,0,298],
[289,304,311,274,283,291,272,287,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,262,266,266,275,254,260,270,269],
[274,0,261,258,279,280,250,255,277,284],
[289,290,0,273,283,308,276,295,285,279],
[285,293,278,0,284,293,258,253,281,271],
[285,272,268,267,0,289,260,276,290,274],
[276,271,243,258,262,0,245,251,272,264],
[297,301,275,293,291,306,0,282,297,277],
[291,296,256,298,275,300,269,0,287,285],
[281,274,266,270,261,279,254,264,0,255],
[282,267,272,280,277,287,274,266,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,285,316,213,293,235,294,166,241],
[273,0,170,246,223,232,241,254,208,179],
[266,381,0,370,301,285,281,235,229,295],
[235,305,181,0,171,277,231,217,205,216],
[338,328,250,380,0,301,281,318,201,281],
[258,319,266,274,250,0,197,296,177,276],
[316,310,270,320,270,354,0,269,204,223],
[257,297,316,334,233,255,282,0,174,207],
[385,343,322,346,350,374,347,377,0,259],
[310,372,256,335,270,275,328,344,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,276,276,264,275,269,275,275],
[277,0,261,266,270,273,263,274,270,279],
[276,290,0,281,269,265,260,269,270,279],
[275,285,270,0,275,290,259,270,264,275],
[275,281,282,276,0,264,291,263,266,277],
[287,278,286,261,287,0,278,297,284,270],
[276,288,291,292,260,273,0,286,286,281],
[282,277,282,281,288,254,265,0,275,286],
[276,281,281,287,285,267,265,276,0,273],
[276,272,272,276,274,281,270,265,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,244,248,235,254,231,255,303,277],
[323,0,270,279,253,275,239,277,327,285],
[307,281,0,289,282,313,247,288,327,283],
[303,272,262,0,273,285,249,281,297,290],
[316,298,269,278,0,297,281,275,330,289],
[297,276,238,266,254,0,255,271,295,285],
[320,312,304,302,270,296,0,286,360,278],
[296,274,263,270,276,280,265,0,310,290],
[248,224,224,254,221,256,191,241,0,228],
[274,266,268,261,262,266,273,261,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,264,277,289,259,266,249,242,250],
[294,0,295,298,291,286,280,263,278,273],
[287,256,0,265,289,265,260,251,244,243],
[274,253,286,0,268,278,265,253,240,246],
[262,260,262,283,0,253,268,253,236,238],
[292,265,286,273,298,0,257,268,258,285],
[285,271,291,286,283,294,0,272,240,260],
[302,288,300,298,298,283,279,0,272,292],
[309,273,307,311,315,293,311,279,0,281],
[301,278,308,305,313,266,291,259,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,285,249,274,278,284,262,297,257],
[254,0,279,263,244,291,270,241,272,245],
[266,272,0,255,258,288,272,256,279,258],
[302,288,296,0,285,312,280,263,312,277],
[277,307,293,266,0,302,287,277,292,258],
[273,260,263,239,249,0,244,242,272,234],
[267,281,279,271,264,307,0,250,282,258],
[289,310,295,288,274,309,301,0,322,286],
[254,279,272,239,259,279,269,229,0,268],
[294,306,293,274,293,317,293,265,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,289,266,294,316,301,265,297,296],
[268,0,294,293,281,316,310,282,295,291],
[262,257,0,277,266,295,282,289,269,284],
[285,258,274,0,285,274,275,278,271,259],
[257,270,285,266,0,298,286,296,261,271],
[235,235,256,277,253,0,268,259,270,277],
[250,241,269,276,265,283,0,272,257,279],
[286,269,262,273,255,292,279,0,268,299],
[254,256,282,280,290,281,294,283,0,264],
[255,260,267,292,280,274,272,252,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,284,295,261,302,288,272,268,305],
[280,0,281,339,290,310,305,294,265,307],
[267,270,0,296,262,272,284,261,270,292],
[256,212,255,0,228,237,301,217,246,266],
[290,261,289,323,0,312,291,293,282,304],
[249,241,279,314,239,0,295,275,234,282],
[263,246,267,250,260,256,0,232,228,267],
[279,257,290,334,258,276,319,0,280,295],
[283,286,281,305,269,317,323,271,0,297],
[246,244,259,285,247,269,284,256,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,275,266,282,285,284,296,274,299],
[261,0,272,261,257,278,255,293,268,273],
[276,279,0,280,293,281,278,294,266,291],
[285,290,271,0,284,278,262,314,285,295],
[269,294,258,267,0,278,268,279,273,282],
[266,273,270,273,273,0,250,291,272,278],
[267,296,273,289,283,301,0,287,283,283],
[255,258,257,237,272,260,264,0,252,260],
[277,283,285,266,278,279,268,299,0,287],
[252,278,260,256,269,273,268,291,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,263,272,270,264,273,221,274,268],
[299,0,308,291,318,283,314,283,306,269],
[288,243,0,284,282,266,297,263,249,251],
[279,260,267,0,274,273,306,247,271,256],
[281,233,269,277,0,280,286,248,263,260],
[287,268,285,278,271,0,296,226,263,269],
[278,237,254,245,265,255,0,213,240,242],
[330,268,288,304,303,325,338,0,299,278],
[277,245,302,280,288,288,311,252,0,259],
[283,282,300,295,291,282,309,273,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,286,272,264,284,257,271,279,260],
[264,0,267,251,253,247,255,269,269,265],
[265,284,0,268,264,265,260,269,277,269],
[279,300,283,0,277,280,265,280,277,275],
[287,298,287,274,0,271,257,268,290,275],
[267,304,286,271,280,0,277,255,284,272],
[294,296,291,286,294,274,0,280,299,280],
[280,282,282,271,283,296,271,0,277,281],
[272,282,274,274,261,267,252,274,0,272],
[291,286,282,276,276,279,271,270,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,297,298,271,279,287,308,276,278],
[258,0,312,272,269,259,299,279,278,271],
[254,239,0,291,264,257,248,285,293,286],
[253,279,260,0,256,254,252,279,292,289],
[280,282,287,295,0,271,271,301,295,285],
[272,292,294,297,280,0,267,310,313,298],
[264,252,303,299,280,284,0,306,314,274],
[243,272,266,272,250,241,245,0,247,296],
[275,273,258,259,256,238,237,304,0,268],
[273,280,265,262,266,253,277,255,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,293,277,291,293,290,253,277,272],
[279,0,278,277,276,285,299,268,282,277],
[258,273,0,254,267,279,310,248,262,266],
[274,274,297,0,283,274,306,252,261,271],
[260,275,284,268,0,277,287,268,260,251],
[258,266,272,277,274,0,279,259,267,268],
[261,252,241,245,264,272,0,240,248,266],
[298,283,303,299,283,292,311,0,266,284],
[274,269,289,290,291,284,303,285,0,282],
[279,274,285,280,300,283,285,267,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,281,284,300,281,284,295,275,297],
[279,0,272,294,292,273,281,286,272,283],
[270,279,0,288,281,283,267,278,286,288],
[267,257,263,0,273,250,281,277,278,270],
[251,259,270,278,0,265,264,269,270,265],
[270,278,268,301,286,0,271,269,266,279],
[267,270,284,270,287,280,0,290,279,291],
[256,265,273,274,282,282,261,0,282,281],
[276,279,265,273,281,285,272,269,0,280],
[254,268,263,281,286,272,260,270,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,263,271,260,274,257,268,235,270],
[288,0,278,277,248,290,313,275,268,291],
[288,273,0,261,261,247,273,252,236,266],
[280,274,290,0,296,290,286,277,297,266],
[291,303,290,255,0,280,293,255,260,280],
[277,261,304,261,271,0,270,278,274,284],
[294,238,278,265,258,281,0,262,255,275],
[283,276,299,274,296,273,289,0,240,308],
[316,283,315,254,291,277,296,311,0,289],
[281,260,285,285,271,267,276,243,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,303,273,269,300,264,308,280,249],
[264,0,288,264,282,292,265,302,278,283],
[248,263,0,251,274,283,267,295,304,247],
[278,287,300,0,282,318,279,300,306,274],
[282,269,277,269,0,295,273,275,281,264],
[251,259,268,233,256,0,233,274,281,215],
[287,286,284,272,278,318,0,326,291,264],
[243,249,256,251,276,277,225,0,277,234],
[271,273,247,245,270,270,260,274,0,262],
[302,268,304,277,287,336,287,317,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,264,286,268,270,278,277,270,283],
[279,0,279,285,272,285,277,264,283,271],
[287,272,0,274,284,271,273,276,284,288],
[265,266,277,0,255,284,274,247,261,282],
[283,279,267,296,0,279,275,261,263,281],
[281,266,280,267,272,0,271,270,284,273],
[273,274,278,277,276,280,0,249,267,276],
[274,287,275,304,290,281,302,0,279,286],
[281,268,267,290,288,267,284,272,0,273],
[268,280,263,269,270,278,275,265,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,422,71,271,380,71,155,271,113],
[151,0,235,193,0,180,222,306,29,235],
[129,316,0,129,29,467,71,242,116,213],
[480,358,422,0,271,425,464,306,358,242],
[280,551,522,280,0,467,222,393,358,364],
[171,371,84,126,84,0,126,126,171,84],
[480,329,480,87,329,425,0,200,329,329],
[396,245,309,245,158,425,351,0,245,242],
[280,522,435,193,193,380,222,306,0,277],
[438,316,338,309,187,467,222,309,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,280,328,295,332,331,386,326,343],
[306,0,241,305,244,274,384,320,326,333],
[271,310,0,279,242,373,365,290,290,277],
[223,246,272,0,288,292,359,295,293,230],
[256,307,309,263,0,292,355,365,347,288],
[219,277,178,259,259,0,347,306,268,265],
[220,167,186,192,196,204,0,336,223,245],
[165,231,261,256,186,245,215,0,228,241],
[225,225,261,258,204,283,328,323,0,199],
[208,218,274,321,263,286,306,310,352,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,271,197,233,297,255,209,211,290],
[349,0,356,228,234,283,294,284,276,297],
[280,195,0,166,195,237,315,148,224,254],
[354,323,385,0,254,329,344,311,335,280],
[318,317,356,297,0,360,259,268,286,253],
[254,268,314,222,191,0,281,187,247,268],
[296,257,236,207,292,270,0,216,255,215],
[342,267,403,240,283,364,335,0,299,308],
[340,275,327,216,265,304,296,252,0,280],
[261,254,297,271,298,283,336,243,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,266,253,257,262,256,248,260,250],
[304,0,285,282,280,274,263,264,277,292],
[285,266,0,238,282,268,271,255,290,255],
[298,269,313,0,292,285,263,283,292,254],
[294,271,269,259,0,270,261,272,281,254],
[289,277,283,266,281,0,284,287,291,258],
[295,288,280,288,290,267,0,277,292,271],
[303,287,296,268,279,264,274,0,293,279],
[291,274,261,259,270,260,259,258,0,260],
[301,259,296,297,297,293,280,272,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,271,273,276,257,272,283,280,274],
[270,0,263,281,263,267,264,307,275,275],
[280,288,0,285,277,269,276,296,290,278],
[278,270,266,0,265,269,275,289,303,286],
[275,288,274,286,0,260,284,295,288,282],
[294,284,282,282,291,0,281,307,296,271],
[279,287,275,276,267,270,0,285,276,261],
[268,244,255,262,256,244,266,0,270,257],
[271,276,261,248,263,255,275,281,0,269],
[277,276,273,265,269,280,290,294,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,264,282,296,261,283,291,286,300],
[241,0,260,255,257,253,244,254,233,260],
[287,291,0,277,300,274,256,305,268,281],
[269,296,274,0,310,281,277,312,277,286],
[255,294,251,241,0,263,252,265,233,274],
[290,298,277,270,288,0,256,280,275,287],
[268,307,295,274,299,295,0,305,281,311],
[260,297,246,239,286,271,246,0,246,279],
[265,318,283,274,318,276,270,305,0,284],
[251,291,270,265,277,264,240,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,270,265,278,271,257,268,254,277],
[268,0,272,253,264,258,257,254,262,269],
[281,279,0,257,266,273,255,269,266,280],
[286,298,294,0,294,282,276,279,274,287],
[273,287,285,257,0,277,252,272,274,278],
[280,293,278,269,274,0,267,274,276,276],
[294,294,296,275,299,284,0,280,290,282],
[283,297,282,272,279,277,271,0,270,293],
[297,289,285,277,277,275,261,281,0,285],
[274,282,271,264,273,275,269,258,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,263,255,240,263,255,283,261,235],
[274,0,272,321,283,300,269,298,290,297],
[288,279,0,286,278,310,276,275,251,248],
[296,230,265,0,269,297,258,279,259,230],
[311,268,273,282,0,275,258,279,289,253],
[288,251,241,254,276,0,276,274,255,265],
[296,282,275,293,293,275,0,300,294,282],
[268,253,276,272,272,277,251,0,256,244],
[290,261,300,292,262,296,257,295,0,269],
[316,254,303,321,298,286,269,307,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,298,268,311,339,291,271,266,350],
[279,0,271,318,289,338,336,253,304,259],
[253,280,0,235,285,283,256,254,245,303],
[283,233,316,0,264,298,307,276,283,272],
[240,262,266,287,0,319,274,222,261,347],
[212,213,268,253,232,0,223,213,269,267],
[260,215,295,244,277,328,0,258,246,310],
[280,298,297,275,329,338,293,0,264,303],
[285,247,306,268,290,282,305,287,0,304],
[201,292,248,279,204,284,241,248,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,273,243,240,264,255,255,249,235],
[283,0,275,249,247,262,260,250,246,259],
[278,276,0,252,261,271,267,288,251,251],
[308,302,299,0,269,286,281,278,268,269],
[311,304,290,282,0,291,285,272,283,294],
[287,289,280,265,260,0,267,291,245,275],
[296,291,284,270,266,284,0,267,264,263],
[296,301,263,273,279,260,284,0,273,281],
[302,305,300,283,268,306,287,278,0,275],
[316,292,300,282,257,276,288,270,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,276,250,273,264,288,310,338,317],
[244,0,261,231,313,287,232,253,271,278],
[275,290,0,280,302,263,250,338,306,278],
[301,320,271,0,292,290,260,280,301,256],
[278,238,249,259,0,272,262,279,270,293],
[287,264,288,261,279,0,254,314,312,281],
[263,319,301,291,289,297,0,284,273,274],
[241,298,213,271,272,237,267,0,272,218],
[213,280,245,250,281,239,278,279,0,265],
[234,273,273,295,258,270,277,333,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,286,262,298,298,321,269,274,269],
[261,0,303,254,293,274,310,263,291,273],
[265,248,0,254,258,277,284,277,267,266],
[289,297,297,0,296,303,329,306,287,272],
[253,258,293,255,0,280,310,274,290,262],
[253,277,274,248,271,0,306,255,269,295],
[230,241,267,222,241,245,0,262,244,229],
[282,288,274,245,277,296,289,0,255,263],
[277,260,284,264,261,282,307,296,0,276],
[282,278,285,279,289,256,322,288,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,297,279,312,290,263,236,276,261],
[329,0,305,284,342,332,317,296,285,272],
[254,246,0,255,313,276,286,251,222,218],
[272,267,296,0,311,273,288,245,259,273],
[239,209,238,240,0,212,265,208,239,208],
[261,219,275,278,339,0,291,266,257,247],
[288,234,265,263,286,260,0,280,248,248],
[315,255,300,306,343,285,271,0,243,278],
[275,266,329,292,312,294,303,308,0,264],
[290,279,333,278,343,304,303,273,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,256,285,252,282,260,294,283,279],
[285,0,280,289,264,258,272,303,291,273],
[295,271,0,286,286,269,285,318,283,272],
[266,262,265,0,270,258,267,314,280,266],
[299,287,265,281,0,284,282,307,305,286],
[269,293,282,293,267,0,271,304,289,281],
[291,279,266,284,269,280,0,294,286,283],
[257,248,233,237,244,247,257,0,276,251],
[268,260,268,271,246,262,265,275,0,282],
[272,278,279,285,265,270,268,300,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,341,223,339,260,329,292,265,276],
[302,0,306,257,336,250,330,288,299,273],
[210,245,0,239,261,253,306,271,223,264],
[328,294,312,0,325,277,315,291,274,291],
[212,215,290,226,0,242,290,261,233,226],
[291,301,298,274,309,0,347,305,267,277],
[222,221,245,236,261,204,0,282,224,222],
[259,263,280,260,290,246,269,0,247,286],
[286,252,328,277,318,284,327,304,0,262],
[275,278,287,260,325,274,329,265,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,274,268,241,296,248,266,263,269],
[247,0,242,214,195,220,188,204,229,236],
[277,309,0,286,226,272,231,232,270,320],
[283,337,265,0,248,282,234,246,259,269],
[310,356,325,303,0,337,248,286,297,335],
[255,331,279,269,214,0,217,231,252,263],
[303,363,320,317,303,334,0,263,278,307],
[285,347,319,305,265,320,288,0,281,337],
[288,322,281,292,254,299,273,270,0,277],
[282,315,231,282,216,288,244,214,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,249,280,287,290,284,276,253,281],
[257,0,269,267,276,276,277,286,263,300],
[302,282,0,289,284,296,284,311,265,292],
[271,284,262,0,295,283,261,290,277,293],
[264,275,267,256,0,273,261,294,264,289],
[261,275,255,268,278,0,260,300,262,278],
[267,274,267,290,290,291,0,274,261,284],
[275,265,240,261,257,251,277,0,260,275],
[298,288,286,274,287,289,290,291,0,304],
[270,251,259,258,262,273,267,276,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,266,276,254,285,286,262,258,277],
[291,0,273,273,277,291,277,262,278,289],
[285,278,0,282,243,293,298,256,271,287],
[275,278,269,0,275,317,291,283,281,280],
[297,274,308,276,0,305,304,280,291,287],
[266,260,258,234,246,0,248,249,265,252],
[265,274,253,260,247,303,0,249,254,274],
[289,289,295,268,271,302,302,0,283,304],
[293,273,280,270,260,286,297,268,0,285],
[274,262,264,271,264,299,277,247,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,274,295,286,303,295,235,302,254],
[243,0,270,276,295,282,289,304,279,246],
[277,281,0,285,297,264,333,263,334,255],
[256,275,266,0,286,243,335,258,316,316],
[265,256,254,265,0,239,293,223,306,245],
[248,269,287,308,312,0,307,261,308,269],
[256,262,218,216,258,244,0,248,242,244],
[316,247,288,293,328,290,303,0,319,275],
[249,272,217,235,245,243,309,232,0,272],
[297,305,296,235,306,282,307,276,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,282,285,271,276,263,294,284,285],
[297,0,298,298,310,302,302,305,322,274],
[269,253,0,282,275,253,273,289,281,250],
[266,253,269,0,260,250,262,284,274,259],
[280,241,276,291,0,265,260,269,271,265],
[275,249,298,301,286,0,286,295,301,282],
[288,249,278,289,291,265,0,277,291,282],
[257,246,262,267,282,256,274,0,269,255],
[267,229,270,277,280,250,260,282,0,255],
[266,277,301,292,286,269,269,296,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,269,266,284,308,315,315,279,296],
[246,0,348,270,257,297,287,284,276,266],
[282,203,0,280,226,288,319,266,286,241],
[285,281,271,0,322,312,297,275,258,264],
[267,294,325,229,0,317,318,306,270,246],
[243,254,263,239,234,0,261,221,230,276],
[236,264,232,254,233,290,0,253,226,235],
[236,267,285,276,245,330,298,0,266,301],
[272,275,265,293,281,321,325,285,0,286],
[255,285,310,287,305,275,316,250,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,255,295,270,263,288,266,259,280],
[307,0,276,296,286,282,298,286,270,295],
[296,275,0,283,281,279,308,275,272,289],
[256,255,268,0,276,254,289,261,255,272],
[281,265,270,275,0,273,315,272,284,273],
[288,269,272,297,278,0,302,289,280,290],
[263,253,243,262,236,249,0,256,244,256],
[285,265,276,290,279,262,295,0,273,294],
[292,281,279,296,267,271,307,278,0,303],
[271,256,262,279,278,261,295,257,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,354,147,328,274,239,295,458,203],
[142,0,354,225,206,175,226,317,240,202],
[197,197,0,123,147,218,123,271,299,179],
[404,326,428,0,206,341,342,268,428,343],
[223,345,404,345,0,440,345,345,454,345],
[277,376,333,210,111,0,302,358,455,340],
[312,325,428,209,206,249,0,390,336,372],
[256,234,280,283,206,193,161,0,336,227],
[93,311,252,123,97,96,215,215,0,123],
[348,349,372,208,206,211,179,324,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,339,299,298,282,285,249,295,301],
[243,0,305,299,270,252,242,232,273,270],
[212,246,0,253,252,281,216,240,233,260],
[252,252,298,0,300,241,253,250,279,278],
[253,281,299,251,0,237,255,224,254,258],
[269,299,270,310,314,0,262,243,260,282],
[266,309,335,298,296,289,0,277,268,301],
[302,319,311,301,327,308,274,0,291,275],
[256,278,318,272,297,291,283,260,0,267],
[250,281,291,273,293,269,250,276,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,292,270,247,253,278,274,255,286],
[268,0,261,279,272,281,270,290,267,295],
[259,290,0,291,287,284,282,274,281,314],
[281,272,260,0,238,264,244,244,267,273],
[304,279,264,313,0,289,281,253,289,307],
[298,270,267,287,262,0,279,278,278,301],
[273,281,269,307,270,272,0,269,279,293],
[277,261,277,307,298,273,282,0,299,293],
[296,284,270,284,262,273,272,252,0,278],
[265,256,237,278,244,250,258,258,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,297,276,273,288,295,293,288,288],
[264,0,309,278,278,287,300,294,289,291],
[254,242,0,256,266,277,277,289,270,272],
[275,273,295,0,278,302,300,303,287,293],
[278,273,285,273,0,283,300,294,295,283],
[263,264,274,249,268,0,283,279,270,269],
[256,251,274,251,251,268,0,285,269,269],
[258,257,262,248,257,272,266,0,266,256],
[263,262,281,264,256,281,282,285,0,271],
[263,260,279,258,268,282,282,295,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,292,280,316,274,256,326,313,307],
[268,0,259,296,305,246,284,281,297,291],
[259,292,0,264,315,246,260,303,295,305],
[271,255,287,0,313,304,281,315,333,270],
[235,246,236,238,0,238,242,290,294,280],
[277,305,305,247,313,0,247,319,305,274],
[295,267,291,270,309,304,0,282,315,316],
[225,270,248,236,261,232,269,0,275,275],
[238,254,256,218,257,246,236,276,0,295],
[244,260,246,281,271,277,235,276,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,276,268,290,277,289,286,285,278],
[251,0,273,259,271,268,273,270,266,261],
[275,278,0,268,293,292,285,286,286,283],
[283,292,283,0,299,293,307,280,289,265],
[261,280,258,252,0,282,283,271,287,271],
[274,283,259,258,269,0,269,256,285,256],
[262,278,266,244,268,282,0,274,275,263],
[265,281,265,271,280,295,277,0,267,277],
[266,285,265,262,264,266,276,284,0,274],
[273,290,268,286,280,295,288,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,286,280,304,297,293,265,299],
[274,0,268,291,275,273,263,283,277,277],
[269,283,0,283,294,290,289,292,276,300],
[265,260,268,0,265,277,283,283,271,265],
[271,276,257,286,0,291,300,300,281,281],
[247,278,261,274,260,0,278,273,257,269],
[254,288,262,268,251,273,0,287,267,273],
[258,268,259,268,251,278,264,0,263,267],
[286,274,275,280,270,294,284,288,0,298],
[252,274,251,286,270,282,278,284,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,289,250,303,278,267,295,296,288],
[238,0,271,248,267,276,249,266,273,258],
[262,280,0,283,295,277,279,314,304,282],
[301,303,268,0,310,287,274,313,303,304],
[248,284,256,241,0,273,257,286,286,274],
[273,275,274,264,278,0,253,271,275,285],
[284,302,272,277,294,298,0,310,307,295],
[256,285,237,238,265,280,241,0,276,256],
[255,278,247,248,265,276,244,275,0,242],
[263,293,269,247,277,266,256,295,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,275,230,385,327,303,300,272,293],
[300,0,308,244,342,360,308,293,336,325],
[276,243,0,249,327,320,256,217,262,264],
[321,307,302,0,376,322,331,352,250,293],
[166,209,224,175,0,235,258,286,196,244],
[224,191,231,229,316,0,262,203,183,199],
[248,243,295,220,293,289,0,287,281,242],
[251,258,334,199,265,348,264,0,350,299],
[279,215,289,301,355,368,270,201,0,313],
[258,226,287,258,307,352,309,252,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,272,305,290,277,303,269,271,290],
[260,0,292,278,279,276,294,283,257,256],
[279,259,0,288,289,278,282,281,272,271],
[246,273,263,0,283,259,266,281,262,239],
[261,272,262,268,0,279,264,269,286,249],
[274,275,273,292,272,0,297,287,270,270],
[248,257,269,285,287,254,0,277,287,264],
[282,268,270,270,282,264,274,0,273,288],
[280,294,279,289,265,281,264,278,0,254],
[261,295,280,312,302,281,287,263,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,261,223,263,245,214,237,250,248],
[313,0,275,263,291,278,245,275,258,297],
[290,276,0,251,288,266,260,266,267,282],
[328,288,300,0,296,286,264,298,298,287],
[288,260,263,255,0,258,220,261,247,274],
[306,273,285,265,293,0,265,264,274,272],
[337,306,291,287,331,286,0,291,272,269],
[314,276,285,253,290,287,260,0,272,280],
[301,293,284,253,304,277,279,279,0,312],
[303,254,269,264,277,279,282,271,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,247,270,273,266,284,266,295,273],
[284,0,276,264,267,299,280,284,284,275],
[304,275,0,262,257,267,278,276,286,277],
[281,287,289,0,276,277,285,265,290,300],
[278,284,294,275,0,271,273,260,287,291],
[285,252,284,274,280,0,274,265,279,270],
[267,271,273,266,278,277,0,281,282,303],
[285,267,275,286,291,286,270,0,292,297],
[256,267,265,261,264,272,269,259,0,288],
[278,276,274,251,260,281,248,254,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,288,266,305,272,277,287,261,252],
[257,0,278,273,288,268,252,266,260,288],
[263,273,0,234,274,259,262,277,293,270],
[285,278,317,0,287,289,273,287,292,280],
[246,263,277,264,0,287,291,271,291,242],
[279,283,292,262,264,0,282,269,269,259],
[274,299,289,278,260,269,0,286,278,264],
[264,285,274,264,280,282,265,0,245,247],
[290,291,258,259,260,282,273,306,0,251],
[299,263,281,271,309,292,287,304,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,265,283,257,270,259,291,278,277],
[279,0,269,316,286,279,287,302,292,301],
[286,282,0,294,278,265,268,298,299,292],
[268,235,257,0,256,244,254,282,282,270],
[294,265,273,295,0,271,263,296,289,288],
[281,272,286,307,280,0,281,314,274,308],
[292,264,283,297,288,270,0,293,308,280],
[260,249,253,269,255,237,258,0,273,254],
[273,259,252,269,262,277,243,278,0,279],
[274,250,259,281,263,243,271,297,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,245,267,251,281,276,277,247,250],
[306,0,293,294,271,312,284,290,281,283],
[306,258,0,306,286,321,283,309,305,269],
[284,257,245,0,268,273,256,252,263,240],
[300,280,265,283,0,297,276,281,276,245],
[270,239,230,278,254,0,260,275,285,240],
[275,267,268,295,275,291,0,304,300,260],
[274,261,242,299,270,276,247,0,277,245],
[304,270,246,288,275,266,251,274,0,261],
[301,268,282,311,306,311,291,306,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,266,277,278,267,266,267,274,274],
[283,0,282,274,277,294,274,286,273,294],
[285,269,0,273,285,280,288,281,283,272],
[274,277,278,0,270,269,289,286,274,293],
[273,274,266,281,0,283,274,280,266,279],
[284,257,271,282,268,0,275,278,271,279],
[285,277,263,262,277,276,0,275,268,279],
[284,265,270,265,271,273,276,0,281,279],
[277,278,268,277,285,280,283,270,0,282],
[277,257,279,258,272,272,272,272,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,285,310,340,290,290,303,445,317],
[342,0,444,263,441,308,376,356,363,283],
[266,107,0,61,259,214,283,193,215,274],
[241,288,490,0,477,304,249,304,457,370],
[211,110,292,74,0,180,298,121,158,136],
[261,243,337,247,371,0,238,252,285,322],
[261,175,268,302,253,313,0,200,296,250],
[248,195,358,247,430,299,351,0,265,222],
[106,188,336,94,393,266,255,286,0,334],
[234,268,277,181,415,229,301,329,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,272,272,258,256,293,260,267],
[282,0,267,269,281,277,254,263,246,270],
[276,284,0,286,310,254,250,256,277,286],
[279,282,265,0,292,264,262,263,268,282],
[279,270,241,259,0,251,244,270,229,278],
[293,274,297,287,300,0,298,285,299,313],
[295,297,301,289,307,253,0,282,281,279],
[258,288,295,288,281,266,269,0,252,286],
[291,305,274,283,322,252,270,299,0,298],
[284,281,265,269,273,238,272,265,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,248,230,264,240,234,236,261,246],
[284,0,267,260,293,279,254,277,275,263],
[303,284,0,235,274,294,238,249,287,254],
[321,291,316,0,290,271,265,270,317,285],
[287,258,277,261,0,249,233,251,289,260],
[311,272,257,280,302,0,269,248,297,266],
[317,297,313,286,318,282,0,299,259,269],
[315,274,302,281,300,303,252,0,302,303],
[290,276,264,234,262,254,292,249,0,271],
[305,288,297,266,291,285,282,248,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,275,282,268,271,248,291,297,258],
[286,0,276,273,292,278,295,317,308,276],
[276,275,0,263,242,289,277,285,302,259],
[269,278,288,0,305,275,300,314,336,266],
[283,259,309,246,0,281,269,303,308,271],
[280,273,262,276,270,0,296,276,295,275],
[303,256,274,251,282,255,0,289,279,271],
[260,234,266,237,248,275,262,0,294,239],
[254,243,249,215,243,256,272,257,0,252],
[293,275,292,285,280,276,280,312,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,292,249,262,284,289,263,274,293],
[278,0,250,263,277,257,264,280,270,273],
[259,301,0,241,281,293,265,283,301,277],
[302,288,310,0,282,284,274,288,324,307],
[289,274,270,269,0,295,271,266,297,280],
[267,294,258,267,256,0,287,274,277,281],
[262,287,286,277,280,264,0,273,283,295],
[288,271,268,263,285,277,278,0,284,291],
[277,281,250,227,254,274,268,267,0,279],
[258,278,274,244,271,270,256,260,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,258,257,256,262,271,266,253,250],
[291,0,268,280,284,273,270,279,279,264],
[293,283,0,272,273,284,287,284,266,254],
[294,271,279,0,292,285,290,287,271,274],
[295,267,278,259,0,271,273,280,271,262],
[289,278,267,266,280,0,277,270,274,279],
[280,281,264,261,278,274,0,275,262,273],
[285,272,267,264,271,281,276,0,270,277],
[298,272,285,280,280,277,289,281,0,276],
[301,287,297,277,289,272,278,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,263,278,284,271,275,293,288,272],
[273,0,276,282,307,298,285,295,288,278],
[288,275,0,270,285,281,286,287,293,276],
[273,269,281,0,291,293,289,288,269,276],
[267,244,266,260,0,258,257,267,276,269],
[280,253,270,258,293,0,277,272,289,276],
[276,266,265,262,294,274,0,278,285,279],
[258,256,264,263,284,279,273,0,277,275],
[263,263,258,282,275,262,266,274,0,285],
[279,273,275,275,282,275,272,276,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,286,268,257,275,317,300,297,303],
[245,0,265,208,235,277,262,248,267,266],
[265,286,0,273,276,268,306,289,276,277],
[283,343,278,0,281,292,307,290,274,297],
[294,316,275,270,0,265,290,280,287,298],
[276,274,283,259,286,0,290,271,267,291],
[234,289,245,244,261,261,0,246,289,277],
[251,303,262,261,271,280,305,0,292,299],
[254,284,275,277,264,284,262,259,0,278],
[248,285,274,254,253,260,274,252,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,268,280,276,268,265,260,260,273],
[293,0,275,282,295,284,276,276,280,268],
[283,276,0,277,275,284,277,269,270,272],
[271,269,274,0,294,286,288,278,271,282],
[275,256,276,257,0,279,259,258,268,271],
[283,267,267,265,272,0,279,276,272,261],
[286,275,274,263,292,272,0,269,272,268],
[291,275,282,273,293,275,282,0,281,261],
[291,271,281,280,283,279,279,270,0,271],
[278,283,279,269,280,290,283,290,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,309,271,308,311,265,286,290,286],
[230,0,247,258,276,273,259,249,237,274],
[242,304,0,257,295,280,279,285,262,297],
[280,293,294,0,313,292,281,265,272,288],
[243,275,256,238,0,278,244,250,227,254],
[240,278,271,259,273,0,272,251,234,268],
[286,292,272,270,307,279,0,272,276,260],
[265,302,266,286,301,300,279,0,242,281],
[261,314,289,279,324,317,275,309,0,288],
[265,277,254,263,297,283,291,270,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,280,279,279,269,266,287,285,272],
[273,0,269,272,278,275,264,273,255,262],
[271,282,0,257,279,254,266,260,253,273],
[272,279,294,0,288,284,278,283,282,278],
[272,273,272,263,0,268,272,249,264,272],
[282,276,297,267,283,0,266,295,284,279],
[285,287,285,273,279,285,0,283,281,270],
[264,278,291,268,302,256,268,0,275,289],
[266,296,298,269,287,267,270,276,0,279],
[279,289,278,273,279,272,281,262,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,275,276,279,289,295,298,308,279],
[292,0,280,292,268,331,321,311,309,293],
[276,271,0,285,274,304,301,293,306,276],
[275,259,266,0,271,326,302,299,311,299],
[272,283,277,280,0,326,300,307,304,302],
[262,220,247,225,225,0,278,281,301,267],
[256,230,250,249,251,273,0,256,270,248],
[253,240,258,252,244,270,295,0,262,270],
[243,242,245,240,247,250,281,289,0,266],
[272,258,275,252,249,284,303,281,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,315,205,280,301,241,317,280,274],
[295,0,385,248,307,316,300,358,280,313],
[236,166,0,210,198,192,236,328,279,197],
[346,303,341,0,288,348,319,373,291,275],
[271,244,353,263,0,256,305,277,312,233],
[250,235,359,203,295,0,307,263,273,297],
[310,251,315,232,246,244,0,311,268,210],
[234,193,223,178,274,288,240,0,219,233],
[271,271,272,260,239,278,283,332,0,274],
[277,238,354,276,318,254,341,318,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,334,150,298,327,359,244,125,359],
[347,0,280,280,443,280,450,389,234,450],
[217,271,0,169,313,361,320,278,300,468],
[401,271,382,0,490,375,443,468,295,551],
[253,108,238,61,0,144,356,61,144,450],
[224,271,190,176,407,0,360,421,170,421],
[192,101,231,108,195,191,0,108,83,426],
[307,162,273,83,490,130,443,0,83,504],
[426,317,251,256,407,381,468,468,0,468],
[192,101,83,0,101,130,125,47,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,261,268,295,280,275,276,271,275],
[279,0,289,269,295,273,278,275,279,283],
[290,262,0,276,285,276,265,269,281,265],
[283,282,275,0,299,275,287,274,274,277],
[256,256,266,252,0,266,252,255,271,266],
[271,278,275,276,285,0,266,260,285,275],
[276,273,286,264,299,285,0,273,291,275],
[275,276,282,277,296,291,278,0,276,276],
[280,272,270,277,280,266,260,275,0,276],
[276,268,286,274,285,276,276,275,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,268,270,287,281,245,275,272,278],
[313,0,279,293,296,321,271,290,295,296],
[283,272,0,310,282,293,278,286,278,281],
[281,258,241,0,284,309,252,254,266,292],
[264,255,269,267,0,286,253,291,301,272],
[270,230,258,242,265,0,266,260,259,269],
[306,280,273,299,298,285,0,301,281,277],
[276,261,265,297,260,291,250,0,268,272],
[279,256,273,285,250,292,270,283,0,289],
[273,255,270,259,279,282,274,279,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,267,279,266,283,261,269,278,259],
[294,0,269,275,269,275,287,268,287,272],
[284,282,0,278,283,285,273,287,287,279],
[272,276,273,0,257,275,278,268,296,264],
[285,282,268,294,0,272,283,283,283,266],
[268,276,266,276,279,0,283,269,297,276],
[290,264,278,273,268,268,0,286,300,270],
[282,283,264,283,268,282,265,0,306,278],
[273,264,264,255,268,254,251,245,0,251],
[292,279,272,287,285,275,281,273,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,275,259,272,274,277,285,271,277],
[283,0,278,277,289,284,298,293,272,267],
[276,273,0,271,274,294,284,302,288,265],
[292,274,280,0,287,276,304,288,284,275],
[279,262,277,264,0,284,291,288,284,255],
[277,267,257,275,267,0,284,275,265,259],
[274,253,267,247,260,267,0,260,271,270],
[266,258,249,263,263,276,291,0,277,253],
[280,279,263,267,267,286,280,274,0,262],
[274,284,286,276,296,292,281,298,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,292,278,269,276,285,286,288,281],
[254,0,264,243,256,272,274,275,277,264],
[259,287,0,286,270,284,270,270,275,295],
[273,308,265,0,284,276,259,287,306,281],
[282,295,281,267,0,273,280,284,286,280],
[275,279,267,275,278,0,267,269,293,280],
[266,277,281,292,271,284,0,287,285,285],
[265,276,281,264,267,282,264,0,274,261],
[263,274,276,245,265,258,266,277,0,262],
[270,287,256,270,271,271,266,290,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,270,248,323,221,227,277,292,281],
[257,0,251,234,317,266,279,268,260,318],
[281,300,0,256,353,270,254,297,269,333],
[303,317,295,0,337,240,303,302,314,329],
[228,234,198,214,0,221,211,229,252,284],
[330,285,281,311,330,0,277,268,290,308],
[324,272,297,248,340,274,0,314,286,319],
[274,283,254,249,322,283,237,0,275,294],
[259,291,282,237,299,261,265,276,0,295],
[270,233,218,222,267,243,232,257,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,263,282,240,236,217,285,284,266],
[295,0,237,284,247,239,274,266,248,280],
[288,314,0,316,319,259,298,288,318,291],
[269,267,235,0,270,239,253,255,253,255],
[311,304,232,281,0,268,256,264,276,247],
[315,312,292,312,283,0,280,293,281,272],
[334,277,253,298,295,271,0,285,304,276],
[266,285,263,296,287,258,266,0,259,263],
[267,303,233,298,275,270,247,292,0,285],
[285,271,260,296,304,279,275,288,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,280,278,265,251,256,240,279,270],
[295,0,266,276,278,281,272,281,288,282],
[271,285,0,301,291,280,291,258,282,278],
[273,275,250,0,267,242,290,253,280,261],
[286,273,260,284,0,269,278,261,286,271],
[300,270,271,309,282,0,262,246,273,268],
[295,279,260,261,273,289,0,267,280,280],
[311,270,293,298,290,305,284,0,305,275],
[272,263,269,271,265,278,271,246,0,267],
[281,269,273,290,280,283,271,276,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,260,277,235,241,273,269,247,258],
[316,0,330,254,314,250,288,275,330,301],
[291,221,0,231,227,236,258,245,259,288],
[274,297,320,0,285,263,307,309,287,279],
[316,237,324,266,0,292,284,297,253,282],
[310,301,315,288,259,0,305,297,294,308],
[278,263,293,244,267,246,0,260,283,289],
[282,276,306,242,254,254,291,0,299,277],
[304,221,292,264,298,257,268,252,0,282],
[293,250,263,272,269,243,262,274,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,253,255,285,272,290,295,272,282],
[282,0,265,265,305,296,283,284,261,276],
[298,286,0,271,317,305,329,311,279,296],
[296,286,280,0,293,281,300,295,275,273],
[266,246,234,258,0,274,274,285,263,258],
[279,255,246,270,277,0,272,295,267,261],
[261,268,222,251,277,279,0,267,264,248],
[256,267,240,256,266,256,284,0,249,243],
[279,290,272,276,288,284,287,302,0,287],
[269,275,255,278,293,290,303,308,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,267,279,269,283,264,277,271,252],
[296,0,271,306,322,300,285,300,286,287],
[284,280,0,279,294,293,283,294,279,258],
[272,245,272,0,290,283,250,282,266,267],
[282,229,257,261,0,279,276,272,265,260],
[268,251,258,268,272,0,262,270,272,262],
[287,266,268,301,275,289,0,299,281,271],
[274,251,257,269,279,281,252,0,268,262],
[280,265,272,285,286,279,270,283,0,259],
[299,264,293,284,291,289,280,289,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,285,281,269,290,277,285,278,287],
[283,0,295,279,274,279,275,284,283,271],
[266,256,0,280,263,274,270,266,259,280],
[270,272,271,0,270,290,252,263,256,258],
[282,277,288,281,0,307,292,271,271,282],
[261,272,277,261,244,0,275,266,256,279],
[274,276,281,299,259,276,0,267,279,273],
[266,267,285,288,280,285,284,0,271,289],
[273,268,292,295,280,295,272,280,0,280],
[264,280,271,293,269,272,278,262,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,245,263,259,263,269,250,237,262],
[287,0,251,265,257,266,284,264,255,255],
[306,300,0,275,271,289,276,292,285,281],
[288,286,276,0,281,270,295,282,290,283],
[292,294,280,270,0,278,271,276,282,297],
[288,285,262,281,273,0,275,258,263,268],
[282,267,275,256,280,276,0,276,267,276],
[301,287,259,269,275,293,275,0,273,262],
[314,296,266,261,269,288,284,278,0,293],
[289,296,270,268,254,283,275,289,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,267,258,277,287,266,272,263,270],
[271,0,264,258,274,268,270,252,255,261],
[284,287,0,253,289,280,289,269,288,272],
[293,293,298,0,283,273,293,288,287,278],
[274,277,262,268,0,272,284,269,284,258],
[264,283,271,278,279,0,279,263,272,266],
[285,281,262,258,267,272,0,270,276,257],
[279,299,282,263,282,288,281,0,273,266],
[288,296,263,264,267,279,275,278,0,272],
[281,290,279,273,293,285,294,285,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,265,268,257,287,269,263,261,269],
[287,0,284,287,270,287,287,240,277,289],
[286,267,0,286,270,281,274,233,285,286],
[283,264,265,0,259,286,260,259,275,272],
[294,281,281,292,0,300,275,278,287,279],
[264,264,270,265,251,0,252,253,256,277],
[282,264,277,291,276,299,0,283,274,282],
[288,311,318,292,273,298,268,0,302,307],
[290,274,266,276,264,295,277,249,0,288],
[282,262,265,279,272,274,269,244,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,297,288,278,274,267,287,283,287],
[266,0,300,315,306,292,299,288,302,290],
[254,251,0,274,263,251,265,259,272,263],
[263,236,277,0,273,280,280,282,282,277],
[273,245,288,278,0,271,259,285,276,284],
[277,259,300,271,280,0,277,296,268,284],
[284,252,286,271,292,274,0,290,284,293],
[264,263,292,269,266,255,261,0,265,255],
[268,249,279,269,275,283,267,286,0,271],
[264,261,288,274,267,267,258,296,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,299,273,304,306,291,273,264,279],
[263,0,257,266,255,258,273,246,254,271],
[252,294,0,230,287,294,295,296,253,283],
[278,285,321,0,288,264,311,271,241,310],
[247,296,264,263,0,237,258,252,229,279],
[245,293,257,287,314,0,321,275,250,273],
[260,278,256,240,293,230,0,274,288,277],
[278,305,255,280,299,276,277,0,259,296],
[287,297,298,310,322,301,263,292,0,286],
[272,280,268,241,272,278,274,255,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,267,230,279,276,267,257,264,257],
[284,0,247,248,284,251,274,264,252,271],
[284,304,0,254,283,280,287,282,293,269],
[321,303,297,0,334,305,318,311,292,257],
[272,267,268,217,0,266,270,273,253,258],
[275,300,271,246,285,0,261,290,265,287],
[284,277,264,233,281,290,0,285,275,261],
[294,287,269,240,278,261,266,0,269,270],
[287,299,258,259,298,286,276,282,0,265],
[294,280,282,294,293,264,290,281,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,245,277,250,252,253,260,261,235],
[320,0,261,287,269,276,272,285,297,273],
[306,290,0,291,248,290,280,305,271,287],
[274,264,260,0,270,265,265,257,269,254],
[301,282,303,281,0,285,292,295,287,275],
[299,275,261,286,266,0,285,314,286,271],
[298,279,271,286,259,266,0,294,291,269],
[291,266,246,294,256,237,257,0,261,244],
[290,254,280,282,264,265,260,290,0,268],
[316,278,264,297,276,280,282,307,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,289,269,304,307,276,294,288,276],
[270,0,277,256,269,293,259,277,254,259],
[262,274,0,261,260,283,267,272,258,253],
[282,295,290,0,282,310,288,305,275,286],
[247,282,291,269,0,300,247,274,257,277],
[244,258,268,241,251,0,241,271,248,260],
[275,292,284,263,304,310,0,297,278,292],
[257,274,279,246,277,280,254,0,263,258],
[263,297,293,276,294,303,273,288,0,278],
[275,292,298,265,274,291,259,293,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,295,267,257,274,284,278,270,249],
[284,0,290,269,295,275,296,274,270,252],
[256,261,0,247,276,267,282,258,260,249],
[284,282,304,0,269,284,300,273,285,259],
[294,256,275,282,0,279,285,259,280,277],
[277,276,284,267,272,0,290,271,287,280],
[267,255,269,251,266,261,0,245,259,251],
[273,277,293,278,292,280,306,0,275,270],
[281,281,291,266,271,264,292,276,0,261],
[302,299,302,292,274,271,300,281,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,290,276,270,306,262,267,293,268],
[286,0,283,286,282,317,267,284,295,274],
[261,268,0,293,275,302,282,284,297,275],
[275,265,258,0,269,287,274,267,291,256],
[281,269,276,282,0,296,264,280,301,272],
[245,234,249,264,255,0,255,248,271,247],
[289,284,269,277,287,296,0,276,309,279],
[284,267,267,284,271,303,275,0,292,249],
[258,256,254,260,250,280,242,259,0,252],
[283,277,276,295,279,304,272,302,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,281,303,256,293,321,268,297,266],
[247,0,295,303,282,261,288,290,329,267],
[270,256,0,300,242,251,301,266,285,279],
[248,248,251,0,247,242,268,272,299,273],
[295,269,309,304,0,296,336,289,315,296],
[258,290,300,309,255,0,296,296,313,286],
[230,263,250,283,215,255,0,265,286,268],
[283,261,285,279,262,255,286,0,305,284],
[254,222,266,252,236,238,265,246,0,239],
[285,284,272,278,255,265,283,267,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,294,261,268,273,273,308,279],
[274,0,278,273,262,261,273,239,276,273],
[269,273,0,246,248,247,264,244,277,270],
[257,278,305,0,243,278,257,243,270,291],
[290,289,303,308,0,268,261,256,288,292],
[283,290,304,273,283,0,277,256,288,309],
[278,278,287,294,290,274,0,293,288,300],
[278,312,307,308,295,295,258,0,305,295],
[243,275,274,281,263,263,263,246,0,273],
[272,278,281,260,259,242,251,256,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,280,278,292,304,266,276,293,299],
[231,0,258,264,259,275,259,238,264,265],
[271,293,0,296,290,272,270,258,288,277],
[273,287,255,0,286,288,289,247,276,257],
[259,292,261,265,0,295,293,254,256,314],
[247,276,279,263,256,0,251,244,264,269],
[285,292,281,262,258,300,0,255,254,302],
[275,313,293,304,297,307,296,0,293,288],
[258,287,263,275,295,287,297,258,0,269],
[252,286,274,294,237,282,249,263,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,261,276,292,287,267,276,271,280],
[256,0,270,262,265,286,271,273,277,275],
[290,281,0,274,305,291,275,282,274,281],
[275,289,277,0,289,279,285,271,277,291],
[259,286,246,262,0,295,269,266,290,273],
[264,265,260,272,256,0,244,258,258,262],
[284,280,276,266,282,307,0,275,275,292],
[275,278,269,280,285,293,276,0,273,294],
[280,274,277,274,261,293,276,278,0,290],
[271,276,270,260,278,289,259,257,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,273,286,277,280,289,267,286,293],
[252,0,264,269,286,265,279,270,276,274],
[278,287,0,266,292,265,271,262,286,267],
[265,282,285,0,284,283,297,291,283,269],
[274,265,259,267,0,242,273,267,261,271],
[271,286,286,268,309,0,275,274,282,277],
[262,272,280,254,278,276,0,275,271,282],
[284,281,289,260,284,277,276,0,277,269],
[265,275,265,268,290,269,280,274,0,272],
[258,277,284,282,280,274,269,282,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,276,261,288,264,281,274,292,269],
[287,0,282,284,289,273,289,275,292,276],
[275,269,0,271,269,272,298,267,282,266],
[290,267,280,0,286,276,300,268,285,263],
[263,262,282,265,0,260,295,278,283,264],
[287,278,279,275,291,0,308,281,274,266],
[270,262,253,251,256,243,0,258,266,247],
[277,276,284,283,273,270,293,0,305,247],
[259,259,269,266,268,277,285,246,0,256],
[282,275,285,288,287,285,304,304,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,259,261,274,267,275,259,252,244],
[279,0,252,284,281,280,284,283,264,263],
[292,299,0,304,261,271,288,281,276,285],
[290,267,247,0,267,275,293,264,255,253],
[277,270,290,284,0,261,268,269,268,257],
[284,271,280,276,290,0,277,279,273,251],
[276,267,263,258,283,274,0,279,258,251],
[292,268,270,287,282,272,272,0,267,270],
[299,287,275,296,283,278,293,284,0,290],
[307,288,266,298,294,300,300,281,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,260,264,267,253,259,281,267,283],
[277,0,277,317,277,275,277,282,285,283],
[291,274,0,275,305,287,290,274,280,292],
[287,234,276,0,266,257,254,277,276,277],
[284,274,246,285,0,266,267,275,275,282],
[298,276,264,294,285,0,299,293,297,306],
[292,274,261,297,284,252,0,276,268,287],
[270,269,277,274,276,258,275,0,271,270],
[284,266,271,275,276,254,283,280,0,293],
[268,268,259,274,269,245,264,281,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,262,267,265,272,285,257,269,265],
[272,0,279,266,279,288,288,273,266,259],
[289,272,0,275,284,284,292,278,295,282],
[284,285,276,0,281,292,263,266,284,265],
[286,272,267,270,0,271,286,267,276,264],
[279,263,267,259,280,0,276,261,270,264],
[266,263,259,288,265,275,0,266,266,276],
[294,278,273,285,284,290,285,0,284,262],
[282,285,256,267,275,281,285,267,0,259],
[286,292,269,286,287,287,275,289,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,210,235,261,203,234,279,204,194],
[331,0,260,277,302,252,276,312,267,255],
[341,291,0,276,313,261,237,326,306,258],
[316,274,275,0,248,240,262,285,232,251],
[290,249,238,303,0,240,241,304,289,259],
[348,299,290,311,311,0,267,336,261,278],
[317,275,314,289,310,284,0,322,275,263],
[272,239,225,266,247,215,229,0,207,231],
[347,284,245,319,262,290,276,344,0,301],
[357,296,293,300,292,273,288,320,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,282,272,285,279,268,283,275,260],
[290,0,294,289,310,295,284,296,279,274],
[269,257,0,282,282,273,270,271,250,242],
[279,262,269,0,282,281,271,274,266,247],
[266,241,269,269,0,267,263,268,255,248],
[272,256,278,270,284,0,265,294,260,255],
[283,267,281,280,288,286,0,291,267,261],
[268,255,280,277,283,257,260,0,272,264],
[276,272,301,285,296,291,284,279,0,277],
[291,277,309,304,303,296,290,287,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,260,264,256,269,257,264,279,266],
[292,0,281,288,271,275,273,277,289,283],
[291,270,0,276,290,297,276,275,285,291],
[287,263,275,0,278,282,267,273,294,284],
[295,280,261,273,0,281,270,275,281,270],
[282,276,254,269,270,0,269,262,271,270],
[294,278,275,284,281,282,0,275,295,278],
[287,274,276,278,276,289,276,0,295,283],
[272,262,266,257,270,280,256,256,0,281],
[285,268,260,267,281,281,273,268,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,289,272,280,303,261,284,274,296],
[239,0,247,252,229,253,236,253,240,262],
[262,304,0,245,260,285,255,255,269,292],
[279,299,306,0,267,287,259,276,304,290],
[271,322,291,284,0,286,266,264,278,310],
[248,298,266,264,265,0,250,253,260,288],
[290,315,296,292,285,301,0,306,271,299],
[267,298,296,275,287,298,245,0,271,321],
[277,311,282,247,273,291,280,280,0,276],
[255,289,259,261,241,263,252,230,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,271,221,271,251,286,276,254,250],
[296,0,298,257,277,296,311,286,255,297],
[280,253,0,268,278,262,326,275,257,267],
[330,294,283,0,279,277,335,291,264,316],
[280,274,273,272,0,255,306,284,240,290],
[300,255,289,274,296,0,317,306,278,277],
[265,240,225,216,245,234,0,226,220,232],
[275,265,276,260,267,245,325,0,247,281],
[297,296,294,287,311,273,331,304,0,307],
[301,254,284,235,261,274,319,270,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,309,295,291,290,285,274,332,296],
[273,0,295,295,273,268,271,265,298,277],
[242,256,0,267,244,257,256,257,291,267],
[256,256,284,0,281,273,269,282,301,292],
[260,278,307,270,0,283,268,291,311,288],
[261,283,294,278,268,0,286,292,326,306],
[266,280,295,282,283,265,0,272,304,285],
[277,286,294,269,260,259,279,0,312,287],
[219,253,260,250,240,225,247,239,0,239],
[255,274,284,259,263,245,266,264,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,290,328,269,288,286,316,279,261],
[274,0,243,279,254,251,251,279,234,274],
[261,308,0,326,303,298,300,310,272,279],
[223,272,225,0,235,277,276,229,253,245],
[282,297,248,316,0,303,299,286,302,261],
[263,300,253,274,248,0,277,279,225,217],
[265,300,251,275,252,274,0,294,253,269],
[235,272,241,322,265,272,257,0,244,240],
[272,317,279,298,249,326,298,307,0,267],
[290,277,272,306,290,334,282,311,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,287,266,293,284,289,263,286,264],
[281,0,273,287,308,270,271,258,283,254],
[264,278,0,283,312,267,282,256,275,292],
[285,264,268,0,311,277,262,279,279,254],
[258,243,239,240,0,265,246,241,263,252],
[267,281,284,274,286,0,271,263,263,248],
[262,280,269,289,305,280,0,283,281,277],
[288,293,295,272,310,288,268,0,292,278],
[265,268,276,272,288,288,270,259,0,270],
[287,297,259,297,299,303,274,273,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,318,295,389,407,389,218,307,265],
[235,0,291,418,322,399,315,296,287,254],
[233,260,0,334,245,329,258,220,253,280],
[256,133,217,0,236,318,281,220,213,307],
[162,229,306,315,0,238,324,262,228,340],
[144,152,222,233,313,0,286,214,190,268],
[162,236,293,270,227,265,0,120,202,215],
[333,255,331,331,289,337,431,0,256,418],
[244,264,298,338,323,361,349,295,0,392],
[286,297,271,244,211,283,336,133,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,285,283,294,267,260,274,268,273],
[262,0,277,272,271,280,294,270,265,285],
[266,274,0,266,271,263,274,249,256,247],
[268,279,285,0,291,281,264,272,272,270],
[257,280,280,260,0,278,285,265,280,276],
[284,271,288,270,273,0,279,265,255,277],
[291,257,277,287,266,272,0,266,264,285],
[277,281,302,279,286,286,285,0,266,281],
[283,286,295,279,271,296,287,285,0,281],
[278,266,304,281,275,274,266,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,288,269,294,295,273,293,282,254],
[286,0,300,259,275,256,251,282,291,278],
[263,251,0,261,291,266,241,272,253,260],
[282,292,290,0,281,272,262,290,272,270],
[257,276,260,270,0,271,246,290,274,257],
[256,295,285,279,280,0,261,288,266,273],
[278,300,310,289,305,290,0,293,301,264],
[258,269,279,261,261,263,258,0,260,241],
[269,260,298,279,277,285,250,291,0,260],
[297,273,291,281,294,278,287,310,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,263,234,249,253,274,254,257,266],
[319,0,313,316,283,319,256,269,266,288],
[288,238,0,295,257,284,296,269,241,284],
[317,235,256,0,226,215,282,216,238,270],
[302,268,294,325,0,282,298,296,291,287],
[298,232,267,336,269,0,287,264,256,269],
[277,295,255,269,253,264,0,253,273,292],
[297,282,282,335,255,287,298,0,298,274],
[294,285,310,313,260,295,278,253,0,278],
[285,263,267,281,264,282,259,277,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,288,307,275,291,244,272,267,307],
[288,0,282,288,261,296,264,264,249,280],
[263,269,0,294,231,279,258,248,241,257],
[244,263,257,0,250,280,255,250,249,269],
[276,290,320,301,0,294,276,274,284,323],
[260,255,272,271,257,0,233,244,255,255],
[307,287,293,296,275,318,0,269,277,302],
[279,287,303,301,277,307,282,0,268,316],
[284,302,310,302,267,296,274,283,0,292],
[244,271,294,282,228,296,249,235,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,299,221,248,272,262,249,207,300],
[249,0,274,236,238,280,245,265,268,250],
[252,277,0,288,256,287,263,279,252,325],
[330,315,263,0,271,264,291,280,242,329],
[303,313,295,280,0,245,259,293,268,285],
[279,271,264,287,306,0,316,249,214,307],
[289,306,288,260,292,235,0,260,186,325],
[302,286,272,271,258,302,291,0,301,305],
[344,283,299,309,283,337,365,250,0,344],
[251,301,226,222,266,244,226,246,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,213,228,255,249,248,267,212,264],
[353,0,277,250,293,305,281,289,294,314],
[338,274,0,310,300,285,299,277,274,332],
[323,301,241,0,322,298,237,279,270,314],
[296,258,251,229,0,264,246,252,295,296],
[302,246,266,253,287,0,279,252,272,314],
[303,270,252,314,305,272,0,302,280,327],
[284,262,274,272,299,299,249,0,245,294],
[339,257,277,281,256,279,271,306,0,308],
[287,237,219,237,255,237,224,257,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,285,274,274,262,300,288,294,291],
[271,0,267,252,268,255,291,274,293,285],
[266,284,0,247,256,259,269,282,280,260],
[277,299,304,0,271,281,292,276,317,307],
[277,283,295,280,0,279,290,292,286,270],
[289,296,292,270,272,0,291,315,292,308],
[251,260,282,259,261,260,0,272,295,277],
[263,277,269,275,259,236,279,0,282,279],
[257,258,271,234,265,259,256,269,0,264],
[260,266,291,244,281,243,274,272,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,296,301,309,293,298,304,315,270],
[270,0,294,287,277,282,302,301,304,300],
[255,257,0,262,285,287,276,288,288,282],
[250,264,289,0,277,277,276,284,300,264],
[242,274,266,274,0,267,283,281,302,279],
[258,269,264,274,284,0,272,289,303,266],
[253,249,275,275,268,279,0,278,296,258],
[247,250,263,267,270,262,273,0,289,255],
[236,247,263,251,249,248,255,262,0,251],
[281,251,269,287,272,285,293,296,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,290,285,291,292,316,272,285],
[271,0,287,291,271,281,295,304,281,304],
[275,264,0,283,272,286,298,294,273,269],
[261,260,268,0,263,276,293,306,273,279],
[266,280,279,288,0,275,274,269,260,270],
[260,270,265,275,276,0,294,292,260,286],
[259,256,253,258,277,257,0,282,248,271],
[235,247,257,245,282,259,269,0,248,256],
[279,270,278,278,291,291,303,303,0,285],
[266,247,282,272,281,265,280,295,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,276,288,263,286,281,275,277,280],
[261,0,278,258,270,302,303,260,275,279],
[275,273,0,270,293,274,263,280,262,267],
[263,293,281,0,273,289,284,273,285,295],
[288,281,258,278,0,298,289,266,291,285],
[265,249,277,262,253,0,288,284,258,269],
[270,248,288,267,262,263,0,268,287,279],
[276,291,271,278,285,267,283,0,291,280],
[274,276,289,266,260,293,264,260,0,285],
[271,272,284,256,266,282,272,271,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,278,294,294,288,291,274,276,292],
[275,0,264,294,309,289,255,268,280,273],
[273,287,0,310,310,290,272,279,285,287],
[257,257,241,0,288,273,269,274,270,279],
[257,242,241,263,0,258,245,247,270,254],
[263,262,261,278,293,0,268,276,274,286],
[260,296,279,282,306,283,0,270,274,284],
[277,283,272,277,304,275,281,0,279,276],
[275,271,266,281,281,277,277,272,0,268],
[259,278,264,272,297,265,267,275,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,278,265,270,296,274,282,270,277],
[262,0,248,270,259,271,268,251,264,228],
[273,303,0,262,271,287,263,276,271,245],
[286,281,289,0,256,289,271,287,278,256],
[281,292,280,295,0,282,276,277,266,272],
[255,280,264,262,269,0,268,252,261,252],
[277,283,288,280,275,283,0,270,273,255],
[269,300,275,264,274,299,281,0,278,268],
[281,287,280,273,285,290,278,273,0,261],
[274,323,306,295,279,299,296,283,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,282,245,283,278,274,265,279,269],
[288,0,282,270,284,285,275,270,280,270],
[269,269,0,259,264,276,260,281,283,303],
[306,281,292,0,277,287,269,281,306,281],
[268,267,287,274,0,286,287,270,274,279],
[273,266,275,264,265,0,277,269,265,260],
[277,276,291,282,264,274,0,266,284,268],
[286,281,270,270,281,282,285,0,284,278],
[272,271,268,245,277,286,267,267,0,279],
[282,281,248,270,272,291,283,273,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,271,273,274,277,262,276,274,268],
[291,0,276,280,259,288,284,272,290,271],
[280,275,0,286,262,274,288,281,276,264],
[278,271,265,0,276,269,266,297,265,272],
[277,292,289,275,0,273,270,278,269,275],
[274,263,277,282,278,0,270,279,281,276],
[289,267,263,285,281,281,0,286,279,276],
[275,279,270,254,273,272,265,0,266,267],
[277,261,275,286,282,270,272,285,0,282],
[283,280,287,279,276,275,275,284,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,254,242,309,285,276,259,273,260],
[307,0,291,258,299,266,280,276,284,266],
[297,260,0,266,314,248,298,230,290,271],
[309,293,285,0,297,299,301,256,311,283],
[242,252,237,254,0,270,261,245,255,256],
[266,285,303,252,281,0,285,250,312,300],
[275,271,253,250,290,266,0,244,272,263],
[292,275,321,295,306,301,307,0,319,288],
[278,267,261,240,296,239,279,232,0,263],
[291,285,280,268,295,251,288,263,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,268,274,261,274,264,286,274,257],
[261,0,251,268,292,285,291,280,298,272],
[283,300,0,264,306,280,286,284,301,274],
[277,283,287,0,290,275,276,282,279,271],
[290,259,245,261,0,275,279,274,285,254],
[277,266,271,276,276,0,273,285,284,268],
[287,260,265,275,272,278,0,296,299,277],
[265,271,267,269,277,266,255,0,291,261],
[277,253,250,272,266,267,252,260,0,271],
[294,279,277,280,297,283,274,290,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,250,280,243,266,248,274,250,256],
[277,0,272,268,289,274,276,298,232,278],
[301,279,0,253,278,291,268,268,248,253],
[271,283,298,0,274,280,268,294,236,273],
[308,262,273,277,0,285,235,287,252,279],
[285,277,260,271,266,0,269,291,266,266],
[303,275,283,283,316,282,0,270,247,293],
[277,253,283,257,264,260,281,0,280,236],
[301,319,303,315,299,285,304,271,0,277],
[295,273,298,278,272,285,258,315,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,277,268,251,267,272,314,258,245],
[305,0,250,316,316,298,316,347,333,270],
[274,301,0,291,296,272,306,324,255,279],
[283,235,260,0,250,312,255,321,241,237],
[300,235,255,301,0,296,271,297,249,267],
[284,253,279,239,255,0,261,312,275,283],
[279,235,245,296,280,290,0,310,281,237],
[237,204,227,230,254,239,241,0,228,213],
[293,218,296,310,302,276,270,323,0,258],
[306,281,272,314,284,268,314,338,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,218,215,219,246,205,289,213,233],
[372,0,286,288,248,296,295,319,262,238],
[333,265,0,264,281,319,333,317,288,291],
[336,263,287,0,291,287,299,326,265,259],
[332,303,270,260,0,312,296,335,295,300],
[305,255,232,264,239,0,291,298,222,202],
[346,256,218,252,255,260,0,296,283,255],
[262,232,234,225,216,253,255,0,267,255],
[338,289,263,286,256,329,268,284,0,272],
[318,313,260,292,251,349,296,296,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,263,270,270,271,262,270,271,265],
[273,0,282,278,291,287,274,292,266,279],
[288,269,0,268,262,285,267,269,258,268],
[281,273,283,0,282,276,266,279,275,264],
[281,260,289,269,0,280,274,285,283,265],
[280,264,266,275,271,0,253,266,266,275],
[289,277,284,285,277,298,0,274,277,267],
[281,259,282,272,266,285,277,0,269,284],
[280,285,293,276,268,285,274,282,0,279],
[286,272,283,287,286,276,284,267,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,262,258,263,288,255,269,260,273],
[283,0,276,285,274,317,273,299,288,260],
[289,275,0,263,262,283,273,267,247,259],
[293,266,288,0,255,286,271,285,228,257],
[288,277,289,296,0,298,278,270,298,258],
[263,234,268,265,253,0,259,265,236,267],
[296,278,278,280,273,292,0,285,276,274],
[282,252,284,266,281,286,266,0,248,250],
[291,263,304,323,253,315,275,303,0,296],
[278,291,292,294,293,284,277,301,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,243,220,273,305,250,281,235,269],
[313,0,282,319,306,295,274,300,293,290],
[308,269,0,257,304,308,308,299,294,302],
[331,232,294,0,273,292,301,312,241,290],
[278,245,247,278,0,335,327,289,256,299],
[246,256,243,259,216,0,281,277,241,236],
[301,277,243,250,224,270,0,265,280,248],
[270,251,252,239,262,274,286,0,286,250],
[316,258,257,310,295,310,271,265,0,276],
[282,261,249,261,252,315,303,301,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,289,278,287,344,269,308,316,281],
[253,0,236,289,250,287,230,278,196,270],
[262,315,0,313,295,286,285,303,262,279],
[273,262,238,0,273,257,202,265,290,281],
[264,301,256,278,0,273,201,301,260,269],
[207,264,265,294,278,0,258,276,254,297],
[282,321,266,349,350,293,0,298,384,379],
[243,273,248,286,250,275,253,0,283,271],
[235,355,289,261,291,297,167,268,0,320],
[270,281,272,270,282,254,172,280,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,252,289,282,153,218,278,312,217],
[319,0,316,370,363,302,232,321,308,336],
[299,235,0,338,320,257,242,353,300,261],
[262,181,213,0,214,166,141,279,189,237],
[269,188,231,337,0,230,285,336,286,279],
[398,249,294,385,321,0,296,343,317,370],
[333,319,309,410,266,255,0,327,337,333],
[273,230,198,272,215,208,224,0,258,223],
[239,243,251,362,265,234,214,293,0,268],
[334,215,290,314,272,181,218,328,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,286,266,259,263,253,261,273,267],
[284,0,274,277,263,265,276,262,264,263],
[265,277,0,264,264,256,275,262,270,262],
[285,274,287,0,262,268,272,268,277,291],
[292,288,287,289,0,278,282,286,275,280],
[288,286,295,283,273,0,277,279,289,270],
[298,275,276,279,269,274,0,257,284,266],
[290,289,289,283,265,272,294,0,281,289],
[278,287,281,274,276,262,267,270,0,275],
[284,288,289,260,271,281,285,262,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,269,260,280,272,257,297,275,277],
[299,0,304,300,289,304,285,290,315,270],
[282,247,0,281,257,256,272,275,263,270],
[291,251,270,0,266,258,261,262,285,261],
[271,262,294,285,0,284,276,275,308,276],
[279,247,295,293,267,0,279,281,285,270],
[294,266,279,290,275,272,0,285,288,260],
[254,261,276,289,276,270,266,0,282,275],
[276,236,288,266,243,266,263,269,0,251],
[274,281,281,290,275,281,291,276,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,285,258,261,278,266,281,294,278],
[272,0,268,247,262,253,265,261,266,262],
[266,283,0,256,266,261,272,294,281,275],
[293,304,295,0,296,273,283,308,293,287],
[290,289,285,255,0,259,269,292,274,277],
[273,298,290,278,292,0,289,294,287,283],
[285,286,279,268,282,262,0,283,280,285],
[270,290,257,243,259,257,268,0,264,266],
[257,285,270,258,277,264,271,287,0,271],
[273,289,276,264,274,268,266,285,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,295,281,288,292,301,280,299,274],
[279,0,271,277,277,282,269,267,267,251],
[256,280,0,263,272,255,269,271,265,273],
[270,274,288,0,265,289,276,264,276,290],
[263,274,279,286,0,290,281,267,287,258],
[259,269,296,262,261,0,280,272,269,267],
[250,282,282,275,270,271,0,262,275,256],
[271,284,280,287,284,279,289,0,277,277],
[252,284,286,275,264,282,276,274,0,246],
[277,300,278,261,293,284,295,274,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,275,288,288,287,279,281,275,286],
[265,0,275,266,273,283,261,281,265,273],
[276,276,0,278,273,272,264,283,269,283],
[263,285,273,0,274,276,256,275,269,257],
[263,278,278,277,0,269,257,283,264,277],
[264,268,279,275,282,0,262,287,284,264],
[272,290,287,295,294,289,0,295,278,286],
[270,270,268,276,268,264,256,0,282,275],
[276,286,282,282,287,267,273,269,0,271],
[265,278,268,294,274,287,265,276,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,281,279,291,270,269,286,266,290],
[286,0,288,296,282,265,294,301,277,279],
[270,263,0,299,276,254,290,285,269,270],
[272,255,252,0,260,242,239,260,257,263],
[260,269,275,291,0,291,263,293,268,266],
[281,286,297,309,260,0,299,301,286,270],
[282,257,261,312,288,252,0,281,273,283],
[265,250,266,291,258,250,270,0,259,280],
[285,274,282,294,283,265,278,292,0,277],
[261,272,281,288,285,281,268,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,234,236,223,261,234,263,248,227],
[349,0,291,255,293,293,294,288,276,283],
[317,260,0,243,247,287,241,265,239,238],
[315,296,308,0,260,326,278,260,249,250],
[328,258,304,291,0,286,295,278,267,252],
[290,258,264,225,265,0,217,244,252,238],
[317,257,310,273,256,334,0,279,289,278],
[288,263,286,291,273,307,272,0,271,294],
[303,275,312,302,284,299,262,280,0,277],
[324,268,313,301,299,313,273,257,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,248,251,283,279,286,273,269,260],
[264,0,275,276,287,261,274,248,291,288],
[303,276,0,303,322,275,286,316,299,293],
[300,275,248,0,290,326,290,243,269,305],
[268,264,229,261,0,241,263,243,266,252],
[272,290,276,225,310,0,294,254,290,284],
[265,277,265,261,288,257,0,279,264,252],
[278,303,235,308,308,297,272,0,321,297],
[282,260,252,282,285,261,287,230,0,274],
[291,263,258,246,299,267,299,254,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,277,290,257,287,267,283,274,277],
[289,0,276,289,269,279,266,281,263,274],
[274,275,0,288,259,287,283,284,264,281],
[261,262,263,0,258,285,273,271,252,272],
[294,282,292,293,0,288,288,308,272,292],
[264,272,264,266,263,0,259,292,253,257],
[284,285,268,278,263,292,0,285,283,279],
[268,270,267,280,243,259,266,0,260,277],
[277,288,287,299,279,298,268,291,0,276],
[274,277,270,279,259,294,272,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,276,258,276,277,267,275,270,280],
[284,0,258,263,271,289,303,291,267,273],
[275,293,0,271,283,273,288,284,279,287],
[293,288,280,0,275,301,295,283,296,284],
[275,280,268,276,0,291,291,272,279,274],
[274,262,278,250,260,0,283,263,277,270],
[284,248,263,256,260,268,0,268,260,267],
[276,260,267,268,279,288,283,0,279,277],
[281,284,272,255,272,274,291,272,0,279],
[271,278,264,267,277,281,284,274,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,284,300,282,293,275,277,281,287],
[256,0,288,281,304,292,283,281,289,279],
[267,263,0,294,305,293,293,285,283,279],
[251,270,257,0,279,292,271,264,281,272],
[269,247,246,272,0,272,270,266,258,253],
[258,259,258,259,279,0,262,270,271,288],
[276,268,258,280,281,289,0,277,277,272],
[274,270,266,287,285,281,274,0,288,274],
[270,262,268,270,293,280,274,263,0,281],
[264,272,272,279,298,263,279,277,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,279,292,269,323,297,307,287,311],
[267,0,274,264,229,284,278,268,261,266],
[272,277,0,283,280,311,301,303,291,278],
[259,287,268,0,235,271,273,266,269,290],
[282,322,271,316,0,340,318,286,294,323],
[228,267,240,280,211,0,277,285,243,297],
[254,273,250,278,233,274,0,291,238,279],
[244,283,248,285,265,266,260,0,247,259],
[264,290,260,282,257,308,313,304,0,289],
[240,285,273,261,228,254,272,292,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,283,287,261,235,271,263,263,285],
[306,0,294,299,308,256,296,288,276,267],
[268,257,0,289,277,291,270,263,255,283],
[264,252,262,0,296,253,285,286,244,269],
[290,243,274,255,0,247,286,268,265,269],
[316,295,260,298,304,0,303,283,288,292],
[280,255,281,266,265,248,0,272,260,287],
[288,263,288,265,283,268,279,0,255,287],
[288,275,296,307,286,263,291,296,0,305],
[266,284,268,282,282,259,264,264,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,300,284,272,289,267,314,302,271],
[250,0,304,238,236,228,247,259,255,273],
[251,247,0,245,244,274,257,251,273,267],
[267,313,306,0,284,254,280,282,295,297],
[279,315,307,267,0,279,272,267,274,286],
[262,323,277,297,272,0,263,296,282,285],
[284,304,294,271,279,288,0,268,308,319],
[237,292,300,269,284,255,283,0,287,296],
[249,296,278,256,277,269,243,264,0,264],
[280,278,284,254,265,266,232,255,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,285,250,247,253,250,251,244,271],
[239,0,274,236,248,270,245,230,246,257],
[266,277,0,240,222,255,261,254,265,269],
[301,315,311,0,280,254,268,267,282,306],
[304,303,329,271,0,286,280,284,284,284],
[298,281,296,297,265,0,292,259,279,308],
[301,306,290,283,271,259,0,276,275,295],
[300,321,297,284,267,292,275,0,290,291],
[307,305,286,269,267,272,276,261,0,264],
[280,294,282,245,267,243,256,260,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,320,264,267,279,258,250,269,277],
[270,0,265,257,280,272,273,268,292,257],
[231,286,0,224,282,276,275,267,271,273],
[287,294,327,0,281,270,275,272,297,276],
[284,271,269,270,0,244,274,264,279,280],
[272,279,275,281,307,0,279,245,264,315],
[293,278,276,276,277,272,0,259,284,305],
[301,283,284,279,287,306,292,0,309,273],
[282,259,280,254,272,287,267,242,0,301],
[274,294,278,275,271,236,246,278,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,273,273,235,284,295,272,219,261],
[269,0,289,235,257,314,262,269,247,278],
[278,262,0,284,267,303,301,318,275,275],
[278,316,267,0,244,304,272,322,259,311],
[316,294,284,307,0,231,265,289,299,264],
[267,237,248,247,320,0,300,286,264,258],
[256,289,250,279,286,251,0,267,248,241],
[279,282,233,229,262,265,284,0,243,249],
[332,304,276,292,252,287,303,308,0,293],
[290,273,276,240,287,293,310,302,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,299,264,282,274,266,299,283,286],
[283,0,313,269,268,265,278,312,287,296],
[252,238,0,252,266,228,256,272,253,255],
[287,282,299,0,266,266,286,287,309,294],
[269,283,285,285,0,297,285,290,283,309],
[277,286,323,285,254,0,263,294,276,300],
[285,273,295,265,266,288,0,284,290,279],
[252,239,279,264,261,257,267,0,269,253],
[268,264,298,242,268,275,261,282,0,265],
[265,255,296,257,242,251,272,298,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,307,289,298,271,290,281,258,293],
[259,0,266,265,294,253,281,260,277,279],
[244,285,0,271,292,261,273,261,255,278],
[262,286,280,0,286,257,283,263,260,283],
[253,257,259,265,0,250,255,239,249,248],
[280,298,290,294,301,0,313,276,269,303],
[261,270,278,268,296,238,0,260,269,278],
[270,291,290,288,312,275,291,0,262,295],
[293,274,296,291,302,282,282,289,0,286],
[258,272,273,268,303,248,273,256,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,291,267,274,270,276,303,269,272],
[271,0,293,269,267,276,278,299,257,265],
[260,258,0,259,265,254,256,278,245,257],
[284,282,292,0,295,263,280,289,278,273],
[277,284,286,256,0,259,261,309,271,257],
[281,275,297,288,292,0,284,317,272,287],
[275,273,295,271,290,267,0,293,259,273],
[248,252,273,262,242,234,258,0,248,257],
[282,294,306,273,280,279,292,303,0,287],
[279,286,294,278,294,264,278,294,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,289,275,278,289,285,290,266,287],
[285,0,305,291,280,286,284,291,270,273],
[262,246,0,279,259,271,251,278,255,255],
[276,260,272,0,265,280,274,272,260,281],
[273,271,292,286,0,282,266,285,277,279],
[262,265,280,271,269,0,286,274,270,276],
[266,267,300,277,285,265,0,283,279,277],
[261,260,273,279,266,277,268,0,262,270],
[285,281,296,291,274,281,272,289,0,279],
[264,278,296,270,272,275,274,281,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,290,303,278,259,277,297,286,279],
[262,0,254,249,234,244,285,270,264,268],
[261,297,0,273,264,246,290,289,258,289],
[248,302,278,0,278,285,314,296,263,286],
[273,317,287,273,0,264,298,301,274,296],
[292,307,305,266,287,0,298,306,280,290],
[274,266,261,237,253,253,0,281,244,269],
[254,281,262,255,250,245,270,0,261,253],
[265,287,293,288,277,271,307,290,0,272],
[272,283,262,265,255,261,282,298,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,273,274,276,266,276,280,254,258],
[273,0,273,278,268,287,276,291,262,277],
[278,278,0,275,286,286,278,293,270,258],
[277,273,276,0,269,267,271,290,259,275],
[275,283,265,282,0,274,270,282,252,244],
[285,264,265,284,277,0,279,314,268,275],
[275,275,273,280,281,272,0,276,264,255],
[271,260,258,261,269,237,275,0,258,233],
[297,289,281,292,299,283,287,293,0,271],
[293,274,293,276,307,276,296,318,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,281,286,278,296,274,290,295,280],
[267,0,303,285,299,306,286,283,292,293],
[270,248,0,299,292,268,278,260,287,277],
[265,266,252,0,277,267,263,272,280,287],
[273,252,259,274,0,286,271,263,278,277],
[255,245,283,284,265,0,262,261,290,252],
[277,265,273,288,280,289,0,261,280,287],
[261,268,291,279,288,290,290,0,288,274],
[256,259,264,271,273,261,271,263,0,255],
[271,258,274,264,274,299,264,277,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,270,291,272,306,286,296,286,288],
[246,0,273,275,276,293,275,262,281,280],
[281,278,0,279,271,291,262,275,281,254],
[260,276,272,0,265,293,264,274,284,306],
[279,275,280,286,0,307,285,283,277,299],
[245,258,260,258,244,0,237,249,281,272],
[265,276,289,287,266,314,0,301,289,295],
[255,289,276,277,268,302,250,0,292,306],
[265,270,270,267,274,270,262,259,0,286],
[263,271,297,245,252,279,256,245,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,279,276,247,282,243,289,263,249],
[279,0,270,275,273,261,275,297,265,253],
[272,281,0,265,278,265,253,290,250,269],
[275,276,286,0,277,275,260,299,264,279],
[304,278,273,274,0,278,273,282,260,255],
[269,290,286,276,273,0,279,292,272,268],
[308,276,298,291,278,272,0,284,272,274],
[262,254,261,252,269,259,267,0,266,257],
[288,286,301,287,291,279,279,285,0,263],
[302,298,282,272,296,283,277,294,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,248,258,258,254,262,279,272,261],
[287,0,281,277,285,282,267,285,282,277],
[303,270,0,265,279,282,280,289,286,278],
[293,274,286,0,293,289,272,309,280,273],
[293,266,272,258,0,265,268,291,283,264],
[297,269,269,262,286,0,270,292,293,270],
[289,284,271,279,283,281,0,293,279,281],
[272,266,262,242,260,259,258,0,252,256],
[279,269,265,271,268,258,272,299,0,274],
[290,274,273,278,287,281,270,295,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,293,284,290,269,266,275,274,265],
[287,0,292,286,303,281,289,292,299,270],
[258,259,0,275,279,271,261,263,268,262],
[267,265,276,0,281,251,246,270,269,261],
[261,248,272,270,0,259,247,273,281,284],
[282,270,280,300,292,0,252,299,275,269],
[285,262,290,305,304,299,0,278,291,275],
[276,259,288,281,278,252,273,0,275,275],
[277,252,283,282,270,276,260,276,0,276],
[286,281,289,290,267,282,276,276,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,266,285,285,310,300,296,286,312],
[273,0,250,296,301,305,303,297,298,291],
[285,301,0,272,298,300,290,280,299,288],
[266,255,279,0,306,285,288,280,288,296],
[266,250,253,245,0,264,276,263,267,280],
[241,246,251,266,287,0,268,292,272,285],
[251,248,261,263,275,283,0,270,249,283],
[255,254,271,271,288,259,281,0,248,274],
[265,253,252,263,284,279,302,303,0,285],
[239,260,263,255,271,266,268,277,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,280,237,274,254,302,274,263,251],
[313,0,293,272,300,254,307,285,263,253],
[271,258,0,268,273,237,293,239,266,230],
[314,279,283,0,298,248,288,255,289,257],
[277,251,278,253,0,250,294,261,244,291],
[297,297,314,303,301,0,324,289,258,301],
[249,244,258,263,257,227,0,246,242,262],
[277,266,312,296,290,262,305,0,269,263],
[288,288,285,262,307,293,309,282,0,279],
[300,298,321,294,260,250,289,288,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,292,281,263,283,287,277,267,294],
[254,0,276,270,266,294,273,274,259,283],
[259,275,0,301,259,282,271,270,283,284],
[270,281,250,0,272,277,276,280,264,263],
[288,285,292,279,0,292,275,285,290,282],
[268,257,269,274,259,0,274,265,243,251],
[264,278,280,275,276,277,0,286,287,281],
[274,277,281,271,266,286,265,0,266,284],
[284,292,268,287,261,308,264,285,0,289],
[257,268,267,288,269,300,270,267,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,252,304,252,304,151,452,303,252],
[399,0,302,303,352,251,301,300,349,348],
[299,249,0,299,247,301,248,351,299,249],
[247,248,252,0,250,250,198,301,250,248],
[299,199,304,301,0,351,248,351,351,249],
[247,300,250,301,200,0,151,300,149,350],
[400,250,303,353,303,400,0,402,351,300],
[99,251,200,250,200,251,149,0,149,251],
[248,202,252,301,200,402,200,402,0,449],
[299,203,302,303,302,201,251,300,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,286,276,254,280,268,277,268,255],
[263,0,264,281,257,271,232,264,262,266],
[265,287,0,281,262,267,279,279,241,254],
[275,270,270,0,250,271,262,276,261,263],
[297,294,289,301,0,296,267,267,288,250],
[271,280,284,280,255,0,272,281,257,266],
[283,319,272,289,284,279,0,282,278,287],
[274,287,272,275,284,270,269,0,259,265],
[283,289,310,290,263,294,273,292,0,268],
[296,285,297,288,301,285,264,286,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,274,275,268,285,268,264,269,279],
[260,0,248,245,266,271,247,246,257,274],
[277,303,0,286,275,295,283,279,283,296],
[276,306,265,0,278,292,268,283,293,293],
[283,285,276,273,0,279,263,267,264,284],
[266,280,256,259,272,0,250,245,245,256],
[283,304,268,283,288,301,0,278,278,291],
[287,305,272,268,284,306,273,0,277,286],
[282,294,268,258,287,306,273,274,0,289],
[272,277,255,258,267,295,260,265,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,260,273,285,268,270,280,277,279],
[266,0,269,274,302,268,258,274,287,277],
[291,282,0,269,279,266,268,292,259,297],
[278,277,282,0,290,277,286,272,278,279],
[266,249,272,261,0,257,261,300,267,263],
[283,283,285,274,294,0,269,296,280,262],
[281,293,283,265,290,282,0,299,265,281],
[271,277,259,279,251,255,252,0,255,274],
[274,264,292,273,284,271,286,296,0,286],
[272,274,254,272,288,289,270,277,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,366,366,366,275,366,273,366,367,366],
[185,0,274,273,275,91,273,365,366,91],
[185,277,0,276,370,276,277,367,369,368],
[185,278,275,0,367,369,275,460,368,278],
[276,276,181,184,0,184,274,458,366,184],
[185,460,275,182,367,0,182,367,275,182],
[278,278,274,276,277,369,0,551,369,276],
[185,186,184,91,93,184,0,0,276,91],
[184,185,182,183,185,276,182,275,0,92],
[185,460,183,273,367,369,275,460,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,286,297,284,273,277,268,273,274],
[268,0,270,292,300,265,274,257,268,274],
[265,281,0,304,301,260,270,276,265,260],
[254,259,247,0,266,247,246,237,235,235],
[267,251,250,285,0,243,266,233,265,236],
[278,286,291,304,308,0,281,269,267,280],
[274,277,281,305,285,270,0,274,264,265],
[283,294,275,314,318,282,277,0,284,301],
[278,283,286,316,286,284,287,267,0,282],
[277,277,291,316,315,271,286,250,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,274,274,271,262,275,258,298],
[278,0,245,267,282,250,250,273,246,259],
[275,306,0,300,297,287,295,295,287,300],
[277,284,251,0,303,257,267,281,240,291],
[277,269,254,248,0,266,274,244,251,279],
[280,301,264,294,285,0,276,293,268,306],
[289,301,256,284,277,275,0,276,269,289],
[276,278,256,270,307,258,275,0,246,306],
[293,305,264,311,300,283,282,305,0,318],
[253,292,251,260,272,245,262,245,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,266,265,259,267,248,256,254,274],
[301,0,267,295,259,283,280,276,269,282],
[285,284,0,284,275,260,282,246,249,255],
[286,256,267,0,256,257,262,243,250,259],
[292,292,276,295,0,284,290,268,267,277],
[284,268,291,294,267,0,292,276,254,295],
[303,271,269,289,261,259,0,275,279,273],
[295,275,305,308,283,275,276,0,277,277],
[297,282,302,301,284,297,272,274,0,285],
[277,269,296,292,274,256,278,274,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,274,271,249,282,277,276,255,256],
[289,0,250,283,272,291,286,261,289,270],
[277,301,0,291,268,279,292,318,288,282],
[280,268,260,0,244,289,300,276,262,263],
[302,279,283,307,0,291,293,270,271,295],
[269,260,272,262,260,0,297,255,269,258],
[274,265,259,251,258,254,0,259,244,256],
[275,290,233,275,281,296,292,0,275,267],
[296,262,263,289,280,282,307,276,0,285],
[295,281,269,288,256,293,295,284,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,262,277,277,268,301,279,285,279],
[289,0,278,274,259,328,329,312,304,317],
[289,273,0,292,279,280,320,286,344,317],
[274,277,259,0,241,287,298,272,293,315],
[274,292,272,310,0,337,272,318,319,304],
[283,223,271,264,214,0,272,260,323,272],
[250,222,231,253,279,279,0,273,295,305],
[272,239,265,279,233,291,278,0,298,286],
[266,247,207,258,232,228,256,253,0,272],
[272,234,234,236,247,279,246,265,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,266,291,278,288,279,286,305,305],
[287,0,298,273,305,307,268,273,303,294],
[285,253,0,303,292,284,286,291,310,277],
[260,278,248,0,308,257,272,258,297,265],
[273,246,259,243,0,290,286,268,301,254],
[263,244,267,294,261,0,290,262,299,281],
[272,283,265,279,265,261,0,305,306,265],
[265,278,260,293,283,289,246,0,312,265],
[246,248,241,254,250,252,245,239,0,243],
[246,257,274,286,297,270,286,286,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,288,263,300,247,259,291,283,242],
[324,0,302,314,343,260,309,304,302,281],
[263,249,0,328,313,266,273,290,295,277],
[288,237,223,0,326,248,261,268,274,251],
[251,208,238,225,0,224,226,253,246,228],
[304,291,285,303,327,0,267,282,311,293],
[292,242,278,290,325,284,0,280,285,281],
[260,247,261,283,298,269,271,0,315,275],
[268,249,256,277,305,240,266,236,0,262],
[309,270,274,300,323,258,270,276,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,266,331,286,317,306,281,292,290],
[261,0,239,294,257,284,278,293,278,225],
[285,312,0,288,303,322,257,268,308,236],
[220,257,263,0,260,279,246,254,269,212],
[265,294,248,291,0,287,268,236,268,219],
[234,267,229,272,264,0,248,251,248,220],
[245,273,294,305,283,303,0,247,291,242],
[270,258,283,297,315,300,304,0,314,264],
[259,273,243,282,283,303,260,237,0,226],
[261,326,315,339,332,331,309,287,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,273,278,276,273,264,260,288,283],
[286,0,285,275,274,271,293,273,285,309],
[278,266,0,287,279,282,290,272,289,279],
[273,276,264,0,264,261,272,279,272,288],
[275,277,272,287,0,265,281,274,298,289],
[278,280,269,290,286,0,283,281,300,306],
[287,258,261,279,270,268,0,281,296,292],
[291,278,279,272,277,270,270,0,300,299],
[263,266,262,279,253,251,255,251,0,289],
[268,242,272,263,262,245,259,252,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,272,287,265,277,259,264,268,274],
[292,0,282,296,295,289,266,288,290,289],
[279,269,0,286,260,269,270,271,258,276],
[264,255,265,0,260,253,246,264,273,248],
[286,256,291,291,0,276,277,256,290,286],
[274,262,282,298,275,0,268,268,284,274],
[292,285,281,305,274,283,0,259,274,295],
[287,263,280,287,295,283,292,0,277,281],
[283,261,293,278,261,267,277,274,0,276],
[277,262,275,303,265,277,256,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,288,269,282,247,259,275,286,285],
[287,0,289,256,268,259,257,275,282,293],
[263,262,0,248,294,259,243,280,296,275],
[282,295,303,0,288,269,274,276,288,274],
[269,283,257,263,0,279,260,295,288,291],
[304,292,292,282,272,0,279,294,292,285],
[292,294,308,277,291,272,0,271,286,298],
[276,276,271,275,256,257,280,0,287,282],
[265,269,255,263,263,259,265,264,0,278],
[266,258,276,277,260,266,253,269,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,282,288,315,268,267,298,254,249],
[284,0,279,284,292,265,277,249,285,257],
[269,272,0,287,304,275,272,242,272,275],
[263,267,264,0,290,280,268,304,268,239],
[236,259,247,261,0,277,250,210,257,252],
[283,286,276,271,274,0,246,260,287,294],
[284,274,279,283,301,305,0,293,271,284],
[253,302,309,247,341,291,258,0,283,281],
[297,266,279,283,294,264,280,268,0,268],
[302,294,276,312,299,257,267,270,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,244,252,270,241,222,241,248,220],
[317,0,297,284,309,284,276,282,305,270],
[307,254,0,283,283,272,258,269,273,268],
[299,267,268,0,278,264,271,265,265,256],
[281,242,268,273,0,260,254,261,279,250],
[310,267,279,287,291,0,267,281,286,265],
[329,275,293,280,297,284,0,265,300,265],
[310,269,282,286,290,270,286,0,301,276],
[303,246,278,286,272,265,251,250,0,253],
[331,281,283,295,301,286,286,275,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,375,319,346,316,306,262,333,341],
[233,0,307,275,302,259,316,220,264,327],
[176,244,0,220,217,217,176,232,289,234],
[232,276,331,0,287,286,317,262,361,300],
[205,249,334,264,0,219,262,250,289,298],
[235,292,334,265,332,0,281,289,291,274],
[245,235,375,234,289,270,0,234,344,300],
[289,331,319,289,301,262,317,0,373,285],
[218,287,262,190,262,260,207,178,0,301],
[210,224,317,251,253,277,251,266,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,280,287,260,290,244,290,266,260],
[259,0,255,260,232,270,230,246,251,246],
[271,296,0,279,275,296,245,267,267,265],
[264,291,272,0,269,292,255,250,255,252],
[291,319,276,282,0,318,270,292,281,276],
[261,281,255,259,233,0,221,206,238,232],
[307,321,306,296,281,330,0,271,314,299],
[261,305,284,301,259,345,280,0,259,285],
[285,300,284,296,270,313,237,292,0,262],
[291,305,286,299,275,319,252,266,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,259,253,286,293,248,279,274,246],
[260,0,273,251,294,304,253,264,276,245],
[292,278,0,255,267,296,303,282,276,273],
[298,300,296,0,319,311,264,287,307,277],
[265,257,284,232,0,289,255,260,286,248],
[258,247,255,240,262,0,278,251,260,256],
[303,298,248,287,296,273,0,275,280,282],
[272,287,269,264,291,300,276,0,276,275],
[277,275,275,244,265,291,271,275,0,240],
[305,306,278,274,303,295,269,276,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,309,258,289,272,315,261,281,289],
[270,0,270,268,291,279,309,245,294,302],
[242,281,0,263,275,244,296,267,279,302],
[293,283,288,0,300,276,322,271,290,308],
[262,260,276,251,0,243,304,274,282,272],
[279,272,307,275,308,0,305,301,296,294],
[236,242,255,229,247,246,0,252,263,264],
[290,306,284,280,277,250,299,0,274,291],
[270,257,272,261,269,255,288,277,0,304],
[262,249,249,243,279,257,287,260,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,284,271,296,290,267,274,263,259],
[304,0,288,280,308,273,289,300,296,261],
[267,263,0,258,304,272,278,281,282,249],
[280,271,293,0,315,297,276,290,285,254],
[255,243,247,236,0,279,253,254,241,229],
[261,278,279,254,272,0,253,277,280,264],
[284,262,273,275,298,298,0,295,277,281],
[277,251,270,261,297,274,256,0,253,251],
[288,255,269,266,310,271,274,298,0,235],
[292,290,302,297,322,287,270,300,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,269,283,281,251,277,264,261,279],
[294,0,269,281,286,268,277,275,259,276],
[282,282,0,283,279,269,277,288,262,268],
[268,270,268,0,272,244,262,259,239,267],
[270,265,272,279,0,264,273,264,257,268],
[300,283,282,307,287,0,304,267,281,274],
[274,274,274,289,278,247,0,257,269,281],
[287,276,263,292,287,284,294,0,264,288],
[290,292,289,312,294,270,282,287,0,289],
[272,275,283,284,283,277,270,263,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,277,273,273,277,276,413,413,277],
[138,0,277,137,0,140,140,276,278,0],
[274,274,0,274,274,276,414,414,414,274],
[278,414,277,0,414,140,414,414,414,278],
[278,551,277,137,0,140,278,414,278,277],
[274,411,275,411,411,0,414,551,551,275],
[275,411,137,137,273,137,0,411,275,137],
[138,275,137,137,137,0,140,0,275,137],
[138,273,137,137,273,0,276,276,0,137],
[274,551,277,273,274,276,414,414,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,284,294,279,294,274,285,291,283],
[266,0,263,273,272,275,255,267,268,280],
[267,288,0,275,283,282,279,277,294,281],
[257,278,276,0,266,286,263,285,270,292],
[272,279,268,285,0,278,276,276,276,286],
[257,276,269,265,273,0,271,285,264,288],
[277,296,272,288,275,280,0,289,279,283],
[266,284,274,266,275,266,262,0,276,284],
[260,283,257,281,275,287,272,275,0,282],
[268,271,270,259,265,263,268,267,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,287,274,278,277,281,281,279,274],
[272,0,272,266,258,276,264,267,259,251],
[264,279,0,245,256,261,264,258,264,246],
[277,285,306,0,281,261,298,272,275,268],
[273,293,295,270,0,273,291,279,284,272],
[274,275,290,290,278,0,286,261,271,267],
[270,287,287,253,260,265,0,240,268,247],
[270,284,293,279,272,290,311,0,283,273],
[272,292,287,276,267,280,283,268,0,280],
[277,300,305,283,279,284,304,278,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,260,276,233,245,275,271,252,239],
[317,0,306,261,240,263,280,299,264,275],
[291,245,0,271,238,224,285,284,266,259],
[275,290,280,0,265,250,271,289,261,286],
[318,311,313,286,0,265,275,295,295,272],
[306,288,327,301,286,0,286,318,267,303],
[276,271,266,280,276,265,0,281,247,276],
[280,252,267,262,256,233,270,0,247,239],
[299,287,285,290,256,284,304,304,0,298],
[312,276,292,265,279,248,275,312,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,294,318,265,291,285,320,287,307],
[262,0,269,281,245,264,266,302,257,280],
[257,282,0,287,264,288,267,298,240,295],
[233,270,264,0,274,268,271,295,267,292],
[286,306,287,277,0,251,272,294,231,301],
[260,287,263,283,300,0,279,304,250,290],
[266,285,284,280,279,272,0,321,274,311],
[231,249,253,256,257,247,230,0,239,283],
[264,294,311,284,320,301,277,312,0,332],
[244,271,256,259,250,261,240,268,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,286,285,288,318,280,269,307,311],
[236,0,273,231,258,286,261,259,252,278],
[265,278,0,257,287,301,298,274,276,308],
[266,320,294,0,306,326,302,277,301,321],
[263,293,264,245,0,303,289,268,263,319],
[233,265,250,225,248,0,274,232,233,280],
[271,290,253,249,262,277,0,274,278,291],
[282,292,277,274,283,319,277,0,263,286],
[244,299,275,250,288,318,273,288,0,309],
[240,273,243,230,232,271,260,265,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,262,261,261,268,278,280,253,267],
[282,0,272,278,264,288,265,266,273,288],
[289,279,0,288,282,279,277,285,266,274],
[290,273,263,0,274,273,283,264,267,274],
[290,287,269,277,0,260,292,277,267,282],
[283,263,272,278,291,0,292,272,273,278],
[273,286,274,268,259,259,0,269,247,271],
[271,285,266,287,274,279,282,0,277,281],
[298,278,285,284,284,278,304,274,0,283],
[284,263,277,277,269,273,280,270,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,241,262,241,267,277,253,282,224],
[284,0,267,273,247,294,258,277,286,251],
[310,284,0,270,248,260,299,261,311,281],
[289,278,281,0,239,274,280,283,281,266],
[310,304,303,312,0,293,310,272,307,273],
[284,257,291,277,258,0,273,267,283,256],
[274,293,252,271,241,278,0,258,310,272],
[298,274,290,268,279,284,293,0,288,265],
[269,265,240,270,244,268,241,263,0,220],
[327,300,270,285,278,295,279,286,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,265,272,260,268,256,270,280,273],
[287,0,281,282,269,269,269,285,295,274],
[286,270,0,279,265,272,274,289,284,286],
[279,269,272,0,273,279,274,276,281,282],
[291,282,286,278,0,275,273,277,300,285],
[283,282,279,272,276,0,277,299,307,283],
[295,282,277,277,278,274,0,269,273,291],
[281,266,262,275,274,252,282,0,279,275],
[271,256,267,270,251,244,278,272,0,267],
[278,277,265,269,266,268,260,276,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,304,260,246,268,293,272,290,283],
[266,0,272,277,235,242,265,295,277,304],
[247,279,0,238,212,254,272,247,270,270],
[291,274,313,0,261,272,281,309,312,336],
[305,316,339,290,0,272,292,309,315,297],
[283,309,297,279,279,0,267,290,276,284],
[258,286,279,270,259,284,0,283,263,305],
[279,256,304,242,242,261,268,0,262,271],
[261,274,281,239,236,275,288,289,0,292],
[268,247,281,215,254,267,246,280,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,269,254,293,300,285,277,280,265],
[269,0,299,242,289,277,270,274,280,258],
[282,252,0,258,269,265,256,268,274,259],
[297,309,293,0,291,299,286,275,272,288],
[258,262,282,260,0,276,250,257,242,257],
[251,274,286,252,275,0,264,291,269,290],
[266,281,295,265,301,287,0,283,273,259],
[274,277,283,276,294,260,268,0,264,269],
[271,271,277,279,309,282,278,287,0,257],
[286,293,292,263,294,261,292,282,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,286,292,302,288,273,286,290,309],
[256,0,259,286,282,270,252,260,280,269],
[265,292,0,286,278,277,278,267,287,289],
[259,265,265,0,261,253,254,266,267,273],
[249,269,273,290,0,260,275,268,274,279],
[263,281,274,298,291,0,284,277,279,294],
[278,299,273,297,276,267,0,274,280,282],
[265,291,284,285,283,274,277,0,284,274],
[261,271,264,284,277,272,271,267,0,282],
[242,282,262,278,272,257,269,277,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,366,367,319,272,368,414,368,276,367],
[185,0,324,324,276,231,278,324,281,326],
[184,227,0,273,272,272,318,229,230,279],
[232,227,278,0,319,321,321,279,278,372],
[279,275,279,232,0,232,325,279,327,373],
[183,320,279,230,319,0,320,279,231,278],
[137,273,233,230,226,231,0,186,186,185],
[183,227,322,272,272,272,365,0,276,231],
[275,270,321,273,224,320,365,275,0,183],
[184,225,272,179,178,273,366,320,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,282,270,278,259,288,285,289,286],
[280,0,277,277,275,258,285,287,294,284],
[269,274,0,264,272,269,281,289,266,271],
[281,274,287,0,282,268,281,274,276,293],
[273,276,279,269,0,266,269,276,270,265],
[292,293,282,283,285,0,269,289,273,279],
[263,266,270,270,282,282,0,280,266,278],
[266,264,262,277,275,262,271,0,272,292],
[262,257,285,275,281,278,285,279,0,286],
[265,267,280,258,286,272,273,259,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,298,256,340,255,254,383,257,215],
[340,0,210,296,254,253,256,340,340,296],
[253,341,0,297,341,379,211,297,256,296],
[295,255,254,0,213,296,253,295,254,297],
[211,297,210,338,0,295,169,296,170,209],
[296,298,172,255,256,0,254,296,214,213],
[297,295,340,298,382,297,0,342,211,299],
[168,211,254,256,255,255,209,0,169,213],
[294,211,295,297,381,337,340,382,0,298],
[336,255,255,254,342,338,252,338,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,250,203,218,171,270,188,220,268],
[300,0,281,251,269,282,329,283,378,298],
[301,270,0,256,206,189,304,252,271,285],
[348,300,295,0,268,234,348,270,315,252],
[333,282,345,283,0,251,347,297,317,331],
[380,269,362,317,300,0,367,285,315,362],
[281,222,247,203,204,184,0,204,205,204],
[363,268,299,281,254,266,347,0,270,301],
[331,173,280,236,234,236,346,281,0,268],
[283,253,266,299,220,189,347,250,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,288,293,272,286,272,271,276],
[268,0,283,275,268,243,279,236,264,261],
[278,268,0,276,285,280,269,277,267,277],
[263,276,275,0,279,266,291,262,282,268],
[258,283,266,272,0,263,280,281,259,264],
[279,308,271,285,288,0,300,277,284,284],
[265,272,282,260,271,251,0,274,235,258],
[279,315,274,289,270,274,277,0,302,286],
[280,287,284,269,292,267,316,249,0,264],
[275,290,274,283,287,267,293,265,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,265,273,275,307,292,281,294,276],
[268,0,260,251,279,291,261,273,289,266],
[286,291,0,275,272,314,288,309,294,289],
[278,300,276,0,272,326,280,292,285,278],
[276,272,279,279,0,296,285,296,297,277],
[244,260,237,225,255,0,243,258,261,256],
[259,290,263,271,266,308,0,289,284,286],
[270,278,242,259,255,293,262,0,259,246],
[257,262,257,266,254,290,267,292,0,267],
[275,285,262,273,274,295,265,305,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,263,257,283,297,275,286,284,271],
[292,0,289,270,301,291,293,303,278,290],
[288,262,0,284,292,297,268,271,285,273],
[294,281,267,0,308,293,271,295,273,272],
[268,250,259,243,0,271,256,280,266,248],
[254,260,254,258,280,0,272,266,276,251],
[276,258,283,280,295,279,0,269,272,272],
[265,248,280,256,271,285,282,0,256,256],
[267,273,266,278,285,275,279,295,0,261],
[280,261,278,279,303,300,279,295,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,253,257,274,277,292,278,281,280],
[251,0,277,258,261,285,290,265,285,284],
[298,274,0,276,279,255,278,265,287,282],
[294,293,275,0,289,285,302,270,279,295],
[277,290,272,262,0,262,300,282,271,276],
[274,266,296,266,289,0,303,275,285,280],
[259,261,273,249,251,248,0,243,241,269],
[273,286,286,281,269,276,308,0,270,284],
[270,266,264,272,280,266,310,281,0,278],
[271,267,269,256,275,271,282,267,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,280,282,272,263,276,281,256,270],
[274,0,292,265,253,271,269,256,248,271],
[271,259,0,262,249,266,262,259,265,256],
[269,286,289,0,283,264,292,259,266,258],
[279,298,302,268,0,278,272,263,274,275],
[288,280,285,287,273,0,285,288,258,285],
[275,282,289,259,279,266,0,264,249,279],
[270,295,292,292,288,263,287,0,286,263],
[295,303,286,285,277,293,302,265,0,286],
[281,280,295,293,276,266,272,288,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,265,244,231,241,251,266,211,261],
[311,0,223,264,194,265,203,228,256,262],
[286,328,0,307,258,318,282,287,251,325],
[307,287,244,0,235,246,287,280,282,285],
[320,357,293,316,0,310,316,263,299,272],
[310,286,233,305,241,0,240,264,245,240],
[300,348,269,264,235,311,0,268,236,287],
[285,323,264,271,288,287,283,0,265,279],
[340,295,300,269,252,306,315,286,0,328],
[290,289,226,266,279,311,264,272,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,250,235,248,223,256,231,218,225],
[322,0,294,265,259,278,290,276,250,267],
[301,257,0,250,272,258,262,256,244,266],
[316,286,301,0,290,280,283,291,255,254],
[303,292,279,261,0,290,305,273,270,283],
[328,273,293,271,261,0,308,268,290,282],
[295,261,289,268,246,243,0,254,267,243],
[320,275,295,260,278,283,297,0,271,257],
[333,301,307,296,281,261,284,280,0,264],
[326,284,285,297,268,269,308,294,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,272,287,340,258,309,278,304,285],
[250,0,276,252,296,250,251,259,261,259],
[279,275,0,282,283,256,278,249,288,268],
[264,299,269,0,316,283,268,264,283,298],
[211,255,268,235,0,220,259,243,239,238],
[293,301,295,268,331,0,307,277,316,318],
[242,300,273,283,292,244,0,257,308,298],
[273,292,302,287,308,274,294,0,306,301],
[247,290,263,268,312,235,243,245,0,269],
[266,292,283,253,313,233,253,250,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,280,278,287,268,296,266,265,253],
[253,0,269,252,276,261,277,250,261,262],
[271,282,0,285,276,263,269,251,259,278],
[273,299,266,0,287,259,273,275,253,289],
[264,275,275,264,0,278,253,286,251,254],
[283,290,288,292,273,0,276,283,281,282],
[255,274,282,278,298,275,0,252,253,262],
[285,301,300,276,265,268,299,0,269,286],
[286,290,292,298,300,270,298,282,0,269],
[298,289,273,262,297,269,289,265,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,275,268,292,253,250,253,247],
[260,0,268,279,268,296,277,260,270,284],
[272,283,0,266,282,281,255,267,278,254],
[276,272,285,0,278,274,273,255,274,267],
[283,283,269,273,0,273,271,268,251,267],
[259,255,270,277,278,0,250,263,259,269],
[298,274,296,278,280,301,0,270,273,265],
[301,291,284,296,283,288,281,0,257,272],
[298,281,273,277,300,292,278,294,0,299],
[304,267,297,284,284,282,286,279,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,256,234,293,267,226,276,268,285],
[229,0,254,221,307,280,192,270,227,268],
[295,297,0,269,344,322,201,304,281,298],
[317,330,282,0,334,327,253,286,290,289],
[258,244,207,217,0,254,177,272,219,262],
[284,271,229,224,297,0,208,260,185,296],
[325,359,350,298,374,343,0,327,250,340],
[275,281,247,265,279,291,224,0,256,288],
[283,324,270,261,332,366,301,295,0,306],
[266,283,253,262,289,255,211,263,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,271,241,223,259,262,267,267,227],
[268,0,261,283,270,231,295,274,228,282],
[280,290,0,304,260,270,292,319,254,261],
[310,268,247,0,246,272,314,254,264,234],
[328,281,291,305,0,304,284,281,286,238],
[292,320,281,279,247,0,294,285,268,291],
[289,256,259,237,267,257,0,277,244,260],
[284,277,232,297,270,266,274,0,257,237],
[284,323,297,287,265,283,307,294,0,285],
[324,269,290,317,313,260,291,314,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,261,258,310,266,281,263,289,295],
[285,0,269,260,292,267,287,264,296,284],
[290,282,0,268,279,279,306,278,299,288],
[293,291,283,0,305,272,294,293,329,303],
[241,259,272,246,0,268,257,262,298,285],
[285,284,272,279,283,0,276,269,285,305],
[270,264,245,257,294,275,0,264,281,281],
[288,287,273,258,289,282,287,0,299,292],
[262,255,252,222,253,266,270,252,0,265],
[256,267,263,248,266,246,270,259,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,292,277,297,259,285,291,279,275],
[275,0,286,277,283,249,289,267,274,265],
[259,265,0,261,266,234,265,276,251,262],
[274,274,290,0,299,283,299,298,290,290],
[254,268,285,252,0,242,273,280,262,271],
[292,302,317,268,309,0,290,313,288,309],
[266,262,286,252,278,261,0,278,273,268],
[260,284,275,253,271,238,273,0,266,264],
[272,277,300,261,289,263,278,285,0,294],
[276,286,289,261,280,242,283,287,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,271,298,278,306,293,306,289,337],
[254,0,291,298,248,277,283,306,261,302],
[280,260,0,302,264,308,274,296,247,308],
[253,253,249,0,281,262,267,296,282,304],
[273,303,287,270,0,306,286,314,316,315],
[245,274,243,289,245,0,275,288,271,288],
[258,268,277,284,265,276,0,318,252,290],
[245,245,255,255,237,263,233,0,267,301],
[262,290,304,269,235,280,299,284,0,323],
[214,249,243,247,236,263,261,250,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,278,261,289,282,294,281,275,291],
[254,0,296,278,261,241,283,253,271,257],
[273,255,0,273,255,276,264,252,247,238],
[290,273,278,0,313,311,305,296,272,275],
[262,290,296,238,0,291,290,261,275,267],
[269,310,275,240,260,0,302,250,261,275],
[257,268,287,246,261,249,0,257,261,277],
[270,298,299,255,290,301,294,0,285,285],
[276,280,304,279,276,290,290,266,0,283],
[260,294,313,276,284,276,274,266,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,301,294,306,300,265,260,297,274],
[235,0,283,247,268,257,240,226,296,231],
[250,268,0,269,274,262,268,248,289,238],
[257,304,282,0,296,267,313,275,287,279],
[245,283,277,255,0,262,276,245,289,257],
[251,294,289,284,289,0,288,288,291,277],
[286,311,283,238,275,263,0,294,286,264],
[291,325,303,276,306,263,257,0,295,289],
[254,255,262,264,262,260,265,256,0,259],
[277,320,313,272,294,274,287,262,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,293,275,265,255,253,267,258,281],
[292,0,294,294,273,277,284,277,268,282],
[258,257,0,253,270,284,260,254,247,258],
[276,257,298,0,237,290,278,270,270,281],
[286,278,281,314,0,273,274,288,281,322],
[296,274,267,261,278,0,269,301,253,300],
[298,267,291,273,277,282,0,289,261,292],
[284,274,297,281,263,250,262,0,262,293],
[293,283,304,281,270,298,290,289,0,281],
[270,269,293,270,229,251,259,258,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,279,271,267,277,280,263,280,264],
[258,0,263,269,271,269,266,266,268,255],
[272,288,0,274,267,299,284,274,279,274],
[280,282,277,0,272,278,283,277,286,269],
[284,280,284,279,0,283,292,285,280,272],
[274,282,252,273,268,0,279,262,269,248],
[271,285,267,268,259,272,0,274,268,266],
[288,285,277,274,266,289,277,0,290,281],
[271,283,272,265,271,282,283,261,0,257],
[287,296,277,282,279,303,285,270,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,279,296,278,269,303,278,296,296],
[269,0,273,255,255,261,267,261,293,280],
[272,278,0,285,278,253,285,249,291,273],
[255,296,266,0,266,285,283,265,286,280],
[273,296,273,285,0,264,291,278,291,289],
[282,290,298,266,287,0,289,287,284,282],
[248,284,266,268,260,262,0,276,290,276],
[273,290,302,286,273,264,275,0,289,287],
[255,258,260,265,260,267,261,262,0,264],
[255,271,278,271,262,269,275,264,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,261,274,250,279,289,257,265,270],
[296,0,300,295,289,291,294,306,283,271],
[290,251,0,279,281,301,285,286,243,266],
[277,256,272,0,257,278,281,264,276,282],
[301,262,270,294,0,305,301,279,281,287],
[272,260,250,273,246,0,279,276,267,258],
[262,257,266,270,250,272,0,269,249,261],
[294,245,265,287,272,275,282,0,262,265],
[286,268,308,275,270,284,302,289,0,291],
[281,280,285,269,264,293,290,286,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,266,256,270,268,259,274,249,268],
[293,0,282,261,272,284,256,295,262,285],
[285,269,0,273,256,229,251,264,259,264],
[295,290,278,0,263,281,273,297,263,265],
[281,279,295,288,0,287,282,294,247,279],
[283,267,322,270,264,0,274,286,256,287],
[292,295,300,278,269,277,0,277,264,286],
[277,256,287,254,257,265,274,0,277,258],
[302,289,292,288,304,295,287,274,0,295],
[283,266,287,286,272,264,265,293,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,308,303,275,305,278,307,285,280],
[233,0,289,282,269,282,259,289,258,250],
[243,262,0,272,250,257,244,279,252,262],
[248,269,279,0,283,279,242,269,262,246],
[276,282,301,268,0,294,285,291,277,246],
[246,269,294,272,257,0,259,283,264,254],
[273,292,307,309,266,292,0,283,281,263],
[244,262,272,282,260,268,268,0,269,270],
[266,293,299,289,274,287,270,282,0,268],
[271,301,289,305,305,297,288,281,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,284,286,289,288,290,286,309,287],
[288,0,267,269,296,285,295,286,311,280],
[267,284,0,264,272,281,284,287,302,289],
[265,282,287,0,284,284,279,273,319,285],
[262,255,279,267,0,263,268,282,289,282],
[263,266,270,267,288,0,271,278,294,299],
[261,256,267,272,283,280,0,269,290,276],
[265,265,264,278,269,273,282,0,285,283],
[242,240,249,232,262,257,261,266,0,275],
[264,271,262,266,269,252,275,268,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,268,300,270,301,290,298,287,311],
[254,0,237,253,277,299,307,271,243,267],
[283,314,0,272,292,323,312,306,293,296],
[251,298,279,0,271,329,303,303,282,281],
[281,274,259,280,0,320,286,292,270,322],
[250,252,228,222,231,0,263,242,230,243],
[261,244,239,248,265,288,0,264,275,255],
[253,280,245,248,259,309,287,0,264,245],
[264,308,258,269,281,321,276,287,0,286],
[240,284,255,270,229,308,296,306,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,280,295,280,271,295,305,292,293],
[261,0,265,253,266,260,282,306,286,293],
[271,286,0,275,270,263,306,273,273,279],
[256,298,276,0,271,280,299,291,269,282],
[271,285,281,280,0,264,294,301,286,305],
[280,291,288,271,287,0,289,309,260,298],
[256,269,245,252,257,262,0,301,261,302],
[246,245,278,260,250,242,250,0,255,283],
[259,265,278,282,265,291,290,296,0,310],
[258,258,272,269,246,253,249,268,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,290,273,283,278,285,268,287,297],
[276,0,304,264,287,274,286,279,278,293],
[261,247,0,270,274,260,262,268,299,282],
[278,287,281,0,286,284,302,273,299,296],
[268,264,277,265,0,268,278,277,296,284],
[273,277,291,267,283,0,262,273,285,288],
[266,265,289,249,273,289,0,256,278,283],
[283,272,283,278,274,278,295,0,284,300],
[264,273,252,252,255,266,273,267,0,283],
[254,258,269,255,267,263,268,251,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,289,261,279,283,275,273,297,276],
[253,0,278,257,259,265,277,254,265,260],
[262,273,0,265,277,284,271,276,282,287],
[290,294,286,0,272,294,283,278,285,277],
[272,292,274,279,0,267,272,272,287,262],
[268,286,267,257,284,0,264,284,283,267],
[276,274,280,268,279,287,0,268,283,290],
[278,297,275,273,279,267,283,0,278,285],
[254,286,269,266,264,268,268,273,0,272],
[275,291,264,274,289,284,261,266,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,278,267,272,271,293,269,277],
[275,0,251,273,275,291,261,296,259,264],
[272,300,0,272,280,278,254,287,257,268],
[273,278,279,0,289,285,270,287,249,257],
[284,276,271,262,0,290,257,288,278,284],
[279,260,273,266,261,0,284,280,282,282],
[280,290,297,281,294,267,0,278,248,266],
[258,255,264,264,263,271,273,0,222,255],
[282,292,294,302,273,269,303,329,0,267],
[274,287,283,294,267,269,285,296,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,274,265,255,270,259,277,265,256],
[284,0,283,269,275,260,265,291,276,267],
[277,268,0,269,265,260,258,272,275,266],
[286,282,282,0,279,270,252,278,279,266],
[296,276,286,272,0,282,277,297,286,278],
[281,291,291,281,269,0,259,298,284,296],
[292,286,293,299,274,292,0,289,281,272],
[274,260,279,273,254,253,262,0,265,257],
[286,275,276,272,265,267,270,286,0,265],
[295,284,285,285,273,255,279,294,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,243,263,277,272,232,264,298,262],
[297,0,297,302,277,284,279,291,309,270],
[308,254,0,288,290,292,277,290,273,282],
[288,249,263,0,261,285,265,277,283,255],
[274,274,261,290,0,293,272,278,292,290],
[279,267,259,266,258,0,260,259,278,262],
[319,272,274,286,279,291,0,283,266,270],
[287,260,261,274,273,292,268,0,278,276],
[253,242,278,268,259,273,285,273,0,269],
[289,281,269,296,261,289,281,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,295,310,306,290,268,330,300,301],
[255,0,280,297,268,263,303,290,269,288],
[256,271,0,278,282,271,268,282,259,292],
[241,254,273,0,275,249,220,258,251,265],
[245,283,269,276,0,254,234,267,252,296],
[261,288,280,302,297,0,255,299,265,293],
[283,248,283,331,317,296,0,302,289,301],
[221,261,269,293,284,252,249,0,241,297],
[251,282,292,300,299,286,262,310,0,314],
[250,263,259,286,255,258,250,254,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,280,297,281,273,278,277,284,272],
[272,0,279,282,265,258,279,265,261,254],
[271,272,0,286,278,268,273,278,267,275],
[254,269,265,0,257,246,263,264,255,246],
[270,286,273,294,0,264,287,299,286,279],
[278,293,283,305,287,0,289,298,289,274],
[273,272,278,288,264,262,0,263,252,254],
[274,286,273,287,252,253,288,0,277,261],
[267,290,284,296,265,262,299,274,0,262],
[279,297,276,305,272,277,297,290,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,254,293,273,288,281,296,270],
[277,0,280,244,295,258,277,263,287,276],
[276,271,0,271,287,246,270,247,274,230],
[297,307,280,0,310,261,315,275,308,276],
[258,256,264,241,0,231,263,253,275,240],
[278,293,305,290,320,0,297,275,294,279],
[263,274,281,236,288,254,0,256,294,251],
[270,288,304,276,298,276,295,0,299,264],
[255,264,277,243,276,257,257,252,0,238],
[281,275,321,275,311,272,300,287,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,338,213,211,255,255,253,169,213,212],
[213,0,254,254,214,256,213,253,214,257],
[338,297,0,339,213,212,340,254,256,298],
[340,297,212,0,297,298,297,297,258,255],
[296,337,338,254,0,336,252,252,254,253],
[296,295,339,253,215,0,253,170,256,256],
[298,338,211,254,299,298,0,169,299,215],
[382,298,297,254,299,381,382,0,341,342],
[338,337,295,293,297,295,252,210,0,337],
[339,294,253,296,298,295,336,209,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,280,272,283,265,260,263,279,258],
[293,0,262,267,288,284,268,286,279,273],
[271,289,0,291,291,285,292,279,283,277],
[279,284,260,0,288,279,285,278,281,276],
[268,263,260,263,0,273,279,271,286,259],
[286,267,266,272,278,0,277,283,278,252],
[291,283,259,266,272,274,0,285,291,270],
[288,265,272,273,280,268,266,0,301,271],
[272,272,268,270,265,273,260,250,0,254],
[293,278,274,275,292,299,281,280,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,294,271,247,291,262,268,277,282],
[273,0,270,278,258,276,246,280,259,280],
[257,281,0,253,261,271,274,259,260,240],
[280,273,298,0,274,303,260,288,301,261],
[304,293,290,277,0,303,276,303,288,270],
[260,275,280,248,248,0,263,266,287,256],
[289,305,277,291,275,288,0,295,297,272],
[283,271,292,263,248,285,256,0,285,268],
[274,292,291,250,263,264,254,266,0,248],
[269,271,311,290,281,295,279,283,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,280,264,263,301,292,228,295,252],
[258,0,311,331,293,323,287,279,306,308],
[271,240,0,281,258,222,203,202,234,260],
[287,220,270,0,236,239,237,232,235,279],
[288,258,293,315,0,244,256,283,275,280],
[250,228,329,312,307,0,287,234,256,247],
[259,264,348,314,295,264,0,242,292,253],
[323,272,349,319,268,317,309,0,267,296],
[256,245,317,316,276,295,259,284,0,243],
[299,243,291,272,271,304,298,255,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,287,263,272,264,270,283,260,273],
[270,0,274,261,274,275,282,280,253,242],
[264,277,0,267,258,276,286,273,261,256],
[288,290,284,0,274,292,290,282,275,261],
[279,277,293,277,0,286,297,285,272,276],
[287,276,275,259,265,0,292,279,271,250],
[281,269,265,261,254,259,0,256,242,231],
[268,271,278,269,266,272,295,0,263,253],
[291,298,290,276,279,280,309,288,0,266],
[278,309,295,290,275,301,320,298,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,367,458,275,459,183,273,277,365],
[276,0,460,368,278,368,183,275,184,365],
[184,91,0,276,278,184,0,183,275,183],
[93,183,275,0,278,93,183,276,277,366],
[276,273,273,273,0,366,273,183,275,365],
[92,183,367,458,185,0,183,183,184,273],
[368,368,551,368,278,368,0,368,275,275],
[278,276,368,275,368,368,183,0,185,182],
[274,367,276,274,276,367,276,366,0,274],
[186,186,368,185,186,278,276,369,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,248,260,231,266,263,282,241,284],
[299,0,275,289,290,321,295,293,289,274],
[303,276,0,294,272,288,290,276,272,307],
[291,262,257,0,259,291,271,283,269,269],
[320,261,279,292,0,303,290,280,278,269],
[285,230,263,260,248,0,285,292,260,261],
[288,256,261,280,261,266,0,288,272,280],
[269,258,275,268,271,259,263,0,258,261],
[310,262,279,282,273,291,279,293,0,292],
[267,277,244,282,282,290,271,290,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,298,299,277,279,269,293,309],
[278,0,292,285,296,289,300,275,283,307],
[272,259,0,284,291,290,284,258,273,297],
[253,266,267,0,290,277,274,251,259,278],
[252,255,260,261,0,267,259,245,257,287],
[274,262,261,274,284,0,267,276,270,286],
[272,251,267,277,292,284,0,268,282,274],
[282,276,293,300,306,275,283,0,283,285],
[258,268,278,292,294,281,269,268,0,282],
[242,244,254,273,264,265,277,266,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,276,246,233,234,285,267,266,237],
[284,0,298,264,247,273,308,275,285,270],
[275,253,0,253,246,228,292,250,253,231],
[305,287,298,0,265,276,335,296,297,265],
[318,304,305,286,0,252,321,286,297,289],
[317,278,323,275,299,0,300,292,296,262],
[266,243,259,216,230,251,0,254,243,238],
[284,276,301,255,265,259,297,0,287,253],
[285,266,298,254,254,255,308,264,0,247],
[314,281,320,286,262,289,313,298,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,262,279,301,294,277,283,296,287],
[246,0,231,249,273,262,252,266,235,257],
[289,320,0,302,275,306,280,293,317,312],
[272,302,249,0,271,288,252,278,280,277],
[250,278,276,280,0,270,276,273,274,277],
[257,289,245,263,281,0,259,269,285,260],
[274,299,271,299,275,292,0,281,277,291],
[268,285,258,273,278,282,270,0,261,268],
[255,316,234,271,277,266,274,290,0,277],
[264,294,239,274,274,291,260,283,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,281,263,294,261,248,272,270,271],
[291,0,279,282,312,297,281,274,289,287],
[270,272,0,311,324,302,292,286,299,298],
[288,269,240,0,308,272,245,268,265,284],
[257,239,227,243,0,255,231,236,253,261],
[290,254,249,279,296,0,261,248,263,283],
[303,270,259,306,320,290,0,298,293,299],
[279,277,265,283,315,303,253,0,289,289],
[281,262,252,286,298,288,258,262,0,302],
[280,264,253,267,290,268,252,262,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,258,276,261,277,279,287,269,258],
[276,0,271,260,267,275,284,306,293,264],
[293,280,0,277,299,293,301,321,308,266],
[275,291,274,0,293,282,282,280,284,279],
[290,284,252,258,0,277,296,325,309,265],
[274,276,258,269,274,0,285,312,293,282],
[272,267,250,269,255,266,0,300,284,249],
[264,245,230,271,226,239,251,0,250,239],
[282,258,243,267,242,258,267,301,0,261],
[293,287,285,272,286,269,302,312,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,279,253,241,271,290,261,269,249],
[299,0,291,276,272,289,282,272,293,261],
[272,260,0,261,240,281,264,269,284,264],
[298,275,290,0,276,308,289,304,286,282],
[310,279,311,275,0,295,286,287,280,269],
[280,262,270,243,256,0,254,271,270,256],
[261,269,287,262,265,297,0,286,276,261],
[290,279,282,247,264,280,265,0,274,272],
[282,258,267,265,271,281,275,277,0,279],
[302,290,287,269,282,295,290,279,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,284,295,292,250,277,277,283,285],
[243,0,254,259,273,245,265,251,241,264],
[267,297,0,299,284,261,258,261,270,285],
[256,292,252,0,295,273,279,283,268,310],
[259,278,267,256,0,256,284,248,267,265],
[301,306,290,278,295,0,280,275,263,303],
[274,286,293,272,267,271,0,257,266,306],
[274,300,290,268,303,276,294,0,278,286],
[268,310,281,283,284,288,285,273,0,308],
[266,287,266,241,286,248,245,265,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,311,255,390,284,288,329,343,326],
[272,0,301,304,345,275,231,312,276,315],
[240,250,0,271,354,272,216,258,282,274],
[296,247,280,0,295,254,200,297,229,270],
[161,206,197,256,0,141,156,212,153,151],
[267,276,279,297,410,0,310,310,268,253],
[263,320,335,351,395,241,0,382,255,297],
[222,239,293,254,339,241,169,0,212,225],
[208,275,269,322,398,283,296,339,0,310],
[225,236,277,281,400,298,254,326,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,299,293,274,297,293,316,290,287],
[268,0,291,268,276,287,294,287,271,265],
[252,260,0,282,264,296,269,271,268,274],
[258,283,269,0,296,282,298,297,274,286],
[277,275,287,255,0,285,285,284,275,297],
[254,264,255,269,266,0,280,273,281,268],
[258,257,282,253,266,271,0,283,268,259],
[235,264,280,254,267,278,268,0,273,259],
[261,280,283,277,276,270,283,278,0,287],
[264,286,277,265,254,283,292,292,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,290,271,276,288,279,267,248,293],
[268,0,235,267,243,272,265,237,221,288],
[261,316,0,276,293,301,312,260,240,317],
[280,284,275,0,277,292,304,276,276,304],
[275,308,258,274,0,268,295,282,237,282],
[263,279,250,259,283,0,295,258,243,269],
[272,286,239,247,256,256,0,247,232,296],
[284,314,291,275,269,293,304,0,261,309],
[303,330,311,275,314,308,319,290,0,300],
[258,263,234,247,269,282,255,242,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,257,287,277,255,255,226,267,262],
[278,0,312,217,283,296,227,252,236,265],
[294,239,0,221,267,228,249,235,230,245],
[264,334,330,0,308,324,298,305,276,298],
[274,268,284,243,0,274,265,241,263,268],
[296,255,323,227,277,0,250,281,288,297],
[296,324,302,253,286,301,0,250,294,321],
[325,299,316,246,310,270,301,0,280,295],
[284,315,321,275,288,263,257,271,0,273],
[289,286,306,253,283,254,230,256,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,302,271,282,275,293,286,291,271],
[238,0,241,229,233,276,274,250,264,235],
[249,310,0,277,287,270,275,262,315,253],
[280,322,274,0,290,296,285,278,273,265],
[269,318,264,261,0,255,277,268,300,270],
[276,275,281,255,296,0,301,273,287,282],
[258,277,276,266,274,250,0,265,293,263],
[265,301,289,273,283,278,286,0,303,281],
[260,287,236,278,251,264,258,248,0,260],
[280,316,298,286,281,269,288,270,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,287,285,308,263,272,253,255,283],
[283,0,290,272,307,288,283,267,262,293],
[264,261,0,283,298,278,286,263,225,268],
[266,279,268,0,291,302,262,268,267,268],
[243,244,253,260,0,267,274,244,244,264],
[288,263,273,249,284,0,280,246,265,265],
[279,268,265,289,277,271,0,279,288,276],
[298,284,288,283,307,305,272,0,276,277],
[296,289,326,284,307,286,263,275,0,283],
[268,258,283,283,287,286,275,274,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,285,294,296,313,300,306,262,302],
[265,0,277,287,299,292,273,289,275,287],
[266,274,0,286,277,278,263,282,249,285],
[257,264,265,0,279,269,276,268,277,271],
[255,252,274,272,0,282,269,292,262,261],
[238,259,273,282,269,0,267,274,262,278],
[251,278,288,275,282,284,0,289,264,266],
[245,262,269,283,259,277,262,0,265,282],
[289,276,302,274,289,289,287,286,0,299],
[249,264,266,280,290,273,285,269,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,280,258,268,257,259,243,245],
[275,0,262,283,259,232,234,287,253,264],
[267,289,0,287,291,268,231,273,265,262],
[271,268,264,0,239,275,207,247,273,272],
[293,292,260,312,0,268,260,257,313,273],
[283,319,283,276,283,0,273,236,279,279],
[294,317,320,344,291,278,0,332,294,250],
[292,264,278,304,294,315,219,0,273,256],
[308,298,286,278,238,272,257,278,0,299],
[306,287,289,279,278,272,301,295,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,271,273,271,288,261,250,258,254],
[261,0,295,284,301,302,276,259,251,261],
[280,256,0,281,271,296,285,262,251,265],
[278,267,270,0,243,275,269,281,255,255],
[280,250,280,308,0,313,275,276,263,281],
[263,249,255,276,238,0,249,240,215,253],
[290,275,266,282,276,302,0,257,253,261],
[301,292,289,270,275,311,294,0,276,250],
[293,300,300,296,288,336,298,275,0,281],
[297,290,286,296,270,298,290,301,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,263,330,291,300,245,288,303,319],
[252,0,248,250,264,276,246,277,321,308],
[288,303,0,301,305,347,299,245,317,288],
[221,301,250,0,250,286,276,258,264,251],
[260,287,246,301,0,353,268,302,248,295],
[251,275,204,265,198,0,218,192,225,198],
[306,305,252,275,283,333,0,307,306,310],
[263,274,306,293,249,359,244,0,290,281],
[248,230,234,287,303,326,245,261,0,275],
[232,243,263,300,256,353,241,270,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,279,283,278,278,278,267,278,295],
[273,0,270,264,262,265,268,258,263,266],
[272,281,0,270,281,255,285,261,283,272],
[268,287,281,0,281,285,287,279,269,280],
[273,289,270,270,0,267,284,258,271,284],
[273,286,296,266,284,0,297,265,280,285],
[273,283,266,264,267,254,0,264,276,289],
[284,293,290,272,293,286,287,0,288,303],
[273,288,268,282,280,271,275,263,0,281],
[256,285,279,271,267,266,262,248,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,375,352,361,332,295,303,271,289,361],
[176,0,276,310,222,212,306,246,226,304],
[199,275,0,321,250,208,261,261,225,295],
[190,241,230,0,262,204,273,211,259,309],
[219,329,301,289,0,252,288,298,310,337],
[256,339,343,347,299,0,286,264,300,323],
[248,245,290,278,263,265,0,230,249,287],
[280,305,290,340,253,287,321,0,322,349],
[262,325,326,292,241,251,302,229,0,338],
[190,247,256,242,214,228,264,202,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,281,276,270,277,296,291,269,279],
[266,0,268,256,277,273,274,274,262,263],
[270,283,0,264,273,275,290,295,267,283],
[275,295,287,0,288,267,284,283,267,282],
[281,274,278,263,0,282,300,275,275,285],
[274,278,276,284,269,0,285,286,275,280],
[255,277,261,267,251,266,0,279,256,265],
[260,277,256,268,276,265,272,0,257,264],
[282,289,284,284,276,276,295,294,0,273],
[272,288,268,269,266,271,286,287,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,289,262,251,255,271,255,249,256],
[299,0,312,284,298,267,286,278,274,274],
[262,239,0,225,254,246,244,247,231,264],
[289,267,326,0,299,280,284,283,265,281],
[300,253,297,252,0,238,273,289,241,275],
[296,284,305,271,313,0,298,273,273,298],
[280,265,307,267,278,253,0,274,282,264],
[296,273,304,268,262,278,277,0,260,264],
[302,277,320,286,310,278,269,291,0,245],
[295,277,287,270,276,253,287,287,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,272,263,254,258,268,265,279,242],
[271,0,272,256,253,261,260,267,266,259],
[279,279,0,269,271,242,259,255,255,262],
[288,295,282,0,283,277,292,281,273,283],
[297,298,280,268,0,270,276,279,279,276],
[293,290,309,274,281,0,287,288,292,265],
[283,291,292,259,275,264,0,293,281,270],
[286,284,296,270,272,263,258,0,286,269],
[272,285,296,278,272,259,270,265,0,278],
[309,292,289,268,275,286,281,282,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,296,282,274,303,283,303,264,312],
[274,0,264,272,255,271,271,253,266,281],
[255,287,0,260,248,270,285,276,221,304],
[269,279,291,0,292,282,278,285,278,265],
[277,296,303,259,0,287,307,311,283,308],
[248,280,281,269,264,0,270,279,265,277],
[268,280,266,273,244,281,0,275,282,274],
[248,298,275,266,240,272,276,0,249,263],
[287,285,330,273,268,286,269,302,0,282],
[239,270,247,286,243,274,277,288,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,268,254,275,278,259,273,286,272],
[294,0,277,268,271,279,269,278,269,262],
[283,274,0,268,260,273,255,273,267,260],
[297,283,283,0,296,294,279,286,270,287],
[276,280,291,255,0,280,256,267,269,258],
[273,272,278,257,271,0,263,274,266,257],
[292,282,296,272,295,288,0,269,290,269],
[278,273,278,265,284,277,282,0,273,252],
[265,282,284,281,282,285,261,278,0,253],
[279,289,291,264,293,294,282,299,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,272,254,273,270,266,278,274,261],
[235,0,261,241,218,236,229,220,261,225],
[279,290,0,298,256,255,281,272,294,277],
[297,310,253,0,283,237,255,266,256,300],
[278,333,295,268,0,263,246,265,281,281],
[281,315,296,314,288,0,243,281,269,318],
[285,322,270,296,305,308,0,275,304,297],
[273,331,279,285,286,270,276,0,274,279],
[277,290,257,295,270,282,247,277,0,284],
[290,326,274,251,270,233,254,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,274,324,247,269,287,291,267,321],
[278,0,265,285,262,255,261,280,276,282],
[277,286,0,284,289,284,291,335,263,301],
[227,266,267,0,232,244,260,234,256,275],
[304,289,262,319,0,269,270,314,275,326],
[282,296,267,307,282,0,290,298,288,300],
[264,290,260,291,281,261,0,310,275,313],
[260,271,216,317,237,253,241,0,270,269],
[284,275,288,295,276,263,276,281,0,299],
[230,269,250,276,225,251,238,282,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,287,280,250,253,264,286,300,218],
[290,0,279,325,300,270,261,266,297,289],
[264,272,0,288,262,279,269,267,304,251],
[271,226,263,0,272,278,253,270,292,253],
[301,251,289,279,0,288,265,283,304,263],
[298,281,272,273,263,0,285,293,293,257],
[287,290,282,298,286,266,0,290,298,271],
[265,285,284,281,268,258,261,0,286,264],
[251,254,247,259,247,258,253,265,0,238],
[333,262,300,298,288,294,280,287,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,273,264,276,258,254,225,289,300],
[320,0,297,276,288,303,262,269,308,308],
[278,254,0,267,262,245,270,248,275,291],
[287,275,284,0,273,276,273,263,303,301],
[275,263,289,278,0,271,279,277,297,290],
[293,248,306,275,280,0,301,257,292,314],
[297,289,281,278,272,250,0,256,311,315],
[326,282,303,288,274,294,295,0,317,314],
[262,243,276,248,254,259,240,234,0,286],
[251,243,260,250,261,237,236,237,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,272,282,279,275,282,274,273,280],
[273,0,277,272,270,270,279,274,270,292],
[279,274,0,280,278,287,280,277,255,293],
[269,279,271,0,286,274,275,270,279,294],
[272,281,273,265,0,279,263,260,258,294],
[276,281,264,277,272,0,265,273,276,295],
[269,272,271,276,288,286,0,281,259,295],
[277,277,274,281,291,278,270,0,276,295],
[278,281,296,272,293,275,292,275,0,300],
[271,259,258,257,257,256,256,256,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,283,286,266,251,273,253,287,275],
[256,0,319,296,310,300,262,268,288,267],
[268,232,0,291,288,285,269,270,299,295],
[265,255,260,0,284,267,274,235,280,257],
[285,241,263,267,0,269,258,279,293,261],
[300,251,266,284,282,0,298,269,295,268],
[278,289,282,277,293,253,0,272,259,283],
[298,283,281,316,272,282,279,0,289,294],
[264,263,252,271,258,256,292,262,0,254],
[276,284,256,294,290,283,268,257,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,260,269,264,254,258,265,246,265],
[282,0,274,285,270,247,269,278,261,278],
[291,277,0,293,267,267,278,283,267,282],
[282,266,258,0,262,253,252,260,242,265],
[287,281,284,289,0,271,267,304,261,291],
[297,304,284,298,280,0,274,301,280,298],
[293,282,273,299,284,277,0,274,268,275],
[286,273,268,291,247,250,277,0,284,289],
[305,290,284,309,290,271,283,267,0,293],
[286,273,269,286,260,253,276,262,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,291,280,285,265,282,259,282,260],
[275,0,292,285,309,281,297,294,335,282],
[260,259,0,287,277,264,261,282,269,276],
[271,266,264,0,280,241,275,272,268,245],
[266,242,274,271,0,262,272,252,251,254],
[286,270,287,310,289,0,284,267,321,280],
[269,254,290,276,279,267,0,288,282,245],
[292,257,269,279,299,284,263,0,293,257],
[269,216,282,283,300,230,269,258,0,235],
[291,269,275,306,297,271,306,294,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,277,277,258,287,266,277,263,250],
[287,0,278,302,279,284,294,292,271,276],
[274,273,0,277,255,273,264,276,246,249],
[274,249,274,0,271,288,280,290,257,240],
[293,272,296,280,0,296,267,289,277,258],
[264,267,278,263,255,0,259,276,248,255],
[285,257,287,271,284,292,0,290,277,262],
[274,259,275,261,262,275,261,0,253,251],
[288,280,305,294,274,303,274,298,0,273],
[301,275,302,311,293,296,289,300,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,268,273,292,256,264,254,261,279],
[274,0,268,259,280,262,283,262,268,296],
[283,283,0,264,282,254,283,259,266,276],
[278,292,287,0,289,287,288,275,275,288],
[259,271,269,262,0,252,274,258,265,285],
[295,289,297,264,299,0,282,277,279,297],
[287,268,268,263,277,269,0,263,270,286],
[297,289,292,276,293,274,288,0,282,300],
[290,283,285,276,286,272,281,269,0,279],
[272,255,275,263,266,254,265,251,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,290,260,283,251,249,248,245,261],
[224,0,253,311,259,289,247,273,263,272],
[261,298,0,261,283,311,249,251,297,298],
[291,240,290,0,264,298,262,239,284,299],
[268,292,268,287,0,288,212,240,258,264],
[300,262,240,253,263,0,213,239,300,237],
[302,304,302,289,339,338,0,277,388,272],
[303,278,300,312,311,312,274,0,321,299],
[306,288,254,267,293,251,163,230,0,239],
[290,279,253,252,287,314,279,252,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,254,259,270,278,274,285,268,279],
[267,0,245,265,259,274,265,263,241,263],
[297,306,0,283,278,294,283,271,280,302],
[292,286,268,0,275,293,290,278,292,296],
[281,292,273,276,0,295,271,274,281,280],
[273,277,257,258,256,0,252,267,256,266],
[277,286,268,261,280,299,0,280,272,284],
[266,288,280,273,277,284,271,0,260,287],
[283,310,271,259,270,295,279,291,0,281],
[272,288,249,255,271,285,267,264,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,328,258,291,242,292,307,274,276],
[261,0,311,261,227,183,277,261,214,224],
[223,240,0,257,223,244,288,254,257,237],
[293,290,294,0,274,242,292,290,227,260],
[260,324,328,277,0,247,358,308,212,307],
[309,368,307,309,304,0,306,287,227,305],
[259,274,263,259,193,245,0,306,242,257],
[244,290,297,261,243,264,245,0,196,276],
[277,337,294,324,339,324,309,355,0,273],
[275,327,314,291,244,246,294,275,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,261,295,263,232,247,249,275,275],
[284,0,307,309,314,315,270,256,298,291],
[290,244,0,280,284,263,268,241,265,261],
[256,242,271,0,264,235,219,243,282,256],
[288,237,267,287,0,274,236,268,259,277],
[319,236,288,316,277,0,292,292,289,299],
[304,281,283,332,315,259,0,297,341,327],
[302,295,310,308,283,259,254,0,291,295],
[276,253,286,269,292,262,210,260,0,248],
[276,260,290,295,274,252,224,256,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,285,275,293,294,266,276,303,283],
[288,0,284,287,286,292,263,274,285,277],
[266,267,0,256,265,254,261,267,289,266],
[276,264,295,0,279,279,264,275,283,272],
[258,265,286,272,0,273,269,257,272,260],
[257,259,297,272,278,0,255,258,284,275],
[285,288,290,287,282,296,0,268,287,291],
[275,277,284,276,294,293,283,0,296,290],
[248,266,262,268,279,267,264,255,0,258],
[268,274,285,279,291,276,260,261,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,240,224,285,251,254,299,286,278],
[259,0,222,219,270,234,290,298,263,277],
[311,329,0,304,309,289,274,309,298,289],
[327,332,247,0,296,257,277,313,284,314],
[266,281,242,255,0,250,263,285,263,286],
[300,317,262,294,301,0,268,315,263,317],
[297,261,277,274,288,283,0,324,281,291],
[252,253,242,238,266,236,227,0,231,275],
[265,288,253,267,288,288,270,320,0,282],
[273,274,262,237,265,234,260,276,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,335,303,265,266,290,293,317,318,292],
[216,0,257,240,247,267,208,261,227,293],
[248,294,0,264,301,270,238,312,250,290],
[286,311,287,0,296,315,267,300,293,299],
[285,304,250,255,0,279,291,318,288,318],
[261,284,281,236,272,0,306,296,282,332],
[258,343,313,284,260,245,0,266,252,272],
[234,290,239,251,233,255,285,0,269,259],
[233,324,301,258,263,269,299,282,0,301],
[259,258,261,252,233,219,279,292,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,278,280,292,289,285,263,292,303],
[265,0,272,274,267,276,294,295,292,256],
[273,279,0,269,300,247,290,298,307,275],
[271,277,282,0,285,265,270,270,295,259],
[259,284,251,266,0,239,271,279,280,269],
[262,275,304,286,312,0,296,297,315,281],
[266,257,261,281,280,255,0,267,279,278],
[288,256,253,281,272,254,284,0,287,282],
[259,259,244,256,271,236,272,264,0,269],
[248,295,276,292,282,270,273,269,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,232,222,226,225,226,242,251,228],
[303,0,277,267,238,264,296,272,297,273],
[319,274,0,279,273,287,295,291,306,282],
[329,284,272,0,303,307,307,287,276,313],
[325,313,278,248,0,259,282,288,312,272],
[326,287,264,244,292,0,302,277,291,282],
[325,255,256,244,269,249,0,278,272,275],
[309,279,260,264,263,274,273,0,273,278],
[300,254,245,275,239,260,279,278,0,270],
[323,278,269,238,279,269,276,273,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,297,288,275,289,286,291,298,265],
[274,0,291,261,286,300,290,280,292,281],
[254,260,0,267,249,277,257,270,279,255],
[263,290,284,0,261,280,284,296,291,273],
[276,265,302,290,0,306,288,282,273,277],
[262,251,274,271,245,0,265,254,267,269],
[265,261,294,267,263,286,0,292,292,273],
[260,271,281,255,269,297,259,0,284,261],
[253,259,272,260,278,284,259,267,0,269],
[286,270,296,278,274,282,278,290,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,253,281,287,284,277,263,285,272],
[281,0,268,260,282,280,259,270,270,259],
[298,283,0,282,289,271,272,279,288,271],
[270,291,269,0,284,273,282,267,282,261],
[264,269,262,267,0,260,261,266,274,270],
[267,271,280,278,291,0,275,264,276,262],
[274,292,279,269,290,276,0,277,284,267],
[288,281,272,284,285,287,274,0,279,284],
[266,281,263,269,277,275,267,272,0,250],
[279,292,280,290,281,289,284,267,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,283,271,292,262,260,265,263,261],
[257,0,234,248,258,257,238,247,262,234],
[268,317,0,273,291,270,314,260,310,271],
[280,303,278,0,304,261,269,258,299,268],
[259,293,260,247,0,242,270,234,258,224],
[289,294,281,290,309,0,265,254,286,255],
[291,313,237,282,281,286,0,284,298,233],
[286,304,291,293,317,297,267,0,312,277],
[288,289,241,252,293,265,253,239,0,224],
[290,317,280,283,327,296,318,274,327,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,302,276,274,224,226,257,310,255],
[293,0,297,296,310,253,240,298,318,272],
[249,254,0,287,293,266,296,271,271,253],
[275,255,264,0,248,202,229,271,315,261],
[277,241,258,303,0,256,261,302,309,222],
[327,298,285,349,295,0,261,309,295,288],
[325,311,255,322,290,290,0,268,334,284],
[294,253,280,280,249,242,283,0,310,261],
[241,233,280,236,242,256,217,241,0,227],
[296,279,298,290,329,263,267,290,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,280,273,263,264,255,240,278,257],
[298,0,279,264,267,249,260,265,275,282],
[271,272,0,256,282,267,267,267,292,277],
[278,287,295,0,267,254,283,284,302,271],
[288,284,269,284,0,281,266,275,276,285],
[287,302,284,297,270,0,268,273,289,299],
[296,291,284,268,285,283,0,288,277,278],
[311,286,284,267,276,278,263,0,286,292],
[273,276,259,249,275,262,274,265,0,265],
[294,269,274,280,266,252,273,259,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,247,268,280,254,245,278,239,271],
[316,0,285,286,289,287,273,327,289,322],
[304,266,0,311,310,285,292,337,283,317],
[283,265,240,0,279,255,255,290,251,285],
[271,262,241,272,0,267,247,301,271,273],
[297,264,266,296,284,0,268,328,259,283],
[306,278,259,296,304,283,0,335,266,283],
[273,224,214,261,250,223,216,0,252,257],
[312,262,268,300,280,292,285,299,0,289],
[280,229,234,266,278,268,268,294,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,270,282,268,245,264,297,237,270],
[296,0,288,282,271,272,282,279,267,260],
[281,263,0,289,284,268,277,285,281,282],
[269,269,262,0,271,250,244,266,248,246],
[283,280,267,280,0,255,270,282,279,283],
[306,279,283,301,296,0,284,303,273,287],
[287,269,274,307,281,267,0,299,271,254],
[254,272,266,285,269,248,252,0,234,242],
[314,284,270,303,272,278,280,317,0,268],
[281,291,269,305,268,264,297,309,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,228,245,264,244,258,275,246,269],
[299,0,283,254,295,308,293,274,265,291],
[323,268,0,287,310,293,311,285,286,309],
[306,297,264,0,276,301,279,283,301,316],
[287,256,241,275,0,276,285,253,258,270],
[307,243,258,250,275,0,297,251,251,293],
[293,258,240,272,266,254,0,251,261,278],
[276,277,266,268,298,300,300,0,265,302],
[305,286,265,250,293,300,290,286,0,281],
[282,260,242,235,281,258,273,249,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,323,293,319,286,267,301,324,290],
[302,0,299,280,357,267,269,321,346,310],
[228,252,0,290,288,290,285,298,366,296],
[258,271,261,0,305,267,252,306,314,284],
[232,194,263,246,0,291,297,289,333,286],
[265,284,261,284,260,0,240,296,300,316],
[284,282,266,299,254,311,0,338,312,320],
[250,230,253,245,262,255,213,0,310,310],
[227,205,185,237,218,251,239,241,0,274],
[261,241,255,267,265,235,231,241,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,287,298,271,293,281,277,239,240],
[289,0,275,329,303,341,312,275,279,295],
[264,276,0,285,287,316,301,260,321,282],
[253,222,266,0,287,268,275,264,266,272],
[280,248,264,264,0,295,267,238,254,307],
[258,210,235,283,256,0,241,282,241,241],
[270,239,250,276,284,310,0,291,253,231],
[274,276,291,287,313,269,260,0,243,248],
[312,272,230,285,297,310,298,308,0,290],
[311,256,269,279,244,310,320,303,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,274,256,262,242,248,263,268,276],
[286,0,281,252,275,228,264,255,251,259],
[277,270,0,246,258,252,267,246,238,271],
[295,299,305,0,287,286,275,275,273,291],
[289,276,293,264,0,272,254,262,267,273],
[309,323,299,265,279,0,280,265,276,293],
[303,287,284,276,297,271,0,267,270,285],
[288,296,305,276,289,286,284,0,266,279],
[283,300,313,278,284,275,281,285,0,284],
[275,292,280,260,278,258,266,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,232,272,281,272,262,280,259,294],
[291,0,240,265,272,279,283,263,255,276],
[319,311,0,274,278,294,278,289,296,311],
[279,286,277,0,278,277,279,267,273,298],
[270,279,273,273,0,276,277,271,258,296],
[279,272,257,274,275,0,272,238,241,302],
[289,268,273,272,274,279,0,275,245,281],
[271,288,262,284,280,313,276,0,249,317],
[292,296,255,278,293,310,306,302,0,313],
[257,275,240,253,255,249,270,234,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,279,290,297,288,272,276,281,280],
[255,0,256,269,279,265,260,269,272,254],
[272,295,0,280,290,275,280,271,283,275],
[261,282,271,0,277,279,256,261,274,270],
[254,272,261,274,0,271,260,262,259,268],
[263,286,276,272,280,0,261,269,250,268],
[279,291,271,295,291,290,0,275,275,284],
[275,282,280,290,289,282,276,0,274,279],
[270,279,268,277,292,301,276,277,0,286],
[271,297,276,281,283,283,267,272,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,285,286,279,296,273,292,279,298],
[271,0,285,252,286,286,281,292,277,302],
[266,266,0,276,269,284,288,287,273,299],
[265,299,275,0,272,267,284,281,288,289],
[272,265,282,279,0,267,271,276,262,291],
[255,265,267,284,284,0,279,280,279,290],
[278,270,263,267,280,272,0,281,273,294],
[259,259,264,270,275,271,270,0,269,265],
[272,274,278,263,289,272,278,282,0,288],
[253,249,252,262,260,261,257,286,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,287,301,261,289,301,280,269,260],
[274,0,297,285,275,295,296,268,268,264],
[264,254,0,268,254,284,290,275,279,266],
[250,266,283,0,262,289,287,257,278,275],
[290,276,297,289,0,299,288,274,277,269],
[262,256,267,262,252,0,281,248,258,253],
[250,255,261,264,263,270,0,263,263,252],
[271,283,276,294,277,303,288,0,283,271],
[282,283,272,273,274,293,288,268,0,282],
[291,287,285,276,282,298,299,280,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,270,318,282,270,299,279,292],
[275,0,283,316,338,336,296,290,290,309],
[272,268,0,250,320,262,241,281,208,251],
[281,235,301,0,303,322,280,291,284,359],
[233,213,231,248,0,296,277,228,234,282],
[269,215,289,229,255,0,254,270,192,293],
[281,255,310,271,274,297,0,253,242,268],
[252,261,270,260,323,281,298,0,260,279],
[272,261,343,267,317,359,309,291,0,323],
[259,242,300,192,269,258,283,272,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,272,269,267,292,269,288,275,266],
[279,0,272,278,275,283,279,278,276,272],
[279,279,0,278,274,279,284,275,281,292],
[282,273,273,0,268,276,275,277,284,262],
[284,276,277,283,0,286,272,275,275,273],
[259,268,272,275,265,0,264,259,279,270],
[282,272,267,276,279,287,0,269,270,267],
[263,273,276,274,276,292,282,0,283,271],
[276,275,270,267,276,272,281,268,0,266],
[285,279,259,289,278,281,284,280,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,289,302,277,267,304,290,301,271],
[267,0,334,287,268,288,304,311,280,268],
[262,217,0,253,248,255,269,280,261,230],
[249,264,298,0,243,274,274,278,266,242],
[274,283,303,308,0,314,287,309,294,293],
[284,263,296,277,237,0,286,279,274,268],
[247,247,282,277,264,265,0,277,268,265],
[261,240,271,273,242,272,274,0,269,238],
[250,271,290,285,257,277,283,282,0,271],
[280,283,321,309,258,283,286,313,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,320,321,347,253,322,299,275,325],
[277,0,277,277,302,231,302,300,368,304],
[231,274,0,229,346,277,322,229,298,323],
[230,274,322,0,347,275,228,297,250,276],
[204,249,205,204,0,227,225,274,248,272],
[298,320,274,276,324,0,322,209,276,349],
[229,249,229,323,326,229,0,252,297,325],
[252,251,322,254,277,342,299,0,322,367],
[276,183,253,301,303,275,254,229,0,303],
[226,247,228,275,279,202,226,184,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,277,282,269,269,265,258,266],
[272,0,285,289,282,274,262,279,282,279],
[276,266,0,288,276,273,256,270,270,282],
[274,262,263,0,270,256,242,257,242,262],
[269,269,275,281,0,277,272,260,259,266],
[282,277,278,295,274,0,275,266,269,283],
[282,289,295,309,279,276,0,275,270,296],
[286,272,281,294,291,285,276,0,283,284],
[293,269,281,309,292,282,281,268,0,292],
[285,272,269,289,285,268,255,267,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,256,268,249,271,282,275,287,243],
[281,0,253,281,265,265,277,278,286,268],
[295,298,0,278,278,265,302,287,300,279],
[283,270,273,0,256,263,286,280,296,255],
[302,286,273,295,0,295,298,285,303,279],
[280,286,286,288,256,0,294,284,304,264],
[269,274,249,265,253,257,0,270,298,260],
[276,273,264,271,266,267,281,0,296,276],
[264,265,251,255,248,247,253,255,0,252],
[308,283,272,296,272,287,291,275,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,264,278,269,263,244,278,252,266],
[256,0,273,265,268,256,272,275,258,254],
[287,278,0,251,285,273,274,254,252,253],
[273,286,300,0,280,284,274,274,276,265],
[282,283,266,271,0,283,300,295,273,275],
[288,295,278,267,268,0,271,289,245,264],
[307,279,277,277,251,280,0,285,275,263],
[273,276,297,277,256,262,266,0,255,265],
[299,293,299,275,278,306,276,296,0,286],
[285,297,298,286,276,287,288,286,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,283,282,261,276,292,277,294,285],
[272,0,273,283,270,264,272,249,262,267],
[268,278,0,275,279,272,293,266,270,284],
[269,268,276,0,270,251,260,257,262,282],
[290,281,272,281,0,265,275,284,271,286],
[275,287,279,300,286,0,257,283,276,293],
[259,279,258,291,276,294,0,292,271,280],
[274,302,285,294,267,268,259,0,260,271],
[257,289,281,289,280,275,280,291,0,275],
[266,284,267,269,265,258,271,280,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,269,262,286,261,286,268,275,272],
[283,0,282,278,308,279,289,261,279,267],
[282,269,0,269,289,283,286,247,269,271],
[289,273,282,0,292,282,309,295,276,281],
[265,243,262,259,0,262,285,265,275,248],
[290,272,268,269,289,0,285,269,290,275],
[265,262,265,242,266,266,0,247,258,246],
[283,290,304,256,286,282,304,0,275,266],
[276,272,282,275,276,261,293,276,0,262],
[279,284,280,270,303,276,305,285,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,279,288,283,262,256,277,279,275],
[295,0,285,282,294,281,281,276,303,272],
[272,266,0,273,299,267,265,282,278,262],
[263,269,278,0,291,253,263,266,291,270],
[268,257,252,260,0,251,253,259,280,260],
[289,270,284,298,300,0,266,297,291,296],
[295,270,286,288,298,285,0,287,307,289],
[274,275,269,285,292,254,264,0,288,268],
[272,248,273,260,271,260,244,263,0,259],
[276,279,289,281,291,255,262,283,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,291,258,240,224,260,313,258,342],
[239,0,360,325,224,209,294,291,205,293],
[260,191,0,223,192,246,260,312,226,294],
[293,226,328,0,243,281,263,260,242,277],
[311,327,359,308,0,260,259,328,325,345],
[327,342,305,270,291,0,340,290,290,376],
[291,257,291,288,292,211,0,242,241,342],
[238,260,239,291,223,261,309,0,255,256],
[293,346,325,309,226,261,310,296,0,362],
[209,258,257,274,206,175,209,295,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,275,255,266,266,230,281,255,238],
[270,0,259,249,256,244,265,246,238,274],
[276,292,0,256,290,292,266,257,264,287],
[296,302,295,0,300,283,292,275,280,300],
[285,295,261,251,0,301,294,254,260,287],
[285,307,259,268,250,0,268,258,238,290],
[321,286,285,259,257,283,0,280,266,246],
[270,305,294,276,297,293,271,0,257,274],
[296,313,287,271,291,313,285,294,0,301],
[313,277,264,251,264,261,305,277,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,329,343,282,261,258,293,280,209],
[309,0,307,325,281,328,317,339,299,235],
[222,244,0,269,258,276,265,290,252,263],
[208,226,282,0,240,245,275,306,226,183],
[269,270,293,311,0,256,265,281,268,231],
[290,223,275,306,295,0,298,296,232,237],
[293,234,286,276,286,253,0,307,214,223],
[258,212,261,245,270,255,244,0,208,193],
[271,252,299,325,283,319,337,343,0,284],
[342,316,288,368,320,314,328,358,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,267,254,271,274,288,272,269,260],
[274,0,279,285,297,276,286,278,286,289],
[284,272,0,278,278,268,286,278,288,273],
[297,266,273,0,275,275,278,292,285,269],
[280,254,273,276,0,277,281,265,281,272],
[277,275,283,276,274,0,275,269,286,278],
[263,265,265,273,270,276,0,257,263,266],
[279,273,273,259,286,282,294,0,271,283],
[282,265,263,266,270,265,288,280,0,260],
[291,262,278,282,279,273,285,268,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,306,312,266,292,249,276,252,280],
[284,0,315,264,285,293,260,298,290,283],
[245,236,0,261,270,291,228,284,259,278],
[239,287,290,0,304,323,280,299,277,294],
[285,266,281,247,0,268,259,274,249,280],
[259,258,260,228,283,0,242,296,271,258],
[302,291,323,271,292,309,0,288,280,310],
[275,253,267,252,277,255,263,0,219,271],
[299,261,292,274,302,280,271,332,0,313],
[271,268,273,257,271,293,241,280,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,266,293,272,263,283,277,277,282],
[296,0,275,288,265,257,309,253,261,268],
[285,276,0,286,276,264,281,254,300,292],
[258,263,265,0,258,253,298,240,268,256],
[279,286,275,293,0,264,282,263,286,278],
[288,294,287,298,287,0,306,282,293,266],
[268,242,270,253,269,245,0,250,258,262],
[274,298,297,311,288,269,301,0,287,290],
[274,290,251,283,265,258,293,264,0,273],
[269,283,259,295,273,285,289,261,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,264,254,285,262,263,264,261,259],
[274,0,259,267,280,255,260,266,260,257],
[287,292,0,296,291,282,267,284,278,281],
[297,284,255,0,300,255,275,266,266,267],
[266,271,260,251,0,251,271,257,252,245],
[289,296,269,296,300,0,275,282,265,269],
[288,291,284,276,280,276,0,280,277,269],
[287,285,267,285,294,269,271,0,260,273],
[290,291,273,285,299,286,274,291,0,283],
[292,294,270,284,306,282,282,278,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,307,267,325,298,250,277,308,309],
[197,0,261,258,301,231,213,207,257,215],
[244,290,0,256,303,285,241,201,328,262],
[284,293,295,0,325,269,256,252,340,296],
[226,250,248,226,0,272,245,252,254,253],
[253,320,266,282,279,0,276,232,286,225],
[301,338,310,295,306,275,0,246,329,299],
[274,344,350,299,299,319,305,0,331,274],
[243,294,223,211,297,265,222,220,0,214],
[242,336,289,255,298,326,252,277,337,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,276,266,260,274,260,258,256,277],
[287,0,286,287,277,296,274,288,271,289],
[275,265,0,267,275,268,250,266,252,270],
[285,264,284,0,273,259,257,273,248,259],
[291,274,276,278,0,278,279,271,282,275],
[277,255,283,292,273,0,289,271,256,268],
[291,277,301,294,272,262,0,289,280,283],
[293,263,285,278,280,280,262,0,272,275],
[295,280,299,303,269,295,271,279,0,275],
[274,262,281,292,276,283,268,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,336,395,274,305,306,365,333,366],
[155,0,274,275,279,155,246,277,307,277],
[215,277,0,305,215,216,248,153,245,340],
[156,276,246,0,277,185,244,278,247,309],
[277,272,336,274,0,213,245,304,335,305],
[246,396,335,366,338,0,402,276,338,340],
[245,305,303,307,306,149,0,242,245,309],
[186,274,398,273,247,275,309,0,215,342],
[218,244,306,304,216,213,306,336,0,369],
[185,274,211,242,246,211,242,209,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,286,287,295,279,278,273,303,281],
[271,0,292,260,297,271,272,279,301,289],
[265,259,0,263,268,261,265,250,241,262],
[264,291,288,0,283,256,283,259,292,270],
[256,254,283,268,0,263,280,268,295,264],
[272,280,290,295,288,0,274,282,302,292],
[273,279,286,268,271,277,0,270,281,273],
[278,272,301,292,283,269,281,0,291,286],
[248,250,310,259,256,249,270,260,0,276],
[270,262,289,281,287,259,278,265,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,271,291,245,272,278,270,247,284],
[270,0,285,285,244,279,286,281,283,286],
[280,266,0,257,264,250,273,291,281,274],
[260,266,294,0,277,295,299,273,286,321],
[306,307,287,274,0,305,287,329,291,323],
[279,272,301,256,246,0,273,308,275,273],
[273,265,278,252,264,278,0,288,264,262],
[281,270,260,278,222,243,263,0,247,279],
[304,268,270,265,260,276,287,304,0,291],
[267,265,277,230,228,278,289,272,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,272,282,281,282,281,261,280,265],
[283,0,276,294,287,298,283,283,300,266],
[279,275,0,287,289,283,291,266,289,283],
[269,257,264,0,274,263,265,248,277,251],
[270,264,262,277,0,276,268,242,273,250],
[269,253,268,288,275,0,274,254,265,248],
[270,268,260,286,283,277,0,262,281,253],
[290,268,285,303,309,297,289,0,285,272],
[271,251,262,274,278,286,270,266,0,269],
[286,285,268,300,301,303,298,279,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,289,300,263,281,288,259,270,279],
[274,0,298,271,263,263,258,273,291,273],
[262,253,0,300,255,256,267,252,266,258],
[251,280,251,0,236,267,237,253,263,256],
[288,288,296,315,0,275,284,279,308,288],
[270,288,295,284,276,0,272,264,303,277],
[263,293,284,314,267,279,0,282,288,279],
[292,278,299,298,272,287,269,0,266,284],
[281,260,285,288,243,248,263,285,0,262],
[272,278,293,295,263,274,272,267,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,376,341,274,308,277,308,276,414],
[245,0,311,311,243,312,348,275,278,346],
[175,240,0,171,208,309,244,206,276,311],
[210,240,380,0,346,344,279,275,276,346],
[277,308,343,205,0,378,277,274,276,448],
[243,239,242,207,173,0,244,206,207,414],
[274,203,307,272,274,307,0,239,237,379],
[243,276,345,276,277,345,312,0,241,413],
[275,273,275,275,275,344,314,310,0,449],
[137,205,240,205,103,137,172,138,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,255,257,265,270,263,301,249,278],
[292,0,262,265,291,293,283,328,277,276],
[296,289,0,264,291,284,268,295,250,266],
[294,286,287,0,302,292,260,316,269,275],
[286,260,260,249,0,270,258,293,267,279],
[281,258,267,259,281,0,263,308,252,248],
[288,268,283,291,293,288,0,309,268,273],
[250,223,256,235,258,243,242,0,238,238],
[302,274,301,282,284,299,283,313,0,273],
[273,275,285,276,272,303,278,313,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,296,297,297,301,299,279,307,260],
[286,0,270,262,294,274,269,262,274,253],
[255,281,0,267,287,276,285,273,289,280],
[254,289,284,0,292,251,259,245,288,246],
[254,257,264,259,0,284,256,289,267,259],
[250,277,275,300,267,0,261,280,289,222],
[252,282,266,292,295,290,0,280,274,290],
[272,289,278,306,262,271,271,0,303,296],
[244,277,262,263,284,262,277,248,0,261],
[291,298,271,305,292,329,261,255,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,266,251,275,275,287,278,273],
[267,0,259,262,251,270,272,264,264,262],
[278,292,0,266,263,287,277,272,272,275],
[285,289,285,0,277,303,287,299,290,264],
[300,300,288,274,0,300,265,295,266,290],
[276,281,264,248,251,0,259,255,284,270],
[276,279,274,264,286,292,0,291,300,270],
[264,287,279,252,256,296,260,0,283,278],
[273,287,279,261,285,267,251,268,0,272],
[278,289,276,287,261,281,281,273,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,265,266,250,273,269,262,247,266],
[279,0,267,256,252,273,265,252,268,276],
[286,284,0,270,286,282,279,275,282,297],
[285,295,281,0,285,275,281,265,285,287],
[301,299,265,266,0,269,272,264,278,295],
[278,278,269,276,282,0,271,275,280,298],
[282,286,272,270,279,280,0,283,273,288],
[289,299,276,286,287,276,268,0,276,298],
[304,283,269,266,273,271,278,275,0,281],
[285,275,254,264,256,253,263,253,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,292,284,296,290,301,291,291,275],
[258,0,257,277,298,262,277,263,280,261],
[259,294,0,302,288,295,277,268,284,269],
[267,274,249,0,295,270,277,256,279,273],
[255,253,263,256,0,261,273,262,270,270],
[261,289,256,281,290,0,283,261,280,262],
[250,274,274,274,278,268,0,259,279,267],
[260,288,283,295,289,290,292,0,288,286],
[260,271,267,272,281,271,272,263,0,269],
[276,290,282,278,281,289,284,265,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,289,280,295,282,266,301,271,305],
[257,0,273,254,286,250,249,255,277,266],
[262,278,0,269,289,280,262,274,266,291],
[271,297,282,0,293,284,286,297,266,274],
[256,265,262,258,0,251,248,254,252,281],
[269,301,271,267,300,0,259,278,273,291],
[285,302,289,265,303,292,0,294,276,293],
[250,296,277,254,297,273,257,0,250,290],
[280,274,285,285,299,278,275,301,0,291],
[246,285,260,277,270,260,258,261,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,318,292,312,268,286,295,308,319],
[233,0,296,259,271,240,264,226,269,274],
[233,255,0,248,274,255,263,260,263,266],
[259,292,303,0,294,257,280,282,295,291],
[239,280,277,257,0,285,258,266,273,286],
[283,311,296,294,266,0,278,276,282,307],
[265,287,288,271,293,273,0,265,301,299],
[256,325,291,269,285,275,286,0,267,304],
[243,282,288,256,278,269,250,284,0,296],
[232,277,285,260,265,244,252,247,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,307,291,307,258,257,306,339,325],
[261,0,270,222,305,277,254,236,271,340],
[244,281,0,272,256,278,239,258,310,344],
[260,329,279,0,288,275,291,292,311,343],
[244,246,295,263,0,212,206,280,273,277],
[293,274,273,276,339,0,255,222,255,329],
[294,297,312,260,345,296,0,209,292,332],
[245,315,293,259,271,329,342,0,294,313],
[212,280,241,240,278,296,259,257,0,328],
[226,211,207,208,274,222,219,238,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,275,295,273,268,299,285,254,283],
[251,0,254,288,280,270,267,252,254,257],
[276,297,0,280,259,262,249,254,254,252],
[256,263,271,0,279,264,262,259,260,255],
[278,271,292,272,0,260,262,274,250,275],
[283,281,289,287,291,0,280,287,279,265],
[252,284,302,289,289,271,0,286,272,271],
[266,299,297,292,277,264,265,0,266,265],
[297,297,297,291,301,272,279,285,0,281],
[268,294,299,296,276,286,280,286,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,281,280,291,297,279,284,293,287],
[279,0,282,276,292,289,288,280,260,277],
[270,269,0,260,262,269,261,273,272,267],
[271,275,291,0,302,289,284,276,273,290],
[260,259,289,249,0,285,250,270,262,270],
[254,262,282,262,266,0,275,262,279,264],
[272,263,290,267,301,276,0,275,278,263],
[267,271,278,275,281,289,276,0,268,278],
[258,291,279,278,289,272,273,283,0,257],
[264,274,284,261,281,287,288,273,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,221,278,258,270,245,227,239,265],
[284,0,241,266,236,293,246,244,226,256],
[330,310,0,306,310,311,272,280,291,292],
[273,285,245,0,259,308,249,257,224,258],
[293,315,241,292,0,294,233,257,259,272],
[281,258,240,243,257,0,251,231,249,243],
[306,305,279,302,318,300,0,270,293,280],
[324,307,271,294,294,320,281,0,289,284],
[312,325,260,327,292,302,258,262,0,275],
[286,295,259,293,279,308,271,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,266,273,270,276,273,270,259,290],
[298,0,264,262,286,297,287,272,255,277],
[285,287,0,277,278,289,292,284,273,271],
[278,289,274,0,281,290,289,280,279,278],
[281,265,273,270,0,272,288,277,247,292],
[275,254,262,261,279,0,278,260,262,277],
[278,264,259,262,263,273,0,268,245,283],
[281,279,267,271,274,291,283,0,281,296],
[292,296,278,272,304,289,306,270,0,289],
[261,274,280,273,259,274,268,255,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,251,263,255,256,287,261,301,257],
[275,0,271,269,267,245,291,268,282,263],
[300,280,0,271,279,255,308,275,310,273],
[288,282,280,0,281,277,305,257,323,275],
[296,284,272,270,0,251,296,274,311,268],
[295,306,296,274,300,0,310,284,300,295],
[264,260,243,246,255,241,0,260,298,236],
[290,283,276,294,277,267,291,0,305,284],
[250,269,241,228,240,251,253,246,0,248],
[294,288,278,276,283,256,315,267,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,268,262,282,280,272,286,263,270],
[284,0,250,255,295,277,262,264,286,257],
[283,301,0,271,283,286,283,297,278,261],
[289,296,280,0,288,306,279,306,292,268],
[269,256,268,263,0,267,266,286,259,276],
[271,274,265,245,284,0,275,294,250,265],
[279,289,268,272,285,276,0,283,266,269],
[265,287,254,245,265,257,268,0,267,255],
[288,265,273,259,292,301,285,284,0,268],
[281,294,290,283,275,286,282,296,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,274,276,260,267,302,282,246,259],
[279,0,283,274,290,296,297,319,258,259],
[277,268,0,253,271,266,317,268,266,262],
[275,277,298,0,275,212,322,293,261,266],
[291,261,280,276,0,270,314,294,240,260],
[284,255,285,339,281,0,343,302,297,272],
[249,254,234,229,237,208,0,231,241,221],
[269,232,283,258,257,249,320,0,269,228],
[305,293,285,290,311,254,310,282,0,293],
[292,292,289,285,291,279,330,323,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,269,278,278,295,268,266,273,267],
[254,0,250,250,254,271,248,242,257,253],
[282,301,0,273,288,283,269,280,288,277],
[273,301,278,0,283,290,271,266,275,276],
[273,297,263,268,0,281,274,264,270,281],
[256,280,268,261,270,0,261,267,275,274],
[283,303,282,280,277,290,0,262,266,273],
[285,309,271,285,287,284,289,0,256,292],
[278,294,263,276,281,276,285,295,0,281],
[284,298,274,275,270,277,278,259,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,282,275,279,291,290,269,312,281],
[255,0,261,261,248,267,287,255,290,263],
[269,290,0,256,275,269,283,274,274,289],
[276,290,295,0,270,290,281,281,293,292],
[272,303,276,281,0,285,289,280,297,301],
[260,284,282,261,266,0,267,270,274,287],
[261,264,268,270,262,284,0,274,293,283],
[282,296,277,270,271,281,277,0,283,287],
[239,261,277,258,254,277,258,268,0,253],
[270,288,262,259,250,264,268,264,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,257,222,305,281,292,242,256,226],
[269,0,291,259,321,294,281,270,275,276],
[294,260,0,256,274,277,291,282,271,268],
[329,292,295,0,304,293,305,271,312,262],
[246,230,277,247,0,288,254,252,264,258],
[270,257,274,258,263,0,269,247,271,263],
[259,270,260,246,297,282,0,285,274,272],
[309,281,269,280,299,304,266,0,294,270],
[295,276,280,239,287,280,277,257,0,285],
[325,275,283,289,293,288,279,281,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,257,270,286,262,289,247,268,261],
[284,0,251,257,296,269,275,251,270,269],
[294,300,0,288,289,288,321,282,271,288],
[281,294,263,0,286,270,285,241,269,250],
[265,255,262,265,0,261,293,255,255,262],
[289,282,263,281,290,0,310,273,258,259],
[262,276,230,266,258,241,0,253,247,239],
[304,300,269,310,296,278,298,0,286,264],
[283,281,280,282,296,293,304,265,0,281],
[290,282,263,301,289,292,312,287,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,262,286,300,292,271,279,235,283],
[295,0,291,314,304,312,280,268,281,299],
[289,260,0,296,271,283,260,267,256,280],
[265,237,255,0,279,295,245,249,230,280],
[251,247,280,272,0,277,266,270,234,272],
[259,239,268,256,274,0,239,261,245,265],
[280,271,291,306,285,312,0,273,269,306],
[272,283,284,302,281,290,278,0,280,292],
[316,270,295,321,317,306,282,271,0,304],
[268,252,271,271,279,286,245,259,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,267,292,276,289,289,285,273,272],
[274,0,255,268,280,294,282,284,287,276],
[284,296,0,292,291,299,281,292,274,278],
[259,283,259,0,291,294,288,284,276,280],
[275,271,260,260,0,296,277,286,267,274],
[262,257,252,257,255,0,267,277,255,251],
[262,269,270,263,274,284,0,287,287,259],
[266,267,259,267,265,274,264,0,260,273],
[278,264,277,275,284,296,264,291,0,283],
[279,275,273,271,277,300,292,278,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,294,274,288,282,281,295,293,284],
[273,0,294,264,293,274,259,285,291,281],
[257,257,0,255,264,265,247,267,281,279],
[277,287,296,0,277,282,256,294,282,272],
[263,258,287,274,0,292,259,267,274,259],
[269,277,286,269,259,0,237,278,295,279],
[270,292,304,295,292,314,0,304,308,280],
[256,266,284,257,284,273,247,0,279,265],
[258,260,270,269,277,256,243,272,0,265],
[267,270,272,279,292,272,271,286,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,354,321,307,290,279,306,265,289],
[289,0,284,322,273,314,260,278,253,310],
[197,267,0,272,279,265,250,285,273,286],
[230,229,279,0,257,251,232,257,232,256],
[244,278,272,294,0,266,259,282,249,272],
[261,237,286,300,285,0,273,253,244,259],
[272,291,301,319,292,278,0,297,276,308],
[245,273,266,294,269,298,254,0,247,303],
[286,298,278,319,302,307,275,304,0,306],
[262,241,265,295,279,292,243,248,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,283,295,281,288,272,313,286,263],
[279,0,262,291,283,285,275,295,291,276],
[268,289,0,316,278,293,281,301,300,271],
[256,260,235,0,280,272,267,274,264,261],
[270,268,273,271,0,285,261,287,297,264],
[263,266,258,279,266,0,270,296,288,277],
[279,276,270,284,290,281,0,303,288,263],
[238,256,250,277,264,255,248,0,285,255],
[265,260,251,287,254,263,263,266,0,261],
[288,275,280,290,287,274,288,296,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,280,306,269,271,278,266,246,251],
[304,0,289,325,301,288,313,290,282,268],
[271,262,0,271,271,261,300,282,271,240],
[245,226,280,0,252,216,253,231,260,256],
[282,250,280,299,0,275,304,252,286,245],
[280,263,290,335,276,0,296,275,278,260],
[273,238,251,298,247,255,0,251,277,245],
[285,261,269,320,299,276,300,0,291,276],
[305,269,280,291,265,273,274,260,0,260],
[300,283,311,295,306,291,306,275,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,283,292,296,291,282,287,282,279],
[293,0,293,298,295,274,278,280,284,274],
[268,258,0,275,270,265,267,279,272,274],
[259,253,276,0,274,255,269,269,272,267],
[255,256,281,277,0,293,270,257,271,275],
[260,277,286,296,258,0,258,275,270,286],
[269,273,284,282,281,293,0,298,276,272],
[264,271,272,282,294,276,253,0,274,274],
[269,267,279,279,280,281,275,277,0,267],
[272,277,277,284,276,265,279,277,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,297,256,260,284,290,271,286,300],
[262,0,269,283,240,257,287,287,266,281],
[254,282,0,285,279,276,286,293,270,287],
[295,268,266,0,247,278,274,279,269,286],
[291,311,272,304,0,289,288,290,288,282],
[267,294,275,273,262,0,289,293,284,280],
[261,264,265,277,263,262,0,279,273,279],
[280,264,258,272,261,258,272,0,266,283],
[265,285,281,282,263,267,278,285,0,276],
[251,270,264,265,269,271,272,268,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,270,307,283,289,279,272,317,310],
[256,0,264,262,269,259,253,279,286,279],
[281,287,0,282,263,286,254,283,306,274],
[244,289,269,0,264,253,247,291,304,277],
[268,282,288,287,0,286,258,267,279,268],
[262,292,265,298,265,0,264,283,302,252],
[272,298,297,304,293,287,0,309,335,282],
[279,272,268,260,284,268,242,0,302,276],
[234,265,245,247,272,249,216,249,0,261],
[241,272,277,274,283,299,269,275,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,287,277,284,281,273,273,266,269],
[280,0,283,291,265,268,285,275,273,278],
[264,268,0,270,258,270,274,268,265,250],
[274,260,281,0,264,276,282,267,277,264],
[267,286,293,287,0,272,304,285,299,284],
[270,283,281,275,279,0,280,278,272,268],
[278,266,277,269,247,271,0,264,259,249],
[278,276,283,284,266,273,287,0,261,262],
[285,278,286,274,252,279,292,290,0,279],
[282,273,301,287,267,283,302,289,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,232,291,281,259,270,277,279,271],
[290,0,279,295,275,261,286,281,266,272],
[319,272,0,309,289,268,262,281,285,281],
[260,256,242,0,267,240,235,252,254,266],
[270,276,262,284,0,252,272,265,254,263],
[292,290,283,311,299,0,275,291,283,289],
[281,265,289,316,279,276,0,294,295,273],
[274,270,270,299,286,260,257,0,272,258],
[272,285,266,297,297,268,256,279,0,291],
[280,279,270,285,288,262,278,293,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,271,323,260,254,257,324,190,267],
[243,0,310,282,260,243,254,292,227,289],
[280,241,0,243,246,252,240,246,278,280],
[228,269,308,0,219,279,279,297,240,256],
[291,291,305,332,0,315,305,282,227,344],
[297,308,299,272,236,0,283,324,215,332],
[294,297,311,272,246,268,0,351,235,388],
[227,259,305,254,269,227,200,0,242,262],
[361,324,273,311,324,336,316,309,0,316],
[284,262,271,295,207,219,163,289,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,301,307,289,279,277,270,290,301],
[257,0,271,297,255,261,259,258,292,279],
[250,280,0,295,281,287,272,267,284,297],
[244,254,256,0,259,233,243,247,263,274],
[262,296,270,292,0,265,264,264,270,271],
[272,290,264,318,286,0,277,265,272,299],
[274,292,279,308,287,274,0,284,282,301],
[281,293,284,304,287,286,267,0,282,306],
[261,259,267,288,281,279,269,269,0,288],
[250,272,254,277,280,252,250,245,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,307,290,289,283,314,298,289,236],
[278,0,303,287,281,289,315,305,285,249],
[244,248,0,232,276,253,258,318,258,223],
[261,264,319,0,270,296,302,292,253,271],
[262,270,275,281,0,297,274,264,301,279],
[268,262,298,255,254,0,292,305,276,252],
[237,236,293,249,277,259,0,287,232,207],
[253,246,233,259,287,246,264,0,248,289],
[262,266,293,298,250,275,319,303,0,239],
[315,302,328,280,272,299,344,262,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,260,271,272,255,276,285,262,264],
[283,0,268,276,287,288,271,284,287,272],
[291,283,0,274,282,274,276,283,294,294],
[280,275,277,0,290,303,299,291,298,280],
[279,264,269,261,0,281,260,267,272,272],
[296,263,277,248,270,0,280,272,284,265],
[275,280,275,252,291,271,0,293,280,277],
[266,267,268,260,284,279,258,0,272,261],
[289,264,257,253,279,267,271,279,0,272],
[287,279,257,271,279,286,274,290,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,278,257,263,278,275,288,289],
[272,0,275,281,272,286,264,281,275,280],
[276,276,0,289,267,283,265,285,277,278],
[273,270,262,0,279,281,286,275,280,292],
[294,279,284,272,0,292,276,273,308,285],
[288,265,268,270,259,0,267,283,283,289],
[273,287,286,265,275,284,0,291,292,281],
[276,270,266,276,278,268,260,0,273,275],
[263,276,274,271,243,268,259,278,0,275],
[262,271,273,259,266,262,270,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,326,347,357,322,238,241,346,340],
[277,0,290,242,255,290,222,327,279,309],
[225,261,0,242,241,322,276,293,330,241],
[204,309,309,0,306,286,222,307,311,289],
[194,296,310,245,0,323,240,260,314,259],
[229,261,229,265,228,0,261,242,246,274],
[313,329,275,329,311,290,0,291,401,292],
[310,224,258,244,291,309,260,0,292,291],
[205,272,221,240,237,305,150,259,0,272],
[211,242,310,262,292,277,259,260,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,296,264,281,300,298,265,290,313],
[250,0,247,259,258,279,296,247,291,267],
[255,304,0,262,261,283,293,254,287,266],
[287,292,289,0,271,263,286,272,291,274],
[270,293,290,280,0,269,282,261,294,275],
[251,272,268,288,282,0,309,278,304,274],
[253,255,258,265,269,242,0,258,257,246],
[286,304,297,279,290,273,293,0,289,276],
[261,260,264,260,257,247,294,262,0,251],
[238,284,285,277,276,277,305,275,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,291,221,269,248,301,243,256,257],
[290,0,281,242,302,228,262,268,276,234],
[260,270,0,234,241,213,249,219,211,203],
[330,309,317,0,335,276,293,246,282,270],
[282,249,310,216,0,250,235,229,260,237],
[303,323,338,275,301,0,286,267,271,273],
[250,289,302,258,316,265,0,235,294,264],
[308,283,332,305,322,284,316,0,271,299],
[295,275,340,269,291,280,257,280,0,313],
[294,317,348,281,314,278,287,252,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,264,286,274,285,270,289,300],
[274,0,282,283,284,299,283,295,302,294],
[266,269,0,262,273,259,270,281,278,281],
[287,268,289,0,291,270,280,297,298,288],
[265,267,278,260,0,249,278,270,281,277],
[277,252,292,281,302,0,273,297,291,279],
[266,268,281,271,273,278,0,275,271,277],
[281,256,270,254,281,254,276,0,286,277],
[262,249,273,253,270,260,280,265,0,263],
[251,257,270,263,274,272,274,274,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,305,245,265,303,285,243,283,225],
[287,0,281,247,263,261,263,225,242,242],
[246,270,0,246,289,264,166,207,265,203],
[306,304,305,0,364,240,264,241,281,204],
[286,288,262,187,0,284,268,202,345,204],
[248,290,287,311,267,0,288,271,310,228],
[266,288,385,287,283,263,0,266,327,285],
[308,326,344,310,349,280,285,0,305,263],
[268,309,286,270,206,241,224,246,0,266],
[326,309,348,347,347,323,266,288,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,277,283,266,277,268,311,278,277],
[277,0,262,282,264,247,281,261,257,279],
[274,289,0,278,263,267,254,287,273,265],
[268,269,273,0,275,270,282,284,271,283],
[285,287,288,276,0,276,276,296,272,276],
[274,304,284,281,275,0,255,293,275,284],
[283,270,297,269,275,296,0,298,278,288],
[240,290,264,267,255,258,253,0,270,278],
[273,294,278,280,279,276,273,281,0,281],
[274,272,286,268,275,267,263,273,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,297,335,232,284,256,296,347,258],
[346,0,360,283,341,311,290,312,354,270],
[254,191,0,321,279,262,244,284,272,271],
[216,268,230,0,267,251,215,276,316,225],
[319,210,272,284,0,298,262,287,320,283],
[267,240,289,300,253,0,231,242,322,261],
[295,261,307,336,289,320,0,346,357,312],
[255,239,267,275,264,309,205,0,287,284],
[204,197,279,235,231,229,194,264,0,209],
[293,281,280,326,268,290,239,267,342,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,300,290,266,285,315,304,259,271],
[294,0,257,305,239,234,271,248,244,310],
[251,294,0,223,237,222,316,275,244,251],
[261,246,328,0,253,236,306,287,242,293],
[285,312,314,298,0,250,316,292,262,313],
[266,317,329,315,301,0,324,318,285,313],
[236,280,235,245,235,227,0,266,219,286],
[247,303,276,264,259,233,285,0,245,296],
[292,307,307,309,289,266,332,306,0,299],
[280,241,300,258,238,238,265,255,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,267,292,260,281,272,352,311,314],
[254,0,299,312,290,345,292,318,293,292],
[284,252,0,289,251,268,289,330,271,278],
[259,239,262,0,278,292,269,305,275,302],
[291,261,300,273,0,281,245,300,320,270],
[270,206,283,259,270,0,265,324,271,306],
[279,259,262,282,306,286,0,324,308,274],
[199,233,221,246,251,227,227,0,278,264],
[240,258,280,276,231,280,243,273,0,244],
[237,259,273,249,281,245,277,287,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,284,267,268,257,295,269,303,262],
[261,0,269,275,247,257,273,258,295,260],
[267,282,0,262,268,267,287,277,294,278],
[284,276,289,0,248,256,275,273,291,289],
[283,304,283,303,0,280,308,274,297,287],
[294,294,284,295,271,0,284,283,303,299],
[256,278,264,276,243,267,0,267,287,281],
[282,293,274,278,277,268,284,0,301,273],
[248,256,257,260,254,248,264,250,0,267],
[289,291,273,262,264,252,270,278,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,295,280,272,291,273,307,275,288],
[255,0,271,259,278,264,256,259,271,261],
[256,280,0,260,278,283,249,278,273,269],
[271,292,291,0,284,283,268,269,262,275],
[279,273,273,267,0,293,280,282,281,266],
[260,287,268,268,258,0,269,285,275,269],
[278,295,302,283,271,282,0,287,281,281],
[244,292,273,282,269,266,264,0,256,280],
[276,280,278,289,270,276,270,295,0,291],
[263,290,282,276,285,282,270,271,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,284,298,277,268,290,285,298,273],
[259,0,255,270,263,251,274,269,277,267],
[267,296,0,277,276,281,298,289,282,280],
[253,281,274,0,268,252,294,265,271,278],
[274,288,275,283,0,266,299,292,305,276],
[283,300,270,299,285,0,295,299,294,281],
[261,277,253,257,252,256,0,282,268,258],
[266,282,262,286,259,252,269,0,283,262],
[253,274,269,280,246,257,283,268,0,267],
[278,284,271,273,275,270,293,289,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,283,275,321,306,293,312,305,267],
[257,0,248,266,283,272,261,285,272,233],
[268,303,0,290,291,286,277,297,293,277],
[276,285,261,0,283,276,262,300,267,249],
[230,268,260,268,0,272,250,257,268,238],
[245,279,265,275,279,0,270,282,265,253],
[258,290,274,289,301,281,0,286,259,251],
[239,266,254,251,294,269,265,0,246,226],
[246,279,258,284,283,286,292,305,0,270],
[284,318,274,302,313,298,300,325,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,289,233,274,274,249,276,234,271],
[281,0,283,263,253,289,246,275,286,278],
[262,268,0,254,249,267,256,296,267,252],
[318,288,297,0,301,289,261,346,281,282],
[277,298,302,250,0,300,254,293,296,259],
[277,262,284,262,251,0,257,301,264,254],
[302,305,295,290,297,294,0,300,271,292],
[275,276,255,205,258,250,251,0,258,258],
[317,265,284,270,255,287,280,293,0,265],
[280,273,299,269,292,297,259,293,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,263,275,256,289,266,279,275,292],
[273,0,264,287,257,277,269,276,266,290],
[288,287,0,270,277,276,282,276,269,285],
[276,264,281,0,266,286,281,266,263,269],
[295,294,274,285,0,286,263,269,271,288],
[262,274,275,265,265,0,267,273,267,271],
[285,282,269,270,288,284,0,261,272,276],
[272,275,275,285,282,278,290,0,281,285],
[276,285,282,288,280,284,279,270,0,275],
[259,261,266,282,263,280,275,266,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,258,257,263,252,257,284,264,277],
[291,0,273,302,301,286,304,304,274,292],
[293,278,0,310,287,254,269,287,280,314],
[294,249,241,0,263,263,271,263,275,284],
[288,250,264,288,0,241,278,277,269,282],
[299,265,297,288,310,0,300,294,282,310],
[294,247,282,280,273,251,0,280,281,277],
[267,247,264,288,274,257,271,0,268,272],
[287,277,271,276,282,269,270,283,0,289],
[274,259,237,267,269,241,274,279,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,296,274,308,239,309,290,259,290],
[232,0,284,277,253,249,255,283,252,277],
[255,267,0,256,260,250,273,294,191,239],
[277,274,295,0,294,289,302,327,222,262],
[243,298,291,257,0,254,297,246,244,256],
[312,302,301,262,297,0,317,316,288,291],
[242,296,278,249,254,234,0,269,204,241],
[261,268,257,224,305,235,282,0,240,272],
[292,299,360,329,307,263,347,311,0,276],
[261,274,312,289,295,260,310,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,281,273,300,274,280,288,268,260],
[278,0,281,282,298,263,277,301,279,257],
[270,270,0,274,287,279,274,308,254,280],
[278,269,277,0,282,252,266,274,245,241],
[251,253,264,269,0,255,259,294,245,243],
[277,288,272,299,296,0,262,289,257,255],
[271,274,277,285,292,289,0,288,271,272],
[263,250,243,277,257,262,263,0,255,238],
[283,272,297,306,306,294,280,296,0,262],
[291,294,271,310,308,296,279,313,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,289,296,290,286,295,277,287,253],
[266,0,266,282,264,286,272,261,252,264],
[262,285,0,293,280,271,263,270,271,265],
[255,269,258,0,249,254,273,236,281,246],
[261,287,271,302,0,264,266,258,273,270],
[265,265,280,297,287,0,258,283,279,273],
[256,279,288,278,285,293,0,276,268,277],
[274,290,281,315,293,268,275,0,281,276],
[264,299,280,270,278,272,283,270,0,275],
[298,287,286,305,281,278,274,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,283,296,302,297,269,251,266,325],
[262,0,270,264,300,329,283,270,295,321],
[268,281,0,284,284,303,265,264,281,345],
[255,287,267,0,327,300,289,288,297,326],
[249,251,267,224,0,339,246,245,275,307],
[254,222,248,251,212,0,239,266,245,290],
[282,268,286,262,305,312,0,290,284,306],
[300,281,287,263,306,285,261,0,245,332],
[285,256,270,254,276,306,267,306,0,297],
[226,230,206,225,244,261,245,219,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,309,269,290,289,271,285,292,289],
[275,0,302,278,273,259,272,272,278,276],
[242,249,0,236,253,244,253,248,268,249],
[282,273,315,0,283,289,278,269,296,292],
[261,278,298,268,0,269,282,260,278,252],
[262,292,307,262,282,0,270,270,277,278],
[280,279,298,273,269,281,0,279,280,273],
[266,279,303,282,291,281,272,0,280,282],
[259,273,283,255,273,274,271,271,0,274],
[262,275,302,259,299,273,278,269,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,298,293,260,280,279,283,239,277],
[272,0,277,261,256,289,275,273,283,279],
[253,274,0,292,257,286,300,263,261,286],
[258,290,259,0,259,271,277,276,256,284],
[291,295,294,292,0,301,281,281,272,264],
[271,262,265,280,250,0,235,262,263,254],
[272,276,251,274,270,316,0,278,257,285],
[268,278,288,275,270,289,273,0,256,294],
[312,268,290,295,279,288,294,295,0,272],
[274,272,265,267,287,297,266,257,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,298,296,306,305,264,289,279,295],
[243,0,301,256,282,265,259,293,271,295],
[253,250,0,256,280,266,260,285,256,287],
[255,295,295,0,291,285,245,282,266,298],
[245,269,271,260,0,252,238,285,247,268],
[246,286,285,266,299,0,280,279,255,301],
[287,292,291,306,313,271,0,306,299,328],
[262,258,266,269,266,272,245,0,248,264],
[272,280,295,285,304,296,252,303,0,329],
[256,256,264,253,283,250,223,287,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,285,267,236,272,275,298,271,274],
[262,0,275,240,249,248,258,286,272,247],
[266,276,0,247,205,244,259,269,247,227],
[284,311,304,0,267,276,286,287,287,251],
[315,302,346,284,0,288,297,306,286,267],
[279,303,307,275,263,0,263,316,279,282],
[276,293,292,265,254,288,0,285,283,275],
[253,265,282,264,245,235,266,0,260,250],
[280,279,304,264,265,272,268,291,0,256],
[277,304,324,300,284,269,276,301,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,283,302,295,290,272,291,275,274],
[273,0,303,300,304,274,301,289,287,273],
[268,248,0,282,265,288,289,279,261,270],
[249,251,269,0,275,277,284,282,257,272],
[256,247,286,276,0,270,290,259,278,273],
[261,277,263,274,281,0,275,273,272,279],
[279,250,262,267,261,276,0,285,257,259],
[260,262,272,269,292,278,266,0,262,266],
[276,264,290,294,273,279,294,289,0,295],
[277,278,281,279,278,272,292,285,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,262,267,283,300,333,282,299,243],
[274,0,242,249,262,291,285,263,346,231],
[289,309,0,288,302,324,291,347,353,269],
[284,302,263,0,258,320,316,301,325,253],
[268,289,249,293,0,306,290,259,328,280],
[251,260,227,231,245,0,259,262,273,232],
[218,266,260,235,261,292,0,270,294,218],
[269,288,204,250,292,289,281,0,323,232],
[252,205,198,226,223,278,257,228,0,199],
[308,320,282,298,271,319,333,319,352,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,282,265,260,274,278,261,273,296],
[283,0,281,289,285,269,273,283,279,295],
[269,270,0,273,282,272,280,276,286,288],
[286,262,278,0,280,269,293,283,284,305],
[291,266,269,271,0,283,284,264,266,301],
[277,282,279,282,268,0,274,290,292,297],
[273,278,271,258,267,277,0,281,278,298],
[290,268,275,268,287,261,270,0,268,293],
[278,272,265,267,285,259,273,283,0,277],
[255,256,263,246,250,254,253,258,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,268,279,285,286,246,251,260,265],
[277,0,284,262,286,277,258,285,287,267],
[283,267,0,267,293,285,287,274,284,275],
[272,289,284,0,285,280,263,268,234,279],
[266,265,258,266,0,264,280,253,260,276],
[265,274,266,271,287,0,250,275,269,289],
[305,293,264,288,271,301,0,290,271,285],
[300,266,277,283,298,276,261,0,259,283],
[291,264,267,317,291,282,280,292,0,279],
[286,284,276,272,275,262,266,268,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,255,275,246,254,264,265,255,250],
[265,0,253,260,266,282,259,262,256,239],
[296,298,0,271,253,290,287,287,270,286],
[276,291,280,0,256,268,271,295,269,262],
[305,285,298,295,0,291,302,287,288,273],
[297,269,261,283,260,0,251,269,248,268],
[287,292,264,280,249,300,0,301,268,267],
[286,289,264,256,264,282,250,0,257,275],
[296,295,281,282,263,303,283,294,0,281],
[301,312,265,289,278,283,284,276,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,261,268,281,275,270,268,280,269],
[263,0,272,286,289,265,247,261,245,235],
[290,279,0,285,300,268,251,299,276,267],
[283,265,266,0,289,266,280,260,279,259],
[270,262,251,262,0,261,248,271,265,260],
[276,286,283,285,290,0,258,280,268,272],
[281,304,300,271,303,293,0,313,292,299],
[283,290,252,291,280,271,238,0,259,271],
[271,306,275,272,286,283,259,292,0,298],
[282,316,284,292,291,279,252,280,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,270,298,302,278,270,278,276,262],
[257,0,250,298,280,262,288,260,296,273],
[281,301,0,303,273,273,268,251,315,256],
[253,253,248,0,249,222,268,260,256,219],
[249,271,278,302,0,265,246,229,258,284],
[273,289,278,329,286,0,310,276,284,236],
[281,263,283,283,305,241,0,288,286,280],
[273,291,300,291,322,275,263,0,302,281],
[275,255,236,295,293,267,265,249,0,251],
[289,278,295,332,267,315,271,270,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,287,264,287,273,275,266,259,290],
[263,0,262,283,275,265,254,257,274,286],
[264,289,0,270,296,257,263,261,273,280],
[287,268,281,0,298,269,275,264,274,285],
[264,276,255,253,0,265,266,256,259,278],
[278,286,294,282,286,0,266,266,262,283],
[276,297,288,276,285,285,0,281,269,295],
[285,294,290,287,295,285,270,0,279,315],
[292,277,278,277,292,289,282,272,0,268],
[261,265,271,266,273,268,256,236,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,293,305,313,279,255,287,296,287],
[255,0,290,247,274,279,246,239,281,254],
[258,261,0,270,282,257,267,256,275,253],
[246,304,281,0,284,278,275,247,267,239],
[238,277,269,267,0,275,249,270,273,266],
[272,272,294,273,276,0,274,251,268,279],
[296,305,284,276,302,277,0,264,277,254],
[264,312,295,304,281,300,287,0,321,268],
[255,270,276,284,278,283,274,230,0,276],
[264,297,298,312,285,272,297,283,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,263,296,266,280,266,254,272],
[281,0,265,284,300,276,284,263,259,252],
[282,286,0,285,310,280,290,278,268,284],
[288,267,266,0,316,269,296,276,263,274],
[255,251,241,235,0,242,278,242,262,245],
[285,275,271,282,309,0,286,265,273,271],
[271,267,261,255,273,265,0,258,266,257],
[285,288,273,275,309,286,293,0,284,257],
[297,292,283,288,289,278,285,267,0,277],
[279,299,267,277,306,280,294,294,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,298,289,277,271,276,279,285,282],
[272,0,303,296,278,282,273,276,290,269],
[253,248,0,289,252,272,259,251,254,248],
[262,255,262,0,241,259,247,248,241,240],
[274,273,299,310,0,279,245,273,285,279],
[280,269,279,292,272,0,255,265,261,272],
[275,278,292,304,306,296,0,290,283,289],
[272,275,300,303,278,286,261,0,293,278],
[266,261,297,310,266,290,268,258,0,287],
[269,282,303,311,272,279,262,273,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,255,257,247,233,259,254,272,276],
[288,0,284,267,270,284,263,275,291,275],
[296,267,0,301,276,273,267,271,300,283],
[294,284,250,0,268,266,271,274,273,287],
[304,281,275,283,0,285,276,293,286,288],
[318,267,278,285,266,0,280,287,295,302],
[292,288,284,280,275,271,0,282,301,272],
[297,276,280,277,258,264,269,0,304,285],
[279,260,251,278,265,256,250,247,0,258],
[275,276,268,264,263,249,279,266,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,288,251,267,298,249,255,240,219],
[257,0,240,244,280,224,251,221,229,243],
[263,311,0,287,285,278,273,284,238,273],
[300,307,264,0,303,286,280,252,285,281],
[284,271,266,248,0,274,238,297,242,252],
[253,327,273,265,277,0,278,254,253,264],
[302,300,278,271,313,273,0,250,260,272],
[296,330,267,299,254,297,301,0,274,310],
[311,322,313,266,309,298,291,277,0,293],
[332,308,278,270,299,287,279,241,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,278,260,284,275,272,268,301,286],
[277,0,250,241,265,267,261,252,298,278],
[273,301,0,259,274,262,276,272,281,289],
[291,310,292,0,280,266,299,288,295,274],
[267,286,277,271,0,277,293,262,292,272],
[276,284,289,285,274,0,307,279,324,291],
[279,290,275,252,258,244,0,267,278,275],
[283,299,279,263,289,272,284,0,296,268],
[250,253,270,256,259,227,273,255,0,269],
[265,273,262,277,279,260,276,283,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,260,251,264,308,285,250,290,291],
[287,0,251,255,246,305,305,268,290,306],
[291,300,0,281,280,303,315,257,291,310],
[300,296,270,0,267,286,309,278,311,289],
[287,305,271,284,0,304,331,263,285,313],
[243,246,248,265,247,0,271,245,289,263],
[266,246,236,242,220,280,0,231,245,255],
[301,283,294,273,288,306,320,0,315,308],
[261,261,260,240,266,262,306,236,0,284],
[260,245,241,262,238,288,296,243,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,278,290,275,282,273,274,276,295],
[262,0,275,273,280,281,297,270,270,273],
[273,276,0,285,265,271,296,267,275,284],
[261,278,266,0,263,268,284,268,265,261],
[276,271,286,288,0,268,271,242,273,275],
[269,270,280,283,283,0,282,271,278,282],
[278,254,255,267,280,269,0,252,250,269],
[277,281,284,283,309,280,299,0,268,283],
[275,281,276,286,278,273,301,283,0,300],
[256,278,267,290,276,269,282,268,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,284,281,274,282,291,311,297,278],
[284,0,259,289,289,271,278,291,288,242],
[267,292,0,289,296,284,292,314,271,282],
[270,262,262,0,275,258,247,296,268,276],
[277,262,255,276,0,270,276,281,272,267],
[269,280,267,293,281,0,280,303,264,282],
[260,273,259,304,275,271,0,306,253,250],
[240,260,237,255,270,248,245,0,272,239],
[254,263,280,283,279,287,298,279,0,285],
[273,309,269,275,284,269,301,312,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,347,322,301,322,282,239,300,276,326],
[204,0,260,177,285,245,212,240,230,237],
[229,291,0,218,311,280,263,267,245,298],
[250,374,333,0,314,264,313,291,252,301],
[229,266,240,237,0,280,272,225,266,251],
[269,306,271,287,271,0,198,234,245,308],
[312,339,288,238,279,353,0,310,266,316],
[251,311,284,260,326,317,241,0,288,312],
[275,321,306,299,285,306,285,263,0,335],
[225,314,253,250,300,243,235,239,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,254,250,269,261,228,285,269,258],
[267,0,279,263,262,278,234,301,277,262],
[297,272,0,291,290,295,259,325,303,278],
[301,288,260,0,321,301,270,322,271,285],
[282,289,261,230,0,273,250,289,240,274],
[290,273,256,250,278,0,250,279,267,265],
[323,317,292,281,301,301,0,327,295,270],
[266,250,226,229,262,272,224,0,250,261],
[282,274,248,280,311,284,256,301,0,264],
[293,289,273,266,277,286,281,290,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,295,275,289,268,282,290,274,280],
[268,0,272,274,287,263,272,288,305,286],
[256,279,0,288,287,293,266,302,276,280],
[276,277,263,0,294,281,246,284,272,258],
[262,264,264,257,0,267,262,274,243,261],
[283,288,258,270,284,0,289,270,286,282],
[269,279,285,305,289,262,0,286,292,295],
[261,263,249,267,277,281,265,0,297,288],
[277,246,275,279,308,265,259,254,0,284],
[271,265,271,293,290,269,256,263,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,255,279,271,297,286,272,282,282],
[267,0,260,273,266,270,250,286,267,260],
[296,291,0,286,294,282,266,291,287,288],
[272,278,265,0,241,260,255,274,274,262],
[280,285,257,310,0,277,263,277,279,273],
[254,281,269,291,274,0,263,296,289,266],
[265,301,285,296,288,288,0,296,291,289],
[279,265,260,277,274,255,255,0,274,278],
[269,284,264,277,272,262,260,277,0,260],
[269,291,263,289,278,285,262,273,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,295,367,222,330,256,370,224,405],
[255,0,222,184,184,146,256,260,187,295],
[256,329,0,368,223,289,220,255,217,328],
[184,367,183,0,184,327,254,258,147,403],
[329,367,328,367,0,325,257,364,293,402],
[221,405,262,224,226,0,260,331,261,405],
[295,295,331,297,294,291,0,369,262,332],
[181,291,296,293,187,220,182,0,219,334],
[327,364,334,404,258,290,289,332,0,405],
[146,256,223,148,149,146,219,217,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,256,258,294,252,252,266,246,280],
[278,0,291,268,275,282,270,257,273,260],
[295,260,0,267,279,274,259,267,276,260],
[293,283,284,0,275,275,254,268,264,270],
[257,276,272,276,0,307,250,256,281,266],
[299,269,277,276,244,0,274,272,250,266],
[299,281,292,297,301,277,0,289,264,295],
[285,294,284,283,295,279,262,0,260,275],
[305,278,275,287,270,301,287,291,0,270],
[271,291,291,281,285,285,256,276,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,284,270,272,275,285,276,281,276],
[269,0,297,251,266,260,256,262,281,257],
[267,254,0,255,281,257,264,258,294,252],
[281,300,296,0,270,269,277,274,287,275],
[279,285,270,281,0,281,274,276,280,258],
[276,291,294,282,270,0,270,262,289,280],
[266,295,287,274,277,281,0,286,308,276],
[275,289,293,277,275,289,265,0,283,264],
[270,270,257,264,271,262,243,268,0,243],
[275,294,299,276,293,271,275,287,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,280,226,247,228,250,246,250,245],
[303,0,266,224,284,225,304,266,251,228],
[271,285,0,209,249,174,358,245,230,192],
[325,327,342,0,307,307,248,284,250,283],
[304,267,302,244,0,228,285,228,268,227],
[323,326,377,244,323,0,322,320,325,227],
[301,247,193,303,266,229,0,285,267,228],
[305,285,306,267,323,231,266,0,251,266],
[301,300,321,301,283,226,284,300,0,320],
[306,323,359,268,324,324,323,285,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,281,265,253,293,275,282,262,267],
[290,0,253,265,291,281,275,285,292,284],
[270,298,0,256,316,306,280,314,298,292],
[286,286,295,0,276,246,270,304,302,305],
[298,260,235,275,0,278,256,297,294,300],
[258,270,245,305,273,0,255,276,282,247],
[276,276,271,281,295,296,0,304,270,268],
[269,266,237,247,254,275,247,0,242,232],
[289,259,253,249,257,269,281,309,0,240],
[284,267,259,246,251,304,283,319,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,305,250,280,318,313,297,277,282],
[270,0,265,248,292,297,318,296,286,300],
[246,286,0,282,292,307,285,284,288,289],
[301,303,269,0,310,301,319,322,280,335],
[271,259,259,241,0,300,294,283,271,321],
[233,254,244,250,251,0,245,270,263,266],
[238,233,266,232,257,306,0,277,259,295],
[254,255,267,229,268,281,274,0,244,289],
[274,265,263,271,280,288,292,307,0,310],
[269,251,262,216,230,285,256,262,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,275,282,258,296,252,271,280,321],
[278,0,272,290,283,295,273,275,278,313],
[276,279,0,289,276,281,290,258,282,307],
[269,261,262,0,250,281,260,259,270,282],
[293,268,275,301,0,301,301,302,293,305],
[255,256,270,270,250,0,262,260,257,279],
[299,278,261,291,250,289,0,262,260,286],
[280,276,293,292,249,291,289,0,268,286],
[271,273,269,281,258,294,291,283,0,300],
[230,238,244,269,246,272,265,265,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,287,308,304,292,296,290,273,305],
[272,0,267,279,291,287,250,274,261,281],
[264,284,0,310,294,303,275,307,294,313],
[243,272,241,0,268,259,267,280,280,287],
[247,260,257,283,0,277,254,280,255,281],
[259,264,248,292,274,0,269,253,267,272],
[255,301,276,284,297,282,0,290,274,274],
[261,277,244,271,271,298,261,0,269,275],
[278,290,257,271,296,284,277,282,0,289],
[246,270,238,264,270,279,277,276,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,259,295,278,283,247,271,264,256],
[265,0,269,326,282,283,263,250,266,262],
[292,282,0,300,261,285,247,250,252,267],
[256,225,251,0,277,266,234,236,265,224],
[273,269,290,274,0,298,243,263,275,266],
[268,268,266,285,253,0,240,277,262,263],
[304,288,304,317,308,311,0,304,266,272],
[280,301,301,315,288,274,247,0,285,302],
[287,285,299,286,276,289,285,266,0,264],
[295,289,284,327,285,288,279,249,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,270,275,299,294,277,285,284,280],
[260,0,265,261,278,261,258,268,265,253],
[281,286,0,270,290,285,276,271,277,281],
[276,290,281,0,283,289,285,274,289,284],
[252,273,261,268,0,278,260,254,268,268],
[257,290,266,262,273,0,264,257,279,290],
[274,293,275,266,291,287,0,278,277,287],
[266,283,280,277,297,294,273,0,281,288],
[267,286,274,262,283,272,274,270,0,277],
[271,298,270,267,283,261,264,263,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,286,280,278,275,271,277,276,282],
[272,0,281,271,284,279,271,283,282,276],
[265,270,0,281,272,271,273,269,278,277],
[271,280,270,0,266,294,292,285,287,279],
[273,267,279,285,0,285,272,287,283,286],
[276,272,280,257,266,0,271,270,268,272],
[280,280,278,259,279,280,0,276,282,288],
[274,268,282,266,264,281,275,0,269,270],
[275,269,273,264,268,283,269,282,0,270],
[269,275,274,272,265,279,263,281,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,264,256,266,270,302,265,290,270],
[284,0,256,266,287,278,288,268,281,289],
[287,295,0,271,301,282,302,276,291,289],
[295,285,280,0,286,280,287,271,298,276],
[285,264,250,265,0,276,284,256,283,274],
[281,273,269,271,275,0,279,264,288,277],
[249,263,249,264,267,272,0,266,279,271],
[286,283,275,280,295,287,285,0,284,282],
[261,270,260,253,268,263,272,267,0,267],
[281,262,262,275,277,274,280,269,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,247,252,249,258,314,244,292,268],
[315,0,306,278,266,316,315,311,307,286],
[304,245,0,256,303,316,322,304,286,286],
[299,273,295,0,294,313,298,276,295,327],
[302,285,248,257,0,326,335,268,309,323],
[293,235,235,238,225,0,280,232,246,265],
[237,236,229,253,216,271,0,227,278,225],
[307,240,247,275,283,319,324,0,286,273],
[259,244,265,256,242,305,273,265,0,254],
[283,265,265,224,228,286,326,278,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,256,298,273,262,264,293,267,268],
[278,0,255,304,276,269,273,286,250,279],
[295,296,0,294,268,275,273,270,279,290],
[253,247,257,0,275,282,261,262,258,288],
[278,275,283,276,0,278,294,288,266,296],
[289,282,276,269,273,0,290,273,260,281],
[287,278,278,290,257,261,0,273,272,292],
[258,265,281,289,263,278,278,0,258,267],
[284,301,272,293,285,291,279,293,0,286],
[283,272,261,263,255,270,259,284,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,281,260,285,292,269,280,299,281],
[280,0,286,265,275,282,257,276,291,289],
[270,265,0,277,286,287,277,264,303,263],
[291,286,274,0,290,272,263,295,304,269],
[266,276,265,261,0,272,251,265,286,259],
[259,269,264,279,279,0,260,284,276,264],
[282,294,274,288,300,291,0,290,296,280],
[271,275,287,256,286,267,261,0,286,288],
[252,260,248,247,265,275,255,265,0,258],
[270,262,288,282,292,287,271,263,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,261,313,254,288,258,284,285,279],
[260,0,274,293,273,287,267,279,280,272],
[290,277,0,304,274,299,280,300,290,292],
[238,258,247,0,248,279,262,261,260,251],
[297,278,277,303,0,300,271,285,290,277],
[263,264,252,272,251,0,252,260,271,265],
[293,284,271,289,280,299,0,275,292,274],
[267,272,251,290,266,291,276,0,253,281],
[266,271,261,291,261,280,259,298,0,285],
[272,279,259,300,274,286,277,270,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,274,274,241,244,259,272,248,232],
[285,0,256,300,265,275,265,276,272,239],
[277,295,0,304,283,268,269,281,279,287],
[277,251,247,0,253,224,253,284,300,213],
[310,286,268,298,0,286,285,296,293,283],
[307,276,283,327,265,0,282,316,316,263],
[292,286,282,298,266,269,0,315,300,240],
[279,275,270,267,255,235,236,0,258,227],
[303,279,272,251,258,235,251,293,0,235],
[319,312,264,338,268,288,311,324,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,282,241,259,281,265,266,255,292],
[267,0,296,260,295,281,295,262,286,299],
[269,255,0,260,276,292,294,240,258,278],
[310,291,291,0,256,306,298,280,277,315],
[292,256,275,295,0,280,281,283,269,301],
[270,270,259,245,271,0,280,238,231,291],
[286,256,257,253,270,271,0,247,251,292],
[285,289,311,271,268,313,304,0,286,312],
[296,265,293,274,282,320,300,265,0,308],
[259,252,273,236,250,260,259,239,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,274,292,304,295,273,296,278,283],
[261,0,254,289,287,293,290,282,261,283],
[277,297,0,275,289,272,291,287,261,287],
[259,262,276,0,267,288,284,278,243,269],
[247,264,262,284,0,243,263,258,246,259],
[256,258,279,263,308,0,266,281,241,275],
[278,261,260,267,288,285,0,294,261,278],
[255,269,264,273,293,270,257,0,258,270],
[273,290,290,308,305,310,290,293,0,295],
[268,268,264,282,292,276,273,281,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,275,270,272,284,277,277,269,264],
[270,0,259,266,271,292,262,273,282,288],
[276,292,0,261,283,287,281,283,290,295],
[281,285,290,0,274,284,268,290,284,282],
[279,280,268,277,0,289,266,266,281,298],
[267,259,264,267,262,0,254,265,276,262],
[274,289,270,283,285,297,0,281,294,292],
[274,278,268,261,285,286,270,0,281,277],
[282,269,261,267,270,275,257,270,0,282],
[287,263,256,269,253,289,259,274,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,282,276,270,277,269,280,257,273],
[284,0,277,292,274,264,281,264,261,266],
[269,274,0,272,266,245,273,289,259,270],
[275,259,279,0,265,259,266,263,250,282],
[281,277,285,286,0,259,288,280,257,261],
[274,287,306,292,292,0,300,283,286,275],
[282,270,278,285,263,251,0,276,261,288],
[271,287,262,288,271,268,275,0,258,257],
[294,290,292,301,294,265,290,293,0,285],
[278,285,281,269,290,276,263,294,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,250,265,261,284,259,264,270,268],
[297,0,283,280,265,274,294,302,278,269],
[301,268,0,294,268,271,280,289,272,287],
[286,271,257,0,269,293,270,274,271,257],
[290,286,283,282,0,281,265,285,271,281],
[267,277,280,258,270,0,263,257,249,266],
[292,257,271,281,286,288,0,278,274,291],
[287,249,262,277,266,294,273,0,287,252],
[281,273,279,280,280,302,277,264,0,288],
[283,282,264,294,270,285,260,299,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,274,254,263,249,256,246,260,275],
[293,0,312,272,265,287,262,274,276,278],
[277,239,0,242,260,256,253,255,259,266],
[297,279,309,0,277,279,267,271,286,284],
[288,286,291,274,0,275,271,277,263,289],
[302,264,295,272,276,0,273,287,278,271],
[295,289,298,284,280,278,0,272,272,286],
[305,277,296,280,274,264,279,0,275,281],
[291,275,292,265,288,273,279,276,0,282],
[276,273,285,267,262,280,265,270,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,279,288,295,308,295,275,279,301],
[259,0,257,277,265,281,246,260,258,281],
[272,294,0,297,275,282,256,279,246,277],
[263,274,254,0,282,290,279,268,263,288],
[256,286,276,269,0,272,260,262,256,270],
[243,270,269,261,279,0,241,259,234,273],
[256,305,295,272,291,310,0,281,274,303],
[276,291,272,283,289,292,270,0,262,279],
[272,293,305,288,295,317,277,289,0,281],
[250,270,274,263,281,278,248,272,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,283,261,268,265,263,255,258,249],
[294,0,291,291,273,294,280,285,283,281],
[268,260,0,260,256,260,268,257,263,246],
[290,260,291,0,286,289,284,274,276,261],
[283,278,295,265,0,270,281,264,283,264],
[286,257,291,262,281,0,265,272,283,259],
[288,271,283,267,270,286,0,267,278,257],
[296,266,294,277,287,279,284,0,279,276],
[293,268,288,275,268,268,273,272,0,268],
[302,270,305,290,287,292,294,275,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,305,306,279,292,278,287,292,247],
[301,0,318,322,272,320,256,286,281,307],
[246,233,0,251,299,258,275,251,285,259],
[245,229,300,0,233,244,192,241,248,243],
[272,279,252,318,0,255,240,289,213,247],
[259,231,293,307,296,0,257,249,286,292],
[273,295,276,359,311,294,0,355,294,239],
[264,265,300,310,262,302,196,0,274,257],
[259,270,266,303,338,265,257,277,0,253],
[304,244,292,308,304,259,312,294,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,272,272,283,275,301,275,258],
[267,0,260,271,255,254,254,269,254,254],
[278,291,0,299,270,274,280,278,268,287],
[279,280,252,0,252,268,257,268,267,253],
[279,296,281,299,0,300,259,275,279,263],
[268,297,277,283,251,0,255,288,283,248],
[276,297,271,294,292,296,0,290,273,278],
[250,282,273,283,276,263,261,0,277,253],
[276,297,283,284,272,268,278,274,0,264],
[293,297,264,298,288,303,273,298,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,298,279,289,293,302,270,272,301],
[274,0,275,302,276,341,286,310,312,352],
[253,276,0,307,273,294,267,282,271,277],
[272,249,244,0,262,267,241,237,265,316],
[262,275,278,289,0,272,306,298,274,320],
[258,210,257,284,279,0,281,273,294,278],
[249,265,284,310,245,270,0,265,264,294],
[281,241,269,314,253,278,286,0,254,292],
[279,239,280,286,277,257,287,297,0,307],
[250,199,274,235,231,273,257,259,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,277,251,276,258,270,272,251,272],
[308,0,299,275,307,270,288,259,272,285],
[274,252,0,281,290,246,284,264,236,274],
[300,276,270,0,288,267,286,270,276,285],
[275,244,261,263,0,256,274,237,259,262],
[293,281,305,284,295,0,280,291,280,272],
[281,263,267,265,277,271,0,261,238,280],
[279,292,287,281,314,260,290,0,265,277],
[300,279,315,275,292,271,313,286,0,301],
[279,266,277,266,289,279,271,274,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,293,261,292,301,295,299,288,303],
[259,0,289,241,262,265,240,279,264,281],
[258,262,0,255,250,272,261,249,254,248],
[290,310,296,0,273,281,277,298,292,278],
[259,289,301,278,0,308,272,313,291,280],
[250,286,279,270,243,0,271,297,262,255],
[256,311,290,274,279,280,0,286,286,251],
[252,272,302,253,238,254,265,0,264,268],
[263,287,297,259,260,289,265,287,0,270],
[248,270,303,273,271,296,300,283,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,289,281,284,268,285,280,274,283],
[272,0,262,274,284,279,270,284,268,298],
[262,289,0,280,271,280,281,276,263,292],
[270,277,271,0,285,255,281,273,262,276],
[267,267,280,266,0,264,287,286,272,286],
[283,272,271,296,287,0,287,298,278,295],
[266,281,270,270,264,264,0,275,263,289],
[271,267,275,278,265,253,276,0,277,286],
[277,283,288,289,279,273,288,274,0,301],
[268,253,259,275,265,256,262,265,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,239,277,273,245,207,241,248,238],
[286,0,277,269,280,294,281,259,229,258],
[312,274,0,318,301,280,233,274,260,297],
[274,282,233,0,250,235,228,267,225,224],
[278,271,250,301,0,272,266,244,253,240],
[306,257,271,316,279,0,242,254,270,255],
[344,270,318,323,285,309,0,301,275,313],
[310,292,277,284,307,297,250,0,255,285],
[303,322,291,326,298,281,276,296,0,255],
[313,293,254,327,311,296,238,266,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,277,284,268,279,279,296,284,278],
[262,0,248,263,267,257,253,273,271,247],
[274,303,0,289,288,291,291,288,282,277],
[267,288,262,0,270,268,272,287,281,264],
[283,284,263,281,0,292,275,287,274,273],
[272,294,260,283,259,0,263,277,290,279],
[272,298,260,279,276,288,0,273,280,261],
[255,278,263,264,264,274,278,0,276,257],
[267,280,269,270,277,261,271,275,0,253],
[273,304,274,287,278,272,290,294,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,292,255,276,259,276,279,276,260],
[286,0,284,265,266,274,264,270,278,287],
[259,267,0,239,266,265,256,268,255,259],
[296,286,312,0,274,259,285,295,274,283],
[275,285,285,277,0,274,279,271,299,297],
[292,277,286,292,277,0,288,286,273,283],
[275,287,295,266,272,263,0,292,276,274],
[272,281,283,256,280,265,259,0,280,286],
[275,273,296,277,252,278,275,271,0,268],
[291,264,292,268,254,268,277,265,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,292,265,295,283,295,257,275,271],
[261,0,253,250,266,270,270,269,260,267],
[259,298,0,268,277,300,293,270,280,277],
[286,301,283,0,292,310,299,256,280,289],
[256,285,274,259,0,271,273,241,270,276],
[268,281,251,241,280,0,261,259,269,280],
[256,281,258,252,278,290,0,224,238,260],
[294,282,281,295,310,292,327,0,265,309],
[276,291,271,271,281,282,313,286,0,289],
[280,284,274,262,275,271,291,242,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,290,231,321,292,357,356,323,322],
[229,0,355,230,290,260,260,263,227,260],
[261,196,0,165,293,294,292,263,228,228],
[320,321,386,0,288,323,256,292,289,323],
[230,261,258,263,0,259,229,228,225,292],
[259,291,257,228,292,0,226,228,195,292],
[194,291,259,295,322,325,0,357,355,323],
[195,288,288,259,323,323,194,0,323,321],
[228,324,323,262,326,356,196,228,0,295],
[229,291,323,228,259,259,228,230,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,281,301,296,286,269,252,288,282],
[294,0,293,286,303,265,290,276,313,298],
[270,258,0,283,276,271,277,245,276,287],
[250,265,268,0,282,278,288,259,276,275],
[255,248,275,269,0,278,287,241,275,246],
[265,286,280,273,273,0,274,271,312,296],
[282,261,274,263,264,277,0,277,287,254],
[299,275,306,292,310,280,274,0,313,279],
[263,238,275,275,276,239,264,238,0,278],
[269,253,264,276,305,255,297,272,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,275,287,311,277,279,276,289,308],
[275,0,270,258,294,280,260,281,258,266],
[276,281,0,279,293,283,261,277,270,271],
[264,293,272,0,291,278,262,279,282,274],
[240,257,258,260,0,244,257,260,258,255],
[274,271,268,273,307,0,282,269,276,282],
[272,291,290,289,294,269,0,296,257,296],
[275,270,274,272,291,282,255,0,273,278],
[262,293,281,269,293,275,294,278,0,282],
[243,285,280,277,296,269,255,273,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,290,290,274,308,278,289,264,305],
[258,0,245,272,264,280,240,271,268,275],
[261,306,0,305,284,301,280,303,292,288],
[261,279,246,0,268,283,240,266,270,272],
[277,287,267,283,0,288,272,276,288,279],
[243,271,250,268,263,0,249,280,258,249],
[273,311,271,311,279,302,0,288,292,287],
[262,280,248,285,275,271,263,0,276,269],
[287,283,259,281,263,293,259,275,0,275],
[246,276,263,279,272,302,264,282,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,303,279,264,269,236,257,326,283],
[279,0,254,242,223,255,220,264,283,240],
[248,297,0,236,244,259,213,261,298,236],
[272,309,315,0,288,297,277,289,315,300],
[287,328,307,263,0,297,227,275,283,269],
[282,296,292,254,254,0,232,245,273,291],
[315,331,338,274,324,319,0,316,374,293],
[294,287,290,262,276,306,235,0,303,279],
[225,268,253,236,268,278,177,248,0,220],
[268,311,315,251,282,260,258,272,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,287,284,265,269,307,276,310,312],
[250,0,255,300,270,265,257,251,267,291],
[264,296,0,301,269,268,261,273,307,314],
[267,251,250,0,247,253,262,257,291,289],
[286,281,282,304,0,284,275,267,307,300],
[282,286,283,298,267,0,280,281,291,294],
[244,294,290,289,276,271,0,265,308,309],
[275,300,278,294,284,270,286,0,295,313],
[241,284,244,260,244,260,243,256,0,272],
[239,260,237,262,251,257,242,238,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,296,273,280,258,271,260,247,273],
[267,0,283,245,259,280,285,290,262,263],
[255,268,0,246,280,274,257,287,268,263],
[278,306,305,0,291,292,272,286,276,259],
[271,292,271,260,0,280,265,279,256,288],
[293,271,277,259,271,0,265,286,260,265],
[280,266,294,279,286,286,0,293,277,282],
[291,261,264,265,272,265,258,0,269,261],
[304,289,283,275,295,291,274,282,0,286],
[278,288,288,292,263,286,269,290,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,279,268,265,289,300,290,278,274],
[293,0,275,279,267,280,314,297,282,259],
[272,276,0,259,274,287,295,290,277,260],
[283,272,292,0,292,287,293,285,284,268],
[286,284,277,259,0,297,291,292,285,277],
[262,271,264,264,254,0,279,282,265,255],
[251,237,256,258,260,272,0,272,268,252],
[261,254,261,266,259,269,279,0,265,253],
[273,269,274,267,266,286,283,286,0,276],
[277,292,291,283,274,296,299,298,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,225,236,251,253,219,253,222,220],
[276,0,278,291,260,286,277,319,261,281],
[326,273,0,309,264,259,275,271,230,237],
[315,260,242,0,285,328,238,270,220,219],
[300,291,287,266,0,279,247,296,223,250],
[298,265,292,223,272,0,261,294,253,253],
[332,274,276,313,304,290,0,288,236,264],
[298,232,280,281,255,257,263,0,195,270],
[329,290,321,331,328,298,315,356,0,264],
[331,270,314,332,301,298,287,281,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,269,273,286,253,261,275,276,241],
[249,0,262,253,265,287,271,293,246,267],
[282,289,0,332,295,273,312,303,270,264],
[278,298,219,0,248,261,272,266,254,237],
[265,286,256,303,0,222,238,269,268,245],
[298,264,278,290,329,0,275,318,253,281],
[290,280,239,279,313,276,0,283,225,241],
[276,258,248,285,282,233,268,0,292,227],
[275,305,281,297,283,298,326,259,0,262],
[310,284,287,314,306,270,310,324,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,240,265,259,261,263,241,243,250],
[319,0,250,302,285,284,280,295,287,286],
[311,301,0,323,307,267,301,294,291,297],
[286,249,228,0,273,250,281,235,254,244],
[292,266,244,278,0,253,269,250,258,261],
[290,267,284,301,298,0,289,267,273,281],
[288,271,250,270,282,262,0,291,249,256],
[310,256,257,316,301,284,260,0,259,258],
[308,264,260,297,293,278,302,292,0,275],
[301,265,254,307,290,270,295,293,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,276,279,268,282,263,268,286,279],
[262,0,276,268,263,281,251,283,270,250],
[275,275,0,272,275,290,278,278,282,288],
[272,283,279,0,294,275,278,276,283,281],
[283,288,276,257,0,283,261,276,272,277],
[269,270,261,276,268,0,254,276,278,256],
[288,300,273,273,290,297,0,293,278,289],
[283,268,273,275,275,275,258,0,281,274],
[265,281,269,268,279,273,273,270,0,264],
[272,301,263,270,274,295,262,277,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,266,310,295,301,309,268,289,273],
[260,0,295,301,294,283,275,280,280,265],
[285,256,0,281,276,288,288,270,267,255],
[241,250,270,0,282,262,280,270,284,260],
[256,257,275,269,0,264,277,268,257,245],
[250,268,263,289,287,0,277,267,295,277],
[242,276,263,271,274,274,0,274,274,262],
[283,271,281,281,283,284,277,0,295,283],
[262,271,284,267,294,256,277,256,0,252],
[278,286,296,291,306,274,289,268,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,308,379,273,343,309,310,276,310],
[310,0,276,344,311,346,275,312,277,415],
[243,275,0,344,344,414,241,241,208,310],
[172,207,207,0,240,275,71,241,209,242],
[278,240,207,311,0,277,241,242,277,276],
[208,205,137,276,274,0,171,242,240,310],
[242,276,310,480,310,380,0,310,206,381],
[241,239,310,310,309,309,241,0,277,277],
[275,274,343,342,274,311,345,274,0,376],
[241,136,241,309,275,241,170,274,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,280,265,308,339,285,257,254,280],
[250,0,300,239,284,315,273,291,270,282],
[271,251,0,233,285,309,258,251,258,279],
[286,312,318,0,334,338,277,275,304,301],
[243,267,266,217,0,300,250,222,255,259],
[212,236,242,213,251,0,243,217,231,245],
[266,278,293,274,301,308,0,275,255,274],
[294,260,300,276,329,334,276,0,263,308],
[297,281,293,247,296,320,296,288,0,278],
[271,269,272,250,292,306,277,243,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,277,327,263,252,304,302,260,241],
[330,0,331,326,270,308,313,300,310,298],
[274,220,0,264,251,248,283,311,297,256],
[224,225,287,0,201,277,280,308,266,282],
[288,281,300,350,0,274,301,267,276,258],
[299,243,303,274,277,0,303,283,268,249],
[247,238,268,271,250,248,0,283,253,268],
[249,251,240,243,284,268,268,0,262,275],
[291,241,254,285,275,283,298,289,0,282],
[310,253,295,269,293,302,283,276,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,273,277,282,259,279,294,284,262],
[261,0,271,271,302,253,256,272,271,250],
[278,280,0,300,279,304,273,289,299,287],
[274,280,251,0,282,260,289,280,271,265],
[269,249,272,269,0,265,288,287,276,278],
[292,298,247,291,286,0,309,290,296,292],
[272,295,278,262,263,242,0,295,282,279],
[257,279,262,271,264,261,256,0,271,259],
[267,280,252,280,275,255,269,280,0,287],
[289,301,264,286,273,259,272,292,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,267,264,268,271,261,268,267,264],
[290,0,273,278,282,277,269,268,287,265],
[284,278,0,278,284,276,278,282,277,259],
[287,273,273,0,288,268,269,285,277,279],
[283,269,267,263,0,272,269,272,276,267],
[280,274,275,283,279,0,267,261,280,263],
[290,282,273,282,282,284,0,280,284,276],
[283,283,269,266,279,290,271,0,288,269],
[284,264,274,274,275,271,267,263,0,267],
[287,286,292,272,284,288,275,282,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,262,268,269,301,298,285,278,274],
[270,0,273,281,271,278,291,287,263,282],
[289,278,0,274,277,287,293,289,300,280],
[283,270,277,0,274,279,303,280,279,276],
[282,280,274,277,0,288,290,284,273,281],
[250,273,264,272,263,0,289,252,270,282],
[253,260,258,248,261,262,0,263,258,257],
[266,264,262,271,267,299,288,0,261,267],
[273,288,251,272,278,281,293,290,0,275],
[277,269,271,275,270,269,294,284,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,283,296,277,294,296,292,267,276],
[284,0,291,317,271,284,297,266,289,262],
[268,260,0,312,271,295,283,284,278,265],
[255,234,239,0,241,273,266,275,251,248],
[274,280,280,310,0,282,296,285,262,238],
[257,267,256,278,269,0,257,278,261,232],
[255,254,268,285,255,294,0,271,243,279],
[259,285,267,276,266,273,280,0,279,253],
[284,262,273,300,289,290,308,272,0,256],
[275,289,286,303,313,319,272,298,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,266,252,286,262,276,278,247,282],
[285,0,289,281,314,300,293,277,270,291],
[285,262,0,270,281,287,275,268,267,278],
[299,270,281,0,301,288,276,287,261,288],
[265,237,270,250,0,269,279,254,263,279],
[289,251,264,263,282,0,284,275,274,281],
[275,258,276,275,272,267,0,259,249,273],
[273,274,283,264,297,276,292,0,281,266],
[304,281,284,290,288,277,302,270,0,269],
[269,260,273,263,272,270,278,285,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,281,287,273,284,302,269,272,280],
[266,0,260,271,245,282,274,271,259,268],
[270,291,0,260,264,287,278,297,272,290],
[264,280,291,0,278,285,286,297,285,273],
[278,306,287,273,0,278,273,262,269,286],
[267,269,264,266,273,0,279,263,261,260],
[249,277,273,265,278,272,0,282,262,305],
[282,280,254,254,289,288,269,0,281,274],
[279,292,279,266,282,290,289,270,0,294],
[271,283,261,278,265,291,246,277,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,318,305,305,291,305,255,298,354],
[262,0,283,274,273,309,260,249,256,330],
[233,268,0,245,255,271,271,239,276,340],
[246,277,306,0,253,283,252,254,263,321],
[246,278,296,298,0,313,276,319,284,331],
[260,242,280,268,238,0,244,284,225,288],
[246,291,280,299,275,307,0,289,291,344],
[296,302,312,297,232,267,262,0,290,336],
[253,295,275,288,267,326,260,261,0,328],
[197,221,211,230,220,263,207,215,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,270,288,277,280,284,266,298,274],
[272,0,293,294,293,283,274,277,274,301],
[281,258,0,287,280,284,258,274,265,286],
[263,257,264,0,262,289,254,288,260,285],
[274,258,271,289,0,268,263,288,276,296],
[271,268,267,262,283,0,277,269,268,272],
[267,277,293,297,288,274,0,295,294,307],
[285,274,277,263,263,282,256,0,275,287],
[253,277,286,291,275,283,257,276,0,295],
[277,250,265,266,255,279,244,264,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,313,320,290,256,302,274,273,304],
[247,0,260,309,272,261,272,241,285,232],
[238,291,0,241,214,253,272,262,283,238],
[231,242,310,0,243,278,209,231,255,244],
[261,279,337,308,0,283,298,253,270,281],
[295,290,298,273,268,0,264,283,292,236],
[249,279,279,342,253,287,0,252,251,254],
[277,310,289,320,298,268,299,0,309,259],
[278,266,268,296,281,259,300,242,0,239],
[247,319,313,307,270,315,297,292,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,319,341,342,291,315,343,210,288],
[365,0,368,367,367,314,367,418,289,260],
[232,183,0,312,313,288,314,288,183,180],
[210,184,239,0,316,264,214,263,238,159],
[209,184,238,235,0,236,265,315,236,105],
[260,237,263,287,315,0,368,394,262,208],
[236,184,237,337,286,183,0,287,237,210],
[208,133,263,288,236,157,264,0,158,183],
[341,262,368,313,315,289,314,393,0,260],
[263,291,371,392,446,343,341,368,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,257,272,253,261,257,254,276,268],
[288,0,272,304,294,306,293,291,306,297],
[294,279,0,290,273,297,287,281,284,301],
[279,247,261,0,270,276,255,284,299,280],
[298,257,278,281,0,297,263,263,259,293],
[290,245,254,275,254,0,258,264,276,248],
[294,258,264,296,288,293,0,275,284,278],
[297,260,270,267,288,287,276,0,287,266],
[275,245,267,252,292,275,267,264,0,266],
[283,254,250,271,258,303,273,285,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,339,277,290,256,249,288,264,252,274],
[212,0,228,242,243,245,228,252,226,252],
[274,323,0,282,282,275,273,277,288,263],
[261,309,269,0,273,267,270,255,257,245],
[295,308,269,278,0,256,252,267,275,274],
[302,306,276,284,295,0,282,280,272,290],
[263,323,278,281,299,269,0,278,265,284],
[287,299,274,296,284,271,273,0,311,279],
[299,325,263,294,276,279,286,240,0,296],
[277,299,288,306,277,261,267,272,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,229,265,275,279,277,273,295,271],
[288,0,258,263,288,283,258,262,280,261],
[322,293,0,290,272,312,291,287,307,273],
[286,288,261,0,283,307,307,269,298,286],
[276,263,279,268,0,272,278,257,293,277],
[272,268,239,244,279,0,282,259,278,279],
[274,293,260,244,273,269,0,268,281,275],
[278,289,264,282,294,292,283,0,275,279],
[256,271,244,253,258,273,270,276,0,265],
[280,290,278,265,274,272,276,272,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,273,302,282,285,288,276,295,274],
[271,0,268,242,265,280,274,249,276,278],
[278,283,0,277,284,262,303,263,284,279],
[249,309,274,0,291,287,298,283,305,271],
[269,286,267,260,0,273,287,260,275,267],
[266,271,289,264,278,0,293,279,273,267],
[263,277,248,253,264,258,0,244,245,246],
[275,302,288,268,291,272,307,0,303,287],
[256,275,267,246,276,278,306,248,0,266],
[277,273,272,280,284,284,305,264,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,290,286,277,302,293,286,297,278],
[279,0,290,277,277,280,286,254,301,293],
[261,261,0,283,263,285,267,251,272,262],
[265,274,268,0,265,258,258,267,258,282],
[274,274,288,286,0,295,269,286,290,289],
[249,271,266,293,256,0,268,267,272,281],
[258,265,284,293,282,283,0,263,279,295],
[265,297,300,284,265,284,288,0,296,300],
[254,250,279,293,261,279,272,255,0,269],
[273,258,289,269,262,270,256,251,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,278,288,300,306,290,272,270,269],
[264,0,270,268,280,258,266,267,244,254],
[273,281,0,271,275,269,271,258,264,248],
[263,283,280,0,282,283,282,273,258,311],
[251,271,276,269,0,265,258,261,257,257],
[245,293,282,268,286,0,258,248,268,256],
[261,285,280,269,293,293,0,262,267,258],
[279,284,293,278,290,303,289,0,269,272],
[281,307,287,293,294,283,284,282,0,275],
[282,297,303,240,294,295,293,279,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,271,281,326,283,271,241,270,282],
[238,0,264,185,254,234,246,242,280,265],
[280,287,0,268,334,248,287,258,324,313],
[270,366,283,0,289,271,311,248,332,347],
[225,297,217,262,0,258,209,215,280,312],
[268,317,303,280,293,0,228,260,333,284],
[280,305,264,240,342,323,0,301,279,304],
[310,309,293,303,336,291,250,0,311,291],
[281,271,227,219,271,218,272,240,0,246],
[269,286,238,204,239,267,247,260,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,284,272,284,279,281,274,278,279],
[284,0,288,273,272,280,268,267,278,271],
[267,263,0,271,286,267,265,276,266,275],
[279,278,280,0,275,276,273,269,281,275],
[267,279,265,276,0,277,269,257,264,272],
[272,271,284,275,274,0,265,268,266,281],
[270,283,286,278,282,286,0,282,278,278],
[277,284,275,282,294,283,269,0,268,271],
[273,273,285,270,287,285,273,283,0,284],
[272,280,276,276,279,270,273,280,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,300,262,256,266,237,273,248,226],
[279,0,280,263,244,247,253,262,266,243],
[251,271,0,267,250,244,236,267,268,233],
[289,288,284,0,241,261,255,278,255,261],
[295,307,301,310,0,270,232,278,259,252],
[285,304,307,290,281,0,251,259,279,244],
[314,298,315,296,319,300,0,302,316,270],
[278,289,284,273,273,292,249,0,264,251],
[303,285,283,296,292,272,235,287,0,277],
[325,308,318,290,299,307,281,300,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,276,271,281,272,285,325,276,271],
[255,0,276,228,283,250,238,287,264,242],
[275,275,0,279,269,222,271,268,240,257],
[280,323,272,0,318,280,285,308,294,284],
[270,268,282,233,0,242,234,285,256,278],
[279,301,329,271,309,0,319,313,307,272],
[266,313,280,266,317,232,0,298,275,276],
[226,264,283,243,266,238,253,0,261,262],
[275,287,311,257,295,244,276,290,0,244],
[280,309,294,267,273,279,275,289,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,260,265,297,280,283,276,263,261],
[266,0,282,272,272,275,286,297,275,256],
[291,269,0,291,291,287,315,271,283,277],
[286,279,260,0,289,282,300,283,275,262],
[254,279,260,262,0,278,275,281,265,269],
[271,276,264,269,273,0,290,278,264,268],
[268,265,236,251,276,261,0,270,262,268],
[275,254,280,268,270,273,281,0,252,265],
[288,276,268,276,286,287,289,299,0,268],
[290,295,274,289,282,283,283,286,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,247,248,175,220,233,245,242,277],
[325,0,282,280,242,277,273,262,282,300],
[304,269,0,269,242,244,279,270,288,286],
[303,271,282,0,238,244,277,269,270,272],
[376,309,309,313,0,315,330,273,311,315],
[331,274,307,307,236,0,298,272,306,309],
[318,278,272,274,221,253,0,290,258,302],
[306,289,281,282,278,279,261,0,267,245],
[309,269,263,281,240,245,293,284,0,275],
[274,251,265,279,236,242,249,306,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,210,138,139,278,347,276,210,205],
[343,0,346,208,346,414,415,412,414,411],
[341,205,0,274,343,413,345,412,411,341],
[413,343,277,0,275,345,345,343,345,410],
[412,205,208,276,0,207,344,341,343,343],
[273,137,138,206,344,0,275,341,343,341],
[204,136,206,206,207,276,0,272,274,272],
[275,139,139,208,210,210,279,0,275,344],
[341,137,140,206,208,208,277,276,0,274],
[346,140,210,141,208,210,279,207,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,295,292,274,280,266,260,258,292],
[280,0,284,271,278,290,261,276,259,284],
[256,267,0,249,272,276,253,249,234,256],
[259,280,302,0,266,282,265,278,268,274],
[277,273,279,285,0,283,261,274,252,277],
[271,261,275,269,268,0,261,256,248,272],
[285,290,298,286,290,290,0,277,271,287],
[291,275,302,273,277,295,274,0,281,280],
[293,292,317,283,299,303,280,270,0,297],
[259,267,295,277,274,279,264,271,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,285,279,257,298,257,280,299,279],
[269,0,281,262,274,282,256,281,294,272],
[266,270,0,282,256,276,253,266,275,269],
[272,289,269,0,264,278,266,279,287,278],
[294,277,295,287,0,286,259,276,291,277],
[253,269,275,273,265,0,268,272,288,268],
[294,295,298,285,292,283,0,283,282,273],
[271,270,285,272,275,279,268,0,275,282],
[252,257,276,264,260,263,269,276,0,269],
[272,279,282,273,274,283,278,269,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,273,260,294,255,263,284,280,258],
[247,0,259,272,256,240,251,275,266,257],
[278,292,0,270,256,265,276,285,290,266],
[291,279,281,0,288,268,265,291,270,283],
[257,295,295,263,0,268,256,278,307,246],
[296,311,286,283,283,0,269,308,273,293],
[288,300,275,286,295,282,0,321,282,270],
[267,276,266,260,273,243,230,0,264,257],
[271,285,261,281,244,278,269,287,0,264],
[293,294,285,268,305,258,281,294,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,281,292,289,276,286,285,258,281],
[262,0,292,306,294,272,294,274,268,282],
[270,259,0,308,278,271,279,278,264,270],
[259,245,243,0,274,258,248,246,253,268],
[262,257,273,277,0,276,264,268,267,277],
[275,279,280,293,275,0,285,278,274,284],
[265,257,272,303,287,266,0,265,268,268],
[266,277,273,305,283,273,286,0,278,265],
[293,283,287,298,284,277,283,273,0,291],
[270,269,281,283,274,267,283,286,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,270,276,283,281,271,274,257,261],
[272,0,281,278,273,285,273,275,268,283],
[281,270,0,272,289,291,284,270,264,271],
[275,273,279,0,289,290,260,288,290,288],
[268,278,262,262,0,282,259,270,259,279],
[270,266,260,261,269,0,228,249,267,264],
[280,278,267,291,292,323,0,293,285,292],
[277,276,281,263,281,302,258,0,261,260],
[294,283,287,261,292,284,266,290,0,293],
[290,268,280,263,272,287,259,291,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,296,199,265,247,269,270,238,233],
[235,0,269,199,256,247,222,224,276,207],
[255,282,0,205,274,265,263,193,232,211],
[352,352,346,0,311,327,259,303,315,262],
[286,295,277,240,0,265,273,287,285,196],
[304,304,286,224,286,0,264,263,276,235],
[282,329,288,292,278,287,0,258,241,288],
[281,327,358,248,264,288,293,0,301,232],
[313,275,319,236,266,275,310,250,0,234],
[318,344,340,289,355,316,263,319,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,280,251,273,258,282,261,261,278],
[275,0,295,298,284,252,272,268,286,288],
[271,256,0,279,307,280,265,272,279,298],
[300,253,272,0,278,253,272,255,285,290],
[278,267,244,273,0,264,273,258,277,273],
[293,299,271,298,287,0,281,276,284,296],
[269,279,286,279,278,270,0,262,293,288],
[290,283,279,296,293,275,289,0,284,287],
[290,265,272,266,274,267,258,267,0,285],
[273,263,253,261,278,255,263,264,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,270,285,261,295,262,274,278,283],
[267,0,274,266,261,306,277,273,277,275],
[281,277,0,292,284,291,270,280,291,290],
[266,285,259,0,284,293,274,263,294,290],
[290,290,267,267,0,296,271,271,290,287],
[256,245,260,258,255,0,265,262,258,272],
[289,274,281,277,280,286,0,277,275,288],
[277,278,271,288,280,289,274,0,288,293],
[273,274,260,257,261,293,276,263,0,302],
[268,276,261,261,264,279,263,258,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,297,278,271,269,275,308,283,281],
[275,0,306,296,266,260,281,281,274,276],
[254,245,0,286,246,247,259,274,259,281],
[273,255,265,0,249,259,280,270,247,285],
[280,285,305,302,0,285,272,304,271,273],
[282,291,304,292,266,0,294,295,268,292],
[276,270,292,271,279,257,0,292,272,268],
[243,270,277,281,247,256,259,0,244,251],
[268,277,292,304,280,283,279,307,0,288],
[270,275,270,266,278,259,283,300,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,248,249,254,285,350,235,336,351],
[252,0,299,288,235,303,301,254,302,384],
[303,252,0,269,286,338,353,320,306,349],
[302,263,282,0,252,335,300,267,368,319],
[297,316,265,299,0,301,333,302,316,334],
[266,248,213,216,250,0,232,200,252,299],
[201,250,198,251,218,319,0,203,202,249],
[316,297,231,284,249,351,348,0,284,333],
[215,249,245,183,235,299,349,267,0,350],
[200,167,202,232,217,252,302,218,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,288,250,265,271,278,281,262,261],
[291,0,294,252,275,267,279,277,257,277],
[263,257,0,266,263,282,265,266,260,252],
[301,299,285,0,269,266,277,296,264,277],
[286,276,288,282,0,281,287,295,285,266],
[280,284,269,285,270,0,268,263,270,279],
[273,272,286,274,264,283,0,281,271,291],
[270,274,285,255,256,288,270,0,269,257],
[289,294,291,287,266,281,280,282,0,281],
[290,274,299,274,285,272,260,294,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,275,275,284,280,263,271,257,264],
[280,0,276,284,284,275,289,291,263,288],
[276,275,0,260,280,271,261,276,247,279],
[276,267,291,0,287,283,288,284,276,292],
[267,267,271,264,0,285,275,281,251,274],
[271,276,280,268,266,0,274,289,248,285],
[288,262,290,263,276,277,0,292,263,279],
[280,260,275,267,270,262,259,0,252,267],
[294,288,304,275,300,303,288,299,0,328],
[287,263,272,259,277,266,272,284,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,273,237,271,260,251,249,258,257],
[293,0,269,263,253,243,266,259,265,271],
[278,282,0,266,286,255,266,273,279,276],
[314,288,285,0,274,283,254,270,273,300],
[280,298,265,277,0,275,275,257,278,280],
[291,308,296,268,276,0,266,305,287,283],
[300,285,285,297,276,285,0,258,287,281],
[302,292,278,281,294,246,293,0,295,286],
[293,286,272,278,273,264,264,256,0,273],
[294,280,275,251,271,268,270,265,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,259,236,247,259,245,264,263,285],
[271,0,271,270,257,285,243,279,279,282],
[292,280,0,254,265,291,247,286,287,256],
[315,281,297,0,291,303,275,297,268,296],
[304,294,286,260,0,286,265,280,275,284],
[292,266,260,248,265,0,232,272,267,271],
[306,308,304,276,286,319,0,274,294,293],
[287,272,265,254,271,279,277,0,269,294],
[288,272,264,283,276,284,257,282,0,281],
[266,269,295,255,267,280,258,257,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,268,277,252,288,274,257,243,261],
[296,0,251,275,279,303,272,272,257,291],
[283,300,0,280,278,292,256,285,277,292],
[274,276,271,0,264,279,245,254,254,264],
[299,272,273,287,0,301,258,260,260,271],
[263,248,259,272,250,0,257,249,251,259],
[277,279,295,306,293,294,0,290,270,288],
[294,279,266,297,291,302,261,0,277,280],
[308,294,274,297,291,300,281,274,0,287],
[290,260,259,287,280,292,263,271,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,278,277,282,278,299,270,319,290],
[270,0,288,261,246,260,264,280,296,277],
[273,263,0,236,251,265,247,242,254,243],
[274,290,315,0,270,265,300,253,295,291],
[269,305,300,281,0,276,275,274,278,294],
[273,291,286,286,275,0,260,278,268,255],
[252,287,304,251,276,291,0,272,305,298],
[281,271,309,298,277,273,279,0,286,302],
[232,255,297,256,273,283,246,265,0,265],
[261,274,308,260,257,296,253,249,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,292,261,283,285,297,296,312,260],
[287,0,286,281,286,306,304,319,295,271],
[259,265,0,257,282,279,260,295,270,258],
[290,270,294,0,270,300,302,306,298,270],
[268,265,269,281,0,301,296,287,322,280],
[266,245,272,251,250,0,259,273,288,252],
[254,247,291,249,255,292,0,277,290,236],
[255,232,256,245,264,278,274,0,280,234],
[239,256,281,253,229,263,261,271,0,235],
[291,280,293,281,271,299,315,317,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,282,267,260,256,267,261,270,274],
[290,0,309,260,264,273,281,269,285,295],
[269,242,0,265,260,249,258,243,281,270],
[284,291,286,0,263,284,254,260,291,273],
[291,287,291,288,0,266,278,272,298,301],
[295,278,302,267,285,0,293,263,279,284],
[284,270,293,297,273,258,0,273,270,279],
[290,282,308,291,279,288,278,0,300,272],
[281,266,270,260,253,272,281,251,0,263],
[277,256,281,278,250,267,272,279,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,290,177,238,278,247,239,287,205],
[271,0,328,239,280,268,314,264,282,259],
[261,223,0,241,257,258,244,211,256,198],
[374,312,310,0,245,291,337,290,326,288],
[313,271,294,306,0,287,298,241,369,259],
[273,283,293,260,264,0,281,253,309,244],
[304,237,307,214,253,270,0,232,312,199],
[312,287,340,261,310,298,319,0,323,250],
[264,269,295,225,182,242,239,228,0,272],
[346,292,353,263,292,307,352,301,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,280,269,284,295,294,298,285,284],
[259,0,259,254,254,271,272,269,261,274],
[271,292,0,267,275,286,294,295,267,258],
[282,297,284,0,278,295,298,278,273,289],
[267,297,276,273,0,291,303,273,263,298],
[256,280,265,256,260,0,257,272,254,255],
[257,279,257,253,248,294,0,276,257,270],
[253,282,256,273,278,279,275,0,269,259],
[266,290,284,278,288,297,294,282,0,295],
[267,277,293,262,253,296,281,292,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,221,278,237,250,225,261,272,247],
[318,0,249,267,277,343,261,274,279,259],
[330,302,0,302,286,273,222,273,283,298],
[273,284,249,0,231,346,251,219,250,288],
[314,274,265,320,0,342,305,299,257,301],
[301,208,278,205,209,0,252,205,238,278],
[326,290,329,300,246,299,0,237,256,226],
[290,277,278,332,252,346,314,0,275,263],
[279,272,268,301,294,313,295,276,0,295],
[304,292,253,263,250,273,325,288,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,290,278,266,284,276,310,258,243],
[258,0,251,255,263,248,270,304,273,253],
[261,300,0,277,269,285,292,312,281,242],
[273,296,274,0,232,273,286,305,234,267],
[285,288,282,319,0,282,289,300,285,268],
[267,303,266,278,269,0,275,297,271,285],
[275,281,259,265,262,276,0,301,276,245],
[241,247,239,246,251,254,250,0,221,220],
[293,278,270,317,266,280,275,330,0,277],
[308,298,309,284,283,266,306,331,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,296,257,263,297,304,295,263,306],
[282,0,296,235,234,288,293,281,267,261],
[255,255,0,242,214,261,266,285,254,261],
[294,316,309,0,268,310,313,294,284,312],
[288,317,337,283,0,312,296,299,275,282],
[254,263,290,241,239,0,256,266,237,265],
[247,258,285,238,255,295,0,264,268,288],
[256,270,266,257,252,285,287,0,217,272],
[288,284,297,267,276,314,283,334,0,297],
[245,290,290,239,269,286,263,279,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,278,291,268,283,361,305,250,234],
[311,0,282,303,287,254,336,242,247,267],
[273,269,0,285,261,296,322,279,263,222],
[260,248,266,0,269,231,293,258,252,243],
[283,264,290,282,0,267,299,291,218,245],
[268,297,255,320,284,0,335,277,297,230],
[190,215,229,258,252,216,0,212,241,244],
[246,309,272,293,260,274,339,0,221,250],
[301,304,288,299,333,254,310,330,0,304],
[317,284,329,308,306,321,307,301,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,258,288,280,288,284,270,273,269],
[289,0,258,276,279,278,291,266,273,281],
[293,293,0,283,267,292,287,263,275,251],
[263,275,268,0,275,290,302,278,266,264],
[271,272,284,276,0,275,308,281,260,281],
[263,273,259,261,276,0,285,266,276,243],
[267,260,264,249,243,266,0,282,259,242],
[281,285,288,273,270,285,269,0,275,267],
[278,278,276,285,291,275,292,276,0,277],
[282,270,300,287,270,308,309,284,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,289,365,366,255,219,294,256,181],
[226,0,290,329,330,367,219,223,184,222],
[262,261,0,408,223,221,224,223,224,260],
[186,222,143,0,257,220,147,185,295,111],
[185,221,328,294,0,184,222,221,186,220],
[296,184,330,331,367,0,295,333,257,221],
[332,332,327,404,329,256,0,405,329,368],
[257,328,328,366,330,218,146,0,220,291],
[295,367,327,256,365,294,222,331,0,330],
[370,329,291,440,331,330,183,260,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,274,279,279,295,303,292,287,289],
[280,0,258,263,254,268,258,265,265,272],
[277,293,0,265,272,274,280,269,262,281],
[272,288,286,0,279,281,263,276,275,278],
[272,297,279,272,0,290,280,267,277,284],
[256,283,277,270,261,0,264,264,267,291],
[248,293,271,288,271,287,0,258,284,281],
[259,286,282,275,284,287,293,0,274,287],
[264,286,289,276,274,284,267,277,0,284],
[262,279,270,273,267,260,270,264,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,281,270,300,277,285,271,293,271],
[270,0,277,282,270,267,271,272,286,271],
[270,274,0,268,261,256,274,264,296,252],
[281,269,283,0,297,270,273,279,281,261],
[251,281,290,254,0,260,267,256,291,252],
[274,284,295,281,291,0,276,284,300,276],
[266,280,277,278,284,275,0,284,283,267],
[280,279,287,272,295,267,267,0,300,276],
[258,265,255,270,260,251,268,251,0,252],
[280,280,299,290,299,275,284,275,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,270,324,278,246,284,276,295,287],
[303,0,281,296,275,277,303,267,317,282],
[281,270,0,309,300,279,275,270,276,279],
[227,255,242,0,275,252,276,262,265,269],
[273,276,251,276,0,269,284,257,310,309],
[305,274,272,299,282,0,274,291,277,289],
[267,248,276,275,267,277,0,270,287,271],
[275,284,281,289,294,260,281,0,302,285],
[256,234,275,286,241,274,264,249,0,281],
[264,269,272,282,242,262,280,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,264,281,295,256,260,293,266,276],
[260,0,264,274,280,257,274,265,263,266],
[287,287,0,297,289,264,276,286,254,284],
[270,277,254,0,276,273,245,278,267,272],
[256,271,262,275,0,266,253,259,259,267],
[295,294,287,278,285,0,296,288,271,285],
[291,277,275,306,298,255,0,288,276,303],
[258,286,265,273,292,263,263,0,263,260],
[285,288,297,284,292,280,275,288,0,285],
[275,285,267,279,284,266,248,291,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,280,312,291,294,287,272,272,282],
[262,0,271,284,297,284,279,266,258,277],
[271,280,0,305,272,287,295,284,282,285],
[239,267,246,0,264,266,287,259,270,261],
[260,254,279,287,0,282,279,261,269,268],
[257,267,264,285,269,0,284,276,257,285],
[264,272,256,264,272,267,0,264,274,282],
[279,285,267,292,290,275,287,0,279,274],
[279,293,269,281,282,294,277,272,0,274],
[269,274,266,290,283,266,269,277,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,268,264,262,281,277,256,292,291],
[268,0,261,274,245,257,289,239,278,266],
[283,290,0,283,277,266,297,283,284,281],
[287,277,268,0,249,277,313,265,292,262],
[289,306,274,302,0,266,288,264,296,284],
[270,294,285,274,285,0,292,279,281,285],
[274,262,254,238,263,259,0,262,281,280],
[295,312,268,286,287,272,289,0,268,301],
[259,273,267,259,255,270,270,283,0,278],
[260,285,270,289,267,266,271,250,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,240,278,270,302,255,292,280,260],
[265,0,266,286,266,268,257,278,269,276],
[311,285,0,289,313,283,282,290,305,266],
[273,265,262,0,280,274,258,268,264,243],
[281,285,238,271,0,291,265,286,281,265],
[249,283,268,277,260,0,236,280,259,241],
[296,294,269,293,286,315,0,278,264,247],
[259,273,261,283,265,271,273,0,273,253],
[271,282,246,287,270,292,287,278,0,265],
[291,275,285,308,286,310,304,298,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,297,294,290,286,314,275,286,322],
[245,0,257,260,287,278,269,269,246,286],
[254,294,0,313,298,309,302,286,267,315],
[257,291,238,0,251,262,265,273,286,289],
[261,264,253,300,0,261,280,257,300,283],
[265,273,242,289,290,0,265,252,261,296],
[237,282,249,286,271,286,0,235,281,302],
[276,282,265,278,294,299,316,0,333,274],
[265,305,284,265,251,290,270,218,0,261],
[229,265,236,262,268,255,249,277,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,265,289,249,270,296,284,292,265],
[262,0,254,281,281,250,268,252,266,289],
[286,297,0,297,255,296,294,301,286,277],
[262,270,254,0,249,279,270,243,252,255],
[302,270,296,302,0,289,299,271,290,280],
[281,301,255,272,262,0,300,263,262,279],
[255,283,257,281,252,251,0,257,267,274],
[267,299,250,308,280,288,294,0,314,291],
[259,285,265,299,261,289,284,237,0,277],
[286,262,274,296,271,272,277,260,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,290,278,271,281,288,289,277,299],
[275,0,298,282,297,297,299,282,300,298],
[261,253,0,287,275,254,276,277,273,276],
[273,269,264,0,276,273,270,286,272,286],
[280,254,276,275,0,273,277,289,275,287],
[270,254,297,278,278,0,297,292,277,285],
[263,252,275,281,274,254,0,274,266,272],
[262,269,274,265,262,259,277,0,253,279],
[274,251,278,279,276,274,285,298,0,286],
[252,253,275,265,264,266,279,272,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,262,283,295,295,298,280,311,297],
[275,0,283,326,295,310,278,299,323,304],
[289,268,0,303,292,291,285,266,303,306],
[268,225,248,0,285,275,264,253,289,285],
[256,256,259,266,0,245,280,260,246,248],
[256,241,260,276,306,0,280,291,282,302],
[253,273,266,287,271,271,0,299,303,283],
[271,252,285,298,291,260,252,0,311,299],
[240,228,248,262,305,269,248,240,0,289],
[254,247,245,266,303,249,268,252,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,279,288,270,292,331,297,307,257],
[247,0,271,254,263,261,274,292,239,259],
[272,280,0,273,261,272,296,301,288,267],
[263,297,278,0,258,276,308,294,293,285],
[281,288,290,293,0,272,294,268,269,273],
[259,290,279,275,279,0,288,295,270,278],
[220,277,255,243,257,263,0,279,259,235],
[254,259,250,257,283,256,272,0,269,248],
[244,312,263,258,282,281,292,282,0,271],
[294,292,284,266,278,273,316,303,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,276,310,302,284,325,294,302,269],
[289,0,278,291,275,310,317,291,294,294],
[275,273,0,282,305,289,302,318,288,274],
[241,260,269,0,241,290,276,278,265,274],
[249,276,246,310,0,281,322,296,264,289],
[267,241,262,261,270,0,276,296,268,273],
[226,234,249,275,229,275,0,287,296,255],
[257,260,233,273,255,255,264,0,272,241],
[249,257,263,286,287,283,255,279,0,283],
[282,257,277,277,262,278,296,310,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,270,260,276,262,252,268,289,287],
[260,0,252,278,262,267,256,263,284,271],
[281,299,0,270,283,280,284,283,297,299],
[291,273,281,0,285,286,265,273,296,295],
[275,289,268,266,0,275,277,265,285,284],
[289,284,271,265,276,0,286,263,296,281],
[299,295,267,286,274,265,0,285,308,297],
[283,288,268,278,286,288,266,0,294,287],
[262,267,254,255,266,255,243,257,0,270],
[264,280,252,256,267,270,254,264,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,265,260,267,280,262,255,253,270],
[266,0,255,272,270,283,267,259,265,272],
[286,296,0,254,268,283,253,273,263,270],
[291,279,297,0,287,313,260,273,277,293],
[284,281,283,264,0,299,266,276,267,292],
[271,268,268,238,252,0,254,263,258,270],
[289,284,298,291,285,297,0,274,267,302],
[296,292,278,278,275,288,277,0,249,283],
[298,286,288,274,284,293,284,302,0,295],
[281,279,281,258,259,281,249,268,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,300,284,265,296,290,299,268,275],
[267,0,303,252,278,292,271,286,309,275],
[251,248,0,251,240,269,256,260,267,255],
[267,299,300,0,311,316,313,318,288,315],
[286,273,311,240,0,305,296,284,284,281],
[255,259,282,235,246,0,265,261,261,272],
[261,280,295,238,255,286,0,276,267,289],
[252,265,291,233,267,290,275,0,285,298],
[283,242,284,263,267,290,284,266,0,283],
[276,276,296,236,270,279,262,253,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,269,250,280,256,306,261,279,302],
[282,0,271,258,259,275,318,280,260,303],
[282,280,0,245,260,245,262,250,265,276],
[301,293,306,0,305,269,321,306,296,270],
[271,292,291,246,0,233,323,310,274,292],
[295,276,306,282,318,0,348,275,299,312],
[245,233,289,230,228,203,0,263,260,267],
[290,271,301,245,241,276,288,0,277,330],
[272,291,286,255,277,252,291,274,0,279],
[249,248,275,281,259,239,284,221,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,290,311,286,282,262,287,256,279],
[241,0,238,264,254,282,219,220,245,239],
[261,313,0,290,247,273,246,245,245,274],
[240,287,261,0,275,283,225,240,248,244],
[265,297,304,276,0,307,280,279,290,269],
[269,269,278,268,244,0,244,231,236,268],
[289,332,305,326,271,307,0,303,291,290],
[264,331,306,311,272,320,248,0,269,262],
[295,306,306,303,261,315,260,282,0,289],
[272,312,277,307,282,283,261,289,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,266,293,308,268,287,281,274,308],
[256,0,279,298,311,300,287,310,299,297],
[285,272,0,275,297,316,295,307,291,290],
[258,253,276,0,278,298,284,286,293,307],
[243,240,254,273,0,273,257,266,274,271],
[283,251,235,253,278,0,271,246,263,283],
[264,264,256,267,294,280,0,288,297,283],
[270,241,244,265,285,305,263,0,284,287],
[277,252,260,258,277,288,254,267,0,268],
[243,254,261,244,280,268,268,264,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,333,348,258,349,260,336,365,277],
[277,0,247,348,245,307,317,306,331,288],
[218,304,0,390,273,326,274,337,319,247],
[203,203,161,0,146,253,171,204,280,217],
[293,306,278,405,0,336,247,340,334,280],
[202,244,225,298,215,0,201,199,299,187],
[291,234,277,380,304,350,0,294,410,275],
[215,245,214,347,211,352,257,0,317,257],
[186,220,232,271,217,252,141,234,0,220],
[274,263,304,334,271,364,276,294,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,260,269,261,276,246,262,271,280],
[277,0,267,255,271,279,258,290,265,276],
[291,284,0,267,284,298,267,284,291,274],
[282,296,284,0,262,291,257,271,286,294],
[290,280,267,289,0,282,265,281,285,281],
[275,272,253,260,269,0,242,279,262,277],
[305,293,284,294,286,309,0,300,275,283],
[289,261,267,280,270,272,251,0,276,265],
[280,286,260,265,266,289,276,275,0,274],
[271,275,277,257,270,274,268,286,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,303,290,313,312,317,288,296,275],
[270,0,284,304,315,284,303,291,281,279],
[248,267,0,271,284,270,272,275,263,262],
[261,247,280,0,294,254,286,265,278,266],
[238,236,267,257,0,261,274,268,237,253],
[239,267,281,297,290,0,285,282,291,259],
[234,248,279,265,277,266,0,256,272,256],
[263,260,276,286,283,269,295,0,270,256],
[255,270,288,273,314,260,279,281,0,265],
[276,272,289,285,298,292,295,295,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,281,276,279,249,269,279,259,275],
[293,0,286,303,290,293,263,273,279,288],
[270,265,0,268,270,261,261,268,261,275],
[275,248,283,0,255,261,285,268,305,277],
[272,261,281,296,0,279,262,278,276,279],
[302,258,290,290,272,0,288,274,278,297],
[282,288,290,266,289,263,0,284,279,284],
[272,278,283,283,273,277,267,0,276,274],
[292,272,290,246,275,273,272,275,0,271],
[276,263,276,274,272,254,267,277,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,276,294,262,293,328,265,266,286],
[273,0,262,261,260,295,312,268,253,260],
[275,289,0,305,279,282,320,247,254,302],
[257,290,246,0,241,264,285,255,257,282],
[289,291,272,310,0,300,320,280,272,290],
[258,256,269,287,251,0,280,257,263,252],
[223,239,231,266,231,271,0,225,240,271],
[286,283,304,296,271,294,326,0,279,304],
[285,298,297,294,279,288,311,272,0,288],
[265,291,249,269,261,299,280,247,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,283,254,265,273,268,277,254,247],
[295,0,270,270,272,284,268,310,268,263],
[268,281,0,275,251,283,276,317,264,275],
[297,281,276,0,284,297,262,319,287,281],
[286,279,300,267,0,285,267,313,272,255],
[278,267,268,254,266,0,271,272,267,260],
[283,283,275,289,284,280,0,299,260,278],
[274,241,234,232,238,279,252,0,246,230],
[297,283,287,264,279,284,291,305,0,264],
[304,288,276,270,296,291,273,321,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,273,252,256,244,249,267,247,244],
[280,0,261,270,283,256,274,262,266,287],
[278,290,0,264,265,262,259,254,254,256],
[299,281,287,0,285,266,268,261,273,264],
[295,268,286,266,0,262,253,263,247,264],
[307,295,289,285,289,0,282,275,271,282],
[302,277,292,283,298,269,0,271,294,273],
[284,289,297,290,288,276,280,0,275,289],
[304,285,297,278,304,280,257,276,0,292],
[307,264,295,287,287,269,278,262,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,268,271,280,295,278,285,265,299],
[262,0,267,259,276,284,283,280,268,282],
[283,284,0,253,260,273,276,273,259,284],
[280,292,298,0,279,281,300,251,269,283],
[271,275,291,272,0,290,291,250,266,266],
[256,267,278,270,261,0,296,266,284,300],
[273,268,275,251,260,255,0,240,246,260],
[266,271,278,300,301,285,311,0,272,292],
[286,283,292,282,285,267,305,279,0,291],
[252,269,267,268,285,251,291,259,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,278,298,272,260,291,273,288,271],
[268,0,289,291,286,291,291,282,308,310],
[273,262,0,269,266,278,285,282,275,287],
[253,260,282,0,285,288,271,275,272,292],
[279,265,285,266,0,267,277,280,290,277],
[291,260,273,263,284,0,283,278,284,272],
[260,260,266,280,274,268,0,272,288,283],
[278,269,269,276,271,273,279,0,269,275],
[263,243,276,279,261,267,263,282,0,276],
[280,241,264,259,274,279,268,276,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,265,255,264,216,238,254,252,246],
[301,0,279,295,306,289,289,283,266,291],
[286,272,0,317,288,278,237,299,281,306],
[296,256,234,0,283,256,254,281,252,238],
[287,245,263,268,0,265,262,286,229,240],
[335,262,273,295,286,0,255,293,297,287],
[313,262,314,297,289,296,0,276,297,256],
[297,268,252,270,265,258,275,0,246,275],
[299,285,270,299,322,254,254,305,0,311],
[305,260,245,313,311,264,295,276,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,289,298,249,246,255,256,273,252],
[299,0,281,311,255,287,307,282,301,305],
[262,270,0,267,235,271,267,261,278,256],
[253,240,284,0,248,233,270,261,265,276],
[302,296,316,303,0,273,293,283,297,274],
[305,264,280,318,278,0,274,272,300,277],
[296,244,284,281,258,277,0,251,285,301],
[295,269,290,290,268,279,300,0,266,297],
[278,250,273,286,254,251,266,285,0,272],
[299,246,295,275,277,274,250,254,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,287,266,258,281,262,280,274,260],
[279,0,275,281,257,280,283,298,305,265],
[264,276,0,266,274,256,265,293,293,263],
[285,270,285,0,283,266,279,287,281,279],
[293,294,277,268,0,291,288,295,303,277],
[270,271,295,285,260,0,269,283,286,256],
[289,268,286,272,263,282,0,286,283,263],
[271,253,258,264,256,268,265,0,259,253],
[277,246,258,270,248,265,268,292,0,263],
[291,286,288,272,274,295,288,298,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,305,271,315,286,278,281,295,291],
[263,0,268,258,277,258,266,266,275,264],
[246,283,0,255,276,278,272,256,275,257],
[280,293,296,0,286,274,270,276,305,288],
[236,274,275,265,0,279,285,262,263,275],
[265,293,273,277,272,0,292,264,268,289],
[273,285,279,281,266,259,0,284,290,293],
[270,285,295,275,289,287,267,0,285,284],
[256,276,276,246,288,283,261,266,0,273],
[260,287,294,263,276,262,258,267,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,270,285,247,251,246,224,270,238],
[296,0,300,282,266,292,274,279,294,272],
[281,251,0,284,264,252,283,251,276,254],
[266,269,267,0,241,274,275,263,273,244],
[304,285,287,310,0,289,283,272,290,267],
[300,259,299,277,262,0,267,258,270,259],
[305,277,268,276,268,284,0,249,302,275],
[327,272,300,288,279,293,302,0,294,281],
[281,257,275,278,261,281,249,257,0,264],
[313,279,297,307,284,292,276,270,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,295,335,359,326,362,317,321,286],
[283,0,290,320,262,297,272,323,296,257],
[256,261,0,283,336,351,305,303,312,202],
[216,231,268,0,297,256,250,301,285,243],
[192,289,215,254,0,262,223,282,320,218],
[225,254,200,295,289,0,275,291,265,251],
[189,279,246,301,328,276,0,313,287,309],
[234,228,248,250,269,260,238,0,265,304],
[230,255,239,266,231,286,264,286,0,208],
[265,294,349,308,333,300,242,247,343,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,307,291,290,287,295,297,309,296],
[284,0,293,265,301,281,284,293,305,290],
[244,258,0,247,283,294,298,268,280,270],
[260,286,304,0,284,284,299,301,292,290],
[261,250,268,267,0,268,296,279,288,279],
[264,270,257,267,283,0,300,289,277,288],
[256,267,253,252,255,251,0,259,253,259],
[254,258,283,250,272,262,292,0,279,278],
[242,246,271,259,263,274,298,272,0,263],
[255,261,281,261,272,263,292,273,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,253,263,268,267,263,252,251,274],
[296,0,274,276,259,269,255,282,279,274],
[298,277,0,274,284,284,272,299,290,281],
[288,275,277,0,278,271,253,285,271,294],
[283,292,267,273,0,279,271,273,274,288],
[284,282,267,280,272,0,285,284,300,301],
[288,296,279,298,280,266,0,286,304,283],
[299,269,252,266,278,267,265,0,287,288],
[300,272,261,280,277,251,247,264,0,262],
[277,277,270,257,263,250,268,263,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,270,255,276,253,285,273,273,267],
[281,0,269,256,250,263,282,271,253,261],
[281,282,0,256,278,294,301,276,288,290],
[296,295,295,0,270,306,315,295,300,280],
[275,301,273,281,0,271,298,291,276,272],
[298,288,257,245,280,0,277,296,272,272],
[266,269,250,236,253,274,0,263,269,261],
[278,280,275,256,260,255,288,0,262,257],
[278,298,263,251,275,279,282,289,0,260],
[284,290,261,271,279,279,290,294,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,320,323,288,255,314,298,301,299],
[263,0,265,297,273,264,299,297,269,289],
[231,286,0,300,242,244,236,251,269,280],
[228,254,251,0,287,279,269,272,274,295],
[263,278,309,264,0,279,289,300,272,316],
[296,287,307,272,272,0,323,291,297,314],
[237,252,315,282,262,228,0,274,264,286],
[253,254,300,279,251,260,277,0,261,288],
[250,282,282,277,279,254,287,290,0,296],
[252,262,271,256,235,237,265,263,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,249,284,263,234,279,272,277,288],
[270,0,281,292,284,228,287,286,270,297],
[302,270,0,304,253,265,289,333,299,293],
[267,259,247,0,247,254,265,259,274,257],
[288,267,298,304,0,277,297,284,292,293],
[317,323,286,297,274,0,268,316,292,289],
[272,264,262,286,254,283,0,288,283,292],
[279,265,218,292,267,235,263,0,267,251],
[274,281,252,277,259,259,268,284,0,266],
[263,254,258,294,258,262,259,300,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,263,262,259,242,258,238,251,251],
[297,0,269,298,267,240,280,283,261,252],
[288,282,0,312,282,278,292,271,275,299],
[289,253,239,0,265,245,271,264,235,265],
[292,284,269,286,0,268,276,275,264,282],
[309,311,273,306,283,0,289,299,283,304],
[293,271,259,280,275,262,0,287,257,275],
[313,268,280,287,276,252,264,0,271,268],
[300,290,276,316,287,268,294,280,0,284],
[300,299,252,286,269,247,276,283,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,288,283,290,274,281,284,302,292],
[255,0,260,266,273,268,264,274,284,285],
[263,291,0,269,274,258,266,272,286,297],
[268,285,282,0,290,289,272,272,295,277],
[261,278,277,261,0,269,279,276,285,296],
[277,283,293,262,282,0,280,293,287,285],
[270,287,285,279,272,271,0,287,286,297],
[267,277,279,279,275,258,264,0,290,294],
[249,267,265,256,266,264,265,261,0,282],
[259,266,254,274,255,266,254,257,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,242,255,282,252,319,263,275,212],
[272,0,284,315,257,250,317,238,300,265],
[309,267,0,335,335,277,326,295,315,285],
[296,236,216,0,255,238,263,234,287,252],
[269,294,216,296,0,246,252,251,277,242],
[299,301,274,313,305,0,317,284,293,294],
[232,234,225,288,299,234,0,232,231,215],
[288,313,256,317,300,267,319,0,318,289],
[276,251,236,264,274,258,320,233,0,203],
[339,286,266,299,309,257,336,262,348,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,312,289,296,280,252,288,292,257],
[287,0,281,274,286,266,271,285,292,274],
[239,270,0,280,265,264,253,252,259,257],
[262,277,271,0,265,273,251,267,289,248],
[255,265,286,286,0,258,267,257,279,244],
[271,285,287,278,293,0,255,290,285,259],
[299,280,298,300,284,296,0,270,298,253],
[263,266,299,284,294,261,281,0,278,280],
[259,259,292,262,272,266,253,273,0,248],
[294,277,294,303,307,292,298,271,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,291,267,282,294,252,261,261,283],
[253,0,287,248,292,260,275,260,273,292],
[260,264,0,238,290,250,259,240,239,252],
[284,303,313,0,320,265,258,272,305,285],
[269,259,261,231,0,268,234,265,242,257],
[257,291,301,286,283,0,267,237,264,268],
[299,276,292,293,317,284,0,260,290,310],
[290,291,311,279,286,314,291,0,275,283],
[290,278,312,246,309,287,261,276,0,299],
[268,259,299,266,294,283,241,268,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,284,295,298,286,270,269,270,323],
[267,0,273,299,268,293,259,259,265,318],
[267,278,0,297,299,267,281,263,247,307],
[256,252,254,0,281,242,249,260,256,271],
[253,283,252,270,0,246,238,274,249,270],
[265,258,284,309,305,0,255,282,274,271],
[281,292,270,302,313,296,0,298,298,323],
[282,292,288,291,277,269,253,0,238,303],
[281,286,304,295,302,277,253,313,0,305],
[228,233,244,280,281,280,228,248,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,271,302,276,258,277,275,279,276],
[288,0,285,316,291,282,268,276,314,286],
[280,266,0,299,307,261,285,265,276,301],
[249,235,252,0,259,256,268,259,262,263],
[275,260,244,292,0,255,269,259,274,260],
[293,269,290,295,296,0,291,282,283,285],
[274,283,266,283,282,260,0,266,281,283],
[276,275,286,292,292,269,285,0,304,291],
[272,237,275,289,277,268,270,247,0,278],
[275,265,250,288,291,266,268,260,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,287,330,301,281,298,305,270,295],
[228,0,252,307,261,266,254,275,238,249],
[264,299,0,290,299,257,284,294,281,288],
[221,244,261,0,262,249,247,260,243,250],
[250,290,252,289,0,247,258,291,250,261],
[270,285,294,302,304,0,276,301,292,279],
[253,297,267,304,293,275,0,291,269,253],
[246,276,257,291,260,250,260,0,250,245],
[281,313,270,308,301,259,282,301,0,267],
[256,302,263,301,290,272,298,306,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,267,280,290,290,289,273,283,295],
[308,0,290,278,310,309,293,275,294,311],
[284,261,0,270,308,298,289,281,273,305],
[271,273,281,0,287,287,306,298,270,321],
[261,241,243,264,0,282,272,250,270,279],
[261,242,253,264,269,0,250,257,248,282],
[262,258,262,245,279,301,0,277,267,283],
[278,276,270,253,301,294,274,0,269,298],
[268,257,278,281,281,303,284,282,0,297],
[256,240,246,230,272,269,268,253,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,261,275,252,257,246,273,278,229],
[261,0,275,257,252,249,265,262,254,249],
[290,276,0,277,280,262,280,268,302,254],
[276,294,274,0,248,260,254,278,276,261],
[299,299,271,303,0,263,271,284,289,270],
[294,302,289,291,288,0,272,294,299,255],
[305,286,271,297,280,279,0,288,304,278],
[278,289,283,273,267,257,263,0,288,267],
[273,297,249,275,262,252,247,263,0,241],
[322,302,297,290,281,296,273,284,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,306,304,264,289,273,312,263,263],
[291,0,277,288,265,278,262,279,254,266],
[245,274,0,282,266,245,247,285,277,278],
[247,263,269,0,279,274,240,282,241,279],
[287,286,285,272,0,273,282,273,290,257],
[262,273,306,277,278,0,244,307,266,295],
[278,289,304,311,269,307,0,315,283,289],
[239,272,266,269,278,244,236,0,242,248],
[288,297,274,310,261,285,268,309,0,312],
[288,285,273,272,294,256,262,303,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,290,291,311,268,291,308,273,293],
[255,0,251,255,246,252,261,276,251,280],
[261,300,0,284,282,290,273,304,281,279],
[260,296,267,0,272,270,268,300,262,278],
[240,305,269,279,0,271,262,299,272,280],
[283,299,261,281,280,0,264,298,258,297],
[260,290,278,283,289,287,0,293,264,279],
[243,275,247,251,252,253,258,0,250,273],
[278,300,270,289,279,293,287,301,0,286],
[258,271,272,273,271,254,272,278,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,282,295,303,265,294,281,257,304],
[283,0,263,241,259,292,269,260,239,324],
[269,288,0,275,279,290,263,282,245,307],
[256,310,276,0,307,287,320,271,277,293],
[248,292,272,244,0,269,323,263,262,278],
[286,259,261,264,282,0,283,274,245,292],
[257,282,288,231,228,268,0,272,253,293],
[270,291,269,280,288,277,279,0,242,288],
[294,312,306,274,289,306,298,309,0,320],
[247,227,244,258,273,259,258,263,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,265,273,284,269,275,258,269,276],
[261,0,247,274,257,250,258,244,253,262],
[286,304,0,281,281,282,280,258,276,277],
[278,277,270,0,283,262,277,258,281,284],
[267,294,270,268,0,263,269,265,252,267],
[282,301,269,289,288,0,285,274,282,281],
[276,293,271,274,282,266,0,262,286,280],
[293,307,293,293,286,277,289,0,284,275],
[282,298,275,270,299,269,265,267,0,284],
[275,289,274,267,284,270,271,276,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,284,294,260,275,274,278,259,330],
[280,0,261,275,296,294,283,289,245,307],
[267,290,0,278,279,275,277,287,276,279],
[257,276,273,0,271,286,295,278,277,273],
[291,255,272,280,0,285,274,283,243,289],
[276,257,276,265,266,0,271,281,260,267],
[277,268,274,256,277,280,0,282,245,282],
[273,262,264,273,268,270,269,0,247,288],
[292,306,275,274,308,291,306,304,0,290],
[221,244,272,278,262,284,269,263,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,272,243,272,262,277,283,259,276],
[288,0,277,263,282,284,273,298,286,289],
[279,274,0,280,280,261,287,296,258,284],
[308,288,271,0,280,262,290,288,280,300],
[279,269,271,271,0,269,286,292,272,294],
[289,267,290,289,282,0,307,302,273,292],
[274,278,264,261,265,244,0,275,250,287],
[268,253,255,263,259,249,276,0,249,294],
[292,265,293,271,279,278,301,302,0,294],
[275,262,267,251,257,259,264,257,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,298,294,305,231,294,272,255,257],
[283,0,294,282,275,249,294,281,268,278],
[253,257,0,266,295,244,248,257,277,249],
[257,269,285,0,279,245,255,251,252,271],
[246,276,256,272,0,229,265,271,215,230],
[320,302,307,306,322,0,314,326,275,317],
[257,257,303,296,286,237,0,291,265,297],
[279,270,294,300,280,225,260,0,259,238],
[296,283,274,299,336,276,286,292,0,280],
[294,273,302,280,321,234,254,313,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,270,287,268,271,281,300,260,276],
[285,0,294,286,313,274,260,308,286,272],
[281,257,0,279,284,290,252,299,259,274],
[264,265,272,0,295,278,240,290,283,258],
[283,238,267,256,0,250,257,250,252,252],
[280,277,261,273,301,0,255,301,277,275],
[270,291,299,311,294,296,0,285,285,293],
[251,243,252,261,301,250,266,0,262,254],
[291,265,292,268,299,274,266,289,0,276],
[275,279,277,293,299,276,258,297,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,258,269,264,274,271,263,288],
[276,0,251,257,276,285,270,295,285,262],
[275,300,0,264,280,260,275,313,288,290],
[293,294,287,0,272,297,303,308,319,307],
[282,275,271,279,0,297,260,295,303,274],
[287,266,291,254,254,0,278,297,265,266],
[277,281,276,248,291,273,0,303,287,283],
[280,256,238,243,256,254,248,0,266,246],
[288,266,263,232,248,286,264,285,0,290],
[263,289,261,244,277,285,268,305,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,277,271,269,269,281,274,295,268],
[276,0,275,264,272,283,291,287,298,280],
[274,276,0,289,284,267,286,260,297,274],
[280,287,262,0,294,294,278,269,271,264],
[282,279,267,257,0,258,287,286,277,284],
[282,268,284,257,293,0,291,271,306,281],
[270,260,265,273,264,260,0,272,282,287],
[277,264,291,282,265,280,279,0,289,280],
[256,253,254,280,274,245,269,262,0,259],
[283,271,277,287,267,270,264,271,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,278,293,294,284,286,308,287,285],
[286,0,296,272,314,284,289,316,283,292],
[273,255,0,280,277,252,280,287,260,278],
[258,279,271,0,263,265,282,285,260,275],
[257,237,274,288,0,266,282,296,257,261],
[267,267,299,286,285,0,298,294,296,297],
[265,262,271,269,269,253,0,289,281,285],
[243,235,264,266,255,257,262,0,265,265],
[264,268,291,291,294,255,270,286,0,281],
[266,259,273,276,290,254,266,286,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,244,267,262,264,299,295,256,269],
[275,0,254,257,276,263,288,295,265,256],
[307,297,0,284,272,276,287,320,291,280],
[284,294,267,0,276,254,285,292,276,272],
[289,275,279,275,0,255,288,305,264,275],
[287,288,275,297,296,0,290,315,271,305],
[252,263,264,266,263,261,0,299,251,277],
[256,256,231,259,246,236,252,0,227,261],
[295,286,260,275,287,280,300,324,0,277],
[282,295,271,279,276,246,274,290,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,248,280,262,302,271,269,276,277],
[266,0,240,269,262,279,266,267,260,275],
[303,311,0,311,265,280,260,285,291,296],
[271,282,240,0,281,277,259,277,268,281],
[289,289,286,270,0,298,270,287,282,287],
[249,272,271,274,253,0,275,257,257,273],
[280,285,291,292,281,276,0,288,272,288],
[282,284,266,274,264,294,263,0,272,275],
[275,291,260,283,269,294,279,279,0,299],
[274,276,255,270,264,278,263,276,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,219,258,195,191,191,230,229,208],
[295,0,282,285,274,257,294,308,270,241],
[332,269,0,309,313,245,280,243,234,279],
[293,266,242,0,260,257,233,234,220,217],
[356,277,238,291,0,267,264,279,281,264],
[360,294,306,294,284,0,269,259,243,269],
[360,257,271,318,287,282,0,282,300,219],
[321,243,308,317,272,292,269,0,232,255],
[322,281,317,331,270,308,251,319,0,343],
[343,310,272,334,287,282,332,296,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,263,304,277,268,291,294,305,277],
[263,0,293,294,291,250,271,258,294,258],
[288,258,0,299,256,218,296,175,253,218],
[247,257,252,0,258,227,284,231,234,233],
[274,260,295,293,0,228,310,203,245,251],
[283,301,333,324,323,0,300,262,287,312],
[260,280,255,267,241,251,0,249,224,230],
[257,293,376,320,348,289,302,0,296,282],
[246,257,298,317,306,264,327,255,0,292],
[274,293,333,318,300,239,321,269,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,261,286,302,265,292,270,287,279],
[275,0,271,284,300,273,294,259,303,268],
[290,280,0,278,302,267,277,278,297,246],
[265,267,273,0,261,263,286,244,292,246],
[249,251,249,290,0,247,250,258,265,243],
[286,278,284,288,304,0,287,289,305,267],
[259,257,274,265,301,264,0,246,269,254],
[281,292,273,307,293,262,305,0,302,259],
[264,248,254,259,286,246,282,249,0,229],
[272,283,305,305,308,284,297,292,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,273,270,269,273,284,280,283,282],
[259,0,277,248,257,287,265,258,261,254],
[278,274,0,258,277,279,279,281,277,268],
[281,303,293,0,292,296,271,289,276,274],
[282,294,274,259,0,291,288,278,272,281],
[278,264,272,255,260,0,271,264,266,259],
[267,286,272,280,263,280,0,278,281,269],
[271,293,270,262,273,287,273,0,270,270],
[268,290,274,275,279,285,270,281,0,269],
[269,297,283,277,270,292,282,281,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,344,345,206,344,206,138,139],
[277,0,138,207,275,69,276,205,206,69],
[276,413,0,276,345,343,346,343,277,209],
[207,344,275,0,207,206,346,205,207,139],
[206,276,206,344,0,206,344,206,208,140],
[345,482,208,345,345,0,415,275,276,278],
[207,275,205,205,207,136,0,205,69,70],
[345,346,208,346,345,276,346,0,277,140],
[413,345,274,344,343,275,482,274,0,278],
[412,482,342,412,411,273,481,411,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,371,364,278,231,347,298,414,348,301],
[180,0,316,206,182,234,253,253,204,116],
[187,235,0,188,209,257,208,280,278,187],
[273,345,363,0,274,343,276,343,370,300],
[320,369,342,277,0,345,320,365,327,232],
[204,317,294,208,206,0,301,252,228,183],
[253,298,343,275,231,250,0,297,274,228],
[137,298,271,208,186,299,254,0,208,162],
[203,347,273,181,224,323,277,343,0,210],
[250,435,364,251,319,368,323,389,341,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,249,248,247,235,249,257,267,255],
[299,0,275,264,300,283,294,289,246,272],
[302,276,0,258,288,285,290,278,260,297],
[303,287,293,0,286,268,277,276,261,298],
[304,251,263,265,0,262,272,307,283,263],
[316,268,266,283,289,0,294,280,306,306],
[302,257,261,274,279,257,0,285,280,285],
[294,262,273,275,244,271,266,0,260,286],
[284,305,291,290,268,245,271,291,0,284],
[296,279,254,253,288,245,266,265,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,268,325,329,387,269,368,290,307],
[281,0,223,282,247,285,260,284,267,225],
[283,328,0,284,305,328,306,346,255,213],
[226,269,267,0,209,293,304,306,271,266],
[222,304,246,342,0,305,323,324,308,264],
[164,266,223,258,246,0,300,302,247,282],
[282,291,245,247,228,251,0,330,268,230],
[183,267,205,245,227,249,221,0,251,246],
[261,284,296,280,243,304,283,300,0,285],
[244,326,338,285,287,269,321,305,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,284,278,240,300,301,282,259,260],
[262,0,287,293,263,294,290,278,275,267],
[267,264,0,309,248,283,234,285,294,265],
[273,258,242,0,253,249,238,261,303,291],
[311,288,303,298,0,291,275,266,301,285],
[251,257,268,302,260,0,250,293,274,258],
[250,261,317,313,276,301,0,291,311,290],
[269,273,266,290,285,258,260,0,278,240],
[292,276,257,248,250,277,240,273,0,280],
[291,284,286,260,266,293,261,311,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,254,258,263,254,268,285,243,255],
[292,0,281,271,287,280,287,309,276,281],
[297,270,0,251,275,254,264,293,250,263],
[293,280,300,0,286,273,291,292,275,278],
[288,264,276,265,0,269,275,278,262,265],
[297,271,297,278,282,0,285,298,266,277],
[283,264,287,260,276,266,0,292,266,270],
[266,242,258,259,273,253,259,0,262,257],
[308,275,301,276,289,285,285,289,0,278],
[296,270,288,273,286,274,281,294,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,248,277,256,268,274,262,277,262],
[292,0,282,284,265,279,281,279,305,285],
[303,269,0,270,274,290,296,269,292,270],
[274,267,281,0,281,283,280,269,285,277],
[295,286,277,270,0,280,281,274,297,278],
[283,272,261,268,271,0,279,258,277,273],
[277,270,255,271,270,272,0,259,286,262],
[289,272,282,282,277,293,292,0,301,283],
[274,246,259,266,254,274,265,250,0,260],
[289,266,281,274,273,278,289,268,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,252,294,266,262,297,279,275,288],
[272,0,235,283,243,245,269,273,262,264],
[299,316,0,301,255,300,306,308,296,299],
[257,268,250,0,262,246,297,285,259,288],
[285,308,296,289,0,254,295,315,291,304],
[289,306,251,305,297,0,314,317,293,290],
[254,282,245,254,256,237,0,278,266,274],
[272,278,243,266,236,234,273,0,273,268],
[276,289,255,292,260,258,285,278,0,285],
[263,287,252,263,247,261,277,283,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,318,219,289,304,261,247,254,283],
[292,0,289,273,309,300,278,233,293,305],
[233,262,0,221,265,285,228,231,246,304],
[332,278,330,0,270,314,271,272,253,334],
[262,242,286,281,0,272,244,251,232,293],
[247,251,266,237,279,0,251,251,266,250],
[290,273,323,280,307,300,0,270,277,309],
[304,318,320,279,300,300,281,0,272,282],
[297,258,305,298,319,285,274,279,0,340],
[268,246,247,217,258,301,242,269,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,551,330,221,220,219,330,330,109],
[220,0,442,219,110,109,110,220,110,219],
[0,109,0,219,110,109,110,219,0,109],
[221,332,332,0,111,220,0,221,221,219],
[330,441,441,440,0,109,220,330,441,330],
[331,442,442,331,442,0,221,331,332,221],
[332,441,441,551,331,330,0,551,441,219],
[221,331,332,330,221,220,0,0,221,219],
[221,441,551,330,110,219,110,330,0,109],
[442,332,442,332,221,330,332,332,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,246,242,260,267,277,246,332,279],
[262,0,263,256,248,270,249,270,274,279],
[305,288,0,258,257,280,267,283,333,311],
[309,295,293,0,301,278,268,299,317,299],
[291,303,294,250,0,276,278,271,318,325],
[284,281,271,273,275,0,257,273,337,316],
[274,302,284,283,273,294,0,285,307,303],
[305,281,268,252,280,278,266,0,289,312],
[219,277,218,234,233,214,244,262,0,275],
[272,272,240,252,226,235,248,239,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,294,261,277,279,276,316,286,301],
[272,0,257,226,264,270,274,275,246,253],
[257,294,0,209,270,275,275,280,249,244],
[290,325,342,0,270,281,298,306,242,291],
[274,287,281,281,0,292,273,292,309,287],
[272,281,276,270,259,0,283,256,262,262],
[275,277,276,253,278,268,0,291,267,260],
[235,276,271,245,259,295,260,0,259,226],
[265,305,302,309,242,289,284,292,0,267],
[250,298,307,260,264,289,291,325,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,281,258,277,269,271,293,301,275],
[286,0,295,268,280,280,272,286,296,273],
[270,256,0,253,257,250,266,282,273,248],
[293,283,298,0,276,282,280,287,279,270],
[274,271,294,275,0,282,276,307,284,285],
[282,271,301,269,269,0,269,276,299,263],
[280,279,285,271,275,282,0,295,292,272],
[258,265,269,264,244,275,256,0,282,270],
[250,255,278,272,267,252,259,269,0,270],
[276,278,303,281,266,288,279,281,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,275,279,290,271,281,285,287],
[274,0,269,278,264,306,275,269,271,289],
[266,282,0,287,266,274,252,252,240,242],
[276,273,264,0,271,266,256,260,272,265],
[272,287,285,280,0,288,268,276,264,265],
[261,245,277,285,263,0,254,277,266,277],
[280,276,299,295,283,297,0,292,275,289],
[270,282,299,291,275,274,259,0,265,266],
[266,280,311,279,287,285,276,286,0,297],
[264,262,309,286,286,274,262,285,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,272,286,293,284,290,294,240,284],
[287,0,298,291,273,280,281,302,272,298],
[279,253,0,292,290,261,267,292,279,288],
[265,260,259,0,275,272,274,273,239,283],
[258,278,261,276,0,277,280,285,274,271],
[267,271,290,279,274,0,270,316,263,291],
[261,270,284,277,271,281,0,282,274,303],
[257,249,259,278,266,235,269,0,268,270],
[311,279,272,312,277,288,277,283,0,293],
[267,253,263,268,280,260,248,281,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,292,268,287,281,261,276,293,282],
[271,0,260,273,271,260,270,269,276,278],
[259,291,0,284,280,274,257,280,290,290],
[283,278,267,0,271,276,284,296,284,281],
[264,280,271,280,0,274,261,280,277,280],
[270,291,277,275,277,0,282,292,287,299],
[290,281,294,267,290,269,0,288,284,289],
[275,282,271,255,271,259,263,0,270,251],
[258,275,261,267,274,264,267,281,0,262],
[269,273,261,270,271,252,262,300,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,275,260,265,256,245,284,257,268],
[292,0,304,289,301,285,262,300,288,291],
[276,247,0,269,291,263,242,257,230,255],
[291,262,282,0,285,283,264,289,258,251],
[286,250,260,266,0,266,244,270,263,270],
[295,266,288,268,285,0,266,282,254,290],
[306,289,309,287,307,285,0,317,260,294],
[267,251,294,262,281,269,234,0,245,259],
[294,263,321,293,288,297,291,306,0,276],
[283,260,296,300,281,261,257,292,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,253,252,272,281,266,290,255,299],
[293,0,275,266,266,281,282,292,276,306],
[298,276,0,271,278,286,274,275,280,316],
[299,285,280,0,277,266,276,302,267,312],
[279,285,273,274,0,288,291,284,283,295],
[270,270,265,285,263,0,278,291,265,300],
[285,269,277,275,260,273,0,289,258,294],
[261,259,276,249,267,260,262,0,253,277],
[296,275,271,284,268,286,293,298,0,291],
[252,245,235,239,256,251,257,274,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,257,275,270,256,278,280,279,269],
[296,0,274,298,296,279,290,272,297,282],
[294,277,0,275,286,268,289,254,286,269],
[276,253,276,0,283,255,292,259,271,252],
[281,255,265,268,0,244,276,276,266,255],
[295,272,283,296,307,0,283,281,275,278],
[273,261,262,259,275,268,0,254,276,259],
[271,279,297,292,275,270,297,0,275,271],
[272,254,265,280,285,276,275,276,0,248],
[282,269,282,299,296,273,292,280,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,264,304,271,301,278,288,276,285],
[268,0,250,280,272,282,263,258,249,280],
[287,301,0,303,272,287,277,279,274,268],
[247,271,248,0,260,265,256,271,247,257],
[280,279,279,291,0,289,276,276,275,281],
[250,269,264,286,262,0,266,279,254,268],
[273,288,274,295,275,285,0,289,265,260],
[263,293,272,280,275,272,262,0,266,266],
[275,302,277,304,276,297,286,285,0,278],
[266,271,283,294,270,283,291,285,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,319,262,271,250,246,247,283,269],
[248,0,290,247,266,263,276,230,255,254],
[232,261,0,252,247,241,268,253,262,249],
[289,304,299,0,285,266,279,273,301,290],
[280,285,304,266,0,274,256,235,272,248],
[301,288,310,285,277,0,301,271,271,283],
[305,275,283,272,295,250,0,278,285,287],
[304,321,298,278,316,280,273,0,300,287],
[268,296,289,250,279,280,266,251,0,272],
[282,297,302,261,303,268,264,264,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,269,327,286,304,296,265,321,304],
[263,0,246,281,273,291,256,274,294,276],
[282,305,0,320,259,320,254,267,295,307],
[224,270,231,0,265,276,239,231,285,283],
[265,278,292,286,0,286,269,276,293,266],
[247,260,231,275,265,0,245,230,285,266],
[255,295,297,312,282,306,0,303,289,255],
[286,277,284,320,275,321,248,0,311,276],
[230,257,256,266,258,266,262,240,0,265],
[247,275,244,268,285,285,296,275,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,285,260,267,261,261,264,277,269],
[269,0,268,277,270,252,263,256,258,270],
[266,283,0,275,292,266,266,252,277,267],
[291,274,276,0,272,278,268,260,288,282],
[284,281,259,279,0,252,270,258,274,288],
[290,299,285,273,299,0,283,281,293,297],
[290,288,285,283,281,268,0,256,294,289],
[287,295,299,291,293,270,295,0,294,299],
[274,293,274,263,277,258,257,257,0,272],
[282,281,284,269,263,254,262,252,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,281,287,287,264,271,276,286,282],
[277,0,290,288,275,262,277,257,276,295],
[270,261,0,269,276,253,259,259,276,269],
[264,263,282,0,264,262,255,264,270,262],
[264,276,275,287,0,266,285,280,287,279],
[287,289,298,289,285,0,289,268,295,296],
[280,274,292,296,266,262,0,287,277,280],
[275,294,292,287,271,283,264,0,276,288],
[265,275,275,281,264,256,274,275,0,284],
[269,256,282,289,272,255,271,263,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,286,298,280,280,316,275,287,297],
[272,0,270,281,266,298,306,264,270,276],
[265,281,0,277,289,286,310,267,276,288],
[253,270,274,0,262,269,310,274,281,266],
[271,285,262,289,0,281,320,267,285,304],
[271,253,265,282,270,0,305,279,285,274],
[235,245,241,241,231,246,0,247,238,243],
[276,287,284,277,284,272,304,0,263,299],
[264,281,275,270,266,266,313,288,0,284],
[254,275,263,285,247,277,308,252,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,281,284,309,281,266,279,256,287],
[258,0,272,262,281,288,265,275,267,267],
[270,279,0,291,293,282,273,305,269,289],
[267,289,260,0,298,287,276,299,263,273],
[242,270,258,253,0,288,267,272,257,267],
[270,263,269,264,263,0,247,274,253,280],
[285,286,278,275,284,304,0,282,299,279],
[272,276,246,252,279,277,269,0,274,263],
[295,284,282,288,294,298,252,277,0,264],
[264,284,262,278,284,271,272,288,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,279,285,283,291,274,287,284,292],
[266,0,269,284,252,251,258,268,281,280],
[272,282,0,281,289,268,277,264,262,289],
[266,267,270,0,273,268,250,303,255,278],
[268,299,262,278,0,280,262,282,263,272],
[260,300,283,283,271,0,262,286,254,288],
[277,293,274,301,289,289,0,295,296,301],
[264,283,287,248,269,265,256,0,267,252],
[267,270,289,296,288,297,255,284,0,300],
[259,271,262,273,279,263,250,299,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,294,271,268,261,275,284,274,301],
[254,0,305,243,271,268,268,268,272,258],
[257,246,0,247,268,253,241,248,268,261],
[280,308,304,0,292,287,275,276,273,279],
[283,280,283,259,0,271,292,286,278,258],
[290,283,298,264,280,0,282,276,268,288],
[276,283,310,276,259,269,0,289,268,276],
[267,283,303,275,265,275,262,0,253,271],
[277,279,283,278,273,283,283,298,0,268],
[250,293,290,272,293,263,275,280,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,278,265,283,295,287,290,276,281],
[274,0,288,271,274,292,294,288,267,278],
[273,263,0,298,282,299,290,274,292,272],
[286,280,253,0,271,290,260,287,271,274],
[268,277,269,280,0,298,286,282,271,269],
[256,259,252,261,253,0,262,234,272,259],
[264,257,261,291,265,289,0,278,265,273],
[261,263,277,264,269,317,273,0,266,272],
[275,284,259,280,280,279,286,285,0,282],
[270,273,279,277,282,292,278,279,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,274,265,272,259,280,234,270,290],
[292,0,253,275,273,290,305,263,290,282],
[277,298,0,283,300,273,303,282,286,312],
[286,276,268,0,301,272,294,276,294,293],
[279,278,251,250,0,259,270,250,269,291],
[292,261,278,279,292,0,324,254,287,297],
[271,246,248,257,281,227,0,239,256,254],
[317,288,269,275,301,297,312,0,287,286],
[281,261,265,257,282,264,295,264,0,275],
[261,269,239,258,260,254,297,265,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,275,313,301,294,281,261,282,267],
[267,0,285,294,279,292,245,249,271,304],
[276,266,0,290,281,280,257,252,283,273],
[238,257,261,0,290,281,256,248,263,252],
[250,272,270,261,0,280,250,251,280,272],
[257,259,271,270,271,0,255,273,286,250],
[270,306,294,295,301,296,0,287,285,305],
[290,302,299,303,300,278,264,0,284,273],
[269,280,268,288,271,265,266,267,0,273],
[284,247,278,299,279,301,246,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,284,274,279,279,266,272,291,266],
[283,0,281,263,277,284,277,288,298,287],
[267,270,0,279,287,287,247,273,292,257],
[277,288,272,0,288,276,278,277,281,261],
[272,274,264,263,0,286,252,273,273,246],
[272,267,264,275,265,0,258,281,289,267],
[285,274,304,273,299,293,0,300,293,255],
[279,263,278,274,278,270,251,0,277,266],
[260,253,259,270,278,262,258,274,0,269],
[285,264,294,290,305,284,296,285,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,282,293,299,295,316,279,268,295],
[262,0,297,287,315,277,332,289,294,291],
[269,254,0,267,314,280,295,271,298,267],
[258,264,284,0,286,275,316,281,269,267],
[252,236,237,265,0,261,262,246,228,269],
[256,274,271,276,290,0,294,269,258,261],
[235,219,256,235,289,257,0,259,239,264],
[272,262,280,270,305,282,292,0,278,277],
[283,257,253,282,323,293,312,273,0,285],
[256,260,284,284,282,290,287,274,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,288,295,291,287,275,280,281,275],
[266,0,302,278,275,283,275,305,290,291],
[263,249,0,243,260,247,270,236,242,256],
[256,273,308,0,265,299,266,278,287,290],
[260,276,291,286,0,295,303,272,262,281],
[264,268,304,252,256,0,291,287,253,283],
[276,276,281,285,248,260,0,268,252,257],
[271,246,315,273,279,264,283,0,271,288],
[270,261,309,264,289,298,299,280,0,283],
[276,260,295,261,270,268,294,263,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,269,275,283,260,286,282,273,269],
[298,0,278,292,295,280,288,293,287,274],
[282,273,0,272,285,269,277,278,270,267],
[276,259,279,0,272,255,283,277,268,256],
[268,256,266,279,0,261,278,267,273,259],
[291,271,282,296,290,0,284,277,282,270],
[265,263,274,268,273,267,0,279,267,267],
[269,258,273,274,284,274,272,0,255,275],
[278,264,281,283,278,269,284,296,0,280],
[282,277,284,295,292,281,284,276,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,322,291,298,266,288,286,299,297],
[235,0,265,292,271,241,253,263,252,248],
[229,286,0,269,279,247,251,265,258,244],
[260,259,282,0,263,251,276,249,250,269],
[253,280,272,288,0,269,266,272,255,274],
[285,310,304,300,282,0,279,274,291,274],
[263,298,300,275,285,272,0,284,277,263],
[265,288,286,302,279,277,267,0,279,264],
[252,299,293,301,296,260,274,272,0,256],
[254,303,307,282,277,277,288,287,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,299,279,270,277,266,285,286,270],
[287,0,287,264,273,290,283,276,272,273],
[252,264,0,242,256,265,261,252,251,252],
[272,287,309,0,281,287,278,282,284,280],
[281,278,295,270,0,281,262,270,283,256],
[274,261,286,264,270,0,263,259,266,260],
[285,268,290,273,289,288,0,290,300,279],
[266,275,299,269,281,292,261,0,269,266],
[265,279,300,267,268,285,251,282,0,266],
[281,278,299,271,295,291,272,285,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,273,286,285,271,283,262,277,272],
[261,0,268,278,278,254,257,281,260,250],
[278,283,0,246,276,266,242,250,266,253],
[265,273,305,0,270,267,273,257,275,252],
[266,273,275,281,0,261,269,263,287,275],
[280,297,285,284,290,0,269,268,269,271],
[268,294,309,278,282,282,0,280,286,278],
[289,270,301,294,288,283,271,0,279,291],
[274,291,285,276,264,282,265,272,0,260],
[279,301,298,299,276,280,273,260,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,283,273,277,277,289,272,275,311],
[281,0,279,262,259,252,300,285,276,282],
[268,272,0,262,267,287,292,275,246,293],
[278,289,289,0,275,280,295,281,289,305],
[274,292,284,276,0,263,305,294,270,317],
[274,299,264,271,288,0,299,294,269,281],
[262,251,259,256,246,252,0,255,250,278],
[279,266,276,270,257,257,296,0,244,282],
[276,275,305,262,281,282,301,307,0,292],
[240,269,258,246,234,270,273,269,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,268,285,271,281,266,269,266,282],
[248,0,257,259,247,251,255,253,268,248],
[283,294,0,278,271,284,273,282,287,280],
[266,292,273,0,254,277,280,280,284,269],
[280,304,280,297,0,284,289,273,295,286],
[270,300,267,274,267,0,267,278,272,278],
[285,296,278,271,262,284,0,279,283,287],
[282,298,269,271,278,273,272,0,265,260],
[285,283,264,267,256,279,268,286,0,271],
[269,303,271,282,265,273,264,291,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,264,279,284,274,277,286,276,282],
[282,0,266,293,288,267,279,268,286,293],
[287,285,0,276,300,261,279,277,285,288],
[272,258,275,0,280,263,290,281,272,271],
[267,263,251,271,0,236,268,281,252,268],
[277,284,290,288,315,0,286,268,286,292],
[274,272,272,261,283,265,0,271,302,299],
[265,283,274,270,270,283,280,0,266,300],
[275,265,266,279,299,265,249,285,0,273],
[269,258,263,280,283,259,252,251,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,277,257,294,286,293,277,267,286],
[306,0,279,278,268,269,285,277,303,269],
[274,272,0,282,278,274,291,304,282,260],
[294,273,269,0,250,258,267,261,294,284],
[257,283,273,301,0,257,287,283,286,265],
[265,282,277,293,294,0,303,300,316,269],
[258,266,260,284,264,248,0,282,289,268],
[274,274,247,290,268,251,269,0,277,246],
[284,248,269,257,265,235,262,274,0,244],
[265,282,291,267,286,282,283,305,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,274,254,266,283,275,259,270,297],
[273,0,284,265,276,262,277,259,284,282],
[277,267,0,259,279,261,261,261,277,277],
[297,286,292,0,273,283,292,283,274,297],
[285,275,272,278,0,288,283,273,274,283],
[268,289,290,268,263,0,271,246,251,268],
[276,274,290,259,268,280,0,259,270,276],
[292,292,290,268,278,305,292,0,291,297],
[281,267,274,277,277,300,281,260,0,278],
[254,269,274,254,268,283,275,254,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,241,259,263,272,253,255,258,253],
[308,0,265,279,297,289,289,285,281,289],
[310,286,0,281,271,295,301,277,265,284],
[292,272,270,0,284,280,284,284,272,298],
[288,254,280,267,0,287,284,268,264,283],
[279,262,256,271,264,0,264,283,248,261],
[298,262,250,267,267,287,0,265,253,268],
[296,266,274,267,283,268,286,0,275,262],
[293,270,286,279,287,303,298,276,0,271],
[298,262,267,253,268,290,283,289,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,242,308,378,239,377,241,309,275],
[275,0,243,305,277,169,307,138,239,275],
[309,308,0,307,346,343,375,203,343,310],
[243,246,244,0,244,212,244,175,210,246],
[173,274,205,307,0,242,237,168,203,240],
[312,382,208,339,309,0,306,276,307,273],
[174,244,176,307,314,245,0,105,278,246],
[310,413,348,376,383,275,446,0,378,346],
[242,312,208,341,348,244,273,173,0,244],
[276,276,241,305,311,278,305,205,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,288,291,267,275,264,289,293,292],
[275,0,266,288,274,285,284,289,290,291],
[263,285,0,289,259,280,261,272,291,287],
[260,263,262,0,241,261,246,257,266,281],
[284,277,292,310,0,283,275,295,287,285],
[276,266,271,290,268,0,271,272,281,260],
[287,267,290,305,276,280,0,290,282,304],
[262,262,279,294,256,279,261,0,281,277],
[258,261,260,285,264,270,269,270,0,262],
[259,260,264,270,266,291,247,274,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,268,275,278,254,280,274,269],
[278,0,261,275,259,278,262,264,281,263],
[275,290,0,280,280,275,272,275,287,276],
[283,276,271,0,270,268,268,286,277,286],
[276,292,271,281,0,271,283,282,295,269],
[273,273,276,283,280,0,277,281,284,294],
[297,289,279,283,268,274,0,281,276,279],
[271,287,276,265,269,270,270,0,290,283],
[277,270,264,274,256,267,275,261,0,268],
[282,288,275,265,282,257,272,268,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,301,302,282,277,293,266,290,300],
[255,0,282,282,273,253,273,250,283,257],
[250,269,0,282,277,252,244,248,275,249],
[249,269,269,0,279,254,266,256,278,258],
[269,278,274,272,0,254,269,244,266,256],
[274,298,299,297,297,0,274,274,286,287],
[258,278,307,285,282,277,0,262,289,282],
[285,301,303,295,307,277,289,0,307,269],
[261,268,276,273,285,265,262,244,0,265],
[251,294,302,293,295,264,269,282,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,294,273,277,267,275,259,269,276],
[261,0,281,258,280,256,280,264,247,260],
[257,270,0,262,269,257,265,259,254,265],
[278,293,289,0,294,290,281,267,270,277],
[274,271,282,257,0,253,264,264,262,264],
[284,295,294,261,298,0,290,269,277,288],
[276,271,286,270,287,261,0,262,254,273],
[292,287,292,284,287,282,289,0,266,287],
[282,304,297,281,289,274,297,285,0,276],
[275,291,286,274,287,263,278,264,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,260,237,252,237,245,238,229,249],
[313,0,307,298,281,323,302,275,313,305],
[291,244,0,264,243,280,251,234,253,277],
[314,253,287,0,239,276,276,282,278,286],
[299,270,308,312,0,304,298,266,288,293],
[314,228,271,275,247,0,300,258,264,291],
[306,249,300,275,253,251,0,250,268,285],
[313,276,317,269,285,293,301,0,287,308],
[322,238,298,273,263,287,283,264,0,276],
[302,246,274,265,258,260,266,243,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,240,240,250,268,281,269,236,252],
[272,0,237,252,252,265,268,268,262,248],
[311,314,0,268,285,300,304,293,287,276],
[311,299,283,0,295,299,303,304,294,268],
[301,299,266,256,0,259,283,282,291,272],
[283,286,251,252,292,0,309,298,291,254],
[270,283,247,248,268,242,0,268,254,240],
[282,283,258,247,269,253,283,0,267,259],
[315,289,264,257,260,260,297,284,0,249],
[299,303,275,283,279,297,311,292,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,282,278,286,288,276,299,274,282],
[268,0,278,274,278,282,264,292,244,278],
[269,273,0,281,271,286,274,284,265,276],
[273,277,270,0,279,269,274,285,277,293],
[265,273,280,272,0,285,258,294,263,278],
[263,269,265,282,266,0,263,284,261,275],
[275,287,277,277,293,288,0,303,284,286],
[252,259,267,266,257,267,248,0,266,261],
[277,307,286,274,288,290,267,285,0,294],
[269,273,275,258,273,276,265,290,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,165,165,220,165,219,275,110,110],
[276,0,331,277,386,331,276,274,221,167],
[386,220,0,220,329,329,274,439,165,275],
[386,274,331,0,386,331,386,384,386,277],
[331,165,222,165,0,276,276,219,110,55],
[386,220,222,220,275,0,386,275,165,165],
[332,275,277,165,275,165,0,275,55,165],
[276,277,112,167,332,276,276,0,167,57],
[441,330,386,165,441,386,496,384,0,275],
[441,384,276,274,496,386,386,494,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,258,251,223,266,311,284,236,223],
[319,0,275,232,237,276,290,276,247,258],
[293,276,0,265,229,295,307,277,286,278],
[300,319,286,0,234,295,298,235,268,218],
[328,314,322,317,0,309,305,241,287,264],
[285,275,256,256,242,0,241,242,232,230],
[240,261,244,253,246,310,0,264,215,208],
[267,275,274,316,310,309,287,0,269,310],
[315,304,265,283,264,319,336,282,0,294],
[328,293,273,333,287,321,343,241,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,287,270,276,262,282,289,275,272],
[261,0,302,279,254,270,261,290,269,264],
[264,249,0,264,225,238,245,265,245,267],
[281,272,287,0,258,232,294,291,280,270],
[275,297,326,293,0,290,311,293,291,328],
[289,281,313,319,261,0,275,289,292,306],
[269,290,306,257,240,276,0,274,279,299],
[262,261,286,260,258,262,277,0,248,270],
[276,282,306,271,260,259,272,303,0,295],
[279,287,284,281,223,245,252,281,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,247,287,281,271,302,286,275,273],
[266,0,257,294,268,270,261,277,253,254],
[304,294,0,298,271,273,296,282,279,273],
[264,257,253,0,268,240,267,257,243,238],
[270,283,280,283,0,267,271,276,265,279],
[280,281,278,311,284,0,280,272,284,271],
[249,290,255,284,280,271,0,276,287,262],
[265,274,269,294,275,279,275,0,258,259],
[276,298,272,308,286,267,264,293,0,275],
[278,297,278,313,272,280,289,292,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,272,264,251,264,259,261,263,264],
[298,0,280,294,292,287,283,296,287,272],
[279,271,0,292,291,270,264,288,283,269],
[287,257,259,0,265,262,266,251,279,280],
[300,259,260,286,0,276,255,268,255,261],
[287,264,281,289,275,0,271,260,284,271],
[292,268,287,285,296,280,0,261,280,291],
[290,255,263,300,283,291,290,0,274,283],
[288,264,268,272,296,267,271,277,0,290],
[287,279,282,271,290,280,260,268,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,291,293,277,291,274,276,279,256],
[274,0,276,280,290,267,273,267,280,267],
[260,275,0,251,271,252,267,266,262,254],
[258,271,300,0,283,274,253,263,289,261],
[274,261,280,268,0,277,266,282,272,275],
[260,284,299,277,274,0,267,258,280,270],
[277,278,284,298,285,284,0,279,282,274],
[275,284,285,288,269,293,272,0,275,292],
[272,271,289,262,279,271,269,276,0,264],
[295,284,297,290,276,281,277,259,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,287,266,274,280,290,265,247,268],
[283,0,282,276,299,291,278,273,269,281],
[264,269,0,262,277,277,282,270,274,261],
[285,275,289,0,304,284,288,273,259,275],
[277,252,274,247,0,288,272,272,271,268],
[271,260,274,267,263,0,274,264,239,275],
[261,273,269,263,279,277,0,276,252,256],
[286,278,281,278,279,287,275,0,260,276],
[304,282,277,292,280,312,299,291,0,270],
[283,270,290,276,283,276,295,275,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,258,290,284,291,270,294,288,293],
[260,0,262,277,274,282,284,297,271,277],
[293,289,0,273,282,294,282,290,282,295],
[261,274,278,0,281,285,284,298,276,309],
[267,277,269,270,0,273,281,294,278,278],
[260,269,257,266,278,0,267,281,274,262],
[281,267,269,267,270,284,0,289,271,289],
[257,254,261,253,257,270,262,0,265,268],
[263,280,269,275,273,277,280,286,0,295],
[258,274,256,242,273,289,262,283,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,277,248,257,290,287,295,279,276],
[263,0,290,248,286,278,247,284,276,278],
[274,261,0,246,258,286,268,277,288,277],
[303,303,305,0,297,304,269,290,265,256],
[294,265,293,254,0,285,255,279,256,255],
[261,273,265,247,266,0,266,286,277,250],
[264,304,283,282,296,285,0,277,292,257],
[256,267,274,261,272,265,274,0,261,263],
[272,275,263,286,295,274,259,290,0,274],
[275,273,274,295,296,301,294,288,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,255,265,288,263,263,274,268,244],
[263,0,243,266,265,248,239,257,256,245],
[296,308,0,293,286,289,279,296,290,274],
[286,285,258,0,280,265,252,275,253,259],
[263,286,265,271,0,243,235,296,265,257],
[288,303,262,286,308,0,271,290,281,272],
[288,312,272,299,316,280,0,297,300,293],
[277,294,255,276,255,261,254,0,277,266],
[283,295,261,298,286,270,251,274,0,285],
[307,306,277,292,294,279,258,285,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,257,273,273,298,265,285,286,262],
[277,0,276,295,282,296,279,302,291,265],
[294,275,0,298,277,315,280,301,280,276],
[278,256,253,0,261,265,260,264,269,249],
[278,269,274,290,0,284,263,297,272,266],
[253,255,236,286,267,0,237,273,260,251],
[286,272,271,291,288,314,0,297,269,278],
[266,249,250,287,254,278,254,0,274,275],
[265,260,271,282,279,291,282,277,0,261],
[289,286,275,302,285,300,273,276,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,274,272,277,277,275,273,283,282],
[284,0,270,281,296,289,289,267,292,291],
[277,281,0,276,284,265,273,277,294,281],
[279,270,275,0,269,298,281,262,278,287],
[274,255,267,282,0,280,265,266,268,292],
[274,262,286,253,271,0,257,272,285,292],
[276,262,278,270,286,294,0,262,275,278],
[278,284,274,289,285,279,289,0,287,301],
[268,259,257,273,283,266,276,264,0,293],
[269,260,270,264,259,259,273,250,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,292,238,296,286,277,273,293,328],
[300,0,263,278,278,308,281,291,278,302],
[259,288,0,272,245,281,300,286,303,279],
[313,273,279,0,282,284,253,305,285,285],
[255,273,306,269,0,309,302,286,298,327],
[265,243,270,267,242,0,268,253,244,297],
[274,270,251,298,249,283,0,324,281,294],
[278,260,265,246,265,298,227,0,278,270],
[258,273,248,266,253,307,270,273,0,305],
[223,249,272,266,224,254,257,281,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,283,262,242,266,250,263,260,271],
[284,0,270,268,253,277,290,275,271,299],
[268,281,0,286,274,280,275,282,265,277],
[289,283,265,0,287,285,304,286,296,258],
[309,298,277,264,0,288,278,302,312,296],
[285,274,271,266,263,0,280,259,258,287],
[301,261,276,247,273,271,0,272,287,261],
[288,276,269,265,249,292,279,0,274,273],
[291,280,286,255,239,293,264,277,0,257],
[280,252,274,293,255,264,290,278,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,257,242,265,246,265,244,256,250],
[295,0,287,278,281,276,288,272,285,284],
[294,264,0,256,275,265,291,277,263,274],
[309,273,295,0,282,281,293,284,304,277],
[286,270,276,269,0,275,285,272,280,264],
[305,275,286,270,276,0,295,264,290,291],
[286,263,260,258,266,256,0,267,269,268],
[307,279,274,267,279,287,284,0,279,294],
[295,266,288,247,271,261,282,272,0,281],
[301,267,277,274,287,260,283,257,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,295,290,267,275,286,297,324,281],
[276,0,281,299,260,262,252,252,295,272],
[256,270,0,282,260,246,239,227,305,263],
[261,252,269,0,244,265,247,256,286,244],
[284,291,291,307,0,253,287,246,323,287],
[276,289,305,286,298,0,275,284,304,263],
[265,299,312,304,264,276,0,269,292,271],
[254,299,324,295,305,267,282,0,326,289],
[227,256,246,265,228,247,259,225,0,238],
[270,279,288,307,264,288,280,262,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,280,285,296,278,271,288,284,290],
[250,0,257,259,248,283,255,277,239,292],
[271,294,0,300,292,299,277,290,278,295],
[266,292,251,0,267,270,261,284,251,290],
[255,303,259,284,0,277,262,274,284,270],
[273,268,252,281,274,0,273,276,268,289],
[280,296,274,290,289,278,0,292,255,273],
[263,274,261,267,277,275,259,0,257,285],
[267,312,273,300,267,283,296,294,0,288],
[261,259,256,261,281,262,278,266,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,259,269,293,266,292,305,300,305],
[269,0,298,283,301,242,280,308,309,314],
[292,253,0,262,272,288,274,295,296,275],
[282,268,289,0,278,266,288,295,289,282],
[258,250,279,273,0,264,276,313,280,293],
[285,309,263,285,287,0,276,286,309,294],
[259,271,277,263,275,275,0,284,284,280],
[246,243,256,256,238,265,267,0,291,276],
[251,242,255,262,271,242,267,260,0,274],
[246,237,276,269,258,257,271,275,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,311,240,315,298,289,293,230,337],
[251,0,284,259,254,227,296,272,237,336],
[240,267,0,216,258,231,246,273,202,279],
[311,292,335,0,316,301,350,272,256,327],
[236,297,293,235,0,249,292,293,220,310],
[253,324,320,250,302,0,286,320,211,265],
[262,255,305,201,259,265,0,251,232,300],
[258,279,278,279,258,231,300,0,279,296],
[321,314,349,295,331,340,319,272,0,302],
[214,215,272,224,241,286,251,255,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,343,300,243,259,299,376,316,300],
[310,0,269,299,223,254,207,310,285,250],
[208,282,0,286,222,210,208,250,210,207],
[251,252,265,0,282,239,224,235,242,208],
[308,328,329,269,0,284,301,283,270,252],
[292,297,341,312,267,0,279,281,266,187],
[252,344,343,327,250,272,0,265,269,280],
[175,241,301,316,268,270,286,0,274,270],
[235,266,341,309,281,285,282,277,0,263],
[251,301,344,343,299,364,271,281,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,267,274,270,286,251,267,271,267],
[284,0,270,267,264,278,278,271,274,276],
[284,281,0,260,265,283,254,256,266,260],
[277,284,291,0,263,268,279,268,264,260],
[281,287,286,288,0,289,267,286,275,261],
[265,273,268,283,262,0,257,258,251,257],
[300,273,297,272,284,294,0,273,281,281],
[284,280,295,283,265,293,278,0,272,285],
[280,277,285,287,276,300,270,279,0,266],
[284,275,291,291,290,294,270,266,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,263,273,271,268,277,271,289,267],
[275,0,257,285,256,240,267,272,258,254],
[288,294,0,297,291,266,297,287,297,287],
[278,266,254,0,244,237,247,266,242,261],
[280,295,260,307,0,283,289,271,290,281],
[283,311,285,314,268,0,309,308,287,290],
[274,284,254,304,262,242,0,286,286,260],
[280,279,264,285,280,243,265,0,278,275],
[262,293,254,309,261,264,265,273,0,275],
[284,297,264,290,270,261,291,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,259,266,288,282,299,277,290,276],
[269,0,268,280,274,299,275,275,286,272],
[292,283,0,293,277,299,270,261,274,264],
[285,271,258,0,291,305,287,260,301,266],
[263,277,274,260,0,296,296,262,300,280],
[269,252,252,246,255,0,248,265,281,271],
[252,276,281,264,255,303,0,292,267,276],
[274,276,290,291,289,286,259,0,306,289],
[261,265,277,250,251,270,284,245,0,254],
[275,279,287,285,271,280,275,262,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,312,273,259,283,289,295,290,273],
[285,0,276,258,262,297,270,307,273,270],
[239,275,0,250,242,250,237,254,252,239],
[278,293,301,0,248,289,281,264,281,270],
[292,289,309,303,0,269,292,294,297,278],
[268,254,301,262,282,0,269,282,296,268],
[262,281,314,270,259,282,0,284,285,283],
[256,244,297,287,257,269,267,0,295,282],
[261,278,299,270,254,255,266,256,0,271],
[278,281,312,281,273,283,268,269,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,267,233,240,249,223,234,240,262],
[299,0,271,233,260,258,253,252,276,293],
[284,280,0,271,266,246,245,266,271,286],
[318,318,280,0,261,269,261,271,295,295],
[311,291,285,290,0,287,269,262,260,311],
[302,293,305,282,264,0,255,269,286,310],
[328,298,306,290,282,296,0,278,274,328],
[317,299,285,280,289,282,273,0,268,305],
[311,275,280,256,291,265,277,283,0,294],
[289,258,265,256,240,241,223,246,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,300,257,288,264,248,269,282,264],
[280,0,287,282,283,288,261,270,271,292],
[251,264,0,271,275,267,284,260,281,279],
[294,269,280,0,273,265,241,274,291,287],
[263,268,276,278,0,297,282,286,280,306],
[287,263,284,286,254,0,288,274,285,284],
[303,290,267,310,269,263,0,277,278,295],
[282,281,291,277,265,277,274,0,266,298],
[269,280,270,260,271,266,273,285,0,298],
[287,259,272,264,245,267,256,253,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,227,258,263,299,300,270,277,267],
[278,0,230,247,240,287,287,254,259,304],
[324,321,0,309,299,283,336,341,273,310],
[293,304,242,0,292,255,280,323,289,331],
[288,311,252,259,0,305,281,284,281,296],
[252,264,268,296,246,0,274,286,295,310],
[251,264,215,271,270,277,0,252,249,251],
[281,297,210,228,267,265,299,0,268,300],
[274,292,278,262,270,256,302,283,0,309],
[284,247,241,220,255,241,300,251,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,293,307,273,262,254,252,298,270],
[298,0,304,320,277,292,269,282,311,282],
[258,247,0,302,282,274,267,279,287,279],
[244,231,249,0,239,241,251,231,255,252],
[278,274,269,312,0,278,281,282,285,296],
[289,259,277,310,273,0,283,277,291,288],
[297,282,284,300,270,268,0,283,286,281],
[299,269,272,320,269,274,268,0,290,297],
[253,240,264,296,266,260,265,261,0,265],
[281,269,272,299,255,263,270,254,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,267,250,262,273,242,224,281,269],
[314,0,293,314,314,264,272,289,271,312],
[284,258,0,238,271,257,293,228,275,267],
[301,237,313,0,295,249,259,246,257,275],
[289,237,280,256,0,215,274,253,268,256],
[278,287,294,302,336,0,280,272,313,293],
[309,279,258,292,277,271,0,244,292,283],
[327,262,323,305,298,279,307,0,319,316],
[270,280,276,294,283,238,259,232,0,255],
[282,239,284,276,295,258,268,235,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,300,282,263,250,267,301,251,262],
[281,0,283,258,255,251,276,285,263,260],
[251,268,0,278,278,266,305,284,271,279],
[269,293,273,0,286,258,289,287,257,264],
[288,296,273,265,0,291,282,312,257,270],
[301,300,285,293,260,0,293,285,274,280],
[284,275,246,262,269,258,0,293,227,272],
[250,266,267,264,239,266,258,0,288,258],
[300,288,280,294,294,277,324,263,0,282],
[289,291,272,287,281,271,279,293,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,271,245,247,272,272,271,264,249],
[274,0,274,275,253,296,262,265,291,285],
[280,277,0,250,258,283,268,273,257,269],
[306,276,301,0,274,274,261,280,289,289],
[304,298,293,277,0,272,281,274,290,272],
[279,255,268,277,279,0,258,279,286,279],
[279,289,283,290,270,293,0,284,280,282],
[280,286,278,271,277,272,267,0,249,264],
[287,260,294,262,261,265,271,302,0,283],
[302,266,282,262,279,272,269,287,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,296,278,276,269,280,279,279],
[278,0,282,294,250,259,256,269,253,237],
[275,269,0,283,247,267,245,277,267,278],
[255,257,268,0,272,252,301,285,289,269],
[273,301,304,279,0,298,269,272,287,296],
[275,292,284,299,253,0,303,278,292,257],
[282,295,306,250,282,248,0,300,265,301],
[271,282,274,266,279,273,251,0,295,246],
[272,298,284,262,264,259,286,256,0,266],
[272,314,273,282,255,294,250,305,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,288,253,276,262,262,264,284,257],
[293,0,308,294,268,302,278,292,287,300],
[263,243,0,257,289,288,278,294,262,298],
[298,257,294,0,292,276,284,278,287,271],
[275,283,262,259,0,268,265,275,247,292],
[289,249,263,275,283,0,272,270,286,274],
[289,273,273,267,286,279,0,283,268,270],
[287,259,257,273,276,281,268,0,267,280],
[267,264,289,264,304,265,283,284,0,285],
[294,251,253,280,259,277,281,271,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,292,286,275,288,295,276,289,286],
[279,0,282,285,288,300,282,275,294,290],
[259,269,0,271,279,291,262,259,290,275],
[265,266,280,0,269,278,274,283,297,270],
[276,263,272,282,0,298,286,263,305,283],
[263,251,260,273,253,0,272,263,270,267],
[256,269,289,277,265,279,0,262,269,263],
[275,276,292,268,288,288,289,0,292,282],
[262,257,261,254,246,281,282,259,0,264],
[265,261,276,281,268,284,288,269,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,281,266,291,299,278,284,284,289],
[250,0,254,249,286,288,258,272,275,257],
[270,297,0,272,292,281,274,284,291,309],
[285,302,279,0,291,275,277,272,289,296],
[260,265,259,260,0,273,276,262,272,286],
[252,263,270,276,278,0,266,251,278,283],
[273,293,277,274,275,285,0,274,301,293],
[267,279,267,279,289,300,277,0,291,281],
[267,276,260,262,279,273,250,260,0,261],
[262,294,242,255,265,268,258,270,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,293,265,280,264,282,266,276,266],
[310,0,297,292,288,302,270,290,296,293],
[258,254,0,263,256,274,253,269,248,274],
[286,259,288,0,307,281,269,290,303,251],
[271,263,295,244,0,266,261,255,255,262],
[287,249,277,270,285,0,277,274,280,246],
[269,281,298,282,290,274,0,264,274,276],
[285,261,282,261,296,277,287,0,267,260],
[275,255,303,248,296,271,277,284,0,273],
[285,258,277,300,289,305,275,291,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,314,316,273,279,254,247,287,273],
[268,0,273,293,266,256,262,264,265,267],
[237,278,0,276,273,253,235,242,258,250],
[235,258,275,0,238,231,247,229,249,245],
[278,285,278,313,0,282,249,266,288,280],
[272,295,298,320,269,0,283,286,293,287],
[297,289,316,304,302,268,0,272,296,288],
[304,287,309,322,285,265,279,0,287,276],
[264,286,293,302,263,258,255,264,0,254],
[278,284,301,306,271,264,263,275,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,265,300,248,243,262,278,245,268],
[283,0,267,315,280,268,275,279,286,292],
[286,284,0,301,282,282,280,279,264,263],
[251,236,250,0,246,216,253,232,240,270],
[303,271,269,305,0,267,280,269,269,285],
[308,283,269,335,284,0,284,283,293,295],
[289,276,271,298,271,267,0,261,259,295],
[273,272,272,319,282,268,290,0,260,301],
[306,265,287,311,282,258,292,291,0,282],
[283,259,288,281,266,256,256,250,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,261,268,287,277,287,272,282,280],
[272,0,249,254,261,261,252,252,274,242],
[290,302,0,296,285,273,299,281,297,284],
[283,297,255,0,299,288,300,268,296,268],
[264,290,266,252,0,281,266,263,273,258],
[274,290,278,263,270,0,280,265,291,283],
[264,299,252,251,285,271,0,255,267,262],
[279,299,270,283,288,286,296,0,310,277],
[269,277,254,255,278,260,284,241,0,258],
[271,309,267,283,293,268,289,274,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,270,275,264,289,272,283,265,279],
[297,0,301,279,266,301,283,301,274,304],
[281,250,0,271,267,274,260,287,274,290],
[276,272,280,0,255,296,253,298,259,275],
[287,285,284,296,0,282,258,277,291,276],
[262,250,277,255,269,0,228,288,249,265],
[279,268,291,298,293,323,0,296,269,286],
[268,250,264,253,274,263,255,0,270,250],
[286,277,277,292,260,302,282,281,0,274],
[272,247,261,276,275,286,265,301,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,273,295,263,295,266,316,305,275],
[256,0,237,284,287,277,245,271,297,279],
[278,314,0,261,304,302,263,316,302,302],
[256,267,290,0,279,280,259,284,286,284],
[288,264,247,272,0,298,241,260,248,285],
[256,274,249,271,253,0,253,285,292,282],
[285,306,288,292,310,298,0,307,294,266],
[235,280,235,267,291,266,244,0,257,254],
[246,254,249,265,303,259,257,294,0,254],
[276,272,249,267,266,269,285,297,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,289,274,286,257,278,261,281,267],
[259,0,251,251,257,238,253,258,255,260],
[262,300,0,286,294,301,284,277,274,302],
[277,300,265,0,278,249,269,237,271,277],
[265,294,257,273,0,258,294,240,260,302],
[294,313,250,302,293,0,312,280,287,280],
[273,298,267,282,257,239,0,268,254,277],
[290,293,274,314,311,271,283,0,286,303],
[270,296,277,280,291,264,297,265,0,273],
[284,291,249,274,249,271,274,248,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,264,270,256,290,271,277,267,256],
[282,0,276,260,267,286,279,275,273,274],
[287,275,0,273,274,294,286,274,275,276],
[281,291,278,0,278,287,284,290,279,271],
[295,284,277,273,0,298,284,279,275,270],
[261,265,257,264,253,0,263,243,239,255],
[280,272,265,267,267,288,0,275,271,245],
[274,276,277,261,272,308,276,0,266,264],
[284,278,276,272,276,312,280,285,0,263],
[295,277,275,280,281,296,306,287,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,279,286,271,270,269,300,250,259],
[265,0,270,284,293,245,278,280,267,289],
[272,281,0,303,282,262,263,288,254,277],
[265,267,248,0,275,258,257,279,265,246],
[280,258,269,276,0,284,281,266,252,264],
[281,306,289,293,267,0,275,279,286,268],
[282,273,288,294,270,276,0,287,274,274],
[251,271,263,272,285,272,264,0,244,274],
[301,284,297,286,299,265,277,307,0,288],
[292,262,274,305,287,283,277,277,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,291,276,278,278,261,269,257,248],
[267,0,246,260,282,267,264,257,246,241],
[260,305,0,263,301,289,279,267,281,262],
[275,291,288,0,314,309,288,279,297,267],
[273,269,250,237,0,300,253,259,237,275],
[273,284,262,242,251,0,260,242,269,248],
[290,287,272,263,298,291,0,264,276,257],
[282,294,284,272,292,309,287,0,299,280],
[294,305,270,254,314,282,275,252,0,264],
[303,310,289,284,276,303,294,271,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,280,277,278,299,304,287,267,264],
[269,0,251,276,267,280,279,273,256,253],
[271,300,0,292,274,299,308,303,286,255],
[274,275,259,0,270,266,292,270,251,250],
[273,284,277,281,0,290,308,276,279,256],
[252,271,252,285,261,0,303,293,252,279],
[247,272,243,259,243,248,0,253,256,255],
[264,278,248,281,275,258,298,0,264,260],
[284,295,265,300,272,299,295,287,0,278],
[287,298,296,301,295,272,296,291,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,291,299,273,275,285,273,266,278],
[278,0,256,283,268,273,282,260,273,282],
[260,295,0,278,266,274,270,256,287,253],
[252,268,273,0,268,279,260,280,279,273],
[278,283,285,283,0,276,272,253,281,283],
[276,278,277,272,275,0,259,258,273,267],
[266,269,281,291,279,292,0,271,274,296],
[278,291,295,271,298,293,280,0,288,281],
[285,278,264,272,270,278,277,263,0,276],
[273,269,298,278,268,284,255,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,267,272,286,279,262,246,264,254],
[271,0,303,271,283,278,273,271,266,300],
[284,248,0,267,267,287,280,266,276,252],
[279,280,284,0,310,288,282,262,277,275],
[265,268,284,241,0,287,277,262,266,265],
[272,273,264,263,264,0,284,265,295,273],
[289,278,271,269,274,267,0,274,269,273],
[305,280,285,289,289,286,277,0,269,281],
[287,285,275,274,285,256,282,282,0,280],
[297,251,299,276,286,278,278,270,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,303,286,301,351,286,350,249,232],
[332,0,314,297,342,333,344,361,258,280],
[248,237,0,236,234,363,297,346,281,276],
[265,254,315,0,314,335,293,378,279,248],
[250,209,317,237,0,239,312,317,344,277],
[200,218,188,216,312,0,233,282,262,199],
[265,207,254,258,239,318,0,316,253,193],
[201,190,205,173,234,269,235,0,202,204],
[302,293,270,272,207,289,298,349,0,252],
[319,271,275,303,274,352,358,347,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,184,199,218,262,197,173,153,246],
[351,0,302,281,314,378,328,273,285,315],
[367,249,0,231,312,359,361,301,251,247],
[352,270,320,0,332,394,364,290,272,302],
[333,237,239,219,0,343,296,255,224,265],
[289,173,192,157,208,0,269,191,175,234],
[354,223,190,187,255,282,0,240,159,220],
[378,278,250,261,296,360,311,0,236,296],
[398,266,300,279,327,376,392,315,0,325],
[305,236,304,249,286,317,331,255,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,259,274,282,270,286,275,285,266],
[304,0,265,276,296,272,305,278,300,282],
[292,286,0,293,297,270,306,284,299,285],
[277,275,258,0,272,268,292,267,291,273],
[269,255,254,279,0,268,293,262,276,257],
[281,279,281,283,283,0,276,281,290,268],
[265,246,245,259,258,275,0,253,264,266],
[276,273,267,284,289,270,298,0,289,274],
[266,251,252,260,275,261,287,262,0,258],
[285,269,266,278,294,283,285,277,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,296,314,308,311,296,311,235,280],
[257,0,297,271,253,285,254,298,284,284],
[255,254,0,288,282,282,253,256,191,265],
[237,280,263,0,279,233,269,310,265,325],
[243,298,269,272,0,288,315,257,241,271],
[240,266,269,318,263,0,224,315,239,266],
[255,297,298,282,236,327,0,297,267,234],
[240,253,295,241,294,236,254,0,222,279],
[316,267,360,286,310,312,284,329,0,297],
[271,267,286,226,280,285,317,272,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,288,294,305,275,311,280,292,297],
[261,0,290,266,276,284,272,319,289,316],
[263,261,0,280,285,252,313,268,290,281],
[257,285,271,0,286,267,310,297,314,296],
[246,275,266,265,0,286,291,281,270,270],
[276,267,299,284,265,0,293,292,283,271],
[240,279,238,241,260,258,0,268,303,264],
[271,232,283,254,270,259,283,0,283,266],
[259,262,261,237,281,268,248,268,0,299],
[254,235,270,255,281,280,287,285,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,287,312,235,298,269,250,234,280],
[270,0,304,315,302,336,284,336,300,331],
[264,247,0,333,282,281,346,311,267,262],
[239,236,218,0,234,268,287,300,253,297],
[316,249,269,317,0,330,283,286,233,281],
[253,215,270,283,221,0,235,236,217,265],
[282,267,205,264,268,316,0,270,247,262],
[301,215,240,251,265,315,281,0,265,262],
[317,251,284,298,318,334,304,286,0,280],
[271,220,289,254,270,286,289,289,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,265,266,274,262,288,288,260,250],
[289,0,286,262,270,284,291,297,293,274],
[286,265,0,285,278,296,283,288,290,293],
[285,289,266,0,259,273,288,276,267,268],
[277,281,273,292,0,271,284,302,281,285],
[289,267,255,278,280,0,287,292,265,276],
[263,260,268,263,267,264,0,286,279,281],
[263,254,263,275,249,259,265,0,267,269],
[291,258,261,284,270,286,272,284,0,275],
[301,277,258,283,266,275,270,282,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,277,268,292,289,281,290,263,250],
[311,0,261,292,309,305,320,306,310,275],
[274,290,0,289,278,289,296,300,286,277],
[283,259,262,0,276,283,298,283,277,275],
[259,242,273,275,0,253,312,262,286,238],
[262,246,262,268,298,0,306,272,276,262],
[270,231,255,253,239,245,0,257,267,230],
[261,245,251,268,289,279,294,0,259,255],
[288,241,265,274,265,275,284,292,0,249],
[301,276,274,276,313,289,321,296,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,293,267,291,272,292,296,277,305],
[272,0,275,278,273,287,282,282,270,301],
[258,276,0,268,281,277,283,292,266,284],
[284,273,283,0,284,283,279,298,269,299],
[260,278,270,267,0,263,275,283,265,278],
[279,264,274,268,288,0,290,300,276,279],
[259,269,268,272,276,261,0,294,275,271],
[255,269,259,253,268,251,257,0,265,273],
[274,281,285,282,286,275,276,286,0,297],
[246,250,267,252,273,272,280,278,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,264,261,246,264,276,260,274,270],
[292,0,253,280,269,274,297,268,251,265],
[287,298,0,286,287,281,283,286,281,272],
[290,271,265,0,259,266,273,277,281,264],
[305,282,264,292,0,287,292,288,281,278],
[287,277,270,285,264,0,300,261,279,279],
[275,254,268,278,259,251,0,255,261,258],
[291,283,265,274,263,290,296,0,294,269],
[277,300,270,270,270,272,290,257,0,276],
[281,286,279,287,273,272,293,282,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,296,246,229,239,256,259,253,276],
[303,0,272,286,274,275,257,304,305,299],
[255,279,0,265,261,243,241,273,272,292],
[305,265,286,0,290,266,271,305,272,280],
[322,277,290,261,0,271,276,258,296,272],
[312,276,308,285,280,0,268,284,296,306],
[295,294,310,280,275,283,0,282,303,323],
[292,247,278,246,293,267,269,0,307,297],
[298,246,279,279,255,255,248,244,0,296],
[275,252,259,271,279,245,228,254,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,277,301,259,254,321,278,271,305],
[280,0,250,287,291,275,304,282,242,302],
[274,301,0,305,288,253,310,288,285,328],
[250,264,246,0,266,272,323,268,260,309],
[292,260,263,285,0,257,288,262,255,294],
[297,276,298,279,294,0,316,288,249,294],
[230,247,241,228,263,235,0,257,227,248],
[273,269,263,283,289,263,294,0,277,302],
[280,309,266,291,296,302,324,274,0,319],
[246,249,223,242,257,257,303,249,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,290,290,298,291,288,287,243,256],
[308,0,293,314,308,320,337,291,253,291],
[261,258,0,256,282,273,290,254,243,284],
[261,237,295,0,276,250,275,239,239,216],
[253,243,269,275,0,268,257,251,233,254],
[260,231,278,301,283,0,271,248,271,275],
[263,214,261,276,294,280,0,242,245,242],
[264,260,297,312,300,303,309,0,276,258],
[308,298,308,312,318,280,306,275,0,274],
[295,260,267,335,297,276,309,293,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,270,263,271,288,293,278,260,281],
[258,0,270,261,246,295,258,262,269,251],
[281,281,0,246,288,276,304,278,271,276],
[288,290,305,0,257,271,295,288,275,295],
[280,305,263,294,0,283,289,274,293,287],
[263,256,275,280,268,0,288,301,260,286],
[258,293,247,256,262,263,0,275,287,274],
[273,289,273,263,277,250,276,0,280,283],
[291,282,280,276,258,291,264,271,0,292],
[270,300,275,256,264,265,277,268,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,279,272,272,271,269,277,270,265],
[288,0,276,272,270,283,281,278,272,281],
[272,275,0,281,282,284,290,299,268,292],
[279,279,270,0,293,275,306,298,271,288],
[279,281,269,258,0,274,278,270,271,271],
[280,268,267,276,277,0,288,293,259,274],
[282,270,261,245,273,263,0,254,271,241],
[274,273,252,253,281,258,297,0,262,265],
[281,279,283,280,280,292,280,289,0,273],
[286,270,259,263,280,277,310,286,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,272,291,285,300,273,292,305,303],
[267,0,278,282,303,291,273,287,298,322],
[279,273,0,267,273,291,262,293,288,304],
[260,269,284,0,303,282,274,277,294,309],
[266,248,278,248,0,262,249,258,273,282],
[251,260,260,269,289,0,272,267,280,297],
[278,278,289,277,302,279,0,268,289,308],
[259,264,258,274,293,284,283,0,277,322],
[246,253,263,257,278,271,262,274,0,286],
[248,229,247,242,269,254,243,229,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,273,277,288,264,272,302,271,266],
[282,0,285,283,275,268,261,304,282,273],
[278,266,0,265,265,250,266,273,274,254],
[274,268,286,0,267,264,269,289,273,281],
[263,276,286,284,0,281,282,292,278,264],
[287,283,301,287,270,0,283,306,291,276],
[279,290,285,282,269,268,0,284,267,267],
[249,247,278,262,259,245,267,0,252,250],
[280,269,277,278,273,260,284,299,0,277],
[285,278,297,270,287,275,284,301,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,251,230,246,321,263,219,260,232],
[249,0,273,235,254,322,267,236,275,252],
[300,278,0,239,261,318,292,236,298,259],
[321,316,312,0,278,336,279,280,281,250],
[305,297,290,273,0,328,277,270,299,277],
[230,229,233,215,223,0,217,203,212,213],
[288,284,259,272,274,334,0,234,302,264],
[332,315,315,271,281,348,317,0,295,287],
[291,276,253,270,252,339,249,256,0,260],
[319,299,292,301,274,338,287,264,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,256,230,243,256,283,266,261,216],
[315,0,301,305,269,312,295,292,290,268],
[295,250,0,238,248,256,273,265,272,300],
[321,246,313,0,278,280,289,261,307,262],
[308,282,303,273,0,297,290,274,317,274],
[295,239,295,271,254,0,293,292,280,251],
[268,256,278,262,261,258,0,273,297,288],
[285,259,286,290,277,259,278,0,318,264],
[290,261,279,244,234,271,254,233,0,248],
[335,283,251,289,277,300,263,287,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,222,292,276,300,275,277,251,264],
[308,0,281,346,245,294,318,258,236,294],
[329,270,0,329,290,285,351,261,315,265],
[259,205,222,0,225,260,221,238,223,236],
[275,306,261,326,0,275,323,223,264,251],
[251,257,266,291,276,0,287,235,239,275],
[276,233,200,330,228,264,0,225,227,226],
[274,293,290,313,328,316,326,0,292,290],
[300,315,236,328,287,312,324,259,0,276],
[287,257,286,315,300,276,325,261,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,289,309,273,270,272,297,285,267],
[266,0,256,262,290,258,269,261,278,275],
[262,295,0,283,272,269,277,315,286,278],
[242,289,268,0,316,291,297,291,290,293],
[278,261,279,235,0,281,301,263,257,268],
[281,293,282,260,270,0,318,295,310,280],
[279,282,274,254,250,233,0,270,276,256],
[254,290,236,260,288,256,281,0,259,260],
[266,273,265,261,294,241,275,292,0,259],
[284,276,273,258,283,271,295,291,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,244,260,253,249,239,256,245,282],
[277,0,245,250,235,252,250,250,238,278],
[307,306,0,292,284,284,264,281,282,285],
[291,301,259,0,280,289,268,276,292,308],
[298,316,267,271,0,280,271,289,256,308],
[302,299,267,262,271,0,279,272,252,297],
[312,301,287,283,280,272,0,258,278,299],
[295,301,270,275,262,279,293,0,255,277],
[306,313,269,259,295,299,273,296,0,294],
[269,273,266,243,243,254,252,274,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,289,292,284,292,273,290,292,292],
[280,0,266,293,290,281,271,286,289,284],
[262,285,0,290,293,288,269,281,290,283],
[259,258,261,0,262,264,275,258,275,284],
[267,261,258,289,0,270,254,278,273,276],
[259,270,263,287,281,0,278,271,275,285],
[278,280,282,276,297,273,0,274,292,292],
[261,265,270,293,273,280,277,0,294,284],
[259,262,261,276,278,276,259,257,0,274],
[259,267,268,267,275,266,259,267,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,276,258,279,279,280,286,257,310],
[295,0,249,289,285,300,302,269,266,285],
[275,302,0,279,320,295,300,310,286,278],
[293,262,272,0,296,272,302,310,270,291],
[272,266,231,255,0,234,249,225,255,262],
[272,251,256,279,317,0,297,297,291,283],
[271,249,251,249,302,254,0,285,252,286],
[265,282,241,241,326,254,266,0,254,287],
[294,285,265,281,296,260,299,297,0,311],
[241,266,273,260,289,268,265,264,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,256,260,276,287,256,258,292,266],
[274,0,268,250,254,274,250,272,281,283],
[295,283,0,267,279,297,264,291,302,280],
[291,301,284,0,289,282,265,316,310,293],
[275,297,272,262,0,294,282,280,319,260],
[264,277,254,269,257,0,252,269,277,262],
[295,301,287,286,269,299,0,272,302,298],
[293,279,260,235,271,282,279,0,288,283],
[259,270,249,241,232,274,249,263,0,269],
[285,268,271,258,291,289,253,268,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,275,284,286,288,272,267,289,283],
[271,0,284,283,298,290,265,281,284,285],
[276,267,0,275,298,288,271,270,281,278],
[267,268,276,0,266,273,283,274,280,267],
[265,253,253,285,0,270,257,268,284,264],
[263,261,263,278,281,0,265,276,289,277],
[279,286,280,268,294,286,0,261,295,282],
[284,270,281,277,283,275,290,0,279,270],
[262,267,270,271,267,262,256,272,0,279],
[268,266,273,284,287,274,269,281,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,266,265,260,249,242,298,261,240],
[259,0,250,272,241,249,241,266,253,251],
[285,301,0,250,245,254,248,274,263,251],
[286,279,301,0,279,271,244,267,248,250],
[291,310,306,272,0,243,290,282,286,285],
[302,302,297,280,308,0,262,291,277,283],
[309,310,303,307,261,289,0,296,299,262],
[253,285,277,284,269,260,255,0,275,264],
[290,298,288,303,265,274,252,276,0,240],
[311,300,300,301,266,268,289,287,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,272,254,257,267,249,272,273,266],
[288,0,288,281,275,298,255,310,280,291],
[279,263,0,278,268,284,269,306,278,273],
[297,270,273,0,255,274,248,272,285,261],
[294,276,283,296,0,297,267,293,282,280],
[284,253,267,277,254,0,258,278,283,267],
[302,296,282,303,284,293,0,312,301,270],
[279,241,245,279,258,273,239,0,271,259],
[278,271,273,266,269,268,250,280,0,268],
[285,260,278,290,271,284,281,292,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,250,274,211,296,252,309,262,280],
[267,0,270,241,285,304,263,289,255,267],
[301,281,0,240,233,297,290,327,275,279],
[277,310,311,0,262,307,284,319,261,339],
[340,266,318,289,0,338,310,295,311,297],
[255,247,254,244,213,0,285,273,249,241],
[299,288,261,267,241,266,0,295,246,263],
[242,262,224,232,256,278,256,0,225,252],
[289,296,276,290,240,302,305,326,0,286],
[271,284,272,212,254,310,288,299,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,300,293,280,271,319,299,284,302],
[275,0,275,276,262,242,301,274,262,301],
[251,276,0,269,245,247,256,277,268,291],
[258,275,282,0,288,278,281,284,294,328],
[271,289,306,263,0,281,279,291,294,297],
[280,309,304,273,270,0,293,304,297,295],
[232,250,295,270,272,258,0,277,280,278],
[252,277,274,267,260,247,274,0,277,279],
[267,289,283,257,257,254,271,274,0,282],
[249,250,260,223,254,256,273,272,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,265,275,251,298,275,270,257],
[275,0,270,276,287,273,299,288,288,277],
[267,281,0,277,280,276,294,284,295,271],
[286,275,274,0,295,280,289,291,281,265],
[276,264,271,256,0,261,280,264,261,268],
[300,278,275,271,290,0,300,296,280,283],
[253,252,257,262,271,251,0,255,267,267],
[276,263,267,260,287,255,296,0,261,261],
[281,263,256,270,290,271,284,290,0,273],
[294,274,280,286,283,268,284,290,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,269,287,279,284,291,280,283,295],
[268,0,297,294,291,301,291,271,297,279],
[282,254,0,284,298,277,281,278,294,299],
[264,257,267,0,267,275,254,254,266,268],
[272,260,253,284,0,279,279,262,273,272],
[267,250,274,276,272,0,275,252,276,275],
[260,260,270,297,272,276,0,262,296,275],
[271,280,273,297,289,299,289,0,286,294],
[268,254,257,285,278,275,255,265,0,263],
[256,272,252,283,279,276,276,257,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,249,209,259,244,246,287,223,234],
[321,0,301,288,262,284,260,368,275,293],
[302,250,0,248,288,283,211,314,223,211],
[342,263,303,0,342,296,266,353,284,289],
[292,289,263,209,0,243,224,289,222,199],
[307,267,268,255,308,0,244,279,266,272],
[305,291,340,285,327,307,0,326,249,291],
[264,183,237,198,262,272,225,0,214,173],
[328,276,328,267,329,285,302,337,0,288],
[317,258,340,262,352,279,260,378,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,267,280,254,246,277,245,267,257],
[273,0,275,267,271,268,250,252,271,267],
[284,276,0,268,261,262,269,248,272,255],
[271,284,283,0,256,256,267,268,265,258],
[297,280,290,295,0,279,286,290,287,267],
[305,283,289,295,272,0,282,271,271,279],
[274,301,282,284,265,269,0,262,282,266],
[306,299,303,283,261,280,289,0,291,272],
[284,280,279,286,264,280,269,260,0,276],
[294,284,296,293,284,272,285,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,293,301,272,296,277,283,301,274],
[275,0,270,269,271,265,256,285,286,249],
[258,281,0,278,276,286,276,269,267,263],
[250,282,273,0,265,308,272,273,302,263],
[279,280,275,286,0,310,287,285,280,286],
[255,286,265,243,241,0,259,272,246,273],
[274,295,275,279,264,292,0,282,277,253],
[268,266,282,278,266,279,269,0,286,262],
[250,265,284,249,271,305,274,265,0,283],
[277,302,288,288,265,278,298,289,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,311,294,271,279,277,316,300,294],
[279,0,297,298,276,273,292,308,304,306],
[240,254,0,255,269,265,281,291,271,276],
[257,253,296,0,257,233,254,273,268,291],
[280,275,282,294,0,272,283,304,296,303],
[272,278,286,318,279,0,290,321,289,301],
[274,259,270,297,268,261,0,322,284,284],
[235,243,260,278,247,230,229,0,251,274],
[251,247,280,283,255,262,267,300,0,262],
[257,245,275,260,248,250,267,277,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,287,252,247,251,230,274,296,247],
[274,0,272,257,231,243,224,256,262,237],
[264,279,0,265,214,247,216,242,279,228],
[299,294,286,0,252,254,281,231,296,265],
[304,320,337,299,0,289,257,289,287,287],
[300,308,304,297,262,0,249,239,290,279],
[321,327,335,270,294,302,0,280,302,279],
[277,295,309,320,262,312,271,0,297,298],
[255,289,272,255,264,261,249,254,0,275],
[304,314,323,286,264,272,272,253,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,309,303,259,287,266,270,296,307],
[253,0,260,282,253,275,257,249,270,279],
[242,291,0,297,268,310,257,276,268,290],
[248,269,254,0,241,277,236,245,252,267],
[292,298,283,310,0,328,259,275,296,302],
[264,276,241,274,223,0,228,246,251,260],
[285,294,294,315,292,323,0,257,294,330],
[281,302,275,306,276,305,294,0,282,314],
[255,281,283,299,255,300,257,269,0,295],
[244,272,261,284,249,291,221,237,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,344,260,208,299,299,241,232,243],
[268,0,375,270,252,321,293,229,302,273],
[207,176,0,254,206,275,260,260,226,214],
[291,281,297,0,252,299,264,266,242,262],
[343,299,345,299,0,348,333,301,293,271],
[252,230,276,252,203,0,261,257,255,246],
[252,258,291,287,218,290,0,283,283,274],
[310,322,291,285,250,294,268,0,239,297],
[319,249,325,309,258,296,268,312,0,272],
[308,278,337,289,280,305,277,254,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,284,265,293,286,307,283,297,273],
[291,0,265,259,289,273,320,284,302,268],
[267,286,0,297,300,261,294,266,294,275],
[286,292,254,0,286,250,304,277,261,275],
[258,262,251,265,0,254,271,260,260,270],
[265,278,290,301,297,0,292,287,301,286],
[244,231,257,247,280,259,0,243,259,250],
[268,267,285,274,291,264,308,0,292,258],
[254,249,257,290,291,250,292,259,0,266],
[278,283,276,276,281,265,301,293,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,277,281,257,265,281,274,286,280],
[280,0,254,270,270,269,283,283,284,280],
[274,297,0,262,281,287,273,283,275,274],
[270,281,289,0,282,296,289,288,280,286],
[294,281,270,269,0,269,291,283,279,298],
[286,282,264,255,282,0,282,266,285,286],
[270,268,278,262,260,269,0,270,272,272],
[277,268,268,263,268,285,281,0,273,270],
[265,267,276,271,272,266,279,278,0,281],
[271,271,277,265,253,265,279,281,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,270,273,285,254,272,266,263,275],
[296,0,272,270,274,258,296,264,258,270],
[281,279,0,290,274,267,292,251,272,266],
[278,281,261,0,262,262,254,250,255,246],
[266,277,277,289,0,256,284,255,266,268],
[297,293,284,289,295,0,274,276,288,267],
[279,255,259,297,267,277,0,271,281,268],
[285,287,300,301,296,275,280,0,275,281],
[288,293,279,296,285,263,270,276,0,272],
[276,281,285,305,283,284,283,270,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,285,260,268,277,260,244,270,269],
[295,0,278,284,289,289,257,266,262,281],
[266,273,0,261,283,261,252,251,261,238],
[291,267,290,0,269,288,267,274,293,254],
[283,262,268,282,0,265,257,251,261,250],
[274,262,290,263,286,0,249,263,268,228],
[291,294,299,284,294,302,0,268,295,291],
[307,285,300,277,300,288,283,0,299,275],
[281,289,290,258,290,283,256,252,0,283],
[282,270,313,297,301,323,260,276,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,295,283,300,275,280,289,278,298],
[244,0,246,265,257,251,256,256,256,264],
[256,305,0,273,293,273,272,302,276,311],
[268,286,278,0,307,276,283,303,272,296],
[251,294,258,244,0,275,268,281,269,278],
[276,300,278,275,276,0,267,276,269,278],
[271,295,279,268,283,284,0,281,282,288],
[262,295,249,248,270,275,270,0,269,283],
[273,295,275,279,282,282,269,282,0,289],
[253,287,240,255,273,273,263,268,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,281,288,292,289,281,303,270,281],
[260,0,293,280,276,287,273,303,269,253],
[270,258,0,282,288,276,266,269,265,267],
[263,271,269,0,272,265,291,288,262,271],
[259,275,263,279,0,274,272,286,255,260],
[262,264,275,286,277,0,286,275,291,269],
[270,278,285,260,279,265,0,282,255,269],
[248,248,282,263,265,276,269,0,268,252],
[281,282,286,289,296,260,296,283,0,287],
[270,298,284,280,291,282,282,299,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,258,268,262,258,271,263,273,278],
[286,0,273,280,271,276,271,269,287,273],
[293,278,0,287,278,265,287,280,299,282],
[283,271,264,0,275,283,275,259,282,272],
[289,280,273,276,0,280,289,274,286,286],
[293,275,286,268,271,0,268,274,280,299],
[280,280,264,276,262,283,0,262,291,282],
[288,282,271,292,277,277,289,0,300,285],
[278,264,252,269,265,271,260,251,0,269],
[273,278,269,279,265,252,269,266,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,283,290,291,299,298,274,296,283],
[251,0,265,248,265,274,291,270,270,265],
[268,286,0,286,281,288,281,280,274,283],
[261,303,265,0,272,291,285,280,273,286],
[260,286,270,279,0,286,279,291,268,283],
[252,277,263,260,265,0,273,269,261,274],
[253,260,270,266,272,278,0,279,265,272],
[277,281,271,271,260,282,272,0,276,268],
[255,281,277,278,283,290,286,275,0,272],
[268,286,268,265,268,277,279,283,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,297,268,279,279,273,272,271,305],
[281,0,281,284,248,264,250,259,284,296],
[254,270,0,238,259,264,246,249,252,298],
[283,267,313,0,266,284,279,286,299,307],
[272,303,292,285,0,282,272,273,278,311],
[272,287,287,267,269,0,276,261,296,280],
[278,301,305,272,279,275,0,263,272,307],
[279,292,302,265,278,290,288,0,308,283],
[280,267,299,252,273,255,279,243,0,283],
[246,255,253,244,240,271,244,268,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,277,260,248,249,239,251,247,269],
[294,0,264,240,280,272,263,252,225,273],
[274,287,0,261,266,256,262,257,252,319],
[291,311,290,0,273,288,266,275,258,292],
[303,271,285,278,0,306,270,257,263,300],
[302,279,295,263,245,0,258,252,279,299],
[312,288,289,285,281,293,0,267,254,293],
[300,299,294,276,294,299,284,0,275,295],
[304,326,299,293,288,272,297,276,0,304],
[282,278,232,259,251,252,258,256,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,265,254,264,244,260,247,261,236],
[300,0,280,246,290,254,266,272,275,254],
[286,271,0,235,273,263,286,269,300,278],
[297,305,316,0,305,264,259,297,288,280],
[287,261,278,246,0,260,281,259,277,243],
[307,297,288,287,291,0,295,272,299,287],
[291,285,265,292,270,256,0,271,275,287],
[304,279,282,254,292,279,280,0,277,257],
[290,276,251,263,274,252,276,274,0,256],
[315,297,273,271,308,264,264,294,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,268,243,284,260,246,253,238,258],
[291,0,288,263,261,256,273,277,260,272],
[283,263,0,267,266,280,254,282,261,278],
[308,288,284,0,273,269,275,275,278,297],
[267,290,285,278,0,260,272,264,252,265],
[291,295,271,282,291,0,270,275,265,278],
[305,278,297,276,279,281,0,267,253,295],
[298,274,269,276,287,276,284,0,271,277],
[313,291,290,273,299,286,298,280,0,295],
[293,279,273,254,286,273,256,274,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,281,274,279,259,256,274,236,254],
[268,0,281,276,275,263,256,298,259,272],
[270,270,0,252,275,234,258,268,249,236],
[277,275,299,0,288,281,276,290,281,292],
[272,276,276,263,0,242,257,283,255,265],
[292,288,317,270,309,0,278,303,281,288],
[295,295,293,275,294,273,0,311,264,280],
[277,253,283,261,268,248,240,0,248,259],
[315,292,302,270,296,270,287,303,0,296],
[297,279,315,259,286,263,271,292,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,281,269,271,284,269,284,262,303],
[258,0,252,273,260,273,252,259,239,286],
[270,299,0,265,296,282,260,279,284,288],
[282,278,286,0,286,279,258,281,280,295],
[280,291,255,265,0,283,280,280,250,287],
[267,278,269,272,268,0,256,268,249,275],
[282,299,291,293,271,295,0,287,289,307],
[267,292,272,270,271,283,264,0,274,272],
[289,312,267,271,301,302,262,277,0,287],
[248,265,263,256,264,276,244,279,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,318,341,294,316,281,356,305,269],
[235,0,297,258,249,294,198,283,209,233],
[233,254,0,256,279,264,243,290,217,229],
[210,293,295,0,282,278,259,353,257,235],
[257,302,272,269,0,263,208,278,253,246],
[235,257,287,273,288,0,152,292,235,177],
[270,353,308,292,343,399,0,388,279,296],
[195,268,261,198,273,259,163,0,208,226],
[246,342,334,294,298,316,272,343,0,235],
[282,318,322,316,305,374,255,325,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,277,273,275,277,289,272,259,261],
[271,0,265,280,281,277,294,286,277,262],
[274,286,0,278,282,277,301,285,291,263],
[278,271,273,0,273,268,297,269,282,258],
[276,270,269,278,0,274,278,274,269,276],
[274,274,274,283,277,0,290,275,263,264],
[262,257,250,254,273,261,0,260,263,250],
[279,265,266,282,277,276,291,0,282,247],
[292,274,260,269,282,288,288,269,0,263],
[290,289,288,293,275,287,301,304,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,267,293,280,295,282,285,282,284],
[243,0,282,264,251,272,264,285,260,268],
[284,269,0,285,257,297,263,273,270,293],
[258,287,266,0,259,266,244,274,255,262],
[271,300,294,292,0,289,280,293,291,303],
[256,279,254,285,262,0,258,260,252,254],
[269,287,288,307,271,293,0,290,278,283],
[266,266,278,277,258,291,261,0,276,268],
[269,291,281,296,260,299,273,275,0,276],
[267,283,258,289,248,297,268,283,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,274,292,310,275,311,255,299,308],
[268,0,291,274,255,275,287,249,281,304],
[277,260,0,300,278,275,287,249,290,305],
[259,277,251,0,257,267,283,251,264,309],
[241,296,273,294,0,269,305,283,286,326],
[276,276,276,284,282,0,269,267,287,329],
[240,264,264,268,246,282,0,239,246,305],
[296,302,302,300,268,284,312,0,312,331],
[252,270,261,287,265,264,305,239,0,313],
[243,247,246,242,225,222,246,220,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,338,277,253,301,298,299,246,290,285],
[213,0,251,236,228,241,219,255,258,256],
[274,300,0,266,249,287,268,260,236,258],
[298,315,285,0,295,302,303,270,307,288],
[250,323,302,256,0,271,301,277,253,274],
[253,310,264,249,280,0,283,256,261,257],
[252,332,283,248,250,268,0,274,287,285],
[305,296,291,281,274,295,277,0,260,271],
[261,293,315,244,298,290,264,291,0,249],
[266,295,293,263,277,294,266,280,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,254,263,287,276,267,265,270,271],
[291,0,277,285,329,288,282,293,277,266],
[297,274,0,247,286,272,264,262,277,246],
[288,266,304,0,282,263,282,265,263,274],
[264,222,265,269,0,270,246,259,266,238],
[275,263,279,288,281,0,260,276,278,263],
[284,269,287,269,305,291,0,267,280,284],
[286,258,289,286,292,275,284,0,281,268],
[281,274,274,288,285,273,271,270,0,269],
[280,285,305,277,313,288,267,283,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,260,261,263,234,264,242,241,261],
[298,0,261,287,284,256,277,268,257,281],
[291,290,0,281,290,260,301,271,261,291],
[290,264,270,0,276,266,276,278,263,277],
[288,267,261,275,0,245,266,260,261,260],
[317,295,291,285,306,0,270,290,283,283],
[287,274,250,275,285,281,0,259,263,277],
[309,283,280,273,291,261,292,0,276,279],
[310,294,290,288,290,268,288,275,0,284],
[290,270,260,274,291,268,274,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,301,295,283,258,274,299,280,278],
[279,0,304,279,275,289,283,299,300,303],
[250,247,0,262,236,266,258,258,271,270],
[256,272,289,0,286,279,280,282,298,301],
[268,276,315,265,0,273,270,291,277,265],
[293,262,285,272,278,0,281,275,286,271],
[277,268,293,271,281,270,0,296,278,299],
[252,252,293,269,260,276,255,0,264,273],
[271,251,280,253,274,265,273,287,0,274],
[273,248,281,250,286,280,252,278,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,286,297,275,295,313,292,262,273],
[271,0,273,287,261,285,280,265,277,265],
[265,278,0,288,279,279,286,276,264,267],
[254,264,263,0,276,271,272,259,259,251],
[276,290,272,275,0,285,285,283,275,280],
[256,266,272,280,266,0,298,261,278,252],
[238,271,265,279,266,253,0,263,245,263],
[259,286,275,292,268,290,288,0,265,258],
[289,274,287,292,276,273,306,286,0,265],
[278,286,284,300,271,299,288,293,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,243,245,251,267,251,271,271],
[277,0,278,282,269,274,282,282,261,285],
[279,273,0,258,271,260,281,276,298,282],
[308,269,293,0,296,273,292,297,281,263],
[306,282,280,255,0,291,283,286,289,272],
[300,277,291,278,260,0,278,278,285,276],
[284,269,270,259,268,273,0,272,258,281],
[300,269,275,254,265,273,279,0,280,290],
[280,290,253,270,262,266,293,271,0,247],
[280,266,269,288,279,275,270,261,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,246,270,288,262,273,279,260,282],
[268,0,249,277,273,258,277,284,276,273],
[305,302,0,273,296,290,309,307,295,301],
[281,274,278,0,267,280,286,281,284,285],
[263,278,255,284,0,279,281,264,261,265],
[289,293,261,271,272,0,284,274,284,281],
[278,274,242,265,270,267,0,276,272,285],
[272,267,244,270,287,277,275,0,280,283],
[291,275,256,267,290,267,279,271,0,292],
[269,278,250,266,286,270,266,268,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,284,269,280,273,255,284,263,259],
[255,0,277,212,273,184,265,250,253,228],
[267,274,0,240,289,219,214,265,256,235],
[282,339,311,0,322,264,287,297,268,282],
[271,278,262,229,0,226,239,279,261,259],
[278,367,332,287,325,0,280,338,261,299],
[296,286,337,264,312,271,0,297,299,306],
[267,301,286,254,272,213,254,0,266,248],
[288,298,295,283,290,290,252,285,0,290],
[292,323,316,269,292,252,245,303,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,279,278,259,300,256,258,259,286],
[290,0,277,289,273,293,251,272,278,280],
[272,274,0,273,279,298,263,259,268,286],
[273,262,278,0,287,291,269,269,266,302],
[292,278,272,264,0,287,287,260,261,275],
[251,258,253,260,264,0,237,241,263,260],
[295,300,288,282,264,314,0,287,280,296],
[293,279,292,282,291,310,264,0,284,288],
[292,273,283,285,290,288,271,267,0,294],
[265,271,265,249,276,291,255,263,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,237,245,292,285,257,268,248,245],
[306,0,290,263,290,300,336,258,301,285],
[314,261,0,261,321,324,323,313,311,262],
[306,288,290,0,309,335,358,296,293,266],
[259,261,230,242,0,304,278,268,248,256],
[266,251,227,216,247,0,270,288,260,175],
[294,215,228,193,273,281,0,254,232,241],
[283,293,238,255,283,263,297,0,292,234],
[303,250,240,258,303,291,319,259,0,253],
[306,266,289,285,295,376,310,317,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,255,260,272,259,278,291,266,264],
[297,0,281,265,279,292,287,278,286,279],
[296,270,0,288,283,282,320,270,303,272],
[291,286,263,0,277,280,331,288,289,308],
[279,272,268,274,0,275,284,251,276,280],
[292,259,269,271,276,0,304,267,261,308],
[273,264,231,220,267,247,0,247,266,259],
[260,273,281,263,300,284,304,0,296,281],
[285,265,248,262,275,290,285,255,0,277],
[287,272,279,243,271,243,292,270,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,264,278,280,281,274,281,276,270],
[277,0,280,291,273,280,294,304,281,288],
[287,271,0,290,293,296,300,295,281,284],
[273,260,261,0,261,261,271,274,248,251],
[271,278,258,290,0,263,285,280,265,258],
[270,271,255,290,288,0,295,288,277,282],
[277,257,251,280,266,256,0,266,256,269],
[270,247,256,277,271,263,285,0,259,262],
[275,270,270,303,286,274,295,292,0,276],
[281,263,267,300,293,269,282,289,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,262,270,221,262,251,315,235,254],
[289,0,276,281,254,265,288,313,279,287],
[289,275,0,275,234,258,257,291,260,280],
[281,270,276,0,236,246,253,292,283,284],
[330,297,317,315,0,268,271,309,265,285],
[289,286,293,305,283,0,287,321,253,281],
[300,263,294,298,280,264,0,291,251,307],
[236,238,260,259,242,230,260,0,236,256],
[316,272,291,268,286,298,300,315,0,322],
[297,264,271,267,266,270,244,295,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,282,295,258,282,265,270,283,307],
[286,0,293,315,273,293,291,287,301,332],
[269,258,0,265,260,252,271,279,274,319],
[256,236,286,0,248,271,260,255,282,291],
[293,278,291,303,0,280,262,284,310,324],
[269,258,299,280,271,0,291,282,297,303],
[286,260,280,291,289,260,0,292,329,310],
[281,264,272,296,267,269,259,0,300,320],
[268,250,277,269,241,254,222,251,0,288],
[244,219,232,260,227,248,241,231,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,238,315,279,315,297,315,299,253],
[251,0,234,235,195,313,313,275,255,232],
[313,317,0,274,256,313,274,336,215,233],
[236,316,277,0,275,277,298,301,294,256],
[272,356,295,276,0,352,314,376,375,278],
[236,238,238,274,199,0,297,279,239,218],
[254,238,277,253,237,254,0,256,214,235],
[236,276,215,250,175,272,295,0,213,194],
[252,296,336,257,176,312,337,338,0,253],
[298,319,318,295,273,333,316,357,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,265,273,274,290,260,261,259,273],
[287,0,252,269,279,284,282,262,286,282],
[286,299,0,271,285,301,295,289,283,280],
[278,282,280,0,278,306,284,257,300,281],
[277,272,266,273,0,289,287,259,270,278],
[261,267,250,245,262,0,272,244,271,277],
[291,269,256,267,264,279,0,259,292,286],
[290,289,262,294,292,307,292,0,284,305],
[292,265,268,251,281,280,259,267,0,285],
[278,269,271,270,273,274,265,246,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,290,273,286,281,286,283,302,289],
[259,0,264,264,256,261,260,262,281,286],
[261,287,0,260,275,294,267,282,284,269],
[278,287,291,0,285,266,258,286,295,271],
[265,295,276,266,0,288,255,283,282,296],
[270,290,257,285,263,0,267,248,279,289],
[265,291,284,293,296,284,0,293,302,282],
[268,289,269,265,268,303,258,0,282,265],
[249,270,267,256,269,272,249,269,0,279],
[262,265,282,280,255,262,269,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,231,287,273,251,282,222,273,282],
[316,0,274,312,273,293,282,234,284,278],
[320,277,0,266,286,296,261,225,267,239],
[264,239,285,0,288,259,323,227,214,275],
[278,278,265,263,0,266,280,248,254,263],
[300,258,255,292,285,0,235,262,213,263],
[269,269,290,228,271,316,0,274,273,281],
[329,317,326,324,303,289,277,0,251,294],
[278,267,284,337,297,338,278,300,0,273],
[269,273,312,276,288,288,270,257,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,300,292,268,272,312,295,282,311],
[267,0,295,288,282,244,264,291,288,289],
[251,256,0,250,270,251,283,268,269,291],
[259,263,301,0,267,269,273,288,276,281],
[283,269,281,284,0,286,290,280,280,317],
[279,307,300,282,265,0,269,289,288,323],
[239,287,268,278,261,282,0,295,276,284],
[256,260,283,263,271,262,256,0,257,287],
[269,263,282,275,271,263,275,294,0,277],
[240,262,260,270,234,228,267,264,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,277,254,281,272,284,278,255,253],
[274,0,280,284,276,281,271,272,275,292],
[274,271,0,276,271,270,284,263,251,272],
[297,267,275,0,275,268,294,261,267,288],
[270,275,280,276,0,271,296,262,281,283],
[279,270,281,283,280,0,275,271,267,280],
[267,280,267,257,255,276,0,250,245,277],
[273,279,288,290,289,280,301,0,268,281],
[296,276,300,284,270,284,306,283,0,310],
[298,259,279,263,268,271,274,270,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,241,201,240,242,239,80,238,203],
[309,0,276,273,392,237,354,195,313,237],
[310,275,0,195,193,198,200,79,198,201],
[350,278,356,0,312,236,394,274,354,319],
[311,159,358,239,0,240,355,235,316,318],
[309,314,353,315,311,0,276,191,392,316],
[312,197,351,157,196,275,0,196,236,196],
[471,356,472,277,316,360,355,0,317,238],
[313,238,353,197,235,159,315,234,0,237],
[348,314,350,232,233,235,355,313,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,274,271,272,285,262,280,277,275],
[277,0,260,272,267,274,274,265,269,279],
[277,291,0,286,269,298,272,299,275,291],
[280,279,265,0,298,281,275,287,283,270],
[279,284,282,253,0,287,262,270,271,266],
[266,277,253,270,264,0,273,273,272,291],
[289,277,279,276,289,278,0,285,285,270],
[271,286,252,264,281,278,266,0,266,269],
[274,282,276,268,280,279,266,285,0,273],
[276,272,260,281,285,260,281,282,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,279,287,262,267,262,246,271,293],
[238,0,258,262,238,251,270,245,242,267],
[272,293,0,254,278,260,270,235,273,288],
[264,289,297,0,311,276,262,261,266,278],
[289,313,273,240,0,253,267,266,252,290],
[284,300,291,275,298,0,291,264,273,281],
[289,281,281,289,284,260,0,262,279,300],
[305,306,316,290,285,287,289,0,271,297],
[280,309,278,285,299,278,272,280,0,311],
[258,284,263,273,261,270,251,254,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,283,217,246,272,264,251,263,273],
[255,0,288,289,231,266,255,248,235,257],
[268,263,0,241,244,232,226,226,275,255],
[334,262,310,0,275,288,282,281,287,281],
[305,320,307,276,0,300,284,271,313,285],
[279,285,319,263,251,0,259,262,271,267],
[287,296,325,269,267,292,0,254,272,294],
[300,303,325,270,280,289,297,0,294,313],
[288,316,276,264,238,280,279,257,0,274],
[278,294,296,270,266,284,257,238,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,294,288,296,313,275,262,295,278],
[256,0,275,293,296,304,260,272,285,285],
[257,276,0,277,275,281,276,265,284,267],
[263,258,274,0,280,308,261,257,301,276],
[255,255,276,271,0,287,274,264,275,268],
[238,247,270,243,264,0,236,236,257,250],
[276,291,275,290,277,315,0,284,286,291],
[289,279,286,294,287,315,267,0,295,286],
[256,266,267,250,276,294,265,256,0,261],
[273,266,284,275,283,301,260,265,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,282,314,283,295,256,255,244,224],
[302,0,248,290,279,290,269,279,245,261],
[269,303,0,292,276,310,275,303,258,254],
[237,261,259,0,249,279,246,275,282,261],
[268,272,275,302,0,299,296,296,275,264],
[256,261,241,272,252,0,271,273,231,239],
[295,282,276,305,255,280,0,287,277,265],
[296,272,248,276,255,278,264,0,250,234],
[307,306,293,269,276,320,274,301,0,284],
[327,290,297,290,287,312,286,317,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,292,293,293,294,279,265,272,297],
[257,0,297,286,297,275,291,289,270,286],
[259,254,0,274,278,264,271,271,240,285],
[258,265,277,0,270,276,285,258,262,282],
[258,254,273,281,0,262,276,262,255,278],
[257,276,287,275,289,0,283,274,268,279],
[272,260,280,266,275,268,0,261,252,286],
[286,262,280,293,289,277,290,0,281,295],
[279,281,311,289,296,283,299,270,0,289],
[254,265,266,269,273,272,265,256,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,274,289,295,285,274,273,296,295],
[272,0,275,297,306,291,291,289,296,296],
[277,276,0,265,293,283,282,275,271,289],
[262,254,286,0,280,276,269,277,271,269],
[256,245,258,271,0,268,265,253,268,283],
[266,260,268,275,283,0,265,276,287,300],
[277,260,269,282,286,286,0,295,294,298],
[278,262,276,274,298,275,256,0,279,287],
[255,255,280,280,283,264,257,272,0,268],
[256,255,262,282,268,251,253,264,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,275,295,296,285,292,285,243,289],
[261,0,226,252,302,237,272,246,247,283],
[276,325,0,308,328,314,319,262,297,340],
[256,299,243,0,282,271,275,257,270,272],
[255,249,223,269,0,277,277,269,258,281],
[266,314,237,280,274,0,303,243,270,286],
[259,279,232,276,274,248,0,271,271,276],
[266,305,289,294,282,308,280,0,294,295],
[308,304,254,281,293,281,280,257,0,295],
[262,268,211,279,270,265,275,256,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,306,246,295,278,286,270,263,273],
[334,0,330,256,329,269,266,250,317,282],
[245,221,0,263,270,238,259,261,249,266],
[305,295,288,0,309,271,290,264,300,301],
[256,222,281,242,0,262,255,252,257,241],
[273,282,313,280,289,0,251,277,277,299],
[265,285,292,261,296,300,0,302,291,249],
[281,301,290,287,299,274,249,0,282,308],
[288,234,302,251,294,274,260,269,0,236],
[278,269,285,250,310,252,302,243,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,267,254,279,260,263,264,278,260],
[280,0,275,254,306,266,286,275,276,269],
[284,276,0,269,306,280,286,280,291,286],
[297,297,282,0,303,266,288,288,284,286],
[272,245,245,248,0,253,266,247,273,273],
[291,285,271,285,298,0,292,272,279,274],
[288,265,265,263,285,259,0,269,287,264],
[287,276,271,263,304,279,282,0,284,272],
[273,275,260,267,278,272,264,267,0,271],
[291,282,265,265,278,277,287,279,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,266,230,246,225,306,265,304,320],
[250,0,227,253,209,284,305,212,249,305],
[285,324,0,287,266,246,364,286,343,359],
[321,298,264,0,305,263,359,246,303,378],
[305,342,285,246,0,263,344,321,321,379],
[326,267,305,288,288,0,324,305,380,380],
[245,246,187,192,207,227,0,207,169,283],
[286,339,265,305,230,246,344,0,322,360],
[247,302,208,248,230,171,382,229,0,305],
[231,246,192,173,172,171,268,191,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,293,289,299,283,284,303,275,302],
[282,0,265,291,313,291,275,294,281,291],
[258,286,0,280,306,291,275,292,292,311],
[262,260,271,0,282,297,284,268,266,292],
[252,238,245,269,0,257,259,268,246,295],
[268,260,260,254,294,0,274,257,268,285],
[267,276,276,267,292,277,0,279,270,302],
[248,257,259,283,283,294,272,0,261,304],
[276,270,259,285,305,283,281,290,0,303],
[249,260,240,259,256,266,249,247,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,279,263,277,274,273,294,267,262],
[263,0,288,272,266,280,271,276,256,272],
[272,263,0,266,274,260,244,294,254,282],
[288,279,285,0,285,268,255,289,260,267],
[274,285,277,266,0,273,269,282,250,276],
[277,271,291,283,278,0,273,301,238,262],
[278,280,307,296,282,278,0,311,281,268],
[257,275,257,262,269,250,240,0,266,247],
[284,295,297,291,301,313,270,285,0,282],
[289,279,269,284,275,289,283,304,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,266,271,257,286,273,281,277,283],
[270,0,274,263,264,288,277,269,276,278],
[285,277,0,277,263,290,279,277,305,286],
[280,288,274,0,283,290,290,283,287,259],
[294,287,288,268,0,308,290,288,297,277],
[265,263,261,261,243,0,274,264,276,266],
[278,274,272,261,261,277,0,266,275,257],
[270,282,274,268,263,287,285,0,283,270],
[274,275,246,264,254,275,276,268,0,271],
[268,273,265,292,274,285,294,281,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,237,270,267,236,262,247,262,267],
[320,0,305,286,307,301,239,277,293,291],
[314,246,0,270,347,286,258,292,241,263],
[281,265,281,0,295,317,276,289,272,321],
[284,244,204,256,0,285,249,238,206,255],
[315,250,265,234,266,0,249,257,238,240],
[289,312,293,275,302,302,0,299,307,291],
[304,274,259,262,313,294,252,0,257,266],
[289,258,310,279,345,313,244,294,0,283],
[284,260,288,230,296,311,260,285,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,273,282,256,244,261,275,284,277],
[306,0,277,277,281,259,312,282,278,269],
[278,274,0,265,273,267,277,287,285,271],
[269,274,286,0,291,282,296,308,303,300],
[295,270,278,260,0,267,279,289,298,288],
[307,292,284,269,284,0,268,297,296,282],
[290,239,274,255,272,283,0,272,289,271],
[276,269,264,243,262,254,279,0,279,257],
[267,273,266,248,253,255,262,272,0,242],
[274,282,280,251,263,269,280,294,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,292,285,289,263,284,261,275,276],
[296,0,291,289,299,273,296,288,309,284],
[259,260,0,252,257,245,257,254,285,263],
[266,262,299,0,283,271,288,286,289,284],
[262,252,294,268,0,282,261,264,273,252],
[288,278,306,280,269,0,285,271,299,285],
[267,255,294,263,290,266,0,268,290,274],
[290,263,297,265,287,280,283,0,309,279],
[276,242,266,262,278,252,261,242,0,263],
[275,267,288,267,299,266,277,272,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,247,259,283,287,272,273,275,255],
[270,0,258,268,284,277,284,257,248,252],
[304,293,0,274,316,303,299,279,291,287],
[292,283,277,0,282,268,281,282,275,265],
[268,267,235,269,0,267,267,245,262,268],
[264,274,248,283,284,0,294,268,263,276],
[279,267,252,270,284,257,0,255,266,271],
[278,294,272,269,306,283,296,0,289,275],
[276,303,260,276,289,288,285,262,0,271],
[296,299,264,286,283,275,280,276,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,284,285,282,290,277,270,285,264],
[273,0,288,282,284,279,275,284,279,256],
[267,263,0,283,275,269,270,270,263,270],
[266,269,268,0,274,269,274,261,264,260],
[269,267,276,277,0,274,272,298,287,292],
[261,272,282,282,277,0,276,281,280,277],
[274,276,281,277,279,275,0,279,289,281],
[281,267,281,290,253,270,272,0,278,261],
[266,272,288,287,264,271,262,273,0,274],
[287,295,281,291,259,274,270,290,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,261,274,271,268,253,279,290,270],
[288,0,272,271,266,268,273,291,291,268],
[290,279,0,297,294,294,299,289,309,270],
[277,280,254,0,280,291,276,330,302,268],
[280,285,257,271,0,263,282,283,291,257],
[283,283,257,260,288,0,283,300,296,278],
[298,278,252,275,269,268,0,292,308,292],
[272,260,262,221,268,251,259,0,287,261],
[261,260,242,249,260,255,243,264,0,248],
[281,283,281,283,294,273,259,290,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,254,285,310,297,225,282,285,324],
[268,0,267,212,270,310,251,267,241,293],
[297,284,0,253,284,339,280,281,297,296],
[266,339,298,0,297,314,312,307,355,276],
[241,281,267,254,0,311,294,252,338,293],
[254,241,212,237,240,0,215,183,256,279],
[326,300,271,239,257,336,0,243,323,280],
[269,284,270,244,299,368,308,0,352,294],
[266,310,254,196,213,295,228,199,0,250],
[227,258,255,275,258,272,271,257,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,242,257,285,252,273,279,297,288],
[268,0,282,244,279,288,304,278,275,295],
[309,269,0,267,281,295,307,304,293,265],
[294,307,284,0,268,292,306,303,292,293],
[266,272,270,283,0,268,281,318,273,283],
[299,263,256,259,283,0,308,311,265,301],
[278,247,244,245,270,243,0,300,278,268],
[272,273,247,248,233,240,251,0,259,271],
[254,276,258,259,278,286,273,292,0,268],
[263,256,286,258,268,250,283,280,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,222,233,226,289,284,332,238,237],
[309,0,207,258,307,230,284,321,262,294],
[329,344,0,260,292,271,367,347,273,351],
[318,293,291,0,265,286,409,346,319,346],
[325,244,259,286,0,285,350,340,275,330],
[262,321,280,265,266,0,361,350,292,319],
[267,267,184,142,201,190,0,264,153,211],
[219,230,204,205,211,201,287,0,246,250],
[313,289,278,232,276,259,398,305,0,347],
[314,257,200,205,221,232,340,301,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,290,285,296,274,299,290,265,278],
[272,0,281,311,274,268,286,289,278,285],
[261,270,0,271,253,290,295,281,273,269],
[266,240,280,0,256,247,294,261,256,263],
[255,277,298,295,0,279,293,290,287,286],
[277,283,261,304,272,0,290,280,257,258],
[252,265,256,257,258,261,0,270,248,263],
[261,262,270,290,261,271,281,0,258,268],
[286,273,278,295,264,294,303,293,0,261],
[273,266,282,288,265,293,288,283,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,318,290,268,306,289,282,313,277],
[249,0,291,265,240,291,221,240,273,239],
[233,260,0,277,248,264,243,244,291,218],
[261,286,274,0,260,304,259,254,297,244],
[283,311,303,291,0,320,277,269,293,268],
[245,260,287,247,231,0,246,228,264,221],
[262,330,308,292,274,305,0,264,315,248],
[269,311,307,297,282,323,287,0,341,258],
[238,278,260,254,258,287,236,210,0,230],
[274,312,333,307,283,330,303,293,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,265,263,266,256,271,264,259,263],
[283,0,280,279,283,280,294,269,275,276],
[286,271,0,267,293,269,283,290,289,284],
[288,272,284,0,289,278,286,280,290,292],
[285,268,258,262,0,276,277,267,282,258],
[295,271,282,273,275,0,290,272,295,295],
[280,257,268,265,274,261,0,275,270,266],
[287,282,261,271,284,279,276,0,281,288],
[292,276,262,261,269,256,281,270,0,269],
[288,275,267,259,293,256,285,263,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,271,272,276,290,274,267,303,281],
[265,0,285,279,278,285,303,299,311,288],
[280,266,0,269,268,286,268,280,277,229],
[279,272,282,0,271,250,283,279,282,281],
[275,273,283,280,0,240,260,280,289,237],
[261,266,265,301,311,0,290,286,257,265],
[277,248,283,268,291,261,0,304,338,274],
[284,252,271,272,271,265,247,0,304,267],
[248,240,274,269,262,294,213,247,0,220],
[270,263,322,270,314,286,277,284,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,300,265,342,339,293,269,266,268],
[284,0,288,282,347,287,289,279,260,269],
[251,263,0,254,298,316,323,264,284,281],
[286,269,297,0,318,297,345,278,314,269],
[209,204,253,233,0,259,279,270,222,197],
[212,264,235,254,292,0,277,207,236,247],
[258,262,228,206,272,274,0,230,225,176],
[282,272,287,273,281,344,321,0,269,256],
[285,291,267,237,329,315,326,282,0,272],
[283,282,270,282,354,304,375,295,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,284,280,266,283,270,270,271,264],
[285,0,269,282,272,272,269,287,267,255],
[267,282,0,282,273,272,256,281,273,271],
[271,269,269,0,281,279,296,290,282,260],
[285,279,278,270,0,277,252,283,268,269],
[268,279,279,272,274,0,248,262,264,268],
[281,282,295,255,299,303,0,283,293,279],
[281,264,270,261,268,289,268,0,287,252],
[280,284,278,269,283,287,258,264,0,274],
[287,296,280,291,282,283,272,299,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,267,297,280,260,249,285,314,289],
[239,0,227,234,245,212,237,237,267,247],
[284,324,0,284,292,283,287,270,289,301],
[254,317,267,0,267,282,249,271,332,298],
[271,306,259,284,0,272,253,281,293,283],
[291,339,268,269,279,0,275,274,292,275],
[302,314,264,302,298,276,0,275,305,322],
[266,314,281,280,270,277,276,0,266,299],
[237,284,262,219,258,259,246,285,0,238],
[262,304,250,253,268,276,229,252,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,292,299,255,290,300,253,277,251],
[263,0,236,280,297,285,289,260,254,288],
[259,315,0,321,299,281,294,284,284,297],
[252,271,230,0,266,300,254,230,251,288],
[296,254,252,285,0,245,229,256,284,269],
[261,266,270,251,306,0,237,214,272,275],
[251,262,257,297,322,314,0,277,283,279],
[298,291,267,321,295,337,274,0,284,272],
[274,297,267,300,267,279,268,267,0,260],
[300,263,254,263,282,276,272,279,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,263,257,268,287,281,252,286,259],
[269,0,267,256,269,273,266,252,270,263],
[288,284,0,277,285,286,281,260,283,274],
[294,295,274,0,274,286,289,271,296,289],
[283,282,266,277,0,276,274,261,284,263],
[264,278,265,265,275,0,286,266,280,246],
[270,285,270,262,277,265,0,244,288,256],
[299,299,291,280,290,285,307,0,287,273],
[265,281,268,255,267,271,263,264,0,260],
[292,288,277,262,288,305,295,278,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,295,293,282,302,272,298,276,310],
[289,0,286,298,287,312,275,276,264,300],
[256,265,0,279,274,297,269,268,280,280],
[258,253,272,0,281,304,260,268,276,265],
[269,264,277,270,0,303,263,276,249,287],
[249,239,254,247,248,0,234,248,226,258],
[279,276,282,291,288,317,0,287,274,296],
[253,275,283,283,275,303,264,0,261,280],
[275,287,271,275,302,325,277,290,0,291],
[241,251,271,286,264,293,255,271,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,323,273,297,364,251,344,276,298],
[254,0,251,321,277,274,231,346,232,229],
[228,300,0,231,277,344,275,321,208,252],
[278,230,320,0,250,342,230,322,229,275],
[254,274,274,301,0,320,277,299,276,254],
[187,277,207,209,231,0,231,252,232,206],
[300,320,276,321,274,320,0,319,275,274],
[207,205,230,229,252,299,232,0,161,298],
[275,319,343,322,275,319,276,390,0,323],
[253,322,299,276,297,345,277,253,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,237,266,301,290,280,264,322,297],
[300,0,209,342,300,277,276,271,316,294],
[314,342,0,383,274,292,320,286,305,323],
[285,209,168,0,285,272,253,296,250,230],
[250,251,277,266,0,307,238,259,280,294],
[261,274,259,279,244,0,292,272,290,321],
[271,275,231,298,313,259,0,270,290,281],
[287,280,265,255,292,279,281,0,308,234],
[229,235,246,301,271,261,261,243,0,277],
[254,257,228,321,257,230,270,317,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,274,253,284,256,280,283,262,293],
[281,0,277,259,259,272,271,269,278,286],
[277,274,0,271,280,268,262,267,267,287],
[298,292,280,0,301,269,299,291,283,306],
[267,292,271,250,0,248,277,268,265,287],
[295,279,283,282,303,0,276,286,267,284],
[271,280,289,252,274,275,0,271,280,289],
[268,282,284,260,283,265,280,0,275,287],
[289,273,284,268,286,284,271,276,0,298],
[258,265,264,245,264,267,262,264,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,277,299,282,275,282,272,298,280],
[258,0,255,275,286,280,265,255,270,264],
[274,296,0,266,290,280,274,277,278,256],
[252,276,285,0,278,297,278,261,262,266],
[269,265,261,273,0,283,259,246,274,263],
[276,271,271,254,268,0,262,254,278,268],
[269,286,277,273,292,289,0,261,263,277],
[279,296,274,290,305,297,290,0,300,288],
[253,281,273,289,277,273,288,251,0,265],
[271,287,295,285,288,283,274,263,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,294,278,291,266,265,261,289,308],
[280,0,286,251,281,266,260,250,287,279],
[257,265,0,264,270,264,265,243,285,293],
[273,300,287,0,296,276,274,272,301,300],
[260,270,281,255,0,265,254,264,264,298],
[285,285,287,275,286,0,296,278,291,296],
[286,291,286,277,297,255,0,297,297,286],
[290,301,308,279,287,273,254,0,299,297],
[262,264,266,250,287,260,254,252,0,279],
[243,272,258,251,253,255,265,254,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,271,242,169,203,274,243,167,273],
[348,0,343,211,345,277,381,281,309,315],
[280,208,0,244,206,209,310,208,237,348],
[309,340,307,0,204,203,272,273,202,343],
[382,206,345,347,0,276,344,313,202,417],
[348,274,342,348,275,0,275,349,238,314],
[277,170,241,279,207,276,0,313,133,245],
[308,270,343,278,238,202,238,0,236,308],
[384,242,314,349,349,313,418,315,0,384],
[278,236,203,208,134,237,306,243,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,253,279,268,283,297,262,257,263],
[280,0,278,297,257,290,305,282,293,270],
[298,273,0,300,275,273,300,285,269,287],
[272,254,251,0,252,271,273,282,261,264],
[283,294,276,299,0,281,290,273,271,307],
[268,261,278,280,270,0,278,271,248,276],
[254,246,251,278,261,273,0,272,252,264],
[289,269,266,269,278,280,279,0,285,285],
[294,258,282,290,280,303,299,266,0,277],
[288,281,264,287,244,275,287,266,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,283,287,292,276,263,299,257,265],
[248,0,267,259,268,296,264,292,286,270],
[268,284,0,292,260,295,267,297,272,251],
[264,292,259,0,261,299,278,289,272,278],
[259,283,291,290,0,300,255,297,299,271],
[275,255,256,252,251,0,272,274,269,250],
[288,287,284,273,296,279,0,297,285,278],
[252,259,254,262,254,277,254,0,267,249],
[294,265,279,279,252,282,266,284,0,266],
[286,281,300,273,280,301,273,302,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,246,353,273,247,330,219,245,193],
[250,0,245,298,300,218,328,162,190,190],
[305,306,0,274,327,222,358,304,248,252],
[198,253,277,0,303,195,304,226,250,143],
[278,251,224,248,0,221,332,139,222,140],
[304,333,329,356,330,0,409,274,301,249],
[221,223,193,247,219,142,0,169,221,167],
[332,389,247,325,412,277,382,0,357,332],
[306,361,303,301,329,250,330,194,0,249],
[358,361,299,408,411,302,384,219,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,294,272,277,276,281,277,288,267],
[271,0,287,268,260,283,285,254,297,260],
[257,264,0,275,265,267,277,260,279,267],
[279,283,276,0,280,292,279,257,307,275],
[274,291,286,271,0,302,291,281,297,277],
[275,268,284,259,249,0,250,248,275,257],
[270,266,274,272,260,301,0,253,288,289],
[274,297,291,294,270,303,298,0,325,288],
[263,254,272,244,254,276,263,226,0,265],
[284,291,284,276,274,294,262,263,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,257,277,275,274,280,313,254,297],
[285,0,288,297,262,269,294,311,277,314],
[294,263,0,274,269,249,290,322,292,292],
[274,254,277,0,271,271,267,312,258,286],
[276,289,282,280,0,287,286,293,275,302],
[277,282,302,280,264,0,297,291,296,300],
[271,257,261,284,265,254,0,297,281,311],
[238,240,229,239,258,260,254,0,251,268],
[297,274,259,293,276,255,270,300,0,297],
[254,237,259,265,249,251,240,283,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,271,254,270,278,273,270,270,279],
[296,0,277,287,280,260,276,256,283,249],
[280,274,0,246,254,256,256,284,257,249],
[297,264,305,0,279,274,299,285,281,272],
[281,271,297,272,0,275,306,283,253,263],
[273,291,295,277,276,0,276,259,284,271],
[278,275,295,252,245,275,0,238,271,244],
[281,295,267,266,268,292,313,0,257,273],
[281,268,294,270,298,267,280,294,0,271],
[272,302,302,279,288,280,307,278,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,281,275,271,301,280,282,282,287],
[254,0,270,240,261,279,252,254,267,253],
[270,281,0,259,271,302,266,280,268,277],
[276,311,292,0,287,316,274,281,299,298],
[280,290,280,264,0,302,258,286,272,288],
[250,272,249,235,249,0,245,266,264,260],
[271,299,285,277,293,306,0,274,284,282],
[269,297,271,270,265,285,277,0,283,274],
[269,284,283,252,279,287,267,268,0,272],
[264,298,274,253,263,291,269,277,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,276,310,242,255,253,272,284,261],
[356,0,328,312,293,309,295,264,331,283],
[275,223,0,282,286,298,255,282,276,266],
[241,239,269,0,257,251,250,219,280,232],
[309,258,265,294,0,321,225,291,316,283],
[296,242,253,300,230,0,258,264,269,245],
[298,256,296,301,326,293,0,293,293,283],
[279,287,269,332,260,287,258,0,284,250],
[267,220,275,271,235,282,258,267,0,261],
[290,268,285,319,268,306,268,301,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,323,308,312,274,321,320,303,325],
[241,0,292,292,287,279,275,302,266,284],
[228,259,0,288,271,249,279,303,260,279],
[243,259,263,0,252,239,248,277,248,274],
[239,264,280,299,0,274,289,286,289,276],
[277,272,302,312,277,0,284,287,272,254],
[230,276,272,303,262,267,0,283,266,256],
[231,249,248,274,265,264,268,0,286,268],
[248,285,291,303,262,279,285,265,0,274],
[226,267,272,277,275,297,295,283,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,276,279,276,277,278,271,305,296],
[277,0,244,257,280,265,253,282,260,272],
[275,307,0,288,241,248,248,280,274,283],
[272,294,263,0,282,283,268,271,280,304],
[275,271,310,269,0,286,267,266,285,307],
[274,286,303,268,265,0,245,282,289,301],
[273,298,303,283,284,306,0,291,275,315],
[280,269,271,280,285,269,260,0,309,296],
[246,291,277,271,266,262,276,242,0,307],
[255,279,268,247,244,250,236,255,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,297,292,264,282,305,265,272,281],
[256,0,270,254,258,270,303,269,271,262],
[254,281,0,257,258,278,289,264,251,240],
[259,297,294,0,283,287,289,274,285,269],
[287,293,293,268,0,294,302,266,305,292],
[269,281,273,264,257,0,280,256,261,253],
[246,248,262,262,249,271,0,245,250,236],
[286,282,287,277,285,295,306,0,265,262],
[279,280,300,266,246,290,301,286,0,281],
[270,289,311,282,259,298,315,289,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,343,309,257,306,328,333,314,304],
[274,0,330,287,268,298,312,332,287,338],
[208,221,0,273,237,265,257,317,268,261],
[242,264,278,0,285,328,275,334,293,326],
[294,283,314,266,0,319,313,336,302,328],
[245,253,286,223,232,0,290,295,264,285],
[223,239,294,276,238,261,0,281,289,280],
[218,219,234,217,215,256,270,0,243,300],
[237,264,283,258,249,287,262,308,0,295],
[247,213,290,225,223,266,271,251,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,288,246,261,262,273,258,268,274],
[264,0,291,274,269,289,254,283,291,297],
[263,260,0,252,288,271,270,249,255,269],
[305,277,299,0,304,307,266,280,271,301],
[290,282,263,247,0,252,287,248,264,237],
[289,262,280,244,299,0,254,278,287,286],
[278,297,281,285,264,297,0,270,311,265],
[293,268,302,271,303,273,281,0,287,268],
[283,260,296,280,287,264,240,264,0,279],
[277,254,282,250,314,265,286,283,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,291,259,278,258,283,271,277,277],
[282,0,270,278,257,251,269,276,253,254],
[260,281,0,266,262,276,267,272,253,276],
[292,273,285,0,269,275,278,275,258,270],
[273,294,289,282,0,267,291,281,289,302],
[293,300,275,276,284,0,288,285,277,270],
[268,282,284,273,260,263,0,270,268,280],
[280,275,279,276,270,266,281,0,274,288],
[274,298,298,293,262,274,283,277,0,274],
[274,297,275,281,249,281,271,263,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,268,241,239,256,259,264,244,276],
[294,0,290,276,286,274,289,276,286,299],
[283,261,0,240,251,266,265,263,263,283],
[310,275,311,0,297,288,296,281,277,304],
[312,265,300,254,0,284,298,274,274,293],
[295,277,285,263,267,0,290,264,261,282],
[292,262,286,255,253,261,0,265,260,293],
[287,275,288,270,277,287,286,0,263,301],
[307,265,288,274,277,290,291,288,0,285],
[275,252,268,247,258,269,258,250,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,274,283,325,259,274,300,270,304],
[257,0,293,273,309,266,273,294,263,279],
[277,258,0,262,279,266,256,291,260,299],
[268,278,289,0,298,279,255,291,289,289],
[226,242,272,253,0,225,241,270,226,255],
[292,285,285,272,326,0,264,307,283,311],
[277,278,295,296,310,287,0,302,267,303],
[251,257,260,260,281,244,249,0,238,261],
[281,288,291,262,325,268,284,313,0,299],
[247,272,252,262,296,240,248,290,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,315,281,267,293,306,292,309,294],
[254,0,290,279,263,265,267,263,291,277],
[236,261,0,275,252,276,271,261,277,292],
[270,272,276,0,256,263,277,254,287,300],
[284,288,299,295,0,272,291,298,284,290],
[258,286,275,288,279,0,281,290,290,309],
[245,284,280,274,260,270,0,275,292,288],
[259,288,290,297,253,261,276,0,287,277],
[242,260,274,264,267,261,259,264,0,277],
[257,274,259,251,261,242,263,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,263,260,256,263,242,261,243,277],
[283,0,262,258,277,254,246,269,277,272],
[288,289,0,265,299,281,265,295,267,319],
[291,293,286,0,284,246,263,300,278,300],
[295,274,252,267,0,268,237,282,259,268],
[288,297,270,305,283,0,281,274,285,302],
[309,305,286,288,314,270,0,318,286,288],
[290,282,256,251,269,277,233,0,260,298],
[308,274,284,273,292,266,265,291,0,317],
[274,279,232,251,283,249,263,253,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,288,318,281,278,285,279,280,299],
[278,0,292,319,280,280,264,292,285,279],
[263,259,0,289,247,276,268,273,260,258],
[233,232,262,0,251,270,245,258,236,269],
[270,271,304,300,0,273,267,288,281,296],
[273,271,275,281,278,0,254,285,258,253],
[266,287,283,306,284,297,0,304,283,284],
[272,259,278,293,263,266,247,0,259,279],
[271,266,291,315,270,293,268,292,0,282],
[252,272,293,282,255,298,267,272,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,268,273,266,270,270,268,264,251],
[292,0,272,280,303,298,300,294,281,289],
[283,279,0,282,283,295,267,288,293,281],
[278,271,269,0,278,295,276,271,270,254],
[285,248,268,273,0,280,265,288,273,267],
[281,253,256,256,271,0,273,280,276,266],
[281,251,284,275,286,278,0,271,296,272],
[283,257,263,280,263,271,280,0,286,278],
[287,270,258,281,278,275,255,265,0,272],
[300,262,270,297,284,285,279,273,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,272,301,228,318,272,242,315,254],
[302,0,253,279,266,310,288,266,305,270],
[279,298,0,306,249,314,285,258,301,265],
[250,272,245,0,240,305,282,278,289,267],
[323,285,302,311,0,315,296,276,276,259],
[233,241,237,246,236,0,238,251,275,248],
[279,263,266,269,255,313,0,245,275,286],
[309,285,293,273,275,300,306,0,294,275],
[236,246,250,262,275,276,276,257,0,289],
[297,281,286,284,292,303,265,276,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,272,279,266,228,263,269,248,277],
[239,0,281,276,230,245,229,272,213,272],
[279,270,0,297,262,261,273,247,228,256],
[272,275,254,0,255,237,264,249,227,233],
[285,321,289,296,0,314,276,276,263,313],
[323,306,290,314,237,0,299,262,273,277],
[288,322,278,287,275,252,0,273,278,297],
[282,279,304,302,275,289,278,0,264,291],
[303,338,323,324,288,278,273,287,0,295],
[274,279,295,318,238,274,254,260,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,234,217,325,275,274,292,318,226],
[274,0,275,274,289,321,304,302,303,211],
[317,276,0,291,368,321,318,321,347,272],
[334,277,260,0,386,254,286,333,330,301],
[226,262,183,165,0,287,288,288,286,256],
[276,230,230,297,264,0,245,290,305,215],
[277,247,233,265,263,306,0,231,291,246],
[259,249,230,218,263,261,320,0,288,308],
[233,248,204,221,265,246,260,263,0,231],
[325,340,279,250,295,336,305,243,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,283,275,288,269,274,266,289,257],
[272,0,264,281,296,261,281,273,277,263],
[268,287,0,281,295,269,287,282,311,266],
[276,270,270,0,304,269,295,276,292,268],
[263,255,256,247,0,245,263,244,273,238],
[282,290,282,282,306,0,274,290,292,268],
[277,270,264,256,288,277,0,279,290,270],
[285,278,269,275,307,261,272,0,301,276],
[262,274,240,259,278,259,261,250,0,257],
[294,288,285,283,313,283,281,275,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,267,222,247,276,241,252,250,252],
[301,0,291,287,271,284,308,288,287,297],
[284,260,0,280,270,286,268,268,273,270],
[329,264,271,0,257,288,275,271,266,277],
[304,280,281,294,0,286,282,265,282,281],
[275,267,265,263,265,0,282,275,279,291],
[310,243,283,276,269,269,0,259,278,281],
[299,263,283,280,286,276,292,0,271,287],
[301,264,278,285,269,272,273,280,0,274],
[299,254,281,274,270,260,270,264,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,252,309,309,328,326,315,284,317],
[248,0,270,245,247,220,275,293,259,269],
[299,281,0,316,332,289,339,308,265,295],
[242,306,235,0,296,273,305,288,320,262],
[242,304,219,255,0,203,255,255,272,246],
[223,331,262,278,348,0,284,283,282,283],
[225,276,212,246,296,267,0,292,260,231],
[236,258,243,263,296,268,259,0,216,268],
[267,292,286,231,279,269,291,335,0,260],
[234,282,256,289,305,268,320,283,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,266,281,277,293,275,276,279,280],
[250,0,256,245,278,292,301,257,256,282],
[285,295,0,255,273,308,284,274,282,309],
[270,306,296,0,271,295,307,276,287,296],
[274,273,278,280,0,278,292,274,286,304],
[258,259,243,256,273,0,308,273,269,283],
[276,250,267,244,259,243,0,267,269,257],
[275,294,277,275,277,278,284,0,270,296],
[272,295,269,264,265,282,282,281,0,302],
[271,269,242,255,247,268,294,255,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,230,272,227,279,289,258,296,305],
[269,0,242,286,289,310,273,278,288,305],
[321,309,0,263,275,290,279,311,303,322],
[279,265,288,0,280,267,269,299,293,276],
[324,262,276,271,0,288,287,284,297,279],
[272,241,261,284,263,0,281,268,261,272],
[262,278,272,282,264,270,0,273,249,266],
[293,273,240,252,267,283,278,0,284,292],
[255,263,248,258,254,290,302,267,0,308],
[246,246,229,275,272,279,285,259,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,256,261,254,250,253,268,248,256],
[307,0,267,295,274,292,281,291,277,262],
[295,284,0,305,283,286,281,278,257,267],
[290,256,246,0,261,283,271,255,260,261],
[297,277,268,290,0,300,278,285,244,262],
[301,259,265,268,251,0,262,274,246,273],
[298,270,270,280,273,289,0,268,258,267],
[283,260,273,296,266,277,283,0,263,253],
[303,274,294,291,307,305,293,288,0,291],
[295,289,284,290,289,278,284,298,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,318,298,268,265,269,290,261,260],
[265,0,290,278,270,249,257,242,276,260],
[233,261,0,280,245,203,244,278,241,229],
[253,273,271,0,269,222,237,275,288,250],
[283,281,306,282,0,292,270,296,302,312],
[286,302,348,329,259,0,288,297,295,299],
[282,294,307,314,281,263,0,300,293,270],
[261,309,273,276,255,254,251,0,270,274],
[290,275,310,263,249,256,258,281,0,283],
[291,291,322,301,239,252,281,277,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,256,268,269,269,270,249,246,256],
[308,0,270,274,279,285,274,274,281,275],
[295,281,0,297,286,283,299,271,287,283],
[283,277,254,0,285,288,271,265,277,272],
[282,272,265,266,0,277,270,274,261,260],
[282,266,268,263,274,0,276,264,258,263],
[281,277,252,280,281,275,0,265,276,268],
[302,277,280,286,277,287,286,0,283,272],
[305,270,264,274,290,293,275,268,0,279],
[295,276,268,279,291,288,283,279,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,274,278,270,262,271,276,275,297],
[292,0,275,275,286,291,271,273,274,294],
[277,276,0,283,263,282,290,285,273,285],
[273,276,268,0,275,290,288,281,261,285],
[281,265,288,276,0,288,266,278,276,301],
[289,260,269,261,263,0,275,276,258,288],
[280,280,261,263,285,276,0,285,259,278],
[275,278,266,270,273,275,266,0,257,275],
[276,277,278,290,275,293,292,294,0,284],
[254,257,266,266,250,263,273,276,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,257,270,266,277,265,269,281,291],
[278,0,274,266,268,304,306,287,279,293],
[294,277,0,276,270,276,282,260,285,315],
[281,285,275,0,284,305,260,280,282,343],
[285,283,281,267,0,298,274,287,276,336],
[274,247,275,246,253,0,251,245,266,290],
[286,245,269,291,277,300,0,266,293,300],
[282,264,291,271,264,306,285,0,268,300],
[270,272,266,269,275,285,258,283,0,282],
[260,258,236,208,215,261,251,251,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,283,268,284,286,258,281,283,256],
[257,0,270,269,267,275,250,254,264,251],
[268,281,0,272,284,281,268,277,287,272],
[283,282,279,0,284,270,273,282,290,258],
[267,284,267,267,0,262,264,276,279,260],
[265,276,270,281,289,0,284,279,301,270],
[293,301,283,278,287,267,0,288,289,287],
[270,297,274,269,275,272,263,0,292,270],
[268,287,264,261,272,250,262,259,0,248],
[295,300,279,293,291,281,264,281,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,265,276,271,270,279,267,266,278],
[281,0,267,280,278,273,272,280,284,271],
[286,284,0,289,282,290,287,287,287,273],
[275,271,262,0,277,289,273,272,272,273],
[280,273,269,274,0,281,270,278,290,265],
[281,278,261,262,270,0,264,269,277,275],
[272,279,264,278,281,287,0,262,284,270],
[284,271,264,279,273,282,289,0,278,277],
[285,267,264,279,261,274,267,273,0,270],
[273,280,278,278,286,276,281,274,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,272,287,249,282,275,285,280,282],
[256,0,279,314,253,259,274,266,281,276],
[279,272,0,273,257,260,268,252,262,277],
[264,237,278,0,251,256,278,258,252,288],
[302,298,294,300,0,269,298,288,275,302],
[269,292,291,295,282,0,305,267,280,318],
[276,277,283,273,253,246,0,253,267,272],
[266,285,299,293,263,284,298,0,291,292],
[271,270,289,299,276,271,284,260,0,293],
[269,275,274,263,249,233,279,259,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,296,273,307,264,293,285,261,277],
[322,0,328,325,334,259,296,324,281,340],
[255,223,0,268,265,228,244,207,204,231],
[278,226,283,0,293,260,277,255,225,294],
[244,217,286,258,0,233,254,222,229,257],
[287,292,323,291,318,0,279,302,255,294],
[258,255,307,274,297,272,0,205,216,253],
[266,227,344,296,329,249,346,0,249,287],
[290,270,347,326,322,296,335,302,0,318],
[274,211,320,257,294,257,298,264,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,254,272,272,259,258,267,258,247],
[255,0,253,246,264,234,226,258,222,246],
[297,298,0,289,298,270,283,289,268,296],
[279,305,262,0,263,277,255,276,250,263],
[279,287,253,288,0,258,266,261,276,274],
[292,317,281,274,293,0,264,281,272,294],
[293,325,268,296,285,287,0,279,282,277],
[284,293,262,275,290,270,272,0,271,259],
[293,329,283,301,275,279,269,280,0,298],
[304,305,255,288,277,257,274,292,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,271,260,269,265,267,248,251,299],
[290,0,262,266,266,258,262,263,249,264],
[280,289,0,272,270,267,265,252,268,284],
[291,285,279,0,292,264,279,277,291,281],
[282,285,281,259,0,261,265,273,261,275],
[286,293,284,287,290,0,298,270,265,295],
[284,289,286,272,286,253,0,257,276,291],
[303,288,299,274,278,281,294,0,298,303],
[300,302,283,260,290,286,275,253,0,294],
[252,287,267,270,276,256,260,248,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,321,268,261,254,296,265,297,295],
[253,0,286,253,257,250,282,267,274,269],
[230,265,0,245,258,253,291,264,264,279],
[283,298,306,0,287,280,282,272,297,311],
[290,294,293,264,0,259,273,285,292,300],
[297,301,298,271,292,0,280,283,298,294],
[255,269,260,269,278,271,0,286,255,280],
[286,284,287,279,266,268,265,0,282,302],
[254,277,287,254,259,253,296,269,0,298],
[256,282,272,240,251,257,271,249,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,276,294,253,260,331,351,356,308],
[251,0,277,258,264,295,272,290,296,214],
[275,274,0,261,251,265,255,319,275,246],
[257,293,290,0,281,253,313,336,285,268],
[298,287,300,270,0,303,292,318,308,294],
[291,256,286,298,248,0,330,297,296,234],
[220,279,296,238,259,221,0,311,259,243],
[200,261,232,215,233,254,240,0,254,233],
[195,255,276,266,243,255,292,297,0,205],
[243,337,305,283,257,317,308,318,346,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,264,256,270,262,283,292,283,274],
[273,0,268,277,269,280,299,288,273,307],
[287,283,0,260,273,278,276,297,280,264],
[295,274,291,0,292,287,293,300,284,290],
[281,282,278,259,0,250,275,306,273,276],
[289,271,273,264,301,0,279,281,284,273],
[268,252,275,258,276,272,0,297,260,284],
[259,263,254,251,245,270,254,0,270,274],
[268,278,271,267,278,267,291,281,0,272],
[277,244,287,261,275,278,267,277,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,287,277,304,259,268,259,267,279],
[271,0,299,294,275,277,311,273,276,275],
[264,252,0,265,280,243,259,269,243,273],
[274,257,286,0,286,241,267,269,234,256],
[247,276,271,265,0,242,257,273,260,243],
[292,274,308,310,309,0,292,291,302,293],
[283,240,292,284,294,259,0,284,259,275],
[292,278,282,282,278,260,267,0,264,274],
[284,275,308,317,291,249,292,287,0,294],
[272,276,278,295,308,258,276,277,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,259,231,259,268,279,284,259,288],
[238,0,211,234,236,254,246,261,233,257],
[292,340,0,295,246,309,305,293,313,321],
[320,317,256,0,281,327,304,289,326,299],
[292,315,305,270,0,299,301,295,281,324],
[283,297,242,224,252,0,264,258,265,290],
[272,305,246,247,250,287,0,274,288,265],
[267,290,258,262,256,293,277,0,269,288],
[292,318,238,225,270,286,263,282,0,263],
[263,294,230,252,227,261,286,263,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,266,270,260,255,275,228,291,277],
[281,0,305,272,297,282,292,261,297,284],
[285,246,0,263,272,254,264,240,282,271],
[281,279,288,0,278,285,294,245,292,281],
[291,254,279,273,0,264,285,260,284,290],
[296,269,297,266,287,0,291,269,303,268],
[276,259,287,257,266,260,0,257,280,261],
[323,290,311,306,291,282,294,0,319,271],
[260,254,269,259,267,248,271,232,0,265],
[274,267,280,270,261,283,290,280,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,283,291,283,246,282,258,265,278],
[277,0,272,282,289,277,289,273,271,289],
[268,279,0,284,291,260,277,269,272,291],
[260,269,267,0,274,265,255,259,257,277],
[268,262,260,277,0,252,253,253,249,271],
[305,274,291,286,299,0,279,278,274,303],
[269,262,274,296,298,272,0,268,282,296],
[293,278,282,292,298,273,283,0,274,297],
[286,280,279,294,302,277,269,277,0,296],
[273,262,260,274,280,248,255,254,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,265,253,242,253,246,269,254,245],
[254,0,252,233,249,236,254,277,254,229],
[286,299,0,267,268,272,258,297,281,274],
[298,318,284,0,270,291,270,285,279,255],
[309,302,283,281,0,292,296,304,291,265],
[298,315,279,260,259,0,280,290,299,275],
[305,297,293,281,255,271,0,299,289,267],
[282,274,254,266,247,261,252,0,284,250],
[297,297,270,272,260,252,262,267,0,294],
[306,322,277,296,286,276,284,301,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,227,264,217,248,256,244,226,254],
[314,0,250,245,244,264,261,292,256,249],
[324,301,0,288,248,270,261,275,249,251],
[287,306,263,0,277,253,269,267,280,247],
[334,307,303,274,0,290,300,309,303,280],
[303,287,281,298,261,0,282,322,251,285],
[295,290,290,282,251,269,0,275,316,319],
[307,259,276,284,242,229,276,0,235,244],
[325,295,302,271,248,300,235,316,0,286],
[297,302,300,304,271,266,232,307,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,266,270,295,274,258,243,253,255],
[259,0,255,279,296,286,263,232,238,284],
[285,296,0,277,299,289,270,289,285,280],
[281,272,274,0,288,296,268,245,270,255],
[256,255,252,263,0,266,270,267,253,259],
[277,265,262,255,285,0,266,225,254,280],
[293,288,281,283,281,285,0,283,274,289],
[308,319,262,306,284,326,268,0,293,277],
[298,313,266,281,298,297,277,258,0,285],
[296,267,271,296,292,271,262,274,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,295,270,313,242,299,273,251,249],
[280,0,277,256,313,293,290,269,276,253],
[256,274,0,240,311,268,282,269,241,260],
[281,295,311,0,339,298,329,268,297,240],
[238,238,240,212,0,250,244,220,242,221],
[309,258,283,253,301,0,287,270,265,242],
[252,261,269,222,307,264,0,243,216,233],
[278,282,282,283,331,281,308,0,243,271],
[300,275,310,254,309,286,335,308,0,301],
[302,298,291,311,330,309,318,280,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,277,253,270,241,270,256,272,256],
[272,0,270,239,255,238,240,248,279,248],
[274,281,0,250,265,235,246,240,259,273],
[298,312,301,0,303,239,272,278,293,276],
[281,296,286,248,0,250,273,260,284,254],
[310,313,316,312,301,0,298,259,289,268],
[281,311,305,279,278,253,0,255,270,297],
[295,303,311,273,291,292,296,0,289,277],
[279,272,292,258,267,262,281,262,0,283],
[295,303,278,275,297,283,254,274,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,268,273,276,258,255,256,254,266],
[264,0,272,276,277,273,272,257,273,269],
[283,279,0,278,279,275,292,255,276,283],
[278,275,273,0,291,276,267,264,263,280],
[275,274,272,260,0,261,256,264,252,266],
[293,278,276,275,290,0,286,266,265,283],
[296,279,259,284,295,265,0,271,257,276],
[295,294,296,287,287,285,280,0,272,288],
[297,278,275,288,299,286,294,279,0,280],
[285,282,268,271,285,268,275,263,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,276,275,276,250,270,258,307,252],
[324,0,293,269,259,221,272,253,313,225],
[275,258,0,256,242,216,263,246,307,219],
[276,282,295,0,252,265,298,257,388,285],
[275,292,309,299,0,260,265,279,342,288],
[301,330,335,286,291,0,306,281,352,240],
[281,279,288,253,286,245,0,268,329,267],
[293,298,305,294,272,270,283,0,323,226],
[244,238,244,163,209,199,222,228,0,207],
[299,326,332,266,263,311,284,325,344,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,250,252,235,243,287,218,247,278],
[311,0,253,277,240,273,303,259,245,305],
[301,298,0,289,227,245,294,284,278,271],
[299,274,262,0,263,257,275,228,230,276],
[316,311,324,288,0,293,343,272,256,296],
[308,278,306,294,258,0,301,265,266,289],
[264,248,257,276,208,250,0,211,205,262],
[333,292,267,323,279,286,340,0,244,296],
[304,306,273,321,295,285,346,307,0,314],
[273,246,280,275,255,262,289,255,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,272,292,271,280,302,276,308,302],
[283,0,266,305,293,288,295,296,303,299],
[279,285,0,301,283,290,280,275,295,292],
[259,246,250,0,254,261,254,270,271,269],
[280,258,268,297,0,289,266,279,288,284],
[271,263,261,290,262,0,254,265,277,280],
[249,256,271,297,285,297,0,293,291,307],
[275,255,276,281,272,286,258,0,278,278],
[243,248,256,280,263,274,260,273,0,262],
[249,252,259,282,267,271,244,273,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,297,252,280,235,313,232,229,255],
[266,0,299,325,286,287,305,246,291,290],
[254,252,0,252,275,267,256,242,225,254],
[299,226,299,0,283,261,318,277,258,268],
[271,265,276,268,0,209,265,247,314,265],
[316,264,284,290,342,0,280,263,279,262],
[238,246,295,233,286,271,0,242,263,301],
[319,305,309,274,304,288,309,0,287,274],
[322,260,326,293,237,272,288,264,0,302],
[296,261,297,283,286,289,250,277,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,277,288,287,295,268,266,304,288],
[263,0,253,288,262,244,246,277,309,249],
[274,298,0,295,282,282,257,251,303,275],
[263,263,256,0,241,245,212,241,272,264],
[264,289,269,310,0,248,229,260,293,260],
[256,307,269,306,303,0,275,248,299,287],
[283,305,294,339,322,276,0,275,287,264],
[285,274,300,310,291,303,276,0,266,282],
[247,242,248,279,258,252,264,285,0,263],
[263,302,276,287,291,264,287,269,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,321,257,289,298,281,260,279,287],
[277,0,303,273,297,287,294,285,277,271],
[230,248,0,231,254,248,225,248,250,271],
[294,278,320,0,305,276,303,266,290,299],
[262,254,297,246,0,292,286,238,258,269],
[253,264,303,275,259,0,255,239,254,268],
[270,257,326,248,265,296,0,266,278,285],
[291,266,303,285,313,312,285,0,300,304],
[272,274,301,261,293,297,273,251,0,292],
[264,280,280,252,282,283,266,247,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,287,294,314,297,318,272,323,299],
[266,0,277,271,306,286,288,273,305,269],
[264,274,0,284,298,284,290,275,292,265],
[257,280,267,0,307,288,278,274,285,271],
[237,245,253,244,0,260,246,276,271,272],
[254,265,267,263,291,0,278,282,286,260],
[233,263,261,273,305,273,0,261,277,262],
[279,278,276,277,275,269,290,0,286,275],
[228,246,259,266,280,265,274,265,0,272],
[252,282,286,280,279,291,289,276,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,270,276,256,264,268,255,267,254],
[293,0,271,286,271,278,301,274,270,281],
[281,280,0,276,273,272,285,280,279,290],
[275,265,275,0,272,271,290,271,273,275],
[295,280,278,279,0,263,295,264,285,287],
[287,273,279,280,288,0,289,271,280,279],
[283,250,266,261,256,262,0,267,262,259],
[296,277,271,280,287,280,284,0,289,291],
[284,281,272,278,266,271,289,262,0,269],
[297,270,261,276,264,272,292,260,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,255,264,266,284,271,252,274,268],
[281,0,254,276,270,282,264,252,275,261],
[296,297,0,269,293,278,280,276,281,276],
[287,275,282,0,271,279,264,269,284,278],
[285,281,258,280,0,270,267,266,284,269],
[267,269,273,272,281,0,255,284,280,276],
[280,287,271,287,284,296,0,283,305,283],
[299,299,275,282,285,267,268,0,296,273],
[277,276,270,267,267,271,246,255,0,262],
[283,290,275,273,282,275,268,278,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,255,238,265,248,287,280,277,266],
[293,0,282,263,265,262,295,279,269,285],
[296,269,0,283,280,279,290,282,288,300],
[313,288,268,0,286,251,304,265,301,283],
[286,286,271,265,0,268,292,291,282,284],
[303,289,272,300,283,0,288,301,288,298],
[264,256,261,247,259,263,0,266,262,263],
[271,272,269,286,260,250,285,0,281,280],
[274,282,263,250,269,263,289,270,0,271],
[285,266,251,268,267,253,288,271,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,285,259,270,286,273,264,259],
[276,0,276,262,260,266,284,287,255,261],
[275,275,0,259,232,277,255,262,238,265],
[266,289,292,0,276,304,287,297,277,302],
[292,291,319,275,0,285,282,286,284,286],
[281,285,274,247,266,0,277,263,261,275],
[265,267,296,264,269,274,0,278,264,275],
[278,264,289,254,265,288,273,0,244,254],
[287,296,313,274,267,290,287,307,0,288],
[292,290,286,249,265,276,276,297,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,338,287,244,240,269,265,296,291,277],
[213,0,223,256,194,252,184,243,294,244],
[264,328,0,285,260,292,245,244,310,223],
[307,295,266,0,260,281,283,238,270,261],
[311,357,291,291,0,292,271,282,309,253],
[282,299,259,270,259,0,288,283,290,254],
[286,367,306,268,280,263,0,239,320,289],
[255,308,307,313,269,268,312,0,336,240],
[260,257,241,281,242,261,231,215,0,251],
[274,307,328,290,298,297,262,311,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,295,279,293,277,259,290,284,286],
[280,0,301,282,324,294,261,288,299,281],
[256,250,0,238,276,260,263,283,270,239],
[272,269,313,0,281,295,286,309,284,280],
[258,227,275,270,0,283,242,311,292,266],
[274,257,291,256,268,0,239,286,257,251],
[292,290,288,265,309,312,0,297,293,262],
[261,263,268,242,240,265,254,0,271,254],
[267,252,281,267,259,294,258,280,0,253],
[265,270,312,271,285,300,289,297,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,250,255,260,236,260,277,243,252],
[294,0,310,238,245,243,215,257,222,224],
[301,241,0,245,280,231,266,263,207,210],
[296,313,306,0,298,287,313,311,274,298],
[291,306,271,253,0,244,306,334,246,286],
[315,308,320,264,307,0,283,297,287,273],
[291,336,285,238,245,268,0,287,239,261],
[274,294,288,240,217,254,264,0,258,255],
[308,329,344,277,305,264,312,293,0,282],
[299,327,341,253,265,278,290,296,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,238,398,277,276,315,315,279,236],
[197,0,238,317,237,316,276,353,157,276],
[313,313,0,433,274,315,351,352,275,233],
[153,234,118,0,194,273,313,232,313,156],
[274,314,277,357,0,315,236,316,274,238],
[275,235,236,278,236,0,273,276,196,236],
[236,275,200,238,315,278,0,198,238,315],
[236,198,199,319,235,275,353,0,277,156],
[272,394,276,238,277,355,313,274,0,196],
[315,275,318,395,313,315,236,395,355,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,285,264,261,288,267,241,266,235],
[281,0,274,254,273,296,264,259,276,250],
[266,277,0,268,294,268,272,253,270,248],
[287,297,283,0,293,292,279,282,266,253],
[290,278,257,258,0,271,258,260,287,278],
[263,255,283,259,280,0,268,277,277,249],
[284,287,279,272,293,283,0,263,268,279],
[310,292,298,269,291,274,288,0,290,286],
[285,275,281,285,264,274,283,261,0,263],
[316,301,303,298,273,302,272,265,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,364,458,275,458,367,369,367,272,460],
[187,0,277,187,370,279,187,186,91,279],
[93,274,0,183,274,183,93,183,365,183],
[276,364,368,0,457,273,275,273,272,366],
[93,181,277,94,0,90,184,183,91,185],
[184,272,368,278,461,0,275,183,182,185],
[182,364,458,276,367,276,0,276,364,369],
[184,365,368,278,368,368,275,0,365,460],
[279,460,186,279,460,369,187,186,0,279],
[91,272,368,185,366,366,182,91,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,268,300,257,281,270,272,275,244],
[283,0,268,274,257,270,266,259,292,260],
[283,283,0,275,256,267,272,258,273,270],
[251,277,276,0,259,283,268,267,249,226],
[294,294,295,292,0,283,253,277,268,260],
[270,281,284,268,268,0,287,258,281,283],
[281,285,279,283,298,264,0,254,280,267],
[279,292,293,284,274,293,297,0,265,279],
[276,259,278,302,283,270,271,286,0,253],
[307,291,281,325,291,268,284,272,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,267,271,251,252,257,257,252,296],
[315,0,284,285,290,289,273,278,286,321],
[284,267,0,290,289,264,292,262,288,267],
[280,266,261,0,284,261,272,267,257,281],
[300,261,262,267,0,282,275,252,285,295],
[299,262,287,290,269,0,278,265,262,296],
[294,278,259,279,276,273,0,260,290,310],
[294,273,289,284,299,286,291,0,292,322],
[299,265,263,294,266,289,261,259,0,291],
[255,230,284,270,256,255,241,229,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,274,261,296,270,294,272,279,283],
[291,0,275,279,278,276,282,276,293,288],
[277,276,0,252,286,275,275,270,285,270],
[290,272,299,0,296,276,306,292,289,297],
[255,273,265,255,0,261,277,266,281,273],
[281,275,276,275,290,0,296,289,297,279],
[257,269,276,245,274,255,0,260,274,262],
[279,275,281,259,285,262,291,0,273,289],
[272,258,266,262,270,254,277,278,0,262],
[268,263,281,254,278,272,289,262,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,551,234,234,393,313,235,473,394],
[158,0,313,237,79,158,235,237,158,394],
[0,238,0,79,79,79,156,158,158,236],
[317,314,472,0,315,314,235,236,394,395],
[317,472,472,236,0,393,392,317,396,474],
[158,393,472,237,158,0,393,316,395,474],
[238,316,395,316,159,158,0,238,317,395],
[316,314,393,315,234,235,313,0,472,316],
[78,393,393,157,155,156,234,79,0,236],
[157,157,315,156,77,77,156,235,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,289,287,279,285,277,289,270,280],
[272,0,293,260,279,271,282,298,265,279],
[262,258,0,262,266,259,282,273,276,262],
[264,291,289,0,298,265,273,271,272,275],
[272,272,285,253,0,268,285,275,258,280],
[266,280,292,286,283,0,272,279,256,297],
[274,269,269,278,266,279,0,275,258,281],
[262,253,278,280,276,272,276,0,275,282],
[281,286,275,279,293,295,293,276,0,297],
[271,272,289,276,271,254,270,269,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,280,287,258,266,262,268,279,271],
[274,0,280,275,284,283,249,271,273,272],
[271,271,0,277,263,273,265,278,267,263],
[264,276,274,0,263,251,253,277,272,263],
[293,267,288,288,0,278,270,273,292,275],
[285,268,278,300,273,0,269,263,265,278],
[289,302,286,298,281,282,0,272,280,281],
[283,280,273,274,278,288,279,0,272,284],
[272,278,284,279,259,286,271,279,0,280],
[280,279,288,288,276,273,270,267,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,350,255,251,338,319,286,255,197,317],
[201,0,221,253,289,286,201,220,235,285],
[296,330,0,352,301,370,296,267,283,315],
[300,298,199,0,269,316,265,200,217,279],
[213,262,250,282,0,365,244,281,211,279],
[232,265,181,235,186,0,180,234,246,198],
[265,350,255,286,307,371,0,220,300,314],
[296,331,284,351,270,317,331,0,246,277],
[354,316,268,334,340,305,251,305,0,316],
[234,266,236,272,272,353,237,274,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,220,256,311,332,308,218,255,274],
[318,0,299,259,315,351,293,260,315,261],
[331,252,0,312,273,312,272,252,256,239],
[295,292,239,0,276,296,327,293,222,200],
[240,236,278,275,0,277,289,180,202,201],
[219,200,239,255,274,0,257,257,219,203],
[243,258,279,224,262,294,0,242,296,204],
[333,291,299,258,371,294,309,0,275,297],
[296,236,295,329,349,332,255,276,0,240],
[277,290,312,351,350,348,347,254,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,313,288,293,287,288,296,277,275],
[270,0,310,300,278,297,264,275,275,268],
[238,241,0,282,261,265,248,271,251,246],
[263,251,269,0,247,253,247,276,261,242],
[258,273,290,304,0,307,264,269,271,283],
[264,254,286,298,244,0,258,278,269,240],
[263,287,303,304,287,293,0,286,280,268],
[255,276,280,275,282,273,265,0,280,260],
[274,276,300,290,280,282,271,271,0,250],
[276,283,305,309,268,311,283,291,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,270,261,265,272,265,272,270,274],
[280,0,295,265,292,286,282,266,272,274],
[281,256,0,265,268,268,263,267,275,267],
[290,286,286,0,282,278,271,273,282,282],
[286,259,283,269,0,294,276,276,285,280],
[279,265,283,273,257,0,274,262,269,271],
[286,269,288,280,275,277,0,273,279,268],
[279,285,284,278,275,289,278,0,291,297],
[281,279,276,269,266,282,272,260,0,273],
[277,277,284,269,271,280,283,254,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,266,274,248,265,286,249,287,275],
[305,0,272,261,279,267,299,247,302,271],
[285,279,0,273,270,276,283,256,302,267],
[277,290,278,0,272,261,295,261,295,275],
[303,272,281,279,0,267,289,282,309,268],
[286,284,275,290,284,0,301,282,307,273],
[265,252,268,256,262,250,0,235,284,232],
[302,304,295,290,269,269,316,0,308,279],
[264,249,249,256,242,244,267,243,0,233],
[276,280,284,276,283,278,319,272,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,245,277,265,247,252,261,252,250],
[308,0,271,282,272,287,252,274,259,266],
[306,280,0,313,264,267,277,270,259,266],
[274,269,238,0,256,269,259,254,232,228],
[286,279,287,295,0,283,275,272,257,270],
[304,264,284,282,268,0,266,263,260,283],
[299,299,274,292,276,285,0,267,294,242],
[290,277,281,297,279,288,284,0,245,286],
[299,292,292,319,294,291,257,306,0,285],
[301,285,285,323,281,268,309,265,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,281,289,262,290,261,267,283,281],
[260,0,266,253,270,264,247,256,274,257],
[270,285,0,278,263,288,274,282,284,275],
[262,298,273,0,267,293,259,289,297,279],
[289,281,288,284,0,268,280,277,295,265],
[261,287,263,258,283,0,244,283,284,264],
[290,304,277,292,271,307,0,288,319,311],
[284,295,269,262,274,268,263,0,270,267],
[268,277,267,254,256,267,232,281,0,254],
[270,294,276,272,286,287,240,284,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,272,286,274,265,287,259,277,291],
[283,0,279,270,295,271,284,300,263,270],
[279,272,0,281,278,288,306,270,280,292],
[265,281,270,0,272,267,284,266,278,273],
[277,256,273,279,0,292,285,271,277,263],
[286,280,263,284,259,0,298,260,292,284],
[264,267,245,267,266,253,0,261,267,272],
[292,251,281,285,280,291,290,0,273,266],
[274,288,271,273,274,259,284,278,0,286],
[260,281,259,278,288,267,279,285,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,273,275,275,305,270,268,258,291],
[298,0,296,279,284,316,289,289,270,291],
[278,255,0,270,280,293,283,267,283,279],
[276,272,281,0,287,287,286,275,267,286],
[276,267,271,264,0,283,279,268,266,288],
[246,235,258,264,268,0,259,262,259,254],
[281,262,268,265,272,292,0,259,265,300],
[283,262,284,276,283,289,292,0,274,306],
[293,281,268,284,285,292,286,277,0,287],
[260,260,272,265,263,297,251,245,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,276,268,270,280,288,279,274,273],
[268,0,290,258,280,282,255,273,265,267],
[275,261,0,263,264,259,266,278,259,268],
[283,293,288,0,276,287,285,282,266,295],
[281,271,287,275,0,265,261,280,281,288],
[271,269,292,264,286,0,278,254,278,273],
[263,296,285,266,290,273,0,286,274,281],
[272,278,273,269,271,297,265,0,259,287],
[277,286,292,285,270,273,277,292,0,278],
[278,284,283,256,263,278,270,264,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,282,274,284,260,273,280,256,264],
[295,0,272,288,310,272,272,295,273,283],
[269,279,0,290,284,280,261,293,262,282],
[277,263,261,0,283,270,269,278,254,263],
[267,241,267,268,0,270,258,270,262,252],
[291,279,271,281,281,0,276,282,265,288],
[278,279,290,282,293,275,0,279,273,293],
[271,256,258,273,281,269,272,0,261,257],
[295,278,289,297,289,286,278,290,0,274],
[287,268,269,288,299,263,258,294,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,318,296,289,286,278,285,295,266],
[266,0,286,274,302,279,266,269,265,255],
[233,265,0,261,252,261,260,244,276,262],
[255,277,290,0,260,255,257,268,275,274],
[262,249,299,291,0,288,290,264,288,285],
[265,272,290,296,263,0,279,258,286,298],
[273,285,291,294,261,272,0,263,284,275],
[266,282,307,283,287,293,288,0,268,280],
[256,286,275,276,263,265,267,283,0,278],
[285,296,289,277,266,253,276,271,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,257,243,315,339,337,384,264,319],
[239,0,240,311,277,268,315,333,240,313],
[294,311,0,270,286,331,343,342,296,332],
[308,240,281,0,284,295,304,320,245,340],
[236,274,265,267,0,289,284,273,242,354],
[212,283,220,256,262,0,275,282,207,287],
[214,236,208,247,267,276,0,255,226,277],
[167,218,209,231,278,269,296,0,213,271],
[287,311,255,306,309,344,325,338,0,332],
[232,238,219,211,197,264,274,280,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,293,294,299,301,275,278,295,306],
[261,0,245,231,287,279,230,251,260,258],
[258,306,0,259,306,299,273,273,259,290],
[257,320,292,0,301,306,277,319,269,271],
[252,264,245,250,0,260,250,263,275,270],
[250,272,252,245,291,0,259,256,248,283],
[276,321,278,274,301,292,0,299,287,294],
[273,300,278,232,288,295,252,0,260,314],
[256,291,292,282,276,303,264,291,0,289],
[245,293,261,280,281,268,257,237,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,297,317,294,271,277,276,318,282],
[255,0,266,288,267,266,276,270,289,276],
[254,285,0,282,282,248,275,272,292,254],
[234,263,269,0,260,268,259,267,283,244],
[257,284,269,291,0,272,268,256,268,263],
[280,285,303,283,279,0,270,280,286,268],
[274,275,276,292,283,281,0,275,282,263],
[275,281,279,284,295,271,276,0,289,268],
[233,262,259,268,283,265,269,262,0,241],
[269,275,297,307,288,283,288,283,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,275,296,306,293,296,274,290,263],
[263,0,280,275,282,283,267,281,271,266],
[276,271,0,283,299,280,298,257,269,249],
[255,276,268,0,290,274,270,256,261,278],
[245,269,252,261,0,266,271,244,255,236],
[258,268,271,277,285,0,290,270,273,245],
[255,284,253,281,280,261,0,265,273,255],
[277,270,294,295,307,281,286,0,281,272],
[261,280,282,290,296,278,278,270,0,257],
[288,285,302,273,315,306,296,279,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,266,280,272,289,269,283,258,282],
[252,0,256,245,255,266,262,270,296,266],
[285,295,0,250,263,293,288,285,303,292],
[271,306,301,0,288,278,294,286,316,296],
[279,296,288,263,0,271,297,282,286,288],
[262,285,258,273,280,0,268,278,256,260],
[282,289,263,257,254,283,0,271,286,269],
[268,281,266,265,269,273,280,0,295,274],
[293,255,248,235,265,295,265,256,0,263],
[269,285,259,255,263,291,282,277,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,271,235,248,260,236,242,265,232],
[302,0,273,252,285,284,254,260,272,261],
[280,278,0,275,286,284,258,275,280,262],
[316,299,276,0,304,280,293,254,318,286],
[303,266,265,247,0,254,260,237,269,240],
[291,267,267,271,297,0,261,275,274,288],
[315,297,293,258,291,290,0,288,331,273],
[309,291,276,297,314,276,263,0,282,271],
[286,279,271,233,282,277,220,269,0,228],
[319,290,289,265,311,263,278,280,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,266,261,273,257,265,278,270,279],
[272,0,274,279,282,264,290,287,274,272],
[285,277,0,275,266,277,278,286,269,277],
[290,272,276,0,285,269,292,300,275,272],
[278,269,285,266,0,268,287,289,271,272],
[294,287,274,282,283,0,296,290,279,275],
[286,261,273,259,264,255,0,276,258,251],
[273,264,265,251,262,261,275,0,257,245],
[281,277,282,276,280,272,293,294,0,282],
[272,279,274,279,279,276,300,306,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,265,285,267,295,301,311,288,295],
[243,0,287,288,261,282,305,302,280,257],
[286,264,0,278,278,315,318,303,306,278],
[266,263,273,0,251,293,287,303,267,259],
[284,290,273,300,0,304,292,302,312,299],
[256,269,236,258,247,0,262,275,266,231],
[250,246,233,264,259,289,0,298,255,252],
[240,249,248,248,249,276,253,0,247,242],
[263,271,245,284,239,285,296,304,0,250],
[256,294,273,292,252,320,299,309,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,311,286,255,268,264,284,260,278],
[300,0,334,284,297,276,271,289,293,301],
[240,217,0,272,255,240,234,249,259,259],
[265,267,279,0,258,251,239,258,286,265],
[296,254,296,293,0,259,246,276,266,274],
[283,275,311,300,292,0,259,287,274,284],
[287,280,317,312,305,292,0,271,306,294],
[267,262,302,293,275,264,280,0,281,313],
[291,258,292,265,285,277,245,270,0,269],
[273,250,292,286,277,267,257,238,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,304,195,234,250,214,339,375,302],
[284,0,194,192,251,268,123,303,357,301],
[247,357,0,316,338,286,231,338,356,338],
[356,359,235,0,326,341,322,359,376,342],
[317,300,213,225,0,299,209,301,317,282],
[301,283,265,210,252,0,246,336,304,320],
[337,428,320,229,342,305,0,339,341,375],
[212,248,213,192,250,215,212,0,320,233],
[176,194,195,175,234,247,210,231,0,212],
[249,250,213,209,269,231,176,318,339,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,266,268,267,281,272,288,283,267],
[288,0,273,283,275,273,281,298,292,270],
[285,278,0,281,288,276,268,296,294,273],
[283,268,270,0,258,262,270,283,283,275],
[284,276,263,293,0,270,294,292,298,289],
[270,278,275,289,281,0,270,286,292,293],
[279,270,283,281,257,281,0,285,275,277],
[263,253,255,268,259,265,266,0,267,268],
[268,259,257,268,253,259,276,284,0,263],
[284,281,278,276,262,258,274,283,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,280,270,280,272,301,285,264],
[267,0,265,263,267,275,274,275,282,275],
[278,286,0,276,295,286,282,292,293,269],
[271,288,275,0,300,281,275,279,282,271],
[281,284,256,251,0,280,285,281,273,266],
[271,276,265,270,271,0,273,274,263,278],
[279,277,269,276,266,278,0,277,281,268],
[250,276,259,272,270,277,274,0,275,267],
[266,269,258,269,278,288,270,276,0,272],
[287,276,282,280,285,273,283,284,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,255,265,258,278,257,252,270,257],
[291,0,285,281,269,281,269,274,270,288],
[296,266,0,304,273,289,277,300,277,272],
[286,270,247,0,256,279,273,273,265,263],
[293,282,278,295,0,307,260,278,274,284],
[273,270,262,272,244,0,261,257,274,259],
[294,282,274,278,291,290,0,279,297,298],
[299,277,251,278,273,294,272,0,279,278],
[281,281,274,286,277,277,254,272,0,265],
[294,263,279,288,267,292,253,273,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,265,235,245,267,252,258,250,248],
[307,0,294,272,292,321,282,297,278,271],
[286,257,0,263,267,280,282,266,276,280],
[316,279,288,0,275,305,296,289,281,304],
[306,259,284,276,0,297,251,277,276,291],
[284,230,271,246,254,0,268,267,261,281],
[299,269,269,255,300,283,0,266,281,295],
[293,254,285,262,274,284,285,0,262,299],
[301,273,275,270,275,290,270,289,0,278],
[303,280,271,247,260,270,256,252,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,269,260,276,250,257,286,279,242],
[290,0,267,279,296,246,277,281,288,250],
[282,284,0,272,269,256,267,278,282,256],
[291,272,279,0,294,264,272,288,264,287],
[275,255,282,257,0,237,261,294,266,258],
[301,305,295,287,314,0,283,302,293,270],
[294,274,284,279,290,268,0,287,292,268],
[265,270,273,263,257,249,264,0,264,268],
[272,263,269,287,285,258,259,287,0,248],
[309,301,295,264,293,281,283,283,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,284,240,300,271,282,298,241,297],
[251,0,278,282,267,266,307,224,265,281],
[267,273,0,267,298,254,310,314,282,281],
[311,269,284,0,285,241,308,242,196,280],
[251,284,253,266,0,339,323,281,279,335],
[280,285,297,310,212,0,313,299,253,281],
[269,244,241,243,228,238,0,259,226,239],
[253,327,237,309,270,252,292,0,277,282],
[310,286,269,355,272,298,325,274,0,342],
[254,270,270,271,216,270,312,269,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,242,248,261,288,268,271,275,254],
[284,0,279,273,298,273,279,279,293,281],
[309,272,0,256,292,291,281,286,293,274],
[303,278,295,0,299,293,265,301,282,273],
[290,253,259,252,0,279,265,278,280,241],
[263,278,260,258,272,0,271,267,287,251],
[283,272,270,286,286,280,0,277,296,273],
[280,272,265,250,273,284,274,0,275,269],
[276,258,258,269,271,264,255,276,0,266],
[297,270,277,278,310,300,278,282,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,263,300,280,294,292,282,277,267],
[300,0,295,312,262,308,302,313,299,311],
[288,256,0,255,269,289,258,275,243,267],
[251,239,296,0,259,289,256,249,276,277],
[271,289,282,292,0,323,293,274,296,296],
[257,243,262,262,228,0,291,274,292,270],
[259,249,293,295,258,260,0,251,296,285],
[269,238,276,302,277,277,300,0,267,284],
[274,252,308,275,255,259,255,284,0,295],
[284,240,284,274,255,281,266,267,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,267,286,266,265,312,247,295,271],
[295,0,274,305,279,294,302,282,304,260],
[284,277,0,292,239,278,294,267,289,253],
[265,246,259,0,255,255,265,239,289,244],
[285,272,312,296,0,316,313,279,317,296],
[286,257,273,296,235,0,312,244,311,259],
[239,249,257,286,238,239,0,243,258,249],
[304,269,284,312,272,307,308,0,294,280],
[256,247,262,262,234,240,293,257,0,238],
[280,291,298,307,255,292,302,271,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,299,370,278,273,232,280,288,256],
[254,0,323,353,227,262,239,257,320,276],
[252,228,0,310,208,241,182,224,267,236],
[181,198,241,0,205,215,180,223,239,214],
[273,324,343,346,0,331,240,268,333,266],
[278,289,310,336,220,0,241,282,286,276],
[319,312,369,371,311,310,0,273,371,301],
[271,294,327,328,283,269,278,0,351,326],
[263,231,284,312,218,265,180,200,0,241],
[295,275,315,337,285,275,250,225,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,285,279,284,261,287,270,274],
[281,0,275,295,276,287,282,279,290,304],
[284,276,0,266,267,289,284,276,285,283],
[266,256,285,0,296,269,286,278,276,281],
[272,275,284,255,0,278,271,277,268,266],
[267,264,262,282,273,0,255,254,255,275],
[290,269,267,265,280,296,0,261,273,274],
[264,272,275,273,274,297,290,0,266,268],
[281,261,266,275,283,296,278,285,0,290],
[277,247,268,270,285,276,277,283,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,242,286,271,257,259,252,268,235],
[280,0,261,294,268,291,283,269,273,273],
[309,290,0,327,303,301,286,269,260,270],
[265,257,224,0,258,250,234,252,245,249],
[280,283,248,293,0,296,281,292,278,271],
[294,260,250,301,255,0,288,299,272,245],
[292,268,265,317,270,263,0,291,300,284],
[299,282,282,299,259,252,260,0,306,267],
[283,278,291,306,273,279,251,245,0,279],
[316,278,281,302,280,306,267,284,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,268,252,309,300,277,284,273,229],
[282,0,303,310,308,315,279,245,266,288],
[283,248,0,262,321,323,296,280,289,258],
[299,241,289,0,346,308,276,261,260,293],
[242,243,230,205,0,270,284,225,210,212],
[251,236,228,243,281,0,251,213,232,223],
[274,272,255,275,267,300,0,248,235,261],
[267,306,271,290,326,338,303,0,260,245],
[278,285,262,291,341,319,316,291,0,236],
[322,263,293,258,339,328,290,306,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,286,255,289,274,268,270,267,282],
[260,0,268,245,267,256,245,268,251,240],
[265,283,0,271,268,269,289,275,254,264],
[296,306,280,0,298,279,271,283,277,278],
[262,284,283,253,0,264,277,285,257,266],
[277,295,282,272,287,0,284,302,270,267],
[283,306,262,280,274,267,0,277,262,252],
[281,283,276,268,266,249,274,0,263,259],
[284,300,297,274,294,281,289,288,0,270],
[269,311,287,273,285,284,299,292,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,269,280,281,270,258,260,278,276],
[268,0,284,279,268,275,265,259,280,268],
[282,267,0,284,286,272,261,268,275,273],
[271,272,267,0,264,262,252,261,259,270],
[270,283,265,287,0,261,270,272,284,284],
[281,276,279,289,290,0,255,259,269,302],
[293,286,290,299,281,296,0,263,280,285],
[291,292,283,290,279,292,288,0,272,298],
[273,271,276,292,267,282,271,279,0,278],
[275,283,278,281,267,249,266,253,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,295,279,294,267,279,286,274,292],
[261,0,280,273,267,274,271,269,266,289],
[256,271,0,272,256,261,269,269,284,287],
[272,278,279,0,289,277,262,275,279,289],
[257,284,295,262,0,280,274,267,263,297],
[284,277,290,274,271,0,266,279,276,293],
[272,280,282,289,277,285,0,279,282,307],
[265,282,282,276,284,272,272,0,278,293],
[277,285,267,272,288,275,269,273,0,285],
[259,262,264,262,254,258,244,258,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,308,295,279,277,251,293,277,278],
[274,0,302,304,279,281,277,302,290,282],
[243,249,0,274,245,259,230,246,278,261],
[256,247,277,0,267,253,249,261,255,267],
[272,272,306,284,0,258,248,281,255,257],
[274,270,292,298,293,0,265,288,283,271],
[300,274,321,302,303,286,0,303,275,284],
[258,249,305,290,270,263,248,0,287,269],
[274,261,273,296,296,268,276,264,0,266],
[273,269,290,284,294,280,267,282,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,257,236,238,252,238,279,277,285],
[330,0,342,279,253,260,294,336,316,327],
[294,209,0,289,224,306,279,254,304,283],
[315,272,262,0,199,244,214,268,263,319],
[313,298,327,352,0,295,255,257,292,367],
[299,291,245,307,256,0,280,293,333,314],
[313,257,272,337,296,271,0,294,234,365],
[272,215,297,283,294,258,257,0,239,324],
[274,235,247,288,259,218,317,312,0,318],
[266,224,268,232,184,237,186,227,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,276,258,269,295,278,252,291,297],
[305,0,269,267,294,273,294,273,310,285],
[275,282,0,269,275,284,288,274,300,289],
[293,284,282,0,278,293,260,294,298,278],
[282,257,276,273,0,303,274,265,295,281],
[256,278,267,258,248,0,253,277,269,266],
[273,257,263,291,277,298,0,266,285,256],
[299,278,277,257,286,274,285,0,280,280],
[260,241,251,253,256,282,266,271,0,252],
[254,266,262,273,270,285,295,271,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,298,279,265,265,268,281,260,272],
[276,0,285,279,262,282,261,286,253,281],
[253,266,0,251,258,269,273,287,254,267],
[272,272,300,0,265,285,274,296,276,274],
[286,289,293,286,0,276,282,293,261,290],
[286,269,282,266,275,0,285,294,249,299],
[283,290,278,277,269,266,0,285,263,284],
[270,265,264,255,258,257,266,0,275,276],
[291,298,297,275,290,302,288,276,0,286],
[279,270,284,277,261,252,267,275,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,307,336,278,368,280,213,275,337],
[242,0,303,334,276,335,218,212,273,244],
[244,248,0,336,276,336,311,245,308,337],
[215,217,215,0,183,305,186,215,306,339],
[273,275,275,368,0,365,185,276,337,338],
[183,216,215,246,186,0,220,154,187,245],
[271,333,240,365,366,331,0,150,304,393],
[338,339,306,336,275,397,401,0,367,367],
[276,278,243,245,214,364,247,184,0,368],
[214,307,214,212,213,306,158,184,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,276,288,279,288,257,287,279,287],
[277,0,250,273,287,270,277,298,271,300],
[275,301,0,276,294,290,281,289,313,272],
[263,278,275,0,287,281,258,257,282,291],
[272,264,257,264,0,297,243,271,277,274],
[263,281,261,270,254,0,249,285,266,269],
[294,274,270,293,308,302,0,283,302,275],
[264,253,262,294,280,266,268,0,289,292],
[272,280,238,269,274,285,249,262,0,267],
[264,251,279,260,277,282,276,259,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,285,276,276,313,270,279,287,266],
[284,0,278,278,266,306,272,282,294,269],
[266,273,0,266,275,285,257,264,262,274],
[275,273,285,0,269,284,266,261,274,249],
[275,285,276,282,0,284,260,277,272,260],
[238,245,266,267,267,0,255,250,255,254],
[281,279,294,285,291,296,0,271,298,275],
[272,269,287,290,274,301,280,0,288,260],
[264,257,289,277,279,296,253,263,0,279],
[285,282,277,302,291,297,276,291,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,263,241,260,266,269,248,281,234],
[334,0,275,255,274,271,264,278,287,238],
[288,276,0,269,310,278,279,259,294,279],
[310,296,282,0,270,290,310,254,268,256],
[291,277,241,281,0,267,280,272,290,260],
[285,280,273,261,284,0,289,272,295,284],
[282,287,272,241,271,262,0,254,268,237],
[303,273,292,297,279,279,297,0,288,274],
[270,264,257,283,261,256,283,263,0,254],
[317,313,272,295,291,267,314,277,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,287,257,272,294,272,305,284,284],
[279,0,273,261,291,271,275,277,279,279],
[264,278,0,269,278,288,285,268,280,263],
[294,290,282,0,289,314,313,273,309,303],
[279,260,273,262,0,270,281,276,260,278],
[257,280,263,237,281,0,283,264,275,270],
[279,276,266,238,270,268,0,272,274,273],
[246,274,283,278,275,287,279,0,252,280],
[267,272,271,242,291,276,277,299,0,294],
[267,272,288,248,273,281,278,271,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,275,275,292,255,266,263,266,282],
[266,0,278,288,282,245,268,271,278,282],
[276,273,0,278,275,259,287,277,256,278],
[276,263,273,0,289,276,278,278,273,273],
[259,269,276,262,0,272,274,267,260,297],
[296,306,292,275,279,0,302,290,277,284],
[285,283,264,273,277,249,0,273,253,273],
[288,280,274,273,284,261,278,0,288,290],
[285,273,295,278,291,274,298,263,0,279],
[269,269,273,278,254,267,278,261,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,306,276,288,292,266,296,277,315],
[240,0,266,264,273,288,261,279,236,305],
[245,285,0,235,262,294,255,296,247,288],
[275,287,316,0,288,264,275,293,285,308],
[263,278,289,263,0,288,236,265,284,306],
[259,263,257,287,263,0,277,291,252,287],
[285,290,296,276,315,274,0,303,239,316],
[255,272,255,258,286,260,248,0,248,290],
[274,315,304,266,267,299,312,303,0,330],
[236,246,263,243,245,264,235,261,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,276,262,266,284,262,260,266,276],
[282,0,273,293,301,298,284,280,290,293],
[275,278,0,277,254,267,280,230,267,284],
[289,258,274,0,277,288,272,257,281,289],
[285,250,297,274,0,282,281,259,268,285],
[267,253,284,263,269,0,274,229,253,273],
[289,267,271,279,270,277,0,237,266,292],
[291,271,321,294,292,322,314,0,295,295],
[285,261,284,270,283,298,285,256,0,285],
[275,258,267,262,266,278,259,256,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,285,270,281,278,287,275,294,279],
[277,0,273,270,280,291,277,265,267,277],
[266,278,0,287,291,312,285,273,279,278],
[281,281,264,0,285,290,278,258,272,274],
[270,271,260,266,0,270,274,269,272,280],
[273,260,239,261,281,0,279,275,277,265],
[264,274,266,273,277,272,0,256,291,267],
[276,286,278,293,282,276,295,0,281,270],
[257,284,272,279,279,274,260,270,0,279],
[272,274,273,277,271,286,284,281,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,288,288,257,280,262,288,254,260],
[266,0,279,292,277,300,286,289,279,276],
[263,272,0,272,285,263,283,279,264,258],
[263,259,279,0,275,284,262,266,253,254],
[294,274,266,276,0,280,292,276,278,285],
[271,251,288,267,271,0,270,263,261,279],
[289,265,268,289,259,281,0,254,262,278],
[263,262,272,285,275,288,297,0,244,270],
[297,272,287,298,273,290,289,307,0,293],
[291,275,293,297,266,272,273,281,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,280,286,274,287,277,266,293,256],
[261,0,278,293,243,270,271,257,275,272],
[271,273,0,282,238,258,280,260,261,244],
[265,258,269,0,255,250,259,277,270,272],
[277,308,313,296,0,288,279,289,304,269],
[264,281,293,301,263,0,260,254,284,257],
[274,280,271,292,272,291,0,269,278,261],
[285,294,291,274,262,297,282,0,270,277],
[258,276,290,281,247,267,273,281,0,253],
[295,279,307,279,282,294,290,274,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,272,270,271,279,284,277,290,300],
[272,0,273,275,275,273,280,274,262,289],
[279,278,0,266,281,274,275,266,276,278],
[281,276,285,0,278,278,286,265,267,275],
[280,276,270,273,0,276,277,265,274,278],
[272,278,277,273,275,0,274,261,278,286],
[267,271,276,265,274,277,0,270,280,273],
[274,277,285,286,286,290,281,0,280,287],
[261,289,275,284,277,273,271,271,0,280],
[251,262,273,276,273,265,278,264,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,279,269,279,267,282,290,300,250],
[253,0,272,265,272,273,262,283,284,255],
[272,279,0,277,292,273,295,283,288,270],
[282,286,274,0,285,268,278,306,286,259],
[272,279,259,266,0,278,275,300,282,262],
[284,278,278,283,273,0,268,294,290,273],
[269,289,256,273,276,283,0,301,287,283],
[261,268,268,245,251,257,250,0,280,245],
[251,267,263,265,269,261,264,271,0,239],
[301,296,281,292,289,278,268,306,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,270,275,264,287,278,263,258,263],
[293,0,280,279,280,276,268,274,284,268],
[281,271,0,268,288,272,270,265,272,277],
[276,272,283,0,269,295,293,285,284,264],
[287,271,263,282,0,266,265,248,267,272],
[264,275,279,256,285,0,278,282,259,255],
[273,283,281,258,286,273,0,269,269,261],
[288,277,286,266,303,269,282,0,282,272],
[293,267,279,267,284,292,282,269,0,267],
[288,283,274,287,279,296,290,279,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,301,246,240,273,248,296,261,288],
[316,0,324,272,271,268,282,307,277,283],
[250,227,0,230,230,223,219,249,258,229],
[305,279,321,0,274,286,302,306,289,307],
[311,280,321,277,0,284,275,291,260,295],
[278,283,328,265,267,0,255,313,298,305],
[303,269,332,249,276,296,0,316,272,294],
[255,244,302,245,260,238,235,0,263,280],
[290,274,293,262,291,253,279,288,0,300],
[263,268,322,244,256,246,257,271,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,279,283,283,288,287,270,287,287],
[263,0,288,278,287,285,272,281,293,295],
[272,263,0,286,287,288,281,267,288,299],
[268,273,265,0,286,290,260,271,283,285],
[268,264,264,265,0,278,279,268,282,279],
[263,266,263,261,273,0,267,265,274,286],
[264,279,270,291,272,284,0,275,280,281],
[281,270,284,280,283,286,276,0,317,299],
[264,258,263,268,269,277,271,234,0,279],
[264,256,252,266,272,265,270,252,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,272,282,267,281,275,276,266,264],
[253,0,254,274,280,269,271,289,266,264],
[279,297,0,313,285,274,276,293,297,309],
[269,277,238,0,271,265,258,311,252,267],
[284,271,266,280,0,266,258,302,267,261],
[270,282,277,286,285,0,290,297,298,294],
[276,280,275,293,293,261,0,292,287,260],
[275,262,258,240,249,254,259,0,266,279],
[285,285,254,299,284,253,264,285,0,267],
[287,287,242,284,290,257,291,272,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,263,268,270,274,281,275,265,267],
[283,0,271,292,256,274,273,274,279,276],
[288,280,0,281,288,282,271,272,278,282],
[283,259,270,0,273,263,260,271,270,279],
[281,295,263,278,0,274,275,265,271,283],
[277,277,269,288,277,0,281,277,275,280],
[270,278,280,291,276,270,0,268,268,289],
[276,277,279,280,286,274,283,0,284,273],
[286,272,273,281,280,276,283,267,0,276],
[284,275,269,272,268,271,262,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,139,108,218,166,223,246,112,165],
[363,0,168,227,253,224,281,276,142,197],
[412,383,0,302,384,277,305,332,274,330],
[443,324,249,0,276,246,334,386,247,248],
[333,298,167,275,0,194,279,276,164,161],
[385,327,274,305,357,0,336,329,277,275],
[328,270,246,217,272,215,0,328,191,244],
[305,275,219,165,275,222,223,0,167,220],
[439,409,277,304,387,274,360,384,0,331],
[386,354,221,303,390,276,307,331,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,264,288,300,271,292,282,297,267],
[277,0,293,246,278,269,284,287,309,309],
[287,258,0,255,282,294,270,272,324,324],
[263,305,296,0,292,282,322,280,333,299],
[251,273,269,259,0,241,260,257,258,258],
[280,282,257,269,310,0,277,290,325,302],
[259,267,281,229,291,274,0,272,289,281],
[269,264,279,271,294,261,279,0,317,277],
[254,242,227,218,293,226,262,234,0,251],
[284,242,227,252,293,249,270,274,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,326,264,289,265,307,283,300,271],
[253,0,287,281,254,267,271,248,260,232],
[225,264,0,268,275,280,289,278,284,234],
[287,270,283,0,286,279,282,271,261,227],
[262,297,276,265,0,279,289,270,262,268],
[286,284,271,272,272,0,283,267,274,261],
[244,280,262,269,262,268,0,270,242,244],
[268,303,273,280,281,284,281,0,269,277],
[251,291,267,290,289,277,309,282,0,258],
[280,319,317,324,283,290,307,274,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,303,361,366,337,301,306,296,288],
[306,0,279,334,346,353,310,267,309,246],
[248,272,0,279,322,341,272,293,295,300],
[190,217,272,0,246,298,313,260,219,251],
[185,205,229,305,0,239,255,185,226,230],
[214,198,210,253,312,0,295,253,242,192],
[250,241,279,238,296,256,0,200,255,244],
[245,284,258,291,366,298,351,0,269,310],
[255,242,256,332,325,309,296,282,0,300],
[263,305,251,300,321,359,307,241,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,301,308,294,313,265,277,295,277],
[256,0,258,274,278,300,277,280,294,274],
[250,293,0,279,282,297,268,288,297,272],
[243,277,272,0,278,273,268,277,275,267],
[257,273,269,273,0,282,238,267,293,277],
[238,251,254,278,269,0,255,266,277,279],
[286,274,283,283,313,296,0,283,305,299],
[274,271,263,274,284,285,268,0,292,278],
[256,257,254,276,258,274,246,259,0,248],
[274,277,279,284,274,272,252,273,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,0,184,275,277,276,184,184,184],
[367,0,276,185,367,367,183,183,275,366],
[551,275,0,368,459,459,458,275,366,366],
[367,366,183,0,367,459,366,366,274,366],
[276,184,92,184,0,369,276,184,184,184],
[274,184,92,92,182,0,92,275,275,92],
[275,368,93,185,275,459,0,183,366,368],
[367,368,276,185,367,276,368,0,183,368],
[367,276,185,277,367,276,185,368,0,368],
[367,185,185,185,367,459,183,183,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,289,306,288,271,278,305,301,303],
[256,0,262,298,300,283,282,282,281,309],
[262,289,0,304,322,260,268,294,273,290],
[245,253,247,0,270,263,281,281,287,269],
[263,251,229,281,0,244,262,287,275,270],
[280,268,291,288,307,0,282,307,299,322],
[273,269,283,270,289,269,0,276,283,269],
[246,269,257,270,264,244,275,0,273,248],
[250,270,278,264,276,252,268,278,0,292],
[248,242,261,282,281,229,282,303,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,295,275,303,275,307,327,277,301],
[255,0,294,250,281,278,291,277,264,293],
[256,257,0,240,294,264,303,297,273,273],
[276,301,311,0,309,273,308,349,305,309],
[248,270,257,242,0,245,268,280,257,269],
[276,273,287,278,306,0,311,320,284,298],
[244,260,248,243,283,240,0,293,255,277],
[224,274,254,202,271,231,258,0,262,253],
[274,287,278,246,294,267,296,289,0,291],
[250,258,278,242,282,253,274,298,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,280,279,284,273,273,307,265,278],
[257,0,267,257,286,248,273,276,257,273],
[271,284,0,268,295,271,280,286,271,282],
[272,294,283,0,276,262,262,275,267,276],
[267,265,256,275,0,274,279,282,271,269],
[278,303,280,289,277,0,269,271,280,285],
[278,278,271,289,272,282,0,275,273,285],
[244,275,265,276,269,280,276,0,252,279],
[286,294,280,284,280,271,278,299,0,275],
[273,278,269,275,282,266,266,272,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,289,289,291,284,284,300,275,262],
[274,0,273,284,299,273,271,304,266,272],
[262,278,0,255,286,278,281,283,264,284],
[262,267,296,0,285,291,295,301,276,283],
[260,252,265,266,0,283,284,292,274,258],
[267,278,273,260,268,0,290,297,273,263],
[267,280,270,256,267,261,0,283,278,265],
[251,247,268,250,259,254,268,0,247,251],
[276,285,287,275,277,278,273,304,0,284],
[289,279,267,268,293,288,286,300,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,244,271,248,260,242,261,235,257],
[317,0,279,298,263,281,311,283,271,269],
[307,272,0,297,272,258,291,266,259,263],
[280,253,254,0,270,265,268,265,258,285],
[303,288,279,281,0,275,283,268,284,276],
[291,270,293,286,276,0,270,275,275,254],
[309,240,260,283,268,281,0,268,269,270],
[290,268,285,286,283,276,283,0,286,277],
[316,280,292,293,267,276,282,265,0,277],
[294,282,288,266,275,297,281,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,269,288,261,265,271,261,252,264],
[292,0,281,293,294,272,282,281,270,270],
[282,270,0,303,275,259,267,277,266,268],
[263,258,248,0,279,251,258,265,256,266],
[290,257,276,272,0,258,259,267,252,261],
[286,279,292,300,293,0,278,275,283,264],
[280,269,284,293,292,273,0,269,288,264],
[290,270,274,286,284,276,282,0,267,277],
[299,281,285,295,299,268,263,284,0,285],
[287,281,283,285,290,287,287,274,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,300,273,287,279,281,296,291,282],
[267,0,285,286,288,267,267,276,298,282],
[251,266,0,247,278,266,239,276,265,240],
[278,265,304,0,275,280,273,304,290,275],
[264,263,273,276,0,278,254,296,287,254],
[272,284,285,271,273,0,254,293,272,271],
[270,284,312,278,297,297,0,319,303,276],
[255,275,275,247,255,258,232,0,293,265],
[260,253,286,261,264,279,248,258,0,271],
[269,269,311,276,297,280,275,286,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,254,259,267,281,257,296,275,249],
[280,0,280,278,272,285,301,300,288,280],
[297,271,0,271,277,300,290,292,279,272],
[292,273,280,0,276,284,294,296,260,266],
[284,279,274,275,0,296,269,290,287,272],
[270,266,251,267,255,0,270,282,271,249],
[294,250,261,257,282,281,0,278,263,277],
[255,251,259,255,261,269,273,0,272,254],
[276,263,272,291,264,280,288,279,0,266],
[302,271,279,285,279,302,274,297,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,345,257,236,233,269,266,279,311,239],
[206,0,256,208,174,208,251,204,238,208],
[294,295,0,221,219,252,266,233,254,239],
[315,343,330,0,309,330,285,311,273,300],
[318,377,332,242,0,303,316,282,308,302],
[282,343,299,221,248,0,295,264,357,249],
[285,300,285,266,235,256,0,250,243,257],
[272,347,318,240,269,287,301,0,289,286],
[240,313,297,278,243,194,308,262,0,314],
[312,343,312,251,249,302,294,265,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,256,267,300,271,283,286,296,285],
[267,0,262,275,277,259,272,242,264,261],
[295,289,0,269,282,272,295,276,273,278],
[284,276,282,0,290,283,306,269,285,310],
[251,274,269,261,0,279,293,267,273,292],
[280,292,279,268,272,0,311,278,297,282],
[268,279,256,245,258,240,0,227,258,263],
[265,309,275,282,284,273,324,0,312,300],
[255,287,278,266,278,254,293,239,0,272],
[266,290,273,241,259,269,288,251,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,300,267,285,278,269,289,270,301],
[265,0,303,301,280,278,288,283,291,291],
[251,248,0,255,258,268,249,255,260,257],
[284,250,296,0,268,263,289,259,261,293],
[266,271,293,283,0,286,269,276,274,298],
[273,273,283,288,265,0,261,276,281,294],
[282,263,302,262,282,290,0,276,291,293],
[262,268,296,292,275,275,275,0,273,281],
[281,260,291,290,277,270,260,278,0,287],
[250,260,294,258,253,257,258,270,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,276,283,292,288,275,278,268,280],
[267,0,273,268,261,271,275,280,256,261],
[275,278,0,255,264,272,279,262,266,257],
[268,283,296,0,281,285,277,285,277,279],
[259,290,287,270,0,269,283,276,273,264],
[263,280,279,266,282,0,288,282,273,263],
[276,276,272,274,268,263,0,279,263,267],
[273,271,289,266,275,269,272,0,262,269],
[283,295,285,274,278,278,288,289,0,270],
[271,290,294,272,287,288,284,282,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,273,250,253,293,295,254,254,316],
[276,0,236,282,257,293,283,291,219,301],
[278,315,0,297,238,274,297,349,288,306],
[301,269,254,0,296,287,327,320,256,310],
[298,294,313,255,0,294,291,350,235,298],
[258,258,277,264,257,0,306,310,263,286],
[256,268,254,224,260,245,0,311,220,288],
[297,260,202,231,201,241,240,0,198,235],
[297,332,263,295,316,288,331,353,0,309],
[235,250,245,241,253,265,263,316,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,264,297,267,279,285,297,286,272],
[266,0,281,268,274,284,272,268,278,279],
[287,270,0,307,286,289,290,279,283,286],
[254,283,244,0,244,259,248,258,264,263],
[284,277,265,307,0,291,300,288,285,285],
[272,267,262,292,260,0,255,268,274,271],
[266,279,261,303,251,296,0,289,278,255],
[254,283,272,293,263,283,262,0,282,269],
[265,273,268,287,266,277,273,269,0,276],
[279,272,265,288,266,280,296,282,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,281,267,283,280,281,274,296,288],
[274,0,279,274,277,269,286,281,295,293],
[270,272,0,274,282,260,277,251,292,273],
[284,277,277,0,293,271,291,280,301,284],
[268,274,269,258,0,257,277,274,290,278],
[271,282,291,280,294,0,297,280,299,297],
[270,265,274,260,274,254,0,278,274,270],
[277,270,300,271,277,271,273,0,284,295],
[255,256,259,250,261,252,277,267,0,261],
[263,258,278,267,273,254,281,256,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,255,253,284,262,274,254,262,280],
[301,0,268,250,274,290,278,252,288,286],
[296,283,0,271,282,295,284,268,289,309],
[298,301,280,0,295,284,278,274,291,286],
[267,277,269,256,0,275,274,264,275,291],
[289,261,256,267,276,0,272,254,290,266],
[277,273,267,273,277,279,0,294,263,274],
[297,299,283,277,287,297,257,0,300,306],
[289,263,262,260,276,261,288,251,0,279],
[271,265,242,265,260,285,277,245,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,261,264,262,287,236,263,342,262],
[342,0,262,289,290,284,239,292,313,341],
[290,289,0,289,235,257,285,315,259,285],
[287,262,262,0,184,260,263,344,285,290],
[289,261,316,367,0,286,235,288,315,291],
[264,267,294,291,265,0,240,292,213,265],
[315,312,266,288,316,311,0,238,315,288],
[288,259,236,207,263,259,313,0,286,263],
[209,238,292,266,236,338,236,265,0,262],
[289,210,266,261,260,286,263,288,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,283,280,284,264,308,272,283,265],
[262,0,279,259,247,266,298,253,259,250],
[268,272,0,275,264,285,296,266,271,260],
[271,292,276,0,284,272,287,294,294,282],
[267,304,287,267,0,281,307,279,289,256],
[287,285,266,279,270,0,302,270,274,270],
[243,253,255,264,244,249,0,271,264,259],
[279,298,285,257,272,281,280,0,287,275],
[268,292,280,257,262,277,287,264,0,263],
[286,301,291,269,295,281,292,276,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,281,273,257,288,255,283,281,257],
[286,0,295,272,252,275,270,279,271,280],
[270,256,0,271,252,277,260,272,290,264],
[278,279,280,0,286,282,272,254,280,264],
[294,299,299,265,0,284,292,280,286,288],
[263,276,274,269,267,0,258,256,266,232],
[296,281,291,279,259,293,0,243,256,265],
[268,272,279,297,271,295,308,0,317,294],
[270,280,261,271,265,285,295,234,0,266],
[294,271,287,287,263,319,286,257,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,238,267,262,258,257,244,254,276],
[291,0,272,291,278,301,296,292,305,319],
[313,279,0,291,279,264,271,277,266,298],
[284,260,260,0,285,275,268,277,263,273],
[289,273,272,266,0,284,278,252,273,291],
[293,250,287,276,267,0,265,266,266,277],
[294,255,280,283,273,286,0,268,282,290],
[307,259,274,274,299,285,283,0,276,316],
[297,246,285,288,278,285,269,275,0,297],
[275,232,253,278,260,274,261,235,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,250,289,277,298,250,291,311,293],
[246,0,243,271,260,280,243,277,260,263],
[301,308,0,266,297,307,314,300,284,323],
[262,280,285,0,276,294,245,278,293,296],
[274,291,254,275,0,292,257,267,268,282],
[253,271,244,257,259,0,238,289,248,303],
[301,308,237,306,294,313,0,287,299,302],
[260,274,251,273,284,262,264,0,286,279],
[240,291,267,258,283,303,252,265,0,284],
[258,288,228,255,269,248,249,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,287,275,282,276,299,289,289,273],
[258,0,267,264,264,274,288,283,272,284],
[264,284,0,278,281,257,283,278,267,274],
[276,287,273,0,271,266,299,285,303,291],
[269,287,270,280,0,260,296,266,281,276],
[275,277,294,285,291,0,307,298,306,305],
[252,263,268,252,255,244,0,276,267,267],
[262,268,273,266,285,253,275,0,271,289],
[262,279,284,248,270,245,284,280,0,268],
[278,267,277,260,275,246,284,262,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,258,279,247,246,299,266,254,258],
[285,0,272,240,245,262,304,316,261,262],
[293,279,0,320,291,319,341,286,316,233],
[272,311,231,0,236,264,306,294,268,262],
[304,306,260,315,0,263,332,294,272,241],
[305,289,232,287,288,0,285,289,263,254],
[252,247,210,245,219,266,0,263,208,232],
[285,235,265,257,257,262,288,0,271,213],
[297,290,235,283,279,288,343,280,0,300],
[293,289,318,289,310,297,319,338,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,314,294,259,310,296,301,288,305],
[281,0,308,261,279,294,281,286,294,327],
[237,243,0,253,233,245,292,275,320,251],
[257,290,298,0,223,287,320,277,287,296],
[292,272,318,328,0,293,290,348,318,294],
[241,257,306,264,258,0,283,283,304,284],
[255,270,259,231,261,268,0,303,275,284],
[250,265,276,274,203,268,248,0,279,269],
[263,257,231,264,233,247,276,272,0,273],
[246,224,300,255,257,267,267,282,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,267,259,287,263,283,283,255,259],
[307,0,284,265,300,280,293,263,265,311],
[284,267,0,283,280,270,300,272,244,294],
[292,286,268,0,296,275,288,270,277,284],
[264,251,271,255,0,243,274,231,261,271],
[288,271,281,276,308,0,302,248,244,300],
[268,258,251,263,277,249,0,228,263,250],
[268,288,279,281,320,303,323,0,310,289],
[296,286,307,274,290,307,288,241,0,305],
[292,240,257,267,280,251,301,262,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,379,285,407,407,264,283,308,428,356],
[172,0,267,361,361,290,167,360,310,407],
[266,284,0,384,386,363,283,337,358,308],
[144,190,167,0,238,168,95,216,239,288],
[144,190,165,313,0,193,189,191,262,239],
[287,261,188,383,358,0,260,214,310,260],
[268,384,268,456,362,291,0,290,337,384],
[243,191,214,335,360,337,261,0,337,309],
[123,241,193,312,289,241,214,214,0,287],
[195,144,243,263,312,291,167,242,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,316,308,241,325,211,267,252,256],
[261,0,291,272,247,300,253,273,232,206],
[235,260,0,287,253,306,265,289,268,250],
[243,279,264,0,251,323,270,297,272,259],
[310,304,298,300,0,343,225,310,264,286],
[226,251,245,228,208,0,218,251,220,225],
[340,298,286,281,326,333,0,306,282,269],
[284,278,262,254,241,300,245,0,238,215],
[299,319,283,279,287,331,269,313,0,226],
[295,345,301,292,265,326,282,336,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,276,290,273,290,267,249,275,295],
[268,0,276,278,269,279,262,265,267,292],
[275,275,0,270,300,274,257,282,257,304],
[261,273,281,0,272,273,260,272,256,284],
[278,282,251,279,0,275,281,277,266,309],
[261,272,277,278,276,0,266,278,254,272],
[284,289,294,291,270,285,0,265,274,281],
[302,286,269,279,274,273,286,0,278,301],
[276,284,294,295,285,297,277,273,0,286],
[256,259,247,267,242,279,270,250,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,379,260,272,257,226,209,184,241],
[287,0,270,273,252,220,188,186,183,220],
[172,281,0,190,204,223,276,208,189,209],
[291,278,361,0,232,204,275,258,272,209],
[279,299,347,319,0,280,331,298,243,279],
[294,331,328,347,271,0,325,261,256,296],
[325,363,275,276,220,226,0,226,205,209],
[342,365,343,293,253,290,325,0,307,290],
[367,368,362,279,308,295,346,244,0,280],
[310,331,342,342,272,255,342,261,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,267,260,270,280,267,298,290,273],
[289,0,279,273,270,289,268,292,264,297],
[284,272,0,266,277,270,277,277,282,297],
[291,278,285,0,275,307,292,302,294,317],
[281,281,274,276,0,277,284,299,305,296],
[271,262,281,244,274,0,275,278,283,315],
[284,283,274,259,267,276,0,309,268,298],
[253,259,274,249,252,273,242,0,262,284],
[261,287,269,257,246,268,283,289,0,296],
[278,254,254,234,255,236,253,267,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,293,268,260,246,267,254,302,278],
[311,0,302,275,262,282,271,257,285,264],
[258,249,0,245,248,244,276,232,268,241],
[283,276,306,0,253,244,269,247,281,260],
[291,289,303,298,0,288,312,273,308,284],
[305,269,307,307,263,0,278,258,297,287],
[284,280,275,282,239,273,0,282,297,250],
[297,294,319,304,278,293,269,0,295,300],
[249,266,283,270,243,254,254,256,0,247],
[273,287,310,291,267,264,301,251,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,293,303,264,273,276,281,287,253],
[304,0,301,277,295,306,297,263,281,291],
[258,250,0,273,281,223,261,268,301,267],
[248,274,278,0,303,255,271,276,295,258],
[287,256,270,248,0,245,271,266,283,248],
[278,245,328,296,306,0,285,297,323,265],
[275,254,290,280,280,266,0,252,304,279],
[270,288,283,275,285,254,299,0,270,290],
[264,270,250,256,268,228,247,281,0,257],
[298,260,284,293,303,286,272,261,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,283,276,274,284,282,268,273,273],
[285,0,291,294,290,277,276,274,269,280],
[268,260,0,272,276,266,280,279,262,269],
[275,257,279,0,278,258,277,263,260,264],
[277,261,275,273,0,273,279,272,277,271],
[267,274,285,293,278,0,292,277,269,266],
[269,275,271,274,272,259,0,277,262,268],
[283,277,272,288,279,274,274,0,271,280],
[278,282,289,291,274,282,289,280,0,273],
[278,271,282,287,280,285,283,271,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,281,271,282,288,262,264,275,284],
[273,0,270,274,263,264,260,258,270,279],
[270,281,0,285,256,264,276,280,269,288],
[280,277,266,0,266,287,258,256,279,285],
[269,288,295,285,0,291,284,287,288,293],
[263,287,287,264,260,0,257,274,278,279],
[289,291,275,293,267,294,0,274,284,290],
[287,293,271,295,264,277,277,0,287,283],
[276,281,282,272,263,273,267,264,0,282],
[267,272,263,266,258,272,261,268,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,270,276,271,258,283,284,281,274],
[290,0,262,254,256,248,256,247,255,273],
[281,289,0,255,251,280,309,286,290,287],
[275,297,296,0,277,280,305,303,298,293],
[280,295,300,274,0,254,313,299,269,296],
[293,303,271,271,297,0,299,287,285,292],
[268,295,242,246,238,252,0,264,249,244],
[267,304,265,248,252,264,287,0,292,279],
[270,296,261,253,282,266,302,259,0,255],
[277,278,264,258,255,259,307,272,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,244,299,257,266,264,271,304,286],
[279,0,250,280,268,276,281,273,276,311],
[307,301,0,276,261,255,263,280,274,221],
[252,271,275,0,288,271,260,285,282,258],
[294,283,290,263,0,274,272,324,294,276],
[285,275,296,280,277,0,268,293,280,251],
[287,270,288,291,279,283,0,279,295,275],
[280,278,271,266,227,258,272,0,290,237],
[247,275,277,269,257,271,256,261,0,258],
[265,240,330,293,275,300,276,314,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,280,248,270,238,256,257,260,267],
[292,0,296,279,269,269,284,276,296,263],
[271,255,0,246,273,269,251,267,263,287],
[303,272,305,0,272,239,265,275,285,269],
[281,282,278,279,0,250,251,272,281,282],
[313,282,282,312,301,0,280,279,287,254],
[295,267,300,286,300,271,0,267,284,284],
[294,275,284,276,279,272,284,0,273,271],
[291,255,288,266,270,264,267,278,0,259],
[284,288,264,282,269,297,267,280,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,276,271,286,297,278,276,287,287],
[272,0,286,288,269,296,289,274,291,293],
[275,265,0,273,282,294,287,283,265,277],
[280,263,278,0,275,294,276,293,291,292],
[265,282,269,276,0,273,270,268,280,285],
[254,255,257,257,278,0,250,253,256,263],
[273,262,264,275,281,301,0,264,283,283],
[275,277,268,258,283,298,287,0,284,299],
[264,260,286,260,271,295,268,267,0,283],
[264,258,274,259,266,288,268,252,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,283,270,250,276,267,282,281,288],
[286,0,289,271,277,283,281,269,291,293],
[268,262,0,244,255,252,247,271,263,269],
[281,280,307,0,269,280,281,284,299,282],
[301,274,296,282,0,273,290,276,299,289],
[275,268,299,271,278,0,276,278,305,280],
[284,270,304,270,261,275,0,274,295,284],
[269,282,280,267,275,273,277,0,277,270],
[270,260,288,252,252,246,256,274,0,275],
[263,258,282,269,262,271,267,281,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,269,226,277,248,241,248,257,235],
[309,0,274,288,304,267,260,270,275,283],
[282,277,0,270,281,302,286,272,277,285],
[325,263,281,0,313,272,270,287,256,293],
[274,247,270,238,0,248,249,231,252,254],
[303,284,249,279,303,0,292,268,278,278],
[310,291,265,281,302,259,0,246,254,278],
[303,281,279,264,320,283,305,0,259,281],
[294,276,274,295,299,273,297,292,0,266],
[316,268,266,258,297,273,273,270,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,277,266,287,296,281,288,285,267],
[292,0,276,283,268,281,297,280,287,279],
[274,275,0,267,267,271,296,274,281,274],
[285,268,284,0,283,286,290,268,289,270],
[264,283,284,268,0,269,294,286,274,268],
[255,270,280,265,282,0,288,266,274,258],
[270,254,255,261,257,263,0,270,264,281],
[263,271,277,283,265,285,281,0,295,276],
[266,264,270,262,277,277,287,256,0,274],
[284,272,277,281,283,293,270,275,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,255,255,270,281,285,271,277,278],
[292,0,282,273,288,266,296,280,272,285],
[296,269,0,266,274,281,288,264,274,268],
[296,278,285,0,271,289,306,300,287,303],
[281,263,277,280,0,271,292,289,271,287],
[270,285,270,262,280,0,289,283,271,277],
[266,255,263,245,259,262,0,274,263,274],
[280,271,287,251,262,268,277,0,271,276],
[274,279,277,264,280,280,288,280,0,272],
[273,266,283,248,264,274,277,275,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,302,274,285,268,318,290,279,276],
[255,0,299,301,256,274,292,294,252,259],
[249,252,0,285,257,272,269,269,262,260],
[277,250,266,0,262,271,294,263,271,281],
[266,295,294,289,0,265,302,263,278,290],
[283,277,279,280,286,0,310,262,280,296],
[233,259,282,257,249,241,0,255,243,251],
[261,257,282,288,288,289,296,0,255,260],
[272,299,289,280,273,271,308,296,0,251],
[275,292,291,270,261,255,300,291,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,303,295,277,273,296,327,318,287],
[267,0,283,267,255,262,283,302,281,260],
[248,268,0,271,255,290,290,302,270,261],
[256,284,280,0,246,274,270,281,270,242],
[274,296,296,305,0,280,289,311,298,257],
[278,289,261,277,271,0,279,283,296,274],
[255,268,261,281,262,272,0,287,289,272],
[224,249,249,270,240,268,264,0,240,251],
[233,270,281,281,253,255,262,311,0,230],
[264,291,290,309,294,277,279,300,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,279,250,266,278,270,278,295,281],
[268,0,277,273,288,246,284,280,282,274],
[272,274,0,267,276,268,303,274,298,278],
[301,278,284,0,294,251,278,283,299,275],
[285,263,275,257,0,246,275,271,264,290],
[273,305,283,300,305,0,280,289,304,286],
[281,267,248,273,276,271,0,265,273,286],
[273,271,277,268,280,262,286,0,282,293],
[256,269,253,252,287,247,278,269,0,271],
[270,277,273,276,261,265,265,258,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,298,272,274,272,272,296,256,263],
[287,0,278,287,276,287,276,282,270,252],
[253,273,0,261,268,243,235,244,248,245],
[279,264,290,0,271,263,261,273,263,257],
[277,275,283,280,0,278,280,283,271,242],
[279,264,308,288,273,0,279,278,289,242],
[279,275,316,290,271,272,0,267,280,248],
[255,269,307,278,268,273,284,0,251,259],
[295,281,303,288,280,262,271,300,0,283],
[288,299,306,294,309,309,303,292,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,245,270,253,284,253,260,263,265],
[281,0,273,286,278,284,272,274,282,281],
[306,278,0,265,275,289,285,274,285,289],
[281,265,286,0,262,278,272,272,277,275],
[298,273,276,289,0,288,279,278,277,270],
[267,267,262,273,263,0,259,250,276,257],
[298,279,266,279,272,292,0,277,276,285],
[291,277,277,279,273,301,274,0,283,294],
[288,269,266,274,274,275,275,268,0,290],
[286,270,262,276,281,294,266,257,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,255,280,269,266,274,261,273,287],
[285,0,302,302,279,268,252,310,282,300],
[296,249,0,296,303,294,269,283,269,290],
[271,249,255,0,250,265,266,272,280,274],
[282,272,248,301,0,272,252,274,275,295],
[285,283,257,286,279,0,280,288,251,285],
[277,299,282,285,299,271,0,298,278,318],
[290,241,268,279,277,263,253,0,257,307],
[278,269,282,271,276,300,273,294,0,314],
[264,251,261,277,256,266,233,244,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,271,250,263,261,276,259,263,272],
[291,0,303,273,257,268,277,267,285,293],
[280,248,0,246,227,248,250,237,256,261],
[301,278,305,0,254,285,275,253,273,269],
[288,294,324,297,0,283,291,251,310,275],
[290,283,303,266,268,0,284,277,307,273],
[275,274,301,276,260,267,0,251,291,267],
[292,284,314,298,300,274,300,0,305,300],
[288,266,295,278,241,244,260,246,0,268],
[279,258,290,282,276,278,284,251,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,290,284,257,275,275,290,279,275],
[259,0,262,275,267,264,267,276,267,266],
[261,289,0,278,279,287,273,298,286,281],
[267,276,273,0,258,283,281,287,275,275],
[294,284,272,293,0,271,274,304,275,294],
[276,287,264,268,280,0,283,303,268,276],
[276,284,278,270,277,268,0,278,263,278],
[261,275,253,264,247,248,273,0,258,256],
[272,284,265,276,276,283,288,293,0,280],
[276,285,270,276,257,275,273,295,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,270,282,273,297,282,286,288,278],
[263,0,268,280,272,273,270,260,274,270],
[281,283,0,288,298,281,269,285,279,285],
[269,271,263,0,259,273,261,267,259,264],
[278,279,253,292,0,275,273,259,283,263],
[254,278,270,278,276,0,253,256,268,261],
[269,281,282,290,278,298,0,280,295,287],
[265,291,266,284,292,295,271,0,286,272],
[263,277,272,292,268,283,256,265,0,262],
[273,281,266,287,288,290,264,279,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,271,284,246,274,271,285,271,280],
[274,0,264,287,278,246,277,285,262,279],
[280,287,0,274,264,262,251,283,257,251],
[267,264,277,0,269,249,251,284,262,249],
[305,273,287,282,0,258,266,275,277,263],
[277,305,289,302,293,0,268,280,286,266],
[280,274,300,300,285,283,0,293,288,284],
[266,266,268,267,276,271,258,0,278,262],
[280,289,294,289,274,265,263,273,0,269],
[271,272,300,302,288,285,267,289,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,269,280,267,285,298,285,261,286],
[260,0,275,268,272,269,259,270,244,295],
[282,276,0,279,268,236,270,268,257,247],
[271,283,272,0,287,291,295,285,277,283],
[284,279,283,264,0,280,277,284,208,280],
[266,282,315,260,271,0,288,233,271,274],
[253,292,281,256,274,263,0,272,266,263],
[266,281,283,266,267,318,279,0,235,257],
[290,307,294,274,343,280,285,316,0,283],
[265,256,304,268,271,277,288,294,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,269,314,271,280,314,288,300,262],
[262,0,255,269,268,249,294,266,290,263],
[282,296,0,294,291,275,300,273,281,279],
[237,282,257,0,257,259,265,266,264,257],
[280,283,260,294,0,267,284,260,279,253],
[271,302,276,292,284,0,308,275,280,269],
[237,257,251,286,267,243,0,254,269,231],
[263,285,278,285,291,276,297,0,282,253],
[251,261,270,287,272,271,282,269,0,252],
[289,288,272,294,298,282,320,298,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,245,283,272,269,270,275,263,241],
[295,0,269,280,279,275,290,253,308,267],
[306,282,0,296,294,277,290,280,291,265],
[268,271,255,0,278,259,257,269,281,255],
[279,272,257,273,0,279,279,258,284,276],
[282,276,274,292,272,0,263,268,293,256],
[281,261,261,294,272,288,0,288,284,281],
[276,298,271,282,293,283,263,0,288,252],
[288,243,260,270,267,258,267,263,0,262],
[310,284,286,296,275,295,270,299,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,280,256,269,279,265,259,266,261],
[305,0,288,262,283,292,288,271,260,300],
[271,263,0,279,286,268,261,256,263,269],
[295,289,272,0,284,265,280,267,278,278],
[282,268,265,267,0,255,262,249,264,273],
[272,259,283,286,296,0,285,258,280,264],
[286,263,290,271,289,266,0,282,266,283],
[292,280,295,284,302,293,269,0,274,272],
[285,291,288,273,287,271,285,277,0,281],
[290,251,282,273,278,287,268,279,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,299,274,283,297,294,283,276,259],
[274,0,282,289,282,280,286,275,277,275],
[252,269,0,258,265,275,258,266,272,252],
[277,262,293,0,268,274,294,277,280,268],
[268,269,286,283,0,281,296,292,283,276],
[254,271,276,277,270,0,270,272,262,266],
[257,265,293,257,255,281,0,281,267,253],
[268,276,285,274,259,279,270,0,275,251],
[275,274,279,271,268,289,284,276,0,276],
[292,276,299,283,275,285,298,300,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,299,248,270,270,270,260,234,270],
[283,0,276,242,256,283,259,264,257,265],
[252,275,0,259,264,289,264,251,270,277],
[303,309,292,0,280,285,286,272,276,264],
[281,295,287,271,0,277,267,260,273,281],
[281,268,262,266,274,0,276,246,261,271],
[281,292,287,265,284,275,0,281,264,278],
[291,287,300,279,291,305,270,0,276,281],
[317,294,281,275,278,290,287,275,0,299],
[281,286,274,287,270,280,273,270,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,268,265,273,278,265,267,274,266],
[276,0,289,281,267,282,260,269,272,276],
[283,262,0,285,286,290,280,279,282,276],
[286,270,266,0,261,274,257,286,262,286],
[278,284,265,290,0,282,274,280,274,278],
[273,269,261,277,269,0,258,278,268,275],
[286,291,271,294,277,293,0,284,269,274],
[284,282,272,265,271,273,267,0,278,268],
[277,279,269,289,277,283,282,273,0,272],
[285,275,275,265,273,276,277,283,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,299,329,164,358,304,247,299,275],
[277,0,331,276,220,331,306,220,327,304],
[252,220,0,282,253,305,309,250,274,334],
[222,275,269,0,303,301,253,250,274,249],
[387,331,298,248,0,327,304,247,299,301],
[193,220,246,250,224,0,252,224,192,252],
[247,245,242,298,247,299,0,302,216,300],
[304,331,301,301,304,327,249,0,299,276],
[252,224,277,277,252,359,335,252,0,363],
[276,247,217,302,250,299,251,275,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,266,281,289,288,315,291,293,287],
[277,0,247,289,286,280,299,284,264,283],
[285,304,0,294,298,312,310,296,274,308],
[270,262,257,0,252,271,285,272,266,265],
[262,265,253,299,0,288,301,292,303,294],
[263,271,239,280,263,0,274,268,280,261],
[236,252,241,266,250,277,0,270,269,255],
[260,267,255,279,259,283,281,0,265,256],
[258,287,277,285,248,271,282,286,0,284],
[264,268,243,286,257,290,296,295,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,282,281,293,301,286,283,281,279],
[280,0,279,282,305,294,275,282,280,275],
[269,272,0,280,283,281,275,250,258,250],
[270,269,271,0,274,293,271,278,261,260],
[258,246,268,277,0,290,277,263,263,275],
[250,257,270,258,261,0,255,238,247,249],
[265,276,276,280,274,296,0,271,267,277],
[268,269,301,273,288,313,280,0,271,288],
[270,271,293,290,288,304,284,280,0,264],
[272,276,301,291,276,302,274,263,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,272,298,263,278,305,297,269,256],
[263,0,277,268,249,275,294,277,271,276],
[279,274,0,267,273,275,304,283,290,275],
[253,283,284,0,274,285,288,284,284,268],
[288,302,278,277,0,249,300,268,277,273],
[273,276,276,266,302,0,295,284,276,255],
[246,257,247,263,251,256,0,263,254,246],
[254,274,268,267,283,267,288,0,272,274],
[282,280,261,267,274,275,297,279,0,275],
[295,275,276,283,278,296,305,277,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,261,277,278,257,260,273,290,273],
[240,0,261,248,264,261,260,263,273,273],
[290,290,0,267,296,289,283,281,288,284],
[274,303,284,0,297,266,275,270,317,290],
[273,287,255,254,0,268,269,244,289,261],
[294,290,262,285,283,0,285,303,311,284],
[291,291,268,276,282,266,0,286,296,274],
[278,288,270,281,307,248,265,0,290,292],
[261,278,263,234,262,240,255,261,0,247],
[278,278,267,261,290,267,277,259,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,283,307,276,274,291,283,278,288],
[269,0,300,285,287,283,271,259,274,286],
[268,251,0,274,258,275,287,237,280,276],
[244,266,277,0,255,286,274,265,256,277],
[275,264,293,296,0,287,275,257,290,283],
[277,268,276,265,264,0,274,273,275,275],
[260,280,264,277,276,277,0,268,271,271],
[268,292,314,286,294,278,283,0,285,298],
[273,277,271,295,261,276,280,266,0,281],
[263,265,275,274,268,276,280,253,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,276,281,276,299,282,296,310,258],
[279,0,284,285,281,328,320,270,289,294],
[275,267,0,266,235,276,285,280,239,278],
[270,266,285,0,273,287,319,298,268,272],
[275,270,316,278,0,314,317,294,299,276],
[252,223,275,264,237,0,277,262,248,245],
[269,231,266,232,234,274,0,280,257,239],
[255,281,271,253,257,289,271,0,236,253],
[241,262,312,283,252,303,294,315,0,268],
[293,257,273,279,275,306,312,298,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,288,231,274,243,252,280,243,262],
[325,0,321,282,294,272,290,310,298,303],
[263,230,0,227,257,245,268,274,229,277],
[320,269,324,0,310,284,280,333,287,301],
[277,257,294,241,0,246,263,301,247,284],
[308,279,306,267,305,0,284,313,263,296],
[299,261,283,271,288,267,0,316,248,276],
[271,241,277,218,250,238,235,0,243,264],
[308,253,322,264,304,288,303,308,0,289],
[289,248,274,250,267,255,275,287,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,276,276,264,281,305,292,273,294],
[277,0,285,295,262,259,282,276,272,282],
[275,266,0,295,246,269,283,282,259,248],
[275,256,256,0,258,260,287,258,252,260],
[287,289,305,293,0,252,291,271,256,281],
[270,292,282,291,299,0,322,289,290,278],
[246,269,268,264,260,229,0,267,259,257],
[259,275,269,293,280,262,284,0,275,274],
[278,279,292,299,295,261,292,276,0,281],
[257,269,303,291,270,273,294,277,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,223,287,264,344,312,267,311,343],
[272,0,275,333,250,329,286,299,266,282],
[328,276,0,311,278,340,264,244,277,341],
[264,218,240,0,265,327,283,234,247,310],
[287,301,273,286,0,316,335,316,312,316],
[207,222,211,224,235,0,286,253,253,329],
[239,265,287,268,216,265,0,236,296,327],
[284,252,307,317,235,298,315,0,330,300],
[240,285,274,304,239,298,255,221,0,347],
[208,269,210,241,235,222,224,251,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,300,229,308,279,316,318,305,315],
[273,0,261,232,254,260,282,317,282,269],
[251,290,0,222,298,296,285,272,312,291],
[322,319,329,0,332,306,311,307,325,268],
[243,297,253,219,0,271,259,267,301,317],
[272,291,255,245,280,0,275,279,319,288],
[235,269,266,240,292,276,0,284,266,306],
[233,234,279,244,284,272,267,0,270,270],
[246,269,239,226,250,232,285,281,0,273],
[236,282,260,283,234,263,245,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,294,269,291,315,308,302,309,299],
[235,0,266,231,256,241,269,293,260,319],
[257,285,0,290,277,261,307,266,247,296],
[282,320,261,0,258,323,275,294,258,334],
[260,295,274,293,0,319,303,300,295,312],
[236,310,290,228,232,0,295,287,297,287],
[243,282,244,276,248,256,0,246,241,320],
[249,258,285,257,251,264,305,0,244,285],
[242,291,304,293,256,254,310,307,0,323],
[252,232,255,217,239,264,231,266,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,319,341,204,306,286,248,247,266],
[270,0,287,284,190,291,268,286,232,305],
[232,264,0,248,209,307,287,230,249,244],
[210,267,303,0,227,345,304,250,268,264],
[347,361,342,324,0,304,323,228,305,324],
[245,260,244,206,247,0,298,190,169,226],
[265,283,264,247,228,253,0,230,253,266],
[303,265,321,301,323,361,321,0,305,243],
[304,319,302,283,246,382,298,246,0,263],
[285,246,307,287,227,325,285,308,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,280,280,290,285,285,275,274,262],
[293,0,301,282,282,285,276,276,286,272],
[271,250,0,276,270,261,288,253,273,259],
[271,269,275,0,283,272,272,276,259,275],
[261,269,281,268,0,251,284,265,272,264],
[266,266,290,279,300,0,295,277,279,280],
[266,275,263,279,267,256,0,269,264,263],
[276,275,298,275,286,274,282,0,268,273],
[277,265,278,292,279,272,287,283,0,274],
[289,279,292,276,287,271,288,278,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,279,277,288,269,250,253,263,282],
[280,0,269,246,300,281,275,289,290,271],
[272,282,0,310,283,280,290,294,291,271],
[274,305,241,0,276,260,278,268,285,292],
[263,251,268,275,0,274,275,267,272,252],
[282,270,271,291,277,0,297,285,283,291],
[301,276,261,273,276,254,0,278,270,260],
[298,262,257,283,284,266,273,0,279,280],
[288,261,260,266,279,268,281,272,0,272],
[269,280,280,259,299,260,291,271,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,281,269,277,270,285,266,266,264],
[291,0,294,267,251,298,290,283,299,298],
[270,257,0,282,257,256,265,278,256,269],
[282,284,269,0,284,287,306,265,292,270],
[274,300,294,267,0,312,292,304,296,304],
[281,253,295,264,239,0,259,270,275,278],
[266,261,286,245,259,292,0,282,281,281],
[285,268,273,286,247,281,269,0,275,284],
[285,252,295,259,255,276,270,276,0,293],
[287,253,282,281,247,273,270,267,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,259,262,282,283,282,264,283,275],
[289,0,282,269,297,282,288,276,280,279],
[292,269,0,288,288,295,294,270,282,282],
[289,282,263,0,285,290,294,259,280,275],
[269,254,263,266,0,271,285,270,283,278],
[268,269,256,261,280,0,270,265,277,267],
[269,263,257,257,266,281,0,270,273,271],
[287,275,281,292,281,286,281,0,282,293],
[268,271,269,271,268,274,278,269,0,277],
[276,272,269,276,273,284,280,258,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,257,278,278,280,292,270,301,274],
[265,0,266,276,272,267,268,265,262,277],
[294,285,0,281,290,281,270,280,282,282],
[273,275,270,0,279,291,295,263,291,255],
[273,279,261,272,0,280,279,260,283,276],
[271,284,270,260,271,0,278,274,285,281],
[259,283,281,256,272,273,0,257,278,270],
[281,286,271,288,291,277,294,0,295,283],
[250,289,269,260,268,266,273,256,0,270],
[277,274,269,296,275,270,281,268,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,244,243,274,274,250,247,249,275],
[302,0,269,262,287,279,264,268,276,286],
[307,282,0,264,283,255,265,291,276,276],
[308,289,287,0,286,296,257,279,269,306],
[277,264,268,265,0,285,239,240,267,274],
[277,272,296,255,266,0,269,273,248,305],
[301,287,286,294,312,282,0,290,270,307],
[304,283,260,272,311,278,261,0,255,317],
[302,275,275,282,284,303,281,296,0,326],
[276,265,275,245,277,246,244,234,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,289,288,271,284,282,272,303,297],
[256,0,279,281,264,274,269,261,280,266],
[262,272,0,279,270,260,272,261,273,268],
[263,270,272,0,266,251,261,250,277,259],
[280,287,281,285,0,250,268,264,265,282],
[267,277,291,300,301,0,279,281,300,294],
[269,282,279,290,283,272,0,273,285,269],
[279,290,290,301,287,270,278,0,282,288],
[248,271,278,274,286,251,266,269,0,272],
[254,285,283,292,269,257,282,263,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,274,216,241,336,182,185,302,183],
[310,0,307,245,336,308,153,276,272,214],
[277,244,0,278,275,277,213,279,274,152],
[335,306,273,0,241,335,212,275,241,182],
[310,215,276,310,0,370,216,278,275,121],
[215,243,274,216,181,0,152,183,243,148],
[369,398,338,339,335,399,0,246,334,277],
[366,275,272,276,273,368,305,0,301,214],
[249,279,277,310,276,308,217,250,0,215],
[368,337,399,369,430,403,274,337,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,275,259,232,226,241,251,252,212],
[289,0,288,260,273,249,269,279,277,269],
[276,263,0,284,257,266,235,261,263,260],
[292,291,267,0,270,276,246,273,298,264],
[319,278,294,281,0,255,273,284,257,260],
[325,302,285,275,296,0,298,296,285,292],
[310,282,316,305,278,253,0,291,326,278],
[300,272,290,278,267,255,260,0,278,271],
[299,274,288,253,294,266,225,273,0,253],
[339,282,291,287,291,259,273,280,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,278,276,273,265,298,288,280,268],
[272,0,266,252,242,237,302,289,292,264],
[273,285,0,274,251,277,303,279,285,262],
[275,299,277,0,297,272,301,313,302,287],
[278,309,300,254,0,285,325,291,322,270],
[286,314,274,279,266,0,310,330,320,272],
[253,249,248,250,226,241,0,275,295,228],
[263,262,272,238,260,221,276,0,272,254],
[271,259,266,249,229,231,256,279,0,251],
[283,287,289,264,281,279,323,297,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,289,269,268,238,265,257,278,240],
[273,0,252,246,245,231,244,227,232,248],
[262,299,0,284,265,245,265,250,247,256],
[282,305,267,0,274,268,259,291,241,268],
[283,306,286,277,0,247,297,253,250,273],
[313,320,306,283,304,0,319,281,249,297],
[286,307,286,292,254,232,0,269,266,308],
[294,324,301,260,298,270,282,0,274,292],
[273,319,304,310,301,302,285,277,0,281],
[311,303,295,283,278,254,243,259,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,293,281,288,298,292,297,293,239],
[260,0,293,301,242,271,263,267,268,255],
[258,258,0,295,245,245,243,231,271,244],
[270,250,256,0,262,292,258,268,262,246],
[263,309,306,289,0,295,293,285,315,291],
[253,280,306,259,256,0,258,255,249,258],
[259,288,308,293,258,293,0,261,278,275],
[254,284,320,283,266,296,290,0,255,268],
[258,283,280,289,236,302,273,296,0,251],
[312,296,307,305,260,293,276,283,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,271,298,276,307,274,275,274,254],
[256,0,271,260,258,274,274,273,257,257],
[280,280,0,270,280,283,278,280,273,270],
[253,291,281,0,255,277,279,277,292,263],
[275,293,271,296,0,301,287,255,258,278],
[244,277,268,274,250,0,253,271,292,270],
[277,277,273,272,264,298,0,277,258,266],
[276,278,271,274,296,280,274,0,277,260],
[277,294,278,259,293,259,293,274,0,265],
[297,294,281,288,273,281,285,291,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,266,259,259,247,286,273,280,280],
[279,0,265,289,278,266,290,274,292,266],
[285,286,0,276,265,261,285,268,268,275],
[292,262,275,0,263,271,297,274,259,275],
[292,273,286,288,0,269,280,269,274,304],
[304,285,290,280,282,0,276,274,277,277],
[265,261,266,254,271,275,0,276,264,277],
[278,277,283,277,282,277,275,0,275,276],
[271,259,283,292,277,274,287,276,0,270],
[271,285,276,276,247,274,274,275,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,319,295,288,274,291,297,283,276],
[249,0,277,287,266,261,285,300,279,286],
[232,274,0,268,271,259,254,279,268,252],
[256,264,283,0,275,279,267,278,279,268],
[263,285,280,276,0,258,267,302,281,270],
[277,290,292,272,293,0,282,299,258,286],
[260,266,297,284,284,269,0,295,282,252],
[254,251,272,273,249,252,256,0,258,254],
[268,272,283,272,270,293,269,293,0,267],
[275,265,299,283,281,265,299,297,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,271,311,279,280,298,279,290,272],
[264,0,270,282,259,274,303,270,256,266],
[280,281,0,272,275,279,298,271,245,293],
[240,269,279,0,252,272,284,261,245,242],
[272,292,276,299,0,299,308,276,258,282],
[271,277,272,279,252,0,264,255,254,255],
[253,248,253,267,243,287,0,236,264,258],
[272,281,280,290,275,296,315,0,277,287],
[261,295,306,306,293,297,287,274,0,277],
[279,285,258,309,269,296,293,264,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,352,277,334,370,294,267,356,365],
[219,0,321,201,259,300,249,185,270,271],
[199,230,0,214,267,252,210,230,243,294],
[274,350,337,0,367,326,295,329,307,377],
[217,292,284,184,0,288,271,196,259,292],
[181,251,299,225,263,0,276,253,238,302],
[257,302,341,256,280,275,0,296,291,339],
[284,366,321,222,355,298,255,0,243,344],
[195,281,308,244,292,313,260,308,0,306],
[186,280,257,174,259,249,212,207,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,272,240,256,269,233,268,242,230],
[279,0,302,270,275,273,242,265,267,253],
[279,249,0,269,253,246,245,286,238,259],
[311,281,282,0,264,300,276,313,270,298],
[295,276,298,287,0,294,270,306,244,269],
[282,278,305,251,257,0,245,283,237,265],
[318,309,306,275,281,306,0,315,286,251],
[283,286,265,238,245,268,236,0,249,237],
[309,284,313,281,307,314,265,302,0,286],
[321,298,292,253,282,286,300,314,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,260,275,251,260,264,258,274,241],
[296,0,284,302,277,294,285,272,272,269],
[291,267,0,287,268,278,281,272,270,282],
[276,249,264,0,261,259,258,249,263,261],
[300,274,283,290,0,292,280,287,279,295],
[291,257,273,292,259,0,266,275,263,274],
[287,266,270,293,271,285,0,259,250,269],
[293,279,279,302,264,276,292,0,286,259],
[277,279,281,288,272,288,301,265,0,273],
[310,282,269,290,256,277,282,292,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,268,268,284,219,287,268,200,235],
[266,0,253,317,248,236,269,352,266,233],
[283,298,0,282,266,268,203,320,232,231],
[283,234,269,0,251,187,221,305,187,268],
[267,303,285,300,0,283,286,317,265,219],
[332,315,283,364,268,0,318,383,250,316],
[264,282,348,330,265,233,0,318,215,281],
[283,199,231,246,234,168,233,0,219,196],
[351,285,319,364,286,301,336,332,0,249],
[316,318,320,283,332,235,270,355,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,301,274,260,260,294,282,283,246],
[279,0,296,305,253,240,248,288,279,251],
[250,255,0,287,249,268,298,305,291,273],
[277,246,264,0,240,239,249,266,266,224],
[291,298,302,311,0,256,323,311,296,307],
[291,311,283,312,295,0,301,275,310,269],
[257,303,253,302,228,250,0,265,258,249],
[269,263,246,285,240,276,286,0,273,279],
[268,272,260,285,255,241,293,278,0,268],
[305,300,278,327,244,282,302,272,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,281,307,260,238,259,287,224,304],
[288,0,277,297,304,266,272,276,236,291],
[270,274,0,229,283,217,238,253,172,249],
[244,254,322,0,287,252,258,289,255,272],
[291,247,268,264,0,243,249,271,208,244],
[313,285,334,299,308,0,332,270,248,294],
[292,279,313,293,302,219,0,270,268,260],
[264,275,298,262,280,281,281,0,226,261],
[327,315,379,296,343,303,283,325,0,263],
[247,260,302,279,307,257,291,290,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,268,265,242,265,261,255,263,283],
[267,0,267,291,300,285,287,293,275,278],
[283,284,0,293,287,289,297,286,286,259],
[286,260,258,0,235,286,268,285,294,261],
[309,251,264,316,0,271,269,277,295,295],
[286,266,262,265,280,0,275,285,301,251],
[290,264,254,283,282,276,0,282,258,258],
[296,258,265,266,274,266,269,0,297,288],
[288,276,265,257,256,250,293,254,0,232],
[268,273,292,290,256,300,293,263,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,273,300,272,278,283,282,286,297],
[251,0,245,261,248,256,263,263,252,280],
[278,306,0,297,270,282,293,278,280,290],
[251,290,254,0,268,273,271,280,260,283],
[279,303,281,283,0,273,286,277,287,298],
[273,295,269,278,278,0,271,283,284,300],
[268,288,258,280,265,280,0,266,279,278],
[269,288,273,271,274,268,285,0,282,293],
[265,299,271,291,264,267,272,269,0,283],
[254,271,261,268,253,251,273,258,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,286,246,282,304,307,289,293,301],
[255,0,269,285,264,291,297,273,299,280],
[265,282,0,262,276,265,286,276,285,273],
[305,266,289,0,288,317,306,268,296,326],
[269,287,275,263,0,300,297,292,296,302],
[247,260,286,234,251,0,282,265,274,293],
[244,254,265,245,254,269,0,263,250,279],
[262,278,275,283,259,286,288,0,288,265],
[258,252,266,255,255,277,301,263,0,275],
[250,271,278,225,249,258,272,286,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,252,280,290,266,249,287,259,270],
[266,0,259,249,286,283,256,282,275,284],
[299,292,0,295,291,307,279,311,277,264],
[271,302,256,0,306,281,276,289,255,259],
[261,265,260,245,0,263,249,283,219,249],
[285,268,244,270,288,0,269,292,262,271],
[302,295,272,275,302,282,0,301,262,275],
[264,269,240,262,268,259,250,0,239,258],
[292,276,274,296,332,289,289,312,0,293],
[281,267,287,292,302,280,276,293,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,306,276,281,279,297,276,283,286],
[280,0,279,290,274,274,293,278,282,288],
[245,272,0,264,241,274,280,255,278,264],
[275,261,287,0,267,287,299,276,277,281],
[270,277,310,284,0,284,310,274,267,293],
[272,277,277,264,267,0,272,280,285,272],
[254,258,271,252,241,279,0,264,264,257],
[275,273,296,275,277,271,287,0,298,303],
[268,269,273,274,284,266,287,253,0,280],
[265,263,287,270,258,279,294,248,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,288,279,281,304,266,270,257,264],
[272,0,275,250,264,282,279,257,268,257],
[263,276,0,288,252,293,306,259,258,256],
[272,301,263,0,268,299,283,276,278,240],
[270,287,299,283,0,303,289,280,275,259],
[247,269,258,252,248,0,262,254,264,278],
[285,272,245,268,262,289,0,262,249,249],
[281,294,292,275,271,297,289,0,264,279],
[294,283,293,273,276,287,302,287,0,280],
[287,294,295,311,292,273,302,272,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,266,283,232,262,268,275,276,245],
[285,0,283,261,299,263,267,299,269,282],
[285,268,0,272,275,288,258,298,281,280],
[268,290,279,0,277,238,271,287,271,285],
[319,252,276,274,0,262,249,278,291,249],
[289,288,263,313,289,0,284,310,298,285],
[283,284,293,280,302,267,0,281,306,273],
[276,252,253,264,273,241,270,0,254,259],
[275,282,270,280,260,253,245,297,0,286],
[306,269,271,266,302,266,278,292,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,294,228,250,257,264,254,219,273],
[308,0,322,277,280,309,265,287,285,286],
[257,229,0,265,278,270,295,246,253,268],
[323,274,286,0,288,284,275,287,279,298],
[301,271,273,263,0,285,299,278,270,272],
[294,242,281,267,266,0,262,290,256,288],
[287,286,256,276,252,289,0,266,260,288],
[297,264,305,264,273,261,285,0,264,293],
[332,266,298,272,281,295,291,287,0,302],
[278,265,283,253,279,263,263,258,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,249,251,246,255,251,273,298,249],
[281,0,274,266,253,239,257,270,268,239],
[302,277,0,251,289,278,279,288,306,278],
[300,285,300,0,250,273,297,283,296,263],
[305,298,262,301,0,276,283,286,277,291],
[296,312,273,278,275,0,289,288,275,291],
[300,294,272,254,268,262,0,287,263,275],
[278,281,263,268,265,263,264,0,255,303],
[253,283,245,255,274,276,288,296,0,258],
[302,312,273,288,260,260,276,248,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,291,222,246,271,225,278,228,249],
[280,0,272,251,237,255,297,266,257,225],
[260,279,0,259,222,271,266,255,271,220],
[329,300,292,0,294,282,241,287,263,265],
[305,314,329,257,0,266,262,314,267,276],
[280,296,280,269,285,0,286,289,275,289],
[326,254,285,310,289,265,0,275,241,261],
[273,285,296,264,237,262,276,0,258,234],
[323,294,280,288,284,276,310,293,0,268],
[302,326,331,286,275,262,290,317,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,251,279,218,239,241,238,306,254],
[322,0,318,236,252,330,275,272,273,309],
[300,233,0,293,287,332,311,239,308,301],
[272,315,258,0,200,303,280,220,297,292],
[333,299,264,351,0,277,266,276,344,309],
[312,221,219,248,274,0,273,215,250,215],
[310,276,240,271,285,278,0,304,286,290],
[313,279,312,331,275,336,247,0,309,289],
[245,278,243,254,207,301,265,242,0,278],
[297,242,250,259,242,336,261,262,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,367,275,92,92,277,183,367,276],
[459,0,459,274,183,275,276,458,367,276],
[184,92,0,275,92,92,92,183,183,92],
[276,277,276,0,0,183,276,184,367,276],
[459,368,459,551,0,275,276,367,367,276],
[459,276,459,368,276,0,185,275,275,459],
[274,275,459,275,275,366,0,275,366,366],
[368,93,368,367,184,276,276,0,367,184],
[184,184,368,184,184,276,185,184,0,184],
[275,275,459,275,275,92,185,367,367,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,311,283,282,266,293,265,295,280],
[262,0,289,257,248,264,278,241,257,263],
[240,262,0,260,237,229,259,241,261,215],
[268,294,291,0,283,286,294,278,267,272],
[269,303,314,268,0,263,298,279,288,288],
[285,287,322,265,288,0,278,246,276,264],
[258,273,292,257,253,273,0,260,256,277],
[286,310,310,273,272,305,291,0,277,280],
[256,294,290,284,263,275,295,274,0,290],
[271,288,336,279,263,287,274,271,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,212,252,253,249,256,265,261,245],
[275,0,235,287,271,263,270,249,264,233],
[339,316,0,290,293,312,298,288,309,272],
[299,264,261,0,279,298,297,275,273,272],
[298,280,258,272,0,283,264,299,288,251],
[302,288,239,253,268,0,255,266,297,288],
[295,281,253,254,287,296,0,266,326,267],
[286,302,263,276,252,285,285,0,292,277],
[290,287,242,278,263,254,225,259,0,251],
[306,318,279,279,300,263,284,274,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,289,272,305,277,316,247,276,321],
[233,0,288,278,273,316,278,273,263,271],
[262,263,0,277,294,274,283,235,263,286],
[279,273,274,0,279,247,278,257,246,258],
[246,278,257,272,0,265,300,264,231,256],
[274,235,277,304,286,0,299,269,275,254],
[235,273,268,273,251,252,0,238,203,261],
[304,278,316,294,287,282,313,0,287,263],
[275,288,288,305,320,276,348,264,0,262],
[230,280,265,293,295,297,290,288,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,293,275,291,295,244,270,292,282],
[245,0,244,258,256,266,232,235,236,231],
[258,307,0,285,300,289,250,278,272,279],
[276,293,266,0,280,288,250,265,268,259],
[260,295,251,271,0,262,253,262,250,264],
[256,285,262,263,289,0,240,252,271,236],
[307,319,301,301,298,311,0,264,270,283],
[281,316,273,286,289,299,287,0,293,254],
[259,315,279,283,301,280,281,258,0,280],
[269,320,272,292,287,315,268,297,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,286,311,306,293,295,302,285,275],
[248,0,248,266,279,282,265,252,256,281],
[265,303,0,291,310,272,283,273,262,280],
[240,285,260,0,279,266,249,270,274,278],
[245,272,241,272,0,267,263,246,281,284],
[258,269,279,285,284,0,266,260,276,242],
[256,286,268,302,288,285,0,283,282,286],
[249,299,278,281,305,291,268,0,290,283],
[266,295,289,277,270,275,269,261,0,290],
[276,270,271,273,267,309,265,268,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,267,265,272,271,255,274,264,280],
[261,0,247,236,260,253,256,261,226,274],
[284,304,0,286,296,256,272,295,261,296],
[286,315,265,0,283,273,275,281,276,299],
[279,291,255,268,0,264,277,280,264,307],
[280,298,295,278,287,0,264,296,275,275],
[296,295,279,276,274,287,0,295,253,289],
[277,290,256,270,271,255,256,0,248,275],
[287,325,290,275,287,276,298,303,0,286],
[271,277,255,252,244,276,262,276,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,333,312,268,298,290,289,254,303],
[270,0,300,273,290,246,267,269,261,278],
[218,251,0,297,261,258,286,271,239,280],
[239,278,254,0,283,251,282,296,254,252],
[283,261,290,268,0,261,263,294,250,292],
[253,305,293,300,290,0,291,272,290,291],
[261,284,265,269,288,260,0,274,255,265],
[262,282,280,255,257,279,277,0,267,293],
[297,290,312,297,301,261,296,284,0,300],
[248,273,271,299,259,260,286,258,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,331,287,298,283,269,321,300,307],
[241,0,297,264,252,277,262,275,251,284],
[220,254,0,237,232,243,233,253,238,275],
[264,287,314,0,281,291,281,297,273,290],
[253,299,319,270,0,287,307,307,298,309],
[268,274,308,260,264,0,275,291,286,277],
[282,289,318,270,244,276,0,290,277,281],
[230,276,298,254,244,260,261,0,251,255],
[251,300,313,278,253,265,274,300,0,296],
[244,267,276,261,242,274,270,296,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,291,305,302,292,281,272,301,287],
[251,0,283,288,285,269,266,277,292,278],
[260,268,0,291,290,274,267,278,278,278],
[246,263,260,0,277,260,279,262,263,266],
[249,266,261,274,0,265,276,257,269,269],
[259,282,277,291,286,0,279,278,272,276],
[270,285,284,272,275,272,0,264,267,275],
[279,274,273,289,294,273,287,0,265,281],
[250,259,273,288,282,279,284,286,0,276],
[264,273,273,285,282,275,276,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,287,256,259,289,264,255,269,272],
[286,0,283,276,295,297,297,273,289,288],
[264,268,0,265,274,272,267,266,279,256],
[295,275,286,0,280,294,288,271,281,286],
[292,256,277,271,0,293,260,270,286,270],
[262,254,279,257,258,0,265,274,281,279],
[287,254,284,263,291,286,0,281,277,282],
[296,278,285,280,281,277,270,0,294,279],
[282,262,272,270,265,270,274,257,0,278],
[279,263,295,265,281,272,269,272,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,282,293,301,276,287,277,307,281],
[291,0,266,287,270,275,274,284,291,258],
[269,285,0,288,294,282,279,294,298,289],
[258,264,263,0,274,258,265,277,280,288],
[250,281,257,277,0,265,255,275,287,256],
[275,276,269,293,286,0,277,268,282,277],
[264,277,272,286,296,274,0,289,282,264],
[274,267,257,274,276,283,262,0,269,268],
[244,260,253,271,264,269,269,282,0,256],
[270,293,262,263,295,274,287,283,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,334,348,242,272,304,260,260,250],
[272,0,289,285,250,221,277,264,263,251],
[217,262,0,309,242,221,273,227,294,223],
[203,266,242,0,238,232,245,208,208,216],
[309,301,309,313,0,244,264,264,282,256],
[279,330,330,319,307,0,306,313,253,316],
[247,274,278,306,287,245,0,252,272,295],
[291,287,324,343,287,238,299,0,319,264],
[291,288,257,343,269,298,279,232,0,314],
[301,300,328,335,295,235,256,287,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,282,272,266,280,283,266,265,270],
[286,0,287,274,290,290,284,255,281,289],
[269,264,0,264,274,265,292,255,257,262],
[279,277,287,0,295,290,309,273,277,278],
[285,261,277,256,0,274,291,264,258,282],
[271,261,286,261,277,0,284,254,252,270],
[268,267,259,242,260,267,0,245,241,255],
[285,296,296,278,287,297,306,0,271,301],
[286,270,294,274,293,299,310,280,0,278],
[281,262,289,273,269,281,296,250,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,352,284,285,305,337,268,233,288,284],
[199,0,328,261,227,206,329,174,227,226],
[267,223,0,242,207,307,187,256,242,226],
[266,290,309,0,257,341,327,295,326,275],
[246,324,344,294,0,345,310,274,280,368],
[214,345,244,210,206,0,243,193,243,239],
[283,222,364,224,241,308,0,238,278,292],
[318,377,295,256,277,358,313,0,295,363],
[263,324,309,225,271,308,273,256,0,305],
[267,325,325,276,183,312,259,188,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,291,273,284,256,278,272,301,293],
[265,0,265,259,253,258,266,254,277,274],
[260,286,0,266,265,264,276,278,279,282],
[278,292,285,0,282,282,275,289,285,302],
[267,298,286,269,0,272,268,280,284,286],
[295,293,287,269,279,0,272,272,287,281],
[273,285,275,276,283,279,0,278,292,283],
[279,297,273,262,271,279,273,0,288,283],
[250,274,272,266,267,264,259,263,0,263],
[258,277,269,249,265,270,268,268,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,294,283,265,265,276,274,281,293],
[246,0,287,257,258,261,246,265,280,268],
[257,264,0,249,249,269,268,276,300,283],
[268,294,302,0,263,307,273,281,286,287],
[286,293,302,288,0,307,302,274,309,296],
[286,290,282,244,244,0,269,277,280,264],
[275,305,283,278,249,282,0,288,271,285],
[277,286,275,270,277,274,263,0,279,284],
[270,271,251,265,242,271,280,272,0,278],
[258,283,268,264,255,287,266,267,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,271,279,281,276,290,272,288,271],
[294,0,301,307,291,283,298,285,293,270],
[280,250,0,292,280,268,300,269,268,278],
[272,244,259,0,265,255,272,252,268,271],
[270,260,271,286,0,272,267,256,286,248],
[275,268,283,296,279,0,293,270,278,278],
[261,253,251,279,284,258,0,274,272,261],
[279,266,282,299,295,281,277,0,276,282],
[263,258,283,283,265,273,279,275,0,261],
[280,281,273,280,303,273,290,269,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,284,271,267,265,288,296,280,269],
[290,0,264,272,273,278,288,292,267,268],
[267,287,0,275,278,268,275,292,291,257],
[280,279,276,0,278,275,287,294,263,266],
[284,278,273,273,0,279,287,299,290,281],
[286,273,283,276,272,0,283,296,275,281],
[263,263,276,264,264,268,0,273,254,281],
[255,259,259,257,252,255,278,0,264,257],
[271,284,260,288,261,276,297,287,0,275],
[282,283,294,285,270,270,270,294,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,283,254,295,251,273,283,271,276],
[291,0,282,273,319,275,269,283,282,274],
[268,269,0,277,297,273,279,272,266,276],
[297,278,274,0,309,281,268,289,266,272],
[256,232,254,242,0,272,253,253,251,250],
[300,276,278,270,279,0,279,272,280,271],
[278,282,272,283,298,272,0,268,259,249],
[268,268,279,262,298,279,283,0,257,254],
[280,269,285,285,300,271,292,294,0,255],
[275,277,275,279,301,280,302,297,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,266,294,279,290,273,274,293,280],
[263,0,260,277,252,268,275,264,271,264],
[285,291,0,283,268,268,284,277,301,266],
[257,274,268,0,275,269,271,269,277,265],
[272,299,283,276,0,263,281,283,277,272],
[261,283,283,282,288,0,279,266,278,272],
[278,276,267,280,270,272,0,273,271,269],
[277,287,274,282,268,285,278,0,277,274],
[258,280,250,274,274,273,280,274,0,271],
[271,287,285,286,279,279,282,277,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,253,264,255,268,250,254,251,256],
[299,0,273,287,273,282,270,283,280,275],
[298,278,0,279,282,272,283,288,273,283],
[287,264,272,0,271,271,259,287,279,266],
[296,278,269,280,0,273,279,285,285,283],
[283,269,279,280,278,0,268,282,275,263],
[301,281,268,292,272,283,0,284,276,276],
[297,268,263,264,266,269,267,0,264,264],
[300,271,278,272,266,276,275,287,0,288],
[295,276,268,285,268,288,275,287,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,272,277,272,260,257,271,297,262],
[281,0,263,287,265,268,259,282,303,266],
[279,288,0,287,269,267,267,271,298,282],
[274,264,264,0,286,261,261,280,303,272],
[279,286,282,265,0,274,270,297,309,284],
[291,283,284,290,277,0,290,291,305,263],
[294,292,284,290,281,261,0,283,318,290],
[280,269,280,271,254,260,268,0,286,248],
[254,248,253,248,242,246,233,265,0,235],
[289,285,269,279,267,288,261,303,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,260,291,262,255,283,260,247,276],
[257,0,281,308,278,265,295,283,271,273],
[291,270,0,302,271,275,269,290,278,279],
[260,243,249,0,233,241,255,248,250,240],
[289,273,280,318,0,302,285,284,279,285],
[296,286,276,310,249,0,281,262,275,271],
[268,256,282,296,266,270,0,265,252,285],
[291,268,261,303,267,289,286,0,320,259],
[304,280,273,301,272,276,299,231,0,234],
[275,278,272,311,266,280,266,292,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,274,292,292,297,284,271,279,264],
[262,0,270,288,275,269,272,270,269,268],
[277,281,0,300,280,283,269,294,268,279],
[259,263,251,0,267,252,258,276,260,281],
[259,276,271,284,0,285,256,274,274,264],
[254,282,268,299,266,0,276,280,268,291],
[267,279,282,293,295,275,0,275,276,278],
[280,281,257,275,277,271,276,0,282,269],
[272,282,283,291,277,283,275,269,0,292],
[287,283,272,270,287,260,273,282,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,264,263,263,251,281,247,279,262],
[291,0,265,289,282,256,295,274,275,274],
[287,286,0,291,281,270,283,285,277,266],
[288,262,260,0,288,260,270,278,275,259],
[288,269,270,263,0,271,282,271,283,269],
[300,295,281,291,280,0,270,282,295,298],
[270,256,268,281,269,281,0,285,261,263],
[304,277,266,273,280,269,266,0,263,273],
[272,276,274,276,268,256,290,288,0,273],
[289,277,285,292,282,253,288,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,242,271,269,252,248,255,253,292],
[286,0,274,295,288,297,302,283,278,299],
[309,277,0,299,288,288,295,265,265,288],
[280,256,252,0,251,249,239,249,252,303],
[282,263,263,300,0,284,269,267,238,305],
[299,254,263,302,267,0,295,255,271,303],
[303,249,256,312,282,256,0,296,261,291],
[296,268,286,302,284,296,255,0,272,307],
[298,273,286,299,313,280,290,279,0,314],
[259,252,263,248,246,248,260,244,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,286,279,302,287,291,290,282,271],
[280,0,289,287,302,266,284,270,294,253],
[265,262,0,275,286,262,285,275,273,275],
[272,264,276,0,284,264,281,266,258,264],
[249,249,265,267,0,253,255,249,232,243],
[264,285,289,287,298,0,286,281,266,249],
[260,267,266,270,296,265,0,255,276,276],
[261,281,276,285,302,270,296,0,277,267],
[269,257,278,293,319,285,275,274,0,261],
[280,298,276,287,308,302,275,284,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,284,293,296,301,285,306,288,272],
[238,0,261,261,272,244,262,266,255,286],
[267,290,0,276,287,280,291,296,266,275],
[258,290,275,0,286,273,262,288,269,261],
[255,279,264,265,0,272,273,283,260,257],
[250,307,271,278,279,0,281,287,266,263],
[266,289,260,289,278,270,0,292,260,270],
[245,285,255,263,268,264,259,0,258,259],
[263,296,285,282,291,285,291,293,0,280],
[279,265,276,290,294,288,281,292,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,269,231,263,242,247,253,251,272],
[310,0,278,260,261,303,300,315,274,268],
[282,273,0,260,281,273,273,303,260,245],
[320,291,291,0,263,299,289,292,271,287],
[288,290,270,288,0,288,313,303,278,265],
[309,248,278,252,263,0,275,290,288,271],
[304,251,278,262,238,276,0,281,248,275],
[298,236,248,259,248,261,270,0,259,243],
[300,277,291,280,273,263,303,292,0,270],
[279,283,306,264,286,280,276,308,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,268,251,265,263,275,255,282,269],
[285,0,279,277,276,282,264,275,279,287],
[283,272,0,262,278,267,262,266,282,273],
[300,274,289,0,295,277,283,285,283,300],
[286,275,273,256,0,260,253,263,275,288],
[288,269,284,274,291,0,276,271,286,283],
[276,287,289,268,298,275,0,257,280,297],
[296,276,285,266,288,280,294,0,287,293],
[269,272,269,268,276,265,271,264,0,291],
[282,264,278,251,263,268,254,258,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,266,278,264,253,245,242,257,267],
[296,0,265,298,276,258,292,265,289,287],
[285,286,0,277,286,256,286,267,267,255],
[273,253,274,0,260,265,275,269,292,279],
[287,275,265,291,0,260,268,262,252,266],
[298,293,295,286,291,0,278,272,285,286],
[306,259,265,276,283,273,0,286,289,264],
[309,286,284,282,289,279,265,0,271,284],
[294,262,284,259,299,266,262,280,0,272],
[284,264,296,272,285,265,287,267,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,138,276,414,276,276,138,276,276],
[275,0,138,276,551,276,551,276,138,551],
[413,413,0,275,413,138,413,138,276,413],
[275,275,276,0,275,276,275,138,138,413],
[137,0,138,276,0,138,138,138,0,276],
[275,275,413,275,413,0,413,276,275,551],
[275,0,138,276,413,138,0,138,138,276],
[413,275,413,413,413,275,413,0,413,275],
[275,413,275,413,551,276,413,138,0,413],
[275,0,138,138,275,0,275,276,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,290,293,293,299,292,270,286,301],
[272,0,304,295,284,269,294,291,282,277],
[261,247,0,282,260,275,281,276,281,266],
[258,256,269,0,272,262,299,267,289,270],
[258,267,291,279,0,262,278,272,275,262],
[252,282,276,289,289,0,288,270,284,279],
[259,257,270,252,273,263,0,267,269,260],
[281,260,275,284,279,281,284,0,295,282],
[265,269,270,262,276,267,282,256,0,242],
[250,274,285,281,289,272,291,269,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,282,307,275,274,287,295,283,277],
[266,0,264,271,264,255,286,284,274,262],
[269,287,0,274,291,280,277,280,274,247],
[244,280,277,0,258,264,262,276,261,259],
[276,287,260,293,0,285,281,288,284,262],
[277,296,271,287,266,0,293,275,271,264],
[264,265,274,289,270,258,0,282,274,266],
[256,267,271,275,263,276,269,0,264,254],
[268,277,277,290,267,280,277,287,0,263],
[274,289,304,292,289,287,285,297,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,343,261,296,261,327,325,268,342],
[263,0,279,249,287,241,284,308,267,314],
[208,272,0,224,222,221,293,262,277,289],
[290,302,327,0,305,270,304,296,296,329],
[255,264,329,246,0,235,266,274,257,296],
[290,310,330,281,316,0,287,270,273,324],
[224,267,258,247,285,264,0,253,299,306],
[226,243,289,255,277,281,298,0,268,297],
[283,284,274,255,294,278,252,283,0,341],
[209,237,262,222,255,227,245,254,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,274,291,274,278,286,274,268,261],
[269,0,278,289,292,287,286,276,282,265],
[277,273,0,267,268,267,277,276,292,263],
[260,262,284,0,256,272,255,268,284,265],
[277,259,283,295,0,278,278,296,285,271],
[273,264,284,279,273,0,272,275,293,268],
[265,265,274,296,273,279,0,292,286,288],
[277,275,275,283,255,276,259,0,274,258],
[283,269,259,267,266,258,265,277,0,268],
[290,286,288,286,280,283,263,293,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,284,287,248,250,263,252,289,263],
[266,0,256,239,255,287,244,237,283,262],
[267,295,0,267,240,292,291,263,278,285],
[264,312,284,0,235,266,279,249,321,300],
[303,296,311,316,0,307,291,275,317,289],
[301,264,259,285,244,0,239,243,282,274],
[288,307,260,272,260,312,0,256,307,295],
[299,314,288,302,276,308,295,0,316,257],
[262,268,273,230,234,269,244,235,0,229],
[288,289,266,251,262,277,256,294,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,234,278,214,240,244,256,256,265],
[300,0,296,269,255,250,274,288,251,286],
[317,255,0,292,224,229,274,253,253,242],
[273,282,259,0,276,262,284,251,249,259],
[337,296,327,275,0,266,315,332,285,269],
[311,301,322,289,285,0,312,298,267,284],
[307,277,277,267,236,239,0,278,232,249],
[295,263,298,300,219,253,273,0,270,262],
[295,300,298,302,266,284,319,281,0,255],
[286,265,309,292,282,267,302,289,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,279,275,255,266,268,259,265,282],
[284,0,281,278,276,268,269,266,279,285],
[272,270,0,266,251,263,275,268,265,268],
[276,273,285,0,251,283,259,280,273,274],
[296,275,300,300,0,292,277,267,292,289],
[285,283,288,268,259,0,254,264,264,275],
[283,282,276,292,274,297,0,277,284,301],
[292,285,283,271,284,287,274,0,296,285],
[286,272,286,278,259,287,267,255,0,280],
[269,266,283,277,262,276,250,266,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,265,275,281,262,254,265,263,278],
[278,0,280,285,281,271,265,283,266,290],
[286,271,0,300,282,281,278,273,263,281],
[276,266,251,0,263,268,250,256,235,299],
[270,270,269,288,0,277,277,276,271,269],
[289,280,270,283,274,0,285,265,254,285],
[297,286,273,301,274,266,0,292,288,293],
[286,268,278,295,275,286,259,0,279,312],
[288,285,288,316,280,297,263,272,0,275],
[273,261,270,252,282,266,258,239,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,276,287,278,283,280,290,284,293],
[282,0,275,275,302,291,279,289,290,298],
[275,276,0,269,282,284,273,283,270,278],
[264,276,282,0,283,294,281,291,285,281],
[273,249,269,268,0,272,263,277,288,283],
[268,260,267,257,279,0,273,272,276,283],
[271,272,278,270,288,278,0,284,265,271],
[261,262,268,260,274,279,267,0,286,288],
[267,261,281,266,263,275,286,265,0,269],
[258,253,273,270,268,268,280,263,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,289,289,260,296,279,299,285,266],
[263,0,266,262,292,258,257,278,264,256],
[262,285,0,300,285,313,281,307,277,293],
[262,289,251,0,275,302,285,294,276,291],
[291,259,266,276,0,278,278,276,254,277],
[255,293,238,249,273,0,282,292,267,256],
[272,294,270,266,273,269,0,274,271,263],
[252,273,244,257,275,259,277,0,265,253],
[266,287,274,275,297,284,280,286,0,277],
[285,295,258,260,274,295,288,298,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,302,293,276,257,231,293,289,238],
[301,0,337,305,313,262,260,273,335,283],
[249,214,0,246,270,228,200,231,291,227],
[258,246,305,0,318,283,253,262,303,251],
[275,238,281,233,0,259,198,236,285,215],
[294,289,323,268,292,0,260,261,325,250],
[320,291,351,298,353,291,0,327,341,272],
[258,278,320,289,315,290,224,0,289,256],
[262,216,260,248,266,226,210,262,0,244],
[313,268,324,300,336,301,279,295,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,261,266,275,274,249,262,277,278],
[283,0,268,259,283,280,279,287,265,303],
[290,283,0,269,284,306,289,266,299,287],
[285,292,282,0,304,287,277,267,291,297],
[276,268,267,247,0,278,269,271,268,267],
[277,271,245,264,273,0,252,265,278,251],
[302,272,262,274,282,299,0,255,293,284],
[289,264,285,284,280,286,296,0,266,280],
[274,286,252,260,283,273,258,285,0,272],
[273,248,264,254,284,300,267,271,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,255,257,298,268,279,253,286,282],
[279,0,266,244,315,271,268,236,279,266],
[296,285,0,255,287,279,296,280,290,293],
[294,307,296,0,311,263,293,271,325,306],
[253,236,264,240,0,247,266,240,269,273],
[283,280,272,288,304,0,283,263,287,297],
[272,283,255,258,285,268,0,255,276,288],
[298,315,271,280,311,288,296,0,322,308],
[265,272,261,226,282,264,275,229,0,232],
[269,285,258,245,278,254,263,243,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,251,264,293,272,277,271,267,270],
[263,0,248,260,290,272,283,262,255,251],
[300,303,0,295,300,292,307,283,294,275],
[287,291,256,0,289,293,304,283,260,260],
[258,261,251,262,0,274,292,278,270,269],
[279,279,259,258,277,0,275,271,258,258],
[274,268,244,247,259,276,0,269,263,260],
[280,289,268,268,273,280,282,0,266,276],
[284,296,257,291,281,293,288,285,0,281],
[281,300,276,291,282,293,291,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,277,285,290,275,273,256,269,280],
[270,0,279,284,293,284,282,266,280,292],
[274,272,0,280,279,275,254,253,271,300],
[266,267,271,0,282,293,262,243,279,296],
[261,258,272,269,0,276,281,269,259,295],
[276,267,276,258,275,0,260,256,262,290],
[278,269,297,289,270,291,0,261,275,287],
[295,285,298,308,282,295,290,0,274,286],
[282,271,280,272,292,289,276,277,0,268],
[271,259,251,255,256,261,264,265,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,314,273,291,299,243,296,283,255],
[281,0,321,327,306,306,287,321,311,270],
[237,230,0,239,237,282,229,238,292,218],
[278,224,312,0,269,276,237,271,277,238],
[260,245,314,282,0,320,245,300,296,282],
[252,245,269,275,231,0,267,285,287,250],
[308,264,322,314,306,284,0,330,309,279],
[255,230,313,280,251,266,221,0,248,222],
[268,240,259,274,255,264,242,303,0,208],
[296,281,333,313,269,301,272,329,343,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,309,284,274,272,227,298,298,260],
[296,0,304,291,283,298,277,324,305,265],
[242,247,0,285,255,267,232,290,250,236],
[267,260,266,0,300,265,208,281,310,263],
[277,268,296,251,0,283,240,315,262,238],
[279,253,284,286,268,0,268,314,325,256],
[324,274,319,343,311,283,0,329,325,292],
[253,227,261,270,236,237,222,0,296,239],
[253,246,301,241,289,226,226,255,0,240],
[291,286,315,288,313,295,259,312,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,299,283,302,282,258,300,308,279],
[241,0,278,255,244,264,242,265,271,254],
[252,273,0,267,273,268,258,275,294,259],
[268,296,284,0,286,275,286,297,296,291],
[249,307,278,265,0,274,270,293,295,281],
[269,287,283,276,277,0,274,285,288,280],
[293,309,293,265,281,277,0,296,300,287],
[251,286,276,254,258,266,255,0,287,264],
[243,280,257,255,256,263,251,264,0,263],
[272,297,292,260,270,271,264,287,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,277,286,264,274,294,293,290,278],
[276,0,274,272,253,269,261,291,275,274],
[274,277,0,273,262,285,265,273,279,280],
[265,279,278,0,268,266,272,282,264,272],
[287,298,289,283,0,292,280,282,289,275],
[277,282,266,285,259,0,255,273,276,261],
[257,290,286,279,271,296,0,277,275,282],
[258,260,278,269,269,278,274,0,284,258],
[261,276,272,287,262,275,276,267,0,275],
[273,277,271,279,276,290,269,293,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,262,266,241,186,316,261,262,238],
[240,0,319,295,267,291,342,291,209,212],
[289,232,0,339,287,264,265,233,261,314],
[285,256,212,0,184,211,287,259,234,283],
[310,284,264,367,0,260,289,313,262,236],
[365,260,287,340,291,0,370,339,313,288],
[235,209,286,264,262,181,0,260,263,208],
[290,260,318,292,238,212,291,0,234,235],
[289,342,290,317,289,238,288,317,0,240],
[313,339,237,268,315,263,343,316,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,264,285,278,294,271,285,267,246],
[236,0,253,222,282,265,241,276,247,233],
[287,298,0,284,302,318,291,277,283,262],
[266,329,267,0,274,282,305,332,275,258],
[273,269,249,277,0,284,281,298,277,280],
[257,286,233,269,267,0,258,287,272,239],
[280,310,260,246,270,293,0,311,257,258],
[266,275,274,219,253,264,240,0,271,261],
[284,304,268,276,274,279,294,280,0,240],
[305,318,289,293,271,312,293,290,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,265,280,271,262,294,288,291,298],
[273,0,288,267,289,267,293,281,286,296],
[286,263,0,268,279,261,267,280,292,283],
[271,284,283,0,279,279,303,290,295,294],
[280,262,272,272,0,269,276,286,283,287],
[289,284,290,272,282,0,290,283,293,288],
[257,258,284,248,275,261,0,263,289,282],
[263,270,271,261,265,268,288,0,277,279],
[260,265,259,256,268,258,262,274,0,290],
[253,255,268,257,264,263,269,272,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,275,294,312,350,345,275,335,370],
[239,0,327,293,222,384,311,258,280,316],
[276,224,0,294,222,295,332,277,298,334],
[257,258,257,0,239,273,275,203,313,294],
[239,329,329,312,0,368,365,293,368,314],
[201,167,256,278,183,0,311,221,242,259],
[206,240,219,276,186,240,0,221,242,332],
[276,293,274,348,258,330,330,0,297,351],
[216,271,253,238,183,309,309,254,0,254],
[181,235,217,257,237,292,219,200,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,262,280,260,260,270,259,274,271],
[254,0,248,251,267,246,269,258,256,286],
[289,303,0,290,282,246,280,289,254,272],
[271,300,261,0,285,231,275,252,277,252],
[291,284,269,266,0,266,261,264,270,249],
[291,305,305,320,285,0,299,274,312,305],
[281,282,271,276,290,252,0,266,257,279],
[292,293,262,299,287,277,285,0,297,295],
[277,295,297,274,281,239,294,254,0,277],
[280,265,279,299,302,246,272,256,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,295,284,266,311,262,290,259,273],
[269,0,286,301,263,307,281,304,307,294],
[256,265,0,297,250,300,249,297,275,255],
[267,250,254,0,213,274,261,262,266,263],
[285,288,301,338,0,317,263,305,297,245],
[240,244,251,277,234,0,267,292,241,259],
[289,270,302,290,288,284,0,276,278,267],
[261,247,254,289,246,259,275,0,279,252],
[292,244,276,285,254,310,273,272,0,255],
[278,257,296,288,306,292,284,299,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,258,275,269,257,267,261,254,278],
[283,0,291,295,277,289,274,278,260,293],
[293,260,0,281,285,276,283,268,278,280],
[276,256,270,0,262,276,269,271,268,255],
[282,274,266,289,0,271,282,272,268,269],
[294,262,275,275,280,0,279,279,280,296],
[284,277,268,282,269,272,0,280,290,286],
[290,273,283,280,279,272,271,0,266,289],
[297,291,273,283,283,271,261,285,0,299],
[273,258,271,296,282,255,265,262,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,258,272,292,286,282,267,263,287],
[268,0,300,276,293,296,262,282,303,293],
[293,251,0,279,297,287,272,261,281,292],
[279,275,272,0,306,301,277,264,285,305],
[259,258,254,245,0,301,261,231,252,295],
[265,255,264,250,250,0,241,234,241,273],
[269,289,279,274,290,310,0,251,276,293],
[284,269,290,287,320,317,300,0,294,307],
[288,248,270,266,299,310,275,257,0,317],
[264,258,259,246,256,278,258,244,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,266,276,270,258,265,274,276,287],
[265,0,261,254,284,276,288,254,265,283],
[285,290,0,262,307,295,294,281,285,292],
[275,297,289,0,293,285,304,307,279,313],
[281,267,244,258,0,280,275,268,265,281],
[293,275,256,266,271,0,271,269,285,294],
[286,263,257,247,276,280,0,295,275,298],
[277,297,270,244,283,282,256,0,267,291],
[275,286,266,272,286,266,276,284,0,312],
[264,268,259,238,270,257,253,260,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,230,326,247,274,287,272,256,259],
[272,0,260,329,212,302,271,289,278,241],
[321,291,0,380,283,358,343,341,331,272],
[225,222,171,0,212,220,233,227,244,178],
[304,339,268,339,0,342,300,295,314,297],
[277,249,193,331,209,0,270,255,254,242],
[264,280,208,318,251,281,0,258,295,233],
[279,262,210,324,256,296,293,0,255,254],
[295,273,220,307,237,297,256,296,0,252],
[292,310,279,373,254,309,318,297,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,286,285,271,286,291,280,272,274],
[259,0,260,268,253,263,264,247,273,262],
[265,291,0,274,265,277,267,266,282,259],
[266,283,277,0,273,281,277,263,272,266],
[280,298,286,278,0,278,290,271,259,287],
[265,288,274,270,273,0,272,256,286,286],
[260,287,284,274,261,279,0,261,278,276],
[271,304,285,288,280,295,290,0,282,289],
[279,278,269,279,292,265,273,269,0,281],
[277,289,292,285,264,265,275,262,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,273,268,252,248,252,259,257,260],
[295,0,273,279,273,275,272,276,278,275],
[278,278,0,289,260,259,263,241,265,254],
[283,272,262,0,258,258,263,263,269,258],
[299,278,291,293,0,262,290,266,286,276],
[303,276,292,293,289,0,269,263,290,296],
[299,279,288,288,261,282,0,260,281,277],
[292,275,310,288,285,288,291,0,281,273],
[294,273,286,282,265,261,270,270,0,253],
[291,276,297,293,275,255,274,278,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,262,258,275,272,270,287,269,250],
[299,0,270,258,256,282,258,261,274,259],
[289,281,0,287,268,281,280,289,253,285],
[293,293,264,0,268,278,275,274,290,266],
[276,295,283,283,0,280,279,289,265,267],
[279,269,270,273,271,0,269,257,270,260],
[281,293,271,276,272,282,0,299,270,250],
[264,290,262,277,262,294,252,0,270,264],
[282,277,298,261,286,281,281,281,0,292],
[301,292,266,285,284,291,301,287,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,278,260,272,258,290,260,267,282],
[275,0,285,263,273,260,278,270,272,279],
[273,266,0,251,269,261,291,249,271,268],
[291,288,300,0,282,280,312,286,273,283],
[279,278,282,269,0,279,303,270,278,274],
[293,291,290,271,272,0,297,276,280,293],
[261,273,260,239,248,254,0,253,241,242],
[291,281,302,265,281,275,298,0,267,287],
[284,279,280,278,273,271,310,284,0,275],
[269,272,283,268,277,258,309,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,285,282,286,297,272,284,277,282],
[271,0,283,284,279,294,284,284,278,279],
[266,268,0,279,268,284,286,271,271,257],
[269,267,272,0,274,283,276,286,264,271],
[265,272,283,277,0,284,287,286,270,276],
[254,257,267,268,267,0,252,271,252,266],
[279,267,265,275,264,299,0,279,263,269],
[267,267,280,265,265,280,272,0,277,275],
[274,273,280,287,281,299,288,274,0,270],
[269,272,294,280,275,285,282,276,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,287,297,277,270,267,278,264,271],
[263,0,280,290,272,281,249,284,268,259],
[264,271,0,282,259,266,244,285,262,257],
[254,261,269,0,264,273,261,277,245,243],
[274,279,292,287,0,292,275,298,264,251],
[281,270,285,278,259,0,270,287,261,267],
[284,302,307,290,276,281,0,297,287,273],
[273,267,266,274,253,264,254,0,252,242],
[287,283,289,306,287,290,264,299,0,289],
[280,292,294,308,300,284,278,309,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,297,309,311,268,285,338,274,306],
[282,0,300,305,293,249,266,312,296,269],
[254,251,0,256,279,262,235,284,238,276],
[242,246,295,0,299,289,242,308,240,276],
[240,258,272,252,0,253,280,297,255,271],
[283,302,289,262,298,0,287,279,273,307],
[266,285,316,309,271,264,0,300,267,281],
[213,239,267,243,254,272,251,0,228,275],
[277,255,313,311,296,278,284,323,0,287],
[245,282,275,275,280,244,270,276,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,290,288,272,282,313,294,294,285],
[271,0,273,277,284,265,306,281,266,256],
[261,278,0,275,273,277,272,287,266,285],
[263,274,276,0,284,271,294,284,271,281],
[279,267,278,267,0,265,290,285,274,269],
[269,286,274,280,286,0,281,291,265,277],
[238,245,279,257,261,270,0,273,254,250],
[257,270,264,267,266,260,278,0,260,274],
[257,285,285,280,277,286,297,291,0,283],
[266,295,266,270,282,274,301,277,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,279,276,265,277,302,251,298,266],
[270,0,290,261,248,253,263,239,271,252],
[272,261,0,254,258,250,262,253,276,256],
[275,290,297,0,301,278,295,262,306,272],
[286,303,293,250,0,257,289,267,294,295],
[274,298,301,273,294,0,292,286,320,301],
[249,288,289,256,262,259,0,243,310,274],
[300,312,298,289,284,265,308,0,294,281],
[253,280,275,245,257,231,241,257,0,261],
[285,299,295,279,256,250,277,270,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,226,261,236,254,317,246,277,274],
[246,0,204,207,272,259,274,257,258,258],
[325,347,0,297,292,267,346,257,327,326],
[290,344,254,0,274,278,291,260,300,316],
[315,279,259,277,0,271,318,195,252,272],
[297,292,284,273,280,0,309,232,297,283],
[234,277,205,260,233,242,0,179,222,260],
[305,294,294,291,356,319,372,0,302,274],
[274,293,224,251,299,254,329,249,0,209],
[277,293,225,235,279,268,291,277,342,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,263,292,275,276,282,263,264,260],
[286,0,282,279,277,283,276,288,274,285],
[288,269,0,297,283,277,298,280,291,276],
[259,272,254,0,255,273,261,268,266,271],
[276,274,268,296,0,276,288,276,283,266],
[275,268,274,278,275,0,289,276,267,276],
[269,275,253,290,263,262,0,271,258,270],
[288,263,271,283,275,275,280,0,259,261],
[287,277,260,285,268,284,293,292,0,289],
[291,266,275,280,285,275,281,290,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,269,248,256,256,267,304,266,228],
[309,0,285,253,265,282,348,311,323,254],
[282,266,0,290,333,281,326,277,275,263],
[303,298,261,0,287,297,318,287,243,280],
[295,286,218,264,0,242,287,275,286,233],
[295,269,270,254,309,0,294,274,259,286],
[284,203,225,233,264,257,0,263,238,217],
[247,240,274,264,276,277,288,0,247,243],
[285,228,276,308,265,292,313,304,0,262],
[323,297,288,271,318,265,334,308,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,276,254,289,266,293,295,260,265],
[249,0,272,256,270,240,280,276,297,225],
[275,279,0,267,303,267,312,302,285,279],
[297,295,284,0,311,252,323,319,275,277],
[262,281,248,240,0,242,294,277,265,244],
[285,311,284,299,309,0,317,335,302,262],
[258,271,239,228,257,234,0,285,255,265],
[256,275,249,232,274,216,266,0,277,247],
[291,254,266,276,286,249,296,274,0,259],
[286,326,272,274,307,289,286,304,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,262,285,248,255,242,247,248,257],
[308,0,274,306,281,277,281,282,285,294],
[289,277,0,312,278,261,277,296,294,305],
[266,245,239,0,260,246,263,255,259,272],
[303,270,273,291,0,260,267,285,270,275],
[296,274,290,305,291,0,286,271,293,284],
[309,270,274,288,284,265,0,278,271,293],
[304,269,255,296,266,280,273,0,265,302],
[303,266,257,292,281,258,280,286,0,277],
[294,257,246,279,276,267,258,249,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,284,297,313,302,296,267,276,304],
[270,0,272,291,298,289,260,259,287,285],
[267,279,0,282,289,283,268,285,288,275],
[254,260,269,0,268,275,251,245,274,261],
[238,253,262,283,0,271,266,275,274,279],
[249,262,268,276,280,0,270,262,273,278],
[255,291,283,300,285,281,0,294,281,285],
[284,292,266,306,276,289,257,0,294,304],
[275,264,263,277,277,278,270,257,0,280],
[247,266,276,290,272,273,266,247,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,279,272,276,259,263,265,265,283],
[267,0,290,291,287,294,263,260,275,286],
[272,261,0,282,267,254,254,265,260,275],
[279,260,269,0,261,270,270,242,251,273],
[275,264,284,290,0,267,283,273,277,291],
[292,257,297,281,284,0,289,294,280,293],
[288,288,297,281,268,262,0,269,285,289],
[286,291,286,309,278,257,282,0,264,300],
[286,276,291,300,274,271,266,287,0,306],
[268,265,276,278,260,258,262,251,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,292,283,288,273,287,273,266,268],
[268,0,279,255,288,260,250,244,260,275],
[259,272,0,251,280,295,247,272,263,253],
[268,296,300,0,301,277,239,270,283,255],
[263,263,271,250,0,279,234,267,258,289],
[278,291,256,274,272,0,258,270,259,286],
[264,301,304,312,317,293,0,290,276,258],
[278,307,279,281,284,281,261,0,268,255],
[285,291,288,268,293,292,275,283,0,266],
[283,276,298,296,262,265,293,296,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,269,280,296,242,260,264,260,266],
[268,0,285,288,267,247,261,279,238,275],
[282,266,0,272,267,255,238,287,255,276],
[271,263,279,0,261,252,257,266,232,250],
[255,284,284,290,0,256,254,275,278,284],
[309,304,296,299,295,0,295,289,274,301],
[291,290,313,294,297,256,0,281,259,281],
[287,272,264,285,276,262,270,0,265,284],
[291,313,296,319,273,277,292,286,0,277],
[285,276,275,301,267,250,270,267,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,297,270,284,272,292,282,297,299],
[263,0,301,276,293,317,289,289,293,316],
[254,250,0,270,291,254,257,268,268,294],
[281,275,281,0,275,286,282,261,301,300],
[267,258,260,276,0,286,258,259,278,282],
[279,234,297,265,265,0,257,259,257,273],
[259,262,294,269,293,294,0,301,296,284],
[269,262,283,290,292,292,250,0,293,300],
[254,258,283,250,273,294,255,258,0,273],
[252,235,257,251,269,278,267,251,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,273,263,282,275,267,271,288,264],
[295,0,275,287,281,285,285,280,290,259],
[278,276,0,284,263,280,286,278,276,268],
[288,264,267,0,280,279,276,259,271,280],
[269,270,288,271,0,283,274,274,275,281],
[276,266,271,272,268,0,285,274,277,257],
[284,266,265,275,277,266,0,277,276,262],
[280,271,273,292,277,277,274,0,275,281],
[263,261,275,280,276,274,275,276,0,266],
[287,292,283,271,270,294,289,270,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,225,311,297,286,291,284,263,267],
[288,0,261,257,270,288,282,285,267,266],
[326,290,0,283,277,265,293,255,273,240],
[240,294,268,0,275,326,281,277,293,300],
[254,281,274,276,0,288,284,245,262,228],
[265,263,286,225,263,0,249,274,251,244],
[260,269,258,270,267,302,0,287,287,257],
[267,266,296,274,306,277,264,0,296,260],
[288,284,278,258,289,300,264,255,0,255],
[284,285,311,251,323,307,294,291,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,275,279,274,269,255,262,260,243],
[288,0,253,275,286,271,259,260,269,261],
[276,298,0,288,293,273,256,284,296,280],
[272,276,263,0,259,243,255,250,282,250],
[277,265,258,292,0,248,275,254,298,265],
[282,280,278,308,303,0,269,294,293,280],
[296,292,295,296,276,282,0,269,263,265],
[289,291,267,301,297,257,282,0,295,273],
[291,282,255,269,253,258,288,256,0,254],
[308,290,271,301,286,271,286,278,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,252,280,263,267,259,269,267,269],
[290,0,285,287,272,272,257,262,288,266],
[299,266,0,278,277,279,287,284,287,287],
[271,264,273,0,273,278,269,266,295,292],
[288,279,274,278,0,278,265,257,280,286],
[284,279,272,273,273,0,282,274,284,267],
[292,294,264,282,286,269,0,288,285,310],
[282,289,267,285,294,277,263,0,281,281],
[284,263,264,256,271,267,266,270,0,280],
[282,285,264,259,265,284,241,270,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,257,269,271,267,270,279,274,277],
[265,0,247,264,283,275,268,279,275,272],
[294,304,0,273,289,280,294,301,272,288],
[282,287,278,0,290,264,289,284,286,296],
[280,268,262,261,0,258,276,281,280,267],
[284,276,271,287,293,0,276,304,279,291],
[281,283,257,262,275,275,0,294,260,273],
[272,272,250,267,270,247,257,0,262,286],
[277,276,279,265,271,272,291,289,0,278],
[274,279,263,255,284,260,278,265,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,260,281,282,274,273,278,280,275],
[273,0,254,287,286,297,269,289,295,284],
[291,297,0,276,281,277,267,292,290,285],
[270,264,275,0,279,287,282,275,280,268],
[269,265,270,272,0,286,273,284,295,283],
[277,254,274,264,265,0,272,275,275,273],
[278,282,284,269,278,279,0,287,290,280],
[273,262,259,276,267,276,264,0,293,273],
[271,256,261,271,256,276,261,258,0,274],
[276,267,266,283,268,278,271,278,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,278,288,281,268,275,275,272,289],
[260,0,272,265,279,268,273,267,270,282],
[273,279,0,268,289,278,292,282,274,288],
[263,286,283,0,276,268,273,275,276,279],
[270,272,262,275,0,279,264,270,264,270],
[283,283,273,283,272,0,281,270,267,283],
[276,278,259,278,287,270,0,275,275,283],
[276,284,269,276,281,281,276,0,276,282],
[279,281,277,275,287,284,276,275,0,281],
[262,269,263,272,281,268,268,269,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,248,259,242,255,266,276,266,262],
[285,0,258,275,251,265,261,276,267,263],
[303,293,0,277,283,285,298,299,273,280],
[292,276,274,0,278,266,277,270,276,274],
[309,300,268,273,0,281,269,303,252,264],
[296,286,266,285,270,0,291,293,279,266],
[285,290,253,274,282,260,0,280,281,269],
[275,275,252,281,248,258,271,0,269,262],
[285,284,278,275,299,272,270,282,0,275],
[289,288,271,277,287,285,282,289,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,278,286,264,277,268,278,275,283],
[265,0,265,276,265,282,294,267,272,283],
[273,286,0,282,287,269,269,281,258,269],
[265,275,269,0,266,301,267,276,277,295],
[287,286,264,285,0,282,290,295,275,298],
[274,269,282,250,269,0,274,267,281,279],
[283,257,282,284,261,277,0,272,278,278],
[273,284,270,275,256,284,279,0,270,275],
[276,279,293,274,276,270,273,281,0,289],
[268,268,282,256,253,272,273,276,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,236,252,258,245,268,267,236,234],
[288,0,270,293,280,290,291,300,250,276],
[315,281,0,293,296,312,286,296,271,294],
[299,258,258,0,277,267,267,293,247,245],
[293,271,255,274,0,271,253,281,247,266],
[306,261,239,284,280,0,272,290,268,274],
[283,260,265,284,298,279,0,284,279,280],
[284,251,255,258,270,261,267,0,243,266],
[315,301,280,304,304,283,272,308,0,303],
[317,275,257,306,285,277,271,285,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,257,280,290,275,263,289,286,289],
[285,0,266,275,299,280,284,283,261,270],
[294,285,0,287,283,271,286,308,292,288],
[271,276,264,0,280,248,263,283,263,259],
[261,252,268,271,0,246,254,274,265,262],
[276,271,280,303,305,0,308,315,271,293],
[288,267,265,288,297,243,0,300,265,268],
[262,268,243,268,277,236,251,0,254,278],
[265,290,259,288,286,280,286,297,0,276],
[262,281,263,292,289,258,283,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,282,277,293,305,324,288,275,292],
[244,0,243,268,266,266,292,255,264,268],
[269,308,0,273,302,296,321,281,269,297],
[274,283,278,0,285,304,305,278,281,295],
[258,285,249,266,0,283,287,266,271,243],
[246,285,255,247,268,0,285,261,276,238],
[227,259,230,246,264,266,0,240,267,251],
[263,296,270,273,285,290,311,0,282,277],
[276,287,282,270,280,275,284,269,0,274],
[259,283,254,256,308,313,300,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,268,284,306,260,269,273,288,299],
[244,0,255,296,274,261,246,271,282,287],
[283,296,0,304,321,295,283,272,281,258],
[267,255,247,0,329,276,255,269,266,275],
[245,277,230,222,0,247,259,246,223,260],
[291,290,256,275,304,0,254,264,259,264],
[282,305,268,296,292,297,0,282,274,299],
[278,280,279,282,305,287,269,0,256,290],
[263,269,270,285,328,292,277,295,0,310],
[252,264,293,276,291,287,252,261,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,257,288,266,264,283,279,248,287],
[283,0,264,281,266,277,271,285,265,300],
[294,287,0,288,295,291,304,286,267,298],
[263,270,263,0,279,264,267,270,253,265],
[285,285,256,272,0,279,275,280,277,287],
[287,274,260,287,272,0,275,278,259,292],
[268,280,247,284,276,276,0,287,253,283],
[272,266,265,281,271,273,264,0,259,271],
[303,286,284,298,274,292,298,292,0,301],
[264,251,253,286,264,259,268,280,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,245,234,247,246,225,330,257,308],
[242,0,231,245,255,253,257,256,244,259],
[306,320,0,340,271,320,235,341,309,337],
[317,306,211,0,244,311,297,331,238,296],
[304,296,280,307,0,345,236,319,272,258],
[305,298,231,240,206,0,232,346,283,271],
[326,294,316,254,315,319,0,295,296,293],
[221,295,210,220,232,205,256,0,182,272],
[294,307,242,313,279,268,255,369,0,323],
[243,292,214,255,293,280,258,279,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,292,266,292,288,283,307,287,306],
[265,0,277,267,285,285,271,280,267,284],
[259,274,0,284,278,288,267,284,269,287],
[285,284,267,0,286,276,287,299,273,295],
[259,266,273,265,0,274,263,298,268,286],
[263,266,263,275,277,0,272,287,280,284],
[268,280,284,264,288,279,0,282,264,274],
[244,271,267,252,253,264,269,0,262,274],
[264,284,282,278,283,271,287,289,0,291],
[245,267,264,256,265,267,277,277,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,285,264,300,263,287,278,260,289],
[271,0,271,262,276,249,312,299,287,285],
[266,280,0,267,320,260,309,248,286,306],
[287,289,284,0,299,272,295,300,300,269],
[251,275,231,252,0,241,273,249,275,270],
[288,302,291,279,310,0,294,281,271,295],
[264,239,242,256,278,257,0,249,245,244],
[273,252,303,251,302,270,302,0,276,289],
[291,264,265,251,276,280,306,275,0,283],
[262,266,245,282,281,256,307,262,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,274,293,263,297,273,295,329,291],
[261,0,260,259,264,263,249,250,288,274],
[277,291,0,285,285,272,277,291,296,280],
[258,292,266,0,277,258,258,265,297,289],
[288,287,266,274,0,268,263,295,292,307],
[254,288,279,293,283,0,247,280,303,284],
[278,302,274,293,288,304,0,302,298,319],
[256,301,260,286,256,271,249,0,282,273],
[222,263,255,254,259,248,253,269,0,280],
[260,277,271,262,244,267,232,278,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,274,251,234,284,258,235,250,261],
[260,0,260,255,278,268,280,253,218,278],
[277,291,0,257,269,284,283,239,248,274],
[300,296,294,0,270,278,299,264,255,288],
[317,273,282,281,0,269,298,265,277,299],
[267,283,267,273,282,0,283,245,247,298],
[293,271,268,252,253,268,0,229,222,257],
[316,298,312,287,286,306,322,0,268,305],
[301,333,303,296,274,304,329,283,0,320],
[290,273,277,263,252,253,294,246,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,258,271,285,263,286,274,275,298],
[291,0,285,252,265,253,286,281,293,284],
[293,266,0,277,292,267,290,260,283,275],
[280,299,274,0,284,266,292,275,290,288],
[266,286,259,267,0,254,277,274,273,277],
[288,298,284,285,297,0,285,286,296,264],
[265,265,261,259,274,266,0,276,272,265],
[277,270,291,276,277,265,275,0,272,298],
[276,258,268,261,278,255,279,279,0,261],
[253,267,276,263,274,287,286,253,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,264,273,255,239,309,260,248,274],
[306,0,284,261,298,283,269,280,318,335],
[287,267,0,287,275,286,298,294,253,300],
[278,290,264,0,281,274,270,282,281,292],
[296,253,276,270,0,301,329,262,277,307],
[312,268,265,277,250,0,303,287,294,322],
[242,282,253,281,222,248,0,263,230,252],
[291,271,257,269,289,264,288,0,275,299],
[303,233,298,270,274,257,321,276,0,291],
[277,216,251,259,244,229,299,252,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,297,276,285,265,300,306,285,281],
[297,0,265,301,287,254,233,240,314,268],
[254,286,0,261,234,256,182,201,270,216],
[275,250,290,0,291,280,267,256,304,261],
[266,264,317,260,0,273,276,229,329,229],
[286,297,295,271,278,0,259,232,284,245],
[251,318,369,284,275,292,0,314,248,286],
[245,311,350,295,322,319,237,0,271,237],
[266,237,281,247,222,267,303,280,0,250],
[270,283,335,290,322,306,265,314,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,267,280,290,265,271,286,258,265],
[283,0,273,279,286,302,265,303,276,270],
[284,278,0,272,293,281,267,280,273,289],
[271,272,279,0,285,288,276,292,268,264],
[261,265,258,266,0,261,255,254,251,245],
[286,249,270,263,290,0,256,288,249,251],
[280,286,284,275,296,295,0,292,260,282],
[265,248,271,259,297,263,259,0,265,269],
[293,275,278,283,300,302,291,286,0,282],
[286,281,262,287,306,300,269,282,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,278,287,256,287,311,285,286,298],
[292,0,275,304,290,281,289,314,304,300],
[273,276,0,279,273,256,296,308,294,286],
[264,247,272,0,256,258,268,291,277,286],
[295,261,278,295,0,261,282,297,271,284],
[264,270,295,293,290,0,293,291,275,286],
[240,262,255,283,269,258,0,294,273,286],
[266,237,243,260,254,260,257,0,247,260],
[265,247,257,274,280,276,278,304,0,272],
[253,251,265,265,267,265,265,291,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,283,287,255,278,295,277,288,302],
[269,0,232,296,255,239,253,255,253,257],
[268,319,0,297,283,280,265,276,275,288],
[264,255,254,0,256,243,258,231,251,277],
[296,296,268,295,0,269,283,289,305,296],
[273,312,271,308,282,0,280,283,280,283],
[256,298,286,293,268,271,0,289,269,282],
[274,296,275,320,262,268,262,0,283,246],
[263,298,276,300,246,271,282,268,0,265],
[249,294,263,274,255,268,269,305,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,312,278,270,279,286,289,297,314],
[261,0,285,258,260,290,280,275,272,286],
[239,266,0,228,253,272,274,278,288,289],
[273,293,323,0,295,285,305,275,283,302],
[281,291,298,256,0,292,287,297,289,305],
[272,261,279,266,259,0,275,276,280,303],
[265,271,277,246,264,276,0,274,282,273],
[262,276,273,276,254,275,277,0,262,281],
[254,279,263,268,262,271,269,289,0,290],
[237,265,262,249,246,248,278,270,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,269,276,285,272,291,271,294,280],
[284,0,275,284,277,281,277,269,286,281],
[282,276,0,264,270,269,273,255,274,274],
[275,267,287,0,278,276,290,296,291,272],
[266,274,281,273,0,265,274,275,270,274],
[279,270,282,275,286,0,268,275,276,242],
[260,274,278,261,277,283,0,280,269,275],
[280,282,296,255,276,276,271,0,282,256],
[257,265,277,260,281,275,282,269,0,270],
[271,270,277,279,277,309,276,295,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,296,200,269,246,328,282,295,297],
[292,0,267,295,266,255,298,282,292,292],
[255,284,0,257,256,247,338,327,281,312],
[351,256,294,0,296,285,285,352,285,340],
[282,285,295,255,0,247,310,296,295,279],
[305,296,304,266,304,0,320,269,293,306],
[223,253,213,266,241,231,0,280,294,249],
[269,269,224,199,255,282,271,0,255,281],
[256,259,270,266,256,258,257,296,0,256],
[254,259,239,211,272,245,302,270,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,278,295,281,272,275,277,299,287],
[262,0,267,267,260,257,266,271,278,242],
[273,284,0,277,284,285,277,283,275,261],
[256,284,274,0,268,264,259,260,271,258],
[270,291,267,283,0,267,273,268,281,254],
[279,294,266,287,284,0,276,286,294,263],
[276,285,274,292,278,275,0,275,293,259],
[274,280,268,291,283,265,276,0,275,260],
[252,273,276,280,270,257,258,276,0,263],
[264,309,290,293,297,288,292,291,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,283,259,258,276,282,259,277,249],
[284,0,292,289,272,285,277,281,285,283],
[268,259,0,282,262,262,276,269,269,251],
[292,262,269,0,272,271,277,270,282,254],
[293,279,289,279,0,285,288,295,282,261],
[275,266,289,280,266,0,281,275,276,273],
[269,274,275,274,263,270,0,265,273,256],
[292,270,282,281,256,276,286,0,288,272],
[274,266,282,269,269,275,278,263,0,263],
[302,268,300,297,290,278,295,279,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,281,281,288,269,278,292,262,282],
[266,0,275,269,264,283,266,272,269,277],
[270,276,0,278,284,271,275,287,286,289],
[270,282,273,0,282,273,271,282,274,283],
[263,287,267,269,0,263,281,287,274,282],
[282,268,280,278,288,0,274,298,278,278],
[273,285,276,280,270,277,0,269,270,279],
[259,279,264,269,264,253,282,0,265,279],
[289,282,265,277,277,273,281,286,0,270],
[269,274,262,268,269,273,272,272,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,287,272,271,289,289,268,295,297],
[294,0,267,271,311,288,269,289,284,314],
[264,284,0,265,286,275,269,274,277,296],
[279,280,286,0,284,253,264,258,265,303],
[280,240,265,267,0,261,258,246,252,303],
[262,263,276,298,290,0,277,272,290,295],
[262,282,282,287,293,274,0,262,268,297],
[283,262,277,293,305,279,289,0,311,308],
[256,267,274,286,299,261,283,240,0,291],
[254,237,255,248,248,256,254,243,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,271,295,286,287,292,276,284,297],
[280,0,290,291,274,280,279,301,286,303],
[280,261,0,279,274,258,292,294,275,292],
[256,260,272,0,257,264,282,278,266,277],
[265,277,277,294,0,262,278,276,272,275],
[264,271,293,287,289,0,292,291,282,297],
[259,272,259,269,273,259,0,281,261,282],
[275,250,257,273,275,260,270,0,264,289],
[267,265,276,285,279,269,290,287,0,288],
[254,248,259,274,276,254,269,262,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,255,202,237,267,206,244,237,245],
[292,0,290,245,252,311,240,244,261,261],
[296,261,0,240,259,356,269,275,285,275],
[349,306,311,0,337,336,264,318,309,322],
[314,299,292,214,0,328,295,268,285,287],
[284,240,195,215,223,0,243,240,273,194],
[345,311,282,287,256,308,0,294,290,302],
[307,307,276,233,283,311,257,0,268,265],
[314,290,266,242,266,278,261,283,0,268],
[306,290,276,229,264,357,249,286,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,302,288,273,281,272,295,285,298],
[280,0,296,286,271,289,290,292,307,296],
[249,255,0,260,280,272,274,274,272,290],
[263,265,291,0,263,248,285,271,285,294],
[278,280,271,288,0,269,279,275,297,298],
[270,262,279,303,282,0,263,287,284,289],
[279,261,277,266,272,288,0,280,286,296],
[256,259,277,280,276,264,271,0,268,291],
[266,244,279,266,254,267,265,283,0,282],
[253,255,261,257,253,262,255,260,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,344,274,342,344,346,204,205,204],
[413,0,482,345,204,413,482,344,205,273],
[207,69,0,136,204,135,137,135,0,204],
[277,206,415,0,206,277,346,137,206,206],
[209,347,347,345,0,344,347,209,278,278],
[207,138,416,274,207,0,276,138,207,138],
[205,69,414,205,204,275,0,136,274,204],
[347,207,416,414,342,413,415,0,276,206],
[346,346,551,345,273,344,277,275,0,273],
[347,278,347,345,273,413,347,345,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,367,368,184,183,0,551,551,184,367],
[184,0,184,0,184,184,368,184,184,184],
[183,367,0,367,183,183,551,367,184,367],
[367,551,184,0,367,367,551,367,184,367],
[368,367,368,184,0,368,551,551,368,551],
[551,367,368,184,183,0,551,551,184,367],
[0,183,0,0,0,0,0,367,184,367],
[0,367,184,184,0,0,184,0,0,183],
[367,367,367,367,183,367,367,551,0,367],
[184,367,184,184,0,184,184,368,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,262,301,281,297,283,287,291,303],
[292,0,303,289,342,274,274,310,317,301],
[289,248,0,292,296,277,268,295,298,314],
[250,262,259,0,274,255,256,243,262,252],
[270,209,255,277,0,288,244,270,264,268],
[254,277,274,296,263,0,280,277,317,294],
[268,277,283,295,307,271,0,293,268,297],
[264,241,256,308,281,274,258,0,287,263],
[260,234,253,289,287,234,283,264,0,290],
[248,250,237,299,283,257,254,288,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,302,304,270,247,248,292,279,299],
[231,0,278,258,248,235,215,305,248,273],
[249,273,0,248,259,227,236,309,246,284],
[247,293,303,0,275,262,251,302,277,289],
[281,303,292,276,0,254,290,288,274,280],
[304,316,324,289,297,0,268,328,266,279],
[303,336,315,300,261,283,0,328,313,286],
[259,246,242,249,263,223,223,0,249,264],
[272,303,305,274,277,285,238,302,0,297],
[252,278,267,262,271,272,265,287,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,275,276,279,298,184,218,249,284],
[243,0,344,249,267,308,237,306,256,287],
[276,207,0,253,235,257,190,175,238,228],
[275,302,298,0,317,286,222,243,289,287],
[272,284,316,234,0,272,222,240,283,253],
[253,243,294,265,279,0,199,223,231,298],
[367,314,361,329,329,352,0,274,349,272],
[333,245,376,308,311,328,277,0,325,267],
[302,295,313,262,268,320,202,226,0,285],
[267,264,323,264,298,253,279,284,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,260,286,291,296,293,277,250,272],
[285,0,308,274,274,277,312,275,257,286],
[291,243,0,245,269,275,271,272,263,263],
[265,277,306,0,266,325,280,303,247,287],
[260,277,282,285,0,287,273,315,256,224],
[255,274,276,226,264,0,269,255,325,238],
[258,239,280,271,278,282,0,252,291,289],
[274,276,279,248,236,296,299,0,257,298],
[301,294,288,304,295,226,260,294,0,250],
[279,265,288,264,327,313,262,253,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,258,273,243,258,246,244,268,256],
[315,0,265,310,239,260,310,240,310,285],
[293,286,0,298,287,301,257,293,311,281],
[278,241,253,0,241,297,165,234,285,246],
[308,312,264,310,0,294,277,288,338,289],
[293,291,250,254,257,0,267,256,264,278],
[305,241,294,386,274,284,0,243,315,259],
[307,311,258,317,263,295,308,0,337,293],
[283,241,240,266,213,287,236,214,0,249],
[295,266,270,305,262,273,292,258,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,278,279,272,267,294,282,261,274],
[277,0,257,277,252,285,283,283,260,273],
[273,294,0,294,268,290,299,279,265,264],
[272,274,257,0,246,267,259,258,263,243],
[279,299,283,305,0,280,279,290,273,285],
[284,266,261,284,271,0,282,275,260,269],
[257,268,252,292,272,269,0,263,258,259],
[269,268,272,293,261,276,288,0,254,269],
[290,291,286,288,278,291,293,297,0,260],
[277,278,287,308,266,282,292,282,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,339,254,296,210,294,382,380,381],
[255,0,298,256,382,171,297,255,299,340],
[212,253,0,296,212,211,295,338,424,296],
[297,295,255,0,296,213,338,339,465,254],
[255,169,339,255,0,255,254,254,340,212],
[341,380,340,338,296,0,338,466,381,255],
[257,254,256,213,297,213,0,340,382,255],
[169,296,213,212,297,85,211,0,381,212],
[171,252,127,86,211,170,169,170,0,169],
[170,211,255,297,339,296,296,339,382,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 551, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_10_551.csv", index=False, header=False)
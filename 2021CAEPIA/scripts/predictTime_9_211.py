
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,129,101,145,111,130,125,122,123],
[82,0,76,92,101,111,119,111,107],
[110,135,0,129,97,138,127,148,130],
[66,119,82,0,100,111,104,81,126],
[100,110,114,111,0,126,119,124,112],
[81,100,73,100,85,0,114,112,106],
[86,92,84,107,92,97,0,106,126],
[89,100,63,130,87,99,105,0,129],
[88,104,81,85,99,105,85,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,95,70,108,71,112,104,66],
[75,0,62,70,136,108,107,34,103],
[116,149,0,148,140,141,78,137,111],
[141,141,63,0,104,104,136,63,99],
[103,75,71,107,0,108,107,67,107],
[140,103,70,107,103,0,79,67,41],
[99,104,133,75,104,132,0,63,131],
[107,177,74,148,144,144,148,0,107],
[145,108,100,112,104,170,80,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,115,110,98,85,109,92,155],
[84,0,124,113,108,99,127,116,158],
[96,87,0,110,112,78,94,78,138],
[101,98,101,0,123,93,99,116,161],
[113,103,99,88,0,113,84,95,133],
[126,112,133,118,98,0,101,100,155],
[102,84,117,112,127,110,0,95,112],
[119,95,133,95,116,111,116,0,131],
[56,53,73,50,78,56,99,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,117,101,119,110,115,103,102],
[109,0,109,96,110,117,129,107,115],
[94,102,0,100,114,90,106,106,99],
[110,115,111,0,125,113,128,126,103],
[92,101,97,86,0,90,104,87,97],
[101,94,121,98,121,0,107,110,121],
[96,82,105,83,107,104,0,97,84],
[108,104,105,85,124,101,114,0,92],
[109,96,112,108,114,90,127,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,79,137,100,97,97,125,97],
[112,0,103,92,113,96,105,108,94],
[132,108,0,120,111,141,96,117,117],
[74,119,91,0,87,103,103,95,89],
[111,98,100,124,0,134,121,102,117],
[114,115,70,108,77,0,92,112,93],
[114,106,115,108,90,119,0,113,98],
[86,103,94,116,109,99,98,0,109],
[114,117,94,122,94,118,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,97,90,83,100,110,97,97],
[109,0,88,90,106,81,99,100,94],
[114,123,0,102,102,100,123,105,100],
[121,121,109,0,111,105,123,101,101],
[128,105,109,100,0,102,104,116,93],
[111,130,111,106,109,0,108,102,102],
[101,112,88,88,107,103,0,104,109],
[114,111,106,110,95,109,107,0,97],
[114,117,111,110,118,109,102,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,115,99,102,95,103,114,89],
[98,0,103,97,106,101,105,100,93],
[96,108,0,96,101,102,100,110,96],
[112,114,115,0,113,107,93,112,95],
[109,105,110,98,0,98,104,106,95],
[116,110,109,104,113,0,109,115,107],
[108,106,111,118,107,102,0,120,105],
[97,111,101,99,105,96,91,0,91],
[122,118,115,116,116,104,106,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,115,109,95,98,108,101],
[95,0,95,106,106,82,92,85,91],
[111,116,0,121,101,104,104,103,98],
[96,105,90,0,91,97,94,91,101],
[102,105,110,120,0,102,90,101,89],
[116,129,107,114,109,0,104,105,108],
[113,119,107,117,121,107,0,106,102],
[103,126,108,120,110,106,105,0,100],
[110,120,113,110,122,103,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,106,100,113,112,91,104],
[104,0,102,96,116,113,108,100,106],
[103,109,0,103,119,117,110,114,114],
[105,115,108,0,116,128,117,108,101],
[111,95,92,95,0,107,98,92,95],
[98,98,94,83,104,0,93,83,100],
[99,103,101,94,113,118,0,96,111],
[120,111,97,103,119,128,115,0,114],
[107,105,97,110,116,111,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,143,143,145,145,211,143,73],
[139,0,71,139,73,73,139,73,73],
[68,140,0,68,68,68,140,211,139],
[68,72,143,0,145,145,211,145,73],
[66,138,143,66,0,0,138,209,71],
[66,138,143,66,211,0,209,209,71],
[0,72,71,0,73,2,0,143,71],
[68,138,0,66,2,2,68,0,2],
[138,138,72,138,140,140,140,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,105,129,136,88,100,120],
[101,0,77,90,103,104,85,79,85],
[104,134,0,110,127,98,94,106,129],
[106,121,101,0,129,101,100,93,87],
[82,108,84,82,0,92,81,98,108],
[75,107,113,110,119,0,83,115,110],
[123,126,117,111,130,128,0,120,105],
[111,132,105,118,113,96,91,0,109],
[91,126,82,124,103,101,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,97,114,110,98,113,111,107],
[103,0,93,100,101,96,103,91,104],
[114,118,0,113,114,105,118,102,115],
[97,111,98,0,100,92,104,92,94],
[101,110,97,111,0,94,106,101,107],
[113,115,106,119,117,0,102,96,113],
[98,108,93,107,105,109,0,112,109],
[100,120,109,119,110,115,99,0,109],
[104,107,96,117,104,98,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,129,84,91,162,61,107],
[104,0,69,82,74,98,104,66,60],
[119,142,0,131,89,92,113,123,93],
[82,129,80,0,104,91,155,90,100],
[127,137,122,107,0,119,146,91,88],
[120,113,119,120,92,0,172,105,92],
[49,107,98,56,65,39,0,87,42],
[150,145,88,121,120,106,124,0,89],
[104,151,118,111,123,119,169,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,110,92,102,97,101,85],
[109,0,88,112,111,121,107,103,99],
[118,123,0,122,104,126,100,108,106],
[101,99,89,0,92,98,83,94,91],
[119,100,107,119,0,106,115,101,99],
[109,90,85,113,105,0,112,102,100],
[114,104,111,128,96,99,0,104,101],
[110,108,103,117,110,109,107,0,108],
[126,112,105,120,112,111,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,100,100,95,98,80,91,93],
[142,0,122,131,118,128,97,134,115],
[111,89,0,116,102,104,94,96,114],
[111,80,95,0,97,77,87,111,85],
[116,93,109,114,0,103,89,99,101],
[113,83,107,134,108,0,114,127,122],
[131,114,117,124,122,97,0,107,103],
[120,77,115,100,112,84,104,0,101],
[118,96,97,126,110,89,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,104,101,109,103,96,96],
[108,0,105,109,97,95,110,109,108],
[106,106,0,118,99,106,99,107,103],
[107,102,93,0,95,90,110,98,94],
[110,114,112,116,0,93,116,106,90],
[102,116,105,121,118,0,110,106,90],
[108,101,112,101,95,101,0,95,97],
[115,102,104,113,105,105,116,0,108],
[115,103,108,117,121,121,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,86,101,102,84,109,114,90],
[117,0,109,96,92,79,93,109,116],
[125,102,0,123,100,92,105,139,80],
[110,115,88,0,97,107,115,129,108],
[109,119,111,114,0,79,109,112,97],
[127,132,119,104,132,0,127,139,124],
[102,118,106,96,102,84,0,123,94],
[97,102,72,82,99,72,88,0,92],
[121,95,131,103,114,87,117,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,111,116,121,119,119,105,115],
[89,0,95,108,105,110,118,119,102],
[100,116,0,114,105,116,120,110,114],
[95,103,97,0,109,120,115,107,111],
[90,106,106,102,0,99,116,98,100],
[92,101,95,91,112,0,104,97,91],
[92,93,91,96,95,107,0,103,106],
[106,92,101,104,113,114,108,0,102],
[96,109,97,100,111,120,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,105,106,101,108,114,108],
[98,0,112,107,119,102,118,114,125],
[104,99,0,111,101,78,102,104,92],
[106,104,100,0,94,104,106,88,106],
[105,92,110,117,0,106,116,111,131],
[110,109,133,107,105,0,105,115,111],
[103,93,109,105,95,106,0,113,119],
[97,97,107,123,100,96,98,0,106],
[103,86,119,105,80,100,92,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,97,102,98,103,101,88,103],
[109,0,98,107,97,115,106,104,104],
[114,113,0,123,99,112,113,109,115],
[109,104,88,0,101,96,111,79,100],
[113,114,112,110,0,108,113,101,125],
[108,96,99,115,103,0,111,103,106],
[110,105,98,100,98,100,0,93,109],
[123,107,102,132,110,108,118,0,123],
[108,107,96,111,86,105,102,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,104,105,109,109,115,115],
[111,0,102,115,112,107,113,118,111],
[103,109,0,114,103,110,116,118,112],
[107,96,97,0,99,98,105,112,114],
[106,99,108,112,0,103,108,108,123],
[102,104,101,113,108,0,115,111,112],
[102,98,95,106,103,96,0,96,108],
[96,93,93,99,103,100,115,0,107],
[96,100,99,97,88,99,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,121,103,110,113,112,112,105],
[93,0,100,97,99,108,103,98,108],
[90,111,0,98,114,113,113,94,99],
[108,114,113,0,110,114,109,104,102],
[101,112,97,101,0,103,113,102,104],
[98,103,98,97,108,0,103,94,91],
[99,108,98,102,98,108,0,92,100],
[99,113,117,107,109,117,119,0,104],
[106,103,112,109,107,120,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,90,91,95,106,93,104],
[107,0,97,92,89,108,102,103,93],
[99,114,0,79,81,99,98,98,87],
[121,119,132,0,115,106,101,113,100],
[120,122,130,96,0,122,107,104,113],
[116,103,112,105,89,0,111,119,104],
[105,109,113,110,104,100,0,93,86],
[118,108,113,98,107,92,118,0,103],
[107,118,124,111,98,107,125,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,84,70,100,100,114,99,104],
[111,0,83,90,99,93,106,112,75],
[127,128,0,100,105,108,122,129,108],
[141,121,111,0,104,132,122,136,117],
[111,112,106,107,0,102,118,115,102],
[111,118,103,79,109,0,114,113,101],
[97,105,89,89,93,97,0,112,94],
[112,99,82,75,96,98,99,0,107],
[107,136,103,94,109,110,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,96,111,122,99,105,99],
[110,0,92,99,91,111,104,94,105],
[111,119,0,102,122,102,102,105,102],
[115,112,109,0,119,113,112,97,111],
[100,120,89,92,0,98,102,88,97],
[89,100,109,98,113,0,95,90,95],
[112,107,109,99,109,116,0,110,98],
[106,117,106,114,123,121,101,0,105],
[112,106,109,100,114,116,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,99,105,85,108,94,98],
[108,0,115,122,89,86,116,102,105],
[102,96,0,86,89,99,105,88,86],
[112,89,125,0,115,115,109,127,123],
[106,122,122,96,0,133,99,129,110],
[126,125,112,96,78,0,132,96,105],
[103,95,106,102,112,79,0,95,82],
[117,109,123,84,82,115,116,0,99],
[113,106,125,88,101,106,129,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,84,111,111,89,92,125,99],
[116,0,121,134,108,110,119,131,101],
[127,90,0,129,114,103,107,129,95],
[100,77,82,0,94,101,87,108,94],
[100,103,97,117,0,123,103,136,109],
[122,101,108,110,88,0,101,126,97],
[119,92,104,124,108,110,0,132,104],
[86,80,82,103,75,85,79,0,67],
[112,110,116,117,102,114,107,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,116,111,106,112,114,104,108],
[92,0,112,105,100,92,97,105,102],
[95,99,0,92,95,90,104,113,100],
[100,106,119,0,114,101,110,112,115],
[105,111,116,97,0,111,108,111,111],
[99,119,121,110,100,0,110,100,114],
[97,114,107,101,103,101,0,106,101],
[107,106,98,99,100,111,105,0,105],
[103,109,111,96,100,97,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,106,100,99,103,117,89,105],
[120,0,104,95,105,101,112,101,110],
[105,107,0,103,97,104,106,97,105],
[111,116,108,0,101,111,121,106,106],
[112,106,114,110,0,110,110,102,110],
[108,110,107,100,101,0,124,104,113],
[94,99,105,90,101,87,0,94,96],
[122,110,114,105,109,107,117,0,112],
[106,101,106,105,101,98,115,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,148,123,120,148,80,101,139],
[133,0,113,96,65,164,134,102,115],
[63,98,0,93,101,131,100,102,114],
[88,115,118,0,115,101,101,88,89],
[91,146,110,96,0,161,132,91,101],
[63,47,80,110,50,0,24,90,64],
[131,77,111,110,79,187,0,120,121],
[110,109,109,123,120,121,91,0,82],
[72,96,97,122,110,147,90,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,115,116,120,78,93,115,108],
[104,0,104,116,96,94,107,105,87],
[96,107,0,109,105,98,104,116,91],
[95,95,102,0,106,94,82,116,107],
[91,115,106,105,0,105,112,124,95],
[133,117,113,117,106,0,102,117,99],
[118,104,107,129,99,109,0,132,99],
[96,106,95,95,87,94,79,0,81],
[103,124,120,104,116,112,112,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,95,109,108,102,107,94,110],
[102,0,110,128,99,132,108,116,118],
[116,101,0,110,114,102,112,108,136],
[102,83,101,0,73,95,96,97,122],
[103,112,97,138,0,122,118,116,115],
[109,79,109,116,89,0,108,101,130],
[104,103,99,115,93,103,0,108,116],
[117,95,103,114,95,110,103,0,134],
[101,93,75,89,96,81,95,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,119,104,118,127,117,99,109],
[105,0,112,108,116,116,118,109,92],
[92,99,0,102,103,104,110,116,101],
[107,103,109,0,111,120,99,115,95],
[93,95,108,100,0,88,102,100,95],
[84,95,107,91,123,0,101,118,86],
[94,93,101,112,109,110,0,104,93],
[112,102,95,96,111,93,107,0,90],
[102,119,110,116,116,125,118,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,106,107,111,113,101,108],
[106,0,109,109,119,109,114,104,111],
[96,102,0,100,90,106,105,111,105],
[105,102,111,0,106,101,104,100,106],
[104,92,121,105,0,100,99,96,105],
[100,102,105,110,111,0,103,106,98],
[98,97,106,107,112,108,0,107,114],
[110,107,100,111,115,105,104,0,111],
[103,100,106,105,106,113,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,78,100,102,105,107,99,86],
[106,0,89,114,100,114,111,99,109],
[133,122,0,117,112,124,104,108,99],
[111,97,94,0,100,112,121,103,91],
[109,111,99,111,0,115,119,104,104],
[106,97,87,99,96,0,103,90,84],
[104,100,107,90,92,108,0,98,87],
[112,112,103,108,107,121,113,0,94],
[125,102,112,120,107,127,124,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,128,90,76,132,113,118,71],
[100,0,112,96,95,138,115,102,97],
[83,99,0,96,110,145,103,113,111],
[121,115,115,0,93,141,113,131,96],
[135,116,101,118,0,134,135,127,119],
[79,73,66,70,77,0,95,104,75],
[98,96,108,98,76,116,0,89,80],
[93,109,98,80,84,107,122,0,78],
[140,114,100,115,92,136,131,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,100,112,103,107,100,109],
[109,0,109,119,125,116,113,101,114],
[106,102,0,106,109,106,109,100,106],
[111,92,105,0,115,108,103,89,103],
[99,86,102,96,0,106,102,97,98],
[108,95,105,103,105,0,99,98,107],
[104,98,102,108,109,112,0,95,100],
[111,110,111,122,114,113,116,0,104],
[102,97,105,108,113,104,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,93,98,110,106,109,118,113],
[102,0,99,110,96,111,107,118,112],
[118,112,0,102,111,112,109,118,115],
[113,101,109,0,110,118,113,111,113],
[101,115,100,101,0,109,116,114,107],
[105,100,99,93,102,0,111,110,99],
[102,104,102,98,95,100,0,117,100],
[93,93,93,100,97,101,94,0,109],
[98,99,96,98,104,112,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,134,128,119,103,100,114],
[100,0,103,92,84,100,103,73,114],
[100,108,0,126,118,115,117,109,85],
[77,119,85,0,103,91,109,82,84],
[83,127,93,108,0,100,104,81,118],
[92,111,96,120,111,0,106,86,89],
[108,108,94,102,107,105,0,80,125],
[111,138,102,129,130,125,131,0,118],
[97,97,126,127,93,122,86,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,99,86,82,104,78,100,95],
[119,0,124,103,106,111,101,113,115],
[112,87,0,95,82,102,101,113,108],
[125,108,116,0,98,118,108,116,128],
[129,105,129,113,0,118,105,119,114],
[107,100,109,93,93,0,89,114,101],
[133,110,110,103,106,122,0,112,108],
[111,98,98,95,92,97,99,0,99],
[116,96,103,83,97,110,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,92,98,106,103,105,90],
[111,0,106,102,98,124,113,115,89],
[116,105,0,98,104,118,100,112,107],
[119,109,113,0,113,117,110,121,102],
[113,113,107,98,0,118,97,108,103],
[105,87,93,94,93,0,104,99,89],
[108,98,111,101,114,107,0,109,104],
[106,96,99,90,103,112,102,0,92],
[121,122,104,109,108,122,107,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,90,101,88,96,101,105,89],
[121,0,95,119,114,110,113,116,109],
[121,116,0,127,102,116,116,118,108],
[110,92,84,0,97,105,106,102,99],
[123,97,109,114,0,108,108,115,115],
[115,101,95,106,103,0,106,107,104],
[110,98,95,105,103,105,0,111,92],
[106,95,93,109,96,104,100,0,101],
[122,102,103,112,96,107,119,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,94,128,122,107,129,101,115],
[87,0,83,100,78,87,98,122,112],
[117,128,0,106,115,83,97,133,107],
[83,111,105,0,100,95,124,148,115],
[89,133,96,111,0,95,104,128,127],
[104,124,128,116,116,0,105,130,136],
[82,113,114,87,107,106,0,105,139],
[110,89,78,63,83,81,106,0,108],
[96,99,104,96,84,75,72,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,131,101,125,115,105,129,111],
[109,0,152,136,136,126,127,120,102],
[80,59,0,83,90,84,64,66,70],
[110,75,128,0,132,103,109,102,88],
[86,75,121,79,0,116,76,103,86],
[96,85,127,108,95,0,95,90,99],
[106,84,147,102,135,116,0,121,128],
[82,91,145,109,108,121,90,0,108],
[100,109,141,123,125,112,83,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,64,107,132,122,107,142,75],
[123,0,78,141,80,121,85,84,106],
[147,133,0,83,152,135,182,152,149],
[104,70,128,0,104,132,107,114,128],
[79,131,59,107,0,124,124,113,73],
[89,90,76,79,87,0,77,99,74],
[104,126,29,104,87,134,0,100,109],
[69,127,59,97,98,112,111,0,65],
[136,105,62,83,138,137,102,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,88,106,89,84,106,88,100],
[109,0,103,109,101,115,119,112,99],
[123,108,0,103,111,115,122,103,119],
[105,102,108,0,89,94,108,109,109],
[122,110,100,122,0,104,116,119,115],
[127,96,96,117,107,0,108,97,113],
[105,92,89,103,95,103,0,93,97],
[123,99,108,102,92,114,118,0,111],
[111,112,92,102,96,98,114,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,103,108,97,99,108,92],
[112,0,100,107,113,97,107,111,95],
[108,111,0,114,112,102,101,100,106],
[108,104,97,0,117,98,104,99,98],
[103,98,99,94,0,104,92,102,87],
[114,114,109,113,107,0,105,104,103],
[112,104,110,107,119,106,0,100,94],
[103,100,111,112,109,107,111,0,104],
[119,116,105,113,124,108,117,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,96,97,96,94,108,110],
[107,0,97,99,110,98,104,104,97],
[104,114,0,104,105,99,107,104,102],
[115,112,107,0,109,101,95,112,115],
[114,101,106,102,0,101,94,106,107],
[115,113,112,110,110,0,107,117,104],
[117,107,104,116,117,104,0,112,118],
[103,107,107,99,105,94,99,0,105],
[101,114,109,96,104,107,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,105,114,107,105,97,105],
[105,0,100,117,104,113,107,112,115],
[114,111,0,111,100,119,113,110,110],
[106,94,100,0,108,107,109,106,102],
[97,107,111,103,0,118,120,109,117],
[104,98,92,104,93,0,105,108,105],
[106,104,98,102,91,106,0,103,104],
[114,99,101,105,102,103,108,0,107],
[106,96,101,109,94,106,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,116,85,109,100,91,81],
[113,0,94,105,90,94,97,92,74],
[108,117,0,105,78,85,92,96,79],
[95,106,106,0,102,101,103,112,96],
[126,121,133,109,0,126,106,92,115],
[102,117,126,110,85,0,104,89,101],
[111,114,119,108,105,107,0,97,95],
[120,119,115,99,119,122,114,0,99],
[130,137,132,115,96,110,116,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,116,117,121,146,110,112],
[105,0,105,105,113,118,138,127,88],
[110,106,0,118,105,119,110,91,104],
[95,106,93,0,110,114,136,115,128],
[94,98,106,101,0,123,131,109,101],
[90,93,92,97,88,0,121,94,92],
[65,73,101,75,80,90,0,103,84],
[101,84,120,96,102,117,108,0,96],
[99,123,107,83,110,119,127,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,102,85,97,108,91,105,82],
[132,0,117,125,115,130,119,92,88],
[109,94,0,100,105,98,98,94,91],
[126,86,111,0,106,111,114,116,108],
[114,96,106,105,0,90,83,79,59],
[103,81,113,100,121,0,124,96,85],
[120,92,113,97,128,87,0,100,105],
[106,119,117,95,132,115,111,0,116],
[129,123,120,103,152,126,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,111,107,103,112,105,108,115],
[90,0,96,100,85,95,103,97,107],
[100,115,0,104,92,88,102,102,102],
[104,111,107,0,113,99,109,108,110],
[108,126,119,98,0,103,114,108,106],
[99,116,123,112,108,0,110,111,110],
[106,108,109,102,97,101,0,101,108],
[103,114,109,103,103,100,110,0,109],
[96,104,109,101,105,101,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,121,101,95,125,114,97,106],
[104,0,101,96,128,129,107,90,116],
[90,110,0,100,113,73,66,71,69],
[110,115,111,0,105,103,119,96,104],
[116,83,98,106,0,94,88,101,102],
[86,82,138,108,117,0,120,108,85],
[97,104,145,92,123,91,0,88,76],
[114,121,140,115,110,103,123,0,88],
[105,95,142,107,109,126,135,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,110,109,117,109,104,108],
[103,0,105,107,99,116,94,101,109],
[100,106,0,102,107,98,98,106,96],
[101,104,109,0,112,111,103,101,100],
[102,112,104,99,0,116,92,108,98],
[94,95,113,100,95,0,90,95,94],
[102,117,113,108,119,121,0,101,99],
[107,110,105,110,103,116,110,0,110],
[103,102,115,111,113,117,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,94,99,103,101,110,100],
[110,0,113,118,107,103,109,109,110],
[102,98,0,107,101,95,95,102,99],
[117,93,104,0,107,95,97,110,110],
[112,104,110,104,0,99,104,106,99],
[108,108,116,116,112,0,104,114,112],
[110,102,116,114,107,107,0,107,117],
[101,102,109,101,105,97,104,0,118],
[111,101,112,101,112,99,94,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,96,103,104,94,105,114,98],
[107,0,90,103,102,96,110,117,107],
[115,121,0,121,104,107,119,125,109],
[108,108,90,0,109,102,106,119,106],
[107,109,107,102,0,95,108,106,111],
[117,115,104,109,116,0,120,112,114],
[106,101,92,105,103,91,0,111,104],
[97,94,86,92,105,99,100,0,114],
[113,104,102,105,100,97,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,114,118,103,117,114,121],
[103,0,96,102,111,91,113,106,111],
[106,115,0,102,116,113,116,112,113],
[97,109,109,0,113,102,118,111,109],
[93,100,95,98,0,99,111,94,109],
[108,120,98,109,112,0,117,115,105],
[94,98,95,93,100,94,0,100,95],
[97,105,99,100,117,96,111,0,105],
[90,100,98,102,102,106,116,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,118,113,111,93,114,130,97],
[96,0,83,104,92,115,95,105,87],
[93,128,0,80,98,98,126,108,83],
[98,107,131,0,97,111,111,106,93],
[100,119,113,114,0,132,121,120,106],
[118,96,113,100,79,0,120,102,81],
[97,116,85,100,90,91,0,99,92],
[81,106,103,105,91,109,112,0,56],
[114,124,128,118,105,130,119,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,127,84,108,131,114,118,105],
[97,0,106,86,97,109,98,106,95],
[84,105,0,94,100,91,83,91,95],
[127,125,117,0,118,132,102,115,125],
[103,114,111,93,0,87,99,105,97],
[80,102,120,79,124,0,107,104,107],
[97,113,128,109,112,104,0,127,108],
[93,105,120,96,106,107,84,0,97],
[106,116,116,86,114,104,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,91,85,98,97,84,106,107],
[132,0,111,116,103,122,114,115,115],
[120,100,0,106,112,117,113,111,117],
[126,95,105,0,113,116,107,132,107],
[113,108,99,98,0,115,104,108,118],
[114,89,94,95,96,0,90,126,109],
[127,97,98,104,107,121,0,140,128],
[105,96,100,79,103,85,71,0,91],
[104,96,94,104,93,102,83,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,142,97,123,126,120,145,130],
[133,0,128,92,147,150,108,129,104],
[69,83,0,121,90,130,99,103,114],
[114,119,90,0,107,133,101,135,133],
[88,64,121,104,0,94,116,111,86],
[85,61,81,78,117,0,100,88,101],
[91,103,112,110,95,111,0,121,113],
[66,82,108,76,100,123,90,0,123],
[81,107,97,78,125,110,98,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,113,107,93,97,104,105],
[107,0,116,100,113,100,98,107,114],
[106,95,0,103,99,100,95,97,97],
[98,111,108,0,103,114,116,98,112],
[104,98,112,108,0,99,93,91,100],
[118,111,111,97,112,0,120,95,93],
[114,113,116,95,118,91,0,106,105],
[107,104,114,113,120,116,105,0,111],
[106,97,114,99,111,118,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,109,103,105,83,91,124,141],
[120,0,100,124,139,124,122,129,130],
[102,111,0,128,117,131,105,122,144],
[108,87,83,0,101,105,92,91,122],
[106,72,94,110,0,91,91,99,121],
[128,87,80,106,120,0,129,104,143],
[120,89,106,119,120,82,0,140,162],
[87,82,89,120,112,107,71,0,117],
[70,81,67,89,90,68,49,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,119,116,113,109,105,112,99],
[97,0,102,111,97,99,92,103,93],
[92,109,0,108,92,96,90,99,95],
[95,100,103,0,105,110,104,96,97],
[98,114,119,106,0,110,108,104,111],
[102,112,115,101,101,0,90,91,103],
[106,119,121,107,103,121,0,104,104],
[99,108,112,115,107,120,107,0,108],
[112,118,116,114,100,108,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,75,90,58,91,143,122,90],
[110,0,96,107,93,115,121,125,110],
[136,115,0,126,105,111,104,140,104],
[121,104,85,0,80,88,115,112,94],
[153,118,106,131,0,104,148,141,146],
[120,96,100,123,107,0,111,113,108],
[68,90,107,96,63,100,0,92,79],
[89,86,71,99,70,98,119,0,126],
[121,101,107,117,65,103,132,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,95,98,87,102,108,86,97],
[119,0,100,112,115,111,114,107,116],
[116,111,0,111,103,124,114,109,109],
[113,99,100,0,109,117,102,102,110],
[124,96,108,102,0,115,103,98,112],
[109,100,87,94,96,0,109,88,102],
[103,97,97,109,108,102,0,93,106],
[125,104,102,109,113,123,118,0,113],
[114,95,102,101,99,109,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,113,104,144,154,115,120,114],
[120,0,81,116,93,119,84,146,139],
[98,130,0,127,138,122,99,141,148],
[107,95,84,0,98,138,98,138,153],
[67,118,73,113,0,76,76,110,86],
[57,92,89,73,135,0,83,100,107],
[96,127,112,113,135,128,0,149,118],
[91,65,70,73,101,111,62,0,110],
[97,72,63,58,125,104,93,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,92,86,103,94,104,103,100],
[105,0,90,98,110,87,98,94,106],
[119,121,0,106,117,103,111,107,110],
[125,113,105,0,114,101,107,116,107],
[108,101,94,97,0,100,98,104,100],
[117,124,108,110,111,0,116,111,100],
[107,113,100,104,113,95,0,111,97],
[108,117,104,95,107,100,100,0,100],
[111,105,101,104,111,111,114,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,110,115,106,115,107,102,111],
[91,0,107,109,112,107,104,98,106],
[101,104,0,96,121,102,95,104,100],
[96,102,115,0,112,103,101,109,111],
[105,99,90,99,0,100,88,97,96],
[96,104,109,108,111,0,92,105,99],
[104,107,116,110,123,119,0,110,115],
[109,113,107,102,114,106,101,0,102],
[100,105,111,100,115,112,96,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,108,111,97,103,86,93,95],
[121,0,114,140,118,109,88,107,112],
[103,97,0,116,85,97,93,93,94],
[100,71,95,0,93,77,85,80,85],
[114,93,126,118,0,93,94,107,112],
[108,102,114,134,118,0,98,104,113],
[125,123,118,126,117,113,0,105,117],
[118,104,118,131,104,107,106,0,103],
[116,99,117,126,99,98,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,118,93,100,111,113,110,89],
[105,0,116,81,100,123,109,107,102],
[93,95,0,103,106,105,104,92,109],
[118,130,108,0,107,125,117,112,103],
[111,111,105,104,0,114,109,98,97],
[100,88,106,86,97,0,108,99,95],
[98,102,107,94,102,103,0,110,99],
[101,104,119,99,113,112,101,0,99],
[122,109,102,108,114,116,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,87,98,91,96,108,93],
[117,0,108,97,112,99,88,119,101],
[107,103,0,105,117,105,99,110,107],
[124,114,106,0,123,94,114,125,114],
[113,99,94,88,0,102,91,107,107],
[120,112,106,117,109,0,112,130,104],
[115,123,112,97,120,99,0,120,108],
[103,92,101,86,104,81,91,0,102],
[118,110,104,97,104,107,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,102,107,104,100,103,103],
[110,0,101,103,110,101,104,98,116],
[105,110,0,104,101,106,108,100,110],
[109,108,107,0,93,114,107,109,105],
[104,101,110,118,0,118,102,101,119],
[107,110,105,97,93,0,99,101,95],
[111,107,103,104,109,112,0,113,114],
[108,113,111,102,110,110,98,0,100],
[108,95,101,106,92,116,97,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,95,95,95,100,89,106],
[117,0,112,102,104,99,107,104,111],
[110,99,0,99,102,100,105,102,114],
[116,109,112,0,107,107,112,105,113],
[116,107,109,104,0,94,110,94,108],
[116,112,111,104,117,0,110,108,116],
[111,104,106,99,101,101,0,105,104],
[122,107,109,106,117,103,106,0,107],
[105,100,97,98,103,95,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,113,113,111,114,111,112],
[104,0,107,101,102,112,105,116,110],
[109,104,0,105,103,102,101,103,101],
[98,110,106,0,98,108,100,97,105],
[98,109,108,113,0,114,97,103,102],
[100,99,109,103,97,0,102,101,110],
[97,106,110,111,114,109,0,103,117],
[100,95,108,114,108,110,108,0,118],
[99,101,110,106,109,101,94,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,97,112,97,91,100,104],
[107,0,112,105,118,106,106,103,114],
[103,99,0,90,99,99,102,101,93],
[114,106,121,0,113,111,105,107,116],
[99,93,112,98,0,107,91,104,104],
[114,105,112,100,104,0,90,96,101],
[120,105,109,106,120,121,0,108,109],
[111,108,110,104,107,115,103,0,107],
[107,97,118,95,107,110,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,98,106,94,89,117,104,110],
[98,0,121,115,104,91,107,103,98],
[113,90,0,98,107,98,107,90,104],
[105,96,113,0,102,92,97,96,98],
[117,107,104,109,0,114,119,92,94],
[122,120,113,119,97,0,114,104,117],
[94,104,104,114,92,97,0,96,115],
[107,108,121,115,119,107,115,0,104],
[101,113,107,113,117,94,96,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,118,110,105,97,113,112],
[102,0,112,105,105,109,92,121,113],
[97,99,0,108,98,106,100,109,117],
[93,106,103,0,96,99,98,108,113],
[101,106,113,115,0,112,106,118,113],
[106,102,105,112,99,0,100,105,115],
[114,119,111,113,105,111,0,116,118],
[98,90,102,103,93,106,95,0,103],
[99,98,94,98,98,96,93,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,106,98,106,121,110,107,97],
[85,0,103,74,101,102,100,89,92],
[105,108,0,86,104,97,121,110,93],
[113,137,125,0,99,118,112,99,104],
[105,110,107,112,0,115,109,108,99],
[90,109,114,93,96,0,116,102,107],
[101,111,90,99,102,95,0,105,99],
[104,122,101,112,103,109,106,0,101],
[114,119,118,107,112,104,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,53,42,96,82,44,69,121],
[128,0,34,82,82,57,41,72,90],
[158,177,0,62,140,111,106,114,125],
[169,129,149,0,134,152,71,101,107],
[115,129,71,77,0,83,90,72,131],
[129,154,100,59,128,0,105,102,155],
[167,170,105,140,121,106,0,96,120],
[142,139,97,110,139,109,115,0,119],
[90,121,86,104,80,56,91,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,119,129,95,120,119,86,99],
[101,0,99,128,118,118,72,97,129],
[92,112,0,116,73,112,85,90,116],
[82,83,95,0,75,117,99,100,88],
[116,93,138,136,0,125,111,84,120],
[91,93,99,94,86,0,103,104,73],
[92,139,126,112,100,108,0,113,103],
[125,114,121,111,127,107,98,0,114],
[112,82,95,123,91,138,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,101,128,138,124,102,135],
[96,0,94,119,83,125,128,92,77],
[95,117,0,114,106,115,122,108,98],
[110,92,97,0,68,115,105,82,66],
[83,128,105,143,0,138,141,122,99],
[73,86,96,96,73,0,115,67,68],
[87,83,89,106,70,96,0,81,83],
[109,119,103,129,89,144,130,0,91],
[76,134,113,145,112,143,128,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,92,115,78,85,92,74],
[102,0,128,95,121,104,106,122,110],
[93,83,0,103,114,99,95,100,83],
[119,116,108,0,122,101,107,99,86],
[96,90,97,89,0,93,99,107,84],
[133,107,112,110,118,0,89,104,94],
[126,105,116,104,112,122,0,108,104],
[119,89,111,112,104,107,103,0,89],
[137,101,128,125,127,117,107,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,102,98,115,98,108,105,106],
[93,0,97,113,90,102,88,95,93],
[109,114,0,109,112,96,88,116,113],
[113,98,102,0,105,103,95,107,97],
[96,121,99,106,0,98,98,117,106],
[113,109,115,108,113,0,105,121,109],
[103,123,123,116,113,106,0,110,111],
[106,116,95,104,94,90,101,0,102],
[105,118,98,114,105,102,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,106,101,110,105,102,99],
[98,0,96,109,107,92,105,112,99],
[106,115,0,102,106,91,106,111,93],
[105,102,109,0,110,102,112,101,99],
[110,104,105,101,0,98,104,109,100],
[101,119,120,109,113,0,108,110,115],
[106,106,105,99,107,103,0,115,104],
[109,99,100,110,102,101,96,0,96],
[112,112,118,112,111,96,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,103,100,109,98,113,116],
[112,0,107,103,106,123,106,116,113],
[108,104,0,103,105,124,104,107,112],
[108,108,108,0,103,120,101,118,109],
[111,105,106,108,0,123,109,117,110],
[102,88,87,91,88,0,97,102,96],
[113,105,107,110,102,114,0,114,117],
[98,95,104,93,94,109,97,0,101],
[95,98,99,102,101,115,94,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,83,106,110,100,95,96],
[105,0,102,87,92,102,88,91,88],
[118,109,0,102,110,116,106,95,96],
[128,124,109,0,106,116,104,110,107],
[105,119,101,105,0,106,92,93,100],
[101,109,95,95,105,0,88,90,98],
[111,123,105,107,119,123,0,97,104],
[116,120,116,101,118,121,114,0,109],
[115,123,115,104,111,113,107,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,106,98,100,107,105,88],
[107,0,103,119,107,104,117,111,108],
[104,108,0,105,101,109,105,108,98],
[105,92,106,0,103,106,109,112,103],
[113,104,110,108,0,106,111,113,104],
[111,107,102,105,105,0,116,119,111],
[104,94,106,102,100,95,0,100,99],
[106,100,103,99,98,92,111,0,101],
[123,103,113,108,107,100,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,105,108,138,122,116,122,107],
[89,0,100,85,122,133,113,115,87],
[106,111,0,107,124,135,102,113,107],
[103,126,104,0,139,126,126,116,123],
[73,89,87,72,0,105,83,90,81],
[89,78,76,85,106,0,88,102,83],
[95,98,109,85,128,123,0,107,94],
[89,96,98,95,121,109,104,0,109],
[104,124,104,88,130,128,117,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,106,121,115,114,101,101,131],
[120,0,76,123,98,108,118,101,112],
[105,135,0,135,137,115,121,112,154],
[90,88,76,0,98,106,101,89,144],
[96,113,74,113,0,93,123,104,131],
[97,103,96,105,118,0,124,108,120],
[110,93,90,110,88,87,0,88,124],
[110,110,99,122,107,103,123,0,128],
[80,99,57,67,80,91,87,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,98,101,100,102,101,96],
[109,0,110,108,105,96,104,116,98],
[112,101,0,83,101,102,99,95,99],
[113,103,128,0,124,124,120,111,121],
[110,106,110,87,0,101,96,94,95],
[111,115,109,87,110,0,101,109,109],
[109,107,112,91,115,110,0,101,102],
[110,95,116,100,117,102,110,0,113],
[115,113,112,90,116,102,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,110,117,103,103,100,112],
[98,0,114,117,113,102,114,110,109],
[105,97,0,106,107,106,106,96,103],
[101,94,105,0,100,106,98,103,107],
[94,98,104,111,0,105,109,103,106],
[108,109,105,105,106,0,115,90,111],
[108,97,105,113,102,96,0,88,112],
[111,101,115,108,108,121,123,0,113],
[99,102,108,104,105,100,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,111,125,112,105,124,109,108],
[95,0,118,117,124,111,117,104,104],
[100,93,0,101,97,86,108,103,91],
[86,94,110,0,110,95,107,100,106],
[99,87,114,101,0,91,110,104,101],
[106,100,125,116,120,0,116,114,109],
[87,94,103,104,101,95,0,94,94],
[102,107,108,111,107,97,117,0,111],
[103,107,120,105,110,102,117,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,13,118,73,73,3,118,73,58],
[198,0,211,166,118,96,118,166,138],
[93,0,0,106,63,96,73,106,45],
[138,45,105,0,108,3,105,60,45],
[138,93,148,103,0,93,148,103,138],
[208,115,115,208,118,0,115,70,55],
[93,93,138,106,63,96,0,96,138],
[138,45,105,151,108,141,115,0,45],
[153,73,166,166,73,156,73,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,94,112,72,99,85,86,66],
[121,0,101,105,110,86,84,77,102],
[117,110,0,93,106,94,78,79,105],
[99,106,118,0,118,120,91,91,102],
[139,101,105,93,0,100,105,109,97],
[112,125,117,91,111,0,86,116,101],
[126,127,133,120,106,125,0,103,114],
[125,134,132,120,102,95,108,0,109],
[145,109,106,109,114,110,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,128,98,108,119,124,106,90],
[93,0,116,55,105,120,108,83,90],
[83,95,0,71,111,113,92,69,78],
[113,156,140,0,125,130,142,96,105],
[103,106,100,86,0,117,108,92,90],
[92,91,98,81,94,0,108,100,61],
[87,103,119,69,103,103,0,90,109],
[105,128,142,115,119,111,121,0,112],
[121,121,133,106,121,150,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,117,121,128,107,133,111,123],
[113,0,104,117,119,104,112,119,125],
[94,107,0,107,99,75,102,91,109],
[90,94,104,0,117,105,113,93,112],
[83,92,112,94,0,86,109,77,97],
[104,107,136,106,125,0,119,124,113],
[78,99,109,98,102,92,0,88,109],
[100,92,120,118,134,87,123,0,123],
[88,86,102,99,114,98,102,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,91,117,103,98,90,96,103],
[112,0,113,113,103,118,97,108,111],
[120,98,0,111,100,105,95,99,103],
[94,98,100,0,98,102,100,97,104],
[108,108,111,113,0,105,119,103,103],
[113,93,106,109,106,0,99,103,110],
[121,114,116,111,92,112,0,97,110],
[115,103,112,114,108,108,114,0,119],
[108,100,108,107,108,101,101,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,115,131,105,109,111,112,127],
[85,0,113,116,100,111,105,99,111],
[96,98,0,115,94,96,99,105,118],
[80,95,96,0,88,91,99,93,97],
[106,111,117,123,0,103,100,114,112],
[102,100,115,120,108,0,98,102,107],
[100,106,112,112,111,113,0,109,108],
[99,112,106,118,97,109,102,0,102],
[84,100,93,114,99,104,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,120,120,121,109,117,117,105],
[99,0,116,124,112,107,103,115,121],
[91,95,0,114,109,111,101,105,109],
[91,87,97,0,98,92,97,90,93],
[90,99,102,113,0,105,96,108,112],
[102,104,100,119,106,0,98,97,102],
[94,108,110,114,115,113,0,108,114],
[94,96,106,121,103,114,103,0,103],
[106,90,102,118,99,109,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,114,107,115,120,102,112,113],
[110,0,103,109,113,111,104,100,121],
[97,108,0,105,109,116,98,111,103],
[104,102,106,0,119,113,109,116,109],
[96,98,102,92,0,110,109,96,108],
[91,100,95,98,101,0,102,92,101],
[109,107,113,102,102,109,0,109,113],
[99,111,100,95,115,119,102,0,99],
[98,90,108,102,103,110,98,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,120,96,99,106,102,111],
[100,0,95,117,94,97,99,99,92],
[91,116,0,110,94,89,97,93,103],
[91,94,101,0,86,81,91,86,91],
[115,117,117,125,0,101,108,111,110],
[112,114,122,130,110,0,110,108,100],
[105,112,114,120,103,101,0,103,98],
[109,112,118,125,100,103,108,0,115],
[100,119,108,120,101,111,113,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,81,97,97,114,79,113],
[113,0,106,93,92,117,100,112,107],
[106,105,0,107,97,97,79,94,109],
[130,118,104,0,97,102,99,111,121],
[114,119,114,114,0,105,87,111,107],
[114,94,114,109,106,0,101,107,103],
[97,111,132,112,124,110,0,125,113],
[132,99,117,100,100,104,86,0,108],
[98,104,102,90,104,108,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,110,100,110,118,97,110,104],
[85,0,95,93,111,100,80,100,86],
[101,116,0,108,110,117,91,113,95],
[111,118,103,0,112,123,101,115,100],
[101,100,101,99,0,112,98,101,92],
[93,111,94,88,99,0,102,103,91],
[114,131,120,110,113,109,0,95,106],
[101,111,98,96,110,108,116,0,74],
[107,125,116,111,119,120,105,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,117,117,126,106,105,111,112],
[81,0,89,100,88,94,90,96,96],
[94,122,0,102,106,90,86,111,111],
[94,111,109,0,111,92,90,96,105],
[85,123,105,100,0,96,92,98,92],
[105,117,121,119,115,0,123,112,117],
[106,121,125,121,119,88,0,84,108],
[100,115,100,115,113,99,127,0,99],
[99,115,100,106,119,94,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,92,139,125,91,113,120,120],
[69,0,93,117,103,125,98,127,111],
[119,118,0,126,110,105,123,124,105],
[72,94,85,0,92,67,80,96,101],
[86,108,101,119,0,113,119,129,116],
[120,86,106,144,98,0,100,126,134],
[98,113,88,131,92,111,0,101,125],
[91,84,87,115,82,85,110,0,96],
[91,100,106,110,95,77,86,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,69,89,77,81,63,48,131],
[99,0,96,103,94,98,60,119,93],
[142,115,0,106,116,148,133,89,157],
[122,108,105,0,109,129,152,89,106],
[134,117,95,102,0,131,94,136,153],
[130,113,63,82,80,0,80,69,135],
[148,151,78,59,117,131,0,121,137],
[163,92,122,122,75,142,90,0,149],
[80,118,54,105,58,76,74,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,107,99,119,93,114,119],
[104,0,108,106,109,102,106,104,116],
[110,103,0,106,105,121,116,118,117],
[104,105,105,0,109,107,109,107,107],
[112,102,106,102,0,115,97,115,113],
[92,109,90,104,96,0,86,110,116],
[118,105,95,102,114,125,0,116,127],
[97,107,93,104,96,101,95,0,116],
[92,95,94,104,98,95,84,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,125,100,128,126,122,110,118],
[74,0,114,86,96,114,113,111,102],
[86,97,0,124,110,88,81,76,93],
[111,125,87,0,95,102,91,95,103],
[83,115,101,116,0,83,93,87,104],
[85,97,123,109,128,0,123,94,127],
[89,98,130,120,118,88,0,91,107],
[101,100,135,116,124,117,120,0,102],
[93,109,118,108,107,84,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,74,81,98,109,78,128,105],
[103,0,81,94,79,95,90,136,104],
[137,130,0,123,107,98,81,106,144],
[130,117,88,0,122,98,71,127,112],
[113,132,104,89,0,86,110,105,132],
[102,116,113,113,125,0,118,120,116],
[133,121,130,140,101,93,0,137,129],
[83,75,105,84,106,91,74,0,117],
[106,107,67,99,79,95,82,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,112,107,112,111,125,101,103],
[115,0,118,107,112,110,121,108,103],
[99,93,0,101,114,102,120,111,103],
[104,104,110,0,114,119,117,100,105],
[99,99,97,97,0,90,112,107,108],
[100,101,109,92,121,0,124,101,112],
[86,90,91,94,99,87,0,97,102],
[110,103,100,111,104,110,114,0,111],
[108,108,108,106,103,99,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,89,101,98,116,122,114,121],
[69,0,102,92,61,110,118,98,79],
[122,109,0,128,110,95,115,104,121],
[110,119,83,0,79,102,101,92,99],
[113,150,101,132,0,116,157,129,135],
[95,101,116,109,95,0,112,102,98],
[89,93,96,110,54,99,0,86,102],
[97,113,107,119,82,109,125,0,107],
[90,132,90,112,76,113,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,106,106,113,100,101,110],
[104,0,103,96,100,105,99,99,101],
[94,108,0,92,103,105,108,96,106],
[105,115,119,0,108,102,101,90,108],
[105,111,108,103,0,108,106,108,112],
[98,106,106,109,103,0,94,106,104],
[111,112,103,110,105,117,0,101,112],
[110,112,115,121,103,105,110,0,114],
[101,110,105,103,99,107,99,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,109,108,121,109,111,115],
[95,0,94,90,87,110,106,106,86],
[109,117,0,111,105,124,121,118,101],
[102,121,100,0,95,123,116,109,100],
[103,124,106,116,0,133,123,117,111],
[90,101,87,88,78,0,98,100,89],
[102,105,90,95,88,113,0,100,86],
[100,105,93,102,94,111,111,0,95],
[96,125,110,111,100,122,125,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,140,98,96,121,120,93,130],
[103,0,121,100,92,107,111,107,120],
[71,90,0,96,81,92,92,90,109],
[113,111,115,0,109,110,107,91,112],
[115,119,130,102,0,117,115,95,120],
[90,104,119,101,94,0,104,101,107],
[91,100,119,104,96,107,0,101,115],
[118,104,121,120,116,110,110,0,112],
[81,91,102,99,91,104,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,109,123,101,99,110,96],
[113,0,114,125,114,103,98,119,105],
[114,97,0,125,112,117,111,121,117],
[102,86,86,0,97,98,97,90,95],
[88,97,99,114,0,102,103,102,108],
[110,108,94,113,109,0,107,120,110],
[112,113,100,114,108,104,0,109,105],
[101,92,90,121,109,91,102,0,98],
[115,106,94,116,103,101,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,147,68,86,131,81,53,119],
[169,0,172,143,117,146,129,115,104],
[64,39,0,56,42,144,59,66,90],
[143,68,155,0,125,135,94,76,114],
[125,94,169,86,0,132,94,109,139],
[80,65,67,76,79,0,56,76,58],
[130,82,152,117,117,155,0,108,138],
[158,96,145,135,102,135,103,0,99],
[92,107,121,97,72,153,73,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,91,101,103,104,98,98,96],
[113,0,104,116,113,120,113,103,108],
[120,107,0,110,105,123,110,113,104],
[110,95,101,0,98,112,98,97,100],
[108,98,106,113,0,116,109,107,117],
[107,91,88,99,95,0,87,95,92],
[113,98,101,113,102,124,0,105,106],
[113,108,98,114,104,116,106,0,106],
[115,103,107,111,94,119,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,99,121,97,108,94,109,102],
[91,0,77,104,85,85,95,90,85],
[112,134,0,121,103,114,113,115,112],
[90,107,90,0,94,96,93,101,98],
[114,126,108,117,0,101,110,114,106],
[103,126,97,115,110,0,101,101,114],
[117,116,98,118,101,110,0,109,107],
[102,121,96,110,97,110,102,0,119],
[109,126,99,113,105,97,104,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,90,74,101,105,101,123,92],
[76,0,80,64,96,106,91,110,93],
[121,131,0,95,120,125,105,127,114],
[137,147,116,0,98,123,124,145,115],
[110,115,91,113,0,104,84,123,95],
[106,105,86,88,107,0,98,135,86],
[110,120,106,87,127,113,0,137,106],
[88,101,84,66,88,76,74,0,83],
[119,118,97,96,116,125,105,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,121,123,119,99,100,127,106],
[106,0,130,121,105,105,103,116,104],
[90,81,0,108,104,88,84,115,102],
[88,90,103,0,89,107,96,118,80],
[92,106,107,122,0,95,113,122,90],
[112,106,123,104,116,0,97,121,114],
[111,108,127,115,98,114,0,121,103],
[84,95,96,93,89,90,90,0,88],
[105,107,109,131,121,97,108,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,86,99,103,106,112,123,109],
[104,0,107,103,101,117,113,110,107],
[125,104,0,121,115,116,118,120,95],
[112,108,90,0,102,106,111,114,105],
[108,110,96,109,0,104,121,106,107],
[105,94,95,105,107,0,101,112,92],
[99,98,93,100,90,110,0,103,94],
[88,101,91,97,105,99,108,0,93],
[102,104,116,106,104,119,117,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,98,107,114,108,117,112,96],
[115,0,93,110,97,112,114,114,106],
[113,118,0,116,122,128,124,126,105],
[104,101,95,0,116,101,109,102,106],
[97,114,89,95,0,109,113,108,118],
[103,99,83,110,102,0,122,107,106],
[94,97,87,102,98,89,0,99,96],
[99,97,85,109,103,104,112,0,100],
[115,105,106,105,93,105,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,116,145,139,105,93,98,134],
[114,0,110,109,116,71,93,107,90],
[95,101,0,114,139,104,106,141,114],
[66,102,97,0,105,104,113,81,70],
[72,95,72,106,0,76,66,101,75],
[106,140,107,107,135,0,98,140,142],
[118,118,105,98,145,113,0,111,90],
[113,104,70,130,110,71,100,0,128],
[77,121,97,141,136,69,121,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,114,132,92,103,100,97],
[106,0,106,113,106,95,107,103,116],
[110,105,0,108,113,106,106,104,103],
[97,98,103,0,99,80,93,110,98],
[79,105,98,112,0,96,96,104,104],
[119,116,105,131,115,0,118,112,108],
[108,104,105,118,115,93,0,95,105],
[111,108,107,101,107,99,116,0,107],
[114,95,108,113,107,103,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,116,105,90,123,108,84,103],
[112,0,113,116,102,129,116,92,108],
[95,98,0,91,86,110,101,109,116],
[106,95,120,0,95,122,111,105,115],
[121,109,125,116,0,134,129,100,126],
[88,82,101,89,77,0,99,74,91],
[103,95,110,100,82,112,0,103,120],
[127,119,102,106,111,137,108,0,115],
[108,103,95,96,85,120,91,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,86,132,132,100,132,118,132],
[79,0,79,162,125,38,38,24,24],
[125,132,0,208,132,14,46,32,78],
[79,49,3,0,49,17,46,32,46],
[79,86,79,162,0,24,38,24,24],
[111,173,197,194,187,0,70,170,194],
[79,173,165,165,173,141,0,138,141],
[93,187,179,179,187,41,73,0,179],
[79,187,133,165,187,17,70,32,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,122,120,120,113,120,121,105],
[101,0,105,107,123,113,118,112,116],
[89,106,0,116,115,116,101,105,103],
[91,104,95,0,112,112,116,113,97],
[91,88,96,99,0,104,105,110,91],
[98,98,95,99,107,0,102,105,91],
[91,93,110,95,106,109,0,111,103],
[90,99,106,98,101,106,100,0,92],
[106,95,108,114,120,120,108,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,139,127,137,106,112,145,75],
[77,0,78,89,95,56,149,44,108],
[72,133,0,80,113,91,184,116,87],
[84,122,131,0,94,97,149,96,68],
[74,116,98,117,0,102,136,115,67],
[105,155,120,114,109,0,105,88,96],
[99,62,27,62,75,106,0,66,88],
[66,167,95,115,96,123,145,0,79],
[136,103,124,143,144,115,123,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,107,104,108,101,114,109,102],
[93,0,86,96,86,96,103,101,96],
[104,125,0,111,103,97,108,112,108],
[107,115,100,0,107,106,112,115,97],
[103,125,108,104,0,103,108,107,97],
[110,115,114,105,108,0,109,106,99],
[97,108,103,99,103,102,0,117,94],
[102,110,99,96,104,105,94,0,85],
[109,115,103,114,114,112,117,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,104,103,98,92,108,103],
[114,0,109,111,106,100,104,111,114],
[107,102,0,106,116,102,102,110,107],
[107,100,105,0,104,98,107,106,98],
[108,105,95,107,0,104,98,102,109],
[113,111,109,113,107,0,102,108,109],
[119,107,109,104,113,109,0,105,114],
[103,100,101,105,109,103,106,0,101],
[108,97,104,113,102,102,97,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,102,97,116,112,118,112],
[113,0,109,102,102,103,100,104,109],
[112,102,0,90,106,113,105,108,118],
[109,109,121,0,113,114,99,121,113],
[114,109,105,98,0,116,104,107,108],
[95,108,98,97,95,0,97,111,102],
[99,111,106,112,107,114,0,120,117],
[93,107,103,90,104,100,91,0,107],
[99,102,93,98,103,109,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,115,105,96,110,99,118,111],
[92,0,97,106,87,110,100,116,105],
[96,114,0,107,99,103,105,103,101],
[106,105,104,0,89,109,95,96,104],
[115,124,112,122,0,105,104,117,123],
[101,101,108,102,106,0,101,104,102],
[112,111,106,116,107,110,0,106,97],
[93,95,108,115,94,107,105,0,102],
[100,106,110,107,88,109,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,106,114,118,104,107,100],
[99,0,117,106,117,119,110,102,108],
[102,94,0,108,112,110,99,107,101],
[105,105,103,0,112,110,91,99,104],
[97,94,99,99,0,105,85,96,90],
[93,92,101,101,106,0,102,104,84],
[107,101,112,120,126,109,0,109,110],
[104,109,104,112,115,107,102,0,109],
[111,103,110,107,121,127,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,116,114,110,100,99,110],
[102,0,112,111,122,113,113,103,119],
[106,99,0,107,104,99,94,101,107],
[95,100,104,0,114,108,99,98,109],
[97,89,107,97,0,109,94,97,103],
[101,98,112,103,102,0,97,106,103],
[111,98,117,112,117,114,0,108,107],
[112,108,110,113,114,105,103,0,108],
[101,92,104,102,108,108,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,89,115,110,116,106,102,110],
[114,0,128,120,106,118,105,100,113],
[122,83,0,114,115,109,102,106,134],
[96,91,97,0,116,140,89,121,131],
[101,105,96,95,0,108,97,118,106],
[95,93,102,71,103,0,81,121,119],
[105,106,109,122,114,130,0,132,139],
[109,111,105,90,93,90,79,0,106],
[101,98,77,80,105,92,72,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,101,132,102,123,106,119],
[115,0,89,103,116,108,93,107,107],
[114,122,0,115,108,120,118,102,118],
[110,108,96,0,106,125,96,100,115],
[79,95,103,105,0,114,97,100,103],
[109,103,91,86,97,0,99,95,104],
[88,118,93,115,114,112,0,103,100],
[105,104,109,111,111,116,108,0,102],
[92,104,93,96,108,107,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,110,107,114,102,97,109],
[99,0,108,112,105,102,91,99,112],
[103,103,0,107,100,111,93,94,106],
[101,99,104,0,95,103,92,81,102],
[104,106,111,116,0,100,93,96,95],
[97,109,100,108,111,0,109,104,101],
[109,120,118,119,118,102,0,110,104],
[114,112,117,130,115,107,101,0,117],
[102,99,105,109,116,110,107,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,102,105,101,99,107,119],
[107,0,101,95,110,96,114,114,119],
[106,110,0,104,93,91,97,101,117],
[109,116,107,0,105,105,109,108,122],
[106,101,118,106,0,107,117,117,118],
[110,115,120,106,104,0,106,123,130],
[112,97,114,102,94,105,0,98,110],
[104,97,110,103,94,88,113,0,115],
[92,92,94,89,93,81,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,74,115,99,110,87,104,88],
[95,0,102,120,79,112,87,100,114],
[137,109,0,124,116,115,95,125,110],
[96,91,87,0,75,108,91,109,100],
[112,132,95,136,0,115,110,117,115],
[101,99,96,103,96,0,76,82,101],
[124,124,116,120,101,135,0,117,94],
[107,111,86,102,94,129,94,0,100],
[123,97,101,111,96,110,117,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,104,106,101,97,116,114],
[106,0,110,105,105,103,116,105,106],
[100,101,0,100,100,99,92,115,107],
[107,106,111,0,109,97,108,117,117],
[105,106,111,102,0,99,106,112,115],
[110,108,112,114,112,0,105,119,129],
[114,95,119,103,105,106,0,106,111],
[95,106,96,94,99,92,105,0,105],
[97,105,104,94,96,82,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,111,118,103,113,122,113],
[101,0,94,102,109,90,105,109,92],
[112,117,0,126,121,117,115,118,104],
[100,109,85,0,95,102,95,105,98],
[93,102,90,116,0,99,95,98,91],
[108,121,94,109,112,0,111,113,100],
[98,106,96,116,116,100,0,113,107],
[89,102,93,106,113,98,98,0,99],
[98,119,107,113,120,111,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,102,116,116,117,117,103],
[108,0,119,111,96,105,110,110,111],
[107,92,0,97,94,110,104,109,92],
[109,100,114,0,103,107,100,117,98],
[95,115,117,108,0,116,106,118,107],
[95,106,101,104,95,0,95,118,100],
[94,101,107,111,105,116,0,115,113],
[94,101,102,94,93,93,96,0,107],
[108,100,119,113,104,111,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,127,114,128,128,124,137,123],
[113,0,152,141,127,133,87,122,109],
[84,59,0,115,94,102,84,96,63],
[97,70,96,0,85,100,89,91,77],
[83,84,117,126,0,105,124,82,91],
[83,78,109,111,106,0,109,67,70],
[87,124,127,122,87,102,0,102,78],
[74,89,115,120,129,144,109,0,128],
[88,102,148,134,120,141,133,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,106,105,110,110,104,103],
[112,0,102,103,102,108,112,105,105],
[107,109,0,92,105,109,121,115,108],
[105,108,119,0,111,109,122,108,113],
[106,109,106,100,0,105,103,102,102],
[101,103,102,102,106,0,116,96,109],
[101,99,90,89,108,95,0,95,105],
[107,106,96,103,109,115,116,0,103],
[108,106,103,98,109,102,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,97,85,99,96,94,104,97],
[112,0,104,104,114,115,94,102,110],
[114,107,0,106,109,117,99,113,104],
[126,107,105,0,117,106,99,98,93],
[112,97,102,94,0,95,96,88,97],
[115,96,94,105,116,0,107,101,105],
[117,117,112,112,115,104,0,111,104],
[107,109,98,113,123,110,100,0,116],
[114,101,107,118,114,106,107,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,97,108,115,89,107,100],
[102,0,99,89,107,118,101,110,90],
[115,112,0,116,125,135,110,104,116],
[114,122,95,0,113,123,104,111,109],
[103,104,86,98,0,116,98,99,106],
[96,93,76,88,95,0,95,93,98],
[122,110,101,107,113,116,0,110,117],
[104,101,107,100,112,118,101,0,115],
[111,121,95,102,105,113,94,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,102,111,93,85,99,79],
[107,0,112,94,120,97,103,115,100],
[107,99,0,108,123,100,101,115,84],
[109,117,103,0,117,97,109,109,92],
[100,91,88,94,0,79,97,122,86],
[118,114,111,114,132,0,102,118,106],
[126,108,110,102,114,109,0,127,106],
[112,96,96,102,89,93,84,0,77],
[132,111,127,119,125,105,105,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,107,108,89,107,110,107],
[107,0,101,111,108,111,115,114,103],
[108,110,0,111,113,113,113,113,103],
[104,100,100,0,98,85,112,103,90],
[103,103,98,113,0,103,121,114,96],
[122,100,98,126,108,0,113,111,100],
[104,96,98,99,90,98,0,111,91],
[101,97,98,108,97,100,100,0,93],
[104,108,108,121,115,111,120,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,71,85,109,119,84,95],
[101,0,92,92,81,98,101,90,87],
[105,119,0,115,93,101,117,98,118],
[140,119,96,0,100,111,129,101,89],
[126,130,118,111,0,131,108,114,90],
[102,113,110,100,80,0,113,113,70],
[92,110,94,82,103,98,0,96,87],
[127,121,113,110,97,98,115,0,96],
[116,124,93,122,121,141,124,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,112,110,107,103,100,106],
[104,0,103,96,105,113,95,106,104],
[95,108,0,102,98,102,103,94,104],
[99,115,109,0,101,116,107,88,108],
[101,106,113,110,0,110,100,106,116],
[104,98,109,95,101,0,104,105,107],
[108,116,108,104,111,107,0,106,113],
[111,105,117,123,105,106,105,0,107],
[105,107,107,103,95,104,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,95,89,103,91,104,101,107],
[101,0,87,100,93,103,83,83,92],
[116,124,0,102,122,107,118,108,115],
[122,111,109,0,119,109,111,99,105],
[108,118,89,92,0,107,96,96,92],
[120,108,104,102,104,0,108,101,99],
[107,128,93,100,115,103,0,92,101],
[110,128,103,112,115,110,119,0,117],
[104,119,96,106,119,112,110,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,89,97,96,109,110,91,93],
[110,0,102,100,107,108,102,110,106],
[122,109,0,104,111,107,105,101,110],
[114,111,107,0,106,110,112,105,103],
[115,104,100,105,0,104,103,92,105],
[102,103,104,101,107,0,104,93,91],
[101,109,106,99,108,107,0,97,106],
[120,101,110,106,119,118,114,0,107],
[118,105,101,108,106,120,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,102,104,76,80,168,62,86],
[85,0,81,96,93,89,105,79,110],
[109,130,0,115,117,155,101,110,48],
[107,115,96,0,99,139,99,118,90],
[135,118,94,112,0,116,175,93,122],
[131,122,56,72,95,0,120,81,80],
[43,106,110,112,36,91,0,70,88],
[149,132,101,93,118,130,141,0,130],
[125,101,163,121,89,131,123,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,105,99,103,109,115,107],
[101,0,100,98,91,108,88,103,103],
[107,111,0,97,105,116,102,110,102],
[106,113,114,0,107,114,110,100,100],
[112,120,106,104,0,115,104,107,100],
[108,103,95,97,96,0,99,101,92],
[102,123,109,101,107,112,0,112,106],
[96,108,101,111,104,110,99,0,99],
[104,108,109,111,111,119,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,110,104,108,81,102,101,98],
[119,0,109,105,111,101,106,110,111],
[101,102,0,105,102,108,112,102,104],
[107,106,106,0,93,96,110,111,107],
[103,100,109,118,0,104,112,100,102],
[130,110,103,115,107,0,113,102,119],
[109,105,99,101,99,98,0,102,104],
[110,101,109,100,111,109,109,0,108],
[113,100,107,104,109,92,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,111,120,110,121,108,110,95],
[97,0,102,125,106,109,95,108,106],
[100,109,0,126,106,108,106,116,106],
[91,86,85,0,95,90,98,94,88],
[101,105,105,116,0,117,96,96,95],
[90,102,103,121,94,0,94,98,103],
[103,116,105,113,115,117,0,119,111],
[101,103,95,117,115,113,92,0,90],
[116,105,105,123,116,108,100,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,102,126,93,120,130,127,150],
[54,0,42,70,64,61,81,81,64],
[109,169,0,105,112,106,114,137,140],
[85,141,106,0,105,97,122,143,127],
[118,147,99,106,0,115,110,141,144],
[91,150,105,114,96,0,116,140,127],
[81,130,97,89,101,95,0,122,122],
[84,130,74,68,70,71,89,0,95],
[61,147,71,84,67,84,89,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,127,175,197,100,151,128,155],
[71,0,96,101,128,67,136,76,60],
[84,115,0,153,125,95,101,97,58],
[36,110,58,0,101,80,91,79,71],
[14,83,86,110,0,43,47,48,94],
[111,144,116,131,168,0,116,102,120],
[60,75,110,120,164,95,0,73,100],
[83,135,114,132,163,109,138,0,82],
[56,151,153,140,117,91,111,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,107,135,104,140,164,130,134],
[122,0,100,125,102,111,159,150,122],
[104,111,0,106,127,142,141,157,130],
[76,86,105,0,75,60,141,81,101],
[107,109,84,136,0,166,135,131,77],
[71,100,69,151,45,0,180,124,121],
[47,52,70,70,76,31,0,121,93],
[81,61,54,130,80,87,90,0,101],
[77,89,81,110,134,90,118,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,103,95,88,108,106,104,98],
[90,0,116,113,83,77,115,91,115],
[108,95,0,94,80,74,101,106,93],
[116,98,117,0,110,112,144,106,128],
[123,128,131,101,0,117,141,130,140],
[103,134,137,99,94,0,138,121,135],
[105,96,110,67,70,73,0,97,102],
[107,120,105,105,81,90,114,0,85],
[113,96,118,83,71,76,109,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,96,78,83,112,95,92,93],
[107,0,102,113,109,137,132,119,111],
[115,109,0,89,102,140,132,121,106],
[133,98,122,0,119,123,128,116,140],
[128,102,109,92,0,129,127,99,122],
[99,74,71,88,82,0,99,68,71],
[116,79,79,83,84,112,0,85,105],
[119,92,90,95,112,143,126,0,102],
[118,100,105,71,89,140,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,90,126,93,127,145,133,102],
[100,0,91,88,87,74,137,85,119],
[121,120,0,117,126,100,113,78,154],
[85,123,94,0,115,104,125,98,113],
[118,124,85,96,0,122,129,83,126],
[84,137,111,107,89,0,132,113,136],
[66,74,98,86,82,79,0,81,103],
[78,126,133,113,128,98,130,0,113],
[109,92,57,98,85,75,108,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,97,103,145,125,112,93,94],
[101,0,93,118,130,119,117,90,94],
[114,118,0,113,125,135,110,103,108],
[108,93,98,0,132,131,102,94,103],
[66,81,86,79,0,79,77,66,68],
[86,92,76,80,132,0,91,71,74],
[99,94,101,109,134,120,0,83,94],
[118,121,108,117,145,140,128,0,96],
[117,117,103,108,143,137,117,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,88,111,99,86,102,84,88],
[120,0,91,103,97,103,99,97,99],
[123,120,0,129,107,102,122,109,112],
[100,108,82,0,93,95,89,98,91],
[112,114,104,118,0,102,118,97,106],
[125,108,109,116,109,0,107,106,105],
[109,112,89,122,93,104,0,98,106],
[127,114,102,113,114,105,113,0,104],
[123,112,99,120,105,106,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,99,98,100,102,103,108,104],
[96,0,99,106,112,110,109,110,107],
[112,112,0,101,113,107,108,104,104],
[113,105,110,0,117,104,117,107,104],
[111,99,98,94,0,99,106,98,108],
[109,101,104,107,112,0,109,103,102],
[108,102,103,94,105,102,0,102,105],
[103,101,107,104,113,108,109,0,105],
[107,104,107,107,103,109,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,118,107,109,109,121,112,110],
[106,0,110,110,112,91,109,94,104],
[93,101,0,80,102,100,120,95,93],
[104,101,131,0,108,103,117,100,108],
[102,99,109,103,0,89,117,99,93],
[102,120,111,108,122,0,130,109,113],
[90,102,91,94,94,81,0,110,90],
[99,117,116,111,112,102,101,0,95],
[101,107,118,103,118,98,121,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,97,103,99,96,117,106,106],
[117,0,88,106,114,110,105,102,117],
[114,123,0,106,97,95,119,107,118],
[108,105,105,0,109,96,102,105,93],
[112,97,114,102,0,115,101,107,108],
[115,101,116,115,96,0,100,108,117],
[94,106,92,109,110,111,0,113,110],
[105,109,104,106,104,103,98,0,104],
[105,94,93,118,103,94,101,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,114,94,98,97,103,122],
[111,0,93,116,103,91,98,92,114],
[102,118,0,128,107,122,135,123,134],
[97,95,83,0,112,98,94,117,103],
[117,108,104,99,0,115,132,117,125],
[113,120,89,113,96,0,97,102,117],
[114,113,76,117,79,114,0,120,104],
[108,119,88,94,94,109,91,0,112],
[89,97,77,108,86,94,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,101,90,109,95,96,107],
[113,0,113,109,104,123,102,95,112],
[104,98,0,98,89,99,93,94,108],
[110,102,113,0,104,104,102,99,108],
[121,107,122,107,0,114,105,106,124],
[102,88,112,107,97,0,104,94,119],
[116,109,118,109,106,107,0,98,119],
[115,116,117,112,105,117,113,0,124],
[104,99,103,103,87,92,92,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,42,88,51,68,59,76,52,95],
[169,0,130,87,131,65,128,77,120],
[123,81,0,82,99,109,103,52,126],
[160,124,129,0,143,160,146,120,97],
[143,80,112,68,0,91,131,80,137],
[152,146,102,51,120,0,139,52,120],
[135,83,108,65,80,72,0,23,86],
[159,134,159,91,131,159,188,0,111],
[116,91,85,114,74,91,125,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,97,101,97,95,101,99,102],
[119,0,87,104,93,102,99,106,104],
[114,124,0,116,104,108,115,115,116],
[110,107,95,0,101,100,104,103,116],
[114,118,107,110,0,128,110,104,118],
[116,109,103,111,83,0,99,110,115],
[110,112,96,107,101,112,0,115,106],
[112,105,96,108,107,101,96,0,112],
[109,107,95,95,93,96,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,106,104,109,113,112,101],
[107,0,111,110,109,112,106,106,97],
[105,100,0,110,104,107,105,108,111],
[105,101,101,0,105,103,97,101,97],
[107,102,107,106,0,109,107,114,98],
[102,99,104,108,102,0,96,98,99],
[98,105,106,114,104,115,0,110,104],
[99,105,103,110,97,113,101,0,96],
[110,114,100,114,113,112,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,113,107,118,112,110,117],
[100,0,107,107,113,111,109,93,114],
[108,104,0,112,106,120,113,108,115],
[98,104,99,0,103,109,99,107,102],
[104,98,105,108,0,104,96,99,101],
[93,100,91,102,107,0,92,94,95],
[99,102,98,112,115,119,0,105,118],
[101,118,103,104,112,117,106,0,104],
[94,97,96,109,110,116,93,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,82,89,101,75,91,60,85],
[120,0,127,97,130,97,95,113,133],
[129,84,0,108,109,117,107,90,107],
[122,114,103,0,112,96,109,97,114],
[110,81,102,99,0,102,133,101,92],
[136,114,94,115,109,0,113,120,112],
[120,116,104,102,78,98,0,108,92],
[151,98,121,114,110,91,103,0,109],
[126,78,104,97,119,99,119,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,95,108,109,105,107,109,108],
[101,0,86,82,110,120,101,102,101],
[116,125,0,95,120,109,107,118,108],
[103,129,116,0,121,136,124,144,124],
[102,101,91,90,0,95,108,115,101],
[106,91,102,75,116,0,108,118,115],
[104,110,104,87,103,103,0,121,107],
[102,109,93,67,96,93,90,0,94],
[103,110,103,87,110,96,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,109,109,102,106,101,100],
[111,0,94,109,119,113,110,99,111],
[107,117,0,111,127,108,103,106,109],
[102,102,100,0,119,103,109,98,98],
[102,92,84,92,0,91,98,92,95],
[109,98,103,108,120,0,112,96,108],
[105,101,108,102,113,99,0,92,98],
[110,112,105,113,119,115,119,0,88],
[111,100,102,113,116,103,113,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,100,102,91,101,96,101],
[115,0,111,107,103,98,112,109,105],
[108,100,0,117,106,101,104,109,93],
[111,104,94,0,108,96,105,101,99],
[109,108,105,103,0,96,101,106,111],
[120,113,110,115,115,0,110,104,114],
[110,99,107,106,110,101,0,99,103],
[115,102,102,110,105,107,112,0,112],
[110,106,118,112,100,97,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,93,123,94,81,112,125],
[104,0,119,102,133,93,92,118,100],
[99,92,0,85,111,107,91,122,86],
[118,109,126,0,135,119,117,150,103],
[88,78,100,76,0,115,65,103,94],
[117,118,104,92,96,0,102,112,112],
[130,119,120,94,146,109,0,126,115],
[99,93,89,61,108,99,85,0,109],
[86,111,125,108,117,99,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,106,84,97,105,102,155,103],
[120,0,109,87,125,92,96,176,155],
[105,102,0,87,105,112,122,131,124],
[127,124,124,0,104,127,117,137,160],
[114,86,106,107,0,123,109,181,125],
[106,119,99,84,88,0,109,147,114],
[109,115,89,94,102,102,0,143,132],
[56,35,80,74,30,64,68,0,70],
[108,56,87,51,86,97,79,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,108,93,112,102,98,100,97],
[115,0,107,102,111,101,93,103,104],
[103,104,0,110,118,102,113,108,105],
[118,109,101,0,121,107,93,109,116],
[99,100,93,90,0,98,90,95,94],
[109,110,109,104,113,0,89,107,114],
[113,118,98,118,121,122,0,111,101],
[111,108,103,102,116,104,100,0,115],
[114,107,106,95,117,97,110,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,92,91,104,90,93,94,100],
[116,0,100,109,112,112,111,100,109],
[119,111,0,117,115,119,102,119,116],
[120,102,94,0,109,107,108,107,107],
[107,99,96,102,0,99,92,109,107],
[121,99,92,104,112,0,108,95,106],
[118,100,109,103,119,103,0,100,101],
[117,111,92,104,102,116,111,0,106],
[111,102,95,104,104,105,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,101,110,96,103,115,98,103],
[118,0,112,120,112,127,104,103,110],
[110,99,0,112,90,105,96,101,104],
[101,91,99,0,85,95,102,89,99],
[115,99,121,126,0,110,116,108,123],
[108,84,106,116,101,0,107,95,98],
[96,107,115,109,95,104,0,99,106],
[113,108,110,122,103,116,112,0,116],
[108,101,107,112,88,113,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,88,103,89,93,107,95],
[103,0,104,105,105,104,104,122,111],
[109,107,0,104,101,113,96,116,117],
[123,106,107,0,106,113,99,124,114],
[108,106,110,105,0,103,109,124,112],
[122,107,98,98,108,0,101,122,110],
[118,107,115,112,102,110,0,126,106],
[104,89,95,87,87,89,85,0,87],
[116,100,94,97,99,101,105,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,105,104,90,104,92,97],
[102,0,107,104,112,102,116,96,107],
[109,104,0,112,100,100,115,103,106],
[106,107,99,0,110,89,117,109,96],
[107,99,111,101,0,99,115,105,103],
[121,109,111,122,112,0,117,100,107],
[107,95,96,94,96,94,0,103,80],
[119,115,108,102,106,111,108,0,109],
[114,104,105,115,108,104,131,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,102,116,96,99,102,109,92],
[124,0,108,118,90,122,100,131,78],
[109,103,0,111,111,106,100,128,108],
[95,93,100,0,107,91,100,122,76],
[115,121,100,104,0,120,107,137,103],
[112,89,105,120,91,0,81,117,79],
[109,111,111,111,104,130,0,131,113],
[102,80,83,89,74,94,80,0,73],
[119,133,103,135,108,132,98,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,112,118,109,108,126,104],
[99,0,105,106,105,109,107,111,107],
[98,106,0,105,107,105,109,113,97],
[99,105,106,0,112,111,107,118,113],
[93,106,104,99,0,111,100,119,101],
[102,102,106,100,100,0,106,128,99],
[103,104,102,104,111,105,0,119,105],
[85,100,98,93,92,83,92,0,90],
[107,104,114,98,110,112,106,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,161,109,122,145,106,103,113],
[95,0,142,113,88,107,111,105,81],
[50,69,0,94,69,111,97,66,61],
[102,98,117,0,73,137,105,106,100],
[89,123,142,138,0,114,85,97,108],
[66,104,100,74,97,0,83,86,65],
[105,100,114,106,126,128,0,99,80],
[108,106,145,105,114,125,112,0,78],
[98,130,150,111,103,146,131,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,129,85,97,122,148,95,128],
[105,0,117,117,116,162,76,93,149],
[82,94,0,99,97,113,85,107,138],
[126,94,112,0,136,149,112,92,73],
[114,95,114,75,0,87,68,99,130],
[89,49,98,62,124,0,49,55,90],
[63,135,126,99,143,162,0,87,114],
[116,118,104,119,112,156,124,0,159],
[83,62,73,138,81,121,97,52,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,117,128,107,140,106,92,60],
[88,0,99,109,123,107,102,122,90],
[94,112,0,98,110,108,91,96,119],
[83,102,113,0,84,94,97,90,96],
[104,88,101,127,0,105,89,109,102],
[71,104,103,117,106,0,85,107,84],
[105,109,120,114,122,126,0,101,98],
[119,89,115,121,102,104,110,0,111],
[151,121,92,115,109,127,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,95,113,107,123,97,110,105],
[107,0,111,111,101,120,91,109,111],
[116,100,0,102,111,119,98,115,100],
[98,100,109,0,113,118,97,101,90],
[104,110,100,98,0,121,88,115,97],
[88,91,92,93,90,0,88,96,86],
[114,120,113,114,123,123,0,117,99],
[101,102,96,110,96,115,94,0,97],
[106,100,111,121,114,125,112,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,115,95,109,109,120,120,97],
[87,0,103,98,101,96,89,105,98],
[96,108,0,99,101,104,101,108,104],
[116,113,112,0,120,113,111,125,104],
[102,110,110,91,0,108,108,116,95],
[102,115,107,98,103,0,95,111,86],
[91,122,110,100,103,116,0,117,107],
[91,106,103,86,95,100,94,0,94],
[114,113,107,107,116,125,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,99,83,103,104,101,99,100],
[142,0,125,110,113,134,126,105,129],
[112,86,0,99,114,104,85,106,107],
[128,101,112,0,115,129,125,108,141],
[108,98,97,96,0,110,114,120,125],
[107,77,107,82,101,0,105,91,120],
[110,85,126,86,97,106,0,103,108],
[112,106,105,103,91,120,108,0,125],
[111,82,104,70,86,91,103,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,108,110,113,103,99,104,108],
[116,0,115,117,124,104,110,116,108],
[103,96,0,112,102,100,87,102,103],
[101,94,99,0,110,102,93,99,107],
[98,87,109,101,0,106,96,106,91],
[108,107,111,109,105,0,113,113,112],
[112,101,124,118,115,98,0,109,119],
[107,95,109,112,105,98,102,0,102],
[103,103,108,104,120,99,92,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,66,70,65,73,87,57,113],
[97,0,96,108,81,103,118,87,118],
[145,115,0,123,101,93,142,116,113],
[141,103,88,0,106,155,126,98,95],
[146,130,110,105,0,129,120,87,90],
[138,108,118,56,82,0,85,107,88],
[124,93,69,85,91,126,0,99,106],
[154,124,95,113,124,104,112,0,129],
[98,93,98,116,121,123,105,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,82,109,132,113,100,116],
[100,0,115,101,105,113,103,109,115],
[99,96,0,103,97,108,105,98,98],
[129,110,108,0,109,125,108,100,122],
[102,106,114,102,0,118,113,84,120],
[79,98,103,86,93,0,100,83,96],
[98,108,106,103,98,111,0,98,106],
[111,102,113,111,127,128,113,0,119],
[95,96,113,89,91,115,105,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,111,107,108,118,113,114,95],
[94,0,101,104,110,107,104,104,96],
[100,110,0,107,101,120,113,115,117],
[104,107,104,0,103,118,105,112,112],
[103,101,110,108,0,120,125,120,106],
[93,104,91,93,91,0,98,108,92],
[98,107,98,106,86,113,0,106,103],
[97,107,96,99,91,103,105,0,95],
[116,115,94,99,105,119,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,115,105,111,125,120,128],
[101,0,110,122,98,110,113,116,117],
[107,101,0,96,106,95,110,100,119],
[96,89,115,0,105,109,108,89,112],
[106,113,105,106,0,118,117,118,116],
[100,101,116,102,93,0,103,113,114],
[86,98,101,103,94,108,0,90,110],
[91,95,111,122,93,98,121,0,108],
[83,94,92,99,95,97,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,94,92,96,103,108,102,105],
[120,0,102,103,114,99,115,118,110],
[117,109,0,109,103,101,117,107,110],
[119,108,102,0,110,107,106,109,109],
[115,97,108,101,0,110,116,107,99],
[108,112,110,104,101,0,122,121,106],
[103,96,94,105,95,89,0,99,93],
[109,93,104,102,104,90,112,0,100],
[106,101,101,102,112,105,118,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,103,91,118,118,123,101],
[104,0,96,95,86,104,105,100,103],
[111,115,0,105,86,122,101,112,107],
[108,116,106,0,98,119,132,120,106],
[120,125,125,113,0,123,128,104,97],
[93,107,89,92,88,0,105,95,90],
[93,106,110,79,83,106,0,100,112],
[88,111,99,91,107,116,111,0,90],
[110,108,104,105,114,121,99,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,109,108,110,100,101,102],
[105,0,89,94,98,108,101,102,101],
[109,122,0,109,103,115,110,101,107],
[102,117,102,0,105,109,104,101,118],
[103,113,108,106,0,102,90,105,111],
[101,103,96,102,109,0,103,104,98],
[111,110,101,107,121,108,0,106,109],
[110,109,110,110,106,107,105,0,114],
[109,110,104,93,100,113,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,102,89,85,98,98,95,94],
[117,0,104,105,104,93,102,111,111],
[109,107,0,106,101,97,111,110,101],
[122,106,105,0,106,106,111,119,106],
[126,107,110,105,0,94,105,109,99],
[113,118,114,105,117,0,118,108,109],
[113,109,100,100,106,93,0,104,111],
[116,100,101,92,102,103,107,0,108],
[117,100,110,105,112,102,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,102,101,112,107,103,107],
[107,0,106,110,104,116,106,105,107],
[108,105,0,99,99,103,102,110,109],
[109,101,112,0,102,111,102,111,102],
[110,107,112,109,0,105,105,111,102],
[99,95,108,100,106,0,104,104,110],
[104,105,109,109,106,107,0,114,105],
[108,106,101,100,100,107,97,0,103],
[104,104,102,109,109,101,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,91,61,71,75,45,76,91],
[138,0,59,88,84,58,65,83,114],
[120,152,0,110,84,117,73,105,143],
[150,123,101,0,136,84,128,113,110],
[140,127,127,75,0,75,102,75,157],
[136,153,94,127,136,0,110,96,143],
[166,146,138,83,109,101,0,107,139],
[135,128,106,98,136,115,104,0,148],
[120,97,68,101,54,68,72,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,107,126,114,107,114,116,109],
[130,0,117,94,123,108,105,124,103],
[104,94,0,95,101,104,108,100,82],
[85,117,116,0,103,118,86,80,97],
[97,88,110,108,0,115,81,99,103],
[104,103,107,93,96,0,90,77,111],
[97,106,103,125,130,121,0,135,94],
[95,87,111,131,112,134,76,0,105],
[102,108,129,114,108,100,117,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,110,114,102,96,87,99,92],
[122,0,97,116,125,103,112,103,121],
[101,114,0,121,112,108,98,96,107],
[97,95,90,0,112,95,80,81,76],
[109,86,99,99,0,89,82,84,89],
[115,108,103,116,122,0,108,102,119],
[124,99,113,131,129,103,0,103,117],
[112,108,115,130,127,109,108,0,100],
[119,90,104,135,122,92,94,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,108,99,105,112,114,109],
[99,0,111,102,104,116,110,101,100],
[102,100,0,106,102,104,110,107,96],
[103,109,105,0,114,100,117,105,109],
[112,107,109,97,0,100,117,104,99],
[106,95,107,111,111,0,117,103,107],
[99,101,101,94,94,94,0,95,97],
[97,110,104,106,107,108,116,0,100],
[102,111,115,102,112,104,114,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,109,107,121,104,110,122],
[95,0,101,103,104,105,98,105,103],
[106,110,0,106,108,113,108,105,117],
[102,108,105,0,99,118,104,106,105],
[104,107,103,112,0,115,95,98,107],
[90,106,98,93,96,0,90,85,101],
[107,113,103,107,116,121,0,113,109],
[101,106,106,105,113,126,98,0,114],
[89,108,94,106,104,110,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,102,109,98,96,99,103],
[97,0,95,98,102,89,93,96,101],
[107,116,0,98,110,100,103,110,112],
[109,113,113,0,114,101,108,119,117],
[102,109,101,97,0,88,91,104,108],
[113,122,111,110,123,0,105,118,115],
[115,118,108,103,120,106,0,115,108],
[112,115,101,92,107,93,96,0,102],
[108,110,99,94,103,96,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,121,144,149,125,146,110,123],
[112,0,158,106,96,120,136,84,86],
[90,53,0,98,116,93,124,64,98],
[67,105,113,0,105,88,78,72,96],
[62,115,95,106,0,63,88,100,87],
[86,91,118,123,148,0,136,90,130],
[65,75,87,133,123,75,0,40,52],
[101,127,147,139,111,121,171,0,118],
[88,125,113,115,124,81,159,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,115,114,105,112,106,112,117],
[84,0,88,80,84,90,96,125,80],
[96,123,0,117,141,120,134,127,122],
[97,131,94,0,113,101,108,105,91],
[106,127,70,98,0,98,105,105,92],
[99,121,91,110,113,0,132,109,117],
[105,115,77,103,106,79,0,101,85],
[99,86,84,106,106,102,110,0,112],
[94,131,89,120,119,94,126,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,98,110,96,104,109,115],
[110,0,118,106,123,105,100,98,110],
[98,93,0,100,124,94,107,100,124],
[113,105,111,0,111,104,102,118,97],
[101,88,87,100,0,87,85,93,107],
[115,106,117,107,124,0,113,99,118],
[107,111,104,109,126,98,0,114,121],
[102,113,111,93,118,112,97,0,112],
[96,101,87,114,104,93,90,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,101,112,104,120,113,116],
[106,0,98,103,90,100,101,100,105],
[104,113,0,109,115,100,111,99,108],
[110,108,102,0,113,109,109,104,120],
[99,121,96,98,0,101,108,102,105],
[107,111,111,102,110,0,109,98,108],
[91,110,100,102,103,102,0,86,103],
[98,111,112,107,109,113,125,0,111],
[95,106,103,91,106,103,108,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,104,88,97,83,111,96,107],
[118,0,108,101,111,107,116,102,113],
[107,103,0,103,107,102,109,107,100],
[123,110,108,0,118,113,111,97,119],
[114,100,104,93,0,103,99,99,109],
[128,104,109,98,108,0,121,106,118],
[100,95,102,100,112,90,0,98,104],
[115,109,104,114,112,105,113,0,108],
[104,98,111,92,102,93,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,94,85,76,84,68,77],
[113,0,111,100,97,95,102,79,106],
[106,100,0,98,95,89,93,104,98],
[117,111,113,0,98,114,97,110,117],
[126,114,116,113,0,93,98,112,117],
[135,116,122,97,118,0,110,102,135],
[127,109,118,114,113,101,0,105,118],
[143,132,107,101,99,109,106,0,108],
[134,105,113,94,94,76,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,121,110,105,122,125,103,113],
[81,0,98,94,102,107,92,97,99],
[90,113,0,101,108,119,92,93,107],
[101,117,110,0,113,121,98,96,107],
[106,109,103,98,0,114,106,96,98],
[89,104,92,90,97,0,85,81,95],
[86,119,119,113,105,126,0,107,114],
[108,114,118,115,115,130,104,0,122],
[98,112,104,104,113,116,97,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,81,91,107,86,92,92,102],
[115,0,94,95,93,99,93,98,93],
[130,117,0,100,112,105,93,104,106],
[120,116,111,0,111,107,97,101,101],
[104,118,99,100,0,98,108,97,106],
[125,112,106,104,113,0,101,102,95],
[119,118,118,114,103,110,0,107,97],
[119,113,107,110,114,109,104,0,111],
[109,118,105,110,105,116,114,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,95,100,99,105,112,104,110],
[121,0,104,120,106,112,137,112,117],
[116,107,0,109,108,102,112,103,123],
[111,91,102,0,107,104,118,116,111],
[112,105,103,104,0,109,114,114,121],
[106,99,109,107,102,0,107,104,113],
[99,74,99,93,97,104,0,103,105],
[107,99,108,95,97,107,108,0,104],
[101,94,88,100,90,98,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,62,123,97,116,88,103,94],
[105,0,120,122,62,144,46,100,108],
[149,91,0,151,48,115,79,135,63],
[88,89,60,0,50,88,58,101,42],
[114,149,163,161,0,120,127,149,105],
[95,67,96,123,91,0,89,111,67],
[123,165,132,153,84,122,0,136,117],
[108,111,76,110,62,100,75,0,99],
[117,103,148,169,106,144,94,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,121,101,95,87,82,106,139],
[124,0,121,126,96,84,95,90,112],
[90,90,0,96,77,77,100,103,125],
[110,85,115,0,91,82,106,95,115],
[116,115,134,120,0,101,102,96,123],
[124,127,134,129,110,0,105,100,134],
[129,116,111,105,109,106,0,125,142],
[105,121,108,116,115,111,86,0,135],
[72,99,86,96,88,77,69,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,95,117,104,122,109,112,106],
[97,0,109,107,94,123,103,101,110],
[116,102,0,115,108,118,111,115,105],
[94,104,96,0,96,113,104,100,109],
[107,117,103,115,0,120,102,106,111],
[89,88,93,98,91,0,101,94,102],
[102,108,100,107,109,110,0,101,104],
[99,110,96,111,105,117,110,0,104],
[105,101,106,102,100,109,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,97,113,116,97,116,105,111],
[87,0,81,118,77,90,95,81,71],
[114,130,0,96,117,110,95,94,102],
[98,93,115,0,109,103,90,95,83],
[95,134,94,102,0,115,95,102,87],
[114,121,101,108,96,0,97,76,90],
[95,116,116,121,116,114,0,110,88],
[106,130,117,116,109,135,101,0,114],
[100,140,109,128,124,121,123,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,114,109,114,102,96,108,99],
[96,0,110,108,110,101,106,105,104],
[97,101,0,107,110,97,100,102,104],
[102,103,104,0,103,101,100,103,108],
[97,101,101,108,0,97,102,103,101],
[109,110,114,110,114,0,93,112,107],
[115,105,111,111,109,118,0,110,106],
[103,106,109,108,108,99,101,0,100],
[112,107,107,103,110,104,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,131,98,101,120,108,120],
[108,0,93,137,93,123,97,110,131],
[100,118,0,109,114,101,124,114,110],
[80,74,102,0,74,98,79,84,99],
[113,118,97,137,0,111,124,125,131],
[110,88,110,113,100,0,110,112,114],
[91,114,87,132,87,101,0,117,117],
[103,101,97,127,86,99,94,0,108],
[91,80,101,112,80,97,94,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,92,96,89,106,110,116,97],
[116,0,105,97,108,112,120,127,106],
[119,106,0,102,100,103,129,122,95],
[115,114,109,0,93,101,105,111,95],
[122,103,111,118,0,106,108,119,114],
[105,99,108,110,105,0,118,112,92],
[101,91,82,106,103,93,0,106,95],
[95,84,89,100,92,99,105,0,93],
[114,105,116,116,97,119,116,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,105,50,83,133,105,83,51],
[161,0,148,95,117,162,153,126,122],
[106,63,0,105,83,123,111,63,62],
[161,116,106,0,84,153,90,105,109],
[128,94,128,127,0,162,142,128,86],
[78,49,88,58,49,0,83,70,49],
[106,58,100,121,69,128,0,109,105],
[128,85,148,106,83,141,102,0,106],
[160,89,149,102,125,162,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,103,109,100,99,108,108],
[109,0,96,111,112,107,107,107,120],
[105,115,0,103,120,106,112,113,110],
[108,100,108,0,118,105,108,108,104],
[102,99,91,93,0,86,91,104,103],
[111,104,105,106,125,0,118,108,120],
[112,104,99,103,120,93,0,108,114],
[103,104,98,103,107,103,103,0,100],
[103,91,101,107,108,91,97,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,123,89,109,97,84,113],
[102,0,127,115,133,137,137,89,101],
[98,84,0,157,139,104,137,73,96],
[88,96,54,0,110,91,120,66,80],
[122,78,72,101,0,107,138,88,102],
[102,74,107,120,104,0,90,93,103],
[114,74,74,91,73,121,0,101,66],
[127,122,138,145,123,118,110,0,104],
[98,110,115,131,109,108,145,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,94,119,116,98,97,94,94],
[109,0,94,118,104,83,93,97,111],
[117,117,0,126,126,104,106,120,110],
[92,93,85,0,108,77,69,100,96],
[95,107,85,103,0,88,91,92,116],
[113,128,107,134,123,0,94,125,123],
[114,118,105,142,120,117,0,113,120],
[117,114,91,111,119,86,98,0,110],
[117,100,101,115,95,88,91,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,103,104,103,107,107,101,94],
[93,0,94,103,101,106,107,110,98],
[108,117,0,111,111,97,106,125,112],
[107,108,100,0,104,95,103,107,100],
[108,110,100,107,0,96,111,112,111],
[104,105,114,116,115,0,114,112,113],
[104,104,105,108,100,97,0,108,104],
[110,101,86,104,99,99,103,0,101],
[117,113,99,111,100,98,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,93,93,149,113,106,189,77],
[151,0,154,121,151,126,126,178,72],
[118,57,0,95,134,88,74,140,108],
[118,90,116,0,144,58,58,177,99],
[62,60,77,67,0,61,50,120,63],
[98,85,123,153,150,0,80,150,71],
[105,85,137,153,161,131,0,161,89],
[22,33,71,34,91,61,50,0,53],
[134,139,103,112,148,140,122,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,125,100,117,111,111,115,111],
[100,0,112,100,112,113,104,104,111],
[86,99,0,94,106,95,101,117,98],
[111,111,117,0,115,100,116,114,109],
[94,99,105,96,0,103,107,97,86],
[100,98,116,111,108,0,111,112,98],
[100,107,110,95,104,100,0,94,108],
[96,107,94,97,114,99,117,0,110],
[100,100,113,102,125,113,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,128,136,105,117,104,114,112],
[97,0,110,125,120,107,106,111,101],
[83,101,0,131,98,90,98,102,102],
[75,86,80,0,83,86,80,77,93],
[106,91,113,128,0,98,117,91,104],
[94,104,121,125,113,0,109,98,110],
[107,105,113,131,94,102,0,104,118],
[97,100,109,134,120,113,107,0,109],
[99,110,109,118,107,101,93,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,112,99,97,74,90,97,87],
[116,0,116,114,120,100,93,105,114],
[99,95,0,101,118,100,102,94,105],
[112,97,110,0,118,101,87,111,102],
[114,91,93,93,0,107,86,102,105],
[137,111,111,110,104,0,111,105,107],
[121,118,109,124,125,100,0,116,134],
[114,106,117,100,109,106,95,0,119],
[124,97,106,109,106,104,77,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,120,112,112,112,104,91,102],
[92,0,105,101,93,99,94,86,92],
[91,106,0,104,98,98,101,92,101],
[99,110,107,0,103,101,104,85,103],
[99,118,113,108,0,117,104,98,105],
[99,112,113,110,94,0,109,106,99],
[107,117,110,107,107,102,0,86,105],
[120,125,119,126,113,105,125,0,106],
[109,119,110,108,106,112,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,112,136,118,90,103,88,105],
[113,0,105,136,128,106,126,135,132],
[99,106,0,140,107,108,115,103,111],
[75,75,71,0,79,75,85,85,85],
[93,83,104,132,0,86,107,96,100],
[121,105,103,136,125,0,115,113,125],
[108,85,96,126,104,96,0,89,114],
[123,76,108,126,115,98,122,0,102],
[106,79,100,126,111,86,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,98,95,109,92,98,100],
[106,0,117,109,109,104,90,98,108],
[105,94,0,104,108,114,90,99,95],
[113,102,107,0,121,104,93,112,102],
[116,102,103,90,0,99,80,100,91],
[102,107,97,107,112,0,89,89,88],
[119,121,121,118,131,122,0,113,104],
[113,113,112,99,111,122,98,0,111],
[111,103,116,109,120,123,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,94,102,95,106,103,102],
[109,0,102,107,105,100,114,116,114],
[105,109,0,112,113,114,118,110,108],
[117,104,99,0,111,109,107,108,111],
[109,106,98,100,0,102,108,106,111],
[116,111,97,102,109,0,108,105,113],
[105,97,93,104,103,103,0,105,102],
[108,95,101,103,105,106,106,0,120],
[109,97,103,100,100,98,109,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,126,85,135,134,121,109,125],
[92,0,102,98,125,112,120,96,112],
[85,109,0,102,127,113,125,95,123],
[126,113,109,0,124,114,112,102,107],
[76,86,84,87,0,93,99,94,108],
[77,99,98,97,118,0,116,101,122],
[90,91,86,99,112,95,0,85,97],
[102,115,116,109,117,110,126,0,130],
[86,99,88,104,103,89,114,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,84,115,102,90,104,120,101],
[98,0,83,103,97,96,99,104,90],
[127,128,0,121,127,106,124,116,101],
[96,108,90,0,83,86,86,85,88],
[109,114,84,128,0,73,104,105,109],
[121,115,105,125,138,0,108,110,91],
[107,112,87,125,107,103,0,103,90],
[91,107,95,126,106,101,108,0,101],
[110,121,110,123,102,120,121,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,78,105,115,75,93,121,98],
[96,0,90,113,88,116,65,86,130],
[133,121,0,125,111,110,73,148,163],
[106,98,86,0,109,104,73,138,165],
[96,123,100,102,0,86,65,103,134],
[136,95,101,107,125,0,109,106,136],
[118,146,138,138,146,102,0,157,156],
[90,125,63,73,108,105,54,0,120],
[113,81,48,46,77,75,55,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,107,104,109,103,100,104],
[99,0,102,108,101,107,98,111,111],
[105,109,0,108,105,108,98,110,108],
[104,103,103,0,105,97,110,100,113],
[107,110,106,106,0,102,105,109,116],
[102,104,103,114,109,0,107,102,99],
[108,113,113,101,106,104,0,116,110],
[111,100,101,111,102,109,95,0,99],
[107,100,103,98,95,112,101,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,108,108,104,103,86,103,89],
[116,0,101,124,103,95,105,112,108],
[103,110,0,122,109,95,104,104,107],
[103,87,89,0,98,86,91,89,85],
[107,108,102,113,0,97,101,102,110],
[108,116,116,125,114,0,94,111,100],
[125,106,107,120,110,117,0,114,98],
[108,99,107,122,109,100,97,0,99],
[122,103,104,126,101,111,113,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,118,89,117,100,106,106,106],
[91,0,104,91,107,97,104,97,100],
[93,107,0,105,117,106,110,91,102],
[122,120,106,0,131,102,118,111,116],
[94,104,94,80,0,87,98,86,88],
[111,114,105,109,124,0,107,105,110],
[105,107,101,93,113,104,0,92,98],
[105,114,120,100,125,106,119,0,118],
[105,111,109,95,123,101,113,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,106,112,108,99,113,111],
[110,0,112,110,103,115,112,106,109],
[113,99,0,119,104,123,96,113,118],
[105,101,92,0,95,100,94,110,112],
[99,108,107,116,0,112,112,114,119],
[103,96,88,111,99,0,110,110,115],
[112,99,115,117,99,101,0,113,113],
[98,105,98,101,97,101,98,0,103],
[100,102,93,99,92,96,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,123,102,106,102,102,115],
[105,0,109,102,100,109,118,98,110],
[115,102,0,123,120,115,117,108,109],
[88,109,88,0,90,106,99,90,102],
[109,111,91,121,0,110,97,91,120],
[105,102,96,105,101,0,91,99,105],
[109,93,94,112,114,120,0,94,118],
[109,113,103,121,120,112,117,0,139],
[96,101,102,109,91,106,93,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,83,86,118,75,90,112,103],
[106,0,102,125,105,103,107,102,114],
[128,109,0,126,124,107,99,109,111],
[125,86,85,0,120,83,83,115,106],
[93,106,87,91,0,76,72,94,94],
[136,108,104,128,135,0,99,128,107],
[121,104,112,128,139,112,0,117,127],
[99,109,102,96,117,83,94,0,115],
[108,97,100,105,117,104,84,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,123,111,113,77,109,115,98],
[100,0,106,100,103,84,119,104,108],
[88,105,0,100,115,94,113,121,104],
[100,111,111,0,134,110,107,135,113],
[98,108,96,77,0,84,94,123,94],
[134,127,117,101,127,0,136,126,134],
[102,92,98,104,117,75,0,114,96],
[96,107,90,76,88,85,97,0,93],
[113,103,107,98,117,77,115,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,91,103,91,98,109,106],
[110,0,108,91,97,110,95,106,107],
[112,103,0,89,90,86,82,100,100],
[120,120,122,0,104,103,104,120,117],
[108,114,121,107,0,94,99,117,93],
[120,101,125,108,117,0,98,116,132],
[113,116,129,107,112,113,0,120,104],
[102,105,111,91,94,95,91,0,96],
[105,104,111,94,118,79,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,125,101,123,120,111,115],
[105,0,110,120,115,118,115,102,114],
[102,101,0,116,110,117,114,108,110],
[86,91,95,0,101,100,105,92,90],
[110,96,101,110,0,112,116,101,104],
[88,93,94,111,99,0,109,91,90],
[91,96,97,106,95,102,0,102,100],
[100,109,103,119,110,120,109,0,107],
[96,97,101,121,107,121,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,98,105,108,100,96,107,109],
[85,0,97,94,107,94,88,100,89],
[113,114,0,111,111,101,109,95,109],
[106,117,100,0,111,101,100,102,104],
[103,104,100,100,0,94,101,88,95],
[111,117,110,110,117,0,116,104,108],
[115,123,102,111,110,95,0,102,101],
[104,111,116,109,123,107,109,0,109],
[102,122,102,107,116,103,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,96,104,94,124,94,104],
[98,0,103,84,93,100,106,86,96],
[102,108,0,81,99,104,110,85,97],
[115,127,130,0,117,113,119,100,112],
[107,118,112,94,0,109,123,97,108],
[117,111,107,98,102,0,121,97,117],
[87,105,101,92,88,90,0,95,93],
[117,125,126,111,114,114,116,0,104],
[107,115,114,99,103,94,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,108,93,111,85,108,105],
[103,0,120,130,132,117,109,118,113],
[109,91,0,111,113,106,102,105,114],
[103,81,100,0,106,131,84,107,104],
[118,79,98,105,0,109,86,95,97],
[100,94,105,80,102,0,107,90,103],
[126,102,109,127,125,104,0,110,123],
[103,93,106,104,116,121,101,0,111],
[106,98,97,107,114,108,88,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,93,101,95,102,105,99,104],
[117,0,94,109,97,112,107,95,119],
[118,117,0,113,106,108,106,111,104],
[110,102,98,0,96,99,116,105,104],
[116,114,105,115,0,106,107,102,112],
[109,99,103,112,105,0,109,101,119],
[106,104,105,95,104,102,0,104,118],
[112,116,100,106,109,110,107,0,103],
[107,92,107,107,99,92,93,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,97,117,119,108,119,88,92],
[90,0,87,96,98,90,106,70,98],
[114,124,0,113,115,105,122,107,103],
[94,115,98,0,102,113,118,90,101],
[92,113,96,109,0,117,108,97,103],
[103,121,106,98,94,0,124,91,106],
[92,105,89,93,103,87,0,68,91],
[123,141,104,121,114,120,143,0,135],
[119,113,108,110,108,105,120,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,92,102,97,90,114,96,98],
[108,0,94,102,103,89,106,91,95],
[119,117,0,102,118,99,116,107,110],
[109,109,109,0,98,103,116,104,111],
[114,108,93,113,0,106,110,99,104],
[121,122,112,108,105,0,114,95,105],
[97,105,95,95,101,97,0,90,91],
[115,120,104,107,112,116,121,0,108],
[113,116,101,100,107,106,120,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,100,87,85,95,97,106],
[108,0,107,108,84,86,109,100,78],
[115,104,0,119,116,93,119,121,100],
[111,103,92,0,93,84,105,117,114],
[124,127,95,118,0,113,128,119,110],
[126,125,118,127,98,0,141,114,126],
[116,102,92,106,83,70,0,103,99],
[114,111,90,94,92,97,108,0,102],
[105,133,111,97,101,85,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,93,118,107,102,90,84],
[112,0,91,96,103,99,114,108,98],
[113,120,0,102,121,109,119,123,106],
[118,115,109,0,120,120,118,103,98],
[93,108,90,91,0,105,109,97,83],
[104,112,102,91,106,0,117,102,96],
[109,97,92,93,102,94,0,95,103],
[121,103,88,108,114,109,116,0,94],
[127,113,105,113,128,115,108,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,79,125,100,94,95,108,94],
[114,0,96,109,117,81,104,123,88],
[132,115,0,113,105,100,115,103,106],
[86,102,98,0,90,80,95,103,89],
[111,94,106,121,0,79,102,114,121],
[117,130,111,131,132,0,101,117,122],
[116,107,96,116,109,110,0,125,122],
[103,88,108,108,97,94,86,0,96],
[117,123,105,122,90,89,89,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,91,100,97,94,98,102,104],
[98,0,94,94,97,93,100,97,97],
[120,117,0,113,114,104,117,115,111],
[111,117,98,0,104,110,98,102,106],
[114,114,97,107,0,101,111,105,98],
[117,118,107,101,110,0,116,112,102],
[113,111,94,113,100,95,0,91,97],
[109,114,96,109,106,99,120,0,107],
[107,114,100,105,113,109,114,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,96,102,93,92,84,94,80],
[128,0,120,120,122,124,95,105,116],
[115,91,0,111,87,92,87,97,94],
[109,91,100,0,92,77,82,91,92],
[118,89,124,119,0,122,107,100,90],
[119,87,119,134,89,0,77,104,91],
[127,116,124,129,104,134,0,110,116],
[117,106,114,120,111,107,101,0,101],
[131,95,117,119,121,120,95,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,113,113,119,119,104,99,107],
[115,0,102,111,98,136,125,75,92],
[98,109,0,85,85,116,119,81,86],
[98,100,126,0,99,111,125,72,100],
[92,113,126,112,0,109,141,115,91],
[92,75,95,100,102,0,114,78,84],
[107,86,92,86,70,97,0,93,81],
[112,136,130,139,96,133,118,0,112],
[104,119,125,111,120,127,130,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,121,92,79,81,102,96,91],
[95,0,91,70,109,71,101,88,95],
[90,120,0,75,90,103,98,88,66],
[119,141,136,0,116,99,108,108,121],
[132,102,121,95,0,102,114,83,106],
[130,140,108,112,109,0,106,88,131],
[109,110,113,103,97,105,0,88,94],
[115,123,123,103,128,123,123,0,109],
[120,116,145,90,105,80,117,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,28,88,57,102,43,57,43],
[168,0,85,85,14,142,121,71,73],
[183,126,0,74,81,157,152,81,126],
[123,126,137,0,140,111,152,95,140],
[154,197,130,71,0,128,166,126,171],
[109,69,54,100,83,0,107,57,69],
[168,90,59,59,45,104,0,88,104],
[154,140,130,116,85,154,123,0,116],
[168,138,85,71,40,142,107,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,114,100,118,63,81,111,94],
[83,0,90,55,113,89,112,81,79],
[97,121,0,94,137,86,98,88,79],
[111,156,117,0,135,58,122,119,135],
[93,98,74,76,0,101,91,92,37],
[148,122,125,153,110,0,113,130,94],
[130,99,113,89,120,98,0,89,62],
[100,130,123,92,119,81,122,0,86],
[117,132,132,76,174,117,149,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,110,91,100,115,94,90],
[98,0,115,118,106,96,115,95,93],
[103,96,0,132,101,106,108,92,86],
[101,93,79,0,88,89,110,100,77],
[120,105,110,123,0,104,113,105,94],
[111,115,105,122,107,0,132,101,110],
[96,96,103,101,98,79,0,94,78],
[117,116,119,111,106,110,117,0,95],
[121,118,125,134,117,101,133,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,87,99,102,96,99,112,103],
[113,0,107,114,108,110,114,111,99],
[124,104,0,114,95,120,113,109,116],
[112,97,97,0,90,107,103,107,113],
[109,103,116,121,0,111,116,115,121],
[115,101,91,104,100,0,110,114,114],
[112,97,98,108,95,101,0,104,101],
[99,100,102,104,96,97,107,0,118],
[108,112,95,98,90,97,110,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,99,110,110,115,86,106,101],
[87,0,104,86,92,79,91,82,87],
[112,107,0,102,105,100,102,101,99],
[101,125,109,0,110,110,90,101,104],
[101,119,106,101,0,76,98,98,95],
[96,132,111,101,135,0,107,103,113],
[125,120,109,121,113,104,0,99,110],
[105,129,110,110,113,108,112,0,133],
[110,124,112,107,116,98,101,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,104,108,104,128,114,117,115],
[116,0,87,88,128,116,126,120,141],
[107,124,0,89,111,99,109,124,107],
[103,123,122,0,112,102,114,119,135],
[107,83,100,99,0,96,141,125,91],
[83,95,112,109,115,0,123,118,100],
[97,85,102,97,70,88,0,92,83],
[94,91,87,92,86,93,119,0,80],
[96,70,104,76,120,111,128,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,88,102,81,117,62,69,91],
[107,0,124,125,116,139,104,93,131],
[123,87,0,100,105,106,111,92,146],
[109,86,111,0,69,99,103,98,106],
[130,95,106,142,0,90,115,132,137],
[94,72,105,112,121,0,154,130,156],
[149,107,100,108,96,57,0,109,103],
[142,118,119,113,79,81,102,0,108],
[120,80,65,105,74,55,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,96,125,115,106,104,110],
[108,0,92,100,122,109,109,112,94],
[105,119,0,108,124,113,114,111,110],
[115,111,103,0,113,106,114,102,108],
[86,89,87,98,0,91,104,98,93],
[96,102,98,105,120,0,100,103,99],
[105,102,97,97,107,111,0,102,99],
[107,99,100,109,113,108,109,0,110],
[101,117,101,103,118,112,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,115,112,109,91,96,111],
[105,0,119,114,115,121,116,109,100],
[105,92,0,100,114,95,106,92,101],
[96,97,111,0,121,114,96,105,109],
[99,96,97,90,0,92,84,99,103],
[102,90,116,97,119,0,86,104,108],
[120,95,105,115,127,125,0,118,124],
[115,102,119,106,112,107,93,0,111],
[100,111,110,102,108,103,87,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,131,116,139,121,137,115],
[102,0,99,80,97,117,88,97,83],
[112,112,0,99,129,105,121,121,96],
[80,131,112,0,114,100,89,111,107],
[95,114,82,97,0,97,95,108,106],
[72,94,106,111,114,0,91,110,96],
[90,123,90,122,116,120,0,120,103],
[74,114,90,100,103,101,91,0,100],
[96,128,115,104,105,115,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,97,106,105,90,107,102,103],
[105,0,89,97,109,87,101,106,92],
[114,122,0,104,107,112,107,117,107],
[105,114,107,0,104,105,103,109,110],
[106,102,104,107,0,90,98,106,99],
[121,124,99,106,121,0,100,116,104],
[104,110,104,108,113,111,0,104,113],
[109,105,94,102,105,95,107,0,86],
[108,119,104,101,112,107,98,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,98,97,94,78,104,109,97],
[115,0,104,112,100,103,115,123,99],
[113,107,0,114,103,112,117,110,104],
[114,99,97,0,101,95,113,108,103],
[117,111,108,110,0,106,116,110,102],
[133,108,99,116,105,0,115,113,111],
[107,96,94,98,95,96,0,97,95],
[102,88,101,103,101,98,114,0,103],
[114,112,107,108,109,100,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,148,107,123,112,122,127,96],
[79,0,141,93,100,91,101,114,94],
[63,70,0,71,74,65,57,80,49],
[104,118,140,0,126,97,106,128,101],
[88,111,137,85,0,77,100,102,111],
[99,120,146,114,134,0,115,118,114],
[89,110,154,105,111,96,0,115,85],
[84,97,131,83,109,93,96,0,101],
[115,117,162,110,100,97,126,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,87,93,120,105,108,93,104],
[112,0,81,119,121,110,106,106,126],
[124,130,0,118,128,124,119,101,106],
[118,92,93,0,128,101,113,112,119],
[91,90,83,83,0,112,102,89,98],
[106,101,87,110,99,0,124,119,109],
[103,105,92,98,109,87,0,95,118],
[118,105,110,99,122,92,116,0,123],
[107,85,105,92,113,102,93,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,94,103,90,128,99,99,113],
[116,0,96,125,89,114,97,97,124],
[117,115,0,125,93,119,88,118,95],
[108,86,86,0,106,115,100,90,81],
[121,122,118,105,0,113,105,102,93],
[83,97,92,96,98,0,90,100,102],
[112,114,123,111,106,121,0,112,95],
[112,114,93,121,109,111,99,0,106],
[98,87,116,130,118,109,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,108,95,92,101,97,99],
[110,0,110,109,99,95,116,104,111],
[110,101,0,108,91,98,109,109,109],
[103,102,103,0,87,81,102,98,100],
[116,112,120,124,0,110,120,105,115],
[119,116,113,130,101,0,118,121,116],
[110,95,102,109,91,93,0,110,102],
[114,107,102,113,106,90,101,0,110],
[112,100,102,111,96,95,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,122,101,95,111,110,118],
[104,0,106,119,108,108,116,102,118],
[107,105,0,112,113,111,115,112,118],
[89,92,99,0,100,80,94,90,104],
[110,103,98,111,0,107,112,101,99],
[116,103,100,131,104,0,121,104,124],
[100,95,96,117,99,90,0,104,105],
[101,109,99,121,110,107,107,0,121],
[93,93,93,107,112,87,106,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,100,100,97,119,86,80],
[113,0,93,102,86,91,121,90,74],
[106,118,0,92,117,93,123,90,80],
[111,109,119,0,123,116,122,95,115],
[111,125,94,88,0,93,138,87,93],
[114,120,118,95,118,0,137,111,106],
[92,90,88,89,73,74,0,79,56],
[125,121,121,116,124,100,132,0,109],
[131,137,131,96,118,105,155,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,118,115,132,97,111,92],
[111,0,86,126,110,113,87,107,109],
[109,125,0,132,111,116,106,97,107],
[93,85,79,0,77,86,74,108,79],
[96,101,100,134,0,117,98,106,108],
[79,98,95,125,94,0,72,94,81],
[114,124,105,137,113,139,0,111,109],
[100,104,114,103,105,117,100,0,108],
[119,102,104,132,103,130,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,107,113,93,113,89,97,65],
[128,0,119,123,127,114,126,104,110],
[104,92,0,117,135,113,85,102,52],
[98,88,94,0,104,133,86,97,88],
[118,84,76,107,0,91,107,133,68],
[98,97,98,78,120,0,104,98,101],
[122,85,126,125,104,107,0,122,123],
[114,107,109,114,78,113,89,0,98],
[146,101,159,123,143,110,88,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,75,71,109,37,71,34,71],
[140,0,109,72,140,71,71,106,109],
[136,102,0,102,140,105,136,102,139],
[140,139,109,0,106,105,139,34,143],
[102,71,71,105,0,37,105,34,37],
[174,140,106,106,174,0,68,140,143],
[140,140,75,72,106,143,0,72,109],
[177,105,109,177,177,71,139,0,177],
[140,102,72,68,174,68,102,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,96,102,108,87,107,125,111],
[114,0,112,114,131,98,103,116,115],
[115,99,0,110,100,101,89,101,97],
[109,97,101,0,102,102,88,128,109],
[103,80,111,109,0,94,86,114,94],
[124,113,110,109,117,0,102,115,111],
[104,108,122,123,125,109,0,111,113],
[86,95,110,83,97,96,100,0,87],
[100,96,114,102,117,100,98,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,113,132,127,113,106,113],
[111,0,97,86,107,103,117,86,99],
[100,114,0,121,137,107,140,103,100],
[98,125,90,0,130,117,125,99,83],
[79,104,74,81,0,85,101,62,80],
[84,108,104,94,126,0,114,93,80],
[98,94,71,86,110,97,0,61,102],
[105,125,108,112,149,118,150,0,113],
[98,112,111,128,131,131,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,96,97,100,91,82,93,96],
[106,0,107,100,95,102,98,98,98],
[115,104,0,98,92,109,109,94,93],
[114,111,113,0,120,93,104,101,104],
[111,116,119,91,0,111,112,89,95],
[120,109,102,118,100,0,102,99,94],
[129,113,102,107,99,109,0,106,112],
[118,113,117,110,122,112,105,0,115],
[115,113,118,107,116,117,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,100,100,102,108,107,111,106],
[99,0,103,110,110,94,109,100,94],
[111,108,0,114,108,112,98,118,103],
[111,101,97,0,117,100,116,117,121],
[109,101,103,94,0,105,112,105,96],
[103,117,99,111,106,0,101,103,109],
[104,102,113,95,99,110,0,113,106],
[100,111,93,94,106,108,98,0,109],
[105,117,108,90,115,102,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,128,85,123,95,90,109,77],
[93,0,125,104,120,125,105,123,101],
[83,86,0,73,107,92,97,83,72],
[126,107,138,0,138,121,104,98,133],
[88,91,104,73,0,104,104,93,82],
[116,86,119,90,107,0,89,82,96],
[121,106,114,107,107,122,0,84,103],
[102,88,128,113,118,129,127,0,89],
[134,110,139,78,129,115,108,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,93,93,91,96,95,103],
[118,0,120,116,111,101,107,112,117],
[114,91,0,98,103,100,90,104,105],
[118,95,113,0,112,108,108,107,109],
[118,100,108,99,0,106,94,100,109],
[120,110,111,103,105,0,104,109,121],
[115,104,121,103,117,107,0,115,114],
[116,99,107,104,111,102,96,0,106],
[108,94,106,102,102,90,97,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,89,93,79,93,99,107,95],
[128,0,116,110,106,103,115,119,101],
[122,95,0,104,100,109,110,104,104],
[118,101,107,0,98,102,114,117,109],
[132,105,111,113,0,104,119,111,106],
[118,108,102,109,107,0,107,114,109],
[112,96,101,97,92,104,0,112,102],
[104,92,107,94,100,97,99,0,101],
[116,110,107,102,105,102,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,96,103,99,101,122,105,108],
[103,0,106,107,100,118,105,105,117],
[115,105,0,87,88,97,95,99,105],
[108,104,124,0,95,89,103,102,108],
[112,111,123,116,0,98,111,103,129],
[110,93,114,122,113,0,119,100,104],
[89,106,116,108,100,92,0,96,101],
[106,106,112,109,108,111,115,0,105],
[103,94,106,103,82,107,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,119,79,139,96,125,119,119],
[106,0,140,145,131,87,137,138,131],
[92,71,0,119,114,96,108,112,150],
[132,66,92,0,118,118,155,132,168],
[72,80,97,93,0,90,106,130,122],
[115,124,115,93,121,0,130,124,128],
[86,74,103,56,105,81,0,104,116],
[92,73,99,79,81,87,107,0,108],
[92,80,61,43,89,83,95,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,126,112,115,101,99,114,92],
[113,0,109,115,113,111,103,112,124],
[85,102,0,116,122,99,98,98,111],
[99,96,95,0,85,78,99,101,87],
[96,98,89,126,0,103,110,116,94],
[110,100,112,133,108,0,102,114,102],
[112,108,113,112,101,109,0,123,104],
[97,99,113,110,95,97,88,0,92],
[119,87,100,124,117,109,107,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,141,111,119,121,121,100,132],
[99,0,145,103,133,102,106,114,119],
[70,66,0,100,112,70,89,73,78],
[100,108,111,0,119,105,104,119,106],
[92,78,99,92,0,94,74,96,67],
[90,109,141,106,117,0,80,108,102],
[90,105,122,107,137,131,0,113,114],
[111,97,138,92,115,103,98,0,113],
[79,92,133,105,144,109,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,114,103,121,109,111,103,103],
[88,0,95,89,96,97,100,88,87],
[97,116,0,105,113,102,112,96,98],
[108,122,106,0,115,110,107,106,105],
[90,115,98,96,0,97,117,94,101],
[102,114,109,101,114,0,121,104,104],
[100,111,99,104,94,90,0,93,95],
[108,123,115,105,117,107,118,0,109],
[108,124,113,106,110,107,116,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,124,125,107,114,101,121,99],
[104,0,112,111,108,115,104,114,107],
[87,99,0,109,102,104,106,106,99],
[86,100,102,0,98,104,103,104,91],
[104,103,109,113,0,117,112,122,113],
[97,96,107,107,94,0,99,98,99],
[110,107,105,108,99,112,0,121,104],
[90,97,105,107,89,113,90,0,85],
[112,104,112,120,98,112,107,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,65,84,116,92,125,80,97],
[116,0,125,107,106,114,139,116,104],
[146,86,0,121,114,142,148,121,106],
[127,104,90,0,129,123,126,106,100],
[95,105,97,82,0,80,154,79,89],
[119,97,69,88,131,0,120,109,124],
[86,72,63,85,57,91,0,99,102],
[131,95,90,105,132,102,112,0,99],
[114,107,105,111,122,87,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,132,130,94,88,58,65,92],
[113,0,143,96,100,112,113,100,64],
[79,68,0,72,77,85,67,87,57],
[81,115,139,0,80,107,81,123,102],
[117,111,134,131,0,111,117,88,109],
[123,99,126,104,100,0,101,122,46],
[153,98,144,130,94,110,0,65,88],
[146,111,124,88,123,89,146,0,58],
[119,147,154,109,102,165,123,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,98,113,109,108,100,97,102],
[102,0,103,127,109,94,98,93,106],
[113,108,0,127,128,105,118,102,114],
[98,84,84,0,100,90,92,90,88],
[102,102,83,111,0,102,112,94,96],
[103,117,106,121,109,0,100,100,111],
[111,113,93,119,99,111,0,97,105],
[114,118,109,121,117,111,114,0,97],
[109,105,97,123,115,100,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,123,101,91,93,100,130,103],
[101,0,109,111,110,113,101,116,120],
[88,102,0,99,94,102,95,101,108],
[110,100,112,0,103,108,113,122,118],
[120,101,117,108,0,106,109,121,110],
[118,98,109,103,105,0,121,120,104],
[111,110,116,98,102,90,0,111,111],
[81,95,110,89,90,91,100,0,108],
[108,91,103,93,101,107,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,115,106,113,107,108,108],
[100,0,120,124,111,115,108,113,108],
[106,91,0,102,102,102,91,106,94],
[96,87,109,0,105,105,110,100,93],
[105,100,109,106,0,127,103,108,110],
[98,96,109,106,84,0,103,107,105],
[104,103,120,101,108,108,0,113,107],
[103,98,105,111,103,104,98,0,107],
[103,103,117,118,101,106,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,128,124,105,108,116,119],
[96,0,125,101,122,88,82,94,97],
[95,86,0,130,126,90,97,89,93],
[83,110,81,0,112,71,84,89,107],
[87,89,85,99,0,84,85,100,78],
[106,123,121,140,127,0,100,125,123],
[103,129,114,127,126,111,0,120,119],
[95,117,122,122,111,86,91,0,115],
[92,114,118,104,133,88,92,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,132,107,105,119,110,106],
[103,0,118,131,122,93,101,98,135],
[95,93,0,104,114,103,95,100,110],
[79,80,107,0,104,84,89,85,116],
[104,89,97,107,0,94,82,93,122],
[106,118,108,127,117,0,104,101,119],
[92,110,116,122,129,107,0,108,127],
[101,113,111,126,118,110,103,0,133],
[105,76,101,95,89,92,84,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,50,44,44,64,9,90,42],
[163,0,138,66,150,178,88,132,132],
[161,73,0,95,139,178,119,117,117],
[167,145,116,0,150,136,136,162,75],
[167,61,72,61,0,136,88,175,61],
[147,33,33,75,75,0,40,150,44],
[202,123,92,75,123,171,0,158,44],
[121,79,94,49,36,61,53,0,18],
[169,79,94,136,150,167,167,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,124,111,94,105,115,115,115],
[110,0,120,104,115,97,100,115,118],
[87,91,0,99,95,95,96,96,120],
[100,107,112,0,106,120,105,104,118],
[117,96,116,105,0,112,114,102,110],
[106,114,116,91,99,0,108,102,112],
[96,111,115,106,97,103,0,96,103],
[96,96,115,107,109,109,115,0,123],
[96,93,91,93,101,99,108,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,121,131,109,116,83,91,131],
[106,0,125,133,119,107,137,83,114],
[90,86,0,109,105,85,68,87,100],
[80,78,102,0,93,76,77,66,99],
[102,92,106,118,0,101,106,89,90],
[95,104,126,135,110,0,88,98,106],
[128,74,143,134,105,123,0,109,124],
[120,128,124,145,122,113,102,0,133],
[80,97,111,112,121,105,87,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,143,143,173,123,130,201,123],
[121,0,113,153,113,129,211,211,72],
[68,98,0,111,140,90,98,169,90],
[68,58,100,0,60,72,75,75,72],
[38,98,71,151,0,79,128,159,72],
[88,82,121,139,132,0,178,139,109],
[81,0,113,136,83,33,0,104,33],
[10,0,42,136,52,72,107,0,35],
[88,139,121,139,139,102,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,116,117,106,110,140,104,100],
[82,0,88,120,87,110,136,107,101],
[95,123,0,115,95,126,122,104,97],
[94,91,96,0,91,98,107,97,93],
[105,124,116,120,0,112,147,120,111],
[101,101,85,113,99,0,106,84,79],
[71,75,89,104,64,105,0,74,81],
[107,104,107,114,91,127,137,0,108],
[111,110,114,118,100,132,130,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,110,116,98,120,108,111],
[104,0,105,111,95,107,97,114,121],
[114,106,0,123,106,101,115,109,121],
[101,100,88,0,96,99,99,105,104],
[95,116,105,115,0,107,119,97,115],
[113,104,110,112,104,0,117,101,114],
[91,114,96,112,92,94,0,107,102],
[103,97,102,106,114,110,104,0,117],
[100,90,90,107,96,97,109,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,126,110,106,114,118,113],
[106,0,107,113,107,102,115,113,106],
[94,104,0,114,98,105,100,110,101],
[85,98,97,0,100,86,87,95,93],
[101,104,113,111,0,107,105,111,97],
[105,109,106,125,104,0,105,110,95],
[97,96,111,124,106,106,0,114,111],
[93,98,101,116,100,101,97,0,94],
[98,105,110,118,114,116,100,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,99,96,109,97,102,91],
[105,0,97,97,101,104,105,108,90],
[101,114,0,100,91,91,106,106,97],
[112,114,111,0,101,96,107,117,96],
[115,110,120,110,0,100,114,123,108],
[102,107,120,115,111,0,111,117,101],
[114,106,105,104,97,100,0,118,92],
[109,103,105,94,88,94,93,0,93],
[120,121,114,115,103,110,119,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,74,78,75,126,113,102,87],
[124,0,133,83,110,139,117,141,137],
[137,78,0,85,93,112,120,137,106],
[133,128,126,0,89,143,161,148,141],
[136,101,118,122,0,131,139,146,126],
[85,72,99,68,80,0,111,91,90],
[98,94,91,50,72,100,0,102,76],
[109,70,74,63,65,120,109,0,108],
[124,74,105,70,85,121,135,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,114,108,107,90,108,99,109],
[119,0,123,114,113,107,102,108,110],
[97,88,0,99,110,101,91,98,118],
[103,97,112,0,103,104,103,105,113],
[104,98,101,108,0,106,97,116,112],
[121,104,110,107,105,0,110,108,115],
[103,109,120,108,114,101,0,112,122],
[112,103,113,106,95,103,99,0,117],
[102,101,93,98,99,96,89,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,117,114,96,110,110,110,118],
[98,0,112,111,100,99,110,115,109],
[94,99,0,100,88,101,98,96,114],
[97,100,111,0,93,99,100,110,107],
[115,111,123,118,0,109,104,118,116],
[101,112,110,112,102,0,102,111,104],
[101,101,113,111,107,109,0,116,110],
[101,96,115,101,93,100,95,0,106],
[93,102,97,104,95,107,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,113,111,81,110,125,110,96],
[85,0,85,94,101,91,94,64,76],
[98,126,0,124,91,103,118,105,111],
[100,117,87,0,112,111,124,84,91],
[130,110,120,99,0,110,129,109,100],
[101,120,108,100,101,0,125,125,106],
[86,117,93,87,82,86,0,101,89],
[101,147,106,127,102,86,110,0,99],
[115,135,100,120,111,105,122,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,94,101,94,96,101,98],
[114,0,106,104,123,108,114,117,113],
[111,105,0,101,109,109,115,115,99],
[117,107,110,0,112,109,106,118,97],
[110,88,102,99,0,108,98,109,87],
[117,103,102,102,103,0,110,121,103],
[115,97,96,105,113,101,0,122,103],
[110,94,96,93,102,90,89,0,84],
[113,98,112,114,124,108,108,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,96,91,97,93,100,95],
[116,0,108,109,118,106,115,103,123],
[110,103,0,94,98,103,102,95,108],
[115,102,117,0,107,105,98,97,109],
[120,93,113,104,0,91,97,102,115],
[114,105,108,106,120,0,103,111,110],
[118,96,109,113,114,108,0,106,115],
[111,108,116,114,109,100,105,0,116],
[116,88,103,102,96,101,96,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,114,124,105,117,115,107],
[100,0,117,107,118,116,124,108,121],
[104,94,0,103,110,111,105,116,103],
[97,104,108,0,113,117,122,125,107],
[87,93,101,98,0,100,103,98,96],
[106,95,100,94,111,0,108,107,109],
[94,87,106,89,108,103,0,87,93],
[96,103,95,86,113,104,124,0,107],
[104,90,108,104,115,102,118,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,120,105,110,118,117,108,122],
[112,0,115,107,118,125,111,100,116],
[91,96,0,103,97,102,113,93,106],
[106,104,108,0,109,116,125,99,124],
[101,93,114,102,0,109,110,101,100],
[93,86,109,95,102,0,107,101,99],
[94,100,98,86,101,104,0,100,99],
[103,111,118,112,110,110,111,0,103],
[89,95,105,87,111,112,112,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,119,118,95,74,101,118,97],
[99,0,86,100,123,79,92,68,99],
[92,125,0,133,125,109,109,106,92],
[93,111,78,0,88,89,79,81,88],
[116,88,86,123,0,77,95,125,106],
[137,132,102,122,134,0,102,105,125],
[110,119,102,132,116,109,0,108,108],
[93,143,105,130,86,106,103,0,110],
[114,112,119,123,105,86,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,111,105,104,114,107,113],
[112,0,113,123,104,113,114,106,108],
[100,98,0,111,105,96,102,103,111],
[100,88,100,0,98,99,100,94,98],
[106,107,106,113,0,103,116,99,110],
[107,98,115,112,108,0,105,107,108],
[97,97,109,111,95,106,0,97,114],
[104,105,108,117,112,104,114,0,111],
[98,103,100,113,101,103,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,99,98,120,115,110,111],
[98,0,115,101,115,108,111,107,105],
[110,96,0,98,110,102,112,119,91],
[112,110,113,0,99,113,106,97,87],
[113,96,101,112,0,110,113,125,93],
[91,103,109,98,101,0,105,112,115],
[96,100,99,105,98,106,0,112,104],
[101,104,92,114,86,99,99,0,106],
[100,106,120,124,118,96,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,106,112,116,110,100,117,112],
[93,0,91,105,111,94,104,106,94],
[105,120,0,108,122,119,97,114,104],
[99,106,103,0,112,105,109,108,105],
[95,100,89,99,0,101,104,103,100],
[101,117,92,106,110,0,106,113,107],
[111,107,114,102,107,105,0,114,117],
[94,105,97,103,108,98,97,0,91],
[99,117,107,106,111,104,94,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,103,129,108,68,42,147,103],
[143,0,143,143,82,26,82,143,185],
[108,68,0,150,108,68,150,150,150],
[82,68,61,0,108,68,124,108,106],
[103,129,103,103,0,129,42,121,103],
[143,185,143,143,82,0,124,143,185],
[169,129,61,87,169,87,0,105,167],
[64,68,61,103,90,68,106,0,106],
[108,26,61,105,108,26,44,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,123,119,169,95,136,118,73],
[52,0,113,79,109,60,96,92,47],
[88,98,0,59,92,77,88,107,78],
[92,132,152,0,146,132,150,98,99],
[42,102,119,65,0,95,136,96,34],
[116,151,134,79,116,0,144,110,110],
[75,115,123,61,75,67,0,82,31],
[93,119,104,113,115,101,129,0,68],
[138,164,133,112,177,101,180,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,109,112,115,111,117,100],
[106,0,99,93,102,96,98,98,95],
[114,112,0,101,120,113,119,114,97],
[102,118,110,0,111,106,106,106,103],
[99,109,91,100,0,105,101,105,115],
[96,115,98,105,106,0,100,100,91],
[100,113,92,105,110,111,0,115,99],
[94,113,97,105,106,111,96,0,105],
[111,116,114,108,96,120,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,99,114,93,104,103,98],
[111,0,119,115,121,105,110,119,98],
[112,92,0,108,113,98,92,109,97],
[112,96,103,0,101,105,98,109,97],
[97,90,98,110,0,86,96,100,89],
[118,106,113,106,125,0,104,118,91],
[107,101,119,113,115,107,0,121,110],
[108,92,102,102,111,93,90,0,81],
[113,113,114,114,122,120,101,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,112,113,118,113,103,100,96],
[120,0,109,107,112,115,112,107,105],
[99,102,0,107,103,110,106,105,101],
[98,104,104,0,109,108,112,99,101],
[93,99,108,102,0,99,107,103,100],
[98,96,101,103,112,0,108,97,106],
[108,99,105,99,104,103,0,93,102],
[111,104,106,112,108,114,118,0,106],
[115,106,110,110,111,105,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,102,108,105,96,101,112],
[99,0,98,100,108,101,99,106,108],
[104,113,0,117,112,102,108,116,109],
[109,111,94,0,112,106,109,106,114],
[103,103,99,99,0,92,99,111,111],
[106,110,109,105,119,0,113,99,113],
[115,112,103,102,112,98,0,103,99],
[110,105,95,105,100,112,108,0,114],
[99,103,102,97,100,98,112,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,102,117,102,103,103,108],
[100,0,120,107,117,97,97,112,103],
[96,91,0,98,96,95,103,83,99],
[109,104,113,0,102,88,97,95,108],
[94,94,115,109,0,97,97,95,105],
[109,114,116,123,114,0,103,100,122],
[108,114,108,114,114,108,0,94,112],
[108,99,128,116,116,111,117,0,119],
[103,108,112,103,106,89,99,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,110,107,102,102,99,105],
[108,0,108,111,100,106,104,105,97],
[108,103,0,114,98,108,103,103,107],
[101,100,97,0,88,86,93,105,94],
[104,111,113,123,0,110,108,113,106],
[109,105,103,125,101,0,106,113,104],
[109,107,108,118,103,105,0,109,105],
[112,106,108,106,98,98,102,0,113],
[106,114,104,117,105,107,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,120,102,103,115,112,103,116],
[94,0,95,88,87,99,112,97,119],
[91,116,0,99,100,96,127,120,121],
[109,123,112,0,116,102,139,135,127],
[108,124,111,95,0,106,117,130,112],
[96,112,115,109,105,0,101,108,107],
[99,99,84,72,94,110,0,98,101],
[108,114,91,76,81,103,113,0,101],
[95,92,90,84,99,104,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,88,139,86,96,93,118,122],
[104,0,109,120,93,78,80,106,109],
[123,102,0,147,94,118,104,111,139],
[72,91,64,0,95,89,71,108,89],
[125,118,117,116,0,89,132,137,112],
[115,133,93,122,122,0,100,107,141],
[118,131,107,140,79,111,0,145,120],
[93,105,100,103,74,104,66,0,110],
[89,102,72,122,99,70,91,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,109,115,111,109,114,111],
[107,0,112,106,113,106,121,108,104],
[102,99,0,108,113,110,106,107,99],
[102,105,103,0,108,116,124,107,106],
[96,98,98,103,0,94,110,99,95],
[100,105,101,95,117,0,108,100,103],
[102,90,105,87,101,103,0,101,104],
[97,103,104,104,112,111,110,0,99],
[100,107,112,105,116,108,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,119,99,117,108,89,85],
[107,0,108,105,101,120,98,92,100],
[105,103,0,104,109,109,99,100,91],
[92,106,107,0,110,103,100,104,83],
[112,110,102,101,0,109,109,106,97],
[94,91,102,108,102,0,96,105,88],
[103,113,112,111,102,115,0,109,105],
[122,119,111,107,105,106,102,0,106],
[126,111,120,128,114,123,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,105,96,115,114,90,98],
[100,0,97,114,104,99,107,98,95],
[109,114,0,118,104,109,104,102,94],
[106,97,93,0,102,109,109,101,105],
[115,107,107,109,0,121,110,105,111],
[96,112,102,102,90,0,111,108,91],
[97,104,107,102,101,100,0,103,91],
[121,113,109,110,106,103,108,0,103],
[113,116,117,106,100,120,120,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,112,111,101,96,101,94],
[109,0,104,118,111,106,98,106,103],
[111,107,0,122,112,107,93,94,92],
[99,93,89,0,106,101,78,92,88],
[100,100,99,105,0,94,100,76,91],
[110,105,104,110,117,0,97,111,89],
[115,113,118,133,111,114,0,97,104],
[110,105,117,119,135,100,114,0,108],
[117,108,119,123,120,122,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,112,102,85,111,82,109,103],
[118,0,121,102,108,107,106,116,116],
[99,90,0,90,103,98,88,101,93],
[109,109,121,0,107,110,101,101,102],
[126,103,108,104,0,118,96,118,106],
[100,104,113,101,93,0,97,98,112],
[129,105,123,110,115,114,0,115,107],
[102,95,110,110,93,113,96,0,95],
[108,95,118,109,105,99,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,180,119,104,108,97,144],
[111,0,91,152,138,125,111,112,119],
[100,120,0,133,102,122,103,105,89],
[31,59,78,0,63,89,75,59,86],
[92,73,109,148,0,107,72,89,106],
[107,86,89,122,104,0,103,71,88],
[103,100,108,136,139,108,0,112,111],
[114,99,106,152,122,140,99,0,148],
[67,92,122,125,105,123,100,63,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,99,106,105,104,101,111,108],
[97,0,93,86,98,101,94,99,105],
[112,118,0,108,111,109,97,102,111],
[105,125,103,0,108,99,109,108,119],
[106,113,100,103,0,109,103,98,110],
[107,110,102,112,102,0,102,94,93],
[110,117,114,102,108,109,0,92,92],
[100,112,109,103,113,117,119,0,105],
[103,106,100,92,101,118,119,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,127,99,109,107,121,120,113],
[107,0,112,115,102,99,113,111,115],
[84,99,0,87,98,104,100,112,93],
[112,96,124,0,93,104,92,124,108],
[102,109,113,118,0,125,105,135,111],
[104,112,107,107,86,0,106,123,103],
[90,98,111,119,106,105,0,131,110],
[91,100,99,87,76,88,80,0,91],
[98,96,118,103,100,108,101,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,113,108,110,107,113,108],
[110,0,111,109,114,113,111,104,113],
[105,100,0,95,101,109,101,103,112],
[98,102,116,0,104,104,115,99,102],
[103,97,110,107,0,104,97,107,113],
[101,98,102,107,107,0,101,104,104],
[104,100,110,96,114,110,0,106,108],
[98,107,108,112,104,107,105,0,110],
[103,98,99,109,98,107,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,91,101,94,109,107,102,93],
[99,0,92,93,87,97,98,94,95],
[120,119,0,101,104,98,109,102,89],
[110,118,110,0,105,124,94,105,105],
[117,124,107,106,0,102,99,103,103],
[102,114,113,87,109,0,98,98,95],
[104,113,102,117,112,113,0,97,110],
[109,117,109,106,108,113,114,0,96],
[118,116,122,106,108,116,101,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,133,99,168,120,150,99,136],
[74,0,97,67,91,76,110,80,73],
[78,114,0,78,115,94,93,83,79],
[112,144,133,0,153,104,136,106,117],
[43,120,96,58,0,66,92,100,89],
[91,135,117,107,145,0,145,100,103],
[61,101,118,75,119,66,0,85,88],
[112,131,128,105,111,111,126,0,106],
[75,138,132,94,122,108,123,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,111,117,108,119,100,105],
[98,0,96,96,101,91,98,96,98],
[104,115,0,107,105,106,121,103,103],
[100,115,104,0,115,101,109,104,107],
[94,110,106,96,0,104,105,100,84],
[103,120,105,110,107,0,115,112,102],
[92,113,90,102,106,96,0,103,101],
[111,115,108,107,111,99,108,0,104],
[106,113,108,104,127,109,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,97,100,109,129,116,110,132],
[89,0,104,91,115,103,111,88,91],
[114,107,0,106,101,117,122,103,129],
[111,120,105,0,116,124,122,117,120],
[102,96,110,95,0,106,113,94,109],
[82,108,94,87,105,0,90,90,113],
[95,100,89,89,98,121,0,96,113],
[101,123,108,94,117,121,115,0,115],
[79,120,82,91,102,98,98,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,108,100,103,106,108,93,95],
[116,0,104,102,118,106,108,93,107],
[103,107,0,106,117,109,109,114,92],
[111,109,105,0,121,119,122,106,105],
[108,93,94,90,0,99,100,95,98],
[105,105,102,92,112,0,114,96,99],
[103,103,102,89,111,97,0,94,91],
[118,118,97,105,116,115,117,0,112],
[116,104,119,106,113,112,120,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,126,125,117,127,117,118],
[113,0,101,118,122,109,113,113,109],
[106,110,0,122,121,110,117,129,105],
[85,93,89,0,107,95,100,100,90],
[86,89,90,104,0,96,110,103,96],
[94,102,101,116,115,0,102,112,110],
[84,98,94,111,101,109,0,109,109],
[94,98,82,111,108,99,102,0,101],
[93,102,106,121,115,101,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,92,88,106,102,119,97,87],
[116,0,105,100,98,117,109,114,107],
[119,106,0,109,105,122,122,106,102],
[123,111,102,0,105,114,120,106,103],
[105,113,106,106,0,113,126,112,108],
[109,94,89,97,98,0,124,94,98],
[92,102,89,91,85,87,0,86,103],
[114,97,105,105,99,117,125,0,112],
[124,104,109,108,103,113,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,104,91,107,105,93,78],
[115,0,117,104,103,106,112,102,102],
[116,94,0,101,93,118,122,92,96],
[107,107,110,0,109,105,120,120,92],
[120,108,118,102,0,104,108,107,114],
[104,105,93,106,107,0,120,105,96],
[106,99,89,91,103,91,0,90,89],
[118,109,119,91,104,106,121,0,101],
[133,109,115,119,97,115,122,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,113,120,102,94,93,101],
[115,0,98,120,137,92,116,112,116],
[116,113,0,135,130,118,101,116,129],
[98,91,76,0,110,115,81,101,99],
[91,74,81,101,0,80,78,78,107],
[109,119,93,96,131,0,98,81,105],
[117,95,110,130,133,113,0,108,121],
[118,99,95,110,133,130,103,0,109],
[110,95,82,112,104,106,90,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,82,85,69,98,91,98,46],
[115,0,136,178,137,167,161,167,93],
[129,75,0,112,49,112,120,66,103],
[126,33,99,0,99,125,117,63,104],
[142,74,162,112,0,103,113,77,107],
[113,44,99,86,108,0,50,56,113],
[120,50,91,94,98,161,0,55,63],
[113,44,145,148,134,155,156,0,82],
[165,118,108,107,104,98,148,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,101,122,112,101,113,101,101],
[97,0,106,115,102,96,109,95,82],
[110,105,0,122,95,106,129,110,90],
[89,96,89,0,92,91,97,90,92],
[99,109,116,119,0,108,111,89,94],
[110,115,105,120,103,0,112,101,117],
[98,102,82,114,100,99,0,101,94],
[110,116,101,121,122,110,110,0,96],
[110,129,121,119,117,94,117,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,97,103,105,102,91,94,122],
[125,0,111,115,117,107,102,105,123],
[114,100,0,126,118,120,108,113,130],
[108,96,85,0,115,102,92,95,124],
[106,94,93,96,0,93,96,100,112],
[109,104,91,109,118,0,96,105,112],
[120,109,103,119,115,115,0,101,130],
[117,106,98,116,111,106,110,0,125],
[89,88,81,87,99,99,81,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,99,87,103,121,90,117,105],
[133,0,130,109,107,130,102,121,126],
[112,81,0,91,93,110,87,105,104],
[124,102,120,0,107,121,104,121,114],
[108,104,118,104,0,115,111,114,116],
[90,81,101,90,96,0,100,108,97],
[121,109,124,107,100,111,0,113,117],
[94,90,106,90,97,103,98,0,115],
[106,85,107,97,95,114,94,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,126,125,118,124,123,120,130],
[109,0,105,91,113,93,118,104,116],
[85,106,0,98,123,93,112,101,100],
[86,120,113,0,126,125,111,105,108],
[93,98,88,85,0,88,90,73,89],
[87,118,118,86,123,0,120,111,94],
[88,93,99,100,121,91,0,88,93],
[91,107,110,106,138,100,123,0,101],
[81,95,111,103,122,117,118,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,113,118,116,116,118,109],
[101,0,110,111,115,114,119,115,109],
[111,101,0,122,103,107,115,119,96],
[98,100,89,0,103,107,103,110,106],
[93,96,108,108,0,106,114,115,91],
[95,97,104,104,105,0,101,107,96],
[95,92,96,108,97,110,0,103,105],
[93,96,92,101,96,104,108,0,94],
[102,102,115,105,120,115,106,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,110,127,112,109,107,102,104],
[104,0,106,102,124,109,107,96,110],
[101,105,0,108,111,104,101,115,107],
[84,109,103,0,105,97,106,99,109],
[99,87,100,106,0,106,101,101,108],
[102,102,107,114,105,0,106,92,112],
[104,104,110,105,110,105,0,101,115],
[109,115,96,112,110,119,110,0,111],
[107,101,104,102,103,99,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,95,86,90,94,86,105,92],
[96,0,97,103,72,82,74,107,87],
[116,114,0,118,120,122,95,134,128],
[125,108,93,0,100,105,97,118,97],
[121,139,91,111,0,114,109,131,116],
[117,129,89,106,97,0,100,102,105],
[125,137,116,114,102,111,0,149,95],
[106,104,77,93,80,109,62,0,74],
[119,124,83,114,95,106,116,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,94,78,105,93,91,83,113],
[123,0,104,81,108,106,102,120,118],
[117,107,0,86,100,99,99,93,121],
[133,130,125,0,117,120,103,132,130],
[106,103,111,94,0,106,109,109,114],
[118,105,112,91,105,0,97,125,135],
[120,109,112,108,102,114,0,113,110],
[128,91,118,79,102,86,98,0,98],
[98,93,90,81,97,76,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,56,65,119,58,75,88,85],
[155,0,121,101,144,98,133,120,117],
[155,90,0,111,133,110,131,120,106],
[146,110,100,0,121,115,109,95,122],
[92,67,78,90,0,61,102,107,104],
[153,113,101,96,150,0,127,133,131],
[136,78,80,102,109,84,0,80,102],
[123,91,91,116,104,78,131,0,97],
[126,94,105,89,107,80,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,114,121,110,108,129,121,103],
[82,0,111,108,107,104,110,105,94],
[97,100,0,113,99,114,111,108,96],
[90,103,98,0,91,117,101,104,92],
[101,104,112,120,0,109,134,119,108],
[103,107,97,94,102,0,105,114,94],
[82,101,100,110,77,106,0,110,96],
[90,106,103,107,92,97,101,0,89],
[108,117,115,119,103,117,115,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,124,101,88,115,115,124,101],
[108,0,112,105,93,118,117,110,106],
[87,99,0,97,107,112,124,113,102],
[110,106,114,0,110,112,109,103,107],
[123,118,104,101,0,120,115,126,109],
[96,93,99,99,91,0,100,109,98],
[96,94,87,102,96,111,0,103,97],
[87,101,98,108,85,102,108,0,88],
[110,105,109,104,102,113,114,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,97,111,94,99,104,105,108],
[101,0,97,105,107,104,97,96,101],
[114,114,0,113,109,107,113,99,103],
[100,106,98,0,91,108,100,107,98],
[117,104,102,120,0,105,103,103,103],
[112,107,104,103,106,0,109,106,101],
[107,114,98,111,108,102,0,112,103],
[106,115,112,104,108,105,99,0,91],
[103,110,108,113,108,110,108,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,108,99,102,112,107,99],
[107,0,107,101,115,112,109,84,105],
[113,104,0,108,119,100,106,111,109],
[103,110,103,0,104,129,124,107,85],
[112,96,92,107,0,103,116,100,104],
[109,99,111,82,108,0,96,100,86],
[99,102,105,87,95,115,0,110,90],
[104,127,100,104,111,111,101,0,98],
[112,106,102,126,107,125,121,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,116,100,116,115,102,119],
[110,0,99,103,93,107,105,97,118],
[109,112,0,94,120,115,118,111,119],
[95,108,117,0,109,105,113,114,126],
[111,118,91,102,0,105,117,102,130],
[95,104,96,106,106,0,116,88,121],
[96,106,93,98,94,95,0,106,117],
[109,114,100,97,109,123,105,0,128],
[92,93,92,85,81,90,94,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,99,101,97,113,92,106],
[103,0,90,92,84,103,109,101,99],
[109,121,0,112,121,121,125,121,103],
[112,119,99,0,113,114,109,109,103],
[110,127,90,98,0,102,106,112,110],
[114,108,90,97,109,0,117,101,103],
[98,102,86,102,105,94,0,105,109],
[119,110,90,102,99,110,106,0,107],
[105,112,108,108,101,108,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,124,107,105,118,95,128],
[111,0,115,123,117,112,119,104,136],
[105,96,0,112,85,102,112,83,123],
[87,88,99,0,96,95,84,85,104],
[104,94,126,115,0,118,104,95,129],
[106,99,109,116,93,0,96,119,127],
[93,92,99,127,107,115,0,90,129],
[116,107,128,126,116,92,121,0,123],
[83,75,88,107,82,84,82,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,106,103,97,97,115,108],
[102,0,100,105,108,96,96,113,93],
[104,111,0,115,107,106,101,125,114],
[105,106,96,0,102,116,94,97,95],
[108,103,104,109,0,113,104,121,105],
[114,115,105,95,98,0,97,97,107],
[114,115,110,117,107,114,0,111,99],
[96,98,86,114,90,114,100,0,97],
[103,118,97,116,106,104,112,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,106,104,121,103,104,111,106],
[93,0,108,104,112,92,99,108,105],
[105,103,0,110,119,114,111,119,111],
[107,107,101,0,102,109,104,111,108],
[90,99,92,109,0,100,102,110,97],
[108,119,97,102,111,0,106,116,112],
[107,112,100,107,109,105,0,109,100],
[100,103,92,100,101,95,102,0,94],
[105,106,100,103,114,99,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,116,124,98,123,121,95,132],
[114,0,100,105,105,98,101,108,118],
[95,111,0,104,104,94,103,103,119],
[87,106,107,0,102,98,91,90,118],
[113,106,107,109,0,104,85,86,117],
[88,113,117,113,107,0,111,113,127],
[90,110,108,120,126,100,0,86,121],
[116,103,108,121,125,98,125,0,130],
[79,93,92,93,94,84,90,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,86,105,76,110,88,95],
[99,0,107,95,118,110,129,100,86],
[98,104,0,84,92,96,90,101,100],
[125,116,127,0,127,102,130,98,116],
[106,93,119,84,0,85,130,91,107],
[135,101,115,109,126,0,123,112,106],
[101,82,121,81,81,88,0,88,89],
[123,111,110,113,120,99,123,0,98],
[116,125,111,95,104,105,122,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,109,111,92,129,105,107],
[99,0,103,114,101,104,103,108,95],
[112,108,0,112,115,96,104,112,106],
[102,97,99,0,110,95,106,110,96],
[100,110,96,101,0,104,103,96,95],
[119,107,115,116,107,0,110,104,108],
[82,108,107,105,108,101,0,98,121],
[106,103,99,101,115,107,113,0,94],
[104,116,105,115,116,103,90,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,110,127,114,119,108,97],
[100,0,96,120,97,107,87,99,115],
[108,115,0,118,117,115,110,111,98],
[101,91,93,0,88,99,83,100,90],
[84,114,94,123,0,96,85,93,104],
[97,104,96,112,115,0,83,85,99],
[92,124,101,128,126,128,0,108,111],
[103,112,100,111,118,126,103,0,110],
[114,96,113,121,107,112,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,109,97,109,103,111,98],
[110,0,114,114,122,106,105,124,104],
[101,97,0,108,97,98,96,94,102],
[102,97,103,0,114,104,109,113,104],
[114,89,114,97,0,107,97,109,104],
[102,105,113,107,104,0,93,117,99],
[108,106,115,102,114,118,0,119,109],
[100,87,117,98,102,94,92,0,103],
[113,107,109,107,107,112,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,86,125,94,96,106,91,96],
[92,0,83,103,116,73,98,76,76],
[125,128,0,124,129,82,128,92,98],
[86,108,87,0,108,71,95,81,57],
[117,95,82,103,0,76,102,83,78],
[115,138,129,140,135,0,126,98,118],
[105,113,83,116,109,85,0,79,90],
[120,135,119,130,128,113,132,0,99],
[115,135,113,154,133,93,121,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,121,102,110,100,109,100,111],
[105,0,114,108,108,113,105,101,113],
[90,97,0,85,94,91,88,89,100],
[109,103,126,0,116,112,104,98,121],
[101,103,117,95,0,96,104,104,107],
[111,98,120,99,115,0,109,106,114],
[102,106,123,107,107,102,0,93,109],
[111,110,122,113,107,105,118,0,115],
[100,98,111,90,104,97,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,117,100,108,108,107,103,115],
[105,0,108,110,113,110,112,106,115],
[94,103,0,100,105,100,100,91,109],
[111,101,111,0,111,121,112,97,113],
[103,98,106,100,0,108,104,102,113],
[103,101,111,90,103,0,98,96,108],
[104,99,111,99,107,113,0,106,122],
[108,105,120,114,109,115,105,0,114],
[96,96,102,98,98,103,89,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,58,50,120,67,79,5,70],
[161,0,161,161,169,143,130,161,96],
[153,50,0,125,151,98,167,37,107],
[161,50,86,0,111,103,79,81,70],
[91,42,60,100,0,103,105,55,70],
[144,68,113,108,108,0,113,108,108],
[132,81,44,132,106,98,0,73,98],
[206,50,174,130,156,103,138,0,78],
[141,115,104,141,141,103,113,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,138,116,119,102,114,115,104],
[96,0,81,103,109,105,105,80,116],
[73,130,0,130,101,113,125,122,104],
[95,108,81,0,87,102,114,87,81],
[92,102,110,124,0,104,101,99,68],
[109,106,98,109,107,0,104,96,117],
[97,106,86,97,110,107,0,85,75],
[96,131,89,124,112,115,126,0,116],
[107,95,107,130,143,94,136,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,90,79,88,86,96,96,83],
[130,0,107,101,95,116,108,113,87],
[121,104,0,100,116,117,105,108,103],
[132,110,111,0,97,127,112,125,109],
[123,116,95,114,0,114,100,111,100],
[125,95,94,84,97,0,102,102,87],
[115,103,106,99,111,109,0,109,96],
[115,98,103,86,100,109,102,0,76],
[128,124,108,102,111,124,115,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,91,89,106,103,99,101],
[106,0,116,94,97,104,98,92,94],
[104,95,0,88,90,94,91,102,90],
[120,117,123,0,103,99,113,113,103],
[122,114,121,108,0,104,118,108,87],
[105,107,117,112,107,0,103,97,98],
[108,113,120,98,93,108,0,116,96],
[112,119,109,98,103,114,95,0,111],
[110,117,121,108,124,113,115,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,107,110,109,109,111,112],
[104,0,109,107,101,102,105,92,98],
[113,102,0,109,107,119,111,111,108],
[104,104,102,0,95,107,95,104,100],
[101,110,104,116,0,108,122,108,110],
[102,109,92,104,103,0,106,99,103],
[102,106,100,116,89,105,0,102,105],
[100,119,100,107,103,112,109,0,106],
[99,113,103,111,101,108,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,124,110,120,128,134,95,102],
[114,0,121,98,119,117,128,100,110],
[87,90,0,109,110,123,123,99,114],
[101,113,102,0,93,101,116,95,99],
[91,92,101,118,0,120,133,112,114],
[83,94,88,110,91,0,130,109,106],
[77,83,88,95,78,81,0,81,83],
[116,111,112,116,99,102,130,0,104],
[109,101,97,112,97,105,128,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,108,105,97,109,106,100],
[106,0,97,99,106,92,109,108,103],
[102,114,0,97,101,109,117,107,108],
[103,112,114,0,106,105,112,116,109],
[106,105,110,105,0,99,104,102,98],
[114,119,102,106,112,0,117,111,104],
[102,102,94,99,107,94,0,106,87],
[105,103,104,95,109,100,105,0,107],
[111,108,103,102,113,107,124,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,98,125,95,106,89,100,96],
[124,0,119,106,110,107,100,101,102],
[113,92,0,115,103,104,109,105,102],
[86,105,96,0,93,95,105,102,85],
[116,101,108,118,0,119,104,114,109],
[105,104,107,116,92,0,101,107,96],
[122,111,102,106,107,110,0,117,114],
[111,110,106,109,97,104,94,0,102],
[115,109,109,126,102,115,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,120,108,128,101,108,115,113],
[98,0,119,118,114,119,114,116,119],
[91,92,0,104,91,100,94,92,106],
[103,93,107,0,111,121,98,110,100],
[83,97,120,100,0,103,109,107,106],
[110,92,111,90,108,0,112,111,111],
[103,97,117,113,102,99,0,105,124],
[96,95,119,101,104,100,106,0,101],
[98,92,105,111,105,100,87,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,119,109,118,109,90,98,101],
[97,0,109,88,100,102,83,92,76],
[92,102,0,108,110,108,74,90,96],
[102,123,103,0,103,111,88,79,108],
[93,111,101,108,0,99,69,89,85],
[102,109,103,100,112,0,85,97,88],
[121,128,137,123,142,126,0,105,115],
[113,119,121,132,122,114,106,0,103],
[110,135,115,103,126,123,96,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,111,107,100,110,110,109],
[101,0,109,105,98,99,104,116,96],
[107,102,0,103,106,92,99,109,105],
[100,106,108,0,106,104,101,111,97],
[104,113,105,105,0,101,103,118,104],
[111,112,119,107,110,0,102,112,106],
[101,107,112,110,108,109,0,118,103],
[101,95,102,100,93,99,93,0,100],
[102,115,106,114,107,105,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,104,105,111,94,108,107,99],
[88,0,90,84,88,91,99,109,90],
[107,121,0,96,99,118,112,98,96],
[106,127,115,0,118,99,114,137,119],
[100,123,112,93,0,92,110,108,100],
[117,120,93,112,119,0,120,116,107],
[103,112,99,97,101,91,0,122,108],
[104,102,113,74,103,95,89,0,86],
[112,121,115,92,111,104,103,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,120,87,98,88,73,117],
[114,0,113,110,109,103,110,102,109],
[110,98,0,126,115,108,122,117,114],
[91,101,85,0,94,95,93,84,93],
[124,102,96,117,0,113,117,108,108],
[113,108,103,116,98,0,110,86,112],
[123,101,89,118,94,101,0,99,107],
[138,109,94,127,103,125,112,0,114],
[94,102,97,118,103,99,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,91,103,101,97,94,106,95],
[98,0,81,99,100,94,98,92,86],
[120,130,0,103,120,124,115,105,116],
[108,112,108,0,114,109,114,97,109],
[110,111,91,97,0,101,101,102,99],
[114,117,87,102,110,0,126,114,109],
[117,113,96,97,110,85,0,101,98],
[105,119,106,114,109,97,110,0,110],
[116,125,95,102,112,102,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,103,114,119,134,127,112,102],
[85,0,98,105,100,106,105,86,103],
[108,113,0,114,106,121,118,97,104],
[97,106,97,0,109,114,113,104,100],
[92,111,105,102,0,124,119,99,107],
[77,105,90,97,87,0,97,91,98],
[84,106,93,98,92,114,0,87,94],
[99,125,114,107,112,120,124,0,109],
[109,108,107,111,104,113,117,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,105,108,116,113,106,113,113],
[89,0,93,103,98,110,101,108,98],
[106,118,0,108,114,104,113,105,110],
[103,108,103,0,104,106,98,109,105],
[95,113,97,107,0,104,100,108,96],
[98,101,107,105,107,0,101,108,98],
[105,110,98,113,111,110,0,108,109],
[98,103,106,102,103,103,103,0,107],
[98,113,101,106,115,113,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,109,101,102,103,115,120],
[111,0,102,93,103,101,104,112,109],
[115,109,0,116,96,104,117,115,109],
[102,118,95,0,108,111,114,112,110],
[110,108,115,103,0,105,124,123,135],
[109,110,107,100,106,0,116,110,110],
[108,107,94,97,87,95,0,99,96],
[96,99,96,99,88,101,112,0,124],
[91,102,102,101,76,101,115,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,117,102,127,110,111,108],
[108,0,95,94,106,108,104,91,98],
[108,116,0,110,103,104,122,90,99],
[94,117,101,0,104,106,116,95,94],
[109,105,108,107,0,103,117,102,105],
[84,103,107,105,108,0,123,94,102],
[101,107,89,95,94,88,0,89,96],
[100,120,121,116,109,117,122,0,102],
[103,113,112,117,106,109,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,118,125,112,100,100,103,99],
[108,0,105,112,92,106,116,116,98],
[93,106,0,126,89,115,86,116,91],
[86,99,85,0,87,113,76,101,82],
[99,119,122,124,0,132,103,125,96],
[111,105,96,98,79,0,102,114,75],
[111,95,125,135,108,109,0,91,103],
[108,95,95,110,86,97,120,0,106],
[112,113,120,129,115,136,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,104,96,103,104,109,108],
[104,0,104,110,107,94,113,116,105],
[109,107,0,107,101,106,120,109,105],
[107,101,104,0,104,111,114,115,103],
[115,104,110,107,0,100,115,117,107],
[108,117,105,100,111,0,106,120,104],
[107,98,91,97,96,105,0,109,105],
[102,95,102,96,94,91,102,0,95],
[103,106,106,108,104,107,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,123,106,131,99,121,139,129],
[89,0,89,100,87,65,114,130,113],
[88,122,0,120,107,99,122,117,132],
[105,111,91,0,108,91,96,122,123],
[80,124,104,103,0,109,123,113,127],
[112,146,112,120,102,0,136,140,129],
[90,97,89,115,88,75,0,130,109],
[72,81,94,89,98,71,81,0,103],
[82,98,79,88,84,82,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,97,109,124,111,124,110,113],
[100,0,118,105,116,108,106,102,114],
[114,93,0,108,124,111,106,109,108],
[102,106,103,0,125,107,102,110,119],
[87,95,87,86,0,89,102,94,96],
[100,103,100,104,122,0,97,103,105],
[87,105,105,109,109,114,0,99,105],
[101,109,102,101,117,108,112,0,111],
[98,97,103,92,115,106,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,105,107,110,97,96,105,115],
[89,0,92,106,100,94,91,125,102],
[106,119,0,119,99,97,103,106,102],
[104,105,92,0,106,103,97,99,115],
[101,111,112,105,0,98,113,114,99],
[114,117,114,108,113,0,110,106,100],
[115,120,108,114,98,101,0,108,96],
[106,86,105,112,97,105,103,0,112],
[96,109,109,96,112,111,115,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,87,101,98,117,110,109,106],
[97,0,88,98,95,105,103,93,94],
[124,123,0,115,105,123,119,118,114],
[110,113,96,0,102,112,108,115,108],
[113,116,106,109,0,116,115,111,102],
[94,106,88,99,95,0,102,103,103],
[101,108,92,103,96,109,0,111,96],
[102,118,93,96,100,108,100,0,102],
[105,117,97,103,109,108,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,89,117,92,78,110,95,106],
[104,0,112,134,103,93,111,107,110],
[122,99,0,140,109,123,130,125,120],
[94,77,71,0,83,72,90,98,71],
[119,108,102,128,0,111,124,104,126],
[133,118,88,139,100,0,118,102,104],
[101,100,81,121,87,93,0,90,99],
[116,104,86,113,107,109,121,0,108],
[105,101,91,140,85,107,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,130,136,127,118,92,134,123],
[83,0,89,109,105,105,67,108,94],
[81,122,0,136,99,113,84,96,117],
[75,102,75,0,92,86,79,69,81],
[84,106,112,119,0,95,69,72,78],
[93,106,98,125,116,0,65,80,85],
[119,144,127,132,142,146,0,105,114],
[77,103,115,142,139,131,106,0,127],
[88,117,94,130,133,126,97,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,109,128,134,112,126,144,122],
[115,0,99,135,142,110,120,139,130],
[102,112,0,144,122,125,129,123,125],
[83,76,67,0,112,123,98,113,128],
[77,69,89,99,0,93,96,109,94],
[99,101,86,88,118,0,103,136,114],
[85,91,82,113,115,108,0,126,124],
[67,72,88,98,102,75,85,0,100],
[89,81,86,83,117,97,87,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,129,124,94,90,100,137,99],
[104,0,106,110,108,99,91,110,87],
[82,105,0,112,95,97,112,107,100],
[87,101,99,0,97,97,103,105,102],
[117,103,116,114,0,113,100,123,117],
[121,112,114,114,98,0,117,134,110],
[111,120,99,108,111,94,0,119,105],
[74,101,104,106,88,77,92,0,96],
[112,124,111,109,94,101,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,73,82,84,103,85,90,109],
[124,0,128,99,119,123,112,92,130],
[138,83,0,110,110,117,109,109,117],
[129,112,101,0,118,103,106,92,131],
[127,92,101,93,0,103,96,98,119],
[108,88,94,108,108,0,104,106,133],
[126,99,102,105,115,107,0,105,136],
[121,119,102,119,113,105,106,0,135],
[102,81,94,80,92,78,75,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,103,94,115,98,100,101],
[105,0,100,102,91,111,105,105,99],
[101,111,0,101,97,111,102,113,95],
[108,109,110,0,101,105,100,102,99],
[117,120,114,110,0,111,101,123,103],
[96,100,100,106,100,0,95,105,90],
[113,106,109,111,110,116,0,115,99],
[111,106,98,109,88,106,96,0,107],
[110,112,116,112,108,121,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,110,99,114,95,129,94,103],
[120,0,128,122,103,123,123,113,106],
[101,83,0,86,96,89,112,87,95],
[112,89,125,0,93,92,116,97,101],
[97,108,115,118,0,94,123,87,120],
[116,88,122,119,117,0,115,108,132],
[82,88,99,95,88,96,0,89,98],
[117,98,124,114,124,103,122,0,131],
[108,105,116,110,91,79,113,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,106,101,105,97,95,101,121],
[126,0,120,100,117,107,109,116,116],
[105,91,0,103,116,100,94,98,111],
[110,111,108,0,113,96,98,109,110],
[106,94,95,98,0,92,107,113,109],
[114,104,111,115,119,0,102,105,115],
[116,102,117,113,104,109,0,106,111],
[110,95,113,102,98,106,105,0,113],
[90,95,100,101,102,96,100,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,75,85,104,143,127,89,112],
[100,0,96,120,105,120,122,114,142],
[136,115,0,93,132,120,135,142,129],
[126,91,118,0,86,122,134,124,133],
[107,106,79,125,0,130,142,115,118],
[68,91,91,89,81,0,112,107,143],
[84,89,76,77,69,99,0,109,96],
[122,97,69,87,96,104,102,0,103],
[99,69,82,78,93,68,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,1,29,1,205,99,12,28],
[103,0,86,109,81,205,98,99,17],
[210,125,0,28,1,205,194,29,28],
[182,102,183,0,178,210,178,178,118],
[210,130,210,33,0,210,210,130,33],
[6,6,6,1,1,0,82,1,18],
[112,113,17,33,1,129,0,12,33],
[199,112,182,33,81,210,199,0,33],
[183,194,183,93,178,193,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,96,123,94,101,99,115,101],
[112,0,86,109,80,94,96,108,93],
[115,125,0,132,117,115,99,109,101],
[88,102,79,0,81,88,72,89,80],
[117,131,94,130,0,105,112,115,112],
[110,117,96,123,106,0,100,123,91],
[112,115,112,139,99,111,0,123,107],
[96,103,102,122,96,88,88,0,75],
[110,118,110,131,99,120,104,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,98,87,92,117,53,120,118],
[90,0,91,106,44,71,87,76,103],
[113,120,0,95,84,84,112,114,148],
[124,105,116,0,87,134,128,125,103],
[119,167,127,124,0,108,91,130,129],
[94,140,127,77,103,0,43,119,117],
[158,124,99,83,120,168,0,142,129],
[91,135,97,86,81,92,69,0,118],
[93,108,63,108,82,94,82,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,127,115,108,140,134,121,96],
[84,0,98,83,73,120,100,96,97],
[84,113,0,104,102,107,124,109,103],
[96,128,107,0,88,116,142,133,112],
[103,138,109,123,0,119,130,130,121],
[71,91,104,95,92,0,119,90,74],
[77,111,87,69,81,92,0,89,73],
[90,115,102,78,81,121,122,0,110],
[115,114,108,99,90,137,138,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,102,108,98,110,108,103],
[103,0,103,96,105,95,103,110,97],
[99,108,0,97,108,96,114,102,96],
[109,115,114,0,114,104,117,114,109],
[103,106,103,97,0,104,108,105,99],
[113,116,115,107,107,0,114,116,105],
[101,108,97,94,103,97,0,97,102],
[103,101,109,97,106,95,114,0,104],
[108,114,115,102,112,106,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,123,137,110,105,134,121,127],
[97,0,98,124,136,108,140,137,125],
[88,113,0,132,136,91,130,112,132],
[74,87,79,0,85,91,122,82,104],
[101,75,75,126,0,87,95,108,90],
[106,103,120,120,124,0,107,109,121],
[77,71,81,89,116,104,0,84,112],
[90,74,99,129,103,102,127,0,110],
[84,86,79,107,121,90,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,107,95,124,106,112,131,110],
[92,0,89,81,101,84,108,95,99],
[104,122,0,98,99,91,106,109,105],
[116,130,113,0,119,94,125,124,116],
[87,110,112,92,0,90,110,97,101],
[105,127,120,117,121,0,110,127,129],
[99,103,105,86,101,101,0,100,109],
[80,116,102,87,114,84,111,0,104],
[101,112,106,95,110,82,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,100,145,127,109,97,121,144],
[77,0,110,139,137,108,112,126,139],
[111,101,0,122,113,113,93,85,131],
[66,72,89,0,117,90,69,75,100],
[84,74,98,94,0,72,92,87,92],
[102,103,98,121,139,0,111,114,123],
[114,99,118,142,119,100,0,119,133],
[90,85,126,136,124,97,92,0,129],
[67,72,80,111,119,88,78,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,82,69,113,105,99,124,81],
[116,0,78,108,125,105,130,113,101],
[129,133,0,139,161,101,152,131,111],
[142,103,72,0,107,100,101,117,96],
[98,86,50,104,0,86,97,112,85],
[106,106,110,111,125,0,115,124,80],
[112,81,59,110,114,96,0,129,105],
[87,98,80,94,99,87,82,0,73],
[130,110,100,115,126,131,106,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,93,122,117,118,141,108,117],
[115,0,105,122,118,95,133,137,115],
[118,106,0,97,102,94,117,117,107],
[89,89,114,0,90,88,115,91,109],
[94,93,109,121,0,117,116,111,116],
[93,116,117,123,94,0,115,130,104],
[70,78,94,96,95,96,0,128,111],
[103,74,94,120,100,81,83,0,115],
[94,96,104,102,95,107,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,111,122,72,88,83,102,105],
[117,0,91,103,116,98,114,87,104],
[100,120,0,99,111,102,82,91,116],
[89,108,112,0,126,74,102,110,121],
[139,95,100,85,0,93,83,74,87],
[123,113,109,137,118,0,102,125,112],
[128,97,129,109,128,109,0,116,132],
[109,124,120,101,137,86,95,0,134],
[106,107,95,90,124,99,79,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,103,103,105,122,133,96,111],
[125,0,115,159,139,90,153,132,123],
[108,96,0,106,132,117,145,108,129],
[108,52,105,0,92,94,128,71,117],
[106,72,79,119,0,120,141,82,120],
[89,121,94,117,91,0,101,108,110],
[78,58,66,83,70,110,0,54,127],
[115,79,103,140,129,103,157,0,143],
[100,88,82,94,91,101,84,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,98,130,93,115,151,147,101],
[57,0,83,87,74,68,91,72,107],
[113,128,0,136,88,118,132,114,116],
[81,124,75,0,97,72,98,76,107],
[118,137,123,114,0,89,115,129,111],
[96,143,93,139,122,0,122,123,123],
[60,120,79,113,96,89,0,75,103],
[64,139,97,135,82,88,136,0,98],
[110,104,95,104,100,88,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,106,97,108,100,117,113],
[105,0,127,107,100,112,102,117,114],
[100,84,0,101,86,108,93,99,97],
[105,104,110,0,100,95,98,108,110],
[114,111,125,111,0,102,108,125,110],
[103,99,103,116,109,0,98,113,105],
[111,109,118,113,103,113,0,112,116],
[94,94,112,103,86,98,99,0,108],
[98,97,114,101,101,106,95,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,140,161,90,101,179,140,102],
[110,0,143,160,106,102,140,114,114],
[71,68,0,133,74,30,132,87,44],
[50,51,78,0,73,52,138,49,90],
[121,105,137,138,0,117,154,113,128],
[110,109,181,159,94,0,173,145,120],
[32,71,79,73,57,38,0,54,59],
[71,97,124,162,98,66,157,0,99],
[109,97,167,121,83,91,152,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,106,103,88,100,100,106],
[106,0,91,113,114,98,108,108,115],
[109,120,0,127,128,104,98,115,113],
[105,98,84,0,117,89,84,100,99],
[108,97,83,94,0,86,71,96,104],
[123,113,107,122,125,0,102,124,126],
[111,103,113,127,140,109,0,110,125],
[111,103,96,111,115,87,101,0,101],
[105,96,98,112,107,85,86,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,107,94,99,98,92,99,95],
[126,0,115,110,104,106,115,111,114],
[104,96,0,93,108,100,107,115,104],
[117,101,118,0,104,112,103,118,105],
[112,107,103,107,0,107,97,113,104],
[113,105,111,99,104,0,109,108,97],
[119,96,104,108,114,102,0,119,104],
[112,100,96,93,98,103,92,0,91],
[116,97,107,106,107,114,107,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,105,95,101,104,93,102,109],
[115,0,109,110,115,112,96,104,111],
[106,102,0,99,106,103,106,97,107],
[116,101,112,0,106,111,94,102,112],
[110,96,105,105,0,106,97,103,116],
[107,99,108,100,105,0,88,106,114],
[118,115,105,117,114,123,0,113,115],
[109,107,114,109,108,105,98,0,112],
[102,100,104,99,95,97,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,108,99,121,121,89,122],
[99,0,96,82,99,117,90,83,93],
[100,115,0,87,94,98,91,95,103],
[103,129,124,0,107,115,105,109,129],
[112,112,117,104,0,114,93,102,109],
[90,94,113,96,97,0,86,86,107],
[90,121,120,106,118,125,0,104,132],
[122,128,116,102,109,125,107,0,113],
[89,118,108,82,102,104,79,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,107,93,87,94,114,110,111],
[116,0,115,116,96,119,110,113,116],
[104,96,0,100,107,110,111,110,118],
[118,95,111,0,96,109,112,107,107],
[124,115,104,115,0,121,105,113,117],
[117,92,101,102,90,0,108,103,105],
[97,101,100,99,106,103,0,100,107],
[101,98,101,104,98,108,111,0,105],
[100,95,93,104,94,106,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,89,102,79,92,63,100,83],
[109,0,110,116,109,105,100,107,87],
[122,101,0,104,100,121,100,100,103],
[109,95,107,0,110,77,107,87,95],
[132,102,111,101,0,114,122,108,95],
[119,106,90,134,97,0,96,109,88],
[148,111,111,104,89,115,0,103,79],
[111,104,111,124,103,102,108,0,112],
[128,124,108,116,116,123,132,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,93,94,92,106,112,112,94],
[95,0,128,117,101,69,92,118,95],
[118,83,0,97,127,89,88,119,88],
[117,94,114,0,94,95,96,118,106],
[119,110,84,117,0,74,104,116,97],
[105,142,122,116,137,0,123,147,112],
[99,119,123,115,107,88,0,83,100],
[99,93,92,93,95,64,128,0,88],
[117,116,123,105,114,99,111,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,123,93,112,112,102,120,101],
[118,0,131,99,116,111,98,121,103],
[88,80,0,78,83,80,86,93,90],
[118,112,133,0,113,111,102,118,110],
[99,95,128,98,0,99,90,117,89],
[99,100,131,100,112,0,108,122,110],
[109,113,125,109,121,103,0,129,120],
[91,90,118,93,94,89,82,0,86],
[110,108,121,101,122,101,91,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,115,93,103,112,87,78,110],
[81,0,100,76,106,90,87,79,86],
[96,111,0,112,122,116,119,97,130],
[118,135,99,0,118,110,122,110,121],
[108,105,89,93,0,97,104,89,95],
[99,121,95,101,114,0,95,91,104],
[124,124,92,89,107,116,0,104,119],
[133,132,114,101,122,120,107,0,100],
[101,125,81,90,116,107,92,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,107,111,121,115,114,104,112],
[93,0,98,93,85,96,103,88,101],
[104,113,0,98,101,104,104,108,101],
[100,118,113,0,108,110,100,92,105],
[90,126,110,103,0,102,108,101,98],
[96,115,107,101,109,0,110,105,102],
[97,108,107,111,103,101,0,106,112],
[107,123,103,119,110,106,105,0,109],
[99,110,110,106,113,109,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,112,105,103,102,110,102],
[110,0,96,113,109,98,100,107,110],
[110,115,0,114,114,100,107,121,127],
[99,98,97,0,99,96,100,101,80],
[106,102,97,112,0,107,109,102,109],
[108,113,111,115,104,0,115,121,120],
[109,111,104,111,102,96,0,112,98],
[101,104,90,110,109,90,99,0,98],
[109,101,84,131,102,91,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,120,146,128,171,103,150,153],
[44,0,81,40,83,90,40,40,35],
[91,130,0,109,83,120,83,116,76],
[65,171,102,0,128,160,110,138,77],
[83,128,128,83,0,124,110,128,128],
[40,121,91,51,87,0,110,43,103],
[108,171,128,101,101,101,0,101,82],
[61,171,95,73,83,168,110,0,88],
[58,176,135,134,83,108,129,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,108,105,107,86,113,111,95],
[120,0,102,112,111,106,113,112,98],
[103,109,0,103,96,98,114,106,102],
[106,99,108,0,104,100,118,109,103],
[104,100,115,107,0,108,116,111,114],
[125,105,113,111,103,0,119,106,103],
[98,98,97,93,95,92,0,111,94],
[100,99,105,102,100,105,100,0,97],
[116,113,109,108,97,108,117,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,105,79,129,95,124,120],
[101,0,110,103,89,119,87,120,112],
[103,101,0,104,92,110,115,119,99],
[106,108,107,0,122,117,92,133,111],
[132,122,119,89,0,113,112,119,118],
[82,92,101,94,98,0,84,113,116],
[116,124,96,119,99,127,0,143,123],
[87,91,92,78,92,98,68,0,91],
[91,99,112,100,93,95,88,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,109,127,93,106,92,99,96],
[115,0,107,138,100,112,99,108,118],
[102,104,0,125,108,109,111,114,103],
[84,73,86,0,73,95,73,92,85],
[118,111,103,138,0,116,95,102,103],
[105,99,102,116,95,0,99,112,102],
[119,112,100,138,116,112,0,116,102],
[112,103,97,119,109,99,95,0,111],
[115,93,108,126,108,109,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,87,117,108,90,86,64,78],
[150,0,148,161,151,135,125,90,122],
[124,63,0,141,112,78,87,59,89],
[94,50,70,0,101,83,52,54,87],
[103,60,99,110,0,75,72,54,73],
[121,76,133,128,136,0,108,75,76],
[125,86,124,159,139,103,0,95,103],
[147,121,152,157,157,136,116,0,94],
[133,89,122,124,138,135,108,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,127,120,124,113,116,111,111],
[121,0,121,114,105,110,114,114,85],
[84,90,0,131,96,88,101,92,89],
[91,97,80,0,110,116,112,115,94],
[87,106,115,101,0,101,110,88,103],
[98,101,123,95,110,0,93,121,111],
[95,97,110,99,101,118,0,116,89],
[100,97,119,96,123,90,95,0,75],
[100,126,122,117,108,100,122,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,101,89,89,91,114,109],
[105,0,93,93,78,100,69,103,86],
[111,118,0,108,90,99,80,108,91],
[110,118,103,0,91,87,85,106,98],
[122,133,121,120,0,117,110,118,94],
[122,111,112,124,94,0,85,111,116],
[120,142,131,126,101,126,0,125,110],
[97,108,103,105,93,100,86,0,103],
[102,125,120,113,117,95,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,108,95,104,107,100,110],
[112,0,95,109,97,112,104,105,107],
[112,116,0,110,100,104,119,105,110],
[103,102,101,0,93,103,108,101,106],
[116,114,111,118,0,112,113,109,103],
[107,99,107,108,99,0,107,102,101],
[104,107,92,103,98,104,0,106,99],
[111,106,106,110,102,109,105,0,108],
[101,104,101,105,108,110,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,77,87,78,75,89,79,63],
[122,0,80,101,101,100,86,97,79],
[134,131,0,122,131,134,109,96,109],
[124,110,89,0,108,104,95,99,85],
[133,110,80,103,0,101,89,103,95],
[136,111,77,107,110,0,109,118,98],
[122,125,102,116,122,102,0,113,99],
[132,114,115,112,108,93,98,0,85],
[148,132,102,126,116,113,112,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,120,109,107,102,117,115],
[102,0,105,122,107,111,98,125,115],
[109,106,0,114,119,106,101,119,110],
[91,89,97,0,96,98,93,111,104],
[102,104,92,115,0,99,107,115,103],
[104,100,105,113,112,0,107,115,109],
[109,113,110,118,104,104,0,122,109],
[94,86,92,100,96,96,89,0,93],
[96,96,101,107,108,102,102,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,121,164,83,132,105,53,95],
[131,0,70,137,81,133,131,81,120],
[90,141,0,112,92,129,143,103,102],
[47,74,99,0,101,113,87,76,62],
[128,130,119,110,0,132,153,103,45],
[79,78,82,98,79,0,139,103,108],
[106,80,68,124,58,72,0,132,99],
[158,130,108,135,108,108,79,0,139],
[116,91,109,149,166,103,112,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,108,113,102,118,106,112],
[113,0,114,119,116,104,123,117,114],
[107,97,0,105,114,107,108,108,121],
[103,92,106,0,111,106,122,110,112],
[98,95,97,100,0,90,109,115,98],
[109,107,104,105,121,0,113,119,114],
[93,88,103,89,102,98,0,108,110],
[105,94,103,101,96,92,103,0,103],
[99,97,90,99,113,97,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,106,124,92,107,107,106,117],
[92,0,110,112,106,117,99,110,120],
[105,101,0,119,111,98,107,102,118],
[87,99,92,0,87,96,100,106,111],
[119,105,100,124,0,117,115,119,135],
[104,94,113,115,94,0,110,84,115],
[104,112,104,111,96,101,0,92,118],
[105,101,109,105,92,127,119,0,118],
[94,91,93,100,76,96,93,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,88,89,98,99,97,94],
[104,0,104,99,93,99,86,100,101],
[106,107,0,100,102,95,99,107,90],
[123,112,111,0,107,100,119,121,111],
[122,118,109,104,0,112,116,117,96],
[113,112,116,111,99,0,102,115,114],
[112,125,112,92,95,109,0,124,107],
[114,111,104,90,94,96,87,0,95],
[117,110,121,100,115,97,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,79,70,83,94,107,99],
[99,0,127,86,82,90,80,108,93],
[103,84,0,91,72,98,93,99,91],
[132,125,120,0,102,101,105,111,111],
[141,129,139,109,0,107,122,123,105],
[128,121,113,110,104,0,119,115,118],
[117,131,118,106,89,92,0,108,120],
[104,103,112,100,88,96,103,0,120],
[112,118,120,100,106,93,91,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,91,106,96,110,112,99],
[112,0,98,92,96,100,123,90,105],
[107,113,0,105,120,111,117,98,122],
[120,119,106,0,104,115,132,107,122],
[105,115,91,107,0,108,119,101,108],
[115,111,100,96,103,0,119,115,121],
[101,88,94,79,92,92,0,95,86],
[99,121,113,104,110,96,116,0,127],
[112,106,89,89,103,90,125,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,108,105,103,105,112,116],
[103,0,105,106,108,104,115,100,104],
[98,106,0,100,102,90,99,95,105],
[103,105,111,0,103,112,103,92,115],
[106,103,109,108,0,107,116,104,106],
[108,107,121,99,104,0,105,104,98],
[106,96,112,108,95,106,0,102,101],
[99,111,116,119,107,107,109,0,114],
[95,107,106,96,105,113,110,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,96,106,108,106,108,114,125],
[114,0,108,96,108,98,101,110,113],
[115,103,0,117,113,111,108,111,123],
[105,115,94,0,106,110,102,107,114],
[103,103,98,105,0,105,96,107,115],
[105,113,100,101,106,0,102,105,126],
[103,110,103,109,115,109,0,111,113],
[97,101,100,104,104,106,100,0,114],
[86,98,88,97,96,85,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,87,98,101,98,100,92,93],
[109,0,98,101,106,100,113,106,103],
[124,113,0,115,112,107,114,104,104],
[113,110,96,0,110,103,109,95,110],
[110,105,99,101,0,104,104,96,94],
[113,111,104,108,107,0,112,99,110],
[111,98,97,102,107,99,0,90,93],
[119,105,107,116,115,112,121,0,105],
[118,108,107,101,117,101,118,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,118,94,106,68,96,84,132],
[103,0,63,110,88,81,103,107,136],
[93,148,0,120,116,129,137,122,122],
[117,101,91,0,109,85,114,112,108],
[105,123,95,102,0,72,98,103,111],
[143,130,82,126,139,0,124,121,141],
[115,108,74,97,113,87,0,103,97],
[127,104,89,99,108,90,108,0,124],
[79,75,89,103,100,70,114,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,103,109,111,99,106,114,114],
[93,0,96,105,104,99,103,111,109],
[108,115,0,111,110,105,107,101,101],
[102,106,100,0,103,98,108,113,103],
[100,107,101,108,0,110,100,111,110],
[112,112,106,113,101,0,115,114,113],
[105,108,104,103,111,96,0,105,109],
[97,100,110,98,100,97,106,0,114],
[97,102,110,108,101,98,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,124,110,108,101,95,107,117],
[105,0,112,122,106,106,102,99,114],
[87,99,0,97,86,88,80,94,95],
[101,89,114,0,93,95,92,98,110],
[103,105,125,118,0,94,100,101,110],
[110,105,123,116,117,0,117,106,111],
[116,109,131,119,111,94,0,107,110],
[104,112,117,113,110,105,104,0,110],
[94,97,116,101,101,100,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,92,105,102,117,87,111,122],
[115,0,107,107,105,116,98,125,117],
[119,104,0,92,105,112,123,115,98],
[106,104,119,0,111,130,94,122,120],
[109,106,106,100,0,118,111,119,107],
[94,95,99,81,93,0,110,115,91],
[124,113,88,117,100,101,0,115,128],
[100,86,96,89,92,96,96,0,97],
[89,94,113,91,104,120,83,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,117,112,107,105,111,110,111],
[98,0,122,112,110,108,117,110,106],
[94,89,0,97,91,90,99,96,96],
[99,99,114,0,98,98,99,91,92],
[104,101,120,113,0,109,116,108,117],
[106,103,121,113,102,0,115,103,108],
[100,94,112,112,95,96,0,87,95],
[101,101,115,120,103,108,124,0,100],
[100,105,115,119,94,103,116,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,93,81,83,92,91,105,97],
[107,0,88,88,92,86,98,89,92],
[118,123,0,99,111,109,109,114,123],
[130,123,112,0,101,118,119,123,120],
[128,119,100,110,0,96,109,115,108],
[119,125,102,93,115,0,114,115,111],
[120,113,102,92,102,97,0,114,114],
[106,122,97,88,96,96,97,0,103],
[114,119,88,91,103,100,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,108,103,107,117,107,119,115],
[95,0,101,93,84,104,71,102,111],
[103,110,0,95,95,109,95,94,109],
[108,118,116,0,104,116,103,112,114],
[104,127,116,107,0,116,109,128,128],
[94,107,102,95,95,0,94,100,101],
[104,140,116,108,102,117,0,110,114],
[92,109,117,99,83,111,101,0,104],
[96,100,102,97,83,110,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,125,104,64,119,135,143],
[95,0,49,63,127,50,144,154,122],
[104,162,0,165,123,120,114,127,111],
[86,148,46,0,126,102,130,151,120],
[107,84,88,85,0,56,79,85,97],
[147,161,91,109,155,0,151,164,129],
[92,67,97,81,132,60,0,100,105],
[76,57,84,60,126,47,111,0,106],
[68,89,100,91,114,82,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,118,108,120,118,112,111],
[102,0,98,109,108,105,115,111,115],
[110,113,0,107,100,114,122,118,114],
[93,102,104,0,110,110,119,111,106],
[103,103,111,101,0,103,118,106,113],
[91,106,97,101,108,0,112,104,99],
[93,96,89,92,93,99,0,97,102],
[99,100,93,100,105,107,114,0,107],
[100,96,97,105,98,112,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,101,124,100,113,114,100],
[97,0,116,99,114,99,101,95,107],
[98,95,0,99,98,102,94,97,89],
[110,112,112,0,119,102,111,100,100],
[87,97,113,92,0,88,98,92,91],
[111,112,109,109,123,0,115,109,103],
[98,110,117,100,113,96,0,93,98],
[97,116,114,111,119,102,118,0,103],
[111,104,122,111,120,108,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,107,115,104,119,105,115],
[108,0,115,117,125,105,118,120,111],
[106,96,0,111,110,107,109,103,115],
[104,94,100,0,118,98,110,101,107],
[96,86,101,93,0,99,101,101,108],
[107,106,104,113,112,0,110,104,114],
[92,93,102,101,110,101,0,102,104],
[106,91,108,110,110,107,109,0,111],
[96,100,96,104,103,97,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,110,113,120,106,105,121,125],
[87,0,90,98,104,94,93,95,105],
[101,121,0,113,118,94,96,113,122],
[98,113,98,0,118,113,108,113,118],
[91,107,93,93,0,93,92,91,114],
[105,117,117,98,118,0,114,113,123],
[106,118,115,103,119,97,0,111,124],
[90,116,98,98,120,98,100,0,117],
[86,106,89,93,97,88,87,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,113,89,100,73,105,113],
[109,0,92,132,104,118,72,100,114],
[104,119,0,132,106,132,101,78,126],
[98,79,79,0,71,75,70,40,95],
[122,107,105,140,0,107,66,106,158],
[111,93,79,136,104,0,41,84,108],
[138,139,110,141,145,170,0,97,161],
[106,111,133,171,105,127,114,0,147],
[98,97,85,116,53,103,50,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,211,119,151,59,152,151,92],
[92,0,211,119,151,108,152,151,92],
[0,0,0,119,59,59,60,59,0],
[92,92,92,0,92,92,152,151,92],
[60,60,152,119,0,119,60,162,152],
[152,103,152,119,92,0,152,151,92],
[59,59,151,59,151,59,0,102,151],
[60,60,152,60,49,60,109,0,92],
[119,119,211,119,59,119,60,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,121,110,104,105,117,130,125],
[107,0,100,94,86,103,105,97,85],
[90,111,0,99,100,106,101,109,114],
[101,117,112,0,103,113,109,114,131],
[107,125,111,108,0,126,105,113,114],
[106,108,105,98,85,0,108,85,95],
[94,106,110,102,106,103,0,110,111],
[81,114,102,97,98,126,101,0,119],
[86,126,97,80,97,116,100,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,122,109,96,76,96,100,97],
[105,0,116,108,91,89,80,93,81],
[89,95,0,103,90,87,92,102,84],
[102,103,108,0,90,92,108,102,97],
[115,120,121,121,0,96,102,114,98],
[135,122,124,119,115,0,116,102,109],
[115,131,119,103,109,95,0,109,92],
[111,118,109,109,97,109,102,0,92],
[114,130,127,114,113,102,119,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,93,74,117,71,105,72,106],
[117,0,97,76,135,96,114,121,126],
[118,114,0,107,122,99,120,114,111],
[137,135,104,0,134,131,147,141,135],
[94,76,89,77,0,106,85,98,86],
[140,115,112,80,105,0,110,123,141],
[106,97,91,64,126,101,0,103,119],
[139,90,97,70,113,88,108,0,85],
[105,85,100,76,125,70,92,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,98,98,102,100,84,104,112],
[113,0,100,95,95,102,101,104,104],
[113,111,0,102,112,108,95,107,113],
[113,116,109,0,117,113,98,109,107],
[109,116,99,94,0,104,96,108,104],
[111,109,103,98,107,0,88,98,109],
[127,110,116,113,115,123,0,117,105],
[107,107,104,102,103,113,94,0,113],
[99,107,98,104,107,102,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,106,100,109,111,111,105],
[98,0,114,107,109,110,101,94,107],
[95,97,0,101,106,107,91,97,90],
[105,104,110,0,113,108,106,105,109],
[111,102,105,98,0,99,97,91,99],
[102,101,104,103,112,0,103,103,96],
[100,110,120,105,114,108,0,113,112],
[100,117,114,106,120,108,98,0,115],
[106,104,121,102,112,115,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,117,113,122,109,106,116,114],
[110,0,101,120,118,118,113,101,118],
[94,110,0,110,107,115,112,110,121],
[98,91,101,0,83,94,99,110,103],
[89,93,104,128,0,116,128,107,118],
[102,93,96,117,95,0,113,106,141],
[105,98,99,112,83,98,0,97,106],
[95,110,101,101,104,105,114,0,120],
[97,93,90,108,93,70,105,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,98,41,28,142,86,100,125],
[72,0,141,29,30,87,59,99,97],
[113,70,0,0,55,142,45,100,112],
[170,182,211,0,111,211,86,170,181],
[183,181,156,100,0,142,128,211,153],
[69,124,69,0,69,0,71,96,125],
[125,152,166,125,83,140,0,170,168],
[111,112,111,41,0,115,41,0,72],
[86,114,99,30,58,86,43,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,130,104,102,146,124,119,132],
[121,0,193,158,92,164,103,172,123],
[81,18,0,136,56,113,51,105,96],
[107,53,75,0,38,106,81,116,53],
[109,119,155,173,0,138,87,113,181],
[65,47,98,105,73,0,78,107,116],
[87,108,160,130,124,133,0,156,121],
[92,39,106,95,98,104,55,0,110],
[79,88,115,158,30,95,90,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,115,107,108,112,107,101],
[99,0,108,97,90,102,91,104,89],
[98,103,0,108,105,98,105,102,96],
[96,114,103,0,97,103,106,103,106],
[104,121,106,114,0,110,115,107,107],
[103,109,113,108,101,0,113,103,105],
[99,120,106,105,96,98,0,105,92],
[104,107,109,108,104,108,106,0,110],
[110,122,115,105,104,106,119,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,119,113,103,117,105,114],
[101,0,106,113,111,112,119,106,108],
[97,105,0,102,121,116,109,103,111],
[92,98,109,0,96,100,111,100,91],
[98,100,90,115,0,99,111,101,114],
[108,99,95,111,112,0,113,95,97],
[94,92,102,100,100,98,0,111,101],
[106,105,108,111,110,116,100,0,115],
[97,103,100,120,97,114,110,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,94,104,139,116,108,99,94],
[93,0,100,89,131,124,106,103,111],
[117,111,0,116,126,110,125,115,104],
[107,122,95,0,128,110,118,124,90],
[72,80,85,83,0,99,107,89,85],
[95,87,101,101,112,0,105,112,101],
[103,105,86,93,104,106,0,123,93],
[112,108,96,87,122,99,88,0,96],
[117,100,107,121,126,110,118,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,101,115,122,97,115,117],
[100,0,94,110,116,94,93,111,96],
[108,117,0,107,118,104,106,130,113],
[110,101,104,0,121,105,99,134,115],
[96,95,93,90,0,86,81,114,95],
[89,117,107,106,125,0,84,133,102],
[114,118,105,112,130,127,0,133,122],
[96,100,81,77,97,78,78,0,87],
[94,115,98,96,116,109,89,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,107,108,108,117,105,107],
[97,0,98,95,99,90,91,94,103],
[103,113,0,100,102,109,104,109,117],
[104,116,111,0,124,101,111,107,104],
[103,112,109,87,0,101,99,99,102],
[103,121,102,110,110,0,101,113,108],
[94,120,107,100,112,110,0,116,110],
[106,117,102,104,112,98,95,0,100],
[104,108,94,107,109,103,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,93,100,105,105,112,108],
[110,0,105,107,105,115,111,114,114],
[113,106,0,104,102,102,102,108,111],
[118,104,107,0,106,110,103,110,117],
[111,106,109,105,0,117,111,106,109],
[106,96,109,101,94,0,103,112,100],
[106,100,109,108,100,108,0,109,107],
[99,97,103,101,105,99,102,0,98],
[103,97,100,94,102,111,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,120,98,105,112,108,119],
[111,0,105,99,93,107,104,117,110],
[102,106,0,116,102,101,110,113,109],
[91,112,95,0,79,100,99,103,117],
[113,118,109,132,0,105,106,112,130],
[106,104,110,111,106,0,106,98,115],
[99,107,101,112,105,105,0,112,121],
[103,94,98,108,99,113,99,0,112],
[92,101,102,94,81,96,90,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,99,112,116,118,106,124],
[105,0,98,101,130,119,103,129,116],
[105,113,0,111,100,106,105,112,134],
[112,110,100,0,127,121,131,130,133],
[99,81,111,84,0,96,100,120,109],
[95,92,105,90,115,0,103,108,101],
[93,108,106,80,111,108,0,112,114],
[105,82,99,81,91,103,99,0,114],
[87,95,77,78,102,110,97,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,117,102,112,101,74,125,92],
[135,0,123,112,118,123,102,123,108],
[94,88,0,71,106,121,100,104,102],
[109,99,140,0,124,115,110,128,118],
[99,93,105,87,0,112,115,105,116],
[110,88,90,96,99,0,89,98,94],
[137,109,111,101,96,122,0,124,103],
[86,88,107,83,106,113,87,0,84],
[119,103,109,93,95,117,108,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,86,94,106,76,76,88,81],
[96,0,104,80,110,86,107,98,111],
[125,107,0,90,119,102,133,94,101],
[117,131,121,0,115,106,110,113,96],
[105,101,92,96,0,82,116,84,99],
[135,125,109,105,129,0,113,106,129],
[135,104,78,101,95,98,0,86,111],
[123,113,117,98,127,105,125,0,121],
[130,100,110,115,112,82,100,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,106,106,123,108,116,96,91],
[94,0,97,94,94,109,122,102,79],
[105,114,0,95,120,118,119,120,101],
[105,117,116,0,130,126,120,99,106],
[88,117,91,81,0,127,79,86,86],
[103,102,93,85,84,0,97,104,74],
[95,89,92,91,132,114,0,85,101],
[115,109,91,112,125,107,126,0,88],
[120,132,110,105,125,137,110,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,112,101,106,111,99,96],
[107,0,98,101,104,110,103,88,92],
[108,113,0,111,103,116,105,103,105],
[99,110,100,0,101,107,96,88,110],
[110,107,108,110,0,111,102,100,98],
[105,101,95,104,100,0,108,101,94],
[100,108,106,115,109,103,0,96,100],
[112,123,108,123,111,110,115,0,101],
[115,119,106,101,113,117,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,109,122,122,97,123,103],
[114,0,101,93,112,118,102,111,102],
[103,110,0,101,128,113,106,101,113],
[102,118,110,0,115,102,121,102,117],
[89,99,83,96,0,78,102,104,91],
[89,93,98,109,133,0,110,101,92],
[114,109,105,90,109,101,0,100,109],
[88,100,110,109,107,110,111,0,108],
[108,109,98,94,120,119,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,151,105,112,103,103,112,114],
[95,0,117,85,107,99,101,83,101],
[60,94,0,63,79,77,85,75,69],
[106,126,148,0,108,113,113,97,115],
[99,104,132,103,0,98,106,100,119],
[108,112,134,98,113,0,106,97,101],
[108,110,126,98,105,105,0,85,98],
[99,128,136,114,111,114,126,0,123],
[97,110,142,96,92,110,113,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,91,92,104,91,98,103,105],
[120,0,102,108,104,107,101,103,105],
[120,109,0,88,99,105,104,101,114],
[119,103,123,0,106,117,107,114,114],
[107,107,112,105,0,99,97,104,100],
[120,104,106,94,112,0,106,108,118],
[113,110,107,104,114,105,0,116,112],
[108,108,110,97,107,103,95,0,115],
[106,106,97,97,111,93,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,124,131,111,119,132,125],
[101,0,106,126,107,108,111,124,138],
[111,105,0,114,111,109,121,123,122],
[87,85,97,0,101,105,126,132,135],
[80,104,100,110,0,97,102,124,124],
[100,103,102,106,114,0,119,134,114],
[92,100,90,85,109,92,0,131,107],
[79,87,88,79,87,77,80,0,114],
[86,73,89,76,87,97,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,122,103,110,140,109,119,98],
[91,0,111,121,118,128,126,122,106],
[89,100,0,105,113,113,133,110,92],
[108,90,106,0,127,117,107,112,101],
[101,93,98,84,0,94,105,100,77],
[71,83,98,94,117,0,104,100,81],
[102,85,78,104,106,107,0,114,95],
[92,89,101,99,111,111,97,0,90],
[113,105,119,110,134,130,116,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,119,93,109,112,119,103,98],
[110,0,122,101,100,130,119,110,109],
[92,89,0,81,86,106,97,95,91],
[118,110,130,0,105,123,127,112,119],
[102,111,125,106,0,128,108,114,106],
[99,81,105,88,83,0,93,92,98],
[92,92,114,84,103,118,0,97,107],
[108,101,116,99,97,119,114,0,98],
[113,102,120,92,105,113,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,102,95,107,103,113,105],
[104,0,115,95,98,100,101,112,114],
[94,96,0,96,94,103,79,103,105],
[109,116,115,0,106,123,114,118,103],
[116,113,117,105,0,116,103,125,112],
[104,111,108,88,95,0,102,101,111],
[108,110,132,97,108,109,0,122,105],
[98,99,108,93,86,110,89,0,107],
[106,97,106,108,99,100,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,87,90,99,102,99,101,101],
[107,0,110,117,92,105,121,117,117],
[124,101,0,92,94,103,106,101,97],
[121,94,119,0,103,108,120,133,117],
[112,119,117,108,0,108,121,110,100],
[109,106,108,103,103,0,99,113,107],
[112,90,105,91,90,112,0,110,109],
[110,94,110,78,101,98,101,0,101],
[110,94,114,94,111,104,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,92,105,71,112,120,122,106],
[87,0,97,127,114,70,78,89,86],
[119,114,0,150,123,112,92,123,132],
[106,84,61,0,83,78,83,104,97],
[140,97,88,128,0,99,105,116,123],
[99,141,99,133,112,0,111,115,127],
[91,133,119,128,106,100,0,111,117],
[89,122,88,107,95,96,100,0,131],
[105,125,79,114,88,84,94,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,103,94,108,97,93,94,96],
[139,0,100,124,101,101,124,129,120],
[108,111,0,105,108,90,125,106,121],
[117,87,106,0,100,110,119,118,100],
[103,110,103,111,0,86,114,119,98],
[114,110,121,101,125,0,117,113,111],
[118,87,86,92,97,94,0,118,98],
[117,82,105,93,92,98,93,0,100],
[115,91,90,111,113,100,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,93,93,90,90,101,79,100],
[104,0,97,96,85,102,99,95,98],
[118,114,0,99,99,113,102,92,110],
[118,115,112,0,89,95,94,98,93],
[121,126,112,122,0,129,105,116,101],
[121,109,98,116,82,0,99,83,104],
[110,112,109,117,106,112,0,96,100],
[132,116,119,113,95,128,115,0,111],
[111,113,101,118,110,107,111,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,115,112,104,107,102,105,103],
[115,0,105,121,120,105,119,101,107],
[96,106,0,96,112,98,119,100,97],
[99,90,115,0,104,130,125,88,95],
[107,91,99,107,0,116,91,96,109],
[104,106,113,81,95,0,105,94,90],
[109,92,92,86,120,106,0,91,97],
[106,110,111,123,115,117,120,0,99],
[108,104,114,116,102,121,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,89,127,98,121,132,113],
[106,0,95,97,109,102,99,101,82],
[114,116,0,91,95,102,114,118,89],
[122,114,120,0,95,99,111,123,99],
[84,102,116,116,0,93,98,113,76],
[113,109,109,112,118,0,115,113,83],
[90,112,97,100,113,96,0,97,90],
[79,110,93,88,98,98,114,0,86],
[98,129,122,112,135,128,121,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,103,86,86,102,78,101,98],
[121,0,108,98,97,106,103,104,107],
[108,103,0,105,98,113,109,101,114],
[125,113,106,0,113,107,109,92,111],
[125,114,113,98,0,102,109,105,122],
[109,105,98,104,109,0,118,112,120],
[133,108,102,102,102,93,0,101,109],
[110,107,110,119,106,99,110,0,117],
[113,104,97,100,89,91,102,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,113,92,118,99,110,96],
[100,0,120,102,114,114,107,110,88],
[97,91,0,81,94,99,91,104,113],
[98,109,130,0,102,117,111,102,98],
[119,97,117,109,0,131,109,104,117],
[93,97,112,94,80,0,100,95,110],
[112,104,120,100,102,111,0,118,118],
[101,101,107,109,107,116,93,0,99],
[115,123,98,113,94,101,93,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,94,106,111,113,118,118,113],
[103,0,78,97,101,90,109,94,95],
[117,133,0,107,112,102,126,115,112],
[105,114,104,0,115,93,107,108,114],
[100,110,99,96,0,106,107,108,95],
[98,121,109,118,105,0,116,108,103],
[93,102,85,104,104,95,0,95,95],
[93,117,96,103,103,103,116,0,100],
[98,116,99,97,116,108,116,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,97,109,115,112,103,99],
[100,0,104,102,105,108,102,95,108],
[106,107,0,102,107,102,102,102,113],
[114,109,109,0,105,110,106,109,98],
[102,106,104,106,0,104,95,101,94],
[96,103,109,101,107,0,106,106,103],
[99,109,109,105,116,105,0,110,105],
[108,116,109,102,110,105,101,0,106],
[112,103,98,113,117,108,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,95,96,90,112,101,90],
[116,0,115,106,111,117,120,105,104],
[113,96,0,104,106,113,114,105,108],
[116,105,107,0,112,117,126,107,116],
[115,100,105,99,0,103,115,102,96],
[121,94,98,94,108,0,123,112,92],
[99,91,97,85,96,88,0,96,85],
[110,106,106,104,109,99,115,0,109],
[121,107,103,95,115,119,126,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,117,80,110,98,98,99],
[112,0,98,105,105,110,109,102,98],
[104,113,0,110,93,105,109,111,107],
[94,106,101,0,91,108,112,103,102],
[131,106,118,120,0,111,107,115,101],
[101,101,106,103,100,0,98,104,102],
[113,102,102,99,104,113,0,118,111],
[113,109,100,108,96,107,93,0,98],
[112,113,104,109,110,109,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,111,103,105,124,98,106],
[104,0,108,106,99,100,120,91,101],
[100,103,0,105,108,116,113,89,110],
[100,105,106,0,101,106,122,95,108],
[108,112,103,110,0,116,114,104,114],
[106,111,95,105,95,0,123,106,104],
[87,91,98,89,97,88,0,94,93],
[113,120,122,116,107,105,117,0,106],
[105,110,101,103,97,107,118,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,107,102,113,98,101,104],
[104,0,107,96,93,110,90,99,101],
[113,104,0,101,106,126,111,113,102],
[104,115,110,0,108,116,110,105,106],
[109,118,105,103,0,115,108,109,102],
[98,101,85,95,96,0,99,104,97],
[113,121,100,101,103,112,0,104,100],
[110,112,98,106,102,107,107,0,98],
[107,110,109,105,109,114,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,105,107,113,107,103,110],
[103,0,105,112,94,117,104,109,104],
[103,106,0,107,99,112,105,107,103],
[106,99,104,0,95,108,102,99,108],
[104,117,112,116,0,118,107,106,103],
[98,94,99,103,93,0,102,105,100],
[104,107,106,109,104,109,0,110,109],
[108,102,104,112,105,106,101,0,105],
[101,107,108,103,108,111,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,94,94,89,94,108,109,106],
[112,0,87,93,80,82,103,102,85],
[117,124,0,129,111,106,117,114,101],
[117,118,82,0,92,102,107,107,93],
[122,131,100,119,0,110,106,127,123],
[117,129,105,109,101,0,119,125,99],
[103,108,94,104,105,92,0,94,93],
[102,109,97,104,84,86,117,0,83],
[105,126,110,118,88,112,118,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,104,104,140,132,96,84,101],
[128,0,92,140,149,140,119,111,118],
[107,119,0,117,137,86,113,107,135],
[107,71,94,0,79,108,89,118,134],
[71,62,74,132,0,80,103,101,129],
[79,71,125,103,131,0,95,127,122],
[115,92,98,122,108,116,0,121,107],
[127,100,104,93,110,84,90,0,89],
[110,93,76,77,82,89,104,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,195,152,195,93,147,177,147],
[64,0,98,98,107,157,80,123,114],
[16,113,0,0,43,59,70,177,16],
[59,113,211,0,59,93,113,177,59],
[16,104,168,152,0,93,70,177,50],
[118,54,152,118,118,0,118,118,118],
[64,131,141,98,141,93,0,107,141],
[34,88,34,34,34,93,104,0,34],
[64,97,195,152,161,93,70,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,125,110,116,103,102,110,110],
[96,0,116,93,116,104,92,111,105],
[86,95,0,92,108,106,94,106,103],
[101,118,119,0,107,103,104,106,108],
[95,95,103,104,0,101,99,105,96],
[108,107,105,108,110,0,104,113,112],
[109,119,117,107,112,107,0,117,105],
[101,100,105,105,106,98,94,0,94],
[101,106,108,103,115,99,106,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,94,120,114,115,107,110,115],
[103,0,88,116,108,108,110,100,107],
[117,123,0,116,114,121,109,104,119],
[91,95,95,0,98,98,99,99,104],
[97,103,97,113,0,109,107,104,108],
[96,103,90,113,102,0,102,100,112],
[104,101,102,112,104,109,0,101,106],
[101,111,107,112,107,111,110,0,112],
[96,104,92,107,103,99,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,96,107,92,115,87,90],
[99,0,89,102,96,95,117,90,89],
[103,122,0,103,114,94,119,107,93],
[115,109,108,0,105,97,111,110,99],
[104,115,97,106,0,105,117,96,96],
[119,116,117,114,106,0,124,100,103],
[96,94,92,100,94,87,0,81,85],
[124,121,104,101,115,111,130,0,122],
[121,122,118,112,115,108,126,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,99,102,108,120,112,112],
[100,0,98,99,102,110,102,102,107],
[104,113,0,110,106,112,114,113,119],
[112,112,101,0,106,107,116,111,115],
[109,109,105,105,0,111,112,115,115],
[103,101,99,104,100,0,102,104,108],
[91,109,97,95,99,109,0,110,109],
[99,109,98,100,96,107,101,0,107],
[99,104,92,96,96,103,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,123,135,98,87,94,98,108],
[104,0,110,117,88,93,111,88,97],
[88,101,0,110,89,80,88,94,108],
[76,94,101,0,80,78,70,83,106],
[113,123,122,131,0,103,112,115,121],
[124,118,131,133,108,0,101,110,131],
[117,100,123,141,99,110,0,92,128],
[113,123,117,128,96,101,119,0,132],
[103,114,103,105,90,80,83,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,103,98,118,106,97,110,113],
[89,0,101,98,111,108,89,107,108],
[108,110,0,101,131,122,107,113,106],
[113,113,110,0,116,107,104,112,125],
[93,100,80,95,0,106,93,111,105],
[105,103,89,104,105,0,103,114,95],
[114,122,104,107,118,108,0,123,119],
[101,104,98,99,100,97,88,0,114],
[98,103,105,86,106,116,92,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,98,102,104,107,98,109],
[97,0,108,97,103,90,109,90,101],
[108,103,0,98,89,107,109,91,100],
[113,114,113,0,102,111,123,107,112],
[109,108,122,109,0,105,103,102,101],
[107,121,104,100,106,0,119,95,98],
[104,102,102,88,108,92,0,89,103],
[113,121,120,104,109,116,122,0,122],
[102,110,111,99,110,113,108,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,118,114,104,120,105,114,116],
[94,0,111,113,100,106,105,112,104],
[93,100,0,110,91,99,103,100,99],
[97,98,101,0,94,97,111,100,86],
[107,111,120,117,0,109,111,112,101],
[91,105,112,114,102,0,105,103,102],
[106,106,108,100,100,106,0,101,109],
[97,99,111,111,99,108,110,0,98],
[95,107,112,125,110,109,102,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,117,112,104,114,108,109],
[106,0,100,104,108,104,112,101,99],
[102,111,0,119,117,108,118,109,109],
[94,107,92,0,104,98,116,102,100],
[99,103,94,107,0,105,117,97,96],
[107,107,103,113,106,0,112,106,103],
[97,99,93,95,94,99,0,97,101],
[103,110,102,109,114,105,114,0,113],
[102,112,102,111,115,108,110,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,110,104,104,113,99,110],
[104,0,100,116,103,110,101,98,103],
[106,111,0,106,106,108,112,101,106],
[101,95,105,0,96,103,111,100,103],
[107,108,105,115,0,107,111,109,103],
[107,101,103,108,104,0,110,95,104],
[98,110,99,100,100,101,0,102,103],
[112,113,110,111,102,116,109,0,109],
[101,108,105,108,108,107,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,108,76,81,91,116,119,96],
[118,0,109,127,109,127,133,135,97],
[103,102,0,109,84,122,132,110,117],
[135,84,102,0,84,110,113,102,104],
[130,102,127,127,0,109,126,121,94],
[120,84,89,101,102,0,109,122,103],
[95,78,79,98,85,102,0,85,105],
[92,76,101,109,90,89,126,0,86],
[115,114,94,107,117,108,106,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,105,100,103,84,108,98,93],
[130,0,100,125,115,111,125,115,115],
[106,111,0,101,109,97,105,102,90],
[111,86,110,0,103,94,103,99,94],
[108,96,102,108,0,92,118,99,94],
[127,100,114,117,119,0,109,112,96],
[103,86,106,108,93,102,0,108,97],
[113,96,109,112,112,99,103,0,101],
[118,96,121,117,117,115,114,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,113,116,111,111,101,111],
[104,0,97,105,110,111,115,106,112],
[113,114,0,113,104,102,121,107,112],
[98,106,98,0,98,109,111,96,117],
[95,101,107,113,0,110,121,106,117],
[100,100,109,102,101,0,107,98,108],
[100,96,90,100,90,104,0,89,96],
[110,105,104,115,105,113,122,0,112],
[100,99,99,94,94,103,115,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,118,119,107,117,117,108,110],
[108,0,100,115,93,114,114,106,112],
[93,111,0,119,97,106,111,105,108],
[92,96,92,0,91,103,93,102,101],
[104,118,114,120,0,128,108,117,117],
[94,97,105,108,83,0,98,109,103],
[94,97,100,118,103,113,0,108,113],
[103,105,106,109,94,102,103,0,107],
[101,99,103,110,94,108,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,118,109,101,111,85,97,97],
[113,0,120,117,114,120,98,107,109],
[93,91,0,98,89,105,81,88,95],
[102,94,113,0,100,114,102,103,111],
[110,97,122,111,0,114,103,104,105],
[100,91,106,97,97,0,82,99,99],
[126,113,130,109,108,129,0,112,99],
[114,104,123,108,107,112,99,0,108],
[114,102,116,100,106,112,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,94,116,102,130,95,128],
[104,0,104,91,110,95,104,110,122],
[109,107,0,114,129,125,142,103,126],
[117,120,97,0,97,100,123,107,116],
[95,101,82,114,0,122,122,105,134],
[109,116,86,111,89,0,109,93,95],
[81,107,69,88,89,102,0,83,105],
[116,101,108,104,106,118,128,0,113],
[83,89,85,95,77,116,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,123,126,125,119,102,125,113],
[97,0,100,110,116,109,110,119,112],
[88,111,0,95,117,140,71,119,107],
[85,101,116,0,100,116,86,110,97],
[86,95,94,111,0,111,100,123,97],
[92,102,71,95,100,0,79,122,90],
[109,101,140,125,111,132,0,119,105],
[86,92,92,101,88,89,92,0,89],
[98,99,104,114,114,121,106,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,100,95,108,76,110,78,91],
[128,0,107,107,110,98,118,111,97],
[111,104,0,115,119,94,119,88,94],
[116,104,96,0,87,111,125,100,80],
[103,101,92,124,0,110,121,84,105],
[135,113,117,100,101,0,117,102,110],
[101,93,92,86,90,94,0,87,96],
[133,100,123,111,127,109,124,0,109],
[120,114,117,131,106,101,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,114,110,107,102,107,109],
[98,0,99,100,93,89,101,91,103],
[110,112,0,118,106,102,107,106,104],
[97,111,93,0,111,99,101,99,107],
[101,118,105,100,0,98,100,105,103],
[104,122,109,112,113,0,111,104,112],
[109,110,104,110,111,100,0,106,119],
[104,120,105,112,106,107,105,0,112],
[102,108,107,104,108,99,92,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,111,111,106,104,108,102,105],
[92,0,108,108,104,96,105,101,115],
[100,103,0,106,104,99,100,84,100],
[100,103,105,0,103,104,94,94,101],
[105,107,107,108,0,106,108,95,104],
[107,115,112,107,105,0,93,112,103],
[103,106,111,117,103,118,0,105,109],
[109,110,127,117,116,99,106,0,105],
[106,96,111,110,107,108,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,108,108,96,112,100,121],
[102,0,102,104,94,97,102,91,107],
[96,109,0,98,107,80,92,101,101],
[103,107,113,0,106,92,99,100,109],
[103,117,104,105,0,100,100,117,116],
[115,114,131,119,111,0,107,97,116],
[99,109,119,112,111,104,0,103,114],
[111,120,110,111,94,114,108,0,114],
[90,104,110,102,95,95,97,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,109,99,115,120,103,111],
[96,0,95,100,91,100,109,104,106],
[109,116,0,101,119,105,121,106,115],
[102,111,110,0,101,103,120,95,113],
[112,120,92,110,0,115,125,104,118],
[96,111,106,108,96,0,118,101,113],
[91,102,90,91,86,93,0,88,98],
[108,107,105,116,107,110,123,0,117],
[100,105,96,98,93,98,113,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,105,98,97,107,97,99],
[110,0,98,113,91,110,112,108,107],
[102,113,0,106,103,101,112,108,104],
[106,98,105,0,101,99,109,104,111],
[113,120,108,110,0,108,114,114,105],
[114,101,110,112,103,0,109,113,103],
[104,99,99,102,97,102,0,110,102],
[114,103,103,107,97,98,101,0,99],
[112,104,107,100,106,108,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,110,94,111,95,110,116],
[103,0,108,95,105,105,105,97,118],
[100,103,0,95,96,102,112,96,122],
[101,116,116,0,110,117,106,111,122],
[117,106,115,101,0,113,108,113,113],
[100,106,109,94,98,0,92,108,115],
[116,106,99,105,103,119,0,110,115],
[101,114,115,100,98,103,101,0,109],
[95,93,89,89,98,96,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,30,99,98,75,82,76,99],
[145,0,103,97,117,132,130,88,104],
[181,108,0,128,142,145,126,93,124],
[112,114,83,0,119,124,82,54,101],
[113,94,69,92,0,128,93,104,117],
[136,79,66,87,83,0,108,128,112],
[129,81,85,129,118,103,0,79,99],
[135,123,118,157,107,83,132,0,86],
[112,107,87,110,94,99,112,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,119,110,92,109,112,115],
[100,0,105,130,121,107,100,108,114],
[104,106,0,115,105,89,86,112,108],
[92,81,96,0,111,84,77,91,99],
[101,90,106,100,0,80,86,106,106],
[119,104,122,127,131,0,105,114,102],
[102,111,125,134,125,106,0,133,123],
[99,103,99,120,105,97,78,0,89],
[96,97,103,112,105,109,88,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,117,99,107,121,115,106],
[103,0,94,112,109,100,106,114,113],
[108,117,0,122,111,104,113,128,116],
[94,99,89,0,96,99,106,109,101],
[112,102,100,115,0,115,115,120,116],
[104,111,107,112,96,0,110,119,99],
[90,105,98,105,96,101,0,117,107],
[96,97,83,102,91,92,94,0,92],
[105,98,95,110,95,112,104,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,60,60,60,60,60,149,60],
[151,0,62,211,122,62,62,211,62],
[151,149,0,149,122,0,62,149,60],
[151,0,62,0,122,62,62,211,62],
[151,89,89,89,0,89,62,89,0],
[151,149,211,149,122,0,122,149,60],
[151,149,149,149,149,89,0,149,149],
[62,0,62,0,122,62,62,0,62],
[151,149,151,149,211,151,62,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,105,109,103,111,89,95],
[107,0,125,106,93,109,123,102,115],
[103,86,0,98,102,90,86,90,77],
[106,105,113,0,94,99,118,86,99],
[102,118,109,117,0,117,111,107,96],
[108,102,121,112,94,0,106,103,108],
[100,88,125,93,100,105,0,93,99],
[122,109,121,125,104,108,118,0,101],
[116,96,134,112,115,103,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,100,93,95,84,86,98,85],
[119,0,101,102,129,108,113,116,107],
[111,110,0,104,111,107,108,127,117],
[118,109,107,0,128,117,134,134,99],
[116,82,100,83,0,88,105,111,103],
[127,103,104,94,123,0,100,122,107],
[125,98,103,77,106,111,0,124,100],
[113,95,84,77,100,89,87,0,96],
[126,104,94,112,108,104,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,114,83,96,73,100,61,110],
[123,0,117,90,91,77,135,99,113],
[97,94,0,83,77,79,125,103,134],
[128,121,128,0,87,74,124,106,134],
[115,120,134,124,0,107,126,82,135],
[138,134,132,137,104,0,157,121,124],
[111,76,86,87,85,54,0,65,93],
[150,112,108,105,129,90,146,0,126],
[101,98,77,77,76,87,118,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,96,93,86,83,88,88,107],
[134,0,97,114,113,112,105,91,118],
[115,114,0,111,99,97,95,98,121],
[118,97,100,0,102,90,85,114,107],
[125,98,112,109,0,106,113,101,124],
[128,99,114,121,105,0,101,100,119],
[123,106,116,126,98,110,0,100,106],
[123,120,113,97,110,111,111,0,120],
[104,93,90,104,87,92,105,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,104,104,100,103,100,96,101],
[91,0,83,87,94,104,83,85,93],
[107,128,0,104,106,106,100,100,119],
[107,124,107,0,104,111,112,106,122],
[111,117,105,107,0,104,103,108,115],
[108,107,105,100,107,0,93,98,119],
[111,128,111,99,108,118,0,124,117],
[115,126,111,105,103,113,87,0,113],
[110,118,92,89,96,92,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,98,113,106,94,103,117,127],
[113,0,101,109,93,106,102,114,122],
[113,110,0,107,89,93,100,121,114],
[98,102,104,0,92,94,111,108,114],
[105,118,122,119,0,111,97,132,139],
[117,105,118,117,100,0,118,107,132],
[108,109,111,100,114,93,0,117,109],
[94,97,90,103,79,104,94,0,107],
[84,89,97,97,72,79,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,90,103,78,61,77,83,86],
[94,0,106,131,84,77,85,81,92],
[121,105,0,113,104,91,102,75,102],
[108,80,98,0,74,73,67,79,85],
[133,127,107,137,0,92,115,96,113],
[150,134,120,138,119,0,126,111,105],
[134,126,109,144,96,85,0,90,105],
[128,130,136,132,115,100,121,0,118],
[125,119,109,126,98,106,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,96,109,117,116,110,116],
[106,0,112,121,105,107,133,116,112],
[107,99,0,116,115,92,104,102,118],
[115,90,95,0,109,99,106,91,102],
[102,106,96,102,0,108,107,120,112],
[94,104,119,112,103,0,122,122,122],
[95,78,107,105,104,89,0,107,117],
[101,95,109,120,91,89,104,0,107],
[95,99,93,109,99,89,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,96,97,89,100,105,101],
[111,0,134,121,106,114,90,102,89],
[114,77,0,115,95,109,92,111,110],
[115,90,96,0,82,88,94,94,109],
[114,105,116,129,0,107,103,93,115],
[122,97,102,123,104,0,99,94,103],
[111,121,119,117,108,112,0,106,104],
[106,109,100,117,118,117,105,0,119],
[110,122,101,102,96,108,107,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,91,148,133,140,111,129,122],
[66,0,99,77,66,88,56,122,36],
[120,112,0,106,94,102,112,102,97],
[63,134,105,0,76,109,68,90,80],
[78,145,117,135,0,116,97,121,134],
[71,123,109,102,95,0,85,104,89],
[100,155,99,143,114,126,0,137,124],
[82,89,109,121,90,107,74,0,88],
[89,175,114,131,77,122,87,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,106,79,118,112,99,86],
[115,0,114,102,104,100,116,104,104],
[114,97,0,96,104,105,117,106,98],
[105,109,115,0,95,108,126,91,108],
[132,107,107,116,0,118,126,105,107],
[93,111,106,103,93,0,122,100,101],
[99,95,94,85,85,89,0,94,94],
[112,107,105,120,106,111,117,0,100],
[125,107,113,103,104,110,117,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,15,82,110,88,122,47,110],
[152,0,78,145,73,136,108,38,129],
[196,133,0,142,114,149,114,72,170],
[129,66,69,0,66,66,47,38,63],
[101,138,97,145,0,136,144,119,163],
[123,75,62,145,75,0,82,37,65],
[89,103,97,164,67,129,0,84,182],
[164,173,139,173,92,174,127,0,167],
[101,82,41,148,48,146,29,44,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,112,89,109,99,99,108,110],
[101,0,120,121,111,106,112,123,107],
[99,91,0,107,105,107,100,107,104],
[122,90,104,0,124,110,98,115,106],
[102,100,106,87,0,100,88,103,84],
[112,105,104,101,111,0,111,106,102],
[112,99,111,113,123,100,0,113,119],
[103,88,104,96,108,105,98,0,96],
[101,104,107,105,127,109,92,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,124,119,118,114,107,106,93],
[124,0,93,110,143,103,94,94,102],
[87,118,0,125,117,123,96,115,114],
[92,101,86,0,111,114,115,107,91],
[93,68,94,100,0,89,78,88,89],
[97,108,88,97,122,0,89,92,75],
[104,117,115,96,133,122,0,103,79],
[105,117,96,104,123,119,108,0,104],
[118,109,97,120,122,136,132,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,94,107,92,102,100,91,109],
[115,0,110,105,99,109,112,102,110],
[117,101,0,118,106,112,104,117,107],
[104,106,93,0,87,101,92,106,110],
[119,112,105,124,0,106,107,114,119],
[109,102,99,110,105,0,98,91,109],
[111,99,107,119,104,113,0,108,122],
[120,109,94,105,97,120,103,0,115],
[102,101,104,101,92,102,89,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,132,100,104,97,110,74,82],
[83,0,107,108,110,84,92,69,81],
[79,104,0,90,100,88,110,82,85],
[111,103,121,0,112,88,110,109,112],
[107,101,111,99,0,91,93,69,97],
[114,127,123,123,120,0,113,92,93],
[101,119,101,101,118,98,0,97,84],
[137,142,129,102,142,119,114,0,102],
[129,130,126,99,114,118,127,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,79,96,67,96,150,51,63],
[144,0,102,166,182,195,166,124,153],
[132,109,0,183,170,183,122,80,109],
[115,45,28,0,141,170,105,51,92],
[144,29,41,70,0,183,163,41,121],
[115,16,28,41,28,0,83,12,41],
[61,45,89,106,48,128,0,0,92],
[160,87,131,160,170,199,211,0,211],
[148,58,102,119,90,170,119,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,119,120,134,103,134,128,130],
[78,0,75,80,121,110,112,127,87],
[92,136,0,110,119,113,104,118,126],
[91,131,101,0,126,116,111,105,100],
[77,90,92,85,0,83,113,87,107],
[108,101,98,95,128,0,130,107,130],
[77,99,107,100,98,81,0,112,112],
[83,84,93,106,124,104,99,0,104],
[81,124,85,111,104,81,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,94,88,86,103,92,86,84],
[139,0,115,100,112,118,127,115,123],
[117,96,0,106,98,111,118,114,111],
[123,111,105,0,107,114,121,111,120],
[125,99,113,104,0,123,111,112,118],
[108,93,100,97,88,0,112,101,103],
[119,84,93,90,100,99,0,97,89],
[125,96,97,100,99,110,114,0,106],
[127,88,100,91,93,108,122,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,115,123,103,106,113,113,99],
[91,0,106,99,83,89,93,96,79],
[96,105,0,105,98,95,103,89,94],
[88,112,106,0,101,107,101,105,96],
[108,128,113,110,0,113,113,105,107],
[105,122,116,104,98,0,110,106,97],
[98,118,108,110,98,101,0,93,86],
[98,115,122,106,106,105,118,0,99],
[112,132,117,115,104,114,125,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,125,96,97,116,114,117,96],
[92,0,109,76,99,123,103,102,108],
[86,102,0,90,104,122,129,129,110],
[115,135,121,0,135,143,128,104,110],
[114,112,107,76,0,113,116,117,103],
[95,88,89,68,98,0,103,99,93],
[97,108,82,83,95,108,0,123,107],
[94,109,82,107,94,112,88,0,89],
[115,103,101,101,108,118,104,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,118,107,109,94,90,112],
[113,0,106,130,118,108,99,107,117],
[111,105,0,125,108,105,100,106,108],
[93,81,86,0,107,100,92,100,114],
[104,93,103,104,0,92,96,98,98],
[102,103,106,111,119,0,96,98,105],
[117,112,111,119,115,115,0,104,115],
[121,104,105,111,113,113,107,0,112],
[99,94,103,97,113,106,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,112,110,118,99,100,120,100],
[93,0,98,102,115,100,101,106,105],
[99,113,0,107,107,108,109,111,102],
[101,109,104,0,102,101,106,102,101],
[93,96,104,109,0,101,94,118,96],
[112,111,103,110,110,0,105,98,99],
[111,110,102,105,117,106,0,120,110],
[91,105,100,109,93,113,91,0,105],
[111,106,109,110,115,112,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,85,86,112,100,93,96,77],
[120,0,107,110,116,101,106,90,113],
[126,104,0,101,119,115,98,113,113],
[125,101,110,0,110,108,105,85,102],
[99,95,92,101,0,97,92,76,80],
[111,110,96,103,114,0,104,82,109],
[118,105,113,106,119,107,0,79,90],
[115,121,98,126,135,129,132,0,108],
[134,98,98,109,131,102,121,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,108,107,112,104,107,104],
[101,0,99,105,105,112,110,107,98],
[107,112,0,107,91,103,113,92,97],
[103,106,104,0,100,100,103,124,107],
[104,106,120,111,0,115,104,94,94],
[99,99,108,111,96,0,98,103,99],
[107,101,98,108,107,113,0,105,97],
[104,104,119,87,117,108,106,0,108],
[107,113,114,104,117,112,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,86,111,97,85,91,76],
[105,0,110,100,116,115,87,98,99],
[101,101,0,96,110,117,105,93,106],
[125,111,115,0,120,109,104,119,110],
[100,95,101,91,0,100,80,91,87],
[114,96,94,102,111,0,78,116,97],
[126,124,106,107,131,133,0,113,103],
[120,113,118,92,120,95,98,0,100],
[135,112,105,101,124,114,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,53,38,100,56,88,59,108],
[138,0,124,117,130,98,138,170,149],
[158,87,0,75,116,35,117,75,116],
[173,94,136,0,171,50,164,82,102],
[111,81,95,40,0,50,111,61,69],
[155,113,176,161,161,0,114,99,184],
[123,73,94,47,100,97,0,100,108],
[152,41,136,129,150,112,111,0,112],
[103,62,95,109,142,27,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,116,105,109,101,104,117,114],
[113,0,121,96,94,99,101,90,88],
[95,90,0,79,83,100,82,89,85],
[106,115,132,0,99,103,108,114,99],
[102,117,128,112,0,99,117,131,118],
[110,112,111,108,112,0,107,99,103],
[107,110,129,103,94,104,0,117,107],
[94,121,122,97,80,112,94,0,100],
[97,123,126,112,93,108,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,102,114,106,99,113,113],
[102,0,102,102,116,110,93,103,126],
[102,109,0,115,99,105,105,121,134],
[109,109,96,0,114,109,108,94,131],
[97,95,112,97,0,99,88,101,113],
[105,101,106,102,112,0,90,109,112],
[112,118,106,103,123,121,0,101,113],
[98,108,90,117,110,102,110,0,116],
[98,85,77,80,98,99,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,107,112,124,124,102,111],
[104,0,121,102,112,125,110,102,113],
[95,90,0,97,102,107,121,87,97],
[104,109,114,0,107,112,113,112,110],
[99,99,109,104,0,107,118,88,92],
[87,86,104,99,104,0,113,97,110],
[87,101,90,98,93,98,0,101,95],
[109,109,124,99,123,114,110,0,99],
[100,98,114,101,119,101,116,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,120,119,105,110,93,122,86],
[105,0,134,128,125,115,79,143,111],
[91,77,0,117,90,100,79,107,95],
[92,83,94,0,91,108,96,97,86],
[106,86,121,120,0,103,87,131,95],
[101,96,111,103,108,0,89,110,115],
[118,132,132,115,124,122,0,153,103],
[89,68,104,114,80,101,58,0,94],
[125,100,116,125,116,96,108,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,100,113,104,105,112,100],
[104,0,100,91,113,106,99,105,107],
[104,111,0,102,112,102,108,113,105],
[111,120,109,0,118,106,106,105,112],
[98,98,99,93,0,95,93,94,100],
[107,105,109,105,116,0,112,110,105],
[106,112,103,105,118,99,0,112,102],
[99,106,98,106,117,101,99,0,101],
[111,104,106,99,111,106,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,115,118,120,120,105,110,104],
[97,0,113,111,116,98,107,104,103],
[96,98,0,103,105,108,98,116,108],
[93,100,108,0,122,107,102,113,104],
[91,95,106,89,0,89,96,95,101],
[91,113,103,104,122,0,108,116,98],
[106,104,113,109,115,103,0,115,116],
[101,107,95,98,116,95,96,0,93],
[107,108,103,107,110,113,95,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,116,108,116,110,108,118,111],
[107,0,120,104,97,99,111,111,107],
[95,91,0,101,97,91,111,122,111],
[103,107,110,0,101,94,97,126,115],
[95,114,114,110,0,98,107,134,105],
[101,112,120,117,113,0,107,120,117],
[103,100,100,114,104,104,0,112,107],
[93,100,89,85,77,91,99,0,95],
[100,104,100,96,106,94,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,111,106,101,114,106,103],
[112,0,103,108,101,116,114,101,102],
[105,108,0,103,104,103,113,97,108],
[100,103,108,0,107,113,103,96,102],
[105,110,107,104,0,103,114,94,100],
[110,95,108,98,108,0,113,98,110],
[97,97,98,108,97,98,0,100,101],
[105,110,114,115,117,113,111,0,109],
[108,109,103,109,111,101,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,93,77,140,85,87,91,92],
[119,0,124,94,145,100,93,81,123],
[118,87,0,110,118,76,114,79,57],
[134,117,101,0,132,107,70,80,102],
[71,66,93,79,0,53,45,77,85],
[126,111,135,104,158,0,107,152,93],
[124,118,97,141,166,104,0,91,126],
[120,130,132,131,134,59,120,0,100],
[119,88,154,109,126,118,85,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,100,108,110,105,111,106],
[102,0,98,98,115,107,112,110,107],
[105,113,0,111,113,123,107,105,106],
[111,113,100,0,109,111,106,109,98],
[103,96,98,102,0,106,106,101,96],
[101,104,88,100,105,0,99,101,99],
[106,99,104,105,105,112,0,106,105],
[100,101,106,102,110,110,105,0,105],
[105,104,105,113,115,112,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,82,110,101,68,79,89,120],
[135,0,100,120,92,108,110,105,115],
[129,111,0,120,103,93,102,115,134],
[101,91,91,0,79,73,94,72,106],
[110,119,108,132,0,65,86,119,108],
[143,103,118,138,146,0,116,138,137],
[132,101,109,117,125,95,0,123,137],
[122,106,96,139,92,73,88,0,121],
[91,96,77,105,103,74,74,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,117,93,85,86,115,89,98],
[112,0,120,116,102,103,120,102,94],
[94,91,0,96,85,81,98,88,83],
[118,95,115,0,92,84,98,101,100],
[126,109,126,119,0,102,142,105,116],
[125,108,130,127,109,0,115,116,104],
[96,91,113,113,69,96,0,97,107],
[122,109,123,110,106,95,114,0,119],
[113,117,128,111,95,107,104,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,101,105,100,100,104,107],
[107,0,108,108,106,94,105,104,108],
[114,103,0,108,110,106,110,117,114],
[110,103,103,0,97,104,112,104,110],
[106,105,101,114,0,112,107,110,108],
[111,117,105,107,99,0,114,118,119],
[111,106,101,99,104,97,0,104,104],
[107,107,94,107,101,93,107,0,105],
[104,103,97,101,103,92,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,112,96,103,102,93,105,95],
[112,0,108,100,108,99,111,105,96],
[99,103,0,98,102,96,111,93,105],
[115,111,113,0,101,118,117,110,107],
[108,103,109,110,0,102,118,115,109],
[109,112,115,93,109,0,114,115,100],
[118,100,100,94,93,97,0,101,103],
[106,106,118,101,96,96,110,0,103],
[116,115,106,104,102,111,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,106,101,104,105,102,99],
[111,0,105,112,93,108,108,106,107],
[109,106,0,103,105,102,112,109,105],
[105,99,108,0,101,95,109,104,118],
[110,118,106,110,0,104,124,111,113],
[107,103,109,116,107,0,105,111,108],
[106,103,99,102,87,106,0,103,105],
[109,105,102,107,100,100,108,0,112],
[112,104,106,93,98,103,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,101,136,159,68,93,95],
[116,0,98,98,135,192,96,90,106],
[110,113,0,110,146,140,110,105,77],
[110,113,101,0,146,143,146,115,113],
[75,76,65,65,0,135,82,107,76],
[52,19,71,68,76,0,38,47,19],
[143,115,101,65,129,173,0,112,109],
[118,121,106,96,104,164,99,0,85],
[116,105,134,98,135,192,102,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,120,93,122,95,99,132,110],
[108,0,114,111,114,105,100,124,119],
[91,97,0,117,139,108,98,115,127],
[118,100,94,0,120,98,110,137,98],
[89,97,72,91,0,90,96,95,118],
[116,106,103,113,121,0,111,113,125],
[112,111,113,101,115,100,0,103,93],
[79,87,96,74,116,98,108,0,88],
[101,92,84,113,93,86,118,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,106,120,112,98,105,108],
[107,0,100,113,115,109,109,104,104],
[107,111,0,115,108,103,106,103,105],
[105,98,96,0,101,98,98,103,90],
[91,96,103,110,0,102,100,106,104],
[99,102,108,113,109,0,101,111,99],
[113,102,105,113,111,110,0,103,112],
[106,107,108,108,105,100,108,0,97],
[103,107,106,121,107,112,99,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,125,101,118,91,101,111],
[102,0,128,124,109,110,108,97,114],
[97,83,0,100,106,76,95,71,102],
[86,87,111,0,113,92,94,104,99],
[110,102,105,98,0,65,75,114,110],
[93,101,135,119,146,0,113,105,127],
[120,103,116,117,136,98,0,124,143],
[110,114,140,107,97,106,87,0,114],
[100,97,109,112,101,84,68,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,98,100,105,102,117,110],
[108,0,102,106,98,110,105,108,107],
[99,109,0,101,117,111,103,117,104],
[113,105,110,0,103,107,101,125,105],
[111,113,94,108,0,113,107,119,110],
[106,101,100,104,98,0,95,122,108],
[109,106,108,110,104,116,0,114,108],
[94,103,94,86,92,89,97,0,98],
[101,104,107,106,101,103,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,94,121,120,116,117,90],
[109,0,131,105,132,135,125,114,94],
[100,80,0,92,97,109,118,99,77],
[117,106,119,0,112,145,105,109,106],
[90,79,114,99,0,109,94,119,82],
[91,76,102,66,102,0,100,94,74],
[95,86,93,106,117,111,0,91,79],
[94,97,112,102,92,117,120,0,74],
[121,117,134,105,129,137,132,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,104,89,104,109,90,106],
[117,0,135,130,99,127,127,111,125],
[110,76,0,111,84,111,116,106,102],
[107,81,100,0,108,91,122,115,106],
[122,112,127,103,0,125,120,114,132],
[107,84,100,120,86,0,111,98,107],
[102,84,95,89,91,100,0,88,99],
[121,100,105,96,97,113,123,0,128],
[105,86,109,105,79,104,112,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,79,116,75,110,105,105,96],
[117,0,91,106,82,90,90,88,107],
[132,120,0,118,107,125,100,116,101],
[95,105,93,0,82,93,90,96,116],
[136,129,104,129,0,92,101,121,119],
[101,121,86,118,119,0,92,126,85],
[106,121,111,121,110,119,0,103,96],
[106,123,95,115,90,85,108,0,89],
[115,104,110,95,92,126,115,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,104,104,104,104,90,99],
[109,0,93,107,112,109,113,105,107],
[116,118,0,109,104,113,118,111,110],
[107,104,102,0,99,112,113,105,103],
[107,99,107,112,0,112,115,109,108],
[107,102,98,99,99,0,111,104,101],
[107,98,93,98,96,100,0,93,96],
[121,106,100,106,102,107,118,0,111],
[112,104,101,108,103,110,115,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,115,102,86,114,132,111,114],
[88,0,93,81,86,90,112,87,88],
[96,118,0,111,120,116,114,131,119],
[109,130,100,0,95,87,117,114,121],
[125,125,91,116,0,122,121,109,135],
[97,121,95,124,89,0,131,113,99],
[79,99,97,94,90,80,0,91,84],
[100,124,80,97,102,98,120,0,94],
[97,123,92,90,76,112,127,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,79,93,81,108,97,104,95],
[110,0,99,111,115,125,109,110,116],
[132,112,0,102,98,115,99,116,127],
[118,100,109,0,98,129,96,119,103],
[130,96,113,113,0,126,120,122,115],
[103,86,96,82,85,0,97,92,99],
[114,102,112,115,91,114,0,121,98],
[107,101,95,92,89,119,90,0,100],
[116,95,84,108,96,112,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,98,100,104,109,115,105],
[108,0,114,109,107,102,105,104,118],
[111,97,0,104,106,110,99,97,110],
[113,102,107,0,111,101,103,100,109],
[111,104,105,100,0,105,110,98,99],
[107,109,101,110,106,0,102,88,105],
[102,106,112,108,101,109,0,101,118],
[96,107,114,111,113,123,110,0,117],
[106,93,101,102,112,106,93,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,107,104,107,96,123,96],
[116,0,105,103,108,108,104,127,103],
[110,106,0,109,104,96,87,120,103],
[104,108,102,0,96,103,95,117,94],
[107,103,107,115,0,102,103,113,107],
[104,103,115,108,109,0,103,128,97],
[115,107,124,116,108,108,0,127,105],
[88,84,91,94,98,83,84,0,88],
[115,108,108,117,104,114,106,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,96,115,105,105,117,110,90],
[94,0,109,122,96,107,98,107,90],
[115,102,0,115,95,96,120,102,99],
[96,89,96,0,89,92,99,94,83],
[106,115,116,122,0,105,105,114,115],
[106,104,115,119,106,0,105,119,116],
[94,113,91,112,106,106,0,109,84],
[101,104,109,117,97,92,102,0,98],
[121,121,112,128,96,95,127,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,112,109,130,125,110,108],
[100,0,78,99,101,99,112,100,95],
[109,133,0,101,120,115,120,123,129],
[99,112,110,0,114,120,116,104,119],
[102,110,91,97,0,100,105,106,96],
[81,112,96,91,111,0,111,102,106],
[86,99,91,95,106,100,0,99,105],
[101,111,88,107,105,109,112,0,96],
[103,116,82,92,115,105,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,96,104,96,113,99,102,95],
[125,0,106,109,98,121,99,111,101],
[115,105,0,119,99,115,122,108,112],
[107,102,92,0,94,100,100,113,99],
[115,113,112,117,0,118,109,100,106],
[98,90,96,111,93,0,110,102,84],
[112,112,89,111,102,101,0,108,91],
[109,100,103,98,111,109,103,0,100],
[116,110,99,112,105,127,120,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,110,113,100,96,99,111],
[103,0,87,114,115,112,92,105,112],
[112,124,0,106,108,100,102,111,103],
[101,97,105,0,110,107,95,85,111],
[98,96,103,101,0,113,87,97,92],
[111,99,111,104,98,0,104,105,104],
[115,119,109,116,124,107,0,102,113],
[112,106,100,126,114,106,109,0,114],
[100,99,108,100,119,107,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,113,130,111,127,127,102,109],
[90,0,88,104,94,107,110,90,57],
[98,123,0,134,100,135,106,109,90],
[81,107,77,0,87,93,93,69,67],
[100,117,111,124,0,112,108,116,72],
[84,104,76,118,99,0,109,90,72],
[84,101,105,118,103,102,0,115,76],
[109,121,102,142,95,121,96,0,89],
[102,154,121,144,139,139,135,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,99,109,110,95,96,108],
[113,0,111,108,121,114,121,102,120],
[112,100,0,100,112,109,104,100,117],
[112,103,111,0,118,124,115,108,117],
[102,90,99,93,0,106,93,109,111],
[101,97,102,87,105,0,101,103,103],
[116,90,107,96,118,110,0,104,106],
[115,109,111,103,102,108,107,0,107],
[103,91,94,94,100,108,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,108,105,113,109,112,103],
[97,0,109,92,104,100,106,117,106],
[101,102,0,100,92,96,106,111,107],
[103,119,111,0,123,104,113,108,106],
[106,107,119,88,0,93,97,103,103],
[98,111,115,107,118,0,108,111,104],
[102,105,105,98,114,103,0,108,111],
[99,94,100,103,108,100,103,0,95],
[108,105,104,105,108,107,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,106,113,105,97,111,108],
[106,0,106,116,103,105,99,102,98],
[98,105,0,101,113,97,94,116,97],
[105,95,110,0,111,104,103,98,103],
[98,108,98,100,0,101,95,105,101],
[106,106,114,107,110,0,106,102,114],
[114,112,117,108,116,105,0,118,111],
[100,109,95,113,106,109,93,0,109],
[103,113,114,108,110,97,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,102,108,103,103,114,107],
[96,0,87,93,92,89,92,99,78],
[105,124,0,94,91,95,91,116,92],
[109,118,117,0,101,104,108,115,110],
[103,119,120,110,0,121,105,129,96],
[108,122,116,107,90,0,98,124,100],
[108,119,120,103,106,113,0,115,89],
[97,112,95,96,82,87,96,0,89],
[104,133,119,101,115,111,122,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,101,116,104,89,103,110,113],
[92,0,93,99,91,113,100,110,119],
[110,118,0,128,110,100,114,122,127],
[95,112,83,0,100,91,108,103,99],
[107,120,101,111,0,122,118,109,122],
[122,98,111,120,89,0,106,106,112],
[108,111,97,103,93,105,0,104,95],
[101,101,89,108,102,105,107,0,121],
[98,92,84,112,89,99,116,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,116,76,80,81,71,89,65],
[143,0,134,120,95,99,124,124,120],
[95,77,0,101,70,95,85,85,73],
[135,91,110,0,121,114,116,114,104],
[131,116,141,90,0,104,121,111,97],
[130,112,116,97,107,0,107,116,113],
[140,87,126,95,90,104,0,117,95],
[122,87,126,97,100,95,94,0,91],
[146,91,138,107,114,98,116,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,96,100,95,125,107,108,106],
[99,0,108,103,106,127,97,103,113],
[115,103,0,109,107,130,113,114,112],
[111,108,102,0,94,117,116,111,110],
[116,105,104,117,0,143,108,127,109],
[86,84,81,94,68,0,99,87,86],
[104,114,98,95,103,112,0,105,97],
[103,108,97,100,84,124,106,0,109],
[105,98,99,101,102,125,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,123,110,126,111,112,97,130],
[94,0,98,101,108,107,102,102,127],
[88,113,0,90,110,102,93,99,117],
[101,110,121,0,126,118,113,111,127],
[85,103,101,85,0,103,100,97,124],
[100,104,109,93,108,0,100,115,121],
[99,109,118,98,111,111,0,105,124],
[114,109,112,100,114,96,106,0,124],
[81,84,94,84,87,90,87,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,126,104,97,123,95,115,106],
[98,0,87,115,86,94,70,104,93],
[85,124,0,113,98,86,83,71,115],
[107,96,98,0,80,77,82,54,100],
[114,125,113,131,0,94,92,96,102],
[88,117,125,134,117,0,115,109,90],
[116,141,128,129,119,96,0,86,99],
[96,107,140,157,115,102,125,0,131],
[105,118,96,111,109,121,112,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,96,35,70,107,116,77,119],
[162,0,165,129,83,146,94,112,154],
[115,46,0,39,23,65,85,22,88],
[176,82,172,0,112,154,164,111,168],
[141,128,188,99,0,162,188,94,106],
[104,65,146,57,49,0,95,56,31],
[95,117,126,47,23,116,0,37,79],
[134,99,189,100,117,155,174,0,100],
[92,57,123,43,105,180,132,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,105,104,119,102,108,121],
[104,0,103,109,112,111,110,114,122],
[111,108,0,98,107,114,113,106,120],
[106,102,113,0,97,118,97,112,123],
[107,99,104,114,0,112,110,105,121],
[92,100,97,93,99,0,98,103,115],
[109,101,98,114,101,113,0,100,125],
[103,97,105,99,106,108,111,0,124],
[90,89,91,88,90,96,86,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,68,106,142,124,88,136,129],
[111,0,116,109,96,154,107,125,138],
[143,95,0,136,103,156,105,116,129],
[105,102,75,0,103,87,77,77,64],
[69,115,108,108,0,108,84,114,115],
[87,57,55,124,103,0,71,89,146],
[123,104,106,134,127,140,0,153,145],
[75,86,95,134,97,122,58,0,84],
[82,73,82,147,96,65,66,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,116,100,104,115,111,104],
[97,0,99,91,83,95,101,92,98],
[99,112,0,124,103,94,105,119,94],
[95,120,87,0,81,91,113,99,98],
[111,128,108,130,0,110,111,104,120],
[107,116,117,120,101,0,118,112,109],
[96,110,106,98,100,93,0,102,95],
[100,119,92,112,107,99,109,0,98],
[107,113,117,113,91,102,116,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,125,104,114,111,134,109],
[98,0,105,124,113,114,111,105,99],
[104,106,0,116,121,116,123,116,109],
[86,87,95,0,94,110,95,114,88],
[107,98,90,117,0,109,100,122,93],
[97,97,95,101,102,0,94,126,84],
[100,100,88,116,111,117,0,114,89],
[77,106,95,97,89,85,97,0,96],
[102,112,102,123,118,127,122,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,95,138,109,148,124,150,126],
[96,0,90,148,108,163,135,131,133],
[116,121,0,128,97,129,117,140,126],
[73,63,83,0,85,105,84,110,96],
[102,103,114,126,0,118,127,98,118],
[63,48,82,106,93,0,100,124,99],
[87,76,94,127,84,111,0,116,94],
[61,80,71,101,113,87,95,0,76],
[85,78,85,115,93,112,117,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,118,96,92,77,89,109,95],
[110,0,108,112,105,82,89,116,115],
[93,103,0,113,93,83,88,108,99],
[115,99,98,0,97,99,105,115,103],
[119,106,118,114,0,107,98,130,102],
[134,129,128,112,104,0,102,125,109],
[122,122,123,106,113,109,0,127,103],
[102,95,103,96,81,86,84,0,98],
[116,96,112,108,109,102,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,98,97,104,114,95,106],
[109,0,105,107,99,120,115,101,119],
[110,106,0,103,122,107,110,101,108],
[113,104,108,0,102,84,118,133,117],
[114,112,89,109,0,110,109,109,105],
[107,91,104,127,101,0,109,103,112],
[97,96,101,93,102,102,0,99,112],
[116,110,110,78,102,108,112,0,116],
[105,92,103,94,106,99,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,108,118,111,113,113,96],
[108,0,114,110,117,107,111,99,114],
[99,97,0,110,114,106,104,105,92],
[103,101,101,0,103,106,100,98,99],
[93,94,97,108,0,92,104,97,94],
[100,104,105,105,119,0,111,106,101],
[98,100,107,111,107,100,0,100,97],
[98,112,106,113,114,105,111,0,107],
[115,97,119,112,117,110,114,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,124,123,102,116,126,118],
[102,0,103,120,99,105,105,94,118],
[97,108,0,100,119,108,107,118,104],
[87,91,111,0,107,96,97,116,97],
[88,112,92,104,0,97,109,100,98],
[109,106,103,115,114,0,117,112,103],
[95,106,104,114,102,94,0,98,108],
[85,117,93,95,111,99,113,0,98],
[93,93,107,114,113,108,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,92,99,90,98,90,97,102],
[121,0,103,116,85,99,119,87,104],
[119,108,0,112,99,90,118,114,102],
[112,95,99,0,96,103,104,93,102],
[121,126,112,115,0,111,117,88,98],
[113,112,121,108,100,0,112,97,98],
[121,92,93,107,94,99,0,95,105],
[114,124,97,118,123,114,116,0,115],
[109,107,109,109,113,113,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,121,100,114,113,108,118,113],
[98,0,108,92,128,114,117,108,104],
[90,103,0,98,114,96,110,114,113],
[111,119,113,0,126,103,122,132,116],
[97,83,97,85,0,97,115,108,103],
[98,97,115,108,114,0,117,125,124],
[103,94,101,89,96,94,0,117,115],
[93,103,97,79,103,86,94,0,115],
[98,107,98,95,108,87,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,116,98,93,106,88,94,110],
[114,0,121,109,106,108,113,100,110],
[95,90,0,89,98,106,97,88,98],
[113,102,122,0,108,107,112,112,119],
[118,105,113,103,0,112,106,107,121],
[105,103,105,104,99,0,100,96,110],
[123,98,114,99,105,111,0,97,120],
[117,111,123,99,104,115,114,0,124],
[101,101,113,92,90,101,91,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,106,108,109,102,112,120,108],
[88,0,88,100,78,91,94,104,110],
[105,123,0,113,105,106,116,131,114],
[103,111,98,0,95,105,101,108,104],
[102,133,106,116,0,110,102,121,122],
[109,120,105,106,101,0,112,119,134],
[99,117,95,110,109,99,0,115,117],
[91,107,80,103,90,92,96,0,100],
[103,101,97,107,89,77,94,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,150,125,114,80,126,109,108],
[120,0,141,149,114,70,102,118,107],
[61,70,0,116,100,46,70,87,71],
[86,62,95,0,87,49,74,84,55],
[97,97,111,124,0,105,82,103,96],
[131,141,165,162,106,0,137,109,103],
[85,109,141,137,129,74,0,109,83],
[102,93,124,127,108,102,102,0,107],
[103,104,140,156,115,108,128,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,98,102,122,106,116,107],
[109,0,106,112,105,130,97,113,96],
[97,105,0,107,120,124,123,131,100],
[113,99,104,0,88,127,114,103,87],
[109,106,91,123,0,126,101,124,107],
[89,81,87,84,85,0,92,97,85],
[105,114,88,97,110,119,0,101,85],
[95,98,80,108,87,114,110,0,93],
[104,115,111,124,104,126,126,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,31,73,47,73,87,98,89,155],
[180,0,98,58,42,122,114,58,124],
[138,113,0,113,108,138,180,89,113],
[164,153,98,0,164,122,98,89,124],
[138,169,103,47,0,138,114,89,113],
[124,89,73,89,73,0,114,89,155],
[113,97,31,113,97,97,0,47,113],
[122,153,122,122,122,122,164,0,82],
[56,87,98,87,98,56,98,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,119,67,115,86,99,63,101],
[113,0,135,57,76,60,65,80,80],
[92,76,0,82,58,90,78,61,57],
[144,154,129,0,107,99,132,115,83],
[96,135,153,104,0,121,98,123,98],
[125,151,121,112,90,0,122,85,83],
[112,146,133,79,113,89,0,71,80],
[148,131,150,96,88,126,140,0,131],
[110,131,154,128,113,128,131,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,98,102,107,98,101,95,100],
[103,0,115,126,118,109,111,108,103],
[113,96,0,118,116,99,108,104,113],
[109,85,93,0,94,91,96,86,97],
[104,93,95,117,0,86,94,105,93],
[113,102,112,120,125,0,120,131,109],
[110,100,103,115,117,91,0,102,105],
[116,103,107,125,106,80,109,0,103],
[111,108,98,114,118,102,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,119,100,109,109,108,137],
[103,0,94,116,103,121,102,111,111],
[111,117,0,112,96,93,102,97,97],
[92,95,99,0,97,114,98,110,102],
[111,108,115,114,0,119,92,121,100],
[102,90,118,97,92,0,81,106,112],
[102,109,109,113,119,130,0,82,135],
[103,100,114,101,90,105,129,0,112],
[74,100,114,109,111,99,76,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,108,111,103,107,105,97],
[101,0,98,96,105,106,92,113,103],
[97,113,0,94,98,113,95,111,103],
[103,115,117,0,109,115,99,124,105],
[100,106,113,102,0,116,102,102,107],
[108,105,98,96,95,0,91,110,101],
[104,119,116,112,109,120,0,108,109],
[106,98,100,87,109,101,103,0,100],
[114,108,108,106,104,110,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,124,126,104,116,110,102,114],
[93,0,120,103,94,101,101,100,121],
[87,91,0,112,89,113,82,103,101],
[85,108,99,0,110,105,108,98,106],
[107,117,122,101,0,103,125,113,124],
[95,110,98,106,108,0,101,92,112],
[101,110,129,103,86,110,0,101,102],
[109,111,108,113,98,119,110,0,120],
[97,90,110,105,87,99,109,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,65,52,96,76,97,45,111],
[122,0,124,78,141,128,129,96,146],
[146,87,0,116,130,122,136,140,159],
[159,133,95,0,164,148,164,138,172],
[115,70,81,47,0,84,105,80,115],
[135,83,89,63,127,0,176,123,168],
[114,82,75,47,106,35,0,100,128],
[166,115,71,73,131,88,111,0,150],
[100,65,52,39,96,43,83,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,102,111,115,109,113,92,106],
[83,0,92,98,89,100,105,81,110],
[109,119,0,99,98,102,105,84,115],
[100,113,112,0,103,111,114,112,122],
[96,122,113,108,0,110,110,108,114],
[102,111,109,100,101,0,109,96,103],
[98,106,106,97,101,102,0,88,108],
[119,130,127,99,103,115,123,0,125],
[105,101,96,89,97,108,103,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,112,118,108,116,109,102,115],
[93,0,102,100,98,103,105,105,109],
[99,109,0,122,98,103,106,109,105],
[93,111,89,0,85,88,97,93,98],
[103,113,113,126,0,102,107,112,100],
[95,108,108,123,109,0,111,103,117],
[102,106,105,114,104,100,0,105,101],
[109,106,102,118,99,108,106,0,109],
[96,102,106,113,111,94,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,99,102,100,97,97,111],
[101,0,102,112,102,103,106,104,100],
[111,109,0,117,111,111,103,96,106],
[112,99,94,0,102,95,95,88,103],
[109,109,100,109,0,105,102,93,117],
[111,108,100,116,106,0,102,89,115],
[114,105,108,116,109,109,0,111,111],
[114,107,115,123,118,122,100,0,114],
[100,111,105,108,94,96,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,95,97,111,91,89,97,98],
[121,0,102,107,116,115,111,100,104],
[116,109,0,110,110,110,101,110,99],
[114,104,101,0,121,106,106,104,102],
[100,95,101,90,0,91,90,95,88],
[120,96,101,105,120,0,111,105,96],
[122,100,110,105,121,100,0,110,107],
[114,111,101,107,116,106,101,0,93],
[113,107,112,109,123,115,104,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,119,104,111,97,107,112,118],
[100,0,103,106,114,104,108,97,103],
[92,108,0,112,103,112,109,109,106],
[107,105,99,0,102,100,108,106,109],
[100,97,108,109,0,98,99,108,104],
[114,107,99,111,113,0,106,98,99],
[104,103,102,103,112,105,0,111,104],
[99,114,102,105,103,113,100,0,95],
[93,108,105,102,107,112,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,90,100,105,98,88,104,94],
[121,0,114,103,114,109,107,110,118],
[121,97,0,99,110,102,104,109,105],
[111,108,112,0,102,100,95,104,108],
[106,97,101,109,0,106,107,102,110],
[113,102,109,111,105,0,94,105,104],
[123,104,107,116,104,117,0,111,111],
[107,101,102,107,109,106,100,0,109],
[117,93,106,103,101,107,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,115,110,119,109,145,98,127],
[93,0,103,72,119,83,135,109,95],
[96,108,0,111,113,92,137,102,131],
[101,139,100,0,130,134,149,112,139],
[92,92,98,81,0,62,110,99,49],
[102,128,119,77,149,0,156,117,84],
[66,76,74,62,101,55,0,82,89],
[113,102,109,99,112,94,129,0,114],
[84,116,80,72,162,127,122,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,100,101,106,112,106,106,103],
[116,0,119,105,121,119,113,124,104],
[111,92,0,106,116,123,117,109,108],
[110,106,105,0,109,114,107,101,105],
[105,90,95,102,0,106,106,109,92],
[99,92,88,97,105,0,94,100,101],
[105,98,94,104,105,117,0,104,98],
[105,87,102,110,102,111,107,0,104],
[108,107,103,106,119,110,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,130,119,94,123,127,107,152],
[89,0,105,100,63,103,96,96,116],
[81,106,0,104,94,92,79,99,124],
[92,111,107,0,98,112,110,118,119],
[117,148,117,113,0,116,99,109,103],
[88,108,119,99,95,0,118,111,108],
[84,115,132,101,112,93,0,124,112],
[104,115,112,93,102,100,87,0,125],
[59,95,87,92,108,103,99,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,100,108,108,101,104,117],
[104,0,98,106,101,91,104,104,105],
[100,113,0,96,101,95,117,109,117],
[111,105,115,0,115,106,122,112,124],
[103,110,110,96,0,89,96,91,120],
[103,120,116,105,122,0,111,112,123],
[110,107,94,89,115,100,0,97,104],
[107,107,102,99,120,99,114,0,124],
[94,106,94,87,91,88,107,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,105,114,96,113,117,110],
[113,0,112,114,102,104,104,112,96],
[109,99,0,108,117,111,107,109,96],
[106,97,103,0,103,111,106,105,102],
[97,109,94,108,0,109,110,102,117],
[115,107,100,100,102,0,111,111,97],
[98,107,104,105,101,100,0,114,113],
[94,99,102,106,109,100,97,0,102],
[101,115,115,109,94,114,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,79,94,90,106,97,99,98],
[80,0,84,89,101,100,113,87,98],
[132,127,0,111,105,145,114,119,120],
[117,122,100,0,99,102,117,100,104],
[121,110,106,112,0,121,103,99,125],
[105,111,66,109,90,0,96,103,70],
[114,98,97,94,108,115,0,87,121],
[112,124,92,111,112,108,124,0,121],
[113,113,91,107,86,141,90,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,141,109,104,118,107,122,110],
[94,0,108,123,89,105,98,97,105],
[70,103,0,108,90,90,98,80,106],
[102,88,103,0,97,95,97,82,120],
[107,122,121,114,0,118,119,93,115],
[93,106,121,116,93,0,107,107,114],
[104,113,113,114,92,104,0,102,127],
[89,114,131,129,118,104,109,0,116],
[101,106,105,91,96,97,84,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,98,110,99,103,103,100],
[110,0,111,111,112,109,119,106,102],
[110,100,0,102,114,117,120,114,105],
[113,100,109,0,110,110,117,108,112],
[101,99,97,101,0,103,109,100,94],
[112,102,94,101,108,0,114,102,109],
[108,92,91,94,102,97,0,106,97],
[108,105,97,103,111,109,105,0,99],
[111,109,106,99,117,102,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,115,117,110,107,113,108,117],
[113,0,102,112,121,94,103,114,118],
[96,109,0,121,115,96,105,107,121],
[94,99,90,0,102,84,108,103,98],
[101,90,96,109,0,90,108,93,106],
[104,117,115,127,121,0,110,122,111],
[98,108,106,103,103,101,0,98,102],
[103,97,104,108,118,89,113,0,119],
[94,93,90,113,105,100,109,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,124,91,109,138,118,117,137],
[81,0,85,86,127,114,86,77,82],
[87,126,0,70,105,113,112,87,97],
[120,125,141,0,113,149,110,110,100],
[102,84,106,98,0,104,75,82,90],
[73,97,98,62,107,0,102,112,97],
[93,125,99,101,136,109,0,114,147],
[94,134,124,101,129,99,97,0,122],
[74,129,114,111,121,114,64,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,105,122,97,98,144,120],
[108,0,110,108,110,109,96,120,111],
[108,101,0,106,135,123,119,151,132],
[106,103,105,0,102,122,110,143,106],
[89,101,76,109,0,98,77,113,89],
[114,102,88,89,113,0,83,128,110],
[113,115,92,101,134,128,0,127,130],
[67,91,60,68,98,83,84,0,79],
[91,100,79,105,122,101,81,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,106,106,113,109,111,119],
[106,0,102,101,102,107,103,106,111],
[102,109,0,118,107,114,110,115,118],
[105,110,93,0,97,109,96,105,113],
[105,109,104,114,0,125,102,114,113],
[98,104,97,102,86,0,94,100,100],
[102,108,101,115,109,117,0,115,125],
[100,105,96,106,97,111,96,0,111],
[92,100,93,98,98,111,86,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,117,132,118,121,108,113],
[110,0,113,118,119,98,119,100,112],
[103,98,0,121,120,117,108,115,117],
[94,93,90,0,100,109,101,96,102],
[79,92,91,111,0,90,97,88,110],
[93,113,94,102,121,0,96,97,88],
[90,92,103,110,114,115,0,115,101],
[103,111,96,115,123,114,96,0,121],
[98,99,94,109,101,123,110,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,104,106,105,106,108,114],
[98,0,100,93,94,98,106,97,99],
[95,111,0,93,86,92,89,95,94],
[107,118,118,0,95,110,109,107,116],
[105,117,125,116,0,113,107,109,112],
[106,113,119,101,98,0,109,106,116],
[105,105,122,102,104,102,0,101,118],
[103,114,116,104,102,105,110,0,110],
[97,112,117,95,99,95,93,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,102,107,99,98,102,98],
[100,0,100,100,84,97,92,99,89],
[104,111,0,109,103,95,101,102,99],
[109,111,102,0,121,113,112,110,97],
[104,127,108,90,0,108,103,111,98],
[112,114,116,98,103,0,109,105,102],
[113,119,110,99,108,102,0,104,109],
[109,112,109,101,100,106,107,0,104],
[113,122,112,114,113,109,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,106,127,112,111,110,124,99],
[89,0,97,108,84,96,103,93,97],
[105,114,0,112,102,106,114,119,103],
[84,103,99,0,104,104,115,96,93],
[99,127,109,107,0,109,114,111,106],
[100,115,105,107,102,0,101,96,90],
[101,108,97,96,97,110,0,102,84],
[87,118,92,115,100,115,109,0,103],
[112,114,108,118,105,121,127,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,115,124,104,104,112,124,123],
[76,0,97,98,81,82,84,94,87],
[96,114,0,109,106,107,119,112,121],
[87,113,102,0,88,88,98,96,110],
[107,130,105,123,0,92,107,126,104],
[107,129,104,123,119,0,105,123,118],
[99,127,92,113,104,106,0,102,104],
[87,117,99,115,85,88,109,0,101],
[88,124,90,101,107,93,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,123,113,98,103,100,103],
[109,0,104,117,87,107,98,99,119],
[104,107,0,114,103,104,112,104,116],
[88,94,97,0,87,80,94,90,99],
[98,124,108,124,0,110,111,109,125],
[113,104,107,131,101,0,115,112,122],
[108,113,99,117,100,96,0,107,125],
[111,112,107,121,102,99,104,0,111],
[108,92,95,112,86,89,86,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,78,155,103,122,134,127,98],
[106,0,105,137,108,116,134,106,111],
[133,106,0,164,131,113,128,105,92],
[56,74,47,0,96,109,103,70,84],
[108,103,80,115,0,92,81,106,74],
[89,95,98,102,119,0,120,88,86],
[77,77,83,108,130,91,0,78,69],
[84,105,106,141,105,123,133,0,78],
[113,100,119,127,137,125,142,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,118,104,111,106,113,113,102],
[93,0,111,93,98,107,110,102,103],
[93,100,0,98,102,106,100,110,98],
[107,118,113,0,105,109,112,108,105],
[100,113,109,106,0,111,108,105,109],
[105,104,105,102,100,0,105,100,101],
[98,101,111,99,103,106,0,108,98],
[98,109,101,103,106,111,103,0,99],
[109,108,113,106,102,110,113,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,121,111,110,99,111,102,102],
[109,0,112,104,101,99,104,102,97],
[90,99,0,111,104,101,98,109,101],
[100,107,100,0,97,90,103,96,92],
[101,110,107,114,0,97,102,107,105],
[112,112,110,121,114,0,114,111,102],
[100,107,113,108,109,97,0,103,109],
[109,109,102,115,104,100,108,0,96],
[109,114,110,119,106,109,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,94,94,104,115,103,102,101],
[109,0,103,104,97,108,107,102,99],
[117,108,0,111,113,114,113,102,110],
[117,107,100,0,105,114,113,114,112],
[107,114,98,106,0,104,112,102,106],
[96,103,97,97,107,0,105,102,93],
[108,104,98,98,99,106,0,96,109],
[109,109,109,97,109,109,115,0,113],
[110,112,101,99,105,118,102,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,86,95,103,103,85,88],
[115,0,117,104,86,97,88,87,103],
[108,94,0,105,79,92,92,84,97],
[125,107,106,0,88,113,103,92,112],
[116,125,132,123,0,114,98,109,101],
[108,114,119,98,97,0,110,87,114],
[108,123,119,108,113,101,0,94,119],
[126,124,127,119,102,124,117,0,107],
[123,108,114,99,110,97,92,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,116,125,153,104,146,117,111],
[50,0,42,66,65,54,86,60,69],
[95,169,0,134,124,97,145,118,114],
[86,145,77,0,102,101,136,107,104],
[58,146,87,109,0,58,105,97,43],
[107,157,114,110,153,0,138,85,72],
[65,125,66,75,106,73,0,96,92],
[94,151,93,104,114,126,115,0,84],
[100,142,97,107,168,139,119,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,117,99,105,106,103,115],
[114,0,122,119,103,117,92,115,115],
[105,89,0,106,90,105,92,102,108],
[94,92,105,0,87,97,87,104,112],
[112,108,121,124,0,99,102,118,110],
[106,94,106,114,112,0,89,110,105],
[105,119,119,124,109,122,0,124,118],
[108,96,109,107,93,101,87,0,99],
[96,96,103,99,101,106,93,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,118,92,149,131,91,68,113],
[122,0,105,142,98,151,102,131,114],
[93,106,0,95,101,131,137,116,96],
[119,69,116,0,76,133,109,93,114],
[62,113,110,135,0,132,113,70,86],
[80,60,80,78,79,0,96,48,48],
[120,109,74,102,98,115,0,74,83],
[143,80,95,118,141,163,137,0,60],
[98,97,115,97,125,163,128,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,124,113,113,103,105,109,116],
[107,0,114,112,110,112,111,103,105],
[87,97,0,112,79,84,102,96,90],
[98,99,99,0,90,93,89,91,100],
[98,101,132,121,0,104,116,115,104],
[108,99,127,118,107,0,118,124,109],
[106,100,109,122,95,93,0,99,102],
[102,108,115,120,96,87,112,0,100],
[95,106,121,111,107,102,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,95,104,105,90,103,106,90],
[108,0,84,99,99,84,92,103,91],
[116,127,0,114,123,108,116,123,102],
[107,112,97,0,109,105,102,108,108],
[106,112,88,102,0,96,100,112,96],
[121,127,103,106,115,0,101,112,101],
[108,119,95,109,111,110,0,112,99],
[105,108,88,103,99,99,99,0,94],
[121,120,109,103,115,110,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,96,109,110,78,112,123,102],
[90,0,85,144,98,68,72,61,113],
[115,126,0,167,122,115,140,122,105],
[102,67,44,0,69,34,44,56,36],
[101,113,89,142,0,90,113,107,112],
[133,143,96,177,121,0,91,81,137],
[99,139,71,167,98,120,0,97,105],
[88,150,89,155,104,130,114,0,111],
[109,98,106,175,99,74,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,102,105,103,105,107,108],
[109,0,113,105,107,105,104,101,104],
[111,98,0,108,108,107,108,99,105],
[109,106,103,0,105,104,105,95,103],
[106,104,103,106,0,102,104,94,109],
[108,106,104,107,109,0,104,114,108],
[106,107,103,106,107,107,0,105,110],
[104,110,112,116,117,97,106,0,114],
[103,107,106,108,102,103,101,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,120,120,120,98,119,114,104],
[90,0,112,99,112,78,121,104,99],
[91,99,0,105,107,90,113,102,105],
[91,112,106,0,104,104,119,112,109],
[91,99,104,107,0,97,109,108,96],
[113,133,121,107,114,0,137,105,115],
[92,90,98,92,102,74,0,98,88],
[97,107,109,99,103,106,113,0,88],
[107,112,106,102,115,96,123,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,113,117,119,106,103,111,112],
[96,0,116,113,117,106,109,112,103],
[98,95,0,103,107,102,107,101,108],
[94,98,108,0,109,99,101,100,95],
[92,94,104,102,0,93,97,104,90],
[105,105,109,112,118,0,95,111,104],
[108,102,104,110,114,116,0,106,102],
[100,99,110,111,107,100,105,0,97],
[99,108,103,116,121,107,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,115,104,118,107,117,90,108],
[88,0,96,98,104,92,113,103,107],
[96,115,0,107,108,94,118,99,99],
[107,113,104,0,112,100,129,99,111],
[93,107,103,99,0,103,106,106,99],
[104,119,117,111,108,0,122,104,104],
[94,98,93,82,105,89,0,86,87],
[121,108,112,112,105,107,125,0,111],
[103,104,112,100,112,107,124,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,112,100,94,100,111,97,98],
[87,0,95,93,86,94,104,89,104],
[99,116,0,98,102,101,120,102,99],
[111,118,113,0,109,104,114,98,99],
[117,125,109,102,0,102,127,104,119],
[111,117,110,107,109,0,122,96,113],
[100,107,91,97,84,89,0,91,92],
[114,122,109,113,107,115,120,0,98],
[113,107,112,112,92,98,119,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,110,94,104,128,114,121,102],
[90,0,104,94,88,114,118,113,100],
[101,107,0,97,87,116,115,118,108],
[117,117,114,0,105,122,128,119,101],
[107,123,124,106,0,128,124,108,83],
[83,97,95,89,83,0,117,116,85],
[97,93,96,83,87,94,0,99,90],
[90,98,93,92,103,95,112,0,95],
[109,111,103,110,128,126,121,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,110,97,85,102,108,118],
[104,0,138,111,115,115,110,127,130],
[103,73,0,90,101,97,78,102,97],
[101,100,121,0,104,105,104,102,116],
[114,96,110,107,0,96,107,104,104],
[126,96,114,106,115,0,101,112,100],
[109,101,133,107,104,110,0,106,103],
[103,84,109,109,107,99,105,0,104],
[93,81,114,95,107,111,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,92,96,91,97,94,105],
[106,0,113,124,104,81,129,105,120],
[100,98,0,102,78,106,93,89,97],
[119,87,109,0,93,96,119,109,113],
[115,107,133,118,0,97,117,126,115],
[120,130,105,115,114,0,123,121,108],
[114,82,118,92,94,88,0,113,101],
[117,106,122,102,85,90,98,0,96],
[106,91,114,98,96,103,110,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,89,112,103,111,104,92],
[106,0,108,96,108,104,103,110,104],
[103,103,0,100,105,98,117,107,100],
[122,115,111,0,122,104,110,116,115],
[99,103,106,89,0,103,108,104,98],
[108,107,113,107,108,0,106,121,97],
[100,108,94,101,103,105,0,106,100],
[107,101,104,95,107,90,105,0,94],
[119,107,111,96,113,114,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,102,88,92,82,90,98],
[108,0,102,87,96,85,97,87,92],
[109,109,0,84,91,101,107,75,80],
[109,124,127,0,116,107,125,116,104],
[123,115,120,95,0,91,106,104,93],
[119,126,110,104,120,0,120,104,109],
[129,114,104,86,105,91,0,90,93],
[121,124,136,95,107,107,121,0,93],
[113,119,131,107,118,102,118,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,100,93,110,104,96,93,96],
[122,0,103,112,117,97,94,88,88],
[111,108,0,110,116,106,87,93,73],
[118,99,101,0,111,109,95,88,83],
[101,94,95,100,0,95,88,81,83],
[107,114,105,102,116,0,94,109,81],
[115,117,124,116,123,117,0,102,108],
[118,123,118,123,130,102,109,0,116],
[115,123,138,128,128,130,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,89,92,115,119,101,80,108],
[101,0,84,94,101,106,109,74,99],
[122,127,0,111,126,114,128,103,117],
[119,117,100,0,103,94,103,100,105],
[96,110,85,108,0,125,105,106,113],
[92,105,97,117,86,0,117,96,100],
[110,102,83,108,106,94,0,84,118],
[131,137,108,111,105,115,127,0,104],
[103,112,94,106,98,111,93,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,97,77,94,94,103,111,100],
[124,0,125,92,119,148,148,122,134],
[114,86,0,115,104,121,103,105,75],
[134,119,96,0,101,143,112,124,110],
[117,92,107,110,0,130,147,112,116],
[117,63,90,68,81,0,71,96,115],
[108,63,108,99,64,140,0,104,100],
[100,89,106,87,99,115,107,0,115],
[111,77,136,101,95,96,111,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,102,123,112,122,105,124,118],
[94,0,100,107,93,109,96,105,92],
[109,111,0,124,103,110,96,119,110],
[88,104,87,0,96,111,103,105,97],
[99,118,108,115,0,122,92,116,107],
[89,102,101,100,89,0,93,105,103],
[106,115,115,108,119,118,0,115,97],
[87,106,92,106,95,106,96,0,96],
[93,119,101,114,104,108,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,90,83,112,105,63,99,102],
[77,0,78,90,56,87,75,96,109],
[121,133,0,104,127,120,75,125,129],
[128,121,107,0,105,92,86,124,117],
[99,155,84,106,0,109,108,128,118],
[106,124,91,119,102,0,76,123,109],
[148,136,136,125,103,135,0,138,156],
[112,115,86,87,83,88,73,0,119],
[109,102,82,94,93,102,55,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,106,86,74,92,106,98,115],
[124,0,126,105,91,103,89,116,99],
[105,85,0,75,98,93,72,109,105],
[125,106,136,0,109,104,136,137,132],
[137,120,113,102,0,120,110,128,139],
[119,108,118,107,91,0,103,95,144],
[105,122,139,75,101,108,0,120,118],
[113,95,102,74,83,116,91,0,106],
[96,112,106,79,72,67,93,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,91,103,106,132,110,109,100],
[101,0,102,111,122,123,122,124,114],
[120,109,0,129,111,142,112,101,87],
[108,100,82,0,105,134,88,99,88],
[105,89,100,106,0,116,91,98,85],
[79,88,69,77,95,0,81,97,91],
[101,89,99,123,120,130,0,115,103],
[102,87,110,112,113,114,96,0,105],
[111,97,124,123,126,120,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,107,100,114,127,115,98],
[100,0,108,117,101,107,108,122,97],
[96,103,0,103,81,101,91,115,107],
[104,94,108,0,109,109,122,116,113],
[111,110,130,102,0,116,118,122,112],
[97,104,110,102,95,0,113,111,96],
[84,103,120,89,93,98,0,117,106],
[96,89,96,95,89,100,94,0,96],
[113,114,104,98,99,115,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,92,102,125,94,110,126,110],
[96,0,92,110,111,101,114,119,122],
[119,119,0,101,115,110,110,111,126],
[109,101,110,0,129,101,104,121,123],
[86,100,96,82,0,83,98,93,95],
[117,110,101,110,128,0,121,121,120],
[101,97,101,107,113,90,0,95,118],
[85,92,100,90,118,90,116,0,111],
[101,89,85,88,116,91,93,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,124,105,82,107,76,95,127],
[123,0,134,101,89,105,92,97,135],
[87,77,0,82,66,96,63,80,95],
[106,110,129,0,89,101,77,95,112],
[129,122,145,122,0,105,106,111,131],
[104,106,115,110,106,0,89,109,126],
[135,119,148,134,105,122,0,122,135],
[116,114,131,116,100,102,89,0,110],
[84,76,116,99,80,85,76,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,114,101,109,112,108,97,102],
[106,0,103,93,109,110,109,102,108],
[97,108,0,97,98,106,107,100,102],
[110,118,114,0,109,118,100,101,115],
[102,102,113,102,0,103,96,97,105],
[99,101,105,93,108,0,110,106,111],
[103,102,104,111,115,101,0,104,104],
[114,109,111,110,114,105,107,0,109],
[109,103,109,96,106,100,107,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,91,88,93,97,114,109,100],
[111,0,101,102,86,107,106,109,102],
[120,110,0,111,101,109,106,104,112],
[123,109,100,0,109,109,111,109,117],
[118,125,110,102,0,121,117,120,116],
[114,104,102,102,90,0,112,106,105],
[97,105,105,100,94,99,0,108,100],
[102,102,107,102,91,105,103,0,104],
[111,109,99,94,95,106,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,90,104,95,87,83,99,86],
[113,0,98,101,99,99,88,109,88],
[121,113,0,109,104,96,94,117,101],
[107,110,102,0,108,109,93,106,96],
[116,112,107,103,0,103,101,112,103],
[124,112,115,102,108,0,114,113,106],
[128,123,117,118,110,97,0,119,104],
[112,102,94,105,99,98,92,0,92],
[125,123,110,115,108,105,107,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,108,76,84,77,96,85,86],
[123,0,130,122,122,98,127,129,118],
[103,81,0,86,91,92,113,89,89],
[135,89,125,0,111,104,123,112,109],
[127,89,120,100,0,96,115,101,105],
[134,113,119,107,115,0,124,100,112],
[115,84,98,88,96,87,0,101,89],
[126,82,122,99,110,111,110,0,107],
[125,93,122,102,106,99,122,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,108,120,105,107,107,102],
[96,0,92,94,120,109,105,99,95],
[105,119,0,108,117,105,110,104,108],
[103,117,103,0,119,109,111,101,106],
[91,91,94,92,0,93,95,96,89],
[106,102,106,102,118,0,102,105,98],
[104,106,101,100,116,109,0,104,99],
[104,112,107,110,115,106,107,0,104],
[109,116,103,105,122,113,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,110,114,107,104,105,109],
[103,0,110,103,111,109,108,104,107],
[98,101,0,104,97,84,101,113,93],
[101,108,107,0,105,108,93,114,107],
[97,100,114,106,0,108,106,113,112],
[104,102,127,103,103,0,102,111,116],
[107,103,110,118,105,109,0,124,115],
[106,107,98,97,98,100,87,0,102],
[102,104,118,104,99,95,96,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,104,105,132,91,112,104,119],
[91,0,102,98,121,93,111,110,116],
[107,109,0,113,131,108,98,120,119],
[106,113,98,0,114,113,117,113,106],
[79,90,80,97,0,105,94,90,108],
[120,118,103,98,106,0,105,122,101],
[99,100,113,94,117,106,0,120,102],
[107,101,91,98,121,89,91,0,98],
[92,95,92,105,103,110,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,106,121,101,100,107,113],
[102,0,101,117,129,108,109,125,120],
[110,110,0,125,121,102,114,133,123],
[105,94,86,0,112,84,83,117,102],
[90,82,90,99,0,73,79,112,109],
[110,103,109,127,138,0,98,121,125],
[111,102,97,128,132,113,0,123,120],
[104,86,78,94,99,90,88,0,104],
[98,91,88,109,102,86,91,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,118,127,97,107,104,107,115],
[95,0,115,119,82,85,86,109,107],
[93,96,0,106,83,72,61,82,90],
[84,92,105,0,77,73,78,117,100],
[114,129,128,134,0,120,85,110,124],
[104,126,139,138,91,0,106,115,111],
[107,125,150,133,126,105,0,115,113],
[104,102,129,94,101,96,96,0,96],
[96,104,121,111,87,100,98,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,104,105,104,107,93,98],
[109,0,110,112,101,98,107,115,102],
[112,101,0,109,102,101,104,98,98],
[107,99,102,0,101,101,108,87,103],
[106,110,109,110,0,109,113,102,107],
[107,113,110,110,102,0,112,102,110],
[104,104,107,103,98,99,0,95,98],
[118,96,113,124,109,109,116,0,109],
[113,109,113,108,104,101,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,111,113,102,113,116,108],
[113,0,118,113,113,97,119,114,120],
[98,93,0,105,97,94,104,110,104],
[100,98,106,0,102,93,97,119,107],
[98,98,114,109,0,106,110,108,114],
[109,114,117,118,105,0,116,131,111],
[98,92,107,114,101,95,0,108,98],
[95,97,101,92,103,80,103,0,109],
[103,91,107,104,97,100,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,110,117,110,116,105,115],
[100,0,101,103,100,117,105,95,115],
[105,110,0,109,114,112,115,114,109],
[101,108,102,0,109,110,104,107,107],
[94,111,97,102,0,105,107,104,109],
[101,94,99,101,106,0,104,95,105],
[95,106,96,107,104,107,0,108,111],
[106,116,97,104,107,116,103,0,108],
[96,96,102,104,102,106,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,69,61,78,95,84,88,68],
[136,0,92,93,107,85,136,108,69],
[142,119,0,90,102,115,105,98,90],
[150,118,121,0,127,125,139,113,99],
[133,104,109,84,0,107,94,92,95],
[116,126,96,86,104,0,102,103,110],
[127,75,106,72,117,109,0,96,83],
[123,103,113,98,119,108,115,0,97],
[143,142,121,112,116,101,128,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,104,116,120,111,113,108,115],
[96,0,96,112,121,107,97,111,102],
[107,115,0,114,120,118,109,114,103],
[95,99,97,0,118,99,99,109,102],
[91,90,91,93,0,99,96,102,99],
[100,104,93,112,112,0,104,99,105],
[98,114,102,112,115,107,0,106,116],
[103,100,97,102,109,112,105,0,109],
[96,109,108,109,112,106,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,111,97,102,112,108,101],
[100,0,106,102,90,91,101,91,94],
[103,105,0,105,112,106,108,106,107],
[100,109,106,0,106,101,105,106,100],
[114,121,99,105,0,101,106,104,104],
[109,120,105,110,110,0,116,117,113],
[99,110,103,106,105,95,0,103,101],
[103,120,105,105,107,94,108,0,101],
[110,117,104,111,107,98,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,108,117,104,96,109,127],
[96,0,105,84,106,106,98,103,122],
[105,106,0,99,105,108,109,99,117],
[103,127,112,0,130,117,100,105,122],
[94,105,106,81,0,84,101,93,113],
[107,105,103,94,127,0,106,92,113],
[115,113,102,111,110,105,0,101,122],
[102,108,112,106,118,119,110,0,116],
[84,89,94,89,98,98,89,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,84,122,134,133,120,86,106],
[82,0,106,106,104,98,132,106,104],
[127,105,0,115,144,128,128,103,106],
[89,105,96,0,92,107,120,92,85],
[77,107,67,119,0,133,130,69,58],
[78,113,83,104,78,0,131,63,62],
[91,79,83,91,81,80,0,59,64],
[125,105,108,119,142,148,152,0,89],
[105,107,105,126,153,149,147,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,105,109,113,111,113,117,114],
[116,0,112,112,119,102,108,125,114],
[106,99,0,106,114,98,107,110,109],
[102,99,105,0,99,95,102,103,114],
[98,92,97,112,0,98,99,100,105],
[100,109,113,116,113,0,104,117,112],
[98,103,104,109,112,107,0,111,113],
[94,86,101,108,111,94,100,0,101],
[97,97,102,97,106,99,98,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,96,105,98,105,102,107,101],
[113,0,96,103,105,108,107,107,103],
[115,115,0,109,102,108,107,116,105],
[106,108,102,0,106,110,113,120,96],
[113,106,109,105,0,116,111,114,103],
[106,103,103,101,95,0,102,110,100],
[109,104,104,98,100,109,0,111,107],
[104,104,95,91,97,101,100,0,101],
[110,108,106,115,108,111,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,109,99,107,104,95,108],
[107,0,100,91,97,100,100,99,104],
[108,111,0,104,98,113,101,110,107],
[102,120,107,0,112,115,108,98,109],
[112,114,113,99,0,105,111,104,106],
[104,111,98,96,106,0,110,106,107],
[107,111,110,103,100,101,0,89,107],
[116,112,101,113,107,105,122,0,113],
[103,107,104,102,105,104,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,116,118,106,105,100,112,100],
[97,0,103,104,95,102,95,106,96],
[95,108,0,99,87,93,95,108,96],
[93,107,112,0,100,97,92,108,98],
[105,116,124,111,0,100,108,116,105],
[106,109,118,114,111,0,102,107,112],
[111,116,116,119,103,109,0,110,99],
[99,105,103,103,95,104,101,0,99],
[111,115,115,113,106,99,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,94,104,101,97,93,106,105],
[113,0,104,95,98,107,99,115,115],
[117,107,0,102,108,108,104,106,117],
[107,116,109,0,106,94,110,113,112],
[110,113,103,105,0,107,108,115,117],
[114,104,103,117,104,0,114,115,114],
[118,112,107,101,103,97,0,114,110],
[105,96,105,98,96,96,97,0,104],
[106,96,94,99,94,97,101,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,88,78,115,110,68,76,79],
[139,0,127,99,110,119,98,82,69],
[123,84,0,102,137,119,118,114,98],
[133,112,109,0,150,105,110,103,119],
[96,101,74,61,0,78,79,72,78],
[101,92,92,106,133,0,107,80,76],
[143,113,93,101,132,104,0,88,63],
[135,129,97,108,139,131,123,0,71],
[132,142,113,92,133,135,148,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,141,121,144,137,115,128,115],
[116,0,124,119,114,128,124,115,105],
[70,87,0,104,98,123,102,104,105],
[90,92,107,0,111,108,104,123,118],
[67,97,113,100,0,119,92,116,105],
[74,83,88,103,92,0,106,103,118],
[96,87,109,107,119,105,0,100,105],
[83,96,107,88,95,108,111,0,109],
[96,106,106,93,106,93,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,105,113,91,73,98,148,100],
[125,0,109,64,145,120,87,122,78],
[106,102,0,119,95,83,147,78,82],
[98,147,92,0,120,79,111,119,109],
[120,66,116,91,0,93,134,132,95],
[138,91,128,132,118,0,124,173,101],
[113,124,64,100,77,87,0,103,99],
[63,89,133,92,79,38,108,0,104],
[111,133,129,102,116,110,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,93,109,116,112,115,114,95],
[103,0,112,112,118,109,103,103,95],
[118,99,0,115,122,120,108,95,110],
[102,99,96,0,113,112,114,88,102],
[95,93,89,98,0,109,98,92,77],
[99,102,91,99,102,0,103,79,106],
[96,108,103,97,113,108,0,104,107],
[97,108,116,123,119,132,107,0,106],
[116,116,101,109,134,105,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,113,123,109,115,112,102],
[99,0,90,96,112,94,102,102,104],
[110,121,0,109,110,112,105,114,117],
[98,115,102,0,121,106,111,109,115],
[88,99,101,90,0,85,102,98,93],
[102,117,99,105,126,0,107,114,112],
[96,109,106,100,109,104,0,103,97],
[99,109,97,102,113,97,108,0,99],
[109,107,94,96,118,99,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,115,115,135,78,115,113,115],
[137,0,101,100,96,64,84,101,116],
[96,110,0,20,114,59,80,80,110],
[96,111,191,0,96,115,95,117,90],
[76,115,97,115,0,78,78,134,57],
[133,147,152,96,133,0,152,134,149],
[96,127,131,116,133,59,0,133,149],
[98,110,131,94,77,77,78,0,112],
[96,95,101,121,154,62,62,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,108,123,111,121,95,104],
[102,0,107,97,122,99,114,113,107],
[94,104,0,97,109,101,106,112,83],
[103,114,114,0,121,115,119,92,97],
[88,89,102,90,0,98,101,93,84],
[100,112,110,96,113,0,106,93,90],
[90,97,105,92,110,105,0,102,96],
[116,98,99,119,118,118,109,0,94],
[107,104,128,114,127,121,115,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,92,103,114,97,92,93,98],
[103,0,99,103,100,102,95,102,104],
[119,112,0,112,112,104,99,103,97],
[108,108,99,0,108,103,100,97,94],
[97,111,99,103,0,107,94,95,99],
[114,109,107,108,104,0,106,106,100],
[119,116,112,111,117,105,0,108,98],
[118,109,108,114,116,105,103,0,110],
[113,107,114,117,112,111,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,164,143,93,88,101,121,141],
[79,0,113,87,70,114,59,118,82],
[47,98,0,68,33,69,25,101,96],
[68,124,143,0,78,67,53,89,104],
[118,141,178,133,0,116,94,116,120],
[123,97,142,144,95,0,113,144,122],
[110,152,186,158,117,98,0,154,135],
[90,93,110,122,95,67,57,0,94],
[70,129,115,107,91,89,76,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,115,117,110,105,108,111,109],
[103,0,105,104,111,107,108,103,104],
[96,106,0,107,117,90,99,99,104],
[94,107,104,0,108,94,113,93,102],
[101,100,94,103,0,96,94,98,104],
[106,104,121,117,115,0,118,99,113],
[103,103,112,98,117,93,0,109,112],
[100,108,112,118,113,112,102,0,114],
[102,107,107,109,107,98,99,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,92,79,91,68,104,90,95],
[127,0,119,104,106,94,109,119,113],
[119,92,0,105,109,94,121,110,102],
[132,107,106,0,130,76,113,113,119],
[120,105,102,81,0,87,110,116,92],
[143,117,117,135,124,0,121,104,136],
[107,102,90,98,101,90,0,103,93],
[121,92,101,98,95,107,108,0,124],
[116,98,109,92,119,75,118,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,108,106,124,103,92,92],
[104,0,109,118,95,127,120,108,116],
[103,102,0,104,84,122,106,85,96],
[103,93,107,0,100,108,109,84,96],
[105,116,127,111,0,112,118,103,105],
[87,84,89,103,99,0,110,98,92],
[108,91,105,102,93,101,0,86,80],
[119,103,126,127,108,113,125,0,122],
[119,95,115,115,106,119,131,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,109,96,101,116,98,94],
[108,0,104,120,105,120,119,120,109],
[118,107,0,113,104,116,117,101,113],
[102,91,98,0,94,103,95,101,94],
[115,106,107,117,0,103,100,110,104],
[110,91,95,108,108,0,106,102,97],
[95,92,94,116,111,105,0,104,100],
[113,91,110,110,101,109,107,0,94],
[117,102,98,117,107,114,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,111,105,115,108,117,108],
[103,0,96,111,104,110,104,114,103],
[101,115,0,116,113,113,106,116,110],
[100,100,95,0,100,111,95,116,105],
[106,107,98,111,0,117,107,114,111],
[96,101,98,100,94,0,97,108,100],
[103,107,105,116,104,114,0,113,118],
[94,97,95,95,97,103,98,0,98],
[103,108,101,106,100,111,93,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,101,125,111,104,84,87,100],
[90,0,87,110,86,116,77,79,93],
[110,124,0,112,88,104,102,113,112],
[86,101,99,0,91,101,84,81,90],
[100,125,123,120,0,109,104,92,113],
[107,95,107,110,102,0,94,82,103],
[127,134,109,127,107,117,0,99,96],
[124,132,98,130,119,129,112,0,117],
[111,118,99,121,98,108,115,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,93,108,106,105,112,79,87],
[114,0,102,92,103,93,90,97,85],
[118,109,0,132,125,102,98,102,101],
[103,119,79,0,94,93,97,84,97],
[105,108,86,117,0,114,115,80,95],
[106,118,109,118,97,0,110,88,93],
[99,121,113,114,96,101,0,107,89],
[132,114,109,127,131,123,104,0,110],
[124,126,110,114,116,118,122,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,112,103,97,121,101,110,120],
[94,0,109,108,99,118,107,99,116],
[99,102,0,102,98,104,109,83,111],
[108,103,109,0,102,125,104,102,138],
[114,112,113,109,0,122,105,103,122],
[90,93,107,86,89,0,83,85,109],
[110,104,102,107,106,128,0,111,120],
[101,112,128,109,108,126,100,0,131],
[91,95,100,73,89,102,91,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,103,96,103,113,107,130],
[109,0,100,98,100,100,101,117,110],
[107,111,0,101,99,101,108,104,117],
[108,113,110,0,107,105,122,128,144],
[115,111,112,104,0,110,116,116,125],
[108,111,110,106,101,0,125,131,121],
[98,110,103,89,95,86,0,107,114],
[104,94,107,83,95,80,104,0,107],
[81,101,94,67,86,90,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,106,91,69,55,144,72,104],
[119,0,106,95,107,49,180,111,95],
[105,105,0,119,39,35,180,88,97],
[120,116,92,0,68,29,153,60,109],
[142,104,172,143,0,78,180,118,141],
[156,162,176,182,133,0,206,101,145],
[67,31,31,58,31,5,0,43,79],
[139,100,123,151,93,110,168,0,124],
[107,116,114,102,70,66,132,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,105,93,100,86,97,89],
[116,0,106,97,109,104,112,111,95],
[102,105,0,94,98,86,97,111,95],
[106,114,117,0,92,106,106,116,111],
[118,102,113,119,0,102,105,102,96],
[111,107,125,105,109,0,110,119,103],
[125,99,114,105,106,101,0,108,99],
[114,100,100,95,109,92,103,0,97],
[122,116,116,100,115,108,112,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,109,98,96,112,108,108],
[100,0,109,104,103,96,107,100,95],
[97,102,0,104,82,87,110,92,92],
[102,107,107,0,109,92,109,102,100],
[113,108,129,102,0,115,118,118,108],
[115,115,124,119,96,0,113,117,105],
[99,104,101,102,93,98,0,111,98],
[103,111,119,109,93,94,100,0,104],
[103,116,119,111,103,106,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,49,56,7,7,49,121,76,0],
[162,0,83,63,79,112,135,132,7],
[155,128,0,128,128,56,128,76,128],
[204,148,83,0,128,132,204,132,121],
[204,132,83,83,0,132,204,132,56],
[162,99,155,79,79,0,135,204,79],
[90,76,83,7,7,76,0,76,7],
[135,79,135,79,79,7,135,0,79],
[211,204,83,90,155,132,204,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,90,102,93,89,102,87,114],
[110,0,96,101,94,104,100,99,127],
[121,115,0,124,102,109,112,104,121],
[109,110,87,0,98,92,91,89,119],
[118,117,109,113,0,99,99,110,119],
[122,107,102,119,112,0,101,114,126],
[109,111,99,120,112,110,0,107,129],
[124,112,107,122,101,97,104,0,114],
[97,84,90,92,92,85,82,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,116,106,108,109,109,110,96],
[109,0,110,114,104,112,107,105,108],
[95,101,0,106,100,97,103,95,108],
[105,97,105,0,104,98,106,105,106],
[103,107,111,107,0,107,112,100,111],
[102,99,114,113,104,0,109,108,103],
[102,104,108,105,99,102,0,101,105],
[101,106,116,106,111,103,110,0,106],
[115,103,103,105,100,108,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,87,120,108,120,114,114],
[105,0,96,90,113,93,117,114,110],
[106,115,0,111,110,105,122,116,114],
[124,121,100,0,129,126,138,131,133],
[91,98,101,82,0,82,118,104,110],
[103,118,106,85,129,0,123,120,120],
[91,94,89,73,93,88,0,97,114],
[97,97,95,80,107,91,114,0,109],
[97,101,97,78,101,91,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,127,132,111,100,118,125,110],
[85,0,119,117,94,100,119,114,100],
[84,92,0,113,78,95,95,106,102],
[79,94,98,0,85,85,99,112,86],
[100,117,133,126,0,108,126,125,112],
[111,111,116,126,103,0,112,133,109],
[93,92,116,112,85,99,0,110,88],
[86,97,105,99,86,78,101,0,105],
[101,111,109,125,99,102,123,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,124,115,146,100,98,70],
[99,0,102,142,108,143,128,134,88],
[105,109,0,123,128,116,121,120,101],
[87,69,88,0,102,143,100,111,89],
[96,103,83,109,0,118,92,104,84],
[65,68,95,68,93,0,60,62,74],
[111,83,90,111,119,151,0,117,118],
[113,77,91,100,107,149,94,0,96],
[141,123,110,122,127,137,93,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,115,110,117,108,119,103,118],
[89,0,111,96,104,100,115,97,115],
[96,100,0,102,112,100,118,98,114],
[101,115,109,0,112,108,108,104,108],
[94,107,99,99,0,95,114,99,117],
[103,111,111,103,116,0,110,109,113],
[92,96,93,103,97,101,0,103,113],
[108,114,113,107,112,102,108,0,111],
[93,96,97,103,94,98,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,134,106,93,127,82,137,98],
[95,0,145,98,112,143,106,150,121],
[77,66,0,63,76,76,60,81,84],
[105,113,148,0,104,133,116,151,140],
[118,99,135,107,0,102,109,133,104],
[84,68,135,78,109,0,83,98,96],
[129,105,151,95,102,128,0,157,133],
[74,61,130,60,78,113,54,0,110],
[113,90,127,71,107,115,78,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,102,108,110,106,106,103,115],
[123,0,113,105,122,122,115,106,119],
[109,98,0,103,105,109,103,94,108],
[103,106,108,0,110,113,107,99,118],
[101,89,106,101,0,96,98,96,107],
[105,89,102,98,115,0,109,95,115],
[105,96,108,104,113,102,0,95,109],
[108,105,117,112,115,116,116,0,118],
[96,92,103,93,104,96,102,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,113,121,124,103,113,95,109],
[117,0,129,134,131,124,116,108,80],
[98,82,0,135,110,111,105,114,77],
[90,77,76,0,95,114,84,95,66],
[87,80,101,116,0,91,99,87,97],
[108,87,100,97,120,0,122,98,93],
[98,95,106,127,112,89,0,97,89],
[116,103,97,116,124,113,114,0,139],
[102,131,134,145,114,118,122,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,87,100,92,95,92,113],
[112,0,104,98,103,96,109,96,115],
[111,107,0,106,105,98,116,105,109],
[124,113,105,0,96,106,120,108,113],
[111,108,106,115,0,105,109,111,116],
[119,115,113,105,106,0,114,115,124],
[116,102,95,91,102,97,0,89,105],
[119,115,106,103,100,96,122,0,104],
[98,96,102,98,95,87,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,51,128,132,0,49,124,161],
[65,0,70,160,160,23,68,160,144],
[160,141,0,182,167,115,82,154,174],
[83,51,29,0,145,0,96,95,139],
[79,51,44,66,0,0,53,22,82],
[211,188,96,211,211,0,129,162,195],
[162,143,129,115,158,82,0,100,182],
[87,51,57,116,189,49,111,0,156],
[50,67,37,72,129,16,29,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,113,106,114,104,116,119],
[107,0,107,119,104,115,101,117,124],
[111,104,0,117,108,107,95,109,107],
[98,92,94,0,92,94,103,98,88],
[105,107,103,119,0,114,110,103,98],
[97,96,104,117,97,0,99,112,95],
[107,110,116,108,101,112,0,121,108],
[95,94,102,113,108,99,90,0,91],
[92,87,104,123,113,116,103,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,113,95,104,111,106,101],
[113,0,103,115,103,114,113,101,110],
[110,108,0,106,106,106,107,107,105],
[98,96,105,0,99,98,100,99,97],
[116,108,105,112,0,109,112,110,108],
[107,97,105,113,102,0,109,101,94],
[100,98,104,111,99,102,0,94,94],
[105,110,104,112,101,110,117,0,105],
[110,101,106,114,103,117,117,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,97,108,95,130,110,139,105],
[86,0,68,97,78,92,85,89,97],
[114,143,0,100,123,147,119,142,113],
[103,114,111,0,108,123,111,120,114],
[116,133,88,103,0,138,86,116,137],
[81,119,64,88,73,0,68,102,107],
[101,126,92,100,125,143,0,131,118],
[72,122,69,91,95,109,80,0,105],
[106,114,98,97,74,104,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,84,97,105,101,106,109,118],
[97,0,94,88,95,93,99,107,117],
[127,117,0,113,114,100,125,123,124],
[114,123,98,0,116,119,129,119,120],
[106,116,97,95,0,93,109,100,109],
[110,118,111,92,118,0,112,109,121],
[105,112,86,82,102,99,0,94,91],
[102,104,88,92,111,102,117,0,115],
[93,94,87,91,102,90,120,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,104,104,102,115,112,96,105],
[84,0,81,77,89,121,102,82,98],
[107,130,0,109,90,133,113,114,122],
[107,134,102,0,109,127,101,97,109],
[109,122,121,102,0,146,135,105,128],
[96,90,78,84,65,0,93,95,91],
[99,109,98,110,76,118,0,90,116],
[115,129,97,114,106,116,121,0,123],
[106,113,89,102,83,120,95,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,111,88,107,110,98,117],
[103,0,109,118,88,113,97,104,113],
[101,102,0,107,101,105,97,95,104],
[100,93,104,0,90,99,98,85,97],
[123,123,110,121,0,102,106,90,111],
[104,98,106,112,109,0,106,108,108],
[101,114,114,113,105,105,0,93,103],
[113,107,116,126,121,103,118,0,120],
[94,98,107,114,100,103,108,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,90,76,107,105,85,98,83],
[130,0,101,107,129,120,108,106,97],
[121,110,0,79,124,108,88,100,97],
[135,104,132,0,144,120,115,116,111],
[104,82,87,67,0,106,82,91,92],
[106,91,103,91,105,0,79,99,110],
[126,103,123,96,129,132,0,123,104],
[113,105,111,95,120,112,88,0,106],
[128,114,114,100,119,101,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,101,111,96,98,93,104],
[112,0,107,103,103,114,110,99,111],
[108,104,0,111,102,109,104,108,113],
[110,108,100,0,104,109,94,104,104],
[100,108,109,107,0,109,102,96,104],
[115,97,102,102,102,0,99,105,109],
[113,101,107,117,109,112,0,103,120],
[118,112,103,107,115,106,108,0,110],
[107,100,98,107,107,102,91,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,87,79,69,58,134,113,133],
[82,0,68,58,52,19,93,33,98],
[124,143,0,131,101,60,126,66,127],
[132,153,80,0,57,74,121,80,116],
[142,159,110,154,0,87,152,85,123],
[153,192,151,137,124,0,160,104,128],
[77,118,85,90,59,51,0,41,84],
[98,178,145,131,126,107,170,0,138],
[78,113,84,95,88,83,127,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,107,110,108,117,98,113],
[99,0,102,108,107,110,101,102,109],
[100,109,0,112,105,111,104,112,116],
[104,103,99,0,96,125,112,108,110],
[101,104,106,115,0,109,109,94,108],
[103,101,100,86,102,0,104,91,100],
[94,110,107,99,102,107,0,92,111],
[113,109,99,103,117,120,119,0,110],
[98,102,95,101,103,111,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,94,129,136,134,87,117,118],
[100,0,99,117,119,99,101,105,124],
[117,112,0,112,130,121,84,103,100],
[82,94,99,0,107,94,70,82,92],
[75,92,81,104,0,94,61,96,79],
[77,112,90,117,117,0,108,105,90],
[124,110,127,141,150,103,0,120,135],
[94,106,108,129,115,106,91,0,105],
[93,87,111,119,132,121,76,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,116,101,113,108,119,103,119],
[90,0,92,84,100,102,91,88,101],
[95,119,0,105,114,98,109,105,118],
[110,127,106,0,112,91,97,99,108],
[98,111,97,99,0,106,103,100,111],
[103,109,113,120,105,0,95,107,113],
[92,120,102,114,108,116,0,105,111],
[108,123,106,112,111,104,106,0,106],
[92,110,93,103,100,98,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,111,121,99,110,138,110,109],
[116,0,157,119,122,122,136,100,136],
[100,54,0,67,70,107,93,85,74],
[90,92,144,0,114,104,117,101,112],
[112,89,141,97,0,104,128,103,111],
[101,89,104,107,107,0,106,94,104],
[73,75,118,94,83,105,0,83,111],
[101,111,126,110,108,117,128,0,109],
[102,75,137,99,100,107,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,111,98,114,111,127,86,116],
[117,0,111,115,126,118,112,93,125],
[100,100,0,99,114,106,99,83,110],
[113,96,112,0,120,111,114,106,117],
[97,85,97,91,0,108,98,87,121],
[100,93,105,100,103,0,105,101,106],
[84,99,112,97,113,106,0,91,119],
[125,118,128,105,124,110,120,0,146],
[95,86,101,94,90,105,92,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,105,105,107,99,103,102],
[111,0,118,117,105,116,105,113,112],
[110,93,0,105,102,99,108,113,111],
[106,94,106,0,103,110,95,98,100],
[106,106,109,108,0,104,103,115,104],
[104,95,112,101,107,0,107,104,113],
[112,106,103,116,108,104,0,113,120],
[108,98,98,113,96,107,98,0,104],
[109,99,100,111,107,98,91,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,89,89,90,109,90,84],
[100,0,108,106,116,94,89,105,100],
[110,103,0,124,78,110,101,89,101],
[122,105,87,0,97,112,97,105,110],
[122,95,133,114,0,125,110,106,116],
[121,117,101,99,86,0,108,91,91],
[102,122,110,114,101,103,0,119,110],
[121,106,122,106,105,120,92,0,117],
[127,111,110,101,95,120,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,96,96,101,93,100,102],
[114,0,106,113,98,109,108,104,95],
[112,105,0,99,97,90,99,98,89],
[115,98,112,0,106,78,102,88,106],
[115,113,114,105,0,106,121,120,99],
[110,102,121,133,105,0,104,91,104],
[118,103,112,109,90,107,0,110,113],
[111,107,113,123,91,120,101,0,89],
[109,116,122,105,112,107,98,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,87,105,113,115,88,111],
[106,0,92,112,127,112,95,90,112],
[109,119,0,107,119,118,125,109,104],
[124,99,104,0,101,98,104,106,102],
[106,84,92,110,0,108,122,91,104],
[98,99,93,113,103,0,102,83,89],
[96,116,86,107,89,109,0,84,94],
[123,121,102,105,120,128,127,0,116],
[100,99,107,109,107,122,117,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,108,116,119,107,100,119],
[101,0,109,100,106,115,98,101,116],
[101,102,0,113,118,109,108,97,128],
[103,111,98,0,117,123,103,97,112],
[95,105,93,94,0,101,91,97,108],
[92,96,102,88,110,0,101,80,98],
[104,113,103,108,120,110,0,112,113],
[111,110,114,114,114,131,99,0,115],
[92,95,83,99,103,113,98,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,112,105,104,104,115,96,107],
[113,0,107,105,110,107,119,100,108],
[99,104,0,105,102,112,105,99,111],
[106,106,106,0,98,100,122,99,105],
[107,101,109,113,0,102,108,108,113],
[107,104,99,111,109,0,109,105,111],
[96,92,106,89,103,102,0,95,96],
[115,111,112,112,103,106,116,0,119],
[104,103,100,106,98,100,115,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,106,98,92,94,119,119,104],
[117,0,123,118,108,126,113,137,100],
[105,88,0,108,85,110,125,111,105],
[113,93,103,0,90,109,117,103,102],
[119,103,126,121,0,113,132,120,119],
[117,85,101,102,98,0,115,114,96],
[92,98,86,94,79,96,0,114,97],
[92,74,100,108,91,97,97,0,89],
[107,111,106,109,92,115,114,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,105,79,116,115,118,103,107],
[129,0,87,104,121,129,125,99,99],
[106,124,0,94,124,102,123,94,125],
[132,107,117,0,123,105,137,107,119],
[95,90,87,88,0,94,118,96,99],
[96,82,109,106,117,0,119,128,96],
[93,86,88,74,93,92,0,90,67],
[108,112,117,104,115,83,121,0,126],
[104,112,86,92,112,115,144,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,98,95,99,91,105,96,92],
[121,0,112,100,108,93,123,111,96],
[113,99,0,91,92,90,117,91,92],
[116,111,120,0,108,100,120,101,91],
[112,103,119,103,0,104,123,106,107],
[120,118,121,111,107,0,125,112,96],
[106,88,94,91,88,86,0,93,88],
[115,100,120,110,105,99,118,0,100],
[119,115,119,120,104,115,123,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,94,105,100,104,108,105],
[101,0,92,89,93,104,105,90,107],
[111,119,0,108,92,104,112,112,100],
[117,122,103,0,114,118,115,120,107],
[106,118,119,97,0,108,125,118,112],
[111,107,107,93,103,0,101,104,102],
[107,106,99,96,86,110,0,111,86],
[103,121,99,91,93,107,100,0,106],
[106,104,111,104,99,109,125,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,81,100,108,104,107,113],
[101,0,114,79,92,106,109,86,109],
[111,97,0,73,86,107,110,99,103],
[130,132,138,0,114,139,139,105,137],
[111,119,125,97,0,117,121,121,104],
[103,105,104,72,94,0,103,103,93],
[107,102,101,72,90,108,0,103,80],
[104,125,112,106,90,108,108,0,103],
[98,102,108,74,107,118,131,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,91,100,105,100,112,86,97],
[97,0,87,105,98,99,106,87,102],
[120,124,0,106,118,116,117,106,96],
[111,106,105,0,103,91,112,90,94],
[106,113,93,108,0,90,119,80,84],
[111,112,95,120,121,0,101,80,101],
[99,105,94,99,92,110,0,85,104],
[125,124,105,121,131,131,126,0,107],
[114,109,115,117,127,110,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,101,109,107,119,114,112,117],
[87,0,87,113,92,101,118,123,105],
[110,124,0,116,115,99,123,128,112],
[102,98,95,0,108,108,136,102,96],
[104,119,96,103,0,108,127,126,100],
[92,110,112,103,103,0,106,103,99],
[97,93,88,75,84,105,0,96,89],
[99,88,83,109,85,108,115,0,112],
[94,106,99,115,111,112,122,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,111,100,109,93,124,110,108],
[117,0,141,112,90,98,141,121,107],
[100,70,0,85,94,79,109,93,91],
[111,99,126,0,106,100,136,114,119],
[102,121,117,105,0,122,127,117,112],
[118,113,132,111,89,0,134,112,107],
[87,70,102,75,84,77,0,78,81],
[101,90,118,97,94,99,133,0,101],
[103,104,120,92,99,104,130,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,97,90,88,100,117,105,86],
[101,0,81,86,96,107,101,92,98],
[114,130,0,109,95,114,122,100,94],
[121,125,102,0,94,116,118,98,115],
[123,115,116,117,0,106,124,125,105],
[111,104,97,95,105,0,111,110,103],
[94,110,89,93,87,100,0,95,90],
[106,119,111,113,86,101,116,0,107],
[125,113,117,96,106,108,121,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,75,113,144,95,53,50,92],
[69,0,96,43,138,103,86,96,35],
[136,115,0,153,153,150,104,108,69],
[98,168,58,0,142,81,79,139,76],
[67,73,58,69,0,63,84,90,59],
[116,108,61,130,148,0,81,97,64],
[158,125,107,132,127,130,0,99,125],
[161,115,103,72,121,114,112,0,61],
[119,176,142,135,152,147,86,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,93,118,110,84,107,82,87],
[92,0,67,93,84,71,90,77,86],
[118,144,0,120,118,115,107,102,120],
[93,118,91,0,90,105,111,83,101],
[101,127,93,121,0,99,104,89,91],
[127,140,96,106,112,0,105,87,97],
[104,121,104,100,107,106,0,108,97],
[129,134,109,128,122,124,103,0,109],
[124,125,91,110,120,114,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,98,119,122,115,116,117],
[107,0,91,110,121,130,108,123,113],
[113,120,0,105,118,123,107,119,117],
[113,101,106,0,114,113,111,117,121],
[92,90,93,97,0,110,105,102,115],
[89,81,88,98,101,0,99,113,109],
[96,103,104,100,106,112,0,110,116],
[95,88,92,94,109,98,101,0,95],
[94,98,94,90,96,102,95,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,179,81,103,96,99,103,133],
[88,0,88,139,145,103,88,164,119],
[32,123,0,63,120,35,119,103,135],
[130,72,148,0,130,91,160,149,114],
[108,66,91,81,0,65,62,133,96],
[115,108,176,120,146,0,99,88,130],
[112,123,92,51,149,112,0,103,66],
[108,47,108,62,78,123,108,0,62],
[78,92,76,97,115,81,145,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,107,104,109,109,117,111],
[102,0,80,108,106,109,103,105,104],
[105,131,0,112,118,118,102,118,113],
[104,103,99,0,111,116,118,110,112],
[107,105,93,100,0,101,116,108,112],
[102,102,93,95,110,0,104,109,100],
[102,108,109,93,95,107,0,114,111],
[94,106,93,101,103,102,97,0,116],
[100,107,98,99,99,111,100,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,101,97,99,111,98,92,92],
[124,0,115,103,104,123,117,109,107],
[110,96,0,108,124,116,112,118,109],
[114,108,103,0,99,119,118,112,89],
[112,107,87,112,0,115,107,108,111],
[100,88,95,92,96,0,110,101,79],
[113,94,99,93,104,101,0,98,100],
[119,102,93,99,103,110,113,0,111],
[119,104,102,122,100,132,111,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,105,101,112,100,108,104],
[103,0,111,98,98,120,113,109,103],
[98,100,0,94,102,109,96,111,101],
[106,113,117,0,110,117,104,121,110],
[110,113,109,101,0,111,107,111,110],
[99,91,102,94,100,0,99,101,99],
[111,98,115,107,104,112,0,106,107],
[103,102,100,90,100,110,105,0,101],
[107,108,110,101,101,112,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,94,109,103,107,92,87,101],
[114,0,104,112,112,111,111,114,118],
[117,107,0,99,97,104,99,94,111],
[102,99,112,0,105,110,101,106,112],
[108,99,114,106,0,122,99,106,126],
[104,100,107,101,89,0,85,107,113],
[119,100,112,110,112,126,0,108,119],
[124,97,117,105,105,104,103,0,108],
[110,93,100,99,85,98,92,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,93,82,87,102,81,69,81],
[132,0,101,122,90,135,76,113,96],
[118,110,0,119,91,129,97,109,103],
[129,89,92,0,91,109,70,98,93],
[124,121,120,120,0,122,106,120,100],
[109,76,82,102,89,0,78,90,81],
[130,135,114,141,105,133,0,114,110],
[142,98,102,113,91,121,97,0,110],
[130,115,108,118,111,130,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,55,93,106,127,136,144,61],
[150,0,128,141,148,154,178,113,91],
[156,83,0,133,162,128,105,143,110],
[118,70,78,0,56,119,125,83,107],
[105,63,49,155,0,109,110,123,78],
[84,57,83,92,102,0,94,83,97],
[75,33,106,86,101,117,0,107,78],
[67,98,68,128,88,128,104,0,112],
[150,120,101,104,133,114,133,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,99,104,108,99,106,101],
[112,0,106,109,109,119,104,111,118],
[111,105,0,106,94,110,106,106,103],
[112,102,105,0,96,120,111,123,113],
[107,102,117,115,0,116,110,118,119],
[103,92,101,91,95,0,102,96,109],
[112,107,105,100,101,109,0,107,115],
[105,100,105,88,93,115,104,0,106],
[110,93,108,98,92,102,96,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,106,92,108,106,106,103],
[116,0,117,114,108,116,110,113,103],
[110,94,0,102,96,109,103,104,112],
[105,97,109,0,109,114,106,99,104],
[119,103,115,102,0,120,105,111,112],
[103,95,102,97,91,0,93,98,95],
[105,101,108,105,106,118,0,109,103],
[105,98,107,112,100,113,102,0,102],
[108,108,99,107,99,116,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,102,110,117,103,114,111],
[101,0,99,104,116,113,105,116,118],
[105,112,0,99,103,120,111,119,119],
[109,107,112,0,111,118,97,114,112],
[101,95,108,100,0,103,91,110,102],
[94,98,91,93,108,0,95,106,107],
[108,106,100,114,120,116,0,107,109],
[97,95,92,97,101,105,104,0,101],
[100,93,92,99,109,104,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,103,102,98,105,105,117],
[115,0,103,104,100,101,108,120,120],
[105,108,0,100,108,98,114,116,113],
[108,107,111,0,96,98,113,112,120],
[109,111,103,115,0,107,108,122,120],
[113,110,113,113,104,0,116,117,123],
[106,103,97,98,103,95,0,120,116],
[106,91,95,99,89,94,91,0,105],
[94,91,98,91,91,88,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,139,125,122,112,119,108,104],
[91,0,112,96,89,96,100,85,90],
[72,99,0,103,96,98,104,82,102],
[86,115,108,0,87,99,96,81,101],
[89,122,115,124,0,91,108,93,107],
[99,115,113,112,120,0,108,108,108],
[92,111,107,115,103,103,0,85,117],
[103,126,129,130,118,103,126,0,125],
[107,121,109,110,104,103,94,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,129,118,130,130,118,104,108],
[75,0,97,115,94,120,86,89,93],
[82,114,0,138,99,140,93,106,71],
[93,96,73,0,88,96,84,105,70],
[81,117,112,123,0,137,118,96,102],
[81,91,71,115,74,0,75,104,64],
[93,125,118,127,93,136,0,126,88],
[107,122,105,106,115,107,85,0,76],
[103,118,140,141,109,147,123,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,150,62,62,96,89,150,96],
[149,0,115,27,177,123,27,88,34],
[61,96,0,34,96,96,123,62,96],
[149,184,177,0,184,96,211,150,96],
[149,34,115,27,0,61,61,88,34],
[115,88,115,115,150,0,115,88,34],
[122,184,88,0,150,96,0,88,96],
[61,123,149,61,123,123,123,0,123],
[115,177,115,115,177,177,115,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,112,116,122,116,123,114,103],
[82,0,109,99,108,112,106,90,92],
[99,102,0,114,100,111,110,113,114],
[95,112,97,0,97,106,116,94,115],
[89,103,111,114,0,112,94,93,101],
[95,99,100,105,99,0,115,92,103],
[88,105,101,95,117,96,0,94,104],
[97,121,98,117,118,119,117,0,131],
[108,119,97,96,110,108,107,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,109,114,89,110,106,99],
[112,0,120,104,117,112,107,94,94],
[100,91,0,94,104,90,96,97,90],
[102,107,117,0,101,99,109,97,101],
[97,94,107,110,0,98,120,92,92],
[122,99,121,112,113,0,101,90,98],
[101,104,115,102,91,110,0,106,88],
[105,117,114,114,119,121,105,0,115],
[112,117,121,110,119,113,123,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,118,97,65,99,123,108,57],
[94,0,141,103,99,115,150,82,73],
[93,70,0,73,80,73,92,78,76],
[114,108,138,0,149,90,147,106,112],
[146,112,131,62,0,68,89,99,96],
[112,96,138,121,143,0,68,120,107],
[88,61,119,64,122,143,0,101,90],
[103,129,133,105,112,91,110,0,135],
[154,138,135,99,115,104,121,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,105,106,108,108,108,109,99],
[91,0,100,102,95,97,99,87,87],
[106,111,0,110,104,107,106,94,106],
[105,109,101,0,102,105,89,94,115],
[103,116,107,109,0,107,112,106,103],
[103,114,104,106,104,0,115,99,100],
[103,112,105,122,99,96,0,114,94],
[102,124,117,117,105,112,97,0,103],
[112,124,105,96,108,111,117,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,103,109,125,115,115,106],
[100,0,115,90,105,117,103,98,101],
[99,96,0,102,106,118,105,106,99],
[108,121,109,0,110,119,105,118,102],
[102,106,105,101,0,116,92,104,107],
[86,94,93,92,95,0,83,102,91],
[96,108,106,106,119,128,0,116,107],
[96,113,105,93,107,109,95,0,99],
[105,110,112,109,104,120,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,122,111,102,117,103,107,103],
[110,0,117,118,111,108,102,105,114],
[89,94,0,107,100,99,103,94,91],
[100,93,104,0,87,94,94,97,100],
[109,100,111,124,0,102,99,108,102],
[94,103,112,117,109,0,91,101,99],
[108,109,108,117,112,120,0,110,105],
[104,106,117,114,103,110,101,0,107],
[108,97,120,111,109,112,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,107,104,104,101,111,115],
[95,0,103,99,89,103,88,106,98],
[105,108,0,107,96,89,93,113,111],
[104,112,104,0,110,112,112,101,107],
[107,122,115,101,0,114,112,111,105],
[107,108,122,99,97,0,102,100,102],
[110,123,118,99,99,109,0,105,115],
[100,105,98,110,100,111,106,0,88],
[96,113,100,104,106,109,96,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,125,113,110,109,113,108],
[107,0,104,120,106,110,99,109,102],
[109,107,0,118,112,104,103,106,99],
[86,91,93,0,97,97,100,97,90],
[98,105,99,114,0,114,111,107,102],
[101,101,107,114,97,0,112,114,100],
[102,112,108,111,100,99,0,94,92],
[98,102,105,114,104,97,117,0,106],
[103,109,112,121,109,111,119,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,112,128,105,86,100,87,120],
[95,0,92,98,99,86,112,80,124],
[99,119,0,112,104,106,94,91,118],
[83,113,99,0,110,100,107,107,91],
[106,112,107,101,0,115,96,71,112],
[125,125,105,111,96,0,123,105,120],
[111,99,117,104,115,88,0,86,107],
[124,131,120,104,140,106,125,0,131],
[91,87,93,120,99,91,104,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,145,141,100,111,88,117,96],
[73,0,137,117,83,105,92,80,94],
[66,74,0,82,64,75,86,82,54],
[70,94,129,0,67,58,96,99,49],
[111,128,147,144,0,83,98,99,98],
[100,106,136,153,128,0,113,126,94],
[123,119,125,115,113,98,0,107,94],
[94,131,129,112,112,85,104,0,107],
[115,117,157,162,113,117,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,110,105,114,91,93,114],
[102,0,101,117,93,108,90,99,110],
[102,110,0,114,93,103,98,90,107],
[101,94,97,0,94,100,103,90,108],
[106,118,118,117,0,113,114,101,119],
[97,103,108,111,98,0,88,89,116],
[120,121,113,108,97,123,0,107,116],
[118,112,121,121,110,122,104,0,107],
[97,101,104,103,92,95,95,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,104,94,117,119,109,117,119],
[85,0,94,103,113,96,108,118,108],
[107,117,0,104,123,98,109,113,103],
[117,108,107,0,132,120,101,120,108],
[94,98,88,79,0,95,93,111,92],
[92,115,113,91,116,0,103,122,115],
[102,103,102,110,118,108,0,125,112],
[94,93,98,91,100,89,86,0,108],
[92,103,108,103,119,96,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,128,117,125,110,107,104,121],
[99,0,103,106,101,106,90,96,114],
[83,108,0,109,103,101,91,91,99],
[94,105,102,0,98,98,82,100,99],
[86,110,108,113,0,109,100,100,109],
[101,105,110,113,102,0,90,85,106],
[104,121,120,129,111,121,0,114,111],
[107,115,120,111,111,126,97,0,108],
[90,97,112,112,102,105,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,112,96,106,101,101,88],
[98,0,99,102,98,105,80,93,80],
[105,112,0,125,121,120,103,116,86],
[99,109,86,0,110,111,76,102,86],
[115,113,90,101,0,107,82,87,94],
[105,106,91,100,104,0,87,92,82],
[110,131,108,135,129,124,0,104,107],
[110,118,95,109,124,119,107,0,98],
[123,131,125,125,117,129,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,58,157,133,43,157,157,106],
[143,0,121,191,92,143,191,143,158],
[153,90,0,169,141,140,165,183,184],
[54,20,42,0,85,70,93,107,90],
[78,119,70,126,0,94,103,140,114],
[168,68,71,141,117,0,119,141,119],
[54,20,46,118,108,92,0,111,63],
[54,68,28,104,71,70,100,0,63],
[105,53,27,121,97,92,148,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,104,102,107,113,114,105],
[98,0,120,104,112,112,108,117,107],
[99,91,0,105,110,109,111,103,95],
[107,107,106,0,107,112,103,110,109],
[109,99,101,104,0,111,101,109,108],
[104,99,102,99,100,0,97,98,104],
[98,103,100,108,110,114,0,98,103],
[97,94,108,101,102,113,113,0,98],
[106,104,116,102,103,107,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,131,144,131,121,166,121,156],
[130,0,168,80,105,156,168,130,130],
[80,43,0,63,50,121,113,28,113],
[67,131,148,0,105,93,140,95,67],
[80,106,161,106,0,106,80,80,123],
[90,55,90,118,105,0,140,118,140],
[45,43,98,71,131,71,0,28,88],
[90,81,183,116,131,93,183,0,183],
[55,81,98,144,88,71,123,28,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,93,107,96,96,129,125,100],
[89,0,101,114,102,85,118,130,100],
[118,110,0,121,104,119,116,127,120],
[104,97,90,0,91,91,93,114,89],
[115,109,107,120,0,90,109,131,129],
[115,126,92,120,121,0,105,132,116],
[82,93,95,118,102,106,0,123,114],
[86,81,84,97,80,79,88,0,91],
[111,111,91,122,82,95,97,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,130,115,87,141,117,126,149],
[98,0,117,90,96,117,121,127,113],
[81,94,0,87,78,139,88,69,97],
[96,121,124,0,71,139,95,78,119],
[124,115,133,140,0,132,104,106,119],
[70,94,72,72,79,0,95,76,90],
[94,90,123,116,107,116,0,109,122],
[85,84,142,133,105,135,102,0,111],
[62,98,114,92,92,121,89,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,101,97,100,100,89,96],
[117,0,121,129,104,134,98,118,103],
[107,90,0,107,85,103,84,93,102],
[110,82,104,0,106,116,101,103,97],
[114,107,126,105,0,116,118,116,106],
[111,77,108,95,95,0,92,94,87],
[111,113,127,110,93,119,0,96,98],
[122,93,118,108,95,117,115,0,94],
[115,108,109,114,105,124,113,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,116,110,97,110,114,98,110],
[94,0,106,91,86,87,85,94,99],
[95,105,0,105,92,100,92,99,104],
[101,120,106,0,110,103,98,97,97],
[114,125,119,101,0,107,108,113,106],
[101,124,111,108,104,0,105,101,106],
[97,126,119,113,103,106,0,108,102],
[113,117,112,114,98,110,103,0,112],
[101,112,107,114,105,105,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,110,124,110,96,111,124],
[98,0,108,88,92,115,101,99,111],
[101,103,0,93,95,100,90,99,108],
[101,123,118,0,116,126,102,110,120],
[87,119,116,95,0,107,100,102,101],
[101,96,111,85,104,0,104,101,104],
[115,110,121,109,111,107,0,99,113],
[100,112,112,101,109,110,112,0,103],
[87,100,103,91,110,107,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,114,117,113,104,105,110],
[98,0,96,90,101,91,92,85,98],
[98,115,0,102,113,114,96,105,115],
[97,121,109,0,114,111,103,101,109],
[94,110,98,97,0,99,99,96,109],
[98,120,97,100,112,0,93,90,109],
[107,119,115,108,112,118,0,109,104],
[106,126,106,110,115,121,102,0,122],
[101,113,96,102,102,102,107,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,94,107,105,93,98,98],
[115,0,107,86,107,106,97,95,97],
[108,104,0,100,107,115,111,108,104],
[117,125,111,0,118,116,106,104,108],
[104,104,104,93,0,114,104,97,111],
[106,105,96,95,97,0,94,91,94],
[118,114,100,105,107,117,0,95,111],
[113,116,103,107,114,120,116,0,100],
[113,114,107,103,100,117,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,93,102,103,105,97,111,99],
[117,0,99,94,114,129,116,102,108],
[118,112,0,102,125,120,114,118,114],
[109,117,109,0,112,118,114,97,110],
[108,97,86,99,0,106,99,91,107],
[106,82,91,93,105,0,104,99,97],
[114,95,97,97,112,107,0,97,106],
[100,109,93,114,120,112,114,0,111],
[112,103,97,101,104,114,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,74,93,105,106,108,50],
[111,0,111,91,107,135,77,86,77],
[101,100,0,73,80,116,64,99,65],
[137,120,138,0,131,101,120,146,85],
[118,104,131,80,0,106,127,79,80],
[106,76,95,110,105,0,74,74,62],
[105,134,147,91,84,137,0,126,136],
[103,125,112,65,132,137,85,0,104],
[161,134,146,126,131,149,75,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,83,97,93,112,100,117],
[106,0,99,106,103,111,108,106,122],
[105,112,0,93,104,112,109,101,111],
[128,105,118,0,108,124,127,121,124],
[114,108,107,103,0,128,106,115,113],
[118,100,99,87,83,0,133,104,110],
[99,103,102,84,105,78,0,92,95],
[111,105,110,90,96,107,119,0,101],
[94,89,100,87,98,101,116,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,111,100,117,122,110,100],
[100,0,105,102,112,109,105,102,92],
[110,106,0,116,112,113,107,119,96],
[100,109,95,0,113,107,108,109,97],
[111,99,99,98,0,108,108,103,102],
[94,102,98,104,103,0,103,108,105],
[89,106,104,103,103,108,0,119,106],
[101,109,92,102,108,103,92,0,97],
[111,119,115,114,109,106,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,94,101,102,102,92,105,116],
[115,0,99,118,113,113,107,111,117],
[117,112,0,106,114,109,95,104,114],
[110,93,105,0,106,106,96,99,111],
[109,98,97,105,0,102,98,102,122],
[109,98,102,105,109,0,102,108,111],
[119,104,116,115,113,109,0,110,113],
[106,100,107,112,109,103,101,0,112],
[95,94,97,100,89,100,98,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,94,102,90,110,103,85,105],
[109,0,111,96,104,126,106,120,127],
[117,100,0,99,104,105,103,102,111],
[109,115,112,0,101,116,107,92,108],
[121,107,107,110,0,107,108,103,123],
[101,85,106,95,104,0,91,92,108],
[108,105,108,104,103,120,0,102,127],
[126,91,109,119,108,119,109,0,121],
[106,84,100,103,88,103,84,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,113,101,105,98,107,105],
[107,0,105,101,103,101,91,111,103],
[107,106,0,106,101,112,103,116,106],
[98,110,105,0,98,100,97,116,99],
[110,108,110,113,0,105,101,109,98],
[106,110,99,111,106,0,108,115,99],
[113,120,108,114,110,103,0,116,112],
[104,100,95,95,102,96,95,0,108],
[106,108,105,112,113,112,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,104,113,117,118,109,108],
[103,0,107,95,105,105,110,105,105],
[102,104,0,106,105,97,108,102,92],
[107,116,105,0,103,107,109,102,115],
[98,106,106,108,0,100,115,95,95],
[94,106,114,104,111,0,107,101,99],
[93,101,103,102,96,104,0,96,116],
[102,106,109,109,116,110,115,0,105],
[103,106,119,96,116,112,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,123,106,113,115,122,111,105],
[93,0,104,103,103,100,135,96,113],
[88,107,0,84,83,82,106,83,85],
[105,108,127,0,112,118,123,102,115],
[98,108,128,99,0,110,124,96,107],
[96,111,129,93,101,0,112,91,109],
[89,76,105,88,87,99,0,75,94],
[100,115,128,109,115,120,136,0,110],
[106,98,126,96,104,102,117,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,62,112,118,96,102,115,113],
[78,0,64,77,95,91,88,99,78],
[149,147,0,85,135,107,100,110,114],
[99,134,126,0,124,120,127,141,115],
[93,116,76,87,0,102,97,103,124],
[115,120,104,91,109,0,114,112,114],
[109,123,111,84,114,97,0,115,116],
[96,112,101,70,108,99,96,0,126],
[98,133,97,96,87,97,95,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,80,87,90,88,88,101,81],
[123,0,108,122,103,101,105,104,97],
[131,103,0,118,111,92,97,103,100],
[124,89,93,0,102,99,97,110,105],
[121,108,100,109,0,105,98,115,101],
[123,110,119,112,106,0,104,110,104],
[123,106,114,114,113,107,0,98,114],
[110,107,108,101,96,101,113,0,93],
[130,114,111,106,110,107,97,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,122,108,107,106,110,112,104],
[105,0,122,102,107,102,116,113,95],
[89,89,0,114,94,95,108,88,91],
[103,109,97,0,102,99,122,106,104],
[104,104,117,109,0,116,112,104,107],
[105,109,116,112,95,0,121,111,112],
[101,95,103,89,99,90,0,104,91],
[99,98,123,105,107,100,107,0,103],
[107,116,120,107,104,99,120,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,120,95,124,84,107,90,115],
[117,0,142,128,138,89,131,117,136],
[91,69,0,71,90,74,88,75,98],
[116,83,140,0,115,105,123,88,116],
[87,73,121,96,0,88,111,75,85],
[127,122,137,106,123,0,132,98,121],
[104,80,123,88,100,79,0,94,102],
[121,94,136,123,136,113,117,0,130],
[96,75,113,95,126,90,109,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,111,104,106,120,88,108],
[105,0,100,110,98,107,107,96,109],
[103,111,0,110,97,99,112,106,105],
[100,101,101,0,94,102,107,92,104],
[107,113,114,117,0,111,112,105,120],
[105,104,112,109,100,0,107,93,107],
[91,104,99,104,99,104,0,89,105],
[123,115,105,119,106,118,122,0,116],
[103,102,106,107,91,104,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,94,102,96,97,86,109],
[96,0,109,96,98,93,110,95,103],
[105,102,0,93,103,99,101,97,103],
[117,115,118,0,113,115,117,110,100],
[109,113,108,98,0,102,118,103,107],
[115,118,112,96,109,0,104,103,96],
[114,101,110,94,93,107,0,102,103],
[125,116,114,101,108,108,109,0,96],
[102,108,108,111,104,115,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,92,99,90,93,99,88,102],
[120,0,100,104,107,113,111,108,123],
[119,111,0,99,103,103,102,101,123],
[112,107,112,0,104,94,107,117,123],
[121,104,108,107,0,113,112,117,109],
[118,98,108,117,98,0,107,107,116],
[112,100,109,104,99,104,0,96,111],
[123,103,110,94,94,104,115,0,114],
[109,88,88,88,102,95,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,116,96,86,106,74,95,85],
[119,0,112,107,99,88,76,87,121],
[95,99,0,126,94,97,71,112,110],
[115,104,85,0,93,87,104,96,99],
[125,112,117,118,0,119,94,100,138],
[105,123,114,124,92,0,120,115,122],
[137,135,140,107,117,91,0,133,112],
[116,124,99,115,111,96,78,0,118],
[126,90,101,112,73,89,99,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,103,106,133,120,121,117],
[107,0,68,98,91,121,83,92,119],
[106,143,0,104,110,134,109,119,146],
[108,113,107,0,93,130,109,123,128],
[105,120,101,118,0,134,98,93,113],
[78,90,77,81,77,0,69,80,126],
[91,128,102,102,113,142,0,117,131],
[90,119,92,88,118,131,94,0,115],
[94,92,65,83,98,85,80,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,121,108,104,110,109,113,103],
[108,0,120,116,117,103,117,118,107],
[90,91,0,82,96,81,93,83,81],
[103,95,129,0,104,98,113,113,98],
[107,94,115,107,0,108,118,97,115],
[101,108,130,113,103,0,108,99,103],
[102,94,118,98,93,103,0,106,89],
[98,93,128,98,114,112,105,0,101],
[108,104,130,113,96,108,122,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,79,97,127,111,112,92,111],
[113,0,105,105,109,108,116,109,95],
[132,106,0,114,131,109,117,115,91],
[114,106,97,0,115,125,106,95,95],
[84,102,80,96,0,116,102,104,93],
[100,103,102,86,95,0,112,95,89],
[99,95,94,105,109,99,0,95,97],
[119,102,96,116,107,116,116,0,102],
[100,116,120,116,118,122,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,48,121,48,12,12,6,74,96],
[163,0,154,169,80,89,154,129,79],
[90,57,0,27,27,27,38,47,60],
[163,42,184,0,31,46,57,32,79],
[199,131,184,180,0,115,105,116,116],
[199,122,184,165,96,0,86,116,90],
[205,57,173,154,106,125,0,180,90],
[137,82,164,179,95,95,31,0,85],
[115,132,151,132,95,121,121,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,107,119,80,107,97,100,118],
[122,0,137,111,101,123,141,143,149],
[104,74,0,76,69,127,111,83,92],
[92,100,135,0,121,113,97,146,130],
[131,110,142,90,0,102,123,163,134],
[104,88,84,98,109,0,83,123,93],
[114,70,100,114,88,128,0,128,110],
[111,68,128,65,48,88,83,0,95],
[93,62,119,81,77,118,101,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,94,133,126,118,120,111,119],
[124,0,117,122,114,120,130,103,124],
[117,94,0,116,132,100,121,108,105],
[78,89,95,0,95,94,110,84,111],
[85,97,79,116,0,106,119,104,104],
[93,91,111,117,105,0,144,98,104],
[91,81,90,101,92,67,0,85,106],
[100,108,103,127,107,113,126,0,116],
[92,87,106,100,107,107,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,117,113,113,115,111,126,125],
[110,0,105,107,112,129,106,121,124],
[94,106,0,88,109,103,89,111,103],
[98,104,123,0,117,122,102,123,119],
[98,99,102,94,0,107,100,120,105],
[96,82,108,89,104,0,91,116,109],
[100,105,122,109,111,120,0,124,120],
[85,90,100,88,91,95,87,0,102],
[86,87,108,92,106,102,91,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,128,112,110,118,108,102,130],
[93,0,102,106,97,95,105,105,122],
[83,109,0,106,88,90,106,99,97],
[99,105,105,0,105,104,102,101,105],
[101,114,123,106,0,115,113,109,109],
[93,116,121,107,96,0,103,105,100],
[103,106,105,109,98,108,0,106,104],
[109,106,112,110,102,106,105,0,109],
[81,89,114,106,102,111,107,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,127,93,95,99,96,106,121],
[105,0,94,76,73,81,84,96,104],
[84,117,0,82,86,64,82,88,105],
[118,135,129,0,110,108,103,113,124],
[116,138,125,101,0,117,94,104,109],
[112,130,147,103,94,0,118,124,125],
[115,127,129,108,117,93,0,113,125],
[105,115,123,98,107,87,98,0,110],
[90,107,106,87,102,86,86,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,102,107,105,91,92,116,116],
[126,0,112,100,124,125,102,121,130],
[109,99,0,117,114,107,108,111,118],
[104,111,94,0,103,95,113,109,102],
[106,87,97,108,0,98,96,100,122],
[120,86,104,116,113,0,109,123,121],
[119,109,103,98,115,102,0,123,102],
[95,90,100,102,111,88,88,0,103],
[95,81,93,109,89,90,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,96,103,106,91,99,96,92],
[131,0,105,120,123,114,114,112,115],
[115,106,0,124,114,113,105,113,107],
[108,91,87,0,105,99,97,91,86],
[105,88,97,106,0,95,87,93,94],
[120,97,98,112,116,0,100,110,103],
[112,97,106,114,124,111,0,95,112],
[115,99,98,120,118,101,116,0,107],
[119,96,104,125,117,108,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,100,105,89,87,92,104],
[110,0,95,108,102,89,95,90,100],
[113,116,0,98,108,117,100,99,107],
[111,103,113,0,108,112,105,92,102],
[106,109,103,103,0,108,91,90,102],
[122,122,94,99,103,0,102,105,111],
[124,116,111,106,120,109,0,111,102],
[119,121,112,119,121,106,100,0,111],
[107,111,104,109,109,100,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,107,118,110,100,109,120],
[98,0,107,99,100,103,85,102,91],
[100,104,0,103,110,99,95,123,103],
[104,112,108,0,108,104,104,96,105],
[93,111,101,103,0,107,107,98,107],
[101,108,112,107,104,0,97,104,100],
[111,126,116,107,104,114,0,101,106],
[102,109,88,115,113,107,110,0,104],
[91,120,108,106,104,111,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,107,77,86,115,98,107],
[113,0,116,101,113,102,110,104,113],
[114,95,0,118,107,100,112,108,100],
[104,110,93,0,94,109,115,104,107],
[134,98,104,117,0,104,128,100,103],
[125,109,111,102,107,0,122,100,113],
[96,101,99,96,83,89,0,77,101],
[113,107,103,107,111,111,134,0,132],
[104,98,111,104,108,98,110,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,109,111,104,109,115,107],
[100,0,101,105,100,109,99,103,102],
[107,110,0,95,106,102,89,102,94],
[102,106,116,0,110,114,97,108,102],
[100,111,105,101,0,104,104,108,109],
[107,102,109,97,107,0,99,103,97],
[102,112,122,114,107,112,0,113,107],
[96,108,109,103,103,108,98,0,97],
[104,109,117,109,102,114,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,85,114,92,126,101,105,84],
[116,0,119,113,108,129,142,113,99],
[126,92,0,100,95,113,136,114,102],
[97,98,111,0,84,108,125,105,73],
[119,103,116,127,0,114,129,131,112],
[85,82,98,103,97,0,110,104,88],
[110,69,75,86,82,101,0,90,57],
[106,98,97,106,80,107,121,0,75],
[127,112,109,138,99,123,154,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,110,104,112,110,118,114],
[99,0,111,115,95,121,109,102,109],
[100,100,0,92,96,95,101,104,106],
[101,96,119,0,96,111,105,104,105],
[107,116,115,115,0,106,111,110,102],
[99,90,116,100,105,0,97,107,107],
[101,102,110,106,100,114,0,100,104],
[93,109,107,107,101,104,111,0,110],
[97,102,105,106,109,104,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,109,98,117,92,88,94,113],
[130,0,142,107,131,91,118,110,140],
[102,69,0,90,117,76,98,96,111],
[113,104,121,0,123,102,99,116,118],
[94,80,94,88,0,78,97,95,106],
[119,120,135,109,133,0,101,107,111],
[123,93,113,112,114,110,0,105,111],
[117,101,115,95,116,104,106,0,117],
[98,71,100,93,105,100,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,93,94,96,112,110,106,96],
[110,0,114,121,101,114,127,120,98],
[118,97,0,110,120,122,118,112,96],
[117,90,101,0,88,104,105,119,96],
[115,110,91,123,0,148,118,120,118],
[99,97,89,107,63,0,109,88,100],
[101,84,93,106,93,102,0,108,89],
[105,91,99,92,91,123,103,0,107],
[115,113,115,115,93,111,122,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,109,99,110,115,108,104],
[103,0,98,103,98,105,97,104,100],
[99,113,0,114,107,105,102,105,108],
[102,108,97,0,103,106,109,105,105],
[112,113,104,108,0,117,106,113,106],
[101,106,106,105,94,0,103,102,110],
[96,114,109,102,105,108,0,110,109],
[103,107,106,106,98,109,101,0,110],
[107,111,103,106,105,101,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,117,102,138,95,122,136],
[107,0,80,91,90,110,90,95,127],
[97,131,0,92,97,126,97,97,132],
[94,120,119,0,109,132,103,120,121],
[109,121,114,102,0,113,98,120,139],
[73,101,85,79,98,0,86,94,88],
[116,121,114,108,113,125,0,128,100],
[89,116,114,91,91,117,83,0,138],
[75,84,79,90,72,123,111,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,91,94,106,99,108,94,103],
[120,0,113,102,106,123,108,104,110],
[120,98,0,104,120,131,112,110,121],
[117,109,107,0,104,114,100,103,103],
[105,105,91,107,0,111,106,101,103],
[112,88,80,97,100,0,100,97,97],
[103,103,99,111,105,111,0,103,99],
[117,107,101,108,110,114,108,0,119],
[108,101,90,108,108,114,112,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,94,98,83,92,102,114],
[111,0,113,114,103,110,103,113,125],
[110,98,0,95,103,89,100,108,109],
[117,97,116,0,97,96,106,110,109],
[113,108,108,114,0,91,106,111,110],
[128,101,122,115,120,0,113,121,120],
[119,108,111,105,105,98,0,108,108],
[109,98,103,101,100,90,103,0,110],
[97,86,102,102,101,91,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,113,97,131,111,115,107],
[100,0,100,109,99,114,107,103,99],
[93,111,0,120,101,111,104,95,91],
[98,102,91,0,94,102,99,102,84],
[114,112,110,117,0,118,121,115,103],
[80,97,100,109,93,0,95,86,84],
[100,104,107,112,90,116,0,103,91],
[96,108,116,109,96,125,108,0,91],
[104,112,120,127,108,127,120,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,102,116,106,97,111,104,106],
[89,0,92,94,87,75,105,94,96],
[109,119,0,107,103,108,118,121,109],
[95,117,104,0,101,101,114,102,109],
[105,124,108,110,0,103,126,113,112],
[114,136,103,110,108,0,117,111,112],
[100,106,93,97,85,94,0,99,90],
[107,117,90,109,98,100,112,0,109],
[105,115,102,102,99,99,121,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,97,115,99,77,99,103,93],
[117,0,120,118,125,101,105,118,109],
[114,91,0,120,113,96,106,119,97],
[96,93,91,0,110,85,99,117,90],
[112,86,98,101,0,94,101,107,94],
[134,110,115,126,117,0,105,120,108],
[112,106,105,112,110,106,0,122,96],
[108,93,92,94,104,91,89,0,72],
[118,102,114,121,117,103,115,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,105,113,115,106,108,117,122],
[87,0,97,88,105,86,95,90,102],
[106,114,0,114,117,103,118,122,115],
[98,123,97,0,114,92,103,122,119],
[96,106,94,97,0,99,109,109,104],
[105,125,108,119,112,0,107,113,110],
[103,116,93,108,102,104,0,116,110],
[94,121,89,89,102,98,95,0,113],
[89,109,96,92,107,101,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,99,96,104,111,117,101,110],
[89,0,98,96,98,102,114,88,99],
[112,113,0,92,102,111,111,110,111],
[115,115,119,0,122,103,117,108,107],
[107,113,109,89,0,93,104,106,109],
[100,109,100,108,118,0,119,108,109],
[94,97,100,94,107,92,0,96,91],
[110,123,101,103,105,103,115,0,108],
[101,112,100,104,102,102,120,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,90,79,103,87,92,89,91],
[111,0,105,102,118,91,102,98,102],
[121,106,0,102,124,109,92,107,114],
[132,109,109,0,115,109,102,104,119],
[108,93,87,96,0,88,90,83,105],
[124,120,102,102,123,0,106,109,119],
[119,109,119,109,121,105,0,97,121],
[122,113,104,107,128,102,114,0,119],
[120,109,97,92,106,92,90,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,107,103,116,125,89,116],
[99,0,111,115,102,103,103,107,87],
[104,100,0,121,101,113,116,106,108],
[104,96,90,0,109,105,118,92,98],
[108,109,110,102,0,105,99,108,118],
[95,108,98,106,106,0,106,101,96],
[86,108,95,93,112,105,0,96,88],
[122,104,105,119,103,110,115,0,126],
[95,124,103,113,93,115,123,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,107,108,104,118,107,107,107],
[86,0,95,99,88,100,95,101,101],
[104,116,0,103,102,108,96,97,106],
[103,112,108,0,110,105,109,94,110],
[107,123,109,101,0,111,116,117,109],
[93,111,103,106,100,0,110,94,102],
[104,116,115,102,95,101,0,97,103],
[104,110,114,117,94,117,114,0,103],
[104,110,105,101,102,109,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,117,118,113,85,101,108],
[107,0,115,100,145,113,105,95,116],
[110,96,0,111,126,137,125,96,107],
[94,111,100,0,127,115,94,94,97],
[93,66,85,84,0,95,86,92,91],
[98,98,74,96,116,0,99,105,89],
[126,106,86,117,125,112,0,117,96],
[110,116,115,117,119,106,94,0,100],
[103,95,104,114,120,122,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,116,108,104,102,108,108,113],
[99,0,102,106,105,101,96,96,104],
[95,109,0,115,99,100,101,96,98],
[103,105,96,0,102,95,92,105,106],
[107,106,112,109,0,106,97,112,118],
[109,110,111,116,105,0,105,107,104],
[103,115,110,119,114,106,0,102,103],
[103,115,115,106,99,104,109,0,116],
[98,107,113,105,93,107,108,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,97,106,109,114,101,111,110],
[108,0,101,97,103,113,108,104,95],
[114,110,0,96,107,104,94,115,109],
[105,114,115,0,112,111,111,121,108],
[102,108,104,99,0,106,106,113,105],
[97,98,107,100,105,0,102,123,103],
[110,103,117,100,105,109,0,117,106],
[100,107,96,90,98,88,94,0,106],
[101,116,102,103,106,108,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,95,121,111,105,116,112,121],
[101,0,100,98,105,106,107,115,109],
[116,111,0,112,104,102,111,125,113],
[90,113,99,0,93,107,109,117,109],
[100,106,107,118,0,107,115,112,124],
[106,105,109,104,104,0,101,110,99],
[95,104,100,102,96,110,0,114,105],
[99,96,86,94,99,101,97,0,90],
[90,102,98,102,87,112,106,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,117,120,113,105,113,117,105],
[94,0,108,104,95,94,102,99,93],
[94,103,0,112,101,102,105,104,101],
[91,107,99,0,97,100,99,103,92],
[98,116,110,114,0,106,105,110,101],
[106,117,109,111,105,0,115,112,113],
[98,109,106,112,106,96,0,102,102],
[94,112,107,108,101,99,109,0,101],
[106,118,110,119,110,98,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,98,103,64,97,127,51,51],
[128,0,137,91,91,140,128,98,133],
[113,74,0,135,64,127,88,44,113],
[108,120,76,0,97,88,76,90,74],
[147,120,147,114,0,88,115,129,113],
[114,71,84,123,123,0,115,71,83],
[84,83,123,135,96,96,0,122,122],
[160,113,167,121,82,140,89,0,126],
[160,78,98,137,98,128,89,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,115,105,103,108,113,112,105],
[103,0,107,107,102,116,105,114,106],
[96,104,0,103,105,100,95,107,94],
[106,104,108,0,109,104,107,114,108],
[108,109,106,102,0,109,108,97,106],
[103,95,111,107,102,0,107,116,101],
[98,106,116,104,103,104,0,106,107],
[99,97,104,97,114,95,105,0,98],
[106,105,117,103,105,110,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,98,114,100,91,89,83,102],
[117,0,107,126,114,105,100,115,109],
[113,104,0,118,113,116,101,99,106],
[97,85,93,0,96,93,83,64,123],
[111,97,98,115,0,111,123,110,115],
[120,106,95,118,100,0,100,99,120],
[122,111,110,128,88,111,0,116,127],
[128,96,112,147,101,112,95,0,127],
[109,102,105,88,96,91,84,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,110,105,104,113,105,104],
[103,0,98,105,111,106,106,108,102],
[106,113,0,111,104,97,111,102,107],
[101,106,100,0,100,93,97,99,98],
[106,100,107,111,0,102,107,104,103],
[107,105,114,118,109,0,116,96,104],
[98,105,100,114,104,95,0,100,104],
[106,103,109,112,107,115,111,0,106],
[107,109,104,113,108,107,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,93,97,90,91,95,101,89],
[106,0,111,96,101,104,105,109,100],
[118,100,0,101,107,108,114,103,99],
[114,115,110,0,104,114,122,117,113],
[121,110,104,107,0,101,111,110,100],
[120,107,103,97,110,0,112,103,94],
[116,106,97,89,100,99,0,104,107],
[110,102,108,94,101,108,107,0,107],
[122,111,112,98,111,117,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,108,109,108,130,84,96],
[107,0,112,101,100,98,113,93,124],
[110,99,0,115,94,102,109,96,122],
[103,110,96,0,85,107,109,97,112],
[102,111,117,126,0,109,135,108,115],
[103,113,109,104,102,0,105,89,99],
[81,98,102,102,76,106,0,91,111],
[127,118,115,114,103,122,120,0,126],
[115,87,89,99,96,112,100,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,131,119,112,117,106,99],
[98,0,112,115,105,110,114,93,107],
[109,99,0,124,103,114,114,100,131],
[80,96,87,0,95,104,101,91,83],
[92,106,108,116,0,102,112,102,97],
[99,101,97,107,109,0,112,99,112],
[94,97,97,110,99,99,0,104,102],
[105,118,111,120,109,112,107,0,118],
[112,104,80,128,114,99,109,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,106,102,100,112,104,106],
[106,0,108,119,116,107,103,109,101],
[98,103,0,107,105,114,108,103,106],
[105,92,104,0,97,108,97,98,98],
[109,95,106,114,0,114,105,105,108],
[111,104,97,103,97,0,97,87,107],
[99,108,103,114,106,114,0,106,102],
[107,102,108,113,106,124,105,0,105],
[105,110,105,113,103,104,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,114,95,99,110,96,108],
[106,0,92,114,92,108,97,106,107],
[104,119,0,112,113,100,109,113,103],
[97,97,99,0,97,100,102,95,99],
[116,119,98,114,0,97,110,107,116],
[112,103,111,111,114,0,112,107,119],
[101,114,102,109,101,99,0,110,114],
[115,105,98,116,104,104,101,0,111],
[103,104,108,112,95,92,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,129,97,116,103,114,116,124],
[90,0,105,97,112,100,85,106,94],
[82,106,0,96,107,93,79,94,103],
[114,114,115,0,107,114,99,127,120],
[95,99,104,104,0,114,87,89,101],
[108,111,118,97,97,0,90,107,109],
[97,126,132,112,124,121,0,121,131],
[95,105,117,84,122,104,90,0,109],
[87,117,108,91,110,102,80,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,109,140,95,132,117,102,125],
[89,0,94,97,86,99,102,100,105],
[102,117,0,127,113,99,110,97,117],
[71,114,84,0,76,104,96,89,98],
[116,125,98,135,0,106,118,120,117],
[79,112,112,107,105,0,101,94,118],
[94,109,101,115,93,110,0,91,124],
[109,111,114,122,91,117,120,0,108],
[86,106,94,113,94,93,87,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,96,99,110,115,107,103],
[114,0,111,105,101,95,122,102,105],
[99,100,0,100,95,93,102,93,103],
[115,106,111,0,106,101,116,103,105],
[112,110,116,105,0,102,114,103,109],
[101,116,118,110,109,0,112,111,105],
[96,89,109,95,97,99,0,103,105],
[104,109,118,108,108,100,108,0,104],
[108,106,108,106,102,106,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,96,95,109,89,87,95,82],
[115,0,103,93,98,79,80,100,84],
[115,108,0,94,103,102,85,93,92],
[116,118,117,0,120,98,102,104,102],
[102,113,108,91,0,96,81,96,93],
[122,132,109,113,115,0,99,102,114],
[124,131,126,109,130,112,0,120,104],
[116,111,118,107,115,109,91,0,100],
[129,127,119,109,118,97,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,80,84,85,94,96,93,96],
[124,0,107,73,116,105,99,101,106],
[131,104,0,106,107,112,116,113,102],
[127,138,105,0,111,109,124,110,113],
[126,95,104,100,0,108,111,103,103],
[117,106,99,102,103,0,108,104,113],
[115,112,95,87,100,103,0,109,98],
[118,110,98,101,108,107,102,0,106],
[115,105,109,98,108,98,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,126,116,97,102,106,106],
[99,0,93,112,103,96,110,100,108],
[109,118,0,127,108,105,108,114,107],
[85,99,84,0,92,100,98,100,94],
[95,108,103,119,0,100,109,108,111],
[114,115,106,111,111,0,103,116,103],
[109,101,103,113,102,108,0,105,99],
[105,111,97,111,103,95,106,0,110],
[105,103,104,117,100,108,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,127,64,72,80,80,93,90],
[140,0,86,105,100,79,106,78,87],
[84,125,0,94,91,85,108,106,135],
[147,106,117,0,113,60,133,144,110],
[139,111,120,98,0,125,126,102,92],
[131,132,126,151,86,0,147,117,137],
[131,105,103,78,85,64,0,116,113],
[118,133,105,67,109,94,95,0,135],
[121,124,76,101,119,74,98,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,83,111,87,85,117,110,116],
[97,0,93,104,92,96,99,97,127],
[128,118,0,123,122,102,115,131,128],
[100,107,88,0,81,93,104,116,122],
[124,119,89,130,0,107,110,131,123],
[126,115,109,118,104,0,112,130,122],
[94,112,96,107,101,99,0,113,107],
[101,114,80,95,80,81,98,0,109],
[95,84,83,89,88,89,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,117,109,107,112,105,112],
[103,0,112,109,101,101,109,112,106],
[99,99,0,112,109,102,114,115,105],
[94,102,99,0,102,99,111,108,98],
[102,110,102,109,0,94,117,111,106],
[104,110,109,112,117,0,120,120,110],
[99,102,97,100,94,91,0,107,90],
[106,99,96,103,100,91,104,0,111],
[99,105,106,113,105,101,121,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,117,108,121,84,109,111],
[106,0,107,125,102,110,106,108,108],
[109,104,0,108,99,122,104,96,109],
[94,86,103,0,93,102,80,116,96],
[103,109,112,118,0,118,94,101,106],
[90,101,89,109,93,0,103,84,105],
[127,105,107,131,117,108,0,110,116],
[102,103,115,95,110,127,101,0,114],
[100,103,102,115,105,106,95,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,121,107,98,98,94,111,110],
[113,0,124,116,110,103,100,105,108],
[90,87,0,100,102,89,94,96,96],
[104,95,111,0,114,94,104,98,108],
[113,101,109,97,0,112,100,105,103],
[113,108,122,117,99,0,107,104,106],
[117,111,117,107,111,104,0,105,105],
[100,106,115,113,106,107,106,0,105],
[101,103,115,103,108,105,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,79,126,123,83,87,83,124],
[109,0,101,167,127,120,89,69,135],
[132,110,0,131,126,100,84,87,131],
[85,44,80,0,85,87,83,64,118],
[88,84,85,126,0,98,89,73,108],
[128,91,111,124,113,0,147,123,145],
[124,122,127,128,122,64,0,104,115],
[128,142,124,147,138,88,107,0,124],
[87,76,80,93,103,66,96,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,121,105,103,101,111,113,110],
[99,0,93,86,98,89,112,97,95],
[90,118,0,101,105,110,114,112,94],
[106,125,110,0,110,110,122,109,101],
[108,113,106,101,0,100,120,97,103],
[110,122,101,101,111,0,112,106,102],
[100,99,97,89,91,99,0,102,99],
[98,114,99,102,114,105,109,0,96],
[101,116,117,110,108,109,112,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,110,109,83,95,143,112,121],
[104,0,100,113,84,110,108,81,112],
[101,111,0,98,64,105,94,117,105],
[102,98,113,0,82,117,90,78,124],
[128,127,147,129,0,135,136,98,154],
[116,101,106,94,76,0,120,97,129],
[68,103,117,121,75,91,0,89,107],
[99,130,94,133,113,114,122,0,138],
[90,99,106,87,57,82,104,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,87,86,139,124,111,115,84],
[88,0,130,103,113,126,86,115,124],
[124,81,0,98,95,129,91,98,124],
[125,108,113,0,133,138,121,149,102],
[72,98,116,78,0,120,90,90,93],
[87,85,82,73,91,0,78,101,87],
[100,125,120,90,121,133,0,141,117],
[96,96,113,62,121,110,70,0,96],
[127,87,87,109,118,124,94,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,94,89,109,90,107,94],
[115,0,112,114,111,117,106,106,98],
[108,99,0,104,111,100,100,97,116],
[117,97,107,0,102,116,99,103,99],
[122,100,100,109,0,114,107,92,101],
[102,94,111,95,97,0,98,95,107],
[121,105,111,112,104,113,0,108,110],
[104,105,114,108,119,116,103,0,109],
[117,113,95,112,110,104,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,84,103,96,110,108,110,104],
[102,0,116,111,113,103,109,113,105],
[127,95,0,115,109,118,109,114,108],
[108,100,96,0,102,110,98,107,94],
[115,98,102,109,0,104,100,112,104],
[101,108,93,101,107,0,96,113,106],
[103,102,102,113,111,115,0,108,102],
[101,98,97,104,99,98,103,0,101],
[107,106,103,117,107,105,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,117,113,109,108,112,120],
[112,0,102,112,100,103,108,102,103],
[103,109,0,114,108,104,112,103,107],
[94,99,97,0,105,94,105,101,99],
[98,111,103,106,0,103,110,102,110],
[102,108,107,117,108,0,113,106,120],
[103,103,99,106,101,98,0,99,103],
[99,109,108,110,109,105,112,0,105],
[91,108,104,112,101,91,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,121,109,105,114,118,105,97],
[120,0,105,105,105,121,118,114,113],
[90,106,0,128,104,114,106,111,85],
[102,106,83,0,119,110,102,118,119],
[106,106,107,92,0,128,114,111,95],
[97,90,97,101,83,0,85,87,73],
[93,93,105,109,97,126,0,94,102],
[106,97,100,93,100,124,117,0,92],
[114,98,126,92,116,138,109,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,165,165,165,165,165,95,211],
[46,0,46,0,70,0,0,46,46],
[46,165,0,0,70,165,0,141,141],
[46,211,211,0,211,211,141,141,211],
[46,141,141,0,0,95,46,141,141],
[46,211,46,0,116,0,46,46,141],
[46,211,211,70,165,165,0,141,211],
[116,165,70,70,70,165,70,0,211],
[0,165,70,0,70,70,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,113,108,105,112,115,108],
[103,0,107,107,109,116,114,120,112],
[111,104,0,113,103,102,100,110,110],
[98,104,98,0,93,104,97,108,109],
[103,102,108,118,0,108,104,118,113],
[106,95,109,107,103,0,112,118,112],
[99,97,111,114,107,99,0,107,115],
[96,91,101,103,93,93,104,0,101],
[103,99,101,102,98,99,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,97,86,92,93,102,110,93],
[121,0,103,111,112,112,117,113,110],
[114,108,0,92,115,108,115,106,105],
[125,100,119,0,115,115,117,111,104],
[119,99,96,96,0,109,90,111,96],
[118,99,103,96,102,0,101,120,105],
[109,94,96,94,121,110,0,110,103],
[101,98,105,100,100,91,101,0,91],
[118,101,106,107,115,106,108,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,142,152,147,170,101,184,139],
[51,0,130,119,113,89,123,102,87],
[69,81,0,99,90,118,92,122,78],
[59,92,112,0,69,78,78,80,67],
[64,98,121,142,0,100,80,98,80],
[41,122,93,133,111,0,95,131,72],
[110,88,119,133,131,116,0,138,100],
[27,109,89,131,113,80,73,0,44],
[72,124,133,144,131,139,111,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,99,97,105,106,113,111,108],
[118,0,110,110,120,113,127,102,114],
[112,101,0,109,102,103,108,100,103],
[114,101,102,0,117,90,111,101,107],
[106,91,109,94,0,92,109,107,99],
[105,98,108,121,119,0,118,108,107],
[98,84,103,100,102,93,0,98,101],
[100,109,111,110,104,103,113,0,115],
[103,97,108,104,112,104,110,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,128,129,131,120,105,110,129],
[58,0,97,87,80,75,87,60,86],
[83,114,0,108,106,81,100,80,135],
[82,124,103,0,80,106,91,80,114],
[80,131,105,131,0,97,80,98,117],
[91,136,130,105,114,0,106,112,123],
[106,124,111,120,131,105,0,107,116],
[101,151,131,131,113,99,104,0,139],
[82,125,76,97,94,88,95,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,97,102,110,100,109,97],
[100,0,106,101,103,97,109,102,109],
[101,105,0,105,104,103,94,92,102],
[114,110,106,0,108,108,106,99,100],
[109,108,107,103,0,106,102,94,104],
[101,114,108,103,105,0,98,95,96],
[111,102,117,105,109,113,0,98,106],
[102,109,119,112,117,116,113,0,114],
[114,102,109,111,107,115,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,76,96,128,94,96,109,98],
[121,0,95,130,139,115,92,100,124],
[135,116,0,118,134,90,102,95,106],
[115,81,93,0,119,94,97,99,81],
[83,72,77,92,0,72,67,74,72],
[117,96,121,117,139,0,105,113,115],
[115,119,109,114,144,106,0,124,84],
[102,111,116,112,137,98,87,0,108],
[113,87,105,130,139,96,127,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,104,99,111,105,111,103,99],
[95,0,91,93,107,96,102,89,90],
[107,120,0,108,108,100,116,117,114],
[112,118,103,0,108,97,118,106,102],
[100,104,103,103,0,99,116,96,100],
[106,115,111,114,112,0,106,95,105],
[100,109,95,93,95,105,0,104,94],
[108,122,94,105,115,116,107,0,108],
[112,121,97,109,111,106,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,112,80,91,129,122,119,113],
[76,0,122,95,72,111,104,110,102],
[99,89,0,82,90,118,96,98,110],
[131,116,129,0,98,118,109,111,113],
[120,139,121,113,0,110,115,102,111],
[82,100,93,93,101,0,92,112,112],
[89,107,115,102,96,119,0,112,110],
[92,101,113,100,109,99,99,0,96],
[98,109,101,98,100,99,101,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,108,91,105,96,98,106],
[113,0,107,120,107,115,113,104,119],
[109,104,0,105,97,102,103,110,115],
[103,91,106,0,98,108,106,90,109],
[120,104,114,113,0,113,109,110,122],
[106,96,109,103,98,0,93,98,106],
[115,98,108,105,102,118,0,107,114],
[113,107,101,121,101,113,104,0,113],
[105,92,96,102,89,105,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,95,106,106,101,98,88,105],
[102,0,105,109,113,110,108,107,103],
[116,106,0,91,93,113,109,115,96],
[105,102,120,0,105,108,111,99,96],
[105,98,118,106,0,125,107,97,106],
[110,101,98,103,86,0,100,99,90],
[113,103,102,100,104,111,0,101,94],
[123,104,96,112,114,112,110,0,96],
[106,108,115,115,105,121,117,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,114,99,104,97,111,110],
[108,0,113,103,102,101,94,110,107],
[115,98,0,105,106,96,97,117,102],
[97,108,106,0,102,108,109,111,104],
[112,109,105,109,0,106,102,115,112],
[107,110,115,103,105,0,106,114,117],
[114,117,114,102,109,105,0,125,114],
[100,101,94,100,96,97,86,0,103],
[101,104,109,107,99,94,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,87,85,108,107,100,95,102],
[106,0,105,95,102,108,90,100,104],
[124,106,0,111,103,126,99,105,108],
[126,116,100,0,111,122,111,100,114],
[103,109,108,100,0,119,103,99,101],
[104,103,85,89,92,0,95,92,102],
[111,121,112,100,108,116,0,113,114],
[116,111,106,111,112,119,98,0,98],
[109,107,103,97,110,109,97,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,97,120,108,113,107,92,109],
[109,0,85,86,118,108,102,97,100],
[114,126,0,84,120,108,125,102,94],
[91,125,127,0,121,111,129,113,114],
[103,93,91,90,0,104,116,119,96],
[98,103,103,100,107,0,93,109,115],
[104,109,86,82,95,118,0,107,99],
[119,114,109,98,92,102,104,0,107],
[102,111,117,97,115,96,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,105,98,120,111,111,99,114],
[143,0,143,153,126,143,151,101,138],
[106,68,0,100,106,111,135,81,115],
[113,58,111,0,107,102,124,80,115],
[91,85,105,104,0,95,118,65,105],
[100,68,100,109,116,0,117,114,110],
[100,60,76,87,93,94,0,66,83],
[112,110,130,131,146,97,145,0,115],
[97,73,96,96,106,101,128,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,99,92,88,93,97,96],
[115,0,102,117,111,101,94,110,107],
[111,109,0,107,100,101,94,96,106],
[112,94,104,0,95,93,90,106,103],
[119,100,111,116,0,97,107,113,113],
[123,110,110,118,114,0,102,107,116],
[118,117,117,121,104,109,0,119,126],
[114,101,115,105,98,104,92,0,106],
[115,104,105,108,98,95,85,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,120,113,119,101,102,118,117],
[104,0,112,125,118,96,111,120,115],
[91,99,0,105,103,102,108,105,106],
[98,86,106,0,101,89,93,92,97],
[92,93,108,110,0,105,107,98,112],
[110,115,109,122,106,0,107,106,92],
[109,100,103,118,104,104,0,116,106],
[93,91,106,119,113,105,95,0,114],
[94,96,105,114,99,119,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,91,113,103,101,97,97],
[111,0,95,87,98,95,99,93,83],
[110,116,0,106,116,108,102,102,110],
[120,124,105,0,117,112,113,101,114],
[98,113,95,94,0,97,104,98,104],
[108,116,103,99,114,0,99,109,107],
[110,112,109,98,107,112,0,100,96],
[114,118,109,110,113,102,111,0,105],
[114,128,101,97,107,104,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,93,99,109,96,109,101,104],
[113,0,106,113,118,107,106,99,105],
[118,105,0,108,112,110,103,94,99],
[112,98,103,0,115,107,116,105,112],
[102,93,99,96,0,95,102,105,98],
[115,104,101,104,116,0,109,107,109],
[102,105,108,95,109,102,0,100,102],
[110,112,117,106,106,104,111,0,104],
[107,106,112,99,113,102,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,89,103,93,86,88,97,113],
[96,0,96,112,88,79,69,84,96],
[122,115,0,110,109,95,91,90,100],
[108,99,101,0,99,80,84,76,94],
[118,123,102,112,0,121,109,103,104],
[125,132,116,131,90,0,112,117,105],
[123,142,120,127,102,99,0,113,115],
[114,127,121,135,108,94,98,0,105],
[98,115,111,117,107,106,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,115,103,114,95,103,101,112],
[141,0,116,110,121,118,118,104,86],
[96,95,0,114,113,94,118,106,96],
[108,101,97,0,134,102,124,103,112],
[97,90,98,77,0,89,82,78,81],
[116,93,117,109,122,0,124,104,95],
[108,93,93,87,129,87,0,94,107],
[110,107,105,108,133,107,117,0,113],
[99,125,115,99,130,116,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,93,113,102,110,100,136,83],
[102,0,113,114,91,110,117,112,99],
[118,98,0,124,91,123,111,124,113],
[98,97,87,0,93,107,100,100,101],
[109,120,120,118,0,124,114,104,125],
[101,101,88,104,87,0,95,115,77],
[111,94,100,111,97,116,0,115,90],
[75,99,87,111,107,96,96,0,85],
[128,112,98,110,86,134,121,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,100,110,103,98,105,107,96],
[97,0,108,111,96,108,102,115,102],
[111,103,0,118,110,97,121,107,122],
[101,100,93,0,104,80,106,104,100],
[108,115,101,107,0,97,99,128,101],
[113,103,114,131,114,0,131,110,137],
[106,109,90,105,112,80,0,105,107],
[104,96,104,107,83,101,106,0,96],
[115,109,89,111,110,74,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,111,98,107,106,95,100],
[111,0,93,106,98,109,100,116,103],
[108,118,0,111,112,114,103,118,110],
[100,105,100,0,95,104,85,98,110],
[113,113,99,116,0,122,108,119,112],
[104,102,97,107,89,0,85,104,110],
[105,111,108,126,103,126,0,121,107],
[116,95,93,113,92,107,90,0,105],
[111,108,101,101,99,101,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,114,118,92,100,98,114,94],
[116,0,106,110,109,103,103,118,115],
[97,105,0,112,94,77,92,108,90],
[93,101,99,0,92,102,103,110,99],
[119,102,117,119,0,110,105,116,120],
[111,108,134,109,101,0,108,107,91],
[113,108,119,108,106,103,0,118,97],
[97,93,103,101,95,104,93,0,82],
[117,96,121,112,91,120,114,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,111,99,119,109,84,116],
[98,0,95,92,82,100,107,92,99],
[106,116,0,101,103,113,112,106,99],
[100,119,110,0,108,101,113,106,92],
[112,129,108,103,0,112,123,108,94],
[92,111,98,110,99,0,117,100,101],
[102,104,99,98,88,94,0,101,80],
[127,119,105,105,103,111,110,0,101],
[95,112,112,119,117,110,131,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,113,96,121,147,117,83,126],
[93,0,99,92,86,121,93,106,104],
[98,112,0,119,128,138,135,81,96],
[115,119,92,0,142,155,87,85,99],
[90,125,83,69,0,100,98,90,84],
[64,90,73,56,111,0,78,65,84],
[94,118,76,124,113,133,0,92,86],
[128,105,130,126,121,146,119,0,117],
[85,107,115,112,127,127,125,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,101,121,99,111,103,110],
[101,0,105,90,95,93,100,118,105],
[106,106,0,108,126,99,106,106,113],
[110,121,103,0,117,109,111,97,113],
[90,116,85,94,0,91,103,99,100],
[112,118,112,102,120,0,118,121,112],
[100,111,105,100,108,93,0,102,95],
[108,93,105,114,112,90,109,0,94],
[101,106,98,98,111,99,116,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,99,91,104,117,111,112],
[111,0,106,95,91,112,116,112,103],
[100,105,0,108,96,101,124,104,112],
[112,116,103,0,109,106,113,114,112],
[120,120,115,102,0,138,120,131,117],
[107,99,110,105,73,0,110,106,118],
[94,95,87,98,91,101,0,99,110],
[100,99,107,97,80,105,112,0,109],
[99,108,99,99,94,93,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,89,98,88,99,95,109,86],
[112,0,103,104,95,106,108,100,95],
[122,108,0,101,101,112,95,106,105],
[113,107,110,0,112,105,103,108,104],
[123,116,110,99,0,112,105,120,96],
[112,105,99,106,99,0,96,107,103],
[116,103,116,108,106,115,0,93,119],
[102,111,105,103,91,104,118,0,112],
[125,116,106,107,115,108,92,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,108,99,117,115,111,119,114],
[93,0,107,77,103,99,92,108,102],
[103,104,0,90,98,103,98,102,94],
[112,134,121,0,125,126,115,127,101],
[94,108,113,86,0,111,110,111,98],
[96,112,108,85,100,0,99,96,100],
[100,119,113,96,101,112,0,122,101],
[92,103,109,84,100,115,89,0,99],
[97,109,117,110,113,111,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,106,101,118,95,99,100],
[105,0,100,103,112,115,106,106,110],
[110,111,0,100,107,117,96,92,102],
[105,108,111,0,113,113,116,99,105],
[110,99,104,98,0,110,106,94,97],
[93,96,94,98,101,0,81,94,85],
[116,105,115,95,105,130,0,104,103],
[112,105,119,112,117,117,107,0,97],
[111,101,109,106,114,126,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,96,101,97,106,98,102,102],
[125,0,100,105,100,102,99,105,130],
[115,111,0,111,115,120,99,114,117],
[110,106,100,0,103,111,127,108,109],
[114,111,96,108,0,105,117,104,109],
[105,109,91,100,106,0,107,107,113],
[113,112,112,84,94,104,0,113,109],
[109,106,97,103,107,104,98,0,115],
[109,81,94,102,102,98,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,98,116,101,109,119,112,115],
[92,0,97,99,106,94,106,96,100],
[113,114,0,105,108,104,134,109,105],
[95,112,106,0,106,108,121,115,118],
[110,105,103,105,0,106,119,120,110],
[102,117,107,103,105,0,124,107,97],
[92,105,77,90,92,87,0,92,96],
[99,115,102,96,91,104,119,0,102],
[96,111,106,93,101,114,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,136,99,111,126,107,103,100],
[85,0,119,96,103,119,92,110,94],
[75,92,0,101,89,99,88,83,87],
[112,115,110,0,113,126,100,106,115],
[100,108,122,98,0,103,104,100,93],
[85,92,112,85,108,0,91,100,92],
[104,119,123,111,107,120,0,113,109],
[108,101,128,105,111,111,98,0,115],
[111,117,124,96,118,119,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,96,111,91,100,102,125],
[103,0,140,117,122,117,110,114,127],
[95,71,0,77,113,72,106,95,107],
[115,94,134,0,129,101,109,141,139],
[100,89,98,82,0,80,101,100,103],
[120,94,139,110,131,0,116,127,142],
[111,101,105,102,110,95,0,132,114],
[109,97,116,70,111,84,79,0,110],
[86,84,104,72,108,69,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,124,102,121,96,100,105],
[108,0,104,110,99,109,109,106,104],
[109,107,0,106,99,107,112,102,105],
[87,101,105,0,87,94,95,99,88],
[109,112,112,124,0,102,108,110,92],
[90,102,104,117,109,0,104,96,108],
[115,102,99,116,103,107,0,102,107],
[111,105,109,112,101,115,109,0,104],
[106,107,106,123,119,103,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,131,134,148,116,116,113,103],
[59,0,88,85,100,89,92,76,91],
[80,123,0,116,104,94,109,105,114],
[77,126,95,0,113,106,112,100,96],
[63,111,107,98,0,91,98,75,98],
[95,122,117,105,120,0,92,108,119],
[95,119,102,99,113,119,0,97,105],
[98,135,106,111,136,103,114,0,124],
[108,120,97,115,113,92,106,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,125,120,104,119,124,116,105],
[97,0,95,92,101,103,94,94,100],
[86,116,0,95,110,100,114,91,85],
[91,119,116,0,101,100,97,80,91],
[107,110,101,110,0,97,106,98,104],
[92,108,111,111,114,0,113,91,95],
[87,117,97,114,105,98,0,89,88],
[95,117,120,131,113,120,122,0,109],
[106,111,126,120,107,116,123,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,91,103,100,110,100,100,103],
[109,0,104,114,106,106,112,114,106],
[120,107,0,112,105,109,113,115,104],
[108,97,99,0,102,104,97,96,99],
[111,105,106,109,0,114,102,108,102],
[101,105,102,107,97,0,97,107,105],
[111,99,98,114,109,114,0,108,106],
[111,97,96,115,103,104,103,0,100],
[108,105,107,112,109,106,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,96,97,90,108,99,96],
[109,0,98,109,105,96,121,90,105],
[104,113,0,81,107,99,119,96,107],
[115,102,130,0,104,107,130,107,116],
[114,106,104,107,0,101,123,116,109],
[121,115,112,104,110,0,124,106,106],
[103,90,92,81,88,87,0,78,89],
[112,121,115,104,95,105,133,0,116],
[115,106,104,95,102,105,122,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,103,115,106,121,132,110],
[102,0,103,112,102,102,89,113,101],
[102,108,0,119,110,109,102,120,94],
[108,99,92,0,109,106,103,119,95],
[96,109,101,102,0,110,106,120,97],
[105,109,102,105,101,0,101,111,106],
[90,122,109,108,105,110,0,104,102],
[79,98,91,92,91,100,107,0,95],
[101,110,117,116,114,105,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,118,97,109,99,100,101,102],
[122,0,120,94,107,107,102,99,97],
[93,91,0,85,94,98,90,101,87],
[114,117,126,0,122,121,115,120,101],
[102,104,117,89,0,110,96,98,95],
[112,104,113,90,101,0,99,107,110],
[111,109,121,96,115,112,0,102,107],
[110,112,110,91,113,104,109,0,101],
[109,114,124,110,116,101,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,152,126,126,104,131,124,122],
[89,0,104,111,101,88,111,89,101],
[59,107,0,88,89,88,87,89,93],
[85,100,123,0,88,105,97,104,106],
[85,110,122,123,0,85,85,98,105],
[107,123,123,106,126,0,108,103,115],
[80,100,124,114,126,103,0,91,105],
[87,122,122,107,113,108,120,0,88],
[89,110,118,105,106,96,106,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,81,123,99,77,95,110,84],
[107,0,94,110,100,101,106,108,94],
[130,117,0,133,114,123,107,111,100],
[88,101,78,0,106,82,99,81,88],
[112,111,97,105,0,98,108,119,115],
[134,110,88,129,113,0,124,109,123],
[116,105,104,112,103,87,0,99,90],
[101,103,100,130,92,102,112,0,107],
[127,117,111,123,96,88,121,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,165,120,147,122,133,156,93],
[24,0,120,42,67,77,76,100,63],
[46,91,0,61,99,76,93,68,110],
[91,169,150,0,101,106,106,155,87],
[64,144,112,110,0,93,56,132,104],
[89,134,135,105,118,0,118,125,144],
[78,135,118,105,155,93,0,123,108],
[55,111,143,56,79,86,88,0,57],
[118,148,101,124,107,67,103,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,123,68,65,72,89,139,88],
[146,0,121,65,116,103,104,124,106],
[88,90,0,122,48,85,85,152,76],
[143,146,89,0,70,86,81,147,97],
[146,95,163,141,0,131,106,152,126],
[139,108,126,125,80,0,81,185,129],
[122,107,126,130,105,130,0,133,131],
[72,87,59,64,59,26,78,0,59],
[123,105,135,114,85,82,80,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,106,94,99,100,98,103],
[111,0,104,120,95,98,99,90,96],
[101,107,0,106,82,94,86,93,90],
[105,91,105,0,85,82,99,90,93],
[117,116,129,126,0,112,108,103,124],
[112,113,117,129,99,0,127,103,104],
[111,112,125,112,103,84,0,98,97],
[113,121,118,121,108,108,113,0,102],
[108,115,121,118,87,107,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,112,95,103,89,97,99,109],
[123,0,132,118,119,114,104,127,134],
[99,79,0,81,99,87,82,98,99],
[116,93,130,0,99,98,105,109,110],
[108,92,112,112,0,107,99,100,107],
[122,97,124,113,104,0,116,110,97],
[114,107,129,106,112,95,0,113,96],
[112,84,113,102,111,101,98,0,93],
[102,77,112,101,104,114,115,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,107,108,108,121,109,110],
[107,0,109,106,105,115,113,93,96],
[110,102,0,112,101,115,115,105,106],
[104,105,99,0,110,111,103,106,95],
[103,106,110,101,0,114,116,93,102],
[103,96,96,100,97,0,111,102,95],
[90,98,96,108,95,100,0,104,96],
[102,118,106,105,118,109,107,0,108],
[101,115,105,116,109,116,115,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,98,93,106,104,82,108,100],
[131,0,94,106,103,113,112,118,114],
[113,117,0,128,84,108,113,115,119],
[118,105,83,0,109,114,110,103,116],
[105,108,127,102,0,124,119,107,127],
[107,98,103,97,87,0,89,102,106],
[129,99,98,101,92,122,0,119,120],
[103,93,96,108,104,109,92,0,99],
[111,97,92,95,84,105,91,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,132,100,109,95,113,120,124],
[95,0,112,106,109,96,98,111,112],
[79,99,0,99,75,84,103,95,103],
[111,105,112,0,111,114,109,109,112],
[102,102,136,100,0,97,107,114,129],
[116,115,127,97,114,0,105,117,133],
[98,113,108,102,104,106,0,101,106],
[91,100,116,102,97,94,110,0,130],
[87,99,108,99,82,78,105,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,116,116,88,105,95,123,96],
[140,0,136,122,108,95,103,114,140],
[95,75,0,104,94,89,85,93,91],
[95,89,107,0,109,108,112,111,99],
[123,103,117,102,0,96,110,112,103],
[106,116,122,103,115,0,131,123,103],
[116,108,126,99,101,80,0,129,104],
[88,97,118,100,99,88,82,0,95],
[115,71,120,112,108,108,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,153,96,115,137,93,67],
[103,0,144,125,144,99,131,106,125],
[112,67,0,102,80,115,111,115,55],
[58,86,109,0,96,36,131,77,58],
[115,67,131,115,0,103,130,115,58],
[96,112,96,175,108,0,95,115,74],
[74,80,100,80,81,116,0,74,71],
[118,105,96,134,96,96,137,0,67],
[144,86,156,153,153,137,140,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,94,108,101,110,93,104],
[106,0,100,105,97,110,113,100,101],
[109,111,0,110,103,105,126,105,118],
[117,106,101,0,103,106,119,96,100],
[103,114,108,108,0,99,102,98,113],
[110,101,106,105,112,0,100,106,104],
[101,98,85,92,109,111,0,96,102],
[118,111,106,115,113,105,115,0,110],
[107,110,93,111,98,107,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,94,97,92,95,116,100],
[97,0,105,91,94,83,91,102,109],
[102,106,0,90,94,99,93,113,104],
[117,120,121,0,109,105,106,128,111],
[114,117,117,102,0,100,91,116,112],
[119,128,112,106,111,0,99,115,108],
[116,120,118,105,120,112,0,118,118],
[95,109,98,83,95,96,93,0,100],
[111,102,107,100,99,103,93,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,108,114,124,113,106,125,105],
[82,0,93,104,108,110,100,97,106],
[103,118,0,105,116,113,119,108,118],
[97,107,106,0,108,110,102,102,100],
[87,103,95,103,0,116,100,105,93],
[98,101,98,101,95,0,106,103,112],
[105,111,92,109,111,105,0,103,95],
[86,114,103,109,106,108,108,0,117],
[106,105,93,111,118,99,116,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,107,109,115,97,122,94],
[101,0,112,109,98,111,99,122,99],
[100,99,0,97,111,106,98,116,98],
[104,102,114,0,105,113,106,116,99],
[102,113,100,106,0,108,105,114,97],
[96,100,105,98,103,0,99,104,98],
[114,112,113,105,106,112,0,117,110],
[89,89,95,95,97,107,94,0,89],
[117,112,113,112,114,113,101,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,99,104,95,99,106,93],
[109,0,107,92,108,106,100,104,95],
[112,104,0,100,98,98,107,104,98],
[112,119,111,0,115,107,104,108,108],
[107,103,113,96,0,103,111,107,106],
[116,105,113,104,108,0,107,122,104],
[112,111,104,107,100,104,0,99,96],
[105,107,107,103,104,89,112,0,104],
[118,116,113,103,105,107,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,112,123,107,100,98,96,113],
[113,0,112,116,113,101,113,96,106],
[99,99,0,116,109,112,103,94,102],
[88,95,95,0,100,111,106,104,115],
[104,98,102,111,0,97,102,110,98],
[111,110,99,100,114,0,104,94,92],
[113,98,108,105,109,107,0,109,119],
[115,115,117,107,101,117,102,0,113],
[98,105,109,96,113,119,92,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,125,123,120,101,135,102],
[107,0,106,96,108,94,114,101,113],
[105,105,0,103,97,94,107,107,87],
[86,115,108,0,102,89,82,116,107],
[88,103,114,109,0,83,89,107,93],
[91,117,117,122,128,0,96,115,104],
[110,97,104,129,122,115,0,133,103],
[76,110,104,95,104,96,78,0,90],
[109,98,124,104,118,107,108,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,107,116,114,100,109,107],
[108,0,106,101,119,116,109,107,110],
[110,105,0,102,125,118,100,109,114],
[104,110,109,0,124,115,105,113,115],
[95,92,86,87,0,102,96,86,94],
[97,95,93,96,109,0,91,105,101],
[111,102,111,106,115,120,0,110,113],
[102,104,102,98,125,106,101,0,111],
[104,101,97,96,117,110,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,115,102,116,86,96,96],
[113,0,112,118,95,116,104,102,94],
[108,99,0,100,108,118,108,103,97],
[96,93,111,0,106,128,96,98,113],
[109,116,103,105,0,127,113,109,116],
[95,95,93,83,84,0,86,88,99],
[125,107,103,115,98,125,0,100,106],
[115,109,108,113,102,123,111,0,107],
[115,117,114,98,95,112,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,100,131,107,111,99,112,114],
[92,0,118,98,92,102,75,90,98],
[111,93,0,123,115,124,96,85,108],
[80,113,88,0,100,106,82,93,97],
[104,119,96,111,0,107,103,101,121],
[100,109,87,105,104,0,97,75,89],
[112,136,115,129,108,114,0,100,108],
[99,121,126,118,110,136,111,0,133],
[97,113,103,114,90,122,103,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,126,121,117,141,99,128,113],
[126,0,142,105,126,138,132,122,105],
[85,69,0,114,111,102,70,104,74],
[90,106,97,0,123,122,73,103,88],
[94,85,100,88,0,108,93,86,75],
[70,73,109,89,103,0,75,86,67],
[112,79,141,138,118,136,0,129,88],
[83,89,107,108,125,125,82,0,71],
[98,106,137,123,136,144,123,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,93,73,91,40,69,100],
[113,0,118,114,109,123,113,128,104],
[108,93,0,107,121,127,114,91,121],
[118,97,104,0,67,143,84,65,112],
[138,102,90,144,0,152,73,74,166],
[120,88,84,68,59,0,83,82,128],
[171,98,97,127,138,128,0,107,134],
[142,83,120,146,137,129,104,0,161],
[111,107,90,99,45,83,77,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,113,125,125,118,98,97,126],
[78,0,90,128,87,122,95,80,97],
[98,121,0,124,113,113,98,103,77],
[86,83,87,0,127,136,112,115,98],
[86,124,98,84,0,110,94,73,91],
[93,89,98,75,101,0,87,85,107],
[113,116,113,99,117,124,0,115,103],
[114,131,108,96,138,126,96,0,90],
[85,114,134,113,120,104,108,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,111,112,98,109,91,104],
[99,0,96,91,101,96,106,94,96],
[112,115,0,112,109,117,107,98,99],
[100,120,99,0,107,105,115,117,107],
[99,110,102,104,0,101,100,90,99],
[113,115,94,106,110,0,102,102,110],
[102,105,104,96,111,109,0,91,107],
[120,117,113,94,121,109,120,0,104],
[107,115,112,104,112,101,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,106,120,117,127,122,129],
[102,0,112,110,103,125,127,96,95],
[112,99,0,99,108,119,112,129,108],
[105,101,112,0,113,118,123,136,120],
[91,108,103,98,0,116,109,118,106],
[94,86,92,93,95,0,106,112,117],
[84,84,99,88,102,105,0,97,94],
[89,115,82,75,93,99,114,0,91],
[82,116,103,91,105,94,117,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,91,108,115,100,108,97,102],
[98,0,103,95,103,103,106,105,95],
[120,108,0,114,124,96,108,102,108],
[103,116,97,0,103,96,119,119,113],
[96,108,87,108,0,92,106,95,103],
[111,108,115,115,119,0,106,100,115],
[103,105,103,92,105,105,0,108,102],
[114,106,109,92,116,111,103,0,107],
[109,116,103,98,108,96,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,83,103,98,109,107,110,90],
[118,0,100,109,105,101,103,106,93],
[128,111,0,137,129,105,106,130,104],
[108,102,74,0,91,109,98,98,93],
[113,106,82,120,0,96,104,106,101],
[102,110,106,102,115,0,106,109,82],
[104,108,105,113,107,105,0,104,108],
[101,105,81,113,105,102,107,0,119],
[121,118,107,118,110,129,103,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,85,100,100,102,103,95,92],
[115,0,102,122,114,106,111,103,110],
[126,109,0,125,111,102,116,107,108],
[111,89,86,0,105,88,106,95,97],
[111,97,100,106,0,98,109,103,103],
[109,105,109,123,113,0,108,102,108],
[108,100,95,105,102,103,0,89,113],
[116,108,104,116,108,109,122,0,116],
[119,101,103,114,108,103,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,105,105,103,107,99,101],
[104,0,115,109,102,107,97,110,99],
[102,96,0,100,96,100,93,94,100],
[106,102,111,0,105,111,100,107,113],
[106,109,115,106,0,114,112,112,104],
[108,104,111,100,97,0,97,107,102],
[104,114,118,111,99,114,0,97,108],
[112,101,117,104,99,104,114,0,104],
[110,112,111,98,107,109,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,115,109,123,104,123,106,123],
[95,0,107,97,108,105,115,105,112],
[96,104,0,99,106,100,112,93,110],
[102,114,112,0,120,114,117,105,114],
[88,103,105,91,0,93,109,99,117],
[107,106,111,97,118,0,108,109,110],
[88,96,99,94,102,103,0,84,100],
[105,106,118,106,112,102,127,0,111],
[88,99,101,97,94,101,111,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,111,99,101,106,112,94],
[107,0,103,109,95,99,106,110,101],
[108,108,0,108,100,103,114,111,101],
[100,102,103,0,98,101,105,109,97],
[112,116,111,113,0,103,109,116,106],
[110,112,108,110,108,0,114,117,104],
[105,105,97,106,102,97,0,108,95],
[99,101,100,102,95,94,103,0,91],
[117,110,110,114,105,107,116,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,96,94,101,93,106,91,81],
[114,0,106,110,105,107,108,112,100],
[115,105,0,103,107,105,113,107,97],
[117,101,108,0,102,102,102,107,97],
[110,106,104,109,0,107,112,100,95],
[118,104,106,109,104,0,111,99,107],
[105,103,98,109,99,100,0,99,108],
[120,99,104,104,111,112,112,0,95],
[130,111,114,114,116,104,103,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,89,116,106,99,99,95,98],
[114,0,102,129,117,110,125,106,103],
[122,109,0,124,114,116,113,110,88],
[95,82,87,0,92,86,95,97,90],
[105,94,97,119,0,101,106,110,96],
[112,101,95,125,110,0,110,97,107],
[112,86,98,116,105,101,0,108,89],
[116,105,101,114,101,114,103,0,96],
[113,108,123,121,115,104,122,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,111,126,100,110,122,84,131],
[119,0,129,144,118,98,183,121,140],
[100,82,0,125,89,78,117,102,145],
[85,67,86,0,95,65,106,97,133],
[111,93,122,116,0,90,152,123,112],
[101,113,133,146,121,0,133,118,147],
[89,28,94,105,59,78,0,42,109],
[127,90,109,114,88,93,169,0,108],
[80,71,66,78,99,64,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,107,116,106,108,112,100],
[99,0,123,114,114,106,105,115,112],
[97,88,0,100,109,107,102,106,103],
[104,97,111,0,109,109,105,115,101],
[95,97,102,102,0,100,96,107,96],
[105,105,104,102,111,0,100,117,100],
[103,106,109,106,115,111,0,109,99],
[99,96,105,96,104,94,102,0,98],
[111,99,108,110,115,111,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,102,142,106,118,124,126,110],
[91,0,111,127,124,130,120,124,131],
[109,100,0,115,115,115,115,122,111],
[69,84,96,0,109,78,102,100,102],
[105,87,96,102,0,98,105,107,97],
[93,81,96,133,113,0,111,107,121],
[87,91,96,109,106,100,0,105,121],
[85,87,89,111,104,104,106,0,106],
[101,80,100,109,114,90,90,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,116,100,99,108,124,120,128],
[108,0,111,116,105,113,113,114,114],
[95,100,0,121,107,106,121,94,117],
[111,95,90,0,86,101,114,90,104],
[112,106,104,125,0,100,123,114,134],
[103,98,105,110,111,0,119,75,110],
[87,98,90,97,88,92,0,91,105],
[91,97,117,121,97,136,120,0,123],
[83,97,94,107,77,101,106,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,68,97,86,127,102,120,99],
[110,0,104,114,120,122,116,95,79],
[143,107,0,106,120,101,90,125,114],
[114,97,105,0,81,112,74,93,93],
[125,91,91,130,0,128,109,144,90],
[84,89,110,99,83,0,79,107,97],
[109,95,121,137,102,132,0,129,99],
[91,116,86,118,67,104,82,0,79],
[112,132,97,118,121,114,112,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,91,141,126,104,107,118,105],
[99,0,94,112,106,79,83,96,92],
[120,117,0,108,107,111,110,109,102],
[70,99,103,0,107,76,94,82,96],
[85,105,104,104,0,91,80,96,80],
[107,132,100,135,120,0,114,105,114],
[104,128,101,117,131,97,0,106,101],
[93,115,102,129,115,106,105,0,104],
[106,119,109,115,131,97,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,112,101,105,102,123,103],
[99,0,114,91,90,111,95,108,104],
[108,97,0,100,100,111,98,109,91],
[99,120,111,0,108,124,107,122,96],
[110,121,111,103,0,106,105,121,110],
[106,100,100,87,105,0,89,112,103],
[109,116,113,104,106,122,0,128,105],
[88,103,102,89,90,99,83,0,85],
[108,107,120,115,101,108,106,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,109,88,91,110,92,91,116],
[112,0,111,121,101,113,114,101,114],
[102,100,0,92,101,113,109,99,110],
[123,90,119,0,110,119,109,107,105],
[120,110,110,101,0,104,107,101,113],
[101,98,98,92,107,0,95,106,104],
[119,97,102,102,104,116,0,111,112],
[120,110,112,104,110,105,100,0,118],
[95,97,101,106,98,107,99,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,92,91,102,113,121,123],
[113,0,109,96,97,118,83,144,125],
[116,102,0,95,116,100,72,127,127],
[119,115,116,0,121,134,94,142,128],
[120,114,95,90,0,112,104,117,131],
[109,93,111,77,99,0,75,101,126],
[98,128,139,117,107,136,0,132,141],
[90,67,84,69,94,110,79,0,114],
[88,86,84,83,80,85,70,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,96,89,98,103,91,107,92],
[110,0,101,102,98,106,87,91,92],
[115,110,0,94,105,95,90,96,85],
[122,109,117,0,101,101,105,109,112],
[113,113,106,110,0,109,103,99,105],
[108,105,116,110,102,0,108,100,103],
[120,124,121,106,108,103,0,103,95],
[104,120,115,102,112,111,108,0,103],
[119,119,126,99,106,108,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,82,90,91,95,100,91,77],
[118,0,100,110,113,105,111,102,102],
[129,111,0,124,110,116,114,102,99],
[121,101,87,0,94,105,96,107,86],
[120,98,101,117,0,119,110,113,92],
[116,106,95,106,92,0,97,96,106],
[111,100,97,115,101,114,0,102,101],
[120,109,109,104,98,115,109,0,97],
[134,109,112,125,119,105,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,118,102,107,106,100,98,110],
[106,0,123,121,110,106,104,103,108],
[93,88,0,98,97,83,92,96,102],
[109,90,113,0,107,102,102,108,103],
[104,101,114,104,0,97,107,101,101],
[105,105,128,109,114,0,106,103,111],
[111,107,119,109,104,105,0,103,92],
[113,108,115,103,110,108,108,0,101],
[101,103,109,108,110,100,119,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,103,107,113,105,96,102,114],
[96,0,95,102,97,99,93,97,101],
[108,116,0,99,102,96,88,90,98],
[104,109,112,0,106,104,108,108,115],
[98,114,109,105,0,93,102,103,111],
[106,112,115,107,118,0,104,104,120],
[115,118,123,103,109,107,0,104,115],
[109,114,121,103,108,107,107,0,116],
[97,110,113,96,100,91,96,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,110,99,103,109,105,114],
[113,0,112,101,102,101,110,110,118],
[110,99,0,107,101,96,102,99,108],
[101,110,104,0,101,106,100,103,109],
[112,109,110,110,0,107,112,98,116],
[108,110,115,105,104,0,111,100,110],
[102,101,109,111,99,100,0,107,118],
[106,101,112,108,113,111,104,0,108],
[97,93,103,102,95,101,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,19,73,47,91,48,27,75,68],
[192,0,200,171,186,157,147,140,103],
[138,11,0,76,91,48,89,69,68],
[164,40,135,0,94,95,95,75,101],
[120,25,120,117,0,144,112,62,64],
[163,54,163,116,67,0,146,61,74],
[184,64,122,116,99,65,0,75,77],
[136,71,142,136,149,150,136,0,113],
[143,108,143,110,147,137,134,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,114,114,91,107,108,104],
[101,0,104,90,89,92,103,112,93],
[95,107,0,100,86,105,86,128,108],
[97,121,111,0,101,85,95,106,90],
[97,122,125,110,0,107,124,142,117],
[120,119,106,126,104,0,115,141,107],
[104,108,125,116,87,96,0,125,88],
[103,99,83,105,69,70,86,0,83],
[107,118,103,121,94,104,123,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,138,141,107,99,112,104,114],
[115,0,163,144,92,101,104,104,89],
[73,48,0,96,56,99,63,88,64],
[70,67,115,0,92,86,73,116,83],
[104,119,155,119,0,110,98,109,88],
[112,110,112,125,101,0,98,117,96],
[99,107,148,138,113,113,0,127,103],
[107,107,123,95,102,94,84,0,107],
[97,122,147,128,123,115,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,102,99,109,107,102,104,105],
[116,0,93,112,105,110,101,109,112],
[109,118,0,120,104,119,99,115,103],
[112,99,91,0,97,105,98,103,104],
[102,106,107,114,0,100,99,97,98],
[104,101,92,106,111,0,93,92,96],
[109,110,112,113,112,118,0,100,120],
[107,102,96,108,114,119,111,0,116],
[106,99,108,107,113,115,91,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,98,108,98,82,103,97],
[105,0,108,104,116,113,97,101,111],
[106,103,0,106,110,107,97,90,99],
[113,107,105,0,105,111,97,102,101],
[103,95,101,106,0,95,90,92,94],
[113,98,104,100,116,0,90,99,102],
[129,114,114,114,121,121,0,104,111],
[108,110,121,109,119,112,107,0,105],
[114,100,112,110,117,109,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,95,87,81,106,101,108,105],
[103,0,90,99,103,111,105,97,106],
[116,121,0,105,89,113,91,100,111],
[124,112,106,0,109,120,125,105,110],
[130,108,122,102,0,127,111,103,113],
[105,100,98,91,84,0,104,103,103],
[110,106,120,86,100,107,0,95,111],
[103,114,111,106,108,108,116,0,115],
[106,105,100,101,98,108,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,98,134,134,59,114,156,139],
[97,0,123,58,133,44,81,123,116],
[113,88,0,98,130,55,60,58,113],
[77,153,113,0,113,99,113,98,178],
[77,78,81,98,0,55,81,23,135],
[152,167,156,112,156,0,114,156,95],
[97,130,151,98,130,97,0,130,113],
[55,88,153,113,188,55,81,0,113],
[72,95,98,33,76,116,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,102,108,100,108,101,115,105],
[85,0,95,104,109,114,108,126,103],
[109,116,0,114,115,96,113,127,109],
[103,107,97,0,104,98,87,103,101],
[111,102,96,107,0,91,97,112,104],
[103,97,115,113,120,0,109,114,112],
[110,103,98,124,114,102,0,115,104],
[96,85,84,108,99,97,96,0,97],
[106,108,102,110,107,99,107,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,124,168,64,63,119,99,135],
[115,0,104,104,121,115,109,115,101],
[87,107,0,127,61,101,84,29,61],
[43,107,84,0,55,75,84,70,70],
[147,90,150,156,0,116,157,111,179],
[148,96,110,136,95,0,105,53,128],
[92,102,127,127,54,106,0,17,92],
[112,96,182,141,100,158,194,0,185],
[76,110,150,141,32,83,119,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,92,92,118,84,93,117,104],
[106,0,100,88,117,99,111,109,99],
[119,111,0,116,121,103,119,122,109],
[119,123,95,0,131,108,115,111,104],
[93,94,90,80,0,85,95,86,96],
[127,112,108,103,126,0,124,120,116],
[118,100,92,96,116,87,0,108,96],
[94,102,89,100,125,91,103,0,98],
[107,112,102,107,115,95,115,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,95,115,114,115,115,91,105],
[85,0,83,108,103,108,87,90,96],
[116,128,0,107,125,138,112,113,104],
[96,103,104,0,108,117,97,88,88],
[97,108,86,103,0,108,84,85,90],
[96,103,73,94,103,0,101,78,101],
[96,124,99,114,127,110,0,88,123],
[120,121,98,123,126,133,123,0,122],
[106,115,107,123,121,110,88,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,105,119,101,118,115,111],
[105,0,113,104,116,106,110,110,115],
[99,98,0,104,103,105,112,96,106],
[106,107,107,0,115,112,124,115,102],
[92,95,108,96,0,89,105,109,97],
[110,105,106,99,122,0,113,111,104],
[93,101,99,87,106,98,0,95,92],
[96,101,115,96,102,100,116,0,95],
[100,96,105,109,114,107,119,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,96,107,102,94,106,106],
[100,0,88,99,105,90,88,104,99],
[106,123,0,110,109,101,110,111,98],
[115,112,101,0,102,84,103,100,98],
[104,106,102,109,0,95,110,110,104],
[109,121,110,127,116,0,110,105,98],
[117,123,101,108,101,101,0,113,109],
[105,107,100,111,101,106,98,0,88],
[105,112,113,113,107,113,102,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,91,109,104,97,105,116,100],
[96,0,89,96,100,99,98,96,86],
[120,122,0,118,118,115,117,111,104],
[102,115,93,0,109,101,102,109,82],
[107,111,93,102,0,103,109,115,105],
[114,112,96,110,108,0,108,114,99],
[106,113,94,109,102,103,0,112,107],
[95,115,100,102,96,97,99,0,88],
[111,125,107,129,106,112,104,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,69,73,70,90,86,83,84],
[138,0,114,132,113,122,93,139,123],
[142,97,0,115,119,114,115,114,109],
[138,79,96,0,116,80,103,98,117],
[141,98,92,95,0,114,101,94,99],
[121,89,97,131,97,0,105,98,98],
[125,118,96,108,110,106,0,106,135],
[128,72,97,113,117,113,105,0,107],
[127,88,102,94,112,113,76,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,113,120,120,116,125,105,109],
[109,0,98,120,118,120,121,99,110],
[98,113,0,113,113,120,121,110,120],
[91,91,98,0,108,107,113,93,110],
[91,93,98,103,0,105,105,92,102],
[95,91,91,104,106,0,104,88,89],
[86,90,90,98,106,107,0,91,96],
[106,112,101,118,119,123,120,0,107],
[102,101,91,101,109,122,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,98,101,93,93,106,107,98],
[113,0,106,130,99,111,112,129,108],
[113,105,0,115,108,96,109,117,112],
[110,81,96,0,88,93,93,106,110],
[118,112,103,123,0,106,126,122,115],
[118,100,115,118,105,0,120,105,106],
[105,99,102,118,85,91,0,95,88],
[104,82,94,105,89,106,116,0,108],
[113,103,99,101,96,105,123,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,101,96,94,105,93,101],
[110,0,105,94,90,106,120,100,106],
[108,106,0,110,99,97,106,101,103],
[110,117,101,0,106,112,109,106,105],
[115,121,112,105,0,103,125,112,120],
[117,105,114,99,108,0,121,105,110],
[106,91,105,102,86,90,0,91,93],
[118,111,110,105,99,106,120,0,106],
[110,105,108,106,91,101,118,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,104,124,89,106,110,117,115],
[87,0,91,111,83,95,75,97,95],
[107,120,0,125,102,130,110,122,98],
[87,100,86,0,91,96,84,90,83],
[122,128,109,120,0,114,93,110,112],
[105,116,81,115,97,0,70,115,101],
[101,136,101,127,118,141,0,115,89],
[94,114,89,121,101,96,96,0,120],
[96,116,113,128,99,110,122,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,86,116,91,109,89,115],
[100,0,110,90,104,98,113,103,105],
[105,101,0,96,99,116,98,112,116],
[125,121,115,0,111,107,114,96,95],
[95,107,112,100,0,99,122,107,116],
[120,113,95,104,112,0,105,96,123],
[102,98,113,97,89,106,0,103,96],
[122,108,99,115,104,115,108,0,107],
[96,106,95,116,95,88,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,101,107,104,103,104,102],
[115,0,102,105,108,100,101,95,99],
[109,109,0,104,116,106,112,108,108],
[110,106,107,0,112,110,106,103,109],
[104,103,95,99,0,113,103,100,99],
[107,111,105,101,98,0,97,93,108],
[108,110,99,105,108,114,0,96,101],
[107,116,103,108,111,118,115,0,108],
[109,112,103,102,112,103,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,116,117,120,111,135,121],
[99,0,103,104,103,113,111,116,107],
[110,108,0,107,106,112,104,115,107],
[95,107,104,0,107,106,107,118,111],
[94,108,105,104,0,91,98,111,106],
[91,98,99,105,120,0,95,120,109],
[100,100,107,104,113,116,0,111,105],
[76,95,96,93,100,91,100,0,93],
[90,104,104,100,105,102,106,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,100,92,90,97,98,95,103],
[125,0,106,108,118,104,124,107,111],
[111,105,0,104,104,107,108,110,112],
[119,103,107,0,103,98,117,106,114],
[121,93,107,108,0,108,116,97,106],
[114,107,104,113,103,0,112,103,102],
[113,87,103,94,95,99,0,109,105],
[116,104,101,105,114,108,102,0,105],
[108,100,99,97,105,109,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,91,96,77,101,82,98,94],
[113,0,96,118,107,105,103,118,101],
[120,115,0,111,109,98,96,101,109],
[115,93,100,0,100,109,95,110,106],
[134,104,102,111,0,113,99,131,104],
[110,106,113,102,98,0,105,106,95],
[129,108,115,116,112,106,0,109,101],
[113,93,110,101,80,105,102,0,105],
[117,110,102,105,107,116,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,108,108,103,94,102,101],
[101,0,108,118,109,106,108,107,116],
[108,103,0,116,105,114,110,108,112],
[103,93,95,0,106,95,90,105,101],
[103,102,106,105,0,106,93,97,106],
[108,105,97,116,105,0,106,100,109],
[117,103,101,121,118,105,0,106,118],
[109,104,103,106,114,111,105,0,108],
[110,95,99,110,105,102,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,101,96,91,94,91,93],
[109,0,93,104,97,100,101,104,105],
[108,118,0,104,105,104,94,111,103],
[110,107,107,0,109,95,100,107,98],
[115,114,106,102,0,103,95,108,111],
[120,111,107,116,108,0,112,117,98],
[117,110,117,111,116,99,0,112,99],
[120,107,100,104,103,94,99,0,96],
[118,106,108,113,100,113,112,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,125,131,107,108,106,104,125],
[114,0,123,134,112,115,104,111,116],
[86,88,0,115,94,93,99,100,95],
[80,77,96,0,94,104,93,83,107],
[104,99,117,117,0,100,119,97,122],
[103,96,118,107,111,0,107,108,113],
[105,107,112,118,92,104,0,100,82],
[107,100,111,128,114,103,111,0,124],
[86,95,116,104,89,98,129,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,122,126,119,149,104,110,110],
[106,0,111,109,94,109,94,100,91],
[89,100,0,106,115,129,100,99,84],
[85,102,105,0,93,119,85,124,95],
[92,117,96,118,0,148,101,130,79],
[62,102,82,92,63,0,87,117,63],
[107,117,111,126,110,124,0,101,102],
[101,111,112,87,81,94,110,0,63],
[101,120,127,116,132,148,109,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,113,122,122,98,111,119,122],
[94,0,93,108,122,105,101,107,111],
[98,118,0,120,117,123,116,117,106],
[89,103,91,0,96,104,102,111,129],
[89,89,94,115,0,96,104,100,98],
[113,106,88,107,115,0,107,106,104],
[100,110,95,109,107,104,0,123,112],
[92,104,94,100,111,105,88,0,100],
[89,100,105,82,113,107,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,109,115,102,120,107,119],
[104,0,101,100,108,90,104,115,105],
[106,110,0,99,109,106,111,107,109],
[102,111,112,0,113,97,118,110,121],
[96,103,102,98,0,97,104,104,115],
[109,121,105,114,114,0,112,115,118],
[91,107,100,93,107,99,0,100,110],
[104,96,104,101,107,96,111,0,111],
[92,106,102,90,96,93,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,113,110,115,115,112,116],
[110,0,110,113,123,104,111,108,109],
[112,101,0,118,106,106,117,118,98],
[98,98,93,0,103,99,99,92,90],
[101,88,105,108,0,107,109,101,92],
[96,107,105,112,104,0,108,99,95],
[96,100,94,112,102,103,0,105,102],
[99,103,93,119,110,112,106,0,91],
[95,102,113,121,119,116,109,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,107,116,106,111,111,104],
[113,0,109,105,116,103,119,117,117],
[98,102,0,118,108,106,108,106,113],
[104,106,93,0,94,91,87,99,100],
[95,95,103,117,0,100,115,111,115],
[105,108,105,120,111,0,110,115,118],
[100,92,103,124,96,101,0,119,106],
[100,94,105,112,100,96,92,0,102],
[107,94,98,111,96,93,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,107,106,99,101,96,99],
[107,0,115,121,130,114,114,104,92],
[106,96,0,100,110,106,105,98,103],
[104,90,111,0,106,108,105,98,99],
[105,81,101,105,0,95,97,101,93],
[112,97,105,103,116,0,105,108,95],
[110,97,106,106,114,106,0,95,94],
[115,107,113,113,110,103,116,0,107],
[112,119,108,112,118,116,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,119,108,102,100,111,115],
[107,0,120,122,111,94,110,112,114],
[98,91,0,98,106,82,97,96,108],
[92,89,113,0,104,96,110,107,116],
[103,100,105,107,0,93,104,102,102],
[109,117,129,115,118,0,103,105,123],
[111,101,114,101,107,108,0,106,114],
[100,99,115,104,109,106,105,0,110],
[96,97,103,95,109,88,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,118,85,78,84,95,107,97],
[118,0,125,98,99,102,115,114,108],
[93,86,0,72,77,96,90,100,81],
[126,113,139,0,101,103,110,121,96],
[133,112,134,110,0,101,103,123,95],
[127,109,115,108,110,0,112,119,95],
[116,96,121,101,108,99,0,119,102],
[104,97,111,90,88,92,92,0,100],
[114,103,130,115,116,116,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,87,93,119,88,110,101,103],
[111,0,92,107,116,110,122,96,107],
[124,119,0,103,105,114,124,101,112],
[118,104,108,0,117,119,118,108,110],
[92,95,106,94,0,107,112,95,100],
[123,101,97,92,104,0,118,96,103],
[101,89,87,93,99,93,0,86,74],
[110,115,110,103,116,115,125,0,99],
[108,104,99,101,111,108,137,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,103,103,99,119,100,89,108],
[123,0,110,107,111,127,113,103,114],
[108,101,0,116,112,114,114,111,115],
[108,104,95,0,90,118,107,100,106],
[112,100,99,121,0,121,111,109,112],
[92,84,97,93,90,0,91,106,95],
[111,98,97,104,100,120,0,103,108],
[122,108,100,111,102,105,108,0,118],
[103,97,96,105,99,116,103,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,82,99,104,112,89,101,112],
[102,0,113,100,111,116,103,97,104],
[129,98,0,114,117,137,114,111,106],
[112,111,97,0,107,113,120,121,112],
[107,100,94,104,0,104,94,92,110],
[99,95,74,98,107,0,105,85,105],
[122,108,97,91,117,106,0,109,89],
[110,114,100,90,119,126,102,0,100],
[99,107,105,99,101,106,122,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,108,105,104,115,118,115,101],
[84,0,87,94,81,103,94,90,87],
[103,124,0,110,97,120,106,110,107],
[106,117,101,0,97,115,95,122,103],
[107,130,114,114,0,126,115,120,101],
[96,108,91,96,85,0,90,118,91],
[93,117,105,116,96,121,0,109,96],
[96,121,101,89,91,93,102,0,87],
[110,124,104,108,110,120,115,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,107,100,107,108,100,102],
[95,0,110,100,100,100,102,98,98],
[101,101,0,94,96,107,88,99,100],
[104,111,117,0,115,109,119,113,99],
[111,111,115,96,0,105,99,103,111],
[104,111,104,102,106,0,96,99,104],
[103,109,123,92,112,115,0,103,98],
[111,113,112,98,108,112,108,0,110],
[109,113,111,112,100,107,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,103,102,133,95,140,53,88],
[95,0,100,113,116,99,147,98,85],
[108,111,0,82,104,104,127,108,81],
[109,98,129,0,81,120,129,92,74],
[78,95,107,130,0,105,129,79,117],
[116,112,107,91,106,0,146,90,113],
[71,64,84,82,82,65,0,68,58],
[158,113,103,119,132,121,143,0,111],
[123,126,130,137,94,98,153,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,116,119,111,93,91,113],
[105,0,111,105,117,111,107,107,122],
[104,100,0,97,107,99,108,86,115],
[95,106,114,0,121,120,110,89,111],
[92,94,104,90,0,84,88,78,89],
[100,100,112,91,127,0,101,88,113],
[118,104,103,101,123,110,0,106,118],
[120,104,125,122,133,123,105,0,126],
[98,89,96,100,122,98,93,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,99,104,105,132,102,98,121],
[119,0,100,109,128,104,116,107,127],
[112,111,0,127,108,117,102,108,115],
[107,102,84,0,97,123,120,94,104],
[106,83,103,114,0,112,85,85,106],
[79,107,94,88,99,0,104,89,124],
[109,95,109,91,126,107,0,108,114],
[113,104,103,117,126,122,103,0,103],
[90,84,96,107,105,87,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,128,106,107,115,98,129],
[101,0,104,115,109,109,106,93,131],
[95,107,0,111,101,89,113,100,127],
[83,96,100,0,100,78,98,86,108],
[105,102,110,111,0,100,123,90,123],
[104,102,122,133,111,0,109,125,139],
[96,105,98,113,88,102,0,105,102],
[113,118,111,125,121,86,106,0,126],
[82,80,84,103,88,72,109,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,94,99,90,91,93,83,89],
[111,0,105,104,122,102,96,95,99],
[117,106,0,98,94,84,112,106,108],
[112,107,113,0,104,104,111,104,116],
[121,89,117,107,0,97,94,108,105],
[120,109,127,107,114,0,116,99,123],
[118,115,99,100,117,95,0,94,98],
[128,116,105,107,103,112,117,0,124],
[122,112,103,95,106,88,113,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,111,105,125,145,107,115,117],
[87,0,104,91,107,109,86,96,99],
[100,107,0,92,104,110,115,94,117],
[106,120,119,0,124,122,118,102,116],
[86,104,107,87,0,103,111,102,115],
[66,102,101,89,108,0,89,96,96],
[104,125,96,93,100,122,0,91,108],
[96,115,117,109,109,115,120,0,87],
[94,112,94,95,96,115,103,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,98,96,94,102,106,111],
[105,0,110,103,113,110,106,100,108],
[100,101,0,94,113,104,99,96,100],
[113,108,117,0,110,101,106,106,111],
[115,98,98,101,0,104,93,98,103],
[117,101,107,110,107,0,106,94,105],
[109,105,112,105,118,105,0,101,118],
[105,111,115,105,113,117,110,0,109],
[100,103,111,100,108,106,93,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,110,101,107,130,84,116,75],
[128,0,116,116,118,148,96,116,117],
[101,95,0,102,100,132,89,105,93],
[110,95,109,0,134,141,92,119,86],
[104,93,111,77,0,121,99,103,82],
[81,63,79,70,90,0,71,82,56],
[127,115,122,119,112,140,0,124,100],
[95,95,106,92,108,129,87,0,92],
[136,94,118,125,129,155,111,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,122,102,111,112,105,107],
[96,0,111,119,99,104,107,103,106],
[100,100,0,109,101,94,102,96,98],
[89,92,102,0,94,99,98,98,97],
[109,112,110,117,0,104,115,92,95],
[100,107,117,112,107,0,106,101,99],
[99,104,109,113,96,105,0,99,93],
[106,108,115,113,119,110,112,0,104],
[104,105,113,114,116,112,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,117,109,114,113,103,111],
[101,0,101,113,109,113,115,114,113],
[109,110,0,121,121,119,107,104,113],
[94,98,90,0,103,109,105,97,99],
[102,102,90,108,0,103,105,93,105],
[97,98,92,102,108,0,96,93,100],
[98,96,104,106,106,115,0,95,107],
[108,97,107,114,118,118,116,0,109],
[100,98,98,112,106,111,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,101,114,112,110,91,112],
[106,0,99,112,114,112,107,110,115],
[111,112,0,103,121,115,118,104,111],
[110,99,108,0,111,99,106,95,104],
[97,97,90,100,0,104,100,83,101],
[99,99,96,112,107,0,106,96,107],
[101,104,93,105,111,105,0,91,102],
[120,101,107,116,128,115,120,0,113],
[99,96,100,107,110,104,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,116,100,104,111,108,98],
[96,0,106,115,103,102,93,104,87],
[100,105,0,106,94,94,100,95,86],
[95,96,105,0,95,105,105,113,102],
[111,108,117,116,0,111,101,110,106],
[107,109,117,106,100,0,105,90,109],
[100,118,111,106,110,106,0,115,86],
[103,107,116,98,101,121,96,0,100],
[113,124,125,109,105,102,125,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,125,106,115,117,104,107,109],
[103,0,112,104,112,109,103,103,116],
[86,99,0,104,100,101,102,104,96],
[105,107,107,0,123,101,100,96,110],
[96,99,111,88,0,107,116,92,112],
[94,102,110,110,104,0,108,100,112],
[107,108,109,111,95,103,0,95,104],
[104,108,107,115,119,111,116,0,118],
[102,95,115,101,99,99,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,103,111,102,109,86,108],
[107,0,107,107,122,112,110,102,101],
[100,104,0,106,116,102,119,100,105],
[108,104,105,0,114,112,112,111,102],
[100,89,95,97,0,110,107,95,95],
[109,99,109,99,101,0,127,93,114],
[102,101,92,99,104,84,0,98,97],
[125,109,111,100,116,118,113,0,122],
[103,110,106,109,116,97,114,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,95,102,101,109,107,96,103],
[107,0,99,108,99,108,110,108,99],
[116,112,0,106,106,103,105,108,105],
[109,103,105,0,114,116,108,110,105],
[110,112,105,97,0,113,115,106,98],
[102,103,108,95,98,0,102,104,104],
[104,101,106,103,96,109,0,95,106],
[115,103,103,101,105,107,116,0,109],
[108,112,106,106,113,107,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,92,90,110,115,96,106,92],
[115,0,102,98,111,109,99,105,112],
[119,109,0,106,114,111,102,99,119],
[121,113,105,0,114,120,114,108,111],
[101,100,97,97,0,89,95,92,98],
[96,102,100,91,122,0,99,100,106],
[115,112,109,97,116,112,0,111,120],
[105,106,112,103,119,111,100,0,111],
[119,99,92,100,113,105,91,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,99,99,82,99,99,116],
[112,0,116,83,97,85,64,100,80],
[111,95,0,98,129,81,79,116,113],
[112,128,113,0,80,47,33,81,82],
[112,114,82,131,0,83,96,84,113],
[129,126,130,164,128,0,113,99,81],
[112,147,132,178,115,98,0,114,96],
[112,111,95,130,127,112,97,0,127],
[95,131,98,129,98,130,115,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,94,95,106,118,116,88,107],
[108,0,105,109,114,112,114,92,95],
[117,106,0,105,110,111,107,100,101],
[116,102,106,0,109,113,118,121,111],
[105,97,101,102,0,114,110,95,108],
[93,99,100,98,97,0,123,92,88],
[95,97,104,93,101,88,0,95,98],
[123,119,111,90,116,119,116,0,122],
[104,116,110,100,103,123,113,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,104,124,107,99,113,114],
[105,0,102,90,118,122,109,106,103],
[110,109,0,104,105,98,99,117,105],
[107,121,107,0,112,112,99,107,102],
[87,93,106,99,0,93,106,102,85],
[104,89,113,99,118,0,111,124,96],
[112,102,112,112,105,100,0,115,113],
[98,105,94,104,109,87,96,0,96],
[97,108,106,109,126,115,98,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,121,98,96,83,112,97,114],
[103,0,123,99,101,106,108,93,117],
[90,88,0,92,97,84,97,86,108],
[113,112,119,0,110,95,108,105,114],
[115,110,114,101,0,95,104,101,110],
[128,105,127,116,116,0,112,112,116],
[99,103,114,103,107,99,0,102,99],
[114,118,125,106,110,99,109,0,119],
[97,94,103,97,101,95,112,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,102,105,71,80,82,86],
[100,0,80,114,103,95,91,86,97],
[111,131,0,105,85,92,70,93,72],
[109,97,106,0,87,84,85,76,113],
[106,108,126,124,0,108,92,97,97],
[140,116,119,127,103,0,82,107,104],
[131,120,141,126,119,129,0,99,111],
[129,125,118,135,114,104,112,0,118],
[125,114,139,98,114,107,100,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,86,92,101,92,94,84],
[99,0,125,84,105,108,114,98,93],
[101,86,0,82,96,101,104,89,92],
[125,127,129,0,121,136,107,120,96],
[119,106,115,90,0,107,90,104,121],
[110,103,110,75,104,0,104,113,96],
[119,97,107,104,121,107,0,101,105],
[117,113,122,91,107,98,110,0,102],
[127,118,119,115,90,115,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,102,104,102,106,102,84],
[106,0,99,97,107,94,104,101,93],
[100,112,0,113,101,118,116,109,100],
[109,114,98,0,115,98,116,123,126],
[107,104,110,96,0,96,100,98,102],
[109,117,93,113,115,0,99,102,105],
[105,107,95,95,111,112,0,99,103],
[109,110,102,88,113,109,112,0,106],
[127,118,111,85,109,106,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,102,96,108,113,100,103],
[113,0,112,107,97,109,114,106,105],
[106,99,0,97,90,103,98,94,101],
[109,104,114,0,100,108,103,101,106],
[115,114,121,111,0,111,118,104,115],
[103,102,108,103,100,0,101,95,99],
[98,97,113,108,93,110,0,95,104],
[111,105,117,110,107,116,116,0,109],
[108,106,110,105,96,112,107,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,115,121,122,109,120,108,105],
[94,0,100,114,107,105,109,95,95],
[96,111,0,125,110,115,118,104,111],
[90,97,86,0,110,93,103,93,91],
[89,104,101,101,0,100,103,93,90],
[102,106,96,118,111,0,124,94,108],
[91,102,93,108,108,87,0,104,104],
[103,116,107,118,118,117,107,0,97],
[106,116,100,120,121,103,107,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,89,88,100,101,94,101,101],
[112,0,108,101,109,109,102,110,114],
[122,103,0,102,112,113,112,117,117],
[123,110,109,0,127,116,104,109,112],
[111,102,99,84,0,108,100,105,110],
[110,102,98,95,103,0,95,102,106],
[117,109,99,107,111,116,0,103,111],
[110,101,94,102,106,109,108,0,118],
[110,97,94,99,101,105,100,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,119,97,127,93,113,107,112],
[108,0,100,109,101,92,97,114,103],
[92,111,0,99,111,103,99,115,89],
[114,102,112,0,107,85,89,104,90],
[84,110,100,104,0,108,96,102,105],
[118,119,108,126,103,0,103,121,110],
[98,114,112,122,115,108,0,107,115],
[104,97,96,107,109,90,104,0,110],
[99,108,122,121,106,101,96,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,118,118,118,117,99,114,123],
[93,0,101,107,111,98,105,108,104],
[93,110,0,120,115,107,106,115,99],
[93,104,91,0,106,103,103,107,110],
[93,100,96,105,0,93,90,89,114],
[94,113,104,108,118,0,100,98,116],
[112,106,105,108,121,111,0,107,109],
[97,103,96,104,122,113,104,0,107],
[88,107,112,101,97,95,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,76,107,147,137,141,148,119],
[71,0,87,86,114,96,107,132,113],
[135,124,0,105,127,102,124,177,120],
[104,125,106,0,120,132,109,144,110],
[64,97,84,91,0,92,97,96,79],
[74,115,109,79,119,0,132,125,91],
[70,104,87,102,114,79,0,104,112],
[63,79,34,67,115,86,107,0,69],
[92,98,91,101,132,120,99,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,90,100,93,92,91,112],
[102,0,109,91,100,86,93,120,122],
[107,102,0,97,113,108,101,121,102],
[121,120,114,0,110,104,117,128,126],
[111,111,98,101,0,112,117,105,109],
[118,125,103,107,99,0,106,114,92],
[119,118,110,94,94,105,0,128,110],
[120,91,90,83,106,97,83,0,115],
[99,89,109,85,102,119,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,100,105,103,111,98,102,113],
[97,0,100,90,102,103,101,94,106],
[111,111,0,100,105,118,114,98,105],
[106,121,111,0,108,112,107,100,109],
[108,109,106,103,0,112,101,110,114],
[100,108,93,99,99,0,108,90,100],
[113,110,97,104,110,103,0,102,101],
[109,117,113,111,101,121,109,0,115],
[98,105,106,102,97,111,110,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,115,92,98,115,107,109,94],
[116,0,118,100,88,119,94,116,94],
[96,93,0,83,87,98,88,101,79],
[119,111,128,0,115,138,111,125,104],
[113,123,124,96,0,129,101,119,99],
[96,92,113,73,82,0,81,91,92],
[104,117,123,100,110,130,0,110,107],
[102,95,110,86,92,120,101,0,94],
[117,117,132,107,112,119,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,130,92,110,104,105,90,98],
[122,0,106,102,104,100,125,107,117],
[81,105,0,100,82,82,92,93,100],
[119,109,111,0,108,102,113,109,114],
[101,107,129,103,0,106,112,100,109],
[107,111,129,109,105,0,121,93,120],
[106,86,119,98,99,90,0,98,105],
[121,104,118,102,111,118,113,0,125],
[113,94,111,97,102,91,106,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,121,90,60,90,60,120,90],
[149,0,151,89,180,149,90,150,150],
[90,60,0,90,90,60,60,60,121],
[121,122,121,0,122,91,92,91,121],
[151,31,121,89,0,30,60,119,90],
[121,62,151,120,181,0,121,120,150],
[151,121,151,119,151,90,0,149,150],
[91,61,151,120,92,91,62,0,90],
[121,61,90,90,121,61,61,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,93,95,105,99,110,110],
[117,0,103,106,121,138,107,129,123],
[111,108,0,89,107,123,106,123,111],
[118,105,122,0,117,137,117,124,116],
[116,90,104,94,0,114,97,123,111],
[106,73,88,74,97,0,91,118,98],
[112,104,105,94,114,120,0,107,101],
[101,82,88,87,88,93,104,0,81],
[101,88,100,95,100,113,110,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,111,113,128,118,83,113],
[95,0,116,118,98,128,114,81,100],
[101,95,0,91,113,126,96,83,101],
[100,93,120,0,110,129,108,78,111],
[98,113,98,101,0,123,116,92,108],
[83,83,85,82,88,0,111,78,102],
[93,97,115,103,95,100,0,90,93],
[128,130,128,133,119,133,121,0,104],
[98,111,110,100,103,109,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,99,97,87,76,93,96,88],
[125,0,112,125,101,100,94,101,99],
[112,99,0,93,103,99,102,100,106],
[114,86,118,0,90,104,84,96,97],
[124,110,108,121,0,112,107,102,85],
[135,111,112,107,99,0,107,108,119],
[118,117,109,127,104,104,0,109,113],
[115,110,111,115,109,103,102,0,114],
[123,112,105,114,126,92,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,114,105,101,113,97,96],
[110,0,118,117,109,120,119,107,105],
[110,93,0,109,105,92,117,106,95],
[97,94,102,0,97,105,106,95,90],
[106,102,106,114,0,104,119,113,103],
[110,91,119,106,107,0,111,110,112],
[98,92,94,105,92,100,0,102,97],
[114,104,105,116,98,101,109,0,104],
[115,106,116,121,108,99,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,132,140,131,105,132,113,135],
[95,0,131,106,107,109,123,95,137],
[79,80,0,111,116,92,92,103,109],
[71,105,100,0,102,113,115,81,113],
[80,104,95,109,0,115,92,92,110],
[106,102,119,98,96,0,96,94,104],
[79,88,119,96,119,115,0,94,114],
[98,116,108,130,119,117,117,0,117],
[76,74,102,98,101,107,97,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,132,81,78,79,80,80,53],
[159,0,184,54,105,105,79,107,53],
[79,27,0,53,78,79,53,53,53],
[130,157,158,0,157,156,130,79,105],
[133,106,133,54,0,106,107,107,107],
[132,106,132,55,105,0,106,81,81],
[131,132,158,81,104,105,0,133,26],
[131,104,158,132,104,130,78,0,77],
[158,158,158,106,104,130,185,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,134,125,99,128,118,116,137],
[105,0,135,110,132,121,81,129,137],
[77,76,0,105,85,118,98,87,134],
[86,101,106,0,117,109,84,104,119],
[112,79,126,94,0,104,99,79,134],
[83,90,93,102,107,0,104,102,119],
[93,130,113,127,112,107,0,120,130],
[95,82,124,107,132,109,91,0,97],
[74,74,77,92,77,92,81,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,126,126,169,125,84,83,83],
[85,0,86,128,170,126,86,85,85],
[85,125,0,169,170,125,127,83,127],
[85,83,42,0,128,125,83,83,42],
[42,41,41,83,0,83,41,41,41],
[86,85,86,86,128,0,86,0,86],
[127,125,84,128,170,125,0,125,84],
[128,126,128,128,170,211,86,0,170],
[128,126,84,169,170,125,127,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,109,99,114,106,99,117,98],
[95,0,102,103,104,110,83,110,103],
[102,109,0,108,106,97,108,113,103],
[112,108,103,0,116,109,107,113,100],
[97,107,105,95,0,100,105,99,102],
[105,101,114,102,111,0,99,114,105],
[112,128,103,104,106,112,0,122,109],
[94,101,98,98,112,97,89,0,90],
[113,108,108,111,109,106,102,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,111,112,120,121,105,110,112],
[94,0,105,105,106,107,109,111,96],
[100,106,0,99,107,110,110,104,111],
[99,106,112,0,103,108,102,104,106],
[91,105,104,108,0,110,106,101,98],
[90,104,101,103,101,0,101,110,98],
[106,102,101,109,105,110,0,105,103],
[101,100,107,107,110,101,106,0,107],
[99,115,100,105,113,113,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,107,113,100,101,115,102],
[110,0,110,110,105,107,103,114,108],
[108,101,0,102,107,133,101,121,95],
[104,101,109,0,115,119,100,114,98],
[98,106,104,96,0,111,94,106,90],
[111,104,78,92,100,0,90,109,93],
[110,108,110,111,117,121,0,121,101],
[96,97,90,97,105,102,90,0,94],
[109,103,116,113,121,118,110,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,114,99,100,100,109,97],
[102,0,115,108,101,105,105,108,92],
[93,96,0,99,96,86,91,102,85],
[97,103,112,0,110,103,110,105,97],
[112,110,115,101,0,112,107,116,111],
[111,106,125,108,99,0,105,105,99],
[111,106,120,101,104,106,0,106,108],
[102,103,109,106,95,106,105,0,98],
[114,119,126,114,100,112,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,97,114,108,98,98,103,105],
[98,0,100,107,94,100,113,95,111],
[114,111,0,105,107,95,109,106,109],
[97,104,106,0,96,101,105,89,101],
[103,117,104,115,0,101,113,105,104],
[113,111,116,110,110,0,102,103,116],
[113,98,102,106,98,109,0,99,104],
[108,116,105,122,106,108,112,0,105],
[106,100,102,110,107,95,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,96,86,85,112,84,82,95],
[110,0,112,95,115,112,82,100,101],
[115,99,0,94,89,106,87,94,99],
[125,116,117,0,93,104,99,100,85],
[126,96,122,118,0,129,108,115,107],
[99,99,105,107,82,0,80,104,97],
[127,129,124,112,103,131,0,115,100],
[129,111,117,111,96,107,96,0,97],
[116,110,112,126,104,114,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,86,95,102,120,92,107,97],
[129,0,105,96,119,138,115,119,109],
[125,106,0,111,105,128,108,130,105],
[116,115,100,0,114,123,109,118,108],
[109,92,106,97,0,133,108,126,105],
[91,73,83,88,78,0,90,92,97],
[119,96,103,102,103,121,0,105,106],
[104,92,81,93,85,119,106,0,92],
[114,102,106,103,106,114,105,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,98,109,116,102,109,105,110],
[95,0,90,99,114,95,104,92,97],
[113,121,0,101,124,96,119,100,113],
[102,112,110,0,122,89,117,102,103],
[95,97,87,89,0,100,99,90,96],
[109,116,115,122,111,0,123,104,111],
[102,107,92,94,112,88,0,91,97],
[106,119,111,109,121,107,120,0,104],
[101,114,98,108,115,100,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,116,121,117,101,108,109,107],
[95,0,98,110,103,93,99,92,107],
[95,113,0,105,116,102,99,108,107],
[90,101,106,0,101,103,103,98,89],
[94,108,95,110,0,100,98,95,101],
[110,118,109,108,111,0,93,99,115],
[103,112,112,108,113,118,0,100,115],
[102,119,103,113,116,112,111,0,123],
[104,104,104,122,110,96,96,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,0,71,0,34,69,37,69],
[142,0,71,108,71,71,103,108,71],
[211,140,0,211,140,176,174,140,103],
[140,103,0,0,0,71,69,34,69],
[211,140,71,211,0,71,103,142,140],
[177,140,35,140,140,0,103,140,69],
[142,108,37,142,108,108,0,74,71],
[174,103,71,177,69,71,137,0,103],
[142,140,108,142,71,142,140,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,69,109,106,138,78,68,115],
[123,0,94,127,114,147,115,113,151],
[142,117,0,124,75,117,124,101,131],
[102,84,87,0,114,117,96,78,133],
[105,97,136,97,0,136,105,87,136],
[73,64,94,94,75,0,84,64,112],
[133,96,87,115,106,127,0,112,131],
[143,98,110,133,124,147,99,0,143],
[96,60,80,78,75,99,80,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,115,93,110,100,106,118],
[107,0,90,110,90,102,90,88,91],
[105,121,0,113,107,94,97,99,113],
[96,101,98,0,92,85,95,96,86],
[118,121,104,119,0,111,117,110,110],
[101,109,117,126,100,0,107,106,96],
[111,121,114,116,94,104,0,98,94],
[105,123,112,115,101,105,113,0,102],
[93,120,98,125,101,115,117,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,113,98,97,115,103,107],
[106,0,90,108,95,108,99,107,96],
[114,121,0,114,107,100,127,103,105],
[98,103,97,0,105,95,96,90,100],
[113,116,104,106,0,106,113,109,98],
[114,103,111,116,105,0,124,108,100],
[96,112,84,115,98,87,0,95,93],
[108,104,108,121,102,103,116,0,103],
[104,115,106,111,113,111,118,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,102,123,97,113,101,96],
[105,0,105,99,116,87,101,116,101],
[104,106,0,105,109,98,97,114,116],
[109,112,106,0,108,100,109,113,100],
[88,95,102,103,0,85,92,102,114],
[114,124,113,111,126,0,105,107,113],
[98,110,114,102,119,106,0,111,106],
[110,95,97,98,109,104,100,0,96],
[115,110,95,111,97,98,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,101,107,116,111,115,113,112],
[86,0,106,94,116,111,102,93,109],
[110,105,0,103,108,112,102,105,95],
[104,117,108,0,112,112,103,107,110],
[95,95,103,99,0,103,97,96,102],
[100,100,99,99,108,0,105,102,111],
[96,109,109,108,114,106,0,99,108],
[98,118,106,104,115,109,112,0,108],
[99,102,116,101,109,100,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,117,119,93,118,24,71,96],
[140,0,141,71,140,117,118,94,94],
[94,70,0,94,140,71,95,71,71],
[92,140,117,0,116,92,70,116,118],
[118,71,71,95,0,94,71,95,95],
[93,94,140,119,117,0,71,24,96],
[187,93,116,141,140,140,0,141,95],
[140,117,140,95,116,187,70,0,141],
[115,117,140,93,116,115,116,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,92,98,110,96,90,106,105],
[105,0,94,104,109,86,100,97,83],
[119,117,0,105,111,105,103,110,103],
[113,107,106,0,117,101,109,105,106],
[101,102,100,94,0,91,109,98,100],
[115,125,106,110,120,0,103,106,101],
[121,111,108,102,102,108,0,113,107],
[105,114,101,106,113,105,98,0,96],
[106,128,108,105,111,110,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,92,103,105,105,91,90],
[115,0,110,81,103,103,94,100,88],
[105,101,0,90,115,109,103,95,99],
[119,130,121,0,125,124,114,103,107],
[108,108,96,86,0,91,105,98,108],
[106,108,102,87,120,0,98,97,108],
[106,117,108,97,106,113,0,92,103],
[120,111,116,108,113,114,119,0,103],
[121,123,112,104,103,103,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,120,109,97,103,117,91,116],
[124,0,138,87,93,103,115,117,112],
[91,73,0,81,80,73,90,71,93],
[102,124,130,0,115,105,103,104,125],
[114,118,131,96,0,113,106,117,123],
[108,108,138,106,98,0,123,93,101],
[94,96,121,108,105,88,0,82,93],
[120,94,140,107,94,118,129,0,113],
[95,99,118,86,88,110,118,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,106,112,112,109,103,128],
[104,0,92,105,109,101,96,97,116],
[107,119,0,99,111,111,110,108,120],
[105,106,112,0,114,101,108,105,111],
[99,102,100,97,0,101,113,106,109],
[99,110,100,110,110,0,105,106,119],
[102,115,101,103,98,106,0,101,104],
[108,114,103,106,105,105,110,0,108],
[83,95,91,100,102,92,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,141,141,141,141,141,70,211],
[70,0,71,0,141,0,141,0,141],
[70,140,0,70,140,140,141,140,140],
[70,211,141,0,211,211,141,140,211],
[70,70,71,0,0,0,71,0,141],
[70,211,71,0,211,0,141,70,141],
[70,70,70,70,140,70,0,70,140],
[141,211,71,71,211,141,141,0,211],
[0,70,71,0,70,70,71,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,98,101,108,110,118,106,104],
[108,0,112,102,118,106,106,110,113],
[113,99,0,95,112,106,99,105,102],
[110,109,116,0,109,110,105,107,108],
[103,93,99,102,0,94,99,101,99],
[101,105,105,101,117,0,98,107,110],
[93,105,112,106,112,113,0,104,95],
[105,101,106,104,110,104,107,0,109],
[107,98,109,103,112,101,116,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,101,113,111,102,101,107,101],
[92,0,95,111,104,98,95,104,104],
[110,116,0,127,113,105,113,103,108],
[98,100,84,0,89,84,94,93,103],
[100,107,98,122,0,100,105,97,109],
[109,113,106,127,111,0,105,108,113],
[110,116,98,117,106,106,0,104,112],
[104,107,108,118,114,103,107,0,108],
[110,107,103,108,102,98,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,92,87,103,98,91,83],
[98,0,105,99,86,97,99,85,81],
[100,106,0,99,86,82,98,89,88],
[119,112,112,0,98,103,110,101,101],
[124,125,125,113,0,119,118,94,114],
[108,114,129,108,92,0,103,107,108],
[113,112,113,101,93,108,0,105,108],
[120,126,122,110,117,104,106,0,106],
[128,130,123,110,97,103,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,103,108,119,106,105,97],
[107,0,100,105,107,105,104,103,106],
[106,111,0,109,108,114,106,110,94],
[108,106,102,0,111,108,95,100,104],
[103,104,103,100,0,110,110,98,102],
[92,106,97,103,101,0,95,97,97],
[105,107,105,116,101,116,0,100,101],
[106,108,101,111,113,114,111,0,99],
[114,105,117,107,109,114,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,80,101,93,105,114,89],
[104,0,99,107,85,105,123,127,118],
[119,112,0,100,113,93,128,110,112],
[131,104,111,0,136,128,124,123,138],
[110,126,98,75,0,96,110,92,96],
[118,106,118,83,115,0,115,121,88],
[106,88,83,87,101,96,0,105,113],
[97,84,101,88,119,90,106,0,118],
[122,93,99,73,115,123,98,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,109,99,109,93,100,103],
[104,0,125,114,115,119,113,108,102],
[98,86,0,87,95,102,93,110,98],
[102,97,124,0,107,107,104,105,101],
[112,96,116,104,0,117,94,108,96],
[102,92,109,104,94,0,110,103,103],
[118,98,118,107,117,101,0,107,108],
[111,103,101,106,103,108,104,0,96],
[108,109,113,110,115,108,103,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,94,111,93,114,92,107,105],
[112,0,107,115,113,119,104,118,107],
[117,104,0,115,120,107,103,120,98],
[100,96,96,0,95,107,81,96,80],
[118,98,91,116,0,122,103,125,104],
[97,92,104,104,89,0,86,114,102],
[119,107,108,130,108,125,0,120,98],
[104,93,91,115,86,97,91,0,103],
[106,104,113,131,107,109,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,100,107,105,123,114,113],
[106,0,104,116,117,118,111,113,110],
[107,107,0,108,103,104,120,100,108],
[111,95,103,0,104,115,110,97,101],
[104,94,108,107,0,111,120,106,104],
[106,93,107,96,100,0,101,85,99],
[88,100,91,101,91,110,0,87,89],
[97,98,111,114,105,126,124,0,108],
[98,101,103,110,107,112,122,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,146,139,119,120,96,142],
[107,0,102,115,136,135,79,94,125],
[105,109,0,129,141,111,115,110,154],
[65,96,82,0,101,99,101,74,110],
[72,75,70,110,0,98,80,88,98],
[92,76,100,112,113,0,77,87,97],
[91,132,96,110,131,134,0,90,121],
[115,117,101,137,123,124,121,0,130],
[69,86,57,101,113,114,90,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,120,114,103,118,116,107],
[104,0,116,120,92,102,124,110,112],
[110,95,0,112,110,95,134,106,114],
[91,91,99,0,94,94,108,104,85],
[97,119,101,117,0,126,112,103,106],
[108,109,116,117,85,0,103,113,106],
[93,87,77,103,99,108,0,91,98],
[95,101,105,107,108,98,120,0,117],
[104,99,97,126,105,105,113,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,111,117,115,114,106,105],
[101,0,108,100,105,121,99,102,108],
[101,103,0,112,109,116,113,89,103],
[100,111,99,0,104,100,101,83,108],
[94,106,102,107,0,113,102,94,108],
[96,90,95,111,98,0,101,90,98],
[97,112,98,110,109,110,0,99,107],
[105,109,122,128,117,121,112,0,118],
[106,103,108,103,103,113,104,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,129,143,124,114,114,104,123],
[57,0,107,87,91,91,90,73,104],
[82,104,0,86,91,88,92,66,89],
[68,124,125,0,88,58,109,101,89],
[87,120,120,123,0,72,122,99,122],
[97,120,123,153,139,0,139,115,135],
[97,121,119,102,89,72,0,98,95],
[107,138,145,110,112,96,113,0,89],
[88,107,122,122,89,76,116,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,83,88,91,97,92,90,94],
[104,0,112,86,92,87,111,91,78],
[128,99,0,105,117,117,120,92,112],
[123,125,106,0,94,93,121,102,101],
[120,119,94,117,0,98,132,100,106],
[114,124,94,118,113,0,119,103,98],
[119,100,91,90,79,92,0,93,76],
[121,120,119,109,111,108,118,0,93],
[117,133,99,110,105,113,135,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,101,113,103,108,108,111],
[101,0,104,91,98,109,100,104,105],
[106,107,0,109,116,103,105,105,98],
[110,120,102,0,109,105,97,116,112],
[98,113,95,102,0,99,104,104,100],
[108,102,108,106,112,0,102,113,107],
[103,111,106,114,107,109,0,118,104],
[103,107,106,95,107,98,93,0,95],
[100,106,113,99,111,104,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,113,117,128,105,115,120,113],
[90,0,99,109,102,93,105,108,92],
[98,112,0,119,109,107,111,114,93],
[94,102,92,0,103,108,105,107,94],
[83,109,102,108,0,94,102,101,100],
[106,118,104,103,117,0,111,113,99],
[96,106,100,106,109,100,0,111,100],
[91,103,97,104,110,98,100,0,92],
[98,119,118,117,111,112,111,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,107,107,109,105,103,92],
[110,0,104,99,100,119,111,114,109],
[109,107,0,115,107,115,117,108,105],
[104,112,96,0,104,109,105,108,99],
[104,111,104,107,0,114,107,109,104],
[102,92,96,102,97,0,102,102,98],
[106,100,94,106,104,109,0,105,100],
[108,97,103,103,102,109,106,0,104],
[119,102,106,112,107,113,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,97,86,87,60,85,68,107],
[134,0,91,79,114,114,115,122,123],
[114,120,0,69,86,84,85,111,115],
[125,132,142,0,105,96,133,104,142],
[124,97,125,106,0,96,107,90,106],
[151,97,127,115,115,0,87,86,109],
[126,96,126,78,104,124,0,132,124],
[143,89,100,107,121,125,79,0,125],
[104,88,96,69,105,102,87,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,116,102,104,111,99,114],
[99,0,123,130,97,119,103,118,111],
[109,88,0,108,86,105,111,90,109],
[95,81,103,0,93,104,91,81,93],
[109,114,125,118,0,115,122,94,117],
[107,92,106,107,96,0,101,93,97],
[100,108,100,120,89,110,0,92,98],
[112,93,121,130,117,118,119,0,111],
[97,100,102,118,94,114,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,123,89,113,124,138,104,112],
[91,0,91,78,101,104,121,83,106],
[88,120,0,92,110,88,114,84,99],
[122,133,119,0,144,113,138,99,134],
[98,110,101,67,0,106,119,94,108],
[87,107,123,98,105,0,137,104,92],
[73,90,97,73,92,74,0,88,91],
[107,128,127,112,117,107,123,0,105],
[99,105,112,77,103,119,120,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,118,88,119,111,110,123],
[98,0,107,119,107,115,116,113,107],
[110,104,0,106,101,102,110,110,125],
[93,92,105,0,84,109,106,111,115],
[123,104,110,127,0,114,117,118,130],
[92,96,109,102,97,0,106,101,122],
[100,95,101,105,94,105,0,115,114],
[101,98,101,100,93,110,96,0,120],
[88,104,86,96,81,89,97,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,127,114,115,113,109,92,103],
[115,0,104,98,88,100,116,96,120],
[84,107,0,100,88,113,103,98,111],
[97,113,111,0,109,121,114,109,94],
[96,123,123,102,0,113,112,99,110],
[98,111,98,90,98,0,98,97,97],
[102,95,108,97,99,113,0,88,85],
[119,115,113,102,112,114,123,0,98],
[108,91,100,117,101,114,126,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,118,95,97,89,110,117,107],
[87,0,112,89,93,80,92,111,94],
[93,99,0,79,82,95,81,91,78],
[116,122,132,0,114,114,98,117,108],
[114,118,129,97,0,97,100,128,115],
[122,131,116,97,114,0,103,107,100],
[101,119,130,113,111,108,0,130,124],
[94,100,120,94,83,104,81,0,99],
[104,117,133,103,96,111,87,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,101,103,108,91,108,114,102],
[90,0,92,101,111,83,100,92,109],
[110,119,0,122,109,103,126,120,82],
[108,110,89,0,103,81,110,107,117],
[103,100,102,108,0,89,101,90,92],
[120,128,108,130,122,0,114,111,103],
[103,111,85,101,110,97,0,103,95],
[97,119,91,104,121,100,108,0,94],
[109,102,129,94,119,108,116,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,101,101,107,96,107,98],
[99,0,109,92,102,109,112,91,106],
[108,102,0,105,95,111,101,110,103],
[110,119,106,0,97,100,89,107,103],
[110,109,116,114,0,121,100,109,108],
[104,102,100,111,90,0,89,92,99],
[115,99,110,122,111,122,0,111,111],
[104,120,101,104,102,119,100,0,104],
[113,105,108,108,103,112,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,119,108,110,106,107,120],
[106,0,104,116,100,103,113,112,121],
[103,107,0,101,104,106,107,111,120],
[92,95,110,0,101,115,114,101,115],
[103,111,107,110,0,104,117,120,117],
[101,108,105,96,107,0,108,110,112],
[105,98,104,97,94,103,0,111,104],
[104,99,100,110,91,101,100,0,112],
[91,90,91,96,94,99,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,104,104,99,98,103,102],
[112,0,110,101,100,105,114,102,99],
[103,101,0,91,111,111,105,98,97],
[107,110,120,0,103,112,111,114,103],
[107,111,100,108,0,106,107,110,106],
[112,106,100,99,105,0,112,106,96],
[113,97,106,100,104,99,0,107,102],
[108,109,113,97,101,105,104,0,97],
[109,112,114,108,105,115,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,118,121,119,97,81,130],
[117,0,93,97,109,108,109,106,131],
[107,118,0,131,109,109,98,95,95],
[93,114,80,0,83,82,71,81,81],
[90,102,102,128,0,92,103,104,79],
[92,103,102,129,119,0,141,117,94],
[114,102,113,140,108,70,0,80,103],
[130,105,116,130,107,94,131,0,117],
[81,80,116,130,132,117,108,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,132,112,115,131,122,111,92],
[106,0,99,82,123,131,97,107,115],
[79,112,0,90,116,105,107,90,77],
[99,129,121,0,125,130,125,106,113],
[96,88,95,86,0,121,110,85,87],
[80,80,106,81,90,0,99,67,75],
[89,114,104,86,101,112,0,81,72],
[100,104,121,105,126,144,130,0,92],
[119,96,134,98,124,136,139,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,123,118,131,106,109,104,119],
[82,0,85,88,103,82,95,103,98],
[88,126,0,90,99,104,96,104,101],
[93,123,121,0,103,100,105,101,118],
[80,108,112,108,0,95,90,98,107],
[105,129,107,111,116,0,115,116,113],
[102,116,115,106,121,96,0,100,116],
[107,108,107,110,113,95,111,0,92],
[92,113,110,93,104,98,95,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,105,116,110,111,115,120,96],
[89,0,104,112,100,95,104,114,110],
[106,107,0,123,107,104,114,119,102],
[95,99,88,0,93,82,89,101,98],
[101,111,104,118,0,99,114,107,106],
[100,116,107,129,112,0,105,127,102],
[96,107,97,122,97,106,0,115,106],
[91,97,92,110,104,84,96,0,99],
[115,101,109,113,105,109,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,107,109,97,96,94,106,93],
[121,0,113,117,108,109,113,113,101],
[104,98,0,113,103,95,97,101,99],
[102,94,98,0,101,82,97,98,91],
[114,103,108,110,0,100,104,105,112],
[115,102,116,129,111,0,105,115,111],
[117,98,114,114,107,106,0,117,107],
[105,98,110,113,106,96,94,0,104],
[118,110,112,120,99,100,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,86,91,95,100,95,99],
[114,0,112,103,112,97,107,91,98],
[106,99,0,84,109,92,97,90,94],
[125,108,127,0,130,108,112,105,124],
[120,99,102,81,0,93,94,103,102],
[116,114,119,103,118,0,108,110,104],
[111,104,114,99,117,103,0,105,111],
[116,120,121,106,108,101,106,0,111],
[112,113,117,87,109,107,100,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,90,109,103,111,99,99,107],
[93,0,96,99,88,90,93,97,106],
[121,115,0,107,107,108,92,116,115],
[102,112,104,0,106,95,96,106,101],
[108,123,104,105,0,108,98,115,112],
[100,121,103,116,103,0,106,107,118],
[112,118,119,115,113,105,0,111,116],
[112,114,95,105,96,104,100,0,103],
[104,105,96,110,99,93,95,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,115,130,101,127,114,107],
[99,0,94,100,102,98,119,102,97],
[101,117,0,100,112,114,123,93,112],
[96,111,111,0,116,97,112,89,103],
[81,109,99,95,0,97,115,92,97],
[110,113,97,114,114,0,116,94,99],
[84,92,88,99,96,95,0,83,82],
[97,109,118,122,119,117,128,0,109],
[104,114,99,108,114,112,129,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,86,107,93,99,86,98,86],
[132,0,115,119,105,108,133,111,106],
[125,96,0,111,108,106,115,115,95],
[104,92,100,0,88,83,116,98,100],
[118,106,103,123,0,94,112,99,114],
[112,103,105,128,117,0,104,111,109],
[125,78,96,95,99,107,0,96,103],
[113,100,96,113,112,100,115,0,100],
[125,105,116,111,97,102,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,101,86,90,93,110,104,119],
[118,0,105,112,103,94,117,119,112],
[110,106,0,88,72,83,98,94,90],
[125,99,123,0,111,100,135,97,109],
[121,108,139,100,0,113,127,124,132],
[118,117,128,111,98,0,131,112,128],
[101,94,113,76,84,80,0,85,96],
[107,92,117,114,87,99,126,0,126],
[92,99,121,102,79,83,115,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,112,117,111,101,110,116,119],
[101,0,100,99,99,91,101,104,108],
[99,111,0,103,88,104,95,100,109],
[94,112,108,0,109,108,103,107,111],
[100,112,123,102,0,105,97,110,111],
[110,120,107,103,106,0,115,126,117],
[101,110,116,108,114,96,0,127,119],
[95,107,111,104,101,85,84,0,101],
[92,103,102,100,100,94,92,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,108,103,120,100,111,108],
[105,0,103,105,93,111,87,110,90],
[108,108,0,102,109,117,98,108,98],
[103,106,109,0,87,113,94,117,105],
[108,118,102,124,0,121,107,97,96],
[91,100,94,98,90,0,77,99,89],
[111,124,113,117,104,134,0,124,111],
[100,101,103,94,114,112,87,0,99],
[103,121,113,106,115,122,100,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,107,117,108,107,120,101],
[100,0,112,107,110,105,115,108,107],
[107,99,0,108,123,112,115,118,120],
[104,104,103,0,118,91,106,117,100],
[94,101,88,93,0,88,97,101,93],
[103,106,99,120,123,0,117,116,103],
[104,96,96,105,114,94,0,105,109],
[91,103,93,94,110,95,106,0,104],
[110,104,91,111,118,108,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,89,115,107,102,109,103,89],
[116,0,110,122,105,112,112,103,99],
[122,101,0,114,93,102,119,117,104],
[96,89,97,0,80,97,105,103,79],
[104,106,118,131,0,102,125,109,111],
[109,99,109,114,109,0,113,112,95],
[102,99,92,106,86,98,0,95,93],
[108,108,94,108,102,99,116,0,96],
[122,112,107,132,100,116,118,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,104,108,102,91,89,104],
[110,0,110,119,118,117,110,102,127],
[114,101,0,101,107,102,92,96,102],
[107,92,110,0,117,107,105,112,105],
[103,93,104,94,0,84,95,84,86],
[109,94,109,104,127,0,97,99,91],
[120,101,119,106,116,114,0,109,108],
[122,109,115,99,127,112,102,0,110],
[107,84,109,106,125,120,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,100,115,127,116,111,97],
[97,0,101,89,97,126,98,104,92],
[101,110,0,110,97,129,112,114,102],
[111,122,101,0,112,118,117,119,109],
[96,114,114,99,0,127,116,114,114],
[84,85,82,93,84,0,95,100,73],
[95,113,99,94,95,116,0,106,98],
[100,107,97,92,97,111,105,0,89],
[114,119,109,102,97,138,113,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,98,94,116,103,113,108],
[109,0,113,112,113,113,108,107,101],
[97,98,0,109,102,103,99,114,107],
[113,99,102,0,110,107,114,100,95],
[117,98,109,101,0,111,102,99,100],
[95,98,108,104,100,0,106,97,105],
[108,103,112,97,109,105,0,103,105],
[98,104,97,111,112,114,108,0,115],
[103,110,104,116,111,106,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,106,106,99,108,111,105,111],
[93,0,97,114,91,100,108,91,87],
[105,114,0,109,101,101,99,111,94],
[105,97,102,0,94,97,94,101,86],
[112,120,110,117,0,104,112,106,118],
[103,111,110,114,107,0,105,95,89],
[100,103,112,117,99,106,0,110,101],
[106,120,100,110,105,116,101,0,101],
[100,124,117,125,93,122,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,59,30,30,120,60,59,30],
[211,0,121,120,89,120,89,89,118],
[152,90,0,121,120,151,61,119,90],
[181,91,90,0,89,149,61,29,90],
[181,122,91,122,0,182,121,60,89],
[91,91,60,62,29,0,31,60,29],
[151,122,150,150,90,180,0,58,119],
[152,122,92,182,151,151,153,0,151],
[181,93,121,121,122,182,92,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,107,105,111,94,107,98],
[101,0,91,103,104,95,91,100,99],
[107,120,0,111,102,108,113,98,110],
[104,108,100,0,110,108,89,99,94],
[106,107,109,101,0,108,103,102,108],
[100,116,103,103,103,0,99,103,96],
[117,120,98,122,108,112,0,102,102],
[104,111,113,112,109,108,109,0,101],
[113,112,101,117,103,115,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,95,117,97,116,108,102],
[106,0,116,103,125,108,109,108,112],
[107,95,0,96,115,102,113,97,116],
[116,108,115,0,118,103,106,126,127],
[94,86,96,93,0,83,76,108,84],
[114,103,109,108,128,0,121,111,99],
[95,102,98,105,135,90,0,105,105],
[103,103,114,85,103,100,106,0,106],
[109,99,95,84,127,112,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,88,104,103,82,104,104,119],
[121,0,111,113,118,100,103,125,122],
[123,100,0,138,124,118,119,128,122],
[107,98,73,0,116,94,104,108,100],
[108,93,87,95,0,74,107,93,102],
[129,111,93,117,137,0,116,141,133],
[107,108,92,107,104,95,0,101,106],
[107,86,83,103,118,70,110,0,98],
[92,89,89,111,109,78,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,90,87,87,96,98,109,93],
[114,0,97,104,110,115,124,110,106],
[121,114,0,115,105,115,127,128,129],
[124,107,96,0,98,111,125,121,117],
[124,101,106,113,0,109,127,112,125],
[115,96,96,100,102,0,113,107,102],
[113,87,84,86,84,98,0,107,88],
[102,101,83,90,99,104,104,0,101],
[118,105,82,94,86,109,123,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,106,100,100,119,110,120],
[100,0,98,106,105,104,113,100,117],
[99,113,0,114,107,98,115,112,109],
[105,105,97,0,105,104,100,111,104],
[111,106,104,106,0,107,124,105,114],
[111,107,113,107,104,0,117,119,115],
[92,98,96,111,87,94,0,104,90],
[101,111,99,100,106,92,107,0,112],
[91,94,102,107,97,96,121,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,85,105,114,119,107,115,115],
[98,0,87,82,102,103,98,96,113],
[126,124,0,113,128,128,87,117,127],
[106,129,98,0,108,115,99,93,115],
[97,109,83,103,0,115,82,97,108],
[92,108,83,96,96,0,86,92,100],
[104,113,124,112,129,125,0,88,122],
[96,115,94,118,114,119,123,0,134],
[96,98,84,96,103,111,89,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,111,121,110,112,124,130,103],
[124,0,108,127,110,101,121,124,95],
[100,103,0,111,95,95,108,112,96],
[90,84,100,0,94,95,104,121,93],
[101,101,116,117,0,106,114,135,110],
[99,110,116,116,105,0,120,118,97],
[87,90,103,107,97,91,0,105,74],
[81,87,99,90,76,93,106,0,88],
[108,116,115,118,101,114,137,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,99,105,99,105,103,107],
[100,0,111,105,108,101,108,100,98],
[108,100,0,91,102,100,107,99,99],
[112,106,120,0,116,112,115,111,98],
[106,103,109,95,0,100,112,99,106],
[112,110,111,99,111,0,105,106,94],
[106,103,104,96,99,106,0,100,104],
[108,111,112,100,112,105,111,0,113],
[104,113,112,113,105,117,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,86,87,95,118,129,131,96],
[115,0,66,76,94,116,96,75,64],
[125,145,0,105,126,108,137,155,126],
[124,135,106,0,123,124,106,130,97],
[116,117,85,88,0,109,112,123,116],
[93,95,103,87,102,0,85,102,103],
[82,115,74,105,99,126,0,121,102],
[80,136,56,81,88,109,90,0,100],
[115,147,85,114,95,108,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,127,97,116,92,124,123,115],
[103,0,111,118,100,83,120,111,107],
[84,100,0,109,107,89,124,90,85],
[114,93,102,0,113,103,97,98,83],
[95,111,104,98,0,82,106,93,95],
[119,128,122,108,129,0,104,93,106],
[87,91,87,114,105,107,0,106,88],
[88,100,121,113,118,118,105,0,112],
[96,104,126,128,116,105,123,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,117,120,100,108,135,117,107],
[99,0,103,90,95,106,125,118,98],
[94,108,0,105,96,113,127,114,107],
[91,121,106,0,91,111,124,105,107],
[111,116,115,120,0,124,125,135,105],
[103,105,98,100,87,0,111,118,96],
[76,86,84,87,86,100,0,112,76],
[94,93,97,106,76,93,99,0,76],
[104,113,104,104,106,115,135,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,114,111,118,119,108,105],
[98,0,102,93,93,95,114,85,93],
[103,109,0,88,102,105,104,104,98],
[97,118,123,0,103,103,114,108,108],
[100,118,109,108,0,106,117,103,95],
[93,116,106,108,105,0,112,106,109],
[92,97,107,97,94,99,0,103,85],
[103,126,107,103,108,105,108,0,108],
[106,118,113,103,116,102,126,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,106,106,106,101,100,97,98],
[118,0,110,113,101,110,105,107,96],
[105,101,0,114,113,104,111,99,104],
[105,98,97,0,97,98,107,95,89],
[105,110,98,114,0,99,96,92,90],
[110,101,107,113,112,0,105,97,103],
[111,106,100,104,115,106,0,101,93],
[114,104,112,116,119,114,110,0,108],
[113,115,107,122,121,108,118,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,97,119,108,117,109,110],
[100,0,100,86,106,100,92,101,88],
[100,111,0,105,115,111,113,119,107],
[114,125,106,0,111,104,117,118,112],
[92,105,96,100,0,98,105,106,101],
[103,111,100,107,113,0,107,114,111],
[94,119,98,94,106,104,0,107,96],
[102,110,92,93,105,97,104,0,100],
[101,123,104,99,110,100,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,123,115,84,94,105,104,117],
[82,0,124,105,89,106,93,90,111],
[88,87,0,101,93,98,92,90,110],
[96,106,110,0,95,109,86,90,119],
[127,122,118,116,0,102,108,112,121],
[117,105,113,102,109,0,109,112,106],
[106,118,119,125,103,102,0,97,112],
[107,121,121,121,99,99,114,0,106],
[94,100,101,92,90,105,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,98,101,90,95,92,95,93],
[108,0,103,91,101,105,111,98,108],
[113,108,0,99,101,101,102,99,97],
[110,120,112,0,115,103,110,101,101],
[121,110,110,96,0,102,103,100,111],
[116,106,110,108,109,0,106,97,93],
[119,100,109,101,108,105,0,88,106],
[116,113,112,110,111,114,123,0,103],
[118,103,114,110,100,118,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,79,74,105,92,69,96,98],
[136,0,100,109,126,127,106,102,110],
[132,111,0,102,125,114,94,121,130],
[137,102,109,0,121,130,118,138,121],
[106,85,86,90,0,103,94,95,105],
[119,84,97,81,108,0,83,105,107],
[142,105,117,93,117,128,0,114,127],
[115,109,90,73,116,106,97,0,114],
[113,101,81,90,106,104,84,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,111,117,119,114,104,115],
[100,0,117,88,104,110,116,106,112],
[91,94,0,101,90,97,102,104,92],
[100,123,110,0,118,117,117,96,105],
[94,107,121,93,0,109,119,108,90],
[92,101,114,94,102,0,111,100,103],
[97,95,109,94,92,100,0,105,97],
[107,105,107,115,103,111,106,0,101],
[96,99,119,106,121,108,114,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,99,103,117,91,110,102],
[114,0,117,95,97,121,99,110,109],
[99,94,0,92,96,104,95,92,95],
[112,116,119,0,109,122,114,109,100],
[108,114,115,102,0,120,111,118,114],
[94,90,107,89,91,0,101,92,97],
[120,112,116,97,100,110,0,112,102],
[101,101,119,102,93,119,99,0,102],
[109,102,116,111,97,114,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,101,108,108,94,118,105,114],
[83,0,90,75,103,75,98,93,93],
[110,121,0,83,121,105,107,96,93],
[103,136,128,0,110,106,119,105,116],
[103,108,90,101,0,90,110,97,103],
[117,136,106,105,121,0,127,106,110],
[93,113,104,92,101,84,0,94,99],
[106,118,115,106,114,105,117,0,111],
[97,118,118,95,108,101,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,108,98,98,96,94,111,104],
[88,0,99,99,93,92,114,102,102],
[103,112,0,92,97,110,106,121,111],
[113,112,119,0,108,107,113,120,101],
[113,118,114,103,0,127,115,114,109],
[115,119,101,104,84,0,119,104,113],
[117,97,105,98,96,92,0,96,108],
[100,109,90,91,97,107,115,0,112],
[107,109,100,110,102,98,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,103,120,106,97,109,131,109],
[98,0,104,101,86,122,114,116,87],
[108,107,0,90,91,99,89,119,99],
[91,110,121,0,87,102,99,123,105],
[105,125,120,124,0,124,122,134,117],
[114,89,112,109,87,0,105,127,107],
[102,97,122,112,89,106,0,124,117],
[80,95,92,88,77,84,87,0,86],
[102,124,112,106,94,104,94,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,116,102,98,86,84,101,114],
[116,0,119,89,113,108,111,116,109],
[95,92,0,110,124,92,99,118,103],
[109,122,101,0,130,94,98,136,119],
[113,98,87,81,0,99,94,110,124],
[125,103,119,117,112,0,104,100,101],
[127,100,112,113,117,107,0,127,111],
[110,95,93,75,101,111,84,0,114],
[97,102,108,92,87,110,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,105,107,107,105,99,115],
[115,0,114,111,118,107,118,112,102],
[108,97,0,99,106,103,109,103,98],
[106,100,112,0,115,103,106,115,115],
[104,93,105,96,0,101,112,103,100],
[104,104,108,108,110,0,104,107,103],
[106,93,102,105,99,107,0,103,92],
[112,99,108,96,108,104,108,0,105],
[96,109,113,96,111,108,119,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,96,106,87,89,97,103,88],
[140,0,115,121,75,107,104,117,113],
[115,96,0,105,105,102,106,121,91],
[105,90,106,0,87,95,111,121,97],
[124,136,106,124,0,114,117,99,121],
[122,104,109,116,97,0,99,106,90],
[114,107,105,100,94,112,0,101,100],
[108,94,90,90,112,105,110,0,100],
[123,98,120,114,90,121,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,119,96,101,101,105,91,98],
[109,0,115,107,124,119,99,98,101],
[92,96,0,95,99,92,98,101,96],
[115,104,116,0,120,120,103,110,128],
[110,87,112,91,0,102,79,98,89],
[110,92,119,91,109,0,99,102,94],
[106,112,113,108,132,112,0,112,103],
[120,113,110,101,113,109,99,0,114],
[113,110,115,83,122,117,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,99,108,112,106,92,111],
[100,0,100,93,92,106,88,89,96],
[107,111,0,92,100,110,96,91,101],
[112,118,119,0,112,130,100,104,102],
[103,119,111,99,0,113,94,107,99],
[99,105,101,81,98,0,84,85,88],
[105,123,115,111,117,127,0,118,122],
[119,122,120,107,104,126,93,0,107],
[100,115,110,109,112,123,89,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,106,115,125,116,105,107],
[100,0,108,113,120,112,115,102,111],
[98,103,0,103,111,111,110,108,103],
[105,98,108,0,123,118,114,113,104],
[96,91,100,88,0,103,102,100,86],
[86,99,100,93,108,0,99,108,91],
[95,96,101,97,109,112,0,104,104],
[106,109,103,98,111,103,107,0,102],
[104,100,108,107,125,120,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,95,96,105,102,101,109],
[113,0,113,104,102,116,104,114,130],
[116,98,0,109,107,110,102,114,114],
[116,107,102,0,107,112,113,105,120],
[115,109,104,104,0,107,105,114,125],
[106,95,101,99,104,0,108,106,109],
[109,107,109,98,106,103,0,114,118],
[110,97,97,106,97,105,97,0,110],
[102,81,97,91,86,102,93,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,98,108,108,97,107,90],
[106,0,97,99,108,109,108,102,104],
[110,114,0,97,107,112,107,113,112],
[113,112,114,0,124,116,117,111,104],
[103,103,104,87,0,103,100,106,87],
[103,102,99,95,108,0,99,107,106],
[114,103,104,94,111,112,0,109,99],
[104,109,98,100,105,104,102,0,106],
[121,107,99,107,124,105,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,43,83,86,83,126,82,105,105],
[168,0,145,145,168,166,60,123,124],
[128,66,0,85,104,171,126,128,169],
[125,66,126,0,107,169,82,149,127],
[128,43,107,104,0,128,103,105,146],
[85,45,40,42,83,0,38,85,169],
[129,151,85,129,108,173,0,129,131],
[106,88,83,62,106,126,82,0,127],
[106,87,42,84,65,42,80,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,107,98,108,104,93,95],
[113,0,114,99,109,111,114,105,97],
[98,97,0,103,92,101,111,101,95],
[104,112,108,0,101,121,109,99,102],
[113,102,119,110,0,116,125,109,112],
[103,100,110,90,95,0,116,101,97],
[107,97,100,102,86,95,0,92,101],
[118,106,110,112,102,110,119,0,98],
[116,114,116,109,99,114,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,106,101,100,101,94,97],
[110,0,103,109,109,98,103,96,109],
[113,108,0,126,112,122,110,108,104],
[105,102,85,0,105,106,102,100,98],
[110,102,99,106,0,101,90,89,98],
[111,113,89,105,110,0,96,93,104],
[110,108,101,109,121,115,0,111,117],
[117,115,103,111,122,118,100,0,110],
[114,102,107,113,113,107,94,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,115,108,103,100,121,111,114],
[123,0,107,95,110,101,124,127,127],
[96,104,0,92,105,97,120,108,105],
[103,116,119,0,116,114,116,116,115],
[108,101,106,95,0,107,96,112,120],
[111,110,114,97,104,0,114,114,117],
[90,87,91,95,115,97,0,105,105],
[100,84,103,95,99,97,106,0,101],
[97,84,106,96,91,94,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,107,77,91,105,93,103,91],
[78,0,78,91,90,50,91,129,50],
[104,133,0,90,91,91,106,102,90],
[134,120,121,0,132,104,118,144,93],
[120,121,120,79,0,117,121,142,106],
[106,161,120,107,94,0,120,144,95],
[118,120,105,93,90,91,0,116,93],
[108,82,109,67,69,67,95,0,68],
[120,161,121,118,105,116,118,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,105,102,112,106,95,89],
[104,0,103,119,98,111,95,100,98],
[108,108,0,114,100,122,103,109,96],
[106,92,97,0,98,118,84,97,81],
[109,113,111,113,0,120,95,106,98],
[99,100,89,93,91,0,90,85,85],
[105,116,108,127,116,121,0,113,106],
[116,111,102,114,105,126,98,0,95],
[122,113,115,130,113,126,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,116,118,127,122,114,119,118],
[107,0,104,112,106,117,114,117,91],
[95,107,0,116,109,115,105,114,103],
[93,99,95,0,102,123,105,113,102],
[84,105,102,109,0,119,99,106,100],
[89,94,96,88,92,0,92,92,92],
[97,97,106,106,112,119,0,109,103],
[92,94,97,98,105,119,102,0,91],
[93,120,108,109,111,119,108,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,99,120,105,101,106,93],
[97,0,105,99,116,107,107,111,96],
[99,106,0,104,126,90,97,107,90],
[112,112,107,0,118,117,114,111,103],
[91,95,85,93,0,88,87,88,90],
[106,104,121,94,123,0,99,110,106],
[110,104,114,97,124,112,0,121,96],
[105,100,104,100,123,101,90,0,95],
[118,115,121,108,121,105,115,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,88,99,93,95,85,107],
[115,0,108,107,103,110,117,110,115],
[111,103,0,93,111,99,105,91,113],
[123,104,118,0,116,96,115,110,116],
[112,108,100,95,0,97,102,102,103],
[118,101,112,115,114,0,113,105,113],
[116,94,106,96,109,98,0,105,102],
[126,101,120,101,109,106,106,0,115],
[104,96,98,95,108,98,109,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,109,117,115,107,111,113,105],
[95,0,100,106,104,102,101,116,108],
[102,111,0,123,108,111,98,112,119],
[94,105,88,0,96,100,90,104,111],
[96,107,103,115,0,98,99,107,102],
[104,109,100,111,113,0,99,112,113],
[100,110,113,121,112,112,0,121,104],
[98,95,99,107,104,99,90,0,108],
[106,103,92,100,109,98,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,134,92,122,116,101,107,105],
[107,0,123,90,113,110,95,94,101],
[77,88,0,85,108,92,85,73,82],
[119,121,126,0,133,127,119,105,120],
[89,98,103,78,0,103,93,78,107],
[95,101,119,84,108,0,93,91,99],
[110,116,126,92,118,118,0,107,98],
[104,117,138,106,133,120,104,0,114],
[106,110,129,91,104,112,113,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,126,108,104,110,106,107,112],
[100,0,122,115,102,108,115,121,93],
[85,89,0,96,104,103,97,96,90],
[103,96,115,0,109,97,105,108,101],
[107,109,107,102,0,97,110,103,108],
[101,103,108,114,114,0,118,100,91],
[105,96,114,106,101,93,0,99,96],
[104,90,115,103,108,111,112,0,93],
[99,118,121,110,103,120,115,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,122,94,94,124,137,130,95],
[90,0,124,107,105,125,113,120,109],
[89,87,0,92,89,110,92,96,96],
[117,104,119,0,95,135,94,144,96],
[117,106,122,116,0,125,107,105,119],
[87,86,101,76,86,0,86,109,96],
[74,98,119,117,104,125,0,111,91],
[81,91,115,67,106,102,100,0,100],
[116,102,115,115,92,115,120,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,128,92,107,88,124,104,76],
[91,0,123,101,105,79,107,96,85],
[83,88,0,92,81,79,113,80,66],
[119,110,119,0,108,63,146,105,83],
[104,106,130,103,0,93,142,113,95],
[123,132,132,148,118,0,141,99,104],
[87,104,98,65,69,70,0,74,57],
[107,115,131,106,98,112,137,0,106],
[135,126,145,128,116,107,154,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,103,99,106,106,114,112],
[110,0,99,107,106,106,106,113,118],
[109,112,0,105,106,109,110,118,119],
[108,104,106,0,101,106,109,119,118],
[112,105,105,110,0,104,114,119,114],
[105,105,102,105,107,0,99,117,116],
[105,105,101,102,97,112,0,118,109],
[97,98,93,92,92,94,93,0,93],
[99,93,92,93,97,95,102,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,120,87,105,103,109,124,106],
[94,0,106,91,108,95,103,114,86],
[91,105,0,90,93,104,98,111,103],
[124,120,121,0,122,125,123,114,101],
[106,103,118,89,0,103,112,114,91],
[108,116,107,86,108,0,114,118,93],
[102,108,113,88,99,97,0,115,95],
[87,97,100,97,97,93,96,0,80],
[105,125,108,110,120,118,116,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,115,128,106,130,137,99,140],
[109,0,118,130,119,121,116,88,138],
[96,93,0,117,105,94,117,85,112],
[83,81,94,0,84,88,108,83,104],
[105,92,106,127,0,107,108,106,117],
[81,90,117,123,104,0,110,87,118],
[74,95,94,103,103,101,0,82,123],
[112,123,126,128,105,124,129,0,123],
[71,73,99,107,94,93,88,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,113,116,128,117,108,111,99],
[86,0,95,94,92,104,97,100,95],
[98,116,0,104,111,102,105,98,102],
[95,117,107,0,111,114,102,104,115],
[83,119,100,100,0,102,103,87,102],
[94,107,109,97,109,0,106,94,99],
[103,114,106,109,108,105,0,99,101],
[100,111,113,107,124,117,112,0,103],
[112,116,109,96,109,112,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,85,98,98,97,102,102,110],
[116,0,86,103,115,108,109,110,100],
[126,125,0,117,118,131,126,122,104],
[113,108,94,0,106,116,111,102,106],
[113,96,93,105,0,110,116,108,98],
[114,103,80,95,101,0,90,111,107],
[109,102,85,100,95,121,0,105,90],
[109,101,89,109,103,100,106,0,108],
[101,111,107,105,113,104,121,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,109,103,117,120,100,114,109],
[89,0,97,85,106,108,88,107,99],
[102,114,0,94,117,123,106,128,102],
[108,126,117,0,119,124,98,122,114],
[94,105,94,92,0,115,91,112,92],
[91,103,88,87,96,0,82,100,100],
[111,123,105,113,120,129,0,123,111],
[97,104,83,89,99,111,88,0,98],
[102,112,109,97,119,111,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,87,87,78,94,94,85],
[103,0,96,85,93,90,102,89,98],
[109,115,0,104,111,103,103,107,91],
[124,126,107,0,115,92,100,99,104],
[124,118,100,96,0,103,111,103,93],
[133,121,108,119,108,0,102,123,111],
[117,109,108,111,100,109,0,100,94],
[117,122,104,112,108,88,111,0,105],
[126,113,120,107,118,100,117,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,113,98,99,106,95,106],
[99,0,114,119,101,98,114,109,100],
[97,97,0,105,94,99,106,100,99],
[98,92,106,0,92,99,107,91,97],
[113,110,117,119,0,103,115,100,110],
[112,113,112,112,108,0,122,100,112],
[105,97,105,104,96,89,0,94,99],
[116,102,111,120,111,111,117,0,117],
[105,111,112,114,101,99,112,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,87,114,107,121,106,101,105],
[112,0,88,98,112,113,100,96,109],
[124,123,0,105,122,123,106,111,114],
[97,113,106,0,116,118,102,111,109],
[104,99,89,95,0,112,99,88,91],
[90,98,88,93,99,0,102,104,103],
[105,111,105,109,112,109,0,106,109],
[110,115,100,100,123,107,105,0,106],
[106,102,97,102,120,108,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,94,103,108,104,94,90,103],
[116,0,115,113,115,112,105,109,107],
[117,96,0,115,125,120,99,111,99],
[108,98,96,0,109,108,88,92,88],
[103,96,86,102,0,95,100,95,98],
[107,99,91,103,116,0,97,87,100],
[117,106,112,123,111,114,0,100,111],
[121,102,100,119,116,124,111,0,114],
[108,104,112,123,113,111,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,89,88,88,102,101,76,93],
[107,0,107,96,98,118,111,98,100],
[122,104,0,101,105,115,117,104,106],
[123,115,110,0,107,113,110,105,112],
[123,113,106,104,0,118,120,109,114],
[109,93,96,98,93,0,105,85,99],
[110,100,94,101,91,106,0,94,111],
[135,113,107,106,102,126,117,0,115],
[118,111,105,99,97,112,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,165,141,93,116,95,118,140],
[71,0,165,119,96,118,118,141,117],
[46,46,0,71,23,93,22,95,47],
[70,92,140,0,70,117,68,116,92],
[118,115,188,141,0,139,93,141,92],
[95,93,118,94,72,0,70,93,118],
[116,93,189,143,118,141,0,165,116],
[93,70,116,95,70,118,46,0,70],
[71,94,164,119,119,93,95,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,103,106,95,107,92,99],
[112,0,109,115,111,106,119,92,99],
[108,102,0,107,99,104,113,100,94],
[108,96,104,0,107,87,115,101,94],
[105,100,112,104,0,99,113,94,92],
[116,105,107,124,112,0,117,115,105],
[104,92,98,96,98,94,0,93,95],
[119,119,111,110,117,96,118,0,110],
[112,112,117,117,119,106,116,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,111,96,118,92,102,93,105],
[83,0,100,95,86,90,78,98,98],
[100,111,0,90,93,76,90,96,120],
[115,116,121,0,112,95,111,111,127],
[93,125,118,99,0,100,94,108,106],
[119,121,135,116,111,0,96,112,120],
[109,133,121,100,117,115,0,113,127],
[118,113,115,100,103,99,98,0,118],
[106,113,91,84,105,91,84,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,109,124,107,90,80,104],
[117,0,97,136,111,128,124,111,113],
[111,114,0,144,125,114,97,106,107],
[102,75,67,0,111,87,98,115,105],
[87,100,86,100,0,102,76,99,91],
[104,83,97,124,109,0,81,109,84],
[121,87,114,113,135,130,0,116,124],
[131,100,105,96,112,102,95,0,91],
[107,98,104,106,120,127,87,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,97,96,96,95,101,92],
[111,0,101,107,118,100,107,110,109],
[111,110,0,114,106,105,108,112,116],
[114,104,97,0,109,110,102,108,106],
[115,93,105,102,0,101,102,109,105],
[115,111,106,101,110,0,100,114,101],
[116,104,103,109,109,111,0,118,110],
[110,101,99,103,102,97,93,0,101],
[119,102,95,105,106,110,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,100,113,94,99,110,120],
[106,0,106,98,106,102,95,105,106],
[104,105,0,108,114,110,101,117,121],
[111,113,103,0,126,113,112,125,126],
[98,105,97,85,0,95,95,98,104],
[117,109,101,98,116,0,96,110,115],
[112,116,110,99,116,115,0,118,120],
[101,106,94,86,113,101,93,0,102],
[91,105,90,85,107,96,91,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,102,97,112,99,99,101],
[99,0,119,100,103,104,93,103,99],
[105,92,0,117,92,87,92,89,103],
[109,111,94,0,107,95,95,85,92],
[114,108,119,104,0,111,116,100,105],
[99,107,124,116,100,0,105,104,97],
[112,118,119,116,95,106,0,99,115],
[112,108,122,126,111,107,112,0,98],
[110,112,108,119,106,114,96,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,76,93,112,115,153,172,133],
[97,0,95,93,114,96,114,154,116],
[135,116,0,112,112,135,96,134,76],
[118,118,99,0,114,99,134,155,136],
[99,97,99,97,0,98,78,136,98],
[96,115,76,112,113,0,151,133,94],
[58,97,115,77,133,60,0,137,98],
[39,57,77,56,75,78,74,0,77],
[78,95,135,75,113,117,113,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,105,108,114,99,108,112],
[102,0,100,102,99,102,91,107,106],
[103,111,0,102,96,107,83,101,106],
[106,109,109,0,109,103,99,107,102],
[103,112,115,102,0,107,109,109,103],
[97,109,104,108,104,0,104,108,100],
[112,120,128,112,102,107,0,102,118],
[103,104,110,104,102,103,109,0,105],
[99,105,105,109,108,111,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,123,103,124,119,111,136,118],
[89,0,101,102,107,96,96,102,104],
[88,110,0,106,109,102,88,106,98],
[108,109,105,0,113,105,104,111,103],
[87,104,102,98,0,100,89,109,99],
[92,115,109,106,111,0,96,111,118],
[100,115,123,107,122,115,0,121,123],
[75,109,105,100,102,100,90,0,110],
[93,107,113,108,112,93,88,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,99,105,110,107,117,116,98],
[86,0,104,92,107,102,101,104,92],
[112,107,0,114,116,111,93,104,115],
[106,119,97,0,117,115,103,118,115],
[101,104,95,94,0,100,102,97,103],
[104,109,100,96,111,0,104,117,98],
[94,110,118,108,109,107,0,116,108],
[95,107,107,93,114,94,95,0,108],
[113,119,96,96,108,113,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,123,102,113,106,103,114,109],
[102,0,115,97,98,109,101,111,100],
[88,96,0,106,122,88,107,113,105],
[109,114,105,0,119,117,109,109,105],
[98,113,89,92,0,98,102,112,108],
[105,102,123,94,113,0,101,114,104],
[108,110,104,102,109,110,0,110,112],
[97,100,98,102,99,97,101,0,98],
[102,111,106,106,103,107,99,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,108,107,116,103,112,116],
[101,0,107,105,93,112,99,102,101],
[109,104,0,103,104,106,106,111,110],
[103,106,108,0,98,111,114,107,105],
[104,118,107,113,0,119,108,106,107],
[95,99,105,100,92,0,97,89,111],
[108,112,105,97,103,114,0,120,109],
[99,109,100,104,105,122,91,0,100],
[95,110,101,106,104,100,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,141,142,106,86,89,69,105],
[141,0,141,106,122,122,104,122,106],
[70,70,0,71,87,104,87,87,71],
[69,105,140,0,140,86,122,120,87],
[105,89,124,71,0,87,88,105,106],
[125,89,107,125,124,0,90,105,108],
[122,107,124,89,123,121,0,122,88],
[142,89,124,91,106,106,89,0,90],
[106,105,140,124,105,103,123,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,105,114,114,108,99,96],
[105,0,108,93,104,107,93,93,102],
[104,103,0,106,114,115,103,101,102],
[106,118,105,0,102,114,107,104,107],
[97,107,97,109,0,100,94,106,94],
[97,104,96,97,111,0,103,95,99],
[103,118,108,104,117,108,0,115,106],
[112,118,110,107,105,116,96,0,106],
[115,109,109,104,117,112,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,107,91,89,110,90,98,123],
[137,0,141,138,120,126,104,127,135],
[104,70,0,87,108,99,118,112,114],
[120,73,124,0,106,109,116,102,116],
[122,91,103,105,0,103,115,107,115],
[101,85,112,102,108,0,96,96,113],
[121,107,93,95,96,115,0,96,115],
[113,84,99,109,104,115,115,0,107],
[88,76,97,95,96,98,96,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,112,120,90,88,113,95,99],
[132,0,132,131,131,116,125,118,91],
[99,79,0,106,96,81,90,84,75],
[91,80,105,0,70,85,90,90,83],
[121,80,115,141,0,96,127,99,100],
[123,95,130,126,115,0,124,113,98],
[98,86,121,121,84,87,0,91,89],
[116,93,127,121,112,98,120,0,106],
[112,120,136,128,111,113,122,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,59,89,180,121,60,90,149],
[92,0,61,90,151,92,91,61,120],
[152,150,0,150,211,152,91,90,182],
[122,121,61,0,180,152,122,92,182],
[31,60,0,31,0,62,30,61,60],
[90,119,59,59,149,0,120,90,149],
[151,120,120,89,181,91,0,150,150],
[121,150,121,119,150,121,61,0,150],
[62,91,29,29,151,62,61,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,101,112,107,112,121,98,96],
[95,0,104,99,101,101,114,94,94],
[110,107,0,110,107,109,117,92,90],
[99,112,101,0,103,109,111,95,84],
[104,110,104,108,0,115,116,95,111],
[99,110,102,102,96,0,100,93,91],
[90,97,94,100,95,111,0,91,90],
[113,117,119,116,116,118,120,0,103],
[115,117,121,127,100,120,121,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,96,122,81,101,101,91,90],
[122,0,108,117,100,111,118,100,101],
[115,103,0,134,109,108,119,103,112],
[89,94,77,0,76,92,99,76,85],
[130,111,102,135,0,121,124,106,109],
[110,100,103,119,90,0,107,98,99],
[110,93,92,112,87,104,0,105,105],
[120,111,108,135,105,113,106,0,103],
[121,110,99,126,102,112,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,118,105,102,95,90,116],
[101,0,123,138,103,93,101,100,124],
[105,88,0,123,97,91,90,93,104],
[93,73,88,0,93,85,78,95,101],
[106,108,114,118,0,106,100,105,120],
[109,118,120,126,105,0,114,125,120],
[116,110,121,133,111,97,0,113,102],
[121,111,118,116,106,86,98,0,116],
[95,87,107,110,91,91,109,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,91,99,100,92,101,114,100],
[119,0,100,116,99,102,101,105,103],
[120,111,0,114,111,108,116,111,97],
[112,95,97,0,96,96,107,111,100],
[111,112,100,115,0,101,105,112,94],
[119,109,103,115,110,0,110,114,106],
[110,110,95,104,106,101,0,116,109],
[97,106,100,100,99,97,95,0,102],
[111,108,114,111,117,105,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,113,108,96,97,103,120,102],
[119,0,124,103,124,114,114,123,113],
[98,87,0,93,112,88,96,121,101],
[103,108,118,0,116,107,112,133,116],
[115,87,99,95,0,91,103,113,119],
[114,97,123,104,120,0,120,125,121],
[108,97,115,99,108,91,0,112,123],
[91,88,90,78,98,86,99,0,88],
[109,98,110,95,92,90,88,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,77,88,95,86,84,71,73],
[115,0,94,101,123,111,82,115,89],
[134,117,0,116,126,128,114,103,118],
[123,110,95,0,96,116,94,92,99],
[116,88,85,115,0,106,89,95,95],
[125,100,83,95,105,0,88,104,92],
[127,129,97,117,122,123,0,102,98],
[140,96,108,119,116,107,109,0,116],
[138,122,93,112,116,119,113,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,78,92,29,120,89,61,45],
[150,0,119,151,90,104,106,120,135],
[133,92,0,121,76,122,136,106,90],
[119,60,90,0,73,105,120,90,75],
[182,121,135,138,0,152,136,105,121],
[91,107,89,106,59,0,104,88,90],
[122,105,75,91,75,107,0,120,122],
[150,91,105,121,106,123,91,0,105],
[166,76,121,136,90,121,89,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,121,114,120,94,122,104,96],
[118,0,128,103,120,120,106,91,108],
[90,83,0,80,85,92,74,70,92],
[97,108,131,0,117,107,111,106,113],
[91,91,126,94,0,93,96,103,82],
[117,91,119,104,118,0,108,95,105],
[89,105,137,100,115,103,0,98,97],
[107,120,141,105,108,116,113,0,86],
[115,103,119,98,129,106,114,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,116,114,108,107,111,110,110],
[115,0,109,108,105,110,111,117,113],
[95,102,0,100,107,103,102,89,98],
[97,103,111,0,101,103,109,93,106],
[103,106,104,110,0,117,115,109,100],
[104,101,108,108,94,0,94,105,103],
[100,100,109,102,96,117,0,108,91],
[101,94,122,118,102,106,103,0,96],
[101,98,113,105,111,108,120,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,104,109,108,117,116,109,115],
[98,0,98,108,92,109,90,102,108],
[107,113,0,96,92,127,94,87,116],
[102,103,115,0,111,112,112,108,133],
[103,119,119,100,0,91,92,103,122],
[94,102,84,99,120,0,66,84,92],
[95,121,117,99,119,145,0,91,98],
[102,109,124,103,108,127,120,0,104],
[96,103,95,78,89,119,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,108,99,118,113,94,105],
[99,0,112,103,98,105,103,96,101],
[100,99,0,96,91,106,102,100,93],
[103,108,115,0,107,109,112,91,109],
[112,113,120,104,0,103,118,106,104],
[93,106,105,102,108,0,106,101,83],
[98,108,109,99,93,105,0,92,92],
[117,115,111,120,105,110,119,0,104],
[106,110,118,102,107,128,119,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,105,120,122,110,116,114,112],
[90,0,105,95,112,92,114,99,96],
[106,106,0,98,121,102,114,112,117],
[91,116,113,0,117,101,119,113,122],
[89,99,90,94,0,94,99,98,107],
[101,119,109,110,117,0,128,101,112],
[95,97,97,92,112,83,0,105,107],
[97,112,99,98,113,110,106,0,111],
[99,115,94,89,104,99,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,121,117,115,106,104,127,101],
[78,0,93,93,98,95,82,101,83],
[90,118,0,97,119,96,94,110,100],
[94,118,114,0,98,97,110,122,87],
[96,113,92,113,0,96,99,115,105],
[105,116,115,114,115,0,93,120,105],
[107,129,117,101,112,118,0,113,113],
[84,110,101,89,96,91,98,0,100],
[110,128,111,124,106,106,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,100,103,99,86,92,100],
[111,0,108,111,119,112,98,101,114],
[105,103,0,111,112,103,97,99,105],
[111,100,100,0,97,107,96,103,99],
[108,92,99,114,0,105,95,101,87],
[112,99,108,104,106,0,96,87,101],
[125,113,114,115,116,115,0,118,105],
[119,110,112,108,110,124,93,0,110],
[111,97,106,112,124,110,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,80,97,106,109,112,117],
[95,0,88,84,106,96,89,108,102],
[101,123,0,105,106,93,92,110,103],
[131,127,106,0,108,107,102,106,108],
[114,105,105,103,0,90,99,121,91],
[105,115,118,104,121,0,99,125,94],
[102,122,119,109,112,112,0,137,110],
[99,103,101,105,90,86,74,0,90],
[94,109,108,103,120,117,101,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,94,82,108,92,105,99],
[103,0,112,107,85,103,93,94,115],
[101,99,0,100,87,104,95,103,96],
[117,104,111,0,89,101,111,108,105],
[129,126,124,122,0,109,110,134,103],
[103,108,107,110,102,0,104,102,103],
[119,118,116,100,101,107,0,107,108],
[106,117,108,103,77,109,104,0,109],
[112,96,115,106,108,108,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,117,125,96,101,117,110],
[97,0,89,96,121,108,95,107,100],
[108,122,0,119,130,108,105,111,96],
[94,115,92,0,115,95,104,110,102],
[86,90,81,96,0,87,98,96,85],
[115,103,103,116,124,0,92,104,104],
[110,116,106,107,113,119,0,106,97],
[94,104,100,101,115,107,105,0,107],
[101,111,115,109,126,107,114,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,110,115,104,109,103,109],
[103,0,105,114,112,110,108,93,109],
[101,106,0,104,107,112,97,90,105],
[101,97,107,0,98,105,97,100,106],
[96,99,104,113,0,119,98,98,99],
[107,101,99,106,92,0,113,107,108],
[102,103,114,114,113,98,0,101,111],
[108,118,121,111,113,104,110,0,103],
[102,102,106,105,112,103,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,145,110,122,122,93,133,120],
[36,0,78,103,104,78,103,77,76],
[66,133,0,148,121,119,95,105,107],
[101,108,63,0,108,120,107,92,120],
[89,107,90,103,0,67,107,104,118],
[89,133,92,91,144,0,80,91,143],
[118,108,116,104,104,131,0,118,131],
[78,134,106,119,107,120,93,0,121],
[91,135,104,91,93,68,80,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,86,102,82,90,79,86],
[110,0,105,98,99,84,105,85,101],
[113,106,0,91,109,77,95,101,101],
[125,113,120,0,137,99,131,105,121],
[109,112,102,74,0,74,97,111,93],
[129,127,134,112,137,0,128,103,104],
[121,106,116,80,114,83,0,108,106],
[132,126,110,106,100,108,103,0,115],
[125,110,110,90,118,107,105,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,88,78,115,94,106,98,93],
[116,0,123,82,117,112,113,107,111],
[123,88,0,103,108,91,93,85,77],
[133,129,108,0,121,111,99,116,93],
[96,94,103,90,0,103,90,82,97],
[117,99,120,100,108,0,92,113,80],
[105,98,118,112,121,119,0,99,79],
[113,104,126,95,129,98,112,0,89],
[118,100,134,118,114,131,132,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,96,90,95,104,87,88],
[114,0,115,104,102,110,105,106,113],
[106,96,0,95,100,103,110,103,104],
[115,107,116,0,100,92,109,106,101],
[121,109,111,111,0,103,110,108,103],
[116,101,108,119,108,0,111,97,105],
[107,106,101,102,101,100,0,107,96],
[124,105,108,105,103,114,104,0,101],
[123,98,107,110,108,106,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,107,101,94,97,91,107],
[103,0,98,102,101,116,91,88,106],
[102,113,0,110,108,118,107,107,104],
[104,109,101,0,83,108,105,92,99],
[110,110,103,128,0,123,98,111,98],
[117,95,93,103,88,0,105,99,99],
[114,120,104,106,113,106,0,118,117],
[120,123,104,119,100,112,93,0,109],
[104,105,107,112,113,112,94,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,104,109,103,101,109,99],
[114,0,117,110,116,120,117,111,104],
[111,94,0,103,111,103,104,113,104],
[107,101,108,0,110,115,107,112,105],
[102,95,100,101,0,100,102,110,105],
[108,91,108,96,111,0,101,109,101],
[110,94,107,104,109,110,0,110,106],
[102,100,98,99,101,102,101,0,92],
[112,107,107,106,106,110,105,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,122,114,126,120,121,104,123],
[91,0,98,106,115,103,101,102,97],
[89,113,0,108,119,92,118,104,107],
[97,105,103,0,114,118,123,115,98],
[85,96,92,97,0,110,106,102,97],
[91,108,119,93,101,0,97,108,95],
[90,110,93,88,105,114,0,102,93],
[107,109,107,96,109,103,109,0,117],
[88,114,104,113,114,116,118,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,114,118,99,109,99,96],
[106,0,113,123,112,120,117,89,107],
[99,98,0,102,103,103,106,98,101],
[97,88,109,0,94,102,105,88,106],
[93,99,108,117,0,102,114,87,106],
[112,91,108,109,109,0,115,102,104],
[102,94,105,106,97,96,0,97,112],
[112,122,113,123,124,109,114,0,101],
[115,104,110,105,105,107,99,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,118,103,105,103,128,108,96],
[99,0,100,86,92,105,125,95,92],
[93,111,0,93,102,88,111,90,87],
[108,125,118,0,114,100,125,101,130],
[106,119,109,97,0,116,107,92,114],
[108,106,123,111,95,0,120,88,109],
[83,86,100,86,104,91,0,70,86],
[103,116,121,110,119,123,141,0,113],
[115,119,124,81,97,102,125,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,121,105,87,120,116,116,107],
[95,0,120,100,81,103,93,116,96],
[90,91,0,79,94,106,97,97,89],
[106,111,132,0,99,119,113,125,105],
[124,130,117,112,0,120,128,133,101],
[91,108,105,92,91,0,108,95,91],
[95,118,114,98,83,103,0,91,90],
[95,95,114,86,78,116,120,0,89],
[104,115,122,106,110,120,121,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,107,104,98,87,97,102],
[115,0,103,100,109,109,107,110,103],
[114,108,0,105,99,98,94,102,94],
[104,111,106,0,111,108,102,105,112],
[107,102,112,100,0,104,96,110,103],
[113,102,113,103,107,0,115,106,106],
[124,104,117,109,115,96,0,114,112],
[114,101,109,106,101,105,97,0,101],
[109,108,117,99,108,105,99,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,94,93,101,104,104,104],
[107,0,111,98,97,112,110,99,101],
[106,100,0,96,85,98,108,104,106],
[117,113,115,0,97,112,116,102,113],
[118,114,126,114,0,115,118,115,105],
[110,99,113,99,96,0,100,106,90],
[107,101,103,95,93,111,0,101,109],
[107,112,107,109,96,105,110,0,100],
[107,110,105,98,106,121,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,109,94,95,94,96,94,103],
[114,0,100,94,84,106,96,102,87],
[102,111,0,100,112,100,99,99,98],
[117,117,111,0,97,110,101,105,117],
[116,127,99,114,0,114,113,102,134],
[117,105,111,101,97,0,114,104,112],
[115,115,112,110,98,97,0,113,102],
[117,109,112,106,109,107,98,0,109],
[108,124,113,94,77,99,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,121,104,106,113,103,115,114],
[81,0,100,81,87,91,93,114,93],
[90,111,0,111,92,104,94,95,98],
[107,130,100,0,92,115,110,117,118],
[105,124,119,119,0,122,130,132,122],
[98,120,107,96,89,0,88,92,107],
[108,118,117,101,81,123,0,107,92],
[96,97,116,94,79,119,104,0,111],
[97,118,113,93,89,104,119,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,100,102,103,101,124,91,98],
[123,0,104,107,102,111,106,108,105],
[111,107,0,103,108,106,112,99,109],
[109,104,108,0,109,102,100,102,110],
[108,109,103,102,0,114,117,106,110],
[110,100,105,109,97,0,107,82,102],
[87,105,99,111,94,104,0,94,97],
[120,103,112,109,105,129,117,0,128],
[113,106,102,101,101,109,114,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,122,108,105,115,131,117,106],
[102,0,96,117,94,96,118,99,116],
[89,115,0,116,126,115,108,115,110],
[103,94,95,0,104,107,109,90,104],
[106,117,85,107,0,108,134,89,97],
[96,115,96,104,103,0,118,93,114],
[80,93,103,102,77,93,0,83,84],
[94,112,96,121,122,118,128,0,109],
[105,95,101,107,114,97,127,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,98,98,95,102,122,118],
[105,0,109,111,106,94,100,116,109],
[109,102,0,88,101,98,97,109,107],
[113,100,123,0,100,109,98,132,116],
[113,105,110,111,0,95,99,124,106],
[116,117,113,102,116,0,111,112,118],
[109,111,114,113,112,100,0,120,115],
[89,95,102,79,87,99,91,0,105],
[93,102,104,95,105,93,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,109,106,109,101,93,106],
[106,0,110,103,99,90,108,118,116],
[99,101,0,101,96,99,99,103,94],
[102,108,110,0,97,102,111,107,107],
[105,112,115,114,0,110,103,117,106],
[102,121,112,109,101,0,113,119,109],
[110,103,112,100,108,98,0,104,110],
[118,93,108,104,94,92,107,0,100],
[105,95,117,104,105,102,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,99,121,93,71,111,103,100],
[128,0,149,129,101,106,142,101,140],
[112,62,0,122,101,89,101,111,79],
[90,82,89,0,100,78,81,111,100],
[118,110,110,111,0,88,120,101,109],
[140,105,122,133,123,0,122,142,101],
[100,69,110,130,91,89,0,109,103],
[108,110,100,100,110,69,102,0,109],
[111,71,132,111,102,110,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,115,109,106,107,96,93,109],
[110,0,115,105,100,117,94,99,114],
[96,96,0,106,102,111,91,88,111],
[102,106,105,0,88,109,85,97,105],
[105,111,109,123,0,110,108,104,117],
[104,94,100,102,101,0,92,101,107],
[115,117,120,126,103,119,0,111,119],
[118,112,123,114,107,110,100,0,121],
[102,97,100,106,94,104,92,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,99,103,100,98,110,110],
[99,0,111,105,103,98,103,111,100],
[103,100,0,106,105,104,102,116,98],
[112,106,105,0,102,103,103,107,106],
[108,108,106,109,0,109,109,111,100],
[111,113,107,108,102,0,117,113,108],
[113,108,109,108,102,94,0,110,113],
[101,100,95,104,100,98,101,0,100],
[101,111,113,105,111,103,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,96,107,99,101,102,105,108],
[106,0,107,103,111,100,104,105,101],
[115,104,0,113,92,100,105,95,107],
[104,108,98,0,101,100,102,115,98],
[112,100,119,110,0,97,106,105,104],
[110,111,111,111,114,0,109,105,99],
[109,107,106,109,105,102,0,105,101],
[106,106,116,96,106,106,106,0,98],
[103,110,104,113,107,112,110,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,97,103,111,107,105,98,116],
[100,0,91,104,103,114,93,95,99],
[114,120,0,106,114,106,104,108,106],
[108,107,105,0,108,110,111,105,102],
[100,108,97,103,0,94,100,94,100],
[104,97,105,101,117,0,97,106,103],
[106,118,107,100,111,114,0,105,105],
[113,116,103,106,117,105,106,0,113],
[95,112,105,109,111,108,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,113,102,113,114,109,105],
[102,0,100,102,94,105,121,108,96],
[109,111,0,115,107,111,124,108,105],
[98,109,96,0,92,99,124,99,87],
[109,117,104,119,0,113,138,110,108],
[98,106,100,112,98,0,120,114,96],
[97,90,87,87,73,91,0,95,87],
[102,103,103,112,101,97,116,0,116],
[106,115,106,124,103,115,124,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,89,103,70,98,119,91,113],
[126,0,109,100,118,110,101,112,106],
[122,102,0,124,102,121,121,108,102],
[108,111,87,0,80,130,103,94,108],
[141,93,109,131,0,148,122,112,144],
[113,101,90,81,63,0,90,86,117],
[92,110,90,108,89,121,0,82,106],
[120,99,103,117,99,125,129,0,127],
[98,105,109,103,67,94,105,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,111,110,102,118,112,99,122],
[97,0,106,103,108,120,111,105,108],
[100,105,0,106,111,114,107,101,97],
[101,108,105,0,109,103,109,107,109],
[109,103,100,102,0,112,98,103,106],
[93,91,97,108,99,0,98,88,101],
[99,100,104,102,113,113,0,102,107],
[112,106,110,104,108,123,109,0,106],
[89,103,114,102,105,110,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,129,115,123,113,104,111],
[100,0,108,111,108,118,109,112,108],
[100,103,0,122,115,107,105,105,109],
[82,100,89,0,103,96,101,99,93],
[96,103,96,108,0,113,105,88,101],
[88,93,104,115,98,0,93,98,90],
[98,102,106,110,106,118,0,108,96],
[107,99,106,112,123,113,103,0,101],
[100,103,102,118,110,121,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,102,107,107,99,105,105],
[107,0,102,104,112,111,103,106,110],
[113,109,0,113,127,115,107,108,99],
[109,107,98,0,109,109,92,112,111],
[104,99,84,102,0,120,93,102,105],
[104,100,96,102,91,0,88,112,95],
[112,108,104,119,118,123,0,120,116],
[106,105,103,99,109,99,91,0,102],
[106,101,112,100,106,116,95,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,111,99,94,104,101,102],
[110,0,114,114,98,98,103,112,109],
[109,97,0,111,99,103,108,102,111],
[100,97,100,0,98,94,93,105,106],
[112,113,112,113,0,107,102,117,114],
[117,113,108,117,104,0,114,110,118],
[107,108,103,118,109,97,0,115,105],
[110,99,109,106,94,101,96,0,103],
[109,102,100,105,97,93,106,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,119,105,110,105,113,110,105],
[97,0,104,108,103,109,108,95,98],
[92,107,0,106,97,105,102,95,98],
[106,103,105,0,112,112,108,100,107],
[101,108,114,99,0,104,107,103,102],
[106,102,106,99,107,0,105,102,102],
[98,103,109,103,104,106,0,99,105],
[101,116,116,111,108,109,112,0,107],
[106,113,113,104,109,109,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,96,109,98,104,110,98],
[106,0,117,114,97,104,110,119,97],
[114,94,0,101,90,100,109,107,92],
[115,97,110,0,108,110,113,118,108],
[102,114,121,103,0,106,107,116,105],
[113,107,111,101,105,0,115,115,110],
[107,101,102,98,104,96,0,116,103],
[101,92,104,93,95,96,95,0,101],
[113,114,119,103,106,101,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,139,117,83,108,96,94,114],
[114,0,114,125,81,125,83,92,103],
[72,97,0,107,81,140,105,102,94],
[94,86,104,0,81,129,117,61,82],
[128,130,130,130,0,161,128,105,140],
[103,86,71,82,50,0,94,72,92],
[115,128,106,94,83,117,0,114,93],
[117,119,109,150,106,139,97,0,126],
[97,108,117,129,71,119,118,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,122,116,97,103,105,101],
[100,0,114,127,112,102,108,113,104],
[108,97,0,113,122,102,93,98,95],
[89,84,98,0,100,102,83,77,94],
[95,99,89,111,0,94,90,97,104],
[114,109,109,109,117,0,105,118,108],
[108,103,118,128,121,106,0,108,111],
[106,98,113,134,114,93,103,0,112],
[110,107,116,117,107,103,100,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,99,112,105,101,106,107],
[112,0,110,102,114,105,102,101,111],
[101,101,0,106,116,111,110,103,103],
[112,109,105,0,114,102,103,98,97],
[99,97,95,97,0,94,89,98,93],
[106,106,100,109,117,0,108,109,100],
[110,109,101,108,122,103,0,118,110],
[105,110,108,113,113,102,93,0,108],
[104,100,108,114,118,111,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,107,157,158,104,157,157,107],
[54,0,161,211,158,158,158,108,161],
[104,50,0,211,104,104,104,104,54],
[54,0,0,0,104,50,54,54,54],
[53,53,107,107,0,50,107,107,107],
[107,53,107,161,161,0,161,161,161],
[54,53,107,157,104,50,0,54,107],
[54,103,107,157,104,50,157,0,161],
[104,50,157,157,104,50,104,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,128,111,114,121,116,128,104],
[95,0,115,112,106,136,113,93,121],
[83,96,0,99,92,114,88,114,115],
[100,99,112,0,124,132,118,131,117],
[97,105,119,87,0,127,102,126,115],
[90,75,97,79,84,0,81,94,111],
[95,98,123,93,109,130,0,119,120],
[83,118,97,80,85,117,92,0,121],
[107,90,96,94,96,100,91,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,150,150,119,120,119,89,89],
[61,0,31,120,120,153,91,89,89],
[61,180,0,151,89,153,91,120,119],
[61,91,60,0,119,91,60,119,58],
[92,91,122,92,0,122,91,92,89],
[91,58,58,120,89,0,60,89,58],
[92,120,120,151,120,151,0,120,28],
[122,122,91,92,119,122,91,0,89],
[122,122,92,153,122,153,183,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,99,86,105,92,89,91,92],
[97,0,82,84,97,94,83,77,86],
[112,129,0,96,108,107,102,107,111],
[125,127,115,0,113,107,127,94,104],
[106,114,103,98,0,96,91,85,87],
[119,117,104,104,115,0,106,98,104],
[122,128,109,84,120,105,0,86,102],
[120,134,104,117,126,113,125,0,122],
[119,125,100,107,124,107,109,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,118,81,116,107,100,109,105],
[111,0,118,110,102,108,91,105,110],
[93,93,0,87,96,98,90,101,100],
[130,101,124,0,131,111,106,113,113],
[95,109,115,80,0,91,93,101,91],
[104,103,113,100,120,0,92,106,99],
[111,120,121,105,118,119,0,114,115],
[102,106,110,98,110,105,97,0,109],
[106,101,111,98,120,112,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,113,71,104,88,107,104,86],
[130,0,109,107,109,120,88,123,113],
[98,102,0,104,99,122,107,109,131],
[140,104,107,0,141,99,130,133,131],
[107,102,112,70,0,66,78,97,97],
[123,91,89,112,145,0,125,128,101],
[104,123,104,81,133,86,0,98,86],
[107,88,102,78,114,83,113,0,93],
[125,98,80,80,114,110,125,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,107,109,98,84,106,86,87],
[93,0,83,114,121,110,93,82,111],
[104,128,0,121,138,109,124,117,115],
[102,97,90,0,111,100,103,106,98],
[113,90,73,100,0,92,78,91,82],
[127,101,102,111,119,0,117,124,105],
[105,118,87,108,133,94,0,120,124],
[125,129,94,105,120,87,91,0,109],
[124,100,96,113,129,106,87,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,93,113,95,103,109,99],
[114,0,105,107,111,109,108,112,102],
[106,106,0,102,99,99,106,104,100],
[118,104,109,0,108,107,109,101,107],
[98,100,112,103,0,106,97,105,95],
[116,102,112,104,105,0,109,109,116],
[108,103,105,102,114,102,0,115,100],
[102,99,107,110,106,102,96,0,93],
[112,109,111,104,116,95,111,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,117,108,108,112,106,104,111],
[108,0,95,98,81,110,94,113,98],
[94,116,0,88,76,115,105,102,108],
[103,113,123,0,98,124,97,118,114],
[103,130,135,113,0,118,135,116,109],
[99,101,96,87,93,0,85,101,84],
[105,117,106,114,76,126,0,95,101],
[107,98,109,93,95,110,116,0,108],
[100,113,103,97,102,127,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,127,99,112,94,116,89],
[106,0,97,106,127,95,89,108,110],
[105,114,0,96,108,85,111,110,114],
[84,105,115,0,91,88,72,79,85],
[112,84,103,120,0,113,126,104,119],
[99,116,126,123,98,0,91,113,121],
[117,122,100,139,85,120,0,112,112],
[95,103,101,132,107,98,99,0,108],
[122,101,97,126,92,90,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,114,112,106,114,102,119,113],
[108,0,112,127,118,114,115,121,101],
[97,99,0,125,107,111,104,109,107],
[99,84,86,0,109,101,102,98,100],
[105,93,104,102,0,102,100,97,98],
[97,97,100,110,109,0,108,111,103],
[109,96,107,109,111,103,0,94,112],
[92,90,102,113,114,100,117,0,104],
[98,110,104,111,113,108,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,112,104,109,111,109,119,109],
[95,0,103,109,99,105,112,120,109],
[99,108,0,103,102,104,111,111,101],
[107,102,108,0,97,110,107,118,108],
[102,112,109,114,0,107,108,120,117],
[100,106,107,101,104,0,100,108,113],
[102,99,100,104,103,111,0,112,109],
[92,91,100,93,91,103,99,0,102],
[102,102,110,103,94,98,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,88,94,108,108,106,88,101],
[103,0,82,82,99,95,107,80,90],
[123,129,0,115,125,99,105,101,108],
[117,129,96,0,117,106,119,83,107],
[103,112,86,94,0,100,99,83,97],
[103,116,112,105,111,0,114,106,93],
[105,104,106,92,112,97,0,82,93],
[123,131,110,128,128,105,129,0,109],
[110,121,103,104,114,118,118,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,96,100,106,96,106,106],
[109,0,92,105,91,115,105,111,111],
[107,119,0,109,106,123,109,109,104],
[115,106,102,0,97,115,110,108,116],
[111,120,105,114,0,113,103,110,117],
[105,96,88,96,98,0,83,105,101],
[115,106,102,101,108,128,0,115,121],
[105,100,102,103,101,106,96,0,98],
[105,100,107,95,94,110,90,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,91,86,107,126,142,139],
[103,0,122,122,68,89,124,107,141],
[107,89,0,107,86,107,125,142,120],
[120,89,104,0,67,107,105,139,103],
[125,143,125,144,0,89,144,126,108],
[104,122,104,104,122,0,123,124,124],
[85,87,86,106,67,88,0,121,104],
[69,104,69,72,85,87,90,0,121],
[72,70,91,108,103,87,107,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,211,157,211,159,105,105,159],
[159,0,159,159,159,159,105,105,159],
[0,52,0,105,211,54,53,105,105],
[54,52,106,0,159,54,52,53,107],
[0,52,0,52,0,0,0,53,0],
[52,52,157,157,211,0,157,105,105],
[106,106,158,159,211,54,0,105,159],
[106,106,106,158,158,106,106,0,54],
[52,52,106,104,211,106,52,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,107,99,95,107,108,117,114],
[116,0,111,113,93,109,109,118,109],
[104,100,0,103,96,101,100,120,106],
[112,98,108,0,106,103,110,124,115],
[116,118,115,105,0,123,118,120,114],
[104,102,110,108,88,0,112,112,101],
[103,102,111,101,93,99,0,112,99],
[94,93,91,87,91,99,99,0,95],
[97,102,105,96,97,110,112,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,97,94,90,95,93,104],
[107,0,104,108,83,88,101,109,114],
[114,107,0,115,110,88,106,106,118],
[114,103,96,0,105,97,94,95,108],
[117,128,101,106,0,101,105,101,126],
[121,123,123,114,110,0,102,113,120],
[116,110,105,117,106,109,0,111,110],
[118,102,105,116,110,98,100,0,114],
[107,97,93,103,85,91,101,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,119,111,107,103,112,92,121],
[102,0,115,109,113,100,105,100,108],
[92,96,0,96,95,92,97,94,97],
[100,102,115,0,108,99,102,98,112],
[104,98,116,103,0,102,106,96,111],
[108,111,119,112,109,0,105,104,119],
[99,106,114,109,105,106,0,107,112],
[119,111,117,113,115,107,104,0,112],
[90,103,114,99,100,92,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,104,113,119,129,111,114,106],
[93,0,102,94,109,112,111,108,102],
[107,109,0,110,109,110,112,112,95],
[98,117,101,0,107,120,128,99,102],
[92,102,102,104,0,98,104,104,95],
[82,99,101,91,113,0,95,98,93],
[100,100,99,83,107,116,0,101,100],
[97,103,99,112,107,113,110,0,99],
[105,109,116,109,116,118,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,85,107,113,118,106,114,93],
[106,0,87,124,90,121,105,100,87],
[126,124,0,100,112,113,121,109,113],
[104,87,111,0,90,103,111,104,104],
[98,121,99,121,0,124,94,96,114],
[93,90,98,108,87,0,87,98,81],
[105,106,90,100,117,124,0,117,117],
[97,111,102,107,115,113,94,0,101],
[118,124,98,107,97,130,94,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,100,105,100,114,92,108,112],
[99,0,94,104,84,105,96,104,108],
[111,117,0,122,111,117,102,114,115],
[106,107,89,0,96,108,119,114,122],
[111,127,100,115,0,118,113,107,122],
[97,106,94,103,93,0,98,108,104],
[119,115,109,92,98,113,0,105,121],
[103,107,97,97,104,103,106,0,112],
[99,103,96,89,89,107,90,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,116,105,105,96,101,97],
[106,0,102,102,107,102,100,104,93],
[111,109,0,120,97,108,94,115,95],
[95,109,91,0,93,96,91,97,100],
[106,104,114,118,0,105,103,115,111],
[106,109,103,115,106,0,96,102,102],
[115,111,117,120,108,115,0,121,103],
[110,107,96,114,96,109,90,0,100],
[114,118,116,111,100,109,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,104,95,99,104,100,103],
[108,0,104,105,97,102,105,100,101],
[99,107,0,100,103,100,109,91,95],
[107,106,111,0,91,100,112,99,109],
[116,114,108,120,0,115,116,105,106],
[112,109,111,111,96,0,109,99,111],
[107,106,102,99,95,102,0,108,104],
[111,111,120,112,106,112,103,0,111],
[108,110,116,102,105,100,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,123,107,89,95,96,114],
[111,0,130,128,113,105,112,110,108],
[102,81,0,102,91,81,89,89,92],
[88,83,109,0,99,80,91,91,103],
[104,98,120,112,0,90,92,103,105],
[122,106,130,131,121,0,103,125,118],
[116,99,122,120,119,108,0,113,110],
[115,101,122,120,108,86,98,0,101],
[97,103,119,108,106,93,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,85,112,92,102,132,100,95],
[116,0,110,118,91,91,118,89,74],
[126,101,0,127,108,93,118,90,100],
[99,93,84,0,91,46,103,72,83],
[119,120,103,120,0,110,107,89,103],
[109,120,118,165,101,0,146,108,108],
[79,93,93,108,104,65,0,52,75],
[111,122,121,139,122,103,159,0,119],
[116,137,111,128,108,103,136,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,98,111,100,102,110,107],
[106,0,106,113,100,112,98,102,102],
[105,105,0,104,105,100,100,96,103],
[113,98,107,0,117,108,102,111,104],
[100,111,106,94,0,100,91,108,103],
[111,99,111,103,111,0,101,104,112],
[109,113,111,109,120,110,0,110,102],
[101,109,115,100,103,107,101,0,97],
[104,109,108,107,108,99,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,116,125,112,125,109,117,105],
[90,0,94,112,98,99,98,100,98],
[95,117,0,109,105,107,98,108,95],
[86,99,102,0,90,109,89,105,85],
[99,113,106,121,0,121,105,110,101],
[86,112,104,102,90,0,98,98,97],
[102,113,113,122,106,113,0,106,111],
[94,111,103,106,101,113,105,0,106],
[106,113,116,126,110,114,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,119,118,101,110,103,98,103],
[114,0,124,117,112,101,113,113,103],
[92,87,0,89,101,110,99,100,109],
[93,94,122,0,114,112,110,103,97],
[110,99,110,97,0,105,107,101,95],
[101,110,101,99,106,0,102,100,95],
[108,98,112,101,104,109,0,100,106],
[113,98,111,108,110,111,111,0,114],
[108,108,102,114,116,116,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,118,108,111,98,95,112,119],
[108,0,114,106,110,111,106,103,125],
[93,97,0,100,107,102,93,100,108],
[103,105,111,0,102,105,99,97,117],
[100,101,104,109,0,95,90,95,101],
[113,100,109,106,116,0,101,101,116],
[116,105,118,112,121,110,0,118,128],
[99,108,111,114,116,110,93,0,120],
[92,86,103,94,110,95,83,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,98,100,115,100,112,112],
[107,0,110,102,103,96,103,116,110],
[109,101,0,99,104,104,101,115,110],
[113,109,112,0,107,93,112,112,119],
[111,108,107,104,0,106,95,118,113],
[96,115,107,118,105,0,101,112,116],
[111,108,110,99,116,110,0,109,116],
[99,95,96,99,93,99,102,0,109],
[99,101,101,92,98,95,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,113,93,107,115,109,102,110],
[109,0,117,98,116,118,103,114,112],
[98,94,0,105,98,104,107,106,95],
[118,113,106,0,103,113,114,110,108],
[104,95,113,108,0,115,105,110,107],
[96,93,107,98,96,0,109,98,109],
[102,108,104,97,106,102,0,104,114],
[109,97,105,101,101,113,107,0,110],
[101,99,116,103,104,102,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,98,108,119,112,99,110],
[112,0,98,109,101,114,116,111,107],
[107,113,0,104,105,118,107,105,113],
[113,102,107,0,108,129,108,105,124],
[103,110,106,103,0,120,119,110,131],
[92,97,93,82,91,0,106,91,102],
[99,95,104,103,92,105,0,83,107],
[112,100,106,106,101,120,128,0,113],
[101,104,98,87,80,109,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,87,109,84,95,98,92,124],
[103,0,101,105,100,96,105,92,113],
[124,110,0,110,98,103,105,111,111],
[102,106,101,0,92,89,93,99,121],
[127,111,113,119,0,99,100,102,116],
[116,115,108,122,112,0,110,102,126],
[113,106,106,118,111,101,0,103,114],
[119,119,100,112,109,109,108,0,108],
[87,98,100,90,95,85,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,92,121,112,108,102,114,116],
[113,0,97,107,113,102,102,101,105],
[119,114,0,109,122,113,105,118,106],
[90,104,102,0,112,94,102,103,106],
[99,98,89,99,0,99,92,101,103],
[103,109,98,117,112,0,115,114,109],
[109,109,106,109,119,96,0,112,103],
[97,110,93,108,110,97,99,0,114],
[95,106,105,105,108,102,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,118,128,109,93,101,101,118],
[101,0,124,140,109,123,115,115,116],
[93,87,0,124,116,101,86,108,126],
[83,71,87,0,82,86,83,86,81],
[102,102,95,129,0,97,96,109,127],
[118,88,110,125,114,0,90,107,136],
[110,96,125,128,115,121,0,114,113],
[110,96,103,125,102,104,97,0,142],
[93,95,85,130,84,75,98,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,104,118,111,117,102,124,118],
[95,0,115,97,108,109,118,97,94],
[107,96,0,101,108,109,124,98,100],
[93,114,110,0,123,103,115,117,101],
[100,103,103,88,0,101,113,85,78],
[94,102,102,108,110,0,110,104,116],
[109,93,87,96,98,101,0,95,105],
[87,114,113,94,126,107,116,0,110],
[93,117,111,110,133,95,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,119,105,116,115,125,119],
[104,0,115,101,121,117,117,121,108],
[98,96,0,103,101,97,101,102,89],
[92,110,108,0,114,110,101,108,97],
[106,90,110,97,0,101,110,115,93],
[95,94,114,101,110,0,104,109,90],
[96,94,110,110,101,107,0,111,97],
[86,90,109,103,96,102,100,0,97],
[92,103,122,114,118,121,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,114,101,113,100,104,106,99],
[106,0,108,104,100,97,103,102,98],
[97,103,0,120,104,108,107,112,93],
[110,107,91,0,100,103,84,109,89],
[98,111,107,111,0,97,100,109,100],
[111,114,103,108,114,0,110,117,120],
[107,108,104,127,111,101,0,120,115],
[105,109,99,102,102,94,91,0,87],
[112,113,118,122,111,91,96,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,115,115,112,114,116,113],
[112,0,113,110,117,111,107,98,113],
[101,98,0,108,113,104,111,94,96],
[96,101,103,0,103,98,108,80,98],
[96,94,98,108,0,102,92,90,102],
[99,100,107,113,109,0,110,98,103],
[97,104,100,103,119,101,0,89,108],
[95,113,117,131,121,113,122,0,116],
[98,98,115,113,109,108,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,111,112,126,120,91,113,104],
[92,0,100,102,116,86,97,121,101],
[100,111,0,115,106,103,97,112,91],
[99,109,96,0,117,102,108,120,94],
[85,95,105,94,0,84,81,98,94],
[91,125,108,109,127,0,88,121,116],
[120,114,114,103,130,123,0,131,112],
[98,90,99,91,113,90,80,0,83],
[107,110,120,117,117,95,99,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,115,120,97,109,116,122,101],
[94,0,107,131,96,105,136,141,98],
[96,104,0,106,106,97,112,118,109],
[91,80,105,0,85,98,112,109,94],
[114,115,105,126,0,123,136,134,120],
[102,106,114,113,88,0,119,115,95],
[95,75,99,99,75,92,0,103,72],
[89,70,93,102,77,96,108,0,86],
[110,113,102,117,91,116,139,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,100,101,98,101,84,90,112],
[118,0,119,112,119,120,99,105,114],
[111,92,0,111,99,106,98,108,110],
[110,99,100,0,103,102,90,106,114],
[113,92,112,108,0,105,100,94,107],
[110,91,105,109,106,0,104,105,109],
[127,112,113,121,111,107,0,102,125],
[121,106,103,105,117,106,109,0,113],
[99,97,101,97,104,102,86,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,106,85,97,114,84,88,118],
[118,0,95,93,101,103,97,106,124],
[105,116,0,88,81,115,76,102,120],
[126,118,123,0,104,139,110,110,132],
[114,110,130,107,0,126,101,109,135],
[97,108,96,72,85,0,61,83,100],
[127,114,135,101,110,150,0,110,128],
[123,105,109,101,102,128,101,0,110],
[93,87,91,79,76,111,83,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,87,100,102,98,117,97],
[114,0,113,96,106,104,108,118,109],
[111,98,0,107,119,106,105,107,100],
[124,115,104,0,109,108,104,127,114],
[111,105,92,102,0,97,106,110,107],
[109,107,105,103,114,0,113,112,116],
[113,103,106,107,105,98,0,117,98],
[94,93,104,84,101,99,94,0,90],
[114,102,111,97,104,95,113,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,118,114,114,118,106,127,103],
[94,0,118,110,113,113,94,112,96],
[93,93,0,84,92,101,88,103,97],
[97,101,127,0,117,107,95,105,101],
[97,98,119,94,0,93,91,100,98],
[93,98,110,104,118,0,100,126,111],
[105,117,123,116,120,111,0,108,115],
[84,99,108,106,111,85,103,0,95],
[108,115,114,110,113,100,96,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,130,112,140,115,98,127,106],
[116,0,133,113,158,114,133,130,74],
[81,78,0,86,107,98,106,93,63],
[99,98,125,0,133,115,114,121,97],
[71,53,104,78,0,89,88,70,54],
[96,97,113,96,122,0,113,93,81],
[113,78,105,97,123,98,0,94,70],
[84,81,118,90,141,118,117,0,60],
[105,137,148,114,157,130,141,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,116,117,105,115,115,125],
[97,0,106,129,113,113,109,112,103],
[99,105,0,116,109,102,113,97,102],
[95,82,95,0,93,99,99,86,104],
[94,98,102,118,0,103,108,100,120],
[106,98,109,112,108,0,118,118,107],
[96,102,98,112,103,93,0,88,98],
[96,99,114,125,111,93,123,0,106],
[86,108,109,107,91,104,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,113,100,97,101,102,96],
[101,0,100,107,104,94,93,101,104],
[103,111,0,107,115,92,112,114,104],
[98,104,104,0,104,82,99,95,104],
[111,107,96,107,0,101,108,102,104],
[114,117,119,129,110,0,110,103,102],
[110,118,99,112,103,101,0,114,115],
[109,110,97,116,109,108,97,0,113],
[115,107,107,107,107,109,96,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,85,115,93,114,89,114,101],
[105,0,84,93,93,103,86,108,109],
[126,127,0,117,96,108,113,130,118],
[96,118,94,0,100,105,84,119,113],
[118,118,115,111,0,117,100,127,115],
[97,108,103,106,94,0,97,120,91],
[122,125,98,127,111,114,0,132,119],
[97,103,81,92,84,91,79,0,84],
[110,102,93,98,96,120,92,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,127,118,103,117,114,120,118],
[94,0,101,110,105,108,104,112,89],
[84,110,0,90,87,110,90,104,89],
[93,101,121,0,102,97,118,102,96],
[108,106,124,109,0,125,116,105,117],
[94,103,101,114,86,0,108,93,90],
[97,107,121,93,95,103,0,101,97],
[91,99,107,109,106,118,110,0,105],
[93,122,122,115,94,121,114,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,120,123,118,103,121,120,111],
[87,0,81,111,89,83,95,92,86],
[91,130,0,143,100,96,113,115,120],
[88,100,68,0,87,89,105,90,83],
[93,122,111,124,0,105,113,116,108],
[108,128,115,122,106,0,110,122,92],
[90,116,98,106,98,101,0,112,107],
[91,119,96,121,95,89,99,0,102],
[100,125,91,128,103,119,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,90,101,71,114,82,97,145],
[130,0,70,117,111,139,71,120,119],
[121,141,0,117,104,116,78,114,128],
[110,94,94,0,96,88,57,99,129],
[140,100,107,115,0,135,106,129,147],
[97,72,95,123,76,0,84,97,96],
[129,140,133,154,105,127,0,148,176],
[114,91,97,112,82,114,63,0,128],
[66,92,83,82,64,115,35,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,96,105,112,104,98,112,113],
[122,0,116,97,107,108,100,106,107],
[115,95,0,84,102,97,101,115,109],
[106,114,127,0,118,124,103,126,102],
[99,104,109,93,0,96,101,105,99],
[107,103,114,87,115,0,105,118,101],
[113,111,110,108,110,106,0,110,104],
[99,105,96,85,106,93,101,0,105],
[98,104,102,109,112,110,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,137,116,129,136,95,96,106],
[75,0,107,117,107,117,62,100,97],
[74,104,0,96,97,95,82,75,64],
[95,94,115,0,85,136,96,105,84],
[82,104,114,126,0,157,81,97,113],
[75,94,116,75,54,0,53,76,84],
[116,149,129,115,130,158,0,118,104],
[115,111,136,106,114,135,93,0,104],
[105,114,147,127,98,127,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,106,103,109,103,95,102],
[108,0,96,97,107,97,100,84,97],
[112,115,0,100,113,110,106,110,111],
[105,114,111,0,115,102,112,110,105],
[108,104,98,96,0,93,97,94,97],
[102,114,101,109,118,0,111,101,101],
[108,111,105,99,114,100,0,98,102],
[116,127,101,101,117,110,113,0,114],
[109,114,100,106,114,110,109,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,105,105,107,108,103,114],
[106,0,117,93,106,99,103,108,108],
[113,94,0,101,87,101,97,93,97],
[106,118,110,0,97,106,105,104,100],
[106,105,124,114,0,107,118,121,113],
[104,112,110,105,104,0,112,111,103],
[103,108,114,106,93,99,0,113,97],
[108,103,118,107,90,100,98,0,98],
[97,103,114,111,98,108,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,108,111,104,110,113,104,114],
[85,0,96,104,95,87,87,84,107],
[103,115,0,119,101,108,111,103,113],
[100,107,92,0,96,105,100,91,101],
[107,116,110,115,0,114,104,98,121],
[101,124,103,106,97,0,93,95,102],
[98,124,100,111,107,118,0,112,111],
[107,127,108,120,113,116,99,0,101],
[97,104,98,110,90,109,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,87,88,103,100,101,100,98],
[104,0,88,101,105,110,98,102,101],
[124,123,0,97,109,104,105,102,103],
[123,110,114,0,112,108,101,112,112],
[108,106,102,99,0,99,105,102,90],
[111,101,107,103,112,0,108,97,113],
[110,113,106,110,106,103,0,103,103],
[111,109,109,99,109,114,108,0,92],
[113,110,108,99,121,98,108,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,90,95,104,96,88,94,101],
[124,0,100,101,104,108,104,104,122],
[121,111,0,113,113,126,111,100,124],
[116,110,98,0,110,114,95,109,113],
[107,107,98,101,0,99,98,97,108],
[115,103,85,97,112,0,87,80,106],
[123,107,100,116,113,124,0,98,130],
[117,107,111,102,114,131,113,0,119],
[110,89,87,98,103,105,81,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,123,98,98,94,99,102,111],
[105,0,104,105,103,102,88,87,99],
[88,107,0,94,102,103,70,84,91],
[113,106,117,0,117,105,110,118,101],
[113,108,109,94,0,92,101,104,102],
[117,109,108,106,119,0,99,115,114],
[112,123,141,101,110,112,0,109,105],
[109,124,127,93,107,96,102,0,102],
[100,112,120,110,109,97,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,95,85,81,93,95,96,100],
[114,0,81,99,85,88,111,102,110],
[116,130,0,98,108,111,110,125,108],
[126,112,113,0,111,112,113,120,104],
[130,126,103,100,0,112,124,119,113],
[118,123,100,99,99,0,114,122,106],
[116,100,101,98,87,97,0,112,97],
[115,109,86,91,92,89,99,0,103],
[111,101,103,107,98,105,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,103,97,110,117,105,100],
[108,0,105,108,109,113,110,118,104],
[110,106,0,99,100,99,101,110,97],
[108,103,112,0,96,106,104,106,90],
[114,102,111,115,0,119,110,107,111],
[101,98,112,105,92,0,102,103,102],
[94,101,110,107,101,109,0,96,105],
[106,93,101,105,104,108,115,0,98],
[111,107,114,121,100,109,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,110,109,86,101,104,93],
[103,0,109,106,104,115,96,103,102],
[109,102,0,102,104,97,91,97,108],
[101,105,109,0,113,108,111,99,104],
[102,107,107,98,0,96,99,106,108],
[125,96,114,103,115,0,116,112,107],
[110,115,120,100,112,95,0,93,96],
[107,108,114,112,105,99,118,0,86],
[118,109,103,107,103,104,115,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,107,96,128,131,102,130,132],
[62,0,77,65,85,86,90,88,102],
[104,134,0,104,109,128,116,121,114],
[115,146,107,0,108,126,125,124,105],
[83,126,102,103,0,101,107,101,97],
[80,125,83,85,110,0,94,118,116],
[109,121,95,86,104,117,0,115,110],
[81,123,90,87,110,93,96,0,88],
[79,109,97,106,114,95,101,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,115,111,115,107,104,119,110],
[88,0,99,82,101,98,92,110,90],
[96,112,0,106,116,115,102,112,112],
[100,129,105,0,104,116,108,109,117],
[96,110,95,107,0,103,96,101,103],
[104,113,96,95,108,0,88,118,105],
[107,119,109,103,115,123,0,134,110],
[92,101,99,102,110,93,77,0,86],
[101,121,99,94,108,106,101,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,90,124,113,108,91,101,111],
[89,0,95,112,112,108,102,94,115],
[121,116,0,127,129,125,107,103,109],
[87,99,84,0,103,102,72,85,93],
[98,99,82,108,0,101,71,85,93],
[103,103,86,109,110,0,71,82,98],
[120,109,104,139,140,140,0,107,125],
[110,117,108,126,126,129,104,0,124],
[100,96,102,118,118,113,86,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,109,106,96,111,104,97],
[104,0,100,91,110,107,98,88,94],
[114,111,0,110,130,110,117,100,81],
[102,120,101,0,127,113,101,107,108],
[105,101,81,84,0,93,105,84,99],
[115,104,101,98,118,0,94,98,93],
[100,113,94,110,106,117,0,106,97],
[107,123,111,104,127,113,105,0,95],
[114,117,130,103,112,118,114,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,115,98,117,110,111,116],
[98,0,104,98,95,95,99,107,101],
[104,107,0,105,107,113,101,111,116],
[96,113,106,0,103,96,105,111,108],
[113,116,104,108,0,106,110,113,115],
[94,116,98,115,105,0,106,110,110],
[101,112,110,106,101,105,0,115,105],
[100,104,100,100,98,101,96,0,104],
[95,110,95,103,96,101,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,111,103,129,113,102,111,113],
[93,0,103,112,110,111,105,127,108],
[100,108,0,110,116,117,101,126,121],
[108,99,101,0,122,121,106,106,101],
[82,101,95,89,0,100,94,106,89],
[98,100,94,90,111,0,101,103,95],
[109,106,110,105,117,110,0,113,107],
[100,84,85,105,105,108,98,0,95],
[98,103,90,110,122,116,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,80,102,100,97,115,96,91],
[109,0,91,93,100,117,133,113,98],
[131,120,0,97,100,157,129,121,122],
[109,118,114,0,85,132,110,105,112],
[111,111,111,126,0,138,130,93,115],
[114,94,54,79,73,0,115,91,84],
[96,78,82,101,81,96,0,69,69],
[115,98,90,106,118,120,142,0,95],
[120,113,89,99,96,127,142,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,116,127,104,104,120,134],
[98,0,99,114,106,110,89,78,92],
[100,112,0,133,114,105,107,108,125],
[95,97,78,0,105,94,96,88,114],
[84,105,97,106,0,111,92,101,111],
[107,101,106,117,100,0,107,114,125],
[107,122,104,115,119,104,0,105,133],
[91,133,103,123,110,97,106,0,118],
[77,119,86,97,100,86,78,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,123,106,105,119,119,120,104],
[98,0,110,90,97,113,112,105,104],
[88,101,0,95,94,121,115,111,100],
[105,121,116,0,113,115,131,102,112],
[106,114,117,98,0,116,113,109,105],
[92,98,90,96,95,0,113,109,86],
[92,99,96,80,98,98,0,94,86],
[91,106,100,109,102,102,117,0,87],
[107,107,111,99,106,125,125,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,112,113,107,108,86,107],
[111,0,103,99,117,113,94,102,91],
[100,108,0,92,96,105,107,94,90],
[99,112,119,0,114,110,107,106,111],
[98,94,115,97,0,97,104,96,104],
[104,98,106,101,114,0,94,92,100],
[103,117,104,104,107,117,0,95,99],
[125,109,117,105,115,119,116,0,113],
[104,120,121,100,107,111,112,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,103,104,103,104,111,114],
[107,0,100,97,104,102,109,98,102],
[106,111,0,89,104,112,114,109,117],
[108,114,122,0,107,105,120,117,109],
[107,107,107,104,0,112,112,107,105],
[108,109,99,106,99,0,105,103,103],
[107,102,97,91,99,106,0,95,99],
[100,113,102,94,104,108,116,0,99],
[97,109,94,102,106,108,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,121,123,143,113,104,125,105],
[92,0,111,112,115,89,114,117,85],
[90,100,0,107,101,102,101,116,100],
[88,99,104,0,118,86,114,96,94],
[68,96,110,93,0,82,99,99,76],
[98,122,109,125,129,0,109,131,115],
[107,97,110,97,112,102,0,108,95],
[86,94,95,115,112,80,103,0,88],
[106,126,111,117,135,96,116,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,124,125,102,105,110,118],
[105,0,95,96,102,108,103,94,103],
[111,116,0,114,120,103,108,112,119],
[87,115,97,0,107,108,90,96,105],
[86,109,91,104,0,96,82,101,105],
[109,103,108,103,115,0,98,103,103],
[106,108,103,121,129,113,0,120,118],
[101,117,99,115,110,108,91,0,115],
[93,108,92,106,106,108,93,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,107,102,125,109,112,97],
[112,0,98,103,103,118,99,111,104],
[103,113,0,96,100,118,108,111,104],
[104,108,115,0,104,111,100,120,100],
[109,108,111,107,0,130,106,119,102],
[86,93,93,100,81,0,93,103,91],
[102,112,103,111,105,118,0,111,113],
[99,100,100,91,92,108,100,0,94],
[114,107,107,111,109,120,98,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,124,104,117,115,104,115,109],
[98,0,107,106,111,99,114,111,101],
[87,104,0,107,103,100,110,116,101],
[107,105,104,0,113,106,118,121,102],
[94,100,108,98,0,105,93,113,104],
[96,112,111,105,106,0,118,110,106],
[107,97,101,93,118,93,0,112,112],
[96,100,95,90,98,101,99,0,102],
[102,110,110,109,107,105,99,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,100,110,111,109,107,125,107],
[94,0,111,118,119,103,115,117,102],
[111,100,0,112,104,113,112,133,105],
[101,93,99,0,115,116,125,137,110],
[100,92,107,96,0,114,110,117,111],
[102,108,98,95,97,0,117,124,108],
[104,96,99,86,101,94,0,110,104],
[86,94,78,74,94,87,101,0,101],
[104,109,106,101,100,103,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,89,101,97,88,82,109,104],
[126,0,123,111,112,102,111,114,115],
[122,88,0,108,107,102,108,108,113],
[110,100,103,0,91,102,95,115,108],
[114,99,104,120,0,110,98,110,111],
[123,109,109,109,101,0,94,107,116],
[129,100,103,116,113,117,0,105,112],
[102,97,103,96,101,104,106,0,110],
[107,96,98,103,100,95,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,118,101,111,145,129,133,107],
[112,0,97,96,89,116,124,111,131],
[93,114,0,76,93,110,99,108,111],
[110,115,135,0,103,135,121,112,106],
[100,122,118,108,0,127,117,116,109],
[66,95,101,76,84,0,101,89,97],
[82,87,112,90,94,110,0,97,111],
[78,100,103,99,95,122,114,0,123],
[104,80,100,105,102,114,100,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,113,100,121,109,125,107],
[99,0,103,96,103,108,114,108,95],
[107,108,0,107,108,127,110,102,102],
[98,115,104,0,95,105,99,118,99],
[111,108,103,116,0,124,124,110,109],
[90,103,84,106,87,0,92,116,96],
[102,97,101,112,87,119,0,108,94],
[86,103,109,93,101,95,103,0,88],
[104,116,109,112,102,115,117,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,97,106,106,96,106,105,108],
[114,0,105,114,114,110,114,118,126],
[114,106,0,125,119,103,112,125,136],
[105,97,86,0,103,100,101,110,119],
[105,97,92,108,0,115,94,109,124],
[115,101,108,111,96,0,115,119,110],
[105,97,99,110,117,96,0,113,120],
[106,93,86,101,102,92,98,0,101],
[103,85,75,92,87,101,91,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,113,131,113,115,116,108,99],
[108,0,122,129,101,108,103,111,101],
[98,89,0,119,93,97,102,102,89],
[80,82,92,0,100,99,97,96,88],
[98,110,118,111,0,105,105,98,99],
[96,103,114,112,106,0,104,109,83],
[95,108,109,114,106,107,0,111,106],
[103,100,109,115,113,102,100,0,101],
[112,110,122,123,112,128,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,108,107,80,122,95,93,106],
[129,0,130,120,101,133,79,103,117],
[103,81,0,118,118,132,82,66,106],
[104,91,93,0,116,132,91,92,106],
[131,110,93,95,0,134,94,107,146],
[89,78,79,79,77,0,78,63,65],
[116,132,129,120,117,133,0,92,118],
[118,108,145,119,104,148,119,0,120],
[105,94,105,105,65,146,93,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,119,95,112,108,107,115,108],
[106,0,121,102,97,107,110,104,117],
[92,90,0,85,95,90,94,99,96],
[116,109,126,0,105,109,122,108,117],
[99,114,116,106,0,104,111,107,102],
[103,104,121,102,107,0,112,103,107],
[104,101,117,89,100,99,0,100,96],
[96,107,112,103,104,108,111,0,104],
[103,94,115,94,109,104,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,115,98,120,88,106,123,108],
[88,0,103,70,113,76,86,113,104],
[96,108,0,96,129,87,79,116,99],
[113,141,115,0,128,110,97,120,124],
[91,98,82,83,0,76,80,82,102],
[123,135,124,101,135,0,102,125,116],
[105,125,132,114,131,109,0,125,109],
[88,98,95,91,129,86,86,0,111],
[103,107,112,87,109,95,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,117,136,111,108,120,119,109],
[123,0,146,135,146,128,118,124,100],
[94,65,0,115,76,100,107,85,90],
[75,76,96,0,105,98,105,80,99],
[100,65,135,106,0,86,115,76,98],
[103,83,111,113,125,0,113,88,78],
[91,93,104,106,96,98,0,85,80],
[92,87,126,131,135,123,126,0,106],
[102,111,121,112,113,133,131,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,99,78,120,93,92,90],
[111,0,131,105,101,109,102,81,109],
[114,80,0,90,95,102,103,90,97],
[112,106,121,0,107,107,109,105,111],
[133,110,116,104,0,132,113,114,123],
[91,102,109,104,79,0,92,80,127],
[118,109,108,102,98,119,0,113,129],
[119,130,121,106,97,131,98,0,108],
[121,102,114,100,88,84,82,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,106,103,120,90,107,99],
[112,0,114,128,116,106,91,125,111],
[108,97,0,109,105,87,93,105,101],
[105,83,102,0,115,96,97,109,116],
[108,95,106,96,0,87,101,110,114],
[91,105,124,115,124,0,109,118,101],
[121,120,118,114,110,102,0,125,116],
[104,86,106,102,101,93,86,0,85],
[112,100,110,95,97,110,95,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,121,122,108,116,89,118,120],
[102,0,107,105,91,102,95,93,123],
[90,104,0,114,98,110,105,116,102],
[89,106,97,0,85,105,89,92,106],
[103,120,113,126,0,100,117,102,108],
[95,109,101,106,111,0,93,104,100],
[122,116,106,122,94,118,0,107,116],
[93,118,95,119,109,107,104,0,113],
[91,88,109,105,103,111,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,118,92,116,98,114,99],
[110,0,102,108,93,106,102,90,93],
[106,109,0,111,94,125,108,100,100],
[93,103,100,0,92,115,92,99,92],
[119,118,117,119,0,128,105,117,114],
[95,105,86,96,83,0,90,88,88],
[113,109,103,119,106,121,0,119,101],
[97,121,111,112,94,123,92,0,103],
[112,118,111,119,97,123,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,130,100,117,106,115,109,117],
[105,0,137,106,109,112,121,117,120],
[81,74,0,91,94,67,97,92,96],
[111,105,120,0,102,98,106,111,104],
[94,102,117,109,0,104,113,112,108],
[105,99,144,113,107,0,118,126,117],
[96,90,114,105,98,93,0,100,94],
[102,94,119,100,99,85,111,0,115],
[94,91,115,107,103,94,117,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,124,104,110,128,128,113,112],
[86,0,81,88,89,86,101,90,88],
[87,130,0,98,98,94,112,95,105],
[107,123,113,0,111,107,124,103,101],
[101,122,113,100,0,112,108,117,107],
[83,125,117,104,99,0,119,98,99],
[83,110,99,87,103,92,0,99,95],
[98,121,116,108,94,113,112,0,100],
[99,123,106,110,104,112,116,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,110,105,110,102,103,103],
[100,0,115,114,107,103,99,108,105],
[105,96,0,119,99,97,101,101,99],
[101,97,92,0,99,95,93,99,107],
[106,104,112,112,0,100,100,115,112],
[101,108,114,116,111,0,120,117,114],
[109,112,110,118,111,91,0,124,110],
[108,103,110,112,96,94,87,0,102],
[108,106,112,104,99,97,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,109,105,110,119,110,100],
[107,0,96,110,117,131,122,99,109],
[110,115,0,136,120,123,113,119,97],
[102,101,75,0,103,114,132,102,113],
[106,94,91,108,0,117,115,101,114],
[101,80,88,97,94,0,107,78,89],
[92,89,98,79,96,104,0,85,82],
[101,112,92,109,110,133,126,0,111],
[111,102,114,98,97,122,129,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,115,118,124,103,118,109],
[108,0,104,103,108,108,86,117,112],
[106,107,0,100,99,100,88,104,97],
[96,108,111,0,106,108,85,105,96],
[93,103,112,105,0,106,81,108,107],
[87,103,111,103,105,0,79,111,92],
[108,125,123,126,130,132,0,129,101],
[93,94,107,106,103,100,82,0,93],
[102,99,114,115,104,119,110,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,124,117,126,105,100,106,119],
[93,0,103,101,112,92,115,94,101],
[87,108,0,95,106,92,91,83,96],
[94,110,116,0,112,112,92,94,115],
[85,99,105,99,0,86,89,94,113],
[106,119,119,99,125,0,115,114,114],
[111,96,120,119,122,96,0,96,117],
[105,117,128,117,117,97,115,0,125],
[92,110,115,96,98,97,94,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,114,95,109,91,126,107,119],
[111,0,105,110,109,115,124,115,100],
[97,106,0,107,104,91,110,118,116],
[116,101,104,0,113,108,107,120,119],
[102,102,107,98,0,113,104,106,122],
[120,96,120,103,98,0,115,124,114],
[85,87,101,104,107,96,0,111,119],
[104,96,93,91,105,87,100,0,111],
[92,111,95,92,89,97,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,90,118,115,99,97,103,96],
[111,0,110,116,112,106,109,108,97],
[121,101,0,108,120,110,123,101,108],
[93,95,103,0,102,103,86,95,96],
[96,99,91,109,0,96,98,103,84],
[112,105,101,108,115,0,106,98,92],
[114,102,88,125,113,105,0,98,107],
[108,103,110,116,108,113,113,0,120],
[115,114,103,115,127,119,104,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,102,112,112,115,109,110,118],
[92,0,98,104,97,93,93,92,100],
[109,113,0,118,110,110,99,101,114],
[99,107,93,0,98,101,91,96,106],
[99,114,101,113,0,100,95,99,105],
[96,118,101,110,111,0,99,102,109],
[102,118,112,120,116,112,0,99,115],
[101,119,110,115,112,109,112,0,114],
[93,111,97,105,106,102,96,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,114,109,103,107,107,104,104],
[97,0,104,91,109,97,104,106,97],
[97,107,0,95,95,95,104,101,86],
[102,120,116,0,115,88,103,117,101],
[108,102,116,96,0,91,111,103,101],
[104,114,116,123,120,0,108,109,112],
[104,107,107,108,100,103,0,115,91],
[107,105,110,94,108,102,96,0,95],
[107,114,125,110,110,99,120,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,151,125,115,105,116,125],
[102,0,95,131,130,134,81,113,85],
[96,116,0,142,100,102,110,123,114],
[60,80,69,0,95,87,87,99,77],
[86,81,111,116,0,109,90,108,75],
[96,77,109,124,102,0,72,113,77],
[106,130,101,124,121,139,0,127,108],
[95,98,88,112,103,98,84,0,97],
[86,126,97,134,136,134,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,86,88,117,90,97,93,84],
[106,0,99,93,106,92,109,104,99],
[125,112,0,99,110,105,131,109,123],
[123,118,112,0,92,107,126,97,94],
[94,105,101,119,0,103,107,90,88],
[121,119,106,104,108,0,127,98,114],
[114,102,80,85,104,84,0,78,94],
[118,107,102,114,121,113,133,0,114],
[127,112,88,117,123,97,117,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,146,163,122,94,118,77,161],
[95,0,120,160,135,147,159,132,156],
[65,91,0,107,110,66,79,101,117],
[48,51,104,0,68,65,66,37,80],
[89,76,101,143,0,63,115,116,129],
[117,64,145,146,148,0,142,115,157],
[93,52,132,145,96,69,0,64,130],
[134,79,110,174,95,96,147,0,132],
[50,55,94,131,82,54,81,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,130,108,109,94,100,101],
[108,0,105,116,99,113,119,104,106],
[105,106,0,115,108,95,121,113,98],
[81,95,96,0,99,98,104,98,86],
[103,112,103,112,0,120,110,100,96],
[102,98,116,113,91,0,105,102,97],
[117,92,90,107,101,106,0,98,107],
[111,107,98,113,111,109,113,0,95],
[110,105,113,125,115,114,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,104,104,126,114,113,89,81],
[122,0,108,127,124,79,119,109,127],
[107,103,0,129,91,95,101,98,101],
[107,84,82,0,111,93,112,95,127],
[85,87,120,100,0,95,64,81,80],
[97,132,116,118,116,0,133,98,117],
[98,92,110,99,147,78,0,77,105],
[122,102,113,116,130,113,134,0,101],
[130,84,110,84,131,94,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,96,89,105,105,118,92,111],
[118,0,112,80,124,109,119,85,109],
[115,99,0,82,124,112,119,107,113],
[122,131,129,0,133,130,118,94,140],
[106,87,87,78,0,86,100,71,82],
[106,102,99,81,125,0,110,70,88],
[93,92,92,93,111,101,0,70,110],
[119,126,104,117,140,141,141,0,121],
[100,102,98,71,129,123,101,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,93,108,97,104,112,106],
[105,0,99,103,101,103,82,101,99],
[105,112,0,106,98,106,103,116,107],
[118,108,105,0,113,108,112,116,104],
[103,110,113,98,0,99,91,118,104],
[114,108,105,103,112,0,98,118,109],
[107,129,108,99,120,113,0,106,110],
[99,110,95,95,93,93,105,0,96],
[105,112,104,107,107,102,101,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,88,106,124,107,84,102,90],
[112,0,118,105,142,119,113,120,99],
[123,93,0,111,120,118,99,128,108],
[105,106,100,0,118,105,90,108,88],
[87,69,91,93,0,89,65,80,76],
[104,92,93,106,122,0,105,107,90],
[127,98,112,121,146,106,0,125,122],
[109,91,83,103,131,104,86,0,85],
[121,112,103,123,135,121,89,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,92,117,103,91,66,117,98],
[99,0,104,98,72,111,96,88,99],
[119,107,0,119,90,126,99,94,75],
[94,113,92,0,98,100,87,73,93],
[108,139,121,113,0,132,108,80,118],
[120,100,85,111,79,0,79,99,73],
[145,115,112,124,103,132,0,104,106],
[94,123,117,138,131,112,107,0,119],
[113,112,136,118,93,138,105,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,106,109,104,107,106,113],
[102,0,107,105,118,113,96,98,101],
[110,104,0,115,111,99,98,104,103],
[105,106,96,0,97,95,100,100,95],
[102,93,100,114,0,95,102,93,105],
[107,98,112,116,116,0,106,112,111],
[104,115,113,111,109,105,0,104,102],
[105,113,107,111,118,99,107,0,113],
[98,110,108,116,106,100,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,111,97,113,103,97,91,86],
[119,0,132,112,120,100,92,105,94],
[100,79,0,95,101,93,90,101,93],
[114,99,116,0,112,99,97,109,97],
[98,91,110,99,0,93,81,106,102],
[108,111,118,112,118,0,98,107,118],
[114,119,121,114,130,113,0,115,102],
[120,106,110,102,105,104,96,0,100],
[125,117,118,114,109,93,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,98,101,95,102,101,105],
[104,0,97,102,100,97,100,111,103],
[103,114,0,108,99,104,109,108,108],
[113,109,103,0,101,110,101,106,117],
[110,111,112,110,0,102,113,107,116],
[116,114,107,101,109,0,108,110,107],
[109,111,102,110,98,103,0,105,112],
[110,100,103,105,104,101,106,0,116],
[106,108,103,94,95,104,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,95,92,77,75,101,97,102],
[128,0,122,106,101,99,112,112,125],
[116,89,0,98,113,108,114,123,107],
[119,105,113,0,114,96,97,118,108],
[134,110,98,97,0,118,102,112,115],
[136,112,103,115,93,0,113,119,105],
[110,99,97,114,109,98,0,122,111],
[114,99,88,93,99,92,89,0,102],
[109,86,104,103,96,106,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,92,103,103,92,108,101,99],
[103,0,101,100,105,105,106,98,88],
[119,110,0,112,113,110,109,108,102],
[108,111,99,0,107,105,104,97,100],
[108,106,98,104,0,113,106,104,97],
[119,106,101,106,98,0,102,106,107],
[103,105,102,107,105,109,0,102,103],
[110,113,103,114,107,105,109,0,102],
[112,123,109,111,114,104,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,111,106,104,103,112,93],
[113,0,99,116,98,108,111,113,120],
[114,112,0,109,100,107,102,102,97],
[100,95,102,0,96,94,110,107,90],
[105,113,111,115,0,115,105,115,110],
[107,103,104,117,96,0,103,98,101],
[108,100,109,101,106,108,0,87,98],
[99,98,109,104,96,113,124,0,108],
[118,91,114,121,101,110,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,100,109,106,122,114,90],
[96,0,88,89,111,84,99,104,96],
[102,123,0,81,103,87,96,97,99],
[111,122,130,0,110,87,111,96,90],
[102,100,108,101,0,102,102,98,95],
[105,127,124,124,109,0,117,94,128],
[89,112,115,100,109,94,0,96,80],
[97,107,114,115,113,117,115,0,109],
[121,115,112,121,116,83,131,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,114,120,95,99,114,124],
[102,0,117,133,105,133,113,107,132],
[99,94,0,118,89,106,82,122,102],
[97,78,93,0,90,115,81,110,98],
[91,106,122,121,0,113,90,102,115],
[116,78,105,96,98,0,74,107,105],
[112,98,129,130,121,137,0,104,129],
[97,104,89,101,109,104,107,0,117],
[87,79,109,113,96,106,82,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,144,125,108,129,104,101,138],
[117,0,133,126,100,125,135,128,132],
[67,78,0,107,70,121,93,82,123],
[86,85,104,0,101,120,102,84,104],
[103,111,141,110,0,139,134,120,124],
[82,86,90,91,72,0,107,109,127],
[107,76,118,109,77,104,0,119,113],
[110,83,129,127,91,102,92,0,121],
[73,79,88,107,87,84,98,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,122,114,121,100,102,113,126],
[98,0,109,108,111,110,112,114,102],
[89,102,0,110,93,103,91,104,99],
[97,103,101,0,104,107,112,90,110],
[90,100,118,107,0,99,104,108,107],
[111,101,108,104,112,0,97,100,113],
[109,99,120,99,107,114,0,101,107],
[98,97,107,121,103,111,110,0,107],
[85,109,112,101,104,98,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,119,101,95,111,102,105],
[96,0,95,98,103,102,113,95,105],
[101,116,0,109,108,114,98,100,119],
[92,113,102,0,103,104,107,96,114],
[110,108,103,108,0,115,112,113,119],
[116,109,97,107,96,0,105,99,105],
[100,98,113,104,99,106,0,95,109],
[109,116,111,115,98,112,116,0,118],
[106,106,92,97,92,106,102,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,117,107,118,115,112,116],
[113,0,114,111,105,95,103,99,109],
[98,97,0,102,102,109,103,105,95],
[94,100,109,0,99,111,105,94,100],
[104,106,109,112,0,111,112,96,102],
[93,116,102,100,100,0,104,94,98],
[96,108,108,106,99,107,0,100,101],
[99,112,106,117,115,117,111,0,114],
[95,102,116,111,109,113,110,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,114,106,97,111,116,90,100],
[112,0,135,119,120,120,116,106,100],
[97,76,0,83,99,100,108,77,74],
[105,92,128,0,120,101,102,93,102],
[114,91,112,91,0,102,91,72,110],
[100,91,111,110,109,0,109,76,97],
[95,95,103,109,120,102,0,84,105],
[121,105,134,118,139,135,127,0,129],
[111,111,137,109,101,114,106,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,113,98,110,113,121,116],
[102,0,107,106,106,103,120,120,112],
[100,104,0,115,95,115,117,125,111],
[98,105,96,0,103,105,109,112,106],
[113,105,116,108,0,106,108,104,105],
[101,108,96,106,105,0,115,111,121],
[98,91,94,102,103,96,0,96,101],
[90,91,86,99,107,100,115,0,97],
[95,99,100,105,106,90,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,128,126,85,128,169,41,127],
[41,0,169,126,85,128,169,82,85],
[83,42,0,85,85,44,126,82,127],
[85,85,126,0,128,87,170,41,86],
[126,126,126,83,0,128,170,83,83],
[83,83,167,124,83,0,167,124,124],
[42,42,85,41,41,44,0,0,42],
[170,129,129,170,128,87,211,0,129],
[84,126,84,125,128,87,169,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,118,120,98,118,96,142,109],
[96,0,118,123,108,135,111,140,129],
[93,93,0,114,99,103,96,130,113],
[91,88,97,0,97,100,86,115,97],
[113,103,112,114,0,121,98,128,126],
[93,76,108,111,90,0,91,109,111],
[115,100,115,125,113,120,0,136,107],
[69,71,81,96,83,102,75,0,93],
[102,82,98,114,85,100,104,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,107,82,100,98,107,112,119],
[115,0,107,96,104,90,92,116,123],
[104,104,0,90,101,96,101,112,116],
[129,115,121,0,114,101,107,111,123],
[111,107,110,97,0,102,98,111,107],
[113,121,115,110,109,0,92,105,114],
[104,119,110,104,113,119,0,125,121],
[99,95,99,100,100,106,86,0,109],
[92,88,95,88,104,97,90,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,114,100,109,100,109,105],
[112,0,105,108,111,107,114,115,111],
[110,106,0,113,109,102,110,111,111],
[97,103,98,0,104,98,109,103,101],
[111,100,102,107,0,107,110,111,110],
[102,104,109,113,104,0,112,108,108],
[111,97,101,102,101,99,0,99,107],
[102,96,100,108,100,103,112,0,99],
[106,100,100,110,101,103,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,127,127,109,109,138,138],
[103,0,103,102,118,99,124,108,106],
[107,108,0,107,100,108,110,122,113],
[84,109,104,0,98,97,110,104,111],
[84,93,111,113,0,106,115,104,108],
[102,112,103,114,105,0,122,106,113],
[102,87,101,101,96,89,0,106,98],
[73,103,89,107,107,105,105,0,109],
[73,105,98,100,103,98,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,117,97,56,96,97,57,96],
[113,0,95,135,111,115,96,94,115],
[94,116,0,136,76,76,136,115,131],
[114,76,75,0,74,38,96,75,96],
[155,100,135,137,0,116,136,96,115],
[115,96,135,173,95,0,117,96,113],
[114,115,75,115,75,94,0,57,57],
[154,117,96,136,115,115,154,0,154],
[115,96,80,115,96,98,154,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,150,90,119,119,119,179,119],
[63,0,152,62,61,92,122,122,93],
[61,59,0,0,30,62,61,92,92],
[121,149,211,0,149,150,92,151,211],
[92,150,181,62,0,122,61,92,122],
[92,119,149,61,89,0,92,92,123],
[92,89,150,119,150,119,0,181,151],
[32,89,119,60,119,119,30,0,151],
[92,118,119,0,89,88,60,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,112,94,95,98,105,99],
[105,0,109,101,108,92,102,95,107],
[109,102,0,106,104,98,96,111,104],
[99,110,105,0,108,100,108,98,99],
[117,103,107,103,0,95,103,96,108],
[116,119,113,111,116,0,102,111,117],
[113,109,115,103,108,109,0,101,107],
[106,116,100,113,115,100,110,0,104],
[112,104,107,112,103,94,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,117,106,94,92,104,87],
[111,0,99,117,105,87,88,106,78],
[110,112,0,112,109,106,101,99,95],
[94,94,99,0,100,84,105,98,96],
[105,106,102,111,0,102,98,102,85],
[117,124,105,127,109,0,107,105,105],
[119,123,110,106,113,104,0,114,117],
[107,105,112,113,109,106,97,0,88],
[124,133,116,115,126,106,94,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,120,98,114,99,95,99,100],
[115,0,116,108,119,118,118,110,96],
[91,95,0,101,113,94,98,98,93],
[113,103,110,0,114,105,101,113,104],
[97,92,98,97,0,98,92,93,95],
[112,93,117,106,113,0,112,103,109],
[116,93,113,110,119,99,0,112,109],
[112,101,113,98,118,108,99,0,91],
[111,115,118,107,116,102,102,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,95,93,99,106,110,91],
[114,0,107,95,93,98,106,110,98],
[106,104,0,100,104,109,110,112,92],
[116,116,111,0,112,106,112,117,104],
[118,118,107,99,0,112,114,108,108],
[112,113,102,105,99,0,112,120,106],
[105,105,101,99,97,99,0,107,105],
[101,101,99,94,103,91,104,0,96],
[120,113,119,107,103,105,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,105,105,52,0,158,105,158],
[211,0,158,158,158,53,158,211,158],
[106,53,0,53,53,53,158,105,53],
[106,53,158,0,158,106,211,105,158],
[159,53,158,53,0,106,158,105,158],
[211,158,158,105,105,0,211,158,211],
[53,53,53,0,53,0,0,105,106],
[106,0,106,106,106,53,106,0,53],
[53,53,158,53,53,0,105,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,89,93,101,106,102,110],
[107,0,107,102,93,94,102,98,97],
[108,104,0,104,107,108,117,101,113],
[122,109,107,0,111,105,122,116,115],
[118,118,104,100,0,107,114,117,118],
[110,117,103,106,104,0,105,110,114],
[105,109,94,89,97,106,0,108,107],
[109,113,110,95,94,101,103,0,108],
[101,114,98,96,93,97,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,130,111,103,125,115,121,134],
[94,0,106,96,104,110,100,111,110],
[81,105,0,104,103,100,94,109,100],
[100,115,107,0,95,104,98,97,112],
[108,107,108,116,0,113,101,107,116],
[86,101,111,107,98,0,109,100,129],
[96,111,117,113,110,102,0,124,123],
[90,100,102,114,104,111,87,0,111],
[77,101,111,99,95,82,88,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,117,107,114,104,97,111,108],
[93,0,101,90,79,95,95,102,92],
[94,110,0,92,83,94,91,87,87],
[104,121,119,0,106,110,119,111,92],
[97,132,128,105,0,98,106,106,94],
[107,116,117,101,113,0,97,108,96],
[114,116,120,92,105,114,0,113,100],
[100,109,124,100,105,103,98,0,97],
[103,119,124,119,117,115,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,99,107,107,98,89,108],
[115,0,106,117,112,109,118,110,105],
[108,105,0,111,112,104,94,98,99],
[112,94,100,0,109,102,104,102,103],
[104,99,99,102,0,97,108,98,94],
[104,102,107,109,114,0,114,106,110],
[113,93,117,107,103,97,0,98,102],
[122,101,113,109,113,105,113,0,110],
[103,106,112,108,117,101,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,96,94,122,94,101,92],
[103,0,98,90,121,105,112,84,94],
[109,113,0,105,97,138,118,116,102],
[115,121,106,0,110,104,111,92,86],
[117,90,114,101,0,134,109,89,102],
[89,106,73,107,77,0,99,86,82],
[117,99,93,100,102,112,0,103,98],
[110,127,95,119,122,125,108,0,110],
[119,117,109,125,109,129,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,112,117,107,101,88,108,107],
[119,0,126,136,101,121,104,113,111],
[99,85,0,106,120,119,112,120,100],
[94,75,105,0,104,88,81,110,86],
[104,110,91,107,0,113,82,104,116],
[110,90,92,123,98,0,114,116,108],
[123,107,99,130,129,97,0,147,119],
[103,98,91,101,107,95,64,0,99],
[104,100,111,125,95,103,92,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,77,111,99,111,111,92],
[107,0,128,85,73,104,100,96,86],
[99,83,0,104,88,92,88,96,99],
[134,126,107,0,94,115,99,130,117],
[100,138,123,117,0,106,102,111,108],
[112,107,119,96,105,0,97,86,94],
[100,111,123,112,109,114,0,122,109],
[100,115,115,81,100,125,89,0,100],
[119,125,112,94,103,117,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,114,95,95,90,103,115],
[107,0,99,106,105,101,98,101,112],
[110,112,0,109,99,101,110,100,120],
[97,105,102,0,102,92,96,97,109],
[116,106,112,109,0,105,107,106,105],
[116,110,110,119,106,0,111,104,114],
[121,113,101,115,104,100,0,105,118],
[108,110,111,114,105,107,106,0,125],
[96,99,91,102,106,97,93,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,109,107,90,110,112,107],
[99,0,96,104,113,104,106,104,111],
[103,115,0,112,125,119,124,108,108],
[102,107,99,0,112,117,117,117,121],
[104,98,86,99,0,92,109,97,92],
[121,107,92,94,119,0,111,108,109],
[101,105,87,94,102,100,0,99,104],
[99,107,103,94,114,103,112,0,107],
[104,100,103,90,119,102,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,113,103,105,96,106,93],
[107,0,97,106,103,88,105,101,86],
[107,114,0,121,101,118,111,111,102],
[98,105,90,0,100,100,103,98,88],
[108,108,110,111,0,114,99,110,103],
[106,123,93,111,97,0,94,104,87],
[115,106,100,108,112,117,0,100,100],
[105,110,100,113,101,107,111,0,115],
[118,125,109,123,108,124,111,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,97,108,114,112,112,123],
[101,0,101,107,114,107,110,102,115],
[109,110,0,96,117,113,106,116,121],
[114,104,115,0,111,119,118,117,115],
[103,97,94,100,0,94,104,105,109],
[97,104,98,92,117,0,107,101,110],
[99,101,105,93,107,104,0,107,101],
[99,109,95,94,106,110,104,0,116],
[88,96,90,96,102,101,110,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,87,97,109,95,104,95,102],
[104,0,99,103,113,95,113,105,99],
[124,112,0,123,117,106,113,116,102],
[114,108,88,0,112,107,112,114,100],
[102,98,94,99,0,104,99,105,101],
[116,116,105,104,107,0,111,101,117],
[107,98,98,99,112,100,0,108,107],
[116,106,95,97,106,110,103,0,95],
[109,112,109,111,110,94,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,114,120,112,114,118,116],
[99,0,105,103,120,107,102,106,107],
[109,106,0,102,113,121,113,117,118],
[97,108,109,0,109,103,112,115,112],
[91,91,98,102,0,120,107,99,118],
[99,104,90,108,91,0,100,101,104],
[97,109,98,99,104,111,0,109,110],
[93,105,94,96,112,110,102,0,115],
[95,104,93,99,93,107,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,94,104,106,101,99,95,98],
[112,0,104,99,110,110,105,109,108],
[117,107,0,102,108,113,110,106,107],
[107,112,109,0,120,108,112,116,103],
[105,101,103,91,0,103,101,101,99],
[110,101,98,103,108,0,104,104,98],
[112,106,101,99,110,107,0,103,106],
[116,102,105,95,110,107,108,0,104],
[113,103,104,108,112,113,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,88,101,104,116,114,96,101],
[107,0,99,108,111,107,121,103,106],
[123,112,0,104,106,142,104,93,112],
[110,103,107,0,124,113,109,99,105],
[107,100,105,87,0,129,115,105,100],
[95,104,69,98,82,0,106,92,102],
[97,90,107,102,96,105,0,104,98],
[115,108,118,112,106,119,107,0,98],
[110,105,99,106,111,109,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,118,101,93,91,94,110,98],
[94,0,114,103,114,91,100,111,117],
[93,97,0,93,105,90,99,80,105],
[110,108,118,0,103,96,95,103,102],
[118,97,106,108,0,95,93,101,96],
[120,120,121,115,116,0,114,87,111],
[117,111,112,116,118,97,0,114,130],
[101,100,131,108,110,124,97,0,102],
[113,94,106,109,115,100,81,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,94,89,87,94,107,94,95],
[114,0,89,102,98,100,116,109,97],
[117,122,0,110,118,99,128,121,115],
[122,109,101,0,101,110,99,117,93],
[124,113,93,110,0,92,118,102,107],
[117,111,112,101,119,0,120,107,108],
[104,95,83,112,93,91,0,97,107],
[117,102,90,94,109,104,114,0,101],
[116,114,96,118,104,103,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,127,112,112,107,117,107,109],
[112,0,118,104,110,116,112,111,122],
[84,93,0,96,105,99,103,98,100],
[99,107,115,0,104,111,110,112,110],
[99,101,106,107,0,109,125,102,118],
[104,95,112,100,102,0,100,99,107],
[94,99,108,101,86,111,0,101,110],
[104,100,113,99,109,112,110,0,105],
[102,89,111,101,93,104,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,99,99,101,93,93,92],
[108,0,107,114,104,107,99,110,91],
[115,104,0,103,106,116,104,113,101],
[112,97,108,0,97,109,101,103,92],
[112,107,105,114,0,124,106,114,107],
[110,104,95,102,87,0,96,93,98],
[118,112,107,110,105,115,0,98,114],
[118,101,98,108,97,118,113,0,100],
[119,120,110,119,104,113,97,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,117,113,110,108,105,99],
[95,0,103,120,100,106,102,116,106],
[104,108,0,108,108,112,105,114,96],
[94,91,103,0,92,95,94,112,91],
[98,111,103,119,0,107,101,112,105],
[101,105,99,116,104,0,92,117,100],
[103,109,106,117,110,119,0,108,106],
[106,95,97,99,99,94,103,0,93],
[112,105,115,120,106,111,105,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,110,117,106,102,118,90,97],
[113,0,115,113,115,114,115,108,97],
[101,96,0,104,93,96,105,87,74],
[94,98,107,0,101,99,98,101,87],
[105,96,118,110,0,110,102,100,99],
[109,97,115,112,101,0,108,93,92],
[93,96,106,113,109,103,0,98,94],
[121,103,124,110,111,118,113,0,107],
[114,114,137,124,112,119,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,113,114,94,98,97,96],
[111,0,95,93,126,76,78,78,92],
[113,116,0,99,129,63,99,64,96],
[98,118,112,0,144,80,112,78,92],
[97,85,82,67,0,96,80,48,112],
[117,135,148,131,115,0,113,97,79],
[113,133,112,99,131,98,0,111,145],
[114,133,147,133,163,114,100,0,129],
[115,119,115,119,99,132,66,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,91,118,106,89,95,96,77],
[97,0,110,113,94,98,104,100,86],
[120,101,0,121,105,111,109,109,99],
[93,98,90,0,99,90,83,101,87],
[105,117,106,112,0,112,106,126,111],
[122,113,100,121,99,0,107,116,109],
[116,107,102,128,105,104,0,122,105],
[115,111,102,110,85,95,89,0,68],
[134,125,112,124,100,102,106,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,99,82,95,95,89,89,101],
[128,0,113,113,98,108,101,102,125],
[112,98,0,105,106,103,106,110,124],
[129,98,106,0,104,104,101,96,119],
[116,113,105,107,0,97,109,108,98],
[116,103,108,107,114,0,119,108,122],
[122,110,105,110,102,92,0,109,118],
[122,109,101,115,103,103,102,0,125],
[110,86,87,92,113,89,93,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,95,127,116,139,106,97,133],
[73,0,79,85,88,108,78,64,77],
[116,132,0,102,121,120,95,97,111],
[84,126,109,0,79,107,98,99,123],
[95,123,90,132,0,111,103,106,110],
[72,103,91,104,100,0,85,82,110],
[105,133,116,113,108,126,0,104,130],
[114,147,114,112,105,129,107,0,123],
[78,134,100,88,101,101,81,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,118,100,121,107,123,109,124],
[93,0,105,115,101,94,114,99,122],
[93,106,0,106,103,71,113,86,100],
[111,96,105,0,123,108,126,99,105],
[90,110,108,88,0,99,114,103,108],
[104,117,140,103,112,0,116,106,124],
[88,97,98,85,97,95,0,83,106],
[102,112,125,112,108,105,128,0,122],
[87,89,111,106,103,87,105,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,82,86,92,96,86,76,74],
[100,0,95,95,91,90,91,88,77],
[129,116,0,106,112,108,98,99,106],
[125,116,105,0,99,95,109,99,92],
[119,120,99,112,0,109,113,107,97],
[115,121,103,116,102,0,105,94,102],
[125,120,113,102,98,106,0,103,105],
[135,123,112,112,104,117,108,0,99],
[137,134,105,119,114,109,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,92,55,65,91,71,48,64],
[120,0,76,92,102,88,69,118,81],
[119,135,0,122,132,105,122,122,124],
[156,119,89,0,100,129,118,137,80],
[146,109,79,111,0,109,119,109,89],
[120,123,106,82,102,0,100,88,102],
[140,142,89,93,92,111,0,100,111],
[163,93,89,74,102,123,111,0,91],
[147,130,87,131,122,109,100,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,112,102,117,124,104,108],
[104,0,107,107,113,112,132,111,103],
[102,104,0,110,107,105,111,103,99],
[99,104,101,0,109,105,115,105,96],
[109,98,104,102,0,110,114,108,100],
[94,99,106,106,101,0,119,107,109],
[87,79,100,96,97,92,0,90,100],
[107,100,108,106,103,104,121,0,86],
[103,108,112,115,111,102,111,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,109,120,128,127,124,116],
[98,0,109,96,109,106,113,95,113],
[110,102,0,100,111,120,111,103,104],
[102,115,111,0,122,112,114,100,119],
[91,102,100,89,0,103,101,100,98],
[83,105,91,99,108,0,106,103,107],
[84,98,100,97,110,105,0,86,98],
[87,116,108,111,111,108,125,0,126],
[95,98,107,92,113,104,113,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,105,99,106,103,112,116],
[106,0,96,102,99,98,108,109,105],
[108,115,0,104,109,116,111,111,108],
[106,109,107,0,105,111,93,105,107],
[112,112,102,106,0,108,110,110,109],
[105,113,95,100,103,0,101,113,104],
[108,103,100,118,101,110,0,105,109],
[99,102,100,106,101,98,106,0,112],
[95,106,103,104,102,107,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,119,123,103,123,106,83],
[96,0,131,96,128,129,95,97,91],
[104,80,0,98,103,85,85,92,74],
[92,115,113,0,121,103,123,106,89],
[88,83,108,90,0,84,88,110,81],
[108,82,126,108,127,0,120,114,89],
[88,116,126,88,123,91,0,94,107],
[105,114,119,105,101,97,117,0,107],
[128,120,137,122,130,122,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,96,103,98,101,83,82],
[108,0,108,91,116,108,85,90,99],
[109,103,0,95,116,93,97,106,94],
[115,120,116,0,126,124,112,121,97],
[108,95,95,85,0,109,95,87,92],
[113,103,118,87,102,0,91,113,91],
[110,126,114,99,116,120,0,95,103],
[128,121,105,90,124,98,116,0,110],
[129,112,117,114,119,120,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,97,93,104,94,99,93,96],
[120,0,108,102,112,98,104,107,100],
[114,103,0,104,108,100,104,107,98],
[118,109,107,0,116,109,111,112,98],
[107,99,103,95,0,95,105,99,102],
[117,113,111,102,116,0,112,107,106],
[112,107,107,100,106,99,0,107,101],
[118,104,104,99,112,104,104,0,91],
[115,111,113,113,109,105,110,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,112,114,102,106,94,122,104],
[111,0,101,107,86,113,106,116,107],
[99,110,0,87,118,131,121,118,123],
[97,104,124,0,90,113,106,129,124],
[109,125,93,121,0,123,123,126,127],
[105,98,80,98,88,0,110,127,104],
[117,105,90,105,88,101,0,113,89],
[89,95,93,82,85,84,98,0,102],
[107,104,88,87,84,107,122,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,89,111,77,97,88,112],
[107,0,96,89,111,112,107,82,115],
[103,115,0,96,97,94,100,91,107],
[122,122,115,0,114,84,109,98,115],
[100,100,114,97,0,92,114,101,124],
[134,99,117,127,119,0,144,108,161],
[114,104,111,102,97,67,0,82,120],
[123,129,120,113,110,103,129,0,127],
[99,96,104,96,87,50,91,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,112,110,104,107,109,95],
[115,0,101,113,110,101,116,126,109],
[105,110,0,113,103,106,101,110,98],
[99,98,98,0,97,103,103,105,94],
[101,101,108,114,0,98,104,113,102],
[107,110,105,108,113,0,109,118,96],
[104,95,110,108,107,102,0,109,91],
[102,85,101,106,98,93,102,0,93],
[116,102,113,117,109,115,120,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,119,92,126,121,109,102,82],
[83,0,91,89,101,119,92,85,90],
[92,120,0,88,95,107,104,111,94],
[119,122,123,0,111,120,109,122,96],
[85,110,116,100,0,114,103,99,91],
[90,92,104,91,97,0,97,82,86],
[102,119,107,102,108,114,0,96,103],
[109,126,100,89,112,129,115,0,113],
[129,121,117,115,120,125,108,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,104,100,58,73,61,73,98],
[128,0,96,125,127,104,126,111,136],
[107,115,0,115,85,99,84,111,98],
[111,86,96,0,90,86,111,84,113],
[153,84,126,121,0,109,97,95,123],
[138,107,112,125,102,0,107,104,137],
[150,85,127,100,114,104,0,96,98],
[138,100,100,127,116,107,115,0,114],
[113,75,113,98,88,74,113,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,95,97,101,87,99,105],
[113,0,109,114,105,115,95,100,101],
[116,102,0,98,103,107,96,104,99],
[116,97,113,0,102,105,101,106,100],
[114,106,108,109,0,107,101,102,90],
[110,96,104,106,104,0,91,100,91],
[124,116,115,110,110,120,0,99,110],
[112,111,107,105,109,111,112,0,86],
[106,110,112,111,121,120,101,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,97,105,114,93,107,114],
[111,0,108,98,97,105,98,103,113],
[111,103,0,107,107,121,113,101,118],
[114,113,104,0,110,106,116,108,118],
[106,114,104,101,0,109,107,113,123],
[97,106,90,105,102,0,101,97,117],
[118,113,98,95,104,110,0,107,118],
[104,108,110,103,98,114,104,0,116],
[97,98,93,93,88,94,93,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,97,108,89,98,102,89],
[118,0,103,96,106,93,98,108,101],
[114,108,0,108,99,104,103,108,108],
[114,115,103,0,106,105,114,101,100],
[103,105,112,105,0,102,103,100,101],
[122,118,107,106,109,0,114,108,104],
[113,113,108,97,108,97,0,107,100],
[109,103,103,110,111,103,104,0,99],
[122,110,103,111,110,107,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,135,76,94,98,119,118,89],
[117,0,119,107,102,123,126,128,98],
[76,92,0,76,91,108,112,115,87],
[135,104,135,0,103,132,111,103,113],
[117,109,120,108,0,117,124,112,102],
[113,88,103,79,94,0,118,67,89],
[92,85,99,100,87,93,0,92,64],
[93,83,96,108,99,144,119,0,97],
[122,113,124,98,109,122,147,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,108,117,104,111,104,126],
[100,0,110,104,102,103,95,96,113],
[108,101,0,107,108,103,95,85,104],
[103,107,104,0,109,109,95,103,118],
[94,109,103,102,0,98,95,96,105],
[107,108,108,102,113,0,98,98,107],
[100,116,116,116,116,113,0,116,128],
[107,115,126,108,115,113,95,0,103],
[85,98,107,93,106,104,83,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,105,109,113,88,114,124,123],
[79,0,93,104,90,72,94,101,89],
[106,118,0,134,124,108,91,145,107],
[102,107,77,0,122,92,92,108,91],
[98,121,87,89,0,78,89,109,102],
[123,139,103,119,133,0,111,132,109],
[97,117,120,119,122,100,0,127,118],
[87,110,66,103,102,79,84,0,77],
[88,122,104,120,109,102,93,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,105,89,65,101,164,114],
[107,0,99,39,91,84,140,111,113],
[97,112,0,59,101,85,78,103,98],
[106,172,152,0,127,95,164,150,144],
[122,120,110,84,0,109,137,125,107],
[146,127,126,116,102,0,112,124,124],
[110,71,133,47,74,99,0,138,71],
[47,100,108,61,86,87,73,0,98],
[97,98,113,67,104,87,140,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,114,119,102,114,104,112],
[103,0,107,104,107,89,102,99,101],
[104,104,0,113,126,106,107,106,106],
[97,107,98,0,105,98,105,100,104],
[92,104,85,106,0,91,98,92,100],
[109,122,105,113,120,0,104,106,104],
[97,109,104,106,113,107,0,108,108],
[107,112,105,111,119,105,103,0,110],
[99,110,105,107,111,107,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,23,84,65,23,21,67,44,23],
[188,0,146,106,106,85,169,65,106],
[127,65,0,65,42,44,44,65,67],
[146,105,146,0,107,125,125,105,129],
[188,105,169,104,0,104,127,107,148],
[190,126,167,86,107,0,127,86,106],
[144,42,167,86,84,84,0,86,127],
[167,146,146,106,104,125,125,0,108],
[188,105,144,82,63,105,84,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,111,106,96,104,90,100,103],
[115,0,114,101,102,109,113,120,115],
[100,97,0,91,98,93,109,108,107],
[105,110,120,0,105,104,106,112,112],
[115,109,113,106,0,105,109,106,121],
[107,102,118,107,106,0,102,107,101],
[121,98,102,105,102,109,0,113,116],
[111,91,103,99,105,104,98,0,109],
[108,96,104,99,90,110,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,109,111,115,107,101,103,114],
[90,0,86,105,112,115,97,101,120],
[102,125,0,114,122,123,112,123,118],
[100,106,97,0,102,113,90,102,108],
[96,99,89,109,0,106,98,106,100],
[104,96,88,98,105,0,96,112,98],
[110,114,99,121,113,115,0,118,121],
[108,110,88,109,105,99,93,0,99],
[97,91,93,103,111,113,90,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,92,94,100,111,87,103,112],
[101,0,82,95,99,82,99,90,99],
[119,129,0,116,125,104,122,119,118],
[117,116,95,0,88,103,126,106,112],
[111,112,86,123,0,109,109,99,105],
[100,129,107,108,102,0,109,98,112],
[124,112,89,85,102,102,0,105,103],
[108,121,92,105,112,113,106,0,96],
[99,112,93,99,106,99,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,130,90,121,120,129,81],
[113,0,109,108,116,112,126,118,100],
[109,102,0,121,95,100,109,92,115],
[81,103,90,0,90,92,128,122,105],
[121,95,116,121,0,121,111,112,108],
[90,99,111,119,90,0,107,121,87],
[91,85,102,83,100,104,0,104,117],
[82,93,119,89,99,90,107,0,98],
[130,111,96,106,103,124,94,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,115,111,110,95,93,109],
[104,0,107,113,114,114,106,97,111],
[104,104,0,98,101,116,80,101,104],
[96,98,113,0,96,115,97,107,98],
[100,97,110,115,0,103,105,108,108],
[101,97,95,96,108,0,95,104,104],
[116,105,131,114,106,116,0,108,121],
[118,114,110,104,103,107,103,0,111],
[102,100,107,113,103,107,90,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,88,97,120,99,113,89,80],
[117,0,109,106,130,123,141,103,86],
[123,102,0,122,146,99,130,99,107],
[114,105,89,0,118,100,128,101,82],
[91,81,65,93,0,84,95,52,89],
[112,88,112,111,127,0,137,108,103],
[98,70,81,83,116,74,0,78,76],
[122,108,112,110,159,103,133,0,119],
[131,125,104,129,122,108,135,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,117,110,119,105,100,106],
[106,0,106,114,101,114,104,98,112],
[104,105,0,116,99,107,100,106,110],
[94,97,95,0,103,103,95,92,94],
[101,110,112,108,0,110,109,104,110],
[92,97,104,108,101,0,107,104,103],
[106,107,111,116,102,104,0,101,114],
[111,113,105,119,107,107,110,0,118],
[105,99,101,117,101,108,97,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,140,140,106,175,141,106,211],
[106,0,211,71,142,106,36,70,211],
[71,0,0,36,72,71,36,35,141],
[71,140,175,0,142,106,176,141,211],
[105,69,139,69,0,105,70,104,211],
[36,105,140,105,106,0,106,106,211],
[70,175,175,35,141,105,0,70,211],
[105,141,176,70,107,105,141,0,141],
[0,0,70,0,0,0,0,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,111,114,100,115,100,111],
[110,0,97,101,104,89,109,98,95],
[107,114,0,94,100,107,113,105,102],
[100,110,117,0,113,101,118,100,104],
[97,107,111,98,0,98,108,94,99],
[111,122,104,110,113,0,123,111,101],
[96,102,98,93,103,88,0,85,99],
[111,113,106,111,117,100,126,0,111],
[100,116,109,107,112,110,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,105,95,110,103,91,83],
[108,0,115,98,97,105,97,97,91],
[102,96,0,95,106,104,99,106,86],
[106,113,116,0,113,119,93,115,81],
[116,114,105,98,0,116,117,113,93],
[101,106,107,92,95,0,99,100,82],
[108,114,112,118,94,112,0,109,106],
[120,114,105,96,98,111,102,0,84],
[128,120,125,130,118,129,105,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,110,95,100,108,121,108,122],
[116,0,126,104,110,112,126,122,122],
[101,85,0,85,91,102,115,105,125],
[116,107,126,0,105,105,122,129,121],
[111,101,120,106,0,105,113,114,120],
[103,99,109,106,106,0,117,106,126],
[90,85,96,89,98,94,0,84,105],
[103,89,106,82,97,105,127,0,126],
[89,89,86,90,91,85,106,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,107,106,108,107,122,104],
[97,0,98,94,97,115,90,104,103],
[105,113,0,106,114,103,99,113,103],
[104,117,105,0,112,120,100,112,107],
[105,114,97,99,0,110,92,105,97],
[103,96,108,91,101,0,89,107,97],
[104,121,112,111,119,122,0,115,115],
[89,107,98,99,106,104,96,0,105],
[107,108,108,104,114,114,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,96,94,94,94,100,105,86],
[115,0,115,110,99,121,116,103,111],
[115,96,0,102,102,104,104,103,99],
[117,101,109,0,106,111,109,110,106],
[117,112,109,105,0,125,120,113,111],
[117,90,107,100,86,0,109,95,101],
[111,95,107,102,91,102,0,101,93],
[106,108,108,101,98,116,110,0,98],
[125,100,112,105,100,110,118,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,109,110,106,121,115,110],
[110,0,107,103,102,101,97,102,109],
[101,104,0,105,105,91,98,109,113],
[102,108,106,0,97,91,91,106,102],
[101,109,106,114,0,104,104,112,114],
[105,110,120,120,107,0,103,115,112],
[90,114,113,120,107,108,0,103,112],
[96,109,102,105,99,96,108,0,104],
[101,102,98,109,97,99,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,95,96,97,113,91,98,135],
[58,0,50,80,66,60,76,70,98],
[116,161,0,108,112,108,101,103,130],
[115,131,103,0,97,124,102,116,125],
[114,145,99,114,0,109,113,127,154],
[98,151,103,87,102,0,88,76,118],
[120,135,110,109,98,123,0,109,125],
[113,141,108,95,84,135,102,0,136],
[76,113,81,86,57,93,86,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,102,114,106,96,109,104],
[107,0,101,98,104,112,99,106,102],
[96,110,0,98,112,108,95,101,95],
[109,113,113,0,116,109,103,104,117],
[97,107,99,95,0,99,98,101,97],
[105,99,103,102,112,0,100,102,94],
[115,112,116,108,113,111,0,105,111],
[102,105,110,107,110,109,106,0,115],
[107,109,116,94,114,117,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,108,120,111,94,108,110,94],
[121,0,111,105,122,112,117,117,99],
[103,100,0,111,109,95,101,108,90],
[91,106,100,0,99,106,111,113,110],
[100,89,102,112,0,101,87,102,82],
[117,99,116,105,110,0,102,116,88],
[103,94,110,100,124,109,0,116,92],
[101,94,103,98,109,95,95,0,92],
[117,112,121,101,129,123,119,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,96,100,95,99,101,106],
[96,0,85,87,83,77,92,106,92],
[109,126,0,102,104,101,97,122,107],
[115,124,109,0,111,105,114,128,118],
[111,128,107,100,0,103,96,119,116],
[116,134,110,106,108,0,99,126,106],
[112,119,114,97,115,112,0,125,109],
[110,105,89,83,92,85,86,0,89],
[105,119,104,93,95,105,102,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,103,111,110,110,115,102],
[99,0,104,84,107,114,116,114,103],
[105,107,0,94,101,113,97,114,102],
[108,127,117,0,113,126,113,126,105],
[100,104,110,98,0,120,97,113,116],
[101,97,98,85,91,0,96,112,98],
[101,95,114,98,114,115,0,110,111],
[96,97,97,85,98,99,101,0,89],
[109,108,109,106,95,113,100,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,92,90,113,95,103,95,96],
[119,0,102,104,106,114,118,100,111],
[119,109,0,95,102,116,113,107,114],
[121,107,116,0,100,111,102,109,99],
[98,105,109,111,0,124,102,91,89],
[116,97,95,100,87,0,113,93,100],
[108,93,98,109,109,98,0,102,117],
[116,111,104,102,120,118,109,0,116],
[115,100,97,112,122,111,94,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,110,99,116,105,105,103],
[100,0,91,115,100,105,103,98,107],
[104,120,0,109,114,106,105,102,126],
[101,96,102,0,117,99,96,105,94],
[112,111,97,94,0,103,86,105,107],
[95,106,105,112,108,0,116,108,101],
[106,108,106,115,125,95,0,113,117],
[106,113,109,106,106,103,98,0,106],
[108,104,85,117,104,110,94,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,101,99,111,110,95,89,130],
[121,0,123,102,109,114,93,107,128],
[110,88,0,108,101,107,99,89,126],
[112,109,103,0,106,120,84,100,129],
[100,102,110,105,0,104,109,104,116],
[101,97,104,91,107,0,86,99,109],
[116,118,112,127,102,125,0,110,122],
[122,104,122,111,107,112,101,0,133],
[81,83,85,82,95,102,89,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,94,112,127,111,118,122,111],
[97,0,118,136,140,93,101,123,125],
[117,93,0,115,107,100,109,124,100],
[99,75,96,0,117,100,87,119,100],
[84,71,104,94,0,90,100,92,101],
[100,118,111,111,121,0,114,114,103],
[93,110,102,124,111,97,0,93,105],
[89,88,87,92,119,97,118,0,95],
[100,86,111,111,110,108,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,95,105,107,132,125,106,114],
[105,0,123,113,109,110,111,112,115],
[116,88,0,113,114,117,110,113,116],
[106,98,98,0,102,100,108,97,94],
[104,102,97,109,0,106,115,115,115],
[79,101,94,111,105,0,113,93,112],
[86,100,101,103,96,98,0,90,108],
[105,99,98,114,96,118,121,0,111],
[97,96,95,117,96,99,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,115,100,110,109,99,111,110],
[95,0,104,91,105,94,92,96,93],
[96,107,0,83,104,104,101,94,106],
[111,120,128,0,115,113,111,118,104],
[101,106,107,96,0,92,93,100,112],
[102,117,107,98,119,0,104,109,99],
[112,119,110,100,118,107,0,119,110],
[100,115,117,93,111,102,92,0,103],
[101,118,105,107,99,112,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,93,110,106,76,112,106],
[95,0,91,84,109,97,78,107,106],
[109,120,0,106,102,103,111,127,115],
[118,127,105,0,113,115,86,112,117],
[101,102,109,98,0,100,78,107,82],
[105,114,108,96,111,0,100,121,99],
[135,133,100,125,133,111,0,126,114],
[99,104,84,99,104,90,85,0,84],
[105,105,96,94,129,112,97,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,108,105,107,116,102,112,108],
[88,0,97,91,99,106,99,85,85],
[103,114,0,92,100,117,87,87,96],
[106,120,119,0,119,122,103,100,99],
[104,112,111,92,0,120,104,102,84],
[95,105,94,89,91,0,92,89,95],
[109,112,124,108,107,119,0,96,82],
[99,126,124,111,109,122,115,0,113],
[103,126,115,112,127,116,129,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,115,94,95,87,106,106,113],
[109,0,113,107,100,106,118,113,118],
[96,98,0,98,91,96,105,87,93],
[117,104,113,0,100,100,114,112,105],
[116,111,120,111,0,104,116,108,110],
[124,105,115,111,107,0,120,114,115],
[105,93,106,97,95,91,0,99,108],
[105,98,124,99,103,97,112,0,109],
[98,93,118,106,101,96,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,91,117,93,95,98,108,91],
[100,0,84,123,91,86,118,125,112],
[120,127,0,128,108,126,98,123,115],
[94,88,83,0,79,76,106,83,91],
[118,120,103,132,0,122,112,130,126],
[116,125,85,135,89,0,91,117,115],
[113,93,113,105,99,120,0,105,112],
[103,86,88,128,81,94,106,0,77],
[120,99,96,120,85,96,99,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,112,119,113,102,107,99,93],
[111,0,111,121,119,111,99,93,93],
[99,100,0,102,90,85,87,96,92],
[92,90,109,0,102,98,103,106,96],
[98,92,121,109,0,104,108,89,89],
[109,100,126,113,107,0,114,101,106],
[104,112,124,108,103,97,0,121,101],
[112,118,115,105,122,110,90,0,107],
[118,118,119,115,122,105,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,103,102,108,101,98,102],
[106,0,115,102,106,111,106,102,105],
[106,96,0,100,98,96,103,106,102],
[108,109,111,0,105,106,106,109,103],
[109,105,113,106,0,104,101,107,110],
[103,100,115,105,107,0,101,106,92],
[110,105,108,105,110,110,0,105,107],
[113,109,105,102,104,105,106,0,109],
[109,106,109,108,101,119,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,102,98,116,96,115,101,102],
[119,0,105,99,122,109,114,117,100],
[109,106,0,116,126,133,107,103,108],
[113,112,95,0,111,106,92,85,102],
[95,89,85,100,0,104,86,85,88],
[115,102,78,105,107,0,87,82,89],
[96,97,104,119,125,124,0,90,93],
[110,94,108,126,126,129,121,0,100],
[109,111,103,109,123,122,118,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,106,97,97,90,100,98],
[103,0,101,105,99,100,94,98,97],
[101,110,0,100,94,103,93,96,104],
[105,106,111,0,101,99,93,97,86],
[114,112,117,110,0,106,103,109,95],
[114,111,108,112,105,0,110,101,104],
[121,117,118,118,108,101,0,105,105],
[111,113,115,114,102,110,106,0,108],
[113,114,107,125,116,107,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,90,96,105,91,95,95],
[108,0,107,97,111,102,93,89,96],
[106,104,0,95,106,99,104,89,101],
[121,114,116,0,107,115,110,99,104],
[115,100,105,104,0,109,99,85,95],
[106,109,112,96,102,0,91,90,103],
[120,118,107,101,112,120,0,107,108],
[116,122,122,112,126,121,104,0,110],
[116,115,110,107,116,108,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,35,71,69,106,140,140,104],
[107,0,106,107,71,141,105,106,142],
[176,105,0,71,105,176,105,105,140],
[140,104,140,0,140,140,104,105,139],
[142,140,106,71,0,106,175,176,141],
[105,70,35,71,105,0,105,70,105],
[71,106,106,107,36,106,0,71,71],
[71,105,106,106,35,141,140,0,70],
[107,69,71,72,70,106,140,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,114,107,102,113,101,120],
[114,0,115,124,108,114,103,108,129],
[99,96,0,115,108,95,107,93,106],
[97,87,96,0,93,86,90,90,104],
[104,103,103,118,0,101,102,100,115],
[109,97,116,125,110,0,110,107,125],
[98,108,104,121,109,101,0,107,110],
[110,103,118,121,111,104,104,0,121],
[91,82,105,107,96,86,101,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,86,91,109,109,93,89,91],
[97,0,110,115,113,118,92,92,117],
[125,101,0,112,123,120,90,113,103],
[120,96,99,0,109,121,97,106,98],
[102,98,88,102,0,102,89,96,97],
[102,93,91,90,109,0,90,98,91],
[118,119,121,114,122,121,0,96,106],
[122,119,98,105,115,113,115,0,107],
[120,94,108,113,114,120,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,107,102,112,108,117,111],
[105,0,109,117,112,123,103,120,99],
[104,102,0,116,105,109,103,106,97],
[104,94,95,0,96,106,95,105,92],
[109,99,106,115,0,106,94,106,101],
[99,88,102,105,105,0,97,104,98],
[103,108,108,116,117,114,0,108,100],
[94,91,105,106,105,107,103,0,106],
[100,112,114,119,110,113,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,121,129,123,118,119,108,100],
[83,0,114,110,96,98,109,82,104],
[90,97,0,85,85,85,97,77,98],
[82,101,126,0,92,87,100,90,109],
[88,115,126,119,0,110,100,98,109],
[93,113,126,124,101,0,112,105,124],
[92,102,114,111,111,99,0,102,107],
[103,129,134,121,113,106,109,0,107],
[111,107,113,102,102,87,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,98,108,113,101,117,110],
[115,0,106,111,111,115,105,105,117],
[101,105,0,106,111,123,113,111,107],
[113,100,105,0,108,119,109,108,129],
[103,100,100,103,0,123,103,90,109],
[98,96,88,92,88,0,90,103,110],
[110,106,98,102,108,121,0,100,111],
[94,106,100,103,121,108,111,0,102],
[101,94,104,82,102,101,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,105,105,121,108,112,111,105],
[75,0,83,89,91,94,102,92,102],
[106,128,0,116,124,104,114,109,114],
[106,122,95,0,118,106,110,107,112],
[90,120,87,93,0,96,103,93,95],
[103,117,107,105,115,0,114,113,102],
[99,109,97,101,108,97,0,102,102],
[100,119,102,104,118,98,109,0,117],
[106,109,97,99,116,109,109,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,127,115,95,112,112,107],
[106,0,92,130,134,92,119,109,105],
[109,119,0,111,130,92,110,104,118],
[84,81,100,0,109,78,117,100,98],
[96,77,81,102,0,97,93,102,86],
[116,119,119,133,114,0,106,128,104],
[99,92,101,94,118,105,0,95,96],
[99,102,107,111,109,83,116,0,104],
[104,106,93,113,125,107,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,106,104,109,113,100,93],
[107,0,106,103,115,117,117,100,103],
[103,105,0,106,115,98,110,99,109],
[105,108,105,0,111,112,115,107,110],
[107,96,96,100,0,100,103,95,98],
[102,94,113,99,111,0,100,91,100],
[98,94,101,96,108,111,0,98,98],
[111,111,112,104,116,120,113,0,120],
[118,108,102,101,113,111,113,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,94,92,111,100,118,86,109],
[112,0,114,118,101,104,94,96,105],
[117,97,0,119,108,119,109,110,122],
[119,93,92,0,96,115,104,94,114],
[100,110,103,115,0,124,120,105,120],
[111,107,92,96,87,0,118,98,110],
[93,117,102,107,91,93,0,86,112],
[125,115,101,117,106,113,125,0,118],
[102,106,89,97,91,101,99,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,87,104,94,95,105,87],
[111,0,104,86,107,101,100,105,86],
[107,107,0,108,107,87,98,102,95],
[124,125,103,0,106,113,109,111,108],
[107,104,104,105,0,107,96,113,82],
[117,110,124,98,104,0,112,127,103],
[116,111,113,102,115,99,0,111,100],
[106,106,109,100,98,84,100,0,87],
[124,125,116,103,129,108,111,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,94,107,113,109,96,106],
[116,0,107,106,119,118,105,116,110],
[113,104,0,94,118,123,97,110,115],
[117,105,117,0,124,112,115,105,112],
[104,92,93,87,0,101,91,88,109],
[98,93,88,99,110,0,102,94,111],
[102,106,114,96,120,109,0,105,113],
[115,95,101,106,123,117,106,0,117],
[105,101,96,99,102,100,98,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,87,91,101,93,94,85,104],
[103,0,74,81,96,98,83,88,94],
[124,137,0,106,112,105,102,97,123],
[120,130,105,0,99,105,106,95,114],
[110,115,99,112,0,107,96,104,96],
[118,113,106,106,104,0,106,109,110],
[117,128,109,105,115,105,0,107,108],
[126,123,114,116,107,102,104,0,123],
[107,117,88,97,115,101,103,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,107,120,104,117,110,108],
[107,0,104,92,90,86,105,97,99],
[96,107,0,87,96,78,91,98,91],
[104,119,124,0,112,117,119,117,95],
[91,121,115,99,0,94,98,104,104],
[107,125,133,94,117,0,115,120,109],
[94,106,120,92,113,96,0,109,99],
[101,114,113,94,107,91,102,0,105],
[103,112,120,116,107,102,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,77,86,111,89,111,124,102],
[103,0,121,91,106,106,112,137,126],
[134,90,0,111,93,99,101,120,116],
[125,120,100,0,109,104,110,124,115],
[100,105,118,102,0,97,111,111,127],
[122,105,112,107,114,0,124,142,125],
[100,99,110,101,100,87,0,122,117],
[87,74,91,87,100,69,89,0,99],
[109,85,95,96,84,86,94,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,120,116,110,104,100,142],
[101,0,110,109,117,111,107,95,117],
[97,101,0,93,104,104,98,92,116],
[91,102,118,0,116,95,112,106,123],
[95,94,107,95,0,110,83,105,114],
[101,100,107,116,101,0,106,99,127],
[107,104,113,99,128,105,0,103,114],
[111,116,119,105,106,112,108,0,115],
[69,94,95,88,97,84,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,123,114,100,99,103,106],
[98,0,120,103,94,95,101,88,82],
[101,91,0,118,87,112,108,83,114],
[88,108,93,0,90,83,84,73,81],
[97,117,124,121,0,94,107,93,108],
[111,116,99,128,117,0,120,105,103],
[112,110,103,127,104,91,0,113,85],
[108,123,128,138,118,106,98,0,115],
[105,129,97,130,103,108,126,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,103,96,104,109,103,102,105],
[90,0,96,97,97,98,100,89,95],
[108,115,0,102,113,104,116,102,108],
[115,114,109,0,106,104,113,109,108],
[107,114,98,105,0,105,108,108,100],
[102,113,107,107,106,0,102,113,105],
[108,111,95,98,103,109,0,105,102],
[109,122,109,102,103,98,106,0,110],
[106,116,103,103,111,106,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,116,113,152,132,119,130,121],
[115,0,112,94,123,104,111,112,123],
[95,99,0,103,133,142,122,111,112],
[98,117,108,0,151,161,121,149,151],
[59,88,78,60,0,102,122,90,121],
[79,107,69,50,109,0,111,88,111],
[92,100,89,90,89,100,0,121,112],
[81,99,100,62,121,123,90,0,123],
[90,88,99,60,90,100,99,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,94,98,100,116,97,108,100],
[99,0,99,98,100,120,100,98,116],
[117,112,0,107,98,120,118,105,136],
[113,113,104,0,95,116,95,105,111],
[111,111,113,116,0,102,110,100,120],
[95,91,91,95,109,0,96,85,114],
[114,111,93,116,101,115,0,102,115],
[103,113,106,106,111,126,109,0,111],
[111,95,75,100,91,97,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,52,106,52,52,105,105,52],
[53,0,53,53,53,0,53,53,53],
[159,158,0,159,159,53,158,106,106],
[105,158,52,0,105,105,52,105,52],
[159,158,52,106,0,0,105,53,53],
[159,211,158,106,211,0,105,159,53],
[106,158,53,159,106,106,0,106,0],
[106,158,105,106,158,52,105,0,105],
[159,158,105,159,158,158,211,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,112,97,111,113,98,100],
[108,0,101,109,91,121,99,101,109],
[110,110,0,124,114,122,110,101,117],
[99,102,87,0,101,109,104,92,116],
[114,120,97,110,0,119,108,107,114],
[100,90,89,102,92,0,96,91,111],
[98,112,101,107,103,115,0,100,112],
[113,110,110,119,104,120,111,0,115],
[111,102,94,95,97,100,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,115,104,108,109,113,108],
[105,0,105,105,104,109,103,118,113],
[113,106,0,97,98,107,115,121,113],
[96,106,114,0,101,100,109,118,119],
[107,107,113,110,0,100,109,125,112],
[103,102,104,111,111,0,108,117,105],
[102,108,96,102,102,103,0,108,110],
[98,93,90,93,86,94,103,0,97],
[103,98,98,92,99,106,101,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,86,106,104,96,113,88,96],
[88,0,98,104,90,103,111,95,96],
[125,113,0,115,118,102,123,108,127],
[105,107,96,0,110,91,118,102,103],
[107,121,93,101,0,104,125,97,110],
[115,108,109,120,107,0,118,105,121],
[98,100,88,93,86,93,0,94,91],
[123,116,103,109,114,106,117,0,111],
[115,115,84,108,101,90,120,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,109,109,97,102,92,100],
[107,0,113,121,119,100,109,112,103],
[91,98,0,94,98,99,100,99,103],
[102,90,117,0,95,96,101,98,93],
[102,92,113,116,0,100,107,110,108],
[114,111,112,115,111,0,111,105,100],
[109,102,111,110,104,100,0,110,105],
[119,99,112,113,101,106,101,0,99],
[111,108,108,118,103,111,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,96,105,105,122,107,124,102],
[116,0,102,102,102,101,108,118,117],
[115,109,0,110,115,101,110,109,118],
[106,109,101,0,103,109,103,107,103],
[106,109,96,108,0,124,107,112,97],
[89,110,110,102,87,0,111,111,91],
[104,103,101,108,104,100,0,116,102],
[87,93,102,104,99,100,95,0,102],
[109,94,93,108,114,120,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,133,128,146,132,128,101,120],
[106,0,134,117,111,104,119,113,112],
[78,77,0,107,100,104,97,108,103],
[83,94,104,0,114,105,130,101,99],
[65,100,111,97,0,100,99,90,107],
[79,107,107,106,111,0,114,94,101],
[83,92,114,81,112,97,0,92,83],
[110,98,103,110,121,117,119,0,100],
[91,99,108,112,104,110,128,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,87,88,135,99,93,128,120],
[104,0,90,89,105,102,96,106,116],
[124,121,0,89,119,121,116,126,110],
[123,122,122,0,154,120,99,140,134],
[76,106,92,57,0,104,58,101,105],
[112,109,90,91,107,0,103,112,83],
[118,115,95,112,153,108,0,121,106],
[83,105,85,71,110,99,90,0,98],
[91,95,101,77,106,128,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,109,108,101,135,115,107],
[106,0,112,98,105,105,126,111,111],
[98,99,0,97,105,97,121,100,102],
[102,113,114,0,110,110,135,113,113],
[103,106,106,101,0,97,134,106,111],
[110,106,114,101,114,0,136,114,113],
[76,85,90,76,77,75,0,90,93],
[96,100,111,98,105,97,121,0,109],
[104,100,109,98,100,98,118,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,100,103,92,94,81,110,106],
[131,0,112,103,108,96,102,117,115],
[111,99,0,107,81,94,88,102,106],
[108,108,104,0,115,103,103,117,100],
[119,103,130,96,0,108,105,116,109],
[117,115,117,108,103,0,106,112,113],
[130,109,123,108,106,105,0,127,113],
[101,94,109,94,95,99,84,0,100],
[105,96,105,111,102,98,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,84,101,93,106,100,95,87],
[117,0,86,90,92,108,94,102,89],
[127,125,0,112,109,119,107,113,104],
[110,121,99,0,114,118,113,102,109],
[118,119,102,97,0,129,115,110,105],
[105,103,92,93,82,0,85,85,87],
[111,117,104,98,96,126,0,101,100],
[116,109,98,109,101,126,110,0,100],
[124,122,107,102,106,124,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,95,114,110,110,105,108,119],
[89,0,91,99,115,95,96,96,106],
[116,120,0,129,117,103,108,111,114],
[97,112,82,0,95,90,87,88,105],
[101,96,94,116,0,92,107,108,123],
[101,116,108,121,119,0,96,119,107],
[106,115,103,124,104,115,0,108,109],
[103,115,100,123,103,92,103,0,108],
[92,105,97,106,88,104,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,100,100,106,109,100,113],
[109,0,115,102,107,110,117,104,118],
[100,96,0,93,97,104,111,99,118],
[111,109,118,0,114,117,116,102,122],
[111,104,114,97,0,114,105,95,123],
[105,101,107,94,97,0,104,99,114],
[102,94,100,95,106,107,0,107,105],
[111,107,112,109,116,112,104,0,129],
[98,93,93,89,88,97,106,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,88,93,108,111,100,95],
[109,0,111,104,108,105,135,109,109],
[108,100,0,100,111,119,122,93,86],
[123,107,111,0,115,101,152,121,130],
[118,103,100,96,0,98,118,94,98],
[103,106,92,110,113,0,118,91,117],
[100,76,89,59,93,93,0,81,94],
[111,102,118,90,117,120,130,0,97],
[116,102,125,81,113,94,117,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,96,108,92,96,85,115,97],
[103,0,109,109,93,106,100,102,102],
[115,102,0,111,105,112,89,109,100],
[103,102,100,0,106,114,100,106,98],
[119,118,106,105,0,104,99,110,106],
[115,105,99,97,107,0,108,117,114],
[126,111,122,111,112,103,0,133,105],
[96,109,102,105,101,94,78,0,97],
[114,109,111,113,105,97,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,102,111,110,101,100,122,100],
[116,0,92,110,102,113,127,118,113],
[109,119,0,99,112,116,121,130,115],
[100,101,112,0,115,98,121,115,116],
[101,109,99,96,0,108,108,112,112],
[110,98,95,113,103,0,118,123,117],
[111,84,90,90,103,93,0,100,104],
[89,93,81,96,99,88,111,0,92],
[111,98,96,95,99,94,107,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,102,112,107,107,104,98],
[115,0,108,113,115,105,114,109,99],
[110,103,0,110,115,105,116,101,107],
[109,98,101,0,117,92,107,94,98],
[99,96,96,94,0,104,95,97,91],
[104,106,106,119,107,0,115,98,94],
[104,97,95,104,116,96,0,95,97],
[107,102,110,117,114,113,116,0,106],
[113,112,104,113,120,117,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,122,103,107,118,75,99,103],
[108,0,120,112,108,115,90,105,94],
[89,91,0,100,102,107,89,98,95],
[108,99,111,0,117,104,93,104,100],
[104,103,109,94,0,116,106,106,100],
[93,96,104,107,95,0,87,107,95],
[136,121,122,118,105,124,0,110,112],
[112,106,113,107,105,104,101,0,95],
[108,117,116,111,111,116,99,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,98,114,111,114,109,109,120],
[98,0,100,124,102,116,103,100,117],
[113,111,0,118,112,108,98,104,113],
[97,87,93,0,102,107,105,106,101],
[100,109,99,109,0,107,98,99,110],
[97,95,103,104,104,0,93,98,102],
[102,108,113,106,113,118,0,108,111],
[102,111,107,105,112,113,103,0,118],
[91,94,98,110,101,109,100,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,96,85,101,105,98,89,95],
[115,0,105,98,107,105,105,96,101],
[115,106,0,93,100,102,99,97,93],
[126,113,118,0,104,116,107,99,106],
[110,104,111,107,0,114,89,90,98],
[106,106,109,95,97,0,91,103,96],
[113,106,112,104,122,120,0,108,109],
[122,115,114,112,121,108,103,0,101],
[116,110,118,105,113,115,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,117,112,104,97,120,104,103],
[113,0,113,108,105,117,116,106,114],
[94,98,0,95,113,103,113,93,87],
[99,103,116,0,108,97,121,105,100],
[107,106,98,103,0,109,112,106,103],
[114,94,108,114,102,0,116,107,96],
[91,95,98,90,99,95,0,92,97],
[107,105,118,106,105,104,119,0,113],
[108,97,124,111,108,115,114,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,109,115,109,102,125,95],
[104,0,105,120,114,108,108,126,104],
[104,106,0,119,109,114,123,123,117],
[102,91,92,0,94,98,106,102,113],
[96,97,102,117,0,97,105,113,103],
[102,103,97,113,114,0,99,115,108],
[109,103,88,105,106,112,0,125,104],
[86,85,88,109,98,96,86,0,89],
[116,107,94,98,108,103,107,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,107,108,96,102,108,101],
[105,0,100,110,104,88,102,104,98],
[115,111,0,111,106,101,98,99,118],
[104,101,100,0,114,109,109,102,103],
[103,107,105,97,0,89,110,98,101],
[115,123,110,102,122,0,120,115,123],
[109,109,113,102,101,91,0,104,104],
[103,107,112,109,113,96,107,0,100],
[110,113,93,108,110,88,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,107,112,119,110,97,128],
[99,0,99,93,109,101,114,106,116],
[112,112,0,101,109,99,108,100,127],
[104,118,110,0,110,112,105,109,121],
[99,102,102,101,0,101,101,93,103],
[92,110,112,99,110,0,112,103,114],
[101,97,103,106,110,99,0,97,123],
[114,105,111,102,118,108,114,0,122],
[83,95,84,90,108,97,88,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,81,88,105,99,96,81,109],
[116,0,108,113,122,118,122,103,121],
[130,103,0,102,125,121,130,101,117],
[123,98,109,0,104,114,114,112,108],
[106,89,86,107,0,103,102,101,112],
[112,93,90,97,108,0,101,89,110],
[115,89,81,97,109,110,0,90,119],
[130,108,110,99,110,122,121,0,122],
[102,90,94,103,99,101,92,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,75,89,110,115,121,98,92],
[133,0,111,104,127,119,137,94,130],
[136,100,0,100,124,136,136,103,135],
[122,107,111,0,121,110,114,93,109],
[101,84,87,90,0,111,111,105,91],
[96,92,75,101,100,0,120,81,106],
[90,74,75,97,100,91,0,100,83],
[113,117,108,118,106,130,111,0,103],
[119,81,76,102,120,105,128,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,106,52,26,159,79,160,105],
[158,0,211,105,132,159,132,184,159],
[105,0,0,53,53,106,53,131,80],
[159,106,158,0,80,158,133,185,105],
[185,79,158,131,0,184,133,211,131],
[52,52,105,53,27,0,27,105,105],
[132,79,158,78,78,184,0,211,131],
[51,27,80,26,0,106,0,0,79],
[106,52,131,106,80,106,80,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,115,94,105,107,115,94,124],
[88,0,99,89,92,103,106,83,100],
[96,112,0,104,87,108,83,89,126],
[117,122,107,0,100,119,107,92,100],
[106,119,124,111,0,94,92,114,138],
[104,108,103,92,117,0,105,95,128],
[96,105,128,104,119,106,0,92,123],
[117,128,122,119,97,116,119,0,122],
[87,111,85,111,73,83,88,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,93,105,124,110,92,104,106],
[124,0,105,145,138,110,108,125,113],
[118,106,0,112,129,104,108,117,109],
[106,66,99,0,118,100,101,109,97],
[87,73,82,93,0,97,87,101,84],
[101,101,107,111,114,0,110,101,110],
[119,103,103,110,124,101,0,127,119],
[107,86,94,102,110,110,84,0,93],
[105,98,102,114,127,101,92,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,102,116,97,103,113,95],
[99,0,99,94,105,100,96,97,90],
[100,112,0,100,119,109,113,113,101],
[109,117,111,0,111,104,106,112,112],
[95,106,92,100,0,98,97,97,87],
[114,111,102,107,113,0,110,113,90],
[108,115,98,105,114,101,0,100,94],
[98,114,98,99,114,98,111,0,101],
[116,121,110,99,124,121,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,120,102,110,107,115,93],
[116,0,110,108,104,107,122,105,110],
[110,101,0,115,105,113,109,112,99],
[91,103,96,0,115,108,119,103,110],
[109,107,106,96,0,110,112,105,104],
[101,104,98,103,101,0,104,99,105],
[104,89,102,92,99,107,0,107,97],
[96,106,99,108,106,112,104,0,97],
[118,101,112,101,107,106,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,84,98,95,86,105,92,102],
[93,0,81,88,93,64,66,103,90],
[127,130,0,102,124,92,86,115,109],
[113,123,109,0,118,94,110,96,119],
[116,118,87,93,0,99,93,81,84],
[125,147,119,117,112,0,95,112,115],
[106,145,125,101,118,116,0,124,120],
[119,108,96,115,130,99,87,0,106],
[109,121,102,92,127,96,91,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,101,86,96,79,95,91,81],
[131,0,108,105,133,108,93,122,126],
[110,103,0,88,112,106,116,103,104],
[125,106,123,0,116,117,100,112,107],
[115,78,99,95,0,93,93,75,87],
[132,103,105,94,118,0,107,94,114],
[116,118,95,111,118,104,0,104,119],
[120,89,108,99,136,117,107,0,103],
[130,85,107,104,124,97,92,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,97,97,107,87,101,111],
[107,0,121,107,97,113,104,121,113],
[105,90,0,99,87,104,98,120,99],
[114,104,112,0,96,129,107,126,128],
[114,114,124,115,0,112,95,116,110],
[104,98,107,82,99,0,81,103,115],
[124,107,113,104,116,130,0,131,117],
[110,90,91,85,95,108,80,0,105],
[100,98,112,83,101,96,94,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,101,112,108,103,103,116],
[99,0,108,95,102,110,98,106,101],
[106,103,0,104,110,108,104,97,102],
[110,116,107,0,108,117,102,120,110],
[99,109,101,103,0,108,96,94,104],
[103,101,103,94,103,0,99,100,111],
[108,113,107,109,115,112,0,105,117],
[108,105,114,91,117,111,106,0,107],
[95,110,109,101,107,100,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,90,119,103,105,104,100,99],
[101,0,99,114,103,103,95,98,111],
[121,112,0,124,108,118,105,105,110],
[92,97,87,0,99,90,82,90,90],
[108,108,103,112,0,105,99,106,100],
[106,108,93,121,106,0,95,94,101],
[107,116,106,129,112,116,0,102,108],
[111,113,106,121,105,117,109,0,98],
[112,100,101,121,111,110,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,94,92,107,98,99,114,89],
[107,0,106,98,112,110,107,121,103],
[117,105,0,96,108,106,105,112,99],
[119,113,115,0,116,108,115,122,98],
[104,99,103,95,0,98,87,116,99],
[113,101,105,103,113,0,100,121,108],
[112,104,106,96,124,111,0,126,108],
[97,90,99,89,95,90,85,0,88],
[122,108,112,113,112,103,103,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,109,105,93,88,97,100],
[100,0,110,112,97,93,105,92,95],
[99,101,0,98,84,87,91,92,93],
[102,99,113,0,97,94,96,104,100],
[106,114,127,114,0,110,110,102,113],
[118,118,124,117,101,0,105,120,108],
[123,106,120,115,101,106,0,105,103],
[114,119,119,107,109,91,106,0,109],
[111,116,118,111,98,103,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,110,93,107,95,94,98],
[109,0,101,113,96,114,105,109,125],
[101,110,0,100,79,91,105,87,109],
[101,98,111,0,98,125,118,112,123],
[118,115,132,113,0,125,111,103,131],
[104,97,120,86,86,0,111,88,110],
[116,106,106,93,100,100,0,107,118],
[117,102,124,99,108,123,104,0,117],
[113,86,102,88,80,101,93,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,129,107,107,105,107,102],
[108,0,134,125,103,108,115,121,100],
[99,77,0,98,83,85,94,81,87],
[82,86,113,0,80,86,86,83,95],
[104,108,128,131,0,111,109,118,108],
[104,103,126,125,100,0,112,112,107],
[106,96,117,125,102,99,0,107,117],
[104,90,130,128,93,99,104,0,106],
[109,111,124,116,103,104,94,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,105,98,102,111,116,111],
[108,0,101,93,100,95,93,113,114],
[109,110,0,98,106,106,109,130,119],
[106,118,113,0,107,103,102,129,119],
[113,111,105,104,0,106,85,123,119],
[109,116,105,108,105,0,98,108,112],
[100,118,102,109,126,113,0,127,126],
[95,98,81,82,88,103,84,0,92],
[100,97,92,92,92,99,85,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,94,98,102,106,96,105,93],
[112,0,112,98,120,115,109,110,102],
[117,99,0,110,119,105,100,111,97],
[113,113,101,0,115,92,98,111,92],
[109,91,92,96,0,96,93,109,87],
[105,96,106,119,115,0,109,107,109],
[115,102,111,113,118,102,0,105,91],
[106,101,100,100,102,104,106,0,96],
[118,109,114,119,124,102,120,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,102,115,112,95,103,107],
[97,0,110,88,109,112,106,112,95],
[104,101,0,84,101,104,93,95,90],
[109,123,127,0,109,119,95,120,106],
[96,102,110,102,0,107,88,113,104],
[99,99,107,92,104,0,87,106,101],
[116,105,118,116,123,124,0,117,110],
[108,99,116,91,98,105,94,0,89],
[104,116,121,105,107,110,101,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,100,114,107,98,111,126,107],
[98,0,103,113,99,94,97,112,103],
[111,108,0,116,100,106,105,107,122],
[97,98,95,0,106,100,97,107,92],
[104,112,111,105,0,116,96,104,104],
[113,117,105,111,95,0,103,110,110],
[100,114,106,114,115,108,0,119,103],
[85,99,104,104,107,101,92,0,96],
[104,108,89,119,107,101,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,95,105,105,96,105,87,94],
[120,0,106,114,106,108,105,104,98],
[116,105,0,102,101,105,106,107,105],
[106,97,109,0,102,100,109,100,104],
[106,105,110,109,0,105,110,111,104],
[115,103,106,111,106,0,104,104,117],
[106,106,105,102,101,107,0,102,102],
[124,107,104,111,100,107,109,0,103],
[117,113,106,107,107,94,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,114,131,107,85,108,95,100],
[117,0,114,137,122,115,121,111,105],
[97,97,0,113,100,93,98,101,88],
[80,74,98,0,95,81,91,98,80],
[104,89,111,116,0,90,105,95,91],
[126,96,118,130,121,0,116,115,100],
[103,90,113,120,106,95,0,100,102],
[116,100,110,113,116,96,111,0,111],
[111,106,123,131,120,111,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,116,114,102,106,115,107],
[113,0,108,113,116,99,118,111,102],
[107,103,0,114,117,112,107,113,104],
[95,98,97,0,117,97,95,105,88],
[97,95,94,94,0,96,93,107,96],
[109,112,99,114,115,0,102,116,97],
[105,93,104,116,118,109,0,114,108],
[96,100,98,106,104,95,97,0,102],
[104,109,107,123,115,114,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,101,95,104,93,97,115,102],
[95,0,103,94,105,100,94,97,101],
[110,108,0,89,94,107,91,107,98],
[116,117,122,0,120,113,101,113,115],
[107,106,117,91,0,103,106,97,96],
[118,111,104,98,108,0,94,123,99],
[114,117,120,110,105,117,0,108,96],
[96,114,104,98,114,88,103,0,95],
[109,110,113,96,115,112,115,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,100,96,113,97,102,103],
[105,0,111,105,98,121,92,102,97],
[99,100,0,102,89,114,101,90,101],
[111,106,109,0,110,108,93,96,106],
[115,113,122,101,0,110,109,113,114],
[98,90,97,103,101,0,85,103,102],
[114,119,110,118,102,126,0,112,109],
[109,109,121,115,98,108,99,0,110],
[108,114,110,105,97,109,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,96,118,101,113,116,118],
[113,0,103,104,115,99,105,119,122],
[111,108,0,105,108,129,119,127,117],
[115,107,106,0,103,123,110,105,118],
[93,96,103,108,0,94,100,113,98],
[110,112,82,88,117,0,116,125,122],
[98,106,92,101,111,95,0,113,110],
[95,92,84,106,98,86,98,0,109],
[93,89,94,93,113,89,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,112,103,108,103,102,122],
[109,0,115,109,108,105,107,96,118],
[99,96,0,110,94,100,108,102,124],
[99,102,101,0,103,97,108,104,105],
[108,103,117,108,0,114,116,107,120],
[103,106,111,114,97,0,104,102,109],
[108,104,103,103,95,107,0,95,118],
[109,115,109,107,104,109,116,0,118],
[89,93,87,106,91,102,93,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,119,114,113,106,98,113,113],
[63,0,72,104,65,81,104,81,72],
[92,139,0,129,102,118,112,101,127],
[97,107,82,0,90,89,91,91,110],
[98,146,109,121,0,113,101,107,121],
[105,130,93,122,98,0,105,83,120],
[113,107,99,120,110,106,0,78,117],
[98,130,110,120,104,128,133,0,104],
[98,139,84,101,90,91,94,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,98,89,113,106,112,97,104],
[101,0,104,100,120,90,128,129,101],
[113,107,0,103,115,87,119,115,106],
[122,111,108,0,125,96,122,110,118],
[98,91,96,86,0,75,118,114,88],
[105,121,124,115,136,0,140,133,129],
[99,83,92,89,93,71,0,109,85],
[114,82,96,101,97,78,102,0,100],
[107,110,105,93,123,82,126,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,82,105,84,92,100,91,109],
[80,0,75,102,81,95,80,85,92],
[129,136,0,111,100,110,118,95,145],
[106,109,100,0,99,83,90,110,108],
[127,130,111,112,0,103,107,93,100],
[119,116,101,128,108,0,116,99,97],
[111,131,93,121,104,95,0,94,119],
[120,126,116,101,118,112,117,0,104],
[102,119,66,103,111,114,92,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,119,111,113,106,113,113],
[107,0,109,115,102,121,115,110,109],
[100,102,0,105,103,112,103,107,111],
[92,96,106,0,95,101,105,107,102],
[100,109,108,116,0,111,113,112,110],
[98,90,99,110,100,0,107,107,103],
[105,96,108,106,98,104,0,103,104],
[98,101,104,104,99,104,108,0,96],
[98,102,100,109,101,108,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,105,120,114,109,113,133],
[99,0,112,115,123,110,111,111,125],
[97,99,0,99,110,106,102,115,126],
[106,96,112,0,112,110,105,103,114],
[91,88,101,99,0,102,99,85,111],
[97,101,105,101,109,0,95,95,103],
[102,100,109,106,112,116,0,107,115],
[98,100,96,108,126,116,104,0,111],
[78,86,85,97,100,108,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,101,126,104,108,119,112],
[103,0,102,101,100,92,99,111,112],
[109,109,0,93,130,103,101,118,112],
[110,110,118,0,115,96,119,123,100],
[85,111,81,96,0,100,98,94,98],
[107,119,108,115,111,0,93,104,100],
[103,112,110,92,113,118,0,130,114],
[92,100,93,88,117,107,81,0,95],
[99,99,99,111,113,111,97,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,138,114,94,80,86,80,93],
[119,0,116,118,96,121,96,106,130],
[73,95,0,93,73,86,60,95,85],
[97,93,118,0,95,96,122,86,121],
[117,115,138,116,0,140,83,153,126],
[131,90,125,115,71,0,109,106,128],
[125,115,151,89,128,102,0,140,136],
[131,105,116,125,58,105,71,0,105],
[118,81,126,90,85,83,75,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,108,129,108,119,110,99,117],
[95,0,95,108,97,112,101,96,95],
[103,116,0,119,102,104,113,107,114],
[82,103,92,0,103,103,99,104,96],
[103,114,109,108,0,110,111,107,106],
[92,99,107,108,101,0,99,98,96],
[101,110,98,112,100,112,0,95,92],
[112,115,104,107,104,113,116,0,117],
[94,116,97,115,105,115,119,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,99,106,75,99,101,98,95],
[125,0,113,107,100,108,109,109,110],
[112,98,0,107,88,121,111,105,113],
[105,104,104,0,90,101,109,105,119],
[136,111,123,121,0,130,127,105,116],
[112,103,90,110,81,0,97,103,107],
[110,102,100,102,84,114,0,89,107],
[113,102,106,106,106,108,122,0,112],
[116,101,98,92,95,104,104,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,110,92,116,108,112,99],
[109,0,110,107,108,107,102,104,106],
[100,101,0,106,106,115,111,106,95],
[101,104,105,0,94,111,106,104,97],
[119,103,105,117,0,116,113,112,109],
[95,104,96,100,95,0,102,95,96],
[103,109,100,105,98,109,0,98,100],
[99,107,105,107,99,116,113,0,107],
[112,105,116,114,102,115,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,108,112,104,108,125,122],
[101,0,109,116,122,108,110,97,118],
[112,102,0,99,129,104,122,111,117],
[103,95,112,0,117,97,114,110,108],
[99,89,82,94,0,95,113,94,110],
[107,103,107,114,116,0,125,99,115],
[103,101,89,97,98,86,0,98,101],
[86,114,100,101,117,112,113,0,109],
[89,93,94,103,101,96,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,85,98,107,98,96,109,91],
[121,0,93,99,118,117,88,109,100],
[126,118,0,97,115,124,121,126,99],
[113,112,114,0,117,117,98,121,105],
[104,93,96,94,0,124,108,118,100],
[113,94,87,94,87,0,71,99,95],
[115,123,90,113,103,140,0,121,111],
[102,102,85,90,93,112,90,0,114],
[120,111,112,106,111,116,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,118,109,112,124,110,119,129],
[107,0,104,107,117,126,118,103,126],
[93,107,0,95,107,117,106,101,114],
[102,104,116,0,105,133,106,124,125],
[99,94,104,106,0,111,92,104,112],
[87,85,94,78,100,0,88,95,103],
[101,93,105,105,119,123,0,111,122],
[92,108,110,87,107,116,100,0,115],
[82,85,97,86,99,108,89,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,161,133,81,82,128,114,105],
[117,0,136,123,93,134,115,126,91],
[50,75,0,104,81,63,107,72,106],
[78,88,107,0,85,120,120,129,108],
[130,118,130,126,0,105,108,128,128],
[129,77,148,91,106,0,127,139,126],
[83,96,104,91,103,84,0,114,117],
[97,85,139,82,83,72,97,0,116],
[106,120,105,103,83,85,94,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,96,104,109,97,111,103],
[105,0,112,109,116,109,105,115,111],
[105,99,0,112,114,104,102,106,114],
[115,102,99,0,110,108,100,122,103],
[107,95,97,101,0,103,87,97,101],
[102,102,107,103,108,0,99,99,104],
[114,106,109,111,124,112,0,111,105],
[100,96,105,89,114,112,100,0,102],
[108,100,97,108,110,107,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,101,107,106,107,103,107],
[102,0,101,112,111,106,108,106,97],
[114,110,0,113,121,103,97,121,104],
[110,99,98,0,101,107,98,109,103],
[104,100,90,110,0,114,100,110,97],
[105,105,108,104,97,0,87,100,95],
[104,103,114,113,111,124,0,117,102],
[108,105,90,102,101,111,94,0,106],
[104,114,107,108,114,116,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,118,121,112,127,100,114,110],
[105,0,114,120,114,122,106,108,116],
[93,97,0,108,105,133,90,104,113],
[90,91,103,0,111,125,90,101,89],
[99,97,106,100,0,110,105,94,98],
[84,89,78,86,101,0,80,93,92],
[111,105,121,121,106,131,0,94,128],
[97,103,107,110,117,118,117,0,123],
[101,95,98,122,113,119,83,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,84,99,108,102,89,103,95],
[107,0,98,109,107,98,104,98,97],
[127,113,0,115,129,108,109,115,103],
[112,102,96,0,120,99,94,109,102],
[103,104,82,91,0,96,100,90,95],
[109,113,103,112,115,0,109,111,107],
[122,107,102,117,111,102,0,104,112],
[108,113,96,102,121,100,107,0,101],
[116,114,108,109,116,104,99,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,96,101,117,102,105,116,114],
[103,0,110,96,99,94,103,102,97],
[115,101,0,102,101,109,108,102,116],
[110,115,109,0,87,110,105,112,107],
[94,112,110,124,0,109,113,99,108],
[109,117,102,101,102,0,106,111,103],
[106,108,103,106,98,105,0,103,112],
[95,109,109,99,112,100,108,0,104],
[97,114,95,104,103,108,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,113,108,107,97,89,100,95],
[117,0,101,109,115,106,91,109,112],
[98,110,0,102,115,91,97,109,87],
[103,102,109,0,113,93,83,107,92],
[104,96,96,98,0,88,93,91,84],
[114,105,120,118,123,0,104,132,133],
[122,120,114,128,118,107,0,125,96],
[111,102,102,104,120,79,86,0,107],
[116,99,124,119,127,78,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,104,109,108,106,113,99],
[112,0,95,107,120,105,105,128,98],
[106,116,0,102,102,107,93,99,90],
[107,104,109,0,114,113,102,111,98],
[102,91,109,97,0,111,96,106,106],
[103,106,104,98,100,0,97,95,96],
[105,106,118,109,115,114,0,117,105],
[98,83,112,100,105,116,94,0,93],
[112,113,121,113,105,115,106,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,127,168,145,104,104,104,145],
[66,0,63,109,21,87,83,64,64],
[84,148,0,107,62,85,84,104,128],
[43,102,104,0,40,106,61,104,84],
[66,190,149,171,0,87,129,129,127],
[107,124,126,105,124,0,83,124,127],
[107,128,127,150,82,128,0,125,105],
[107,147,107,107,82,87,86,0,127],
[66,147,83,127,84,84,106,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,125,130,112,129,122,104,114],
[78,0,91,116,106,116,110,91,89],
[86,120,0,101,83,105,99,122,101],
[81,95,110,0,98,125,97,99,89],
[99,105,128,113,0,126,105,106,106],
[82,95,106,86,85,0,106,106,97],
[89,101,112,114,106,105,0,106,107],
[107,120,89,112,105,105,105,0,73],
[97,122,110,122,105,114,104,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,126,114,108,111,105,114,108],
[113,0,115,98,119,121,102,102,119],
[85,96,0,99,97,99,97,95,105],
[97,113,112,0,90,108,112,99,112],
[103,92,114,121,0,114,108,112,123],
[100,90,112,103,97,0,106,104,106],
[106,109,114,99,103,105,0,101,115],
[97,109,116,112,99,107,110,0,116],
[103,92,106,99,88,105,96,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,108,99,111,98,120,104],
[100,0,115,109,105,111,106,113,111],
[100,96,0,110,99,105,98,108,109],
[103,102,101,0,93,102,103,107,101],
[112,106,112,118,0,113,105,101,104],
[100,100,106,109,98,0,99,107,100],
[113,105,113,108,106,112,0,113,109],
[91,98,103,104,110,104,98,0,112],
[107,100,102,110,107,111,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,83,102,95,90,98,107,93],
[108,0,94,88,93,95,117,92,98],
[128,117,0,106,101,106,107,106,101],
[109,123,105,0,101,96,116,105,101],
[116,118,110,110,0,96,110,108,95],
[121,116,105,115,115,0,121,113,108],
[113,94,104,95,101,90,0,106,98],
[104,119,105,106,103,98,105,0,111],
[118,113,110,110,116,103,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,118,116,101,103,93,73,93],
[117,0,130,118,91,97,107,87,125],
[93,81,0,103,95,94,83,83,115],
[95,93,108,0,76,91,104,91,89],
[110,120,116,135,0,130,115,98,125],
[108,114,117,120,81,0,115,89,113],
[118,104,128,107,96,96,0,84,108],
[138,124,128,120,113,122,127,0,105],
[118,86,96,122,86,98,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,90,103,98,95,93,105,99],
[104,0,91,100,93,98,92,100,106],
[121,120,0,124,104,106,114,112,111],
[108,111,87,0,92,100,90,100,97],
[113,118,107,119,0,107,103,115,117],
[116,113,105,111,104,0,106,99,111],
[118,119,97,121,108,105,0,111,108],
[106,111,99,111,96,112,100,0,112],
[112,105,100,114,94,100,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,117,103,118,123,104,110,127],
[97,0,100,85,93,104,84,111,122],
[94,111,0,91,97,118,115,93,122],
[108,126,120,0,90,123,105,126,122],
[93,118,114,121,0,113,107,86,119],
[88,107,93,88,98,0,89,83,103],
[107,127,96,106,104,122,0,109,130],
[101,100,118,85,125,128,102,0,125],
[84,89,89,89,92,108,81,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,119,120,100,109,98,106,106],
[108,0,91,123,127,126,107,103,103],
[92,120,0,113,107,117,109,104,111],
[91,88,98,0,101,122,92,91,97],
[111,84,104,110,0,113,106,103,96],
[102,85,94,89,98,0,84,84,86],
[113,104,102,119,105,127,0,112,106],
[105,108,107,120,108,127,99,0,100],
[105,108,100,114,115,125,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,88,90,105,73,101,103,76],
[126,0,110,117,115,111,102,119,96],
[123,101,0,98,105,103,103,120,88],
[121,94,113,0,118,107,117,112,110],
[106,96,106,93,0,97,122,97,106],
[138,100,108,104,114,0,118,116,117],
[110,109,108,94,89,93,0,103,93],
[108,92,91,99,114,95,108,0,108],
[135,115,123,101,105,94,118,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,96,106,114,110,113,113],
[96,0,112,100,100,114,106,110,113],
[100,99,0,103,90,101,103,99,111],
[115,111,108,0,100,111,110,107,103],
[105,111,121,111,0,112,108,113,113],
[97,97,110,100,99,0,110,101,99],
[101,105,108,101,103,101,0,111,106],
[98,101,112,104,98,110,100,0,100],
[98,98,100,108,98,112,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,104,112,116,115,100,108],
[102,0,99,101,107,113,107,96,103],
[102,112,0,102,121,125,120,106,116],
[107,110,109,0,113,116,114,92,117],
[99,104,90,98,0,100,100,85,109],
[95,98,86,95,111,0,110,84,104],
[96,104,91,97,111,101,0,91,107],
[111,115,105,119,126,127,120,0,122],
[103,108,95,94,102,107,104,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,92,93,101,106,116,98,109],
[118,0,108,74,104,82,80,112,111],
[119,103,0,73,116,95,119,101,110],
[118,137,138,0,101,104,137,111,136],
[110,107,95,110,0,84,117,89,133],
[105,129,116,107,127,0,105,101,127],
[95,131,92,74,94,106,0,89,115],
[113,99,110,100,122,110,122,0,111],
[102,100,101,75,78,84,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,99,109,108,100,116,106],
[107,0,114,107,97,107,97,104,107],
[108,97,0,107,94,105,109,95,110],
[112,104,104,0,110,110,107,105,115],
[102,114,117,101,0,109,108,102,113],
[103,104,106,101,102,0,99,99,106],
[111,114,102,104,103,112,0,109,112],
[95,107,116,106,109,112,102,0,103],
[105,104,101,96,98,105,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,107,115,102,108,107,106],
[97,0,106,108,112,93,101,96,93],
[98,105,0,110,112,99,105,102,90],
[104,103,101,0,115,107,109,98,102],
[96,99,99,96,0,98,112,95,89],
[109,118,112,104,113,0,108,105,106],
[103,110,106,102,99,103,0,105,107],
[104,115,109,113,116,106,106,0,102],
[105,118,121,109,122,105,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,118,103,115,114,109,98],
[95,0,105,112,106,115,102,111,104],
[104,106,0,117,104,115,106,111,105],
[93,99,94,0,104,107,95,104,92],
[108,105,107,107,0,112,108,111,105],
[96,96,96,104,99,0,109,102,101],
[97,109,105,116,103,102,0,111,106],
[102,100,100,107,100,109,100,0,96],
[113,107,106,119,106,110,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,154,143,131,182,101,173,149],
[120,0,172,141,92,182,139,162,150],
[57,39,0,80,81,152,58,121,78],
[68,70,131,0,121,165,99,182,129],
[80,119,130,90,0,133,109,119,119],
[29,29,59,46,78,0,38,100,78],
[110,72,153,112,102,173,0,153,112],
[38,49,90,29,92,111,58,0,91],
[62,61,133,82,92,133,99,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,106,94,105,96,105,101,104],
[119,0,124,110,109,105,109,108,109],
[105,87,0,99,93,89,93,90,108],
[117,101,112,0,99,109,111,90,121],
[106,102,118,112,0,107,108,104,113],
[115,106,122,102,104,0,114,107,108],
[106,102,118,100,103,97,0,103,105],
[110,103,121,121,107,104,108,0,123],
[107,102,103,90,98,103,106,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,100,93,110,86,71,85,114],
[122,0,112,130,111,89,102,100,125],
[111,99,0,103,116,100,105,121,120],
[118,81,108,0,111,95,77,82,90],
[101,100,95,100,0,106,92,100,112],
[125,122,111,116,105,0,93,100,112],
[140,109,106,134,119,118,0,94,133],
[126,111,90,129,111,111,117,0,106],
[97,86,91,121,99,99,78,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,115,94,99,100,90,94,103],
[102,0,104,104,101,108,99,107,113],
[96,107,0,104,97,102,87,87,103],
[117,107,107,0,107,113,104,108,102],
[112,110,114,104,0,107,102,91,110],
[111,103,109,98,104,0,94,94,103],
[121,112,124,107,109,117,0,89,109],
[117,104,124,103,120,117,122,0,112],
[108,98,108,109,101,108,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,115,113,118,135,116,98,100],
[109,0,107,125,125,132,137,128,101],
[96,104,0,122,127,128,118,96,101],
[98,86,89,0,111,133,117,93,101],
[93,86,84,100,0,96,108,87,84],
[76,79,83,78,115,0,105,87,63],
[95,74,93,94,103,106,0,83,85],
[113,83,115,118,124,124,128,0,107],
[111,110,110,110,127,148,126,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,110,103,112,106,106,101],
[107,0,114,110,103,99,107,108,103],
[111,97,0,110,97,93,97,109,90],
[101,101,101,0,100,101,98,109,100],
[108,108,114,111,0,107,105,106,105],
[99,112,118,110,104,0,112,104,106],
[105,104,114,113,106,99,0,100,105],
[105,103,102,102,105,107,111,0,95],
[110,108,121,111,106,105,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,116,77,78,105,115,94,132],
[108,0,92,131,66,81,161,94,147],
[95,119,0,131,122,105,147,122,148],
[134,80,80,0,78,81,133,94,173],
[133,145,89,133,0,132,171,94,161],
[106,130,106,130,79,0,119,91,144],
[96,50,64,78,40,92,0,81,146],
[117,117,89,117,117,120,130,0,133],
[79,64,63,38,50,67,65,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,103,110,100,106,109,95,100],
[94,0,86,108,95,103,97,86,94],
[108,125,0,104,108,110,111,111,108],
[101,103,107,0,103,109,103,105,111],
[111,116,103,108,0,109,108,108,108],
[105,108,101,102,102,0,103,98,98],
[102,114,100,108,103,108,0,109,104],
[116,125,100,106,103,113,102,0,99],
[111,117,103,100,103,113,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,132,110,97,99,120,104],
[95,0,97,122,106,90,104,103,94],
[106,114,0,127,116,105,122,115,107],
[79,89,84,0,104,78,88,85,95],
[101,105,95,107,0,95,102,95,95],
[114,121,106,133,116,0,100,102,110],
[112,107,89,123,109,111,0,101,102],
[91,108,96,126,116,109,110,0,110],
[107,117,104,116,116,101,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,117,120,114,113,106,99],
[95,0,111,108,98,101,90,97,96],
[106,100,0,104,107,89,95,89,105],
[94,103,107,0,109,90,86,97,93],
[91,113,104,102,0,101,85,91,98],
[97,110,122,121,110,0,88,109,102],
[98,121,116,125,126,123,0,108,118],
[105,114,122,114,120,102,103,0,103],
[112,115,106,118,113,109,93,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,101,73,97,64,103,104,97],
[133,0,131,118,119,105,118,116,99],
[110,80,0,88,115,81,104,122,98],
[138,93,123,0,111,113,126,128,121],
[114,92,96,100,0,94,82,98,91],
[147,106,130,98,117,0,123,119,103],
[108,93,107,85,129,88,0,105,100],
[107,95,89,83,113,92,106,0,94],
[114,112,113,90,120,108,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,103,98,102,102,113,111],
[111,0,106,111,107,111,104,109,116],
[109,105,0,103,92,106,103,109,105],
[108,100,108,0,94,111,101,102,110],
[113,104,119,117,0,112,108,111,115],
[109,100,105,100,99,0,100,107,117],
[109,107,108,110,103,111,0,113,115],
[98,102,102,109,100,104,98,0,98],
[100,95,106,101,96,94,96,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,131,114,130,102,132,128,123],
[83,0,108,103,115,95,105,124,105],
[80,103,0,86,100,80,94,107,111],
[97,108,125,0,121,100,119,130,117],
[81,96,111,90,0,97,96,119,101],
[109,116,131,111,114,0,104,122,114],
[79,106,117,92,115,107,0,118,96],
[83,87,104,81,92,89,93,0,94],
[88,106,100,94,110,97,115,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,115,91,117,105,99,92,105],
[109,0,119,107,114,108,106,105,113],
[96,92,0,93,98,92,97,87,100],
[120,104,118,0,115,104,106,99,106],
[94,97,113,96,0,93,96,90,91],
[106,103,119,107,118,0,99,93,104],
[112,105,114,105,115,112,0,99,101],
[119,106,124,112,121,118,112,0,105],
[106,98,111,105,120,107,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,158,135,105,114,134,98,134],
[74,0,145,111,78,97,99,87,134],
[53,66,0,68,76,53,77,53,88],
[76,100,143,0,91,120,102,88,109],
[106,133,135,120,0,100,102,97,111],
[97,114,158,91,111,0,108,107,135],
[77,112,134,109,109,103,0,83,122],
[113,124,158,123,114,104,128,0,122],
[77,77,123,102,100,76,89,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,103,115,103,117,114,114],
[102,0,120,120,116,109,128,125,123],
[100,91,0,111,113,109,112,117,114],
[108,91,100,0,106,95,95,107,106],
[96,95,98,105,0,102,101,101,111],
[108,102,102,116,109,0,120,117,127],
[94,83,99,116,110,91,0,103,104],
[97,86,94,104,110,94,108,0,114],
[97,88,97,105,100,84,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,58,41,79,99,61,60,99,80],
[153,0,115,116,153,77,153,135,135],
[170,96,0,135,136,136,172,136,137],
[132,95,76,0,117,58,115,114,117],
[112,58,75,94,0,58,114,115,79],
[150,134,75,153,153,0,152,174,136],
[151,58,39,96,97,59,0,59,79],
[112,76,75,97,96,37,152,0,135],
[131,76,74,94,132,75,132,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,110,118,107,111,97,112,105],
[126,0,117,99,109,101,112,118,95],
[101,94,0,103,89,86,86,99,94],
[93,112,108,0,116,104,101,96,107],
[104,102,122,95,0,101,102,110,121],
[100,110,125,107,110,0,97,118,122],
[114,99,125,110,109,114,0,105,122],
[99,93,112,115,101,93,106,0,96],
[106,116,117,104,90,89,89,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,112,117,111,113,111,101],
[97,0,103,105,127,112,96,114,106],
[98,108,0,106,98,111,101,105,107],
[99,106,105,0,99,110,108,114,108],
[94,84,113,112,0,108,99,110,106],
[100,99,100,101,103,0,111,103,93],
[98,115,110,103,112,100,0,107,115],
[100,97,106,97,101,108,104,0,96],
[110,105,104,103,105,118,96,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,108,112,102,109,99,103],
[109,0,103,110,114,107,109,121,104],
[102,108,0,115,106,102,116,116,109],
[103,101,96,0,112,108,116,110,115],
[99,97,105,99,0,99,97,101,103],
[109,104,109,103,112,0,109,109,101],
[102,102,95,95,114,102,0,100,100],
[112,90,95,101,110,102,111,0,104],
[108,107,102,96,108,110,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,102,101,100,100,84,105],
[105,0,92,105,90,98,101,84,97],
[105,119,0,99,112,110,98,95,118],
[109,106,112,0,94,101,97,91,120],
[110,121,99,117,0,108,111,93,117],
[111,113,101,110,103,0,129,96,119],
[111,110,113,114,100,82,0,106,116],
[127,127,116,120,118,115,105,0,122],
[106,114,93,91,94,92,95,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,105,108,104,106,108,109,118],
[94,0,101,99,95,97,96,108,105],
[106,110,0,115,100,101,112,112,109],
[103,112,96,0,100,106,100,111,107],
[107,116,111,111,0,105,111,112,113],
[105,114,110,105,106,0,113,112,111],
[103,115,99,111,100,98,0,108,104],
[102,103,99,100,99,99,103,0,102],
[93,106,102,104,98,100,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,111,113,97,117,107,132],
[106,0,105,99,119,94,119,102,114],
[99,106,0,102,107,96,109,100,104],
[100,112,109,0,111,102,121,98,121],
[98,92,104,100,0,94,104,101,118],
[114,117,115,109,117,0,115,105,127],
[94,92,102,90,107,96,0,96,116],
[104,109,111,113,110,106,115,0,125],
[79,97,107,90,93,84,95,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,120,114,106,104,116,112],
[105,0,118,121,116,110,111,130,118],
[101,93,0,92,90,87,89,102,100],
[91,90,119,0,102,104,94,122,114],
[97,95,121,109,0,103,92,109,106],
[105,101,124,107,108,0,94,112,113],
[107,100,122,117,119,117,0,132,116],
[95,81,109,89,102,99,79,0,99],
[99,93,111,97,105,98,95,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,73,125,97,86,128,87,78],
[109,0,96,97,121,109,126,98,137],
[138,115,0,150,99,137,116,139,127],
[86,114,61,0,123,136,116,111,100],
[114,90,112,88,0,126,78,126,115],
[125,102,74,75,85,0,101,112,126],
[83,85,95,95,133,110,0,84,59],
[124,113,72,100,85,99,127,0,124],
[133,74,84,111,96,85,152,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,101,95,94,105,98,90],
[107,0,99,85,90,82,107,109,102],
[112,112,0,96,96,93,113,104,108],
[110,126,115,0,111,97,105,102,96],
[116,121,115,100,0,101,126,118,97],
[117,129,118,114,110,0,121,110,105],
[106,104,98,106,85,90,0,89,95],
[113,102,107,109,93,101,122,0,98],
[121,109,103,115,114,106,116,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,121,116,114,105,105,111],
[107,0,92,108,107,104,94,94,98],
[110,119,0,114,122,113,109,104,107],
[90,103,97,0,105,95,90,102,95],
[95,104,89,106,0,103,100,101,98],
[97,107,98,116,108,0,93,100,114],
[106,117,102,121,111,118,0,108,118],
[106,117,107,109,110,111,103,0,107],
[100,113,104,116,113,97,93,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,105,99,112,124,101,109],
[106,0,121,104,105,108,124,112,106],
[96,90,0,107,93,105,109,101,105],
[106,107,104,0,82,101,112,105,103],
[112,106,118,129,0,103,135,102,107],
[99,103,106,110,108,0,105,112,91],
[87,87,102,99,76,106,0,97,95],
[110,99,110,106,109,99,114,0,103],
[102,105,106,108,104,120,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,116,103,92,96,85,90],
[113,0,109,88,120,105,104,106,108],
[108,102,0,117,112,118,114,112,107],
[95,123,94,0,102,120,93,108,110],
[108,91,99,109,0,94,97,107,92],
[119,106,93,91,117,0,102,113,91],
[115,107,97,118,114,109,0,118,106],
[126,105,99,103,104,98,93,0,103],
[121,103,104,101,119,120,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,117,114,106,120,98,132,119],
[90,0,110,99,87,116,100,120,121],
[94,101,0,104,106,113,86,118,109],
[97,112,107,0,94,109,101,117,116],
[105,124,105,117,0,99,111,128,125],
[91,95,98,102,112,0,104,114,118],
[113,111,125,110,100,107,0,126,128],
[79,91,93,94,83,97,85,0,119],
[92,90,102,95,86,93,83,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,83,70,87,99,77,104,93],
[131,0,122,88,122,107,90,122,95],
[128,89,0,100,121,98,85,116,99],
[141,123,111,0,125,92,110,98,122],
[124,89,90,86,0,80,85,117,97],
[112,104,113,119,131,0,109,114,106],
[134,121,126,101,126,102,0,128,124],
[107,89,95,113,94,97,83,0,91],
[118,116,112,89,114,105,87,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,88,91,111,99,88,105,98],
[123,0,107,92,115,119,107,123,116],
[123,104,0,118,124,105,115,112,124],
[120,119,93,0,114,121,106,118,122],
[100,96,87,97,0,109,92,82,96],
[112,92,106,90,102,0,92,94,91],
[123,104,96,105,119,119,0,114,108],
[106,88,99,93,129,117,97,0,112],
[113,95,87,89,115,120,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,94,111,86,108,90,98,102],
[102,0,103,108,98,94,85,108,104],
[117,108,0,100,97,93,98,98,97],
[100,103,111,0,114,102,102,95,94],
[125,113,114,97,0,100,99,112,108],
[103,117,118,109,111,0,109,110,117],
[121,126,113,109,112,102,0,119,119],
[113,103,113,116,99,101,92,0,111],
[109,107,114,117,103,94,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,114,107,131,129,104,113,177],
[78,0,99,71,92,110,105,92,120],
[97,112,0,91,100,101,117,96,115],
[104,140,120,0,128,120,126,108,141],
[80,119,111,83,0,106,117,95,125],
[82,101,110,91,105,0,109,110,129],
[107,106,94,85,94,102,0,96,142],
[98,119,115,103,116,101,115,0,127],
[34,91,96,70,86,82,69,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,110,99,120,107,114,104],
[105,0,112,111,101,104,118,125,106],
[110,99,0,102,109,112,119,112,115],
[101,100,109,0,100,107,104,114,95],
[112,110,102,111,0,103,110,111,107],
[91,107,99,104,108,0,98,113,103],
[104,93,92,107,101,113,0,113,100],
[97,86,99,97,100,98,98,0,99],
[107,105,96,116,104,108,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,114,125,112,99,91,111,100],
[120,0,103,110,88,105,108,91,100],
[97,108,0,104,110,96,100,107,98],
[86,101,107,0,95,101,108,94,76],
[99,123,101,116,0,114,125,110,88],
[112,106,115,110,97,0,115,115,89],
[120,103,111,103,86,96,0,108,110],
[100,120,104,117,101,96,103,0,88],
[111,111,113,135,123,122,101,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,108,102,113,97,93,99],
[113,0,107,106,107,122,121,116,104],
[112,104,0,119,112,118,110,115,108],
[103,105,92,0,105,102,104,100,94],
[109,104,99,106,0,112,109,102,101],
[98,89,93,109,99,0,106,99,94],
[114,90,101,107,102,105,0,97,101],
[118,95,96,111,109,112,114,0,103],
[112,107,103,117,110,117,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,101,108,110,113,118,107],
[103,0,100,93,96,110,86,98,105],
[105,111,0,100,94,121,101,108,109],
[110,118,111,0,90,122,100,117,114],
[103,115,117,121,0,121,99,105,116],
[101,101,90,89,90,0,96,95,101],
[98,125,110,111,112,115,0,117,110],
[93,113,103,94,106,116,94,0,107],
[104,106,102,97,95,110,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,95,119,99,86,97,102,86],
[105,0,111,139,103,89,128,105,103],
[116,100,0,111,90,83,90,113,89],
[92,72,100,0,81,82,90,91,89],
[112,108,121,130,0,96,116,108,105],
[125,122,128,129,115,0,100,127,133],
[114,83,121,121,95,111,0,114,103],
[109,106,98,120,103,84,97,0,98],
[125,108,122,122,106,78,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,121,121,102,115,128,130,109],
[101,0,116,90,109,88,114,110,99],
[90,95,0,90,87,108,97,107,110],
[90,121,121,0,107,97,131,121,112],
[109,102,124,104,0,98,135,111,106],
[96,123,103,114,113,0,128,111,117],
[83,97,114,80,76,83,0,98,106],
[81,101,104,90,100,100,113,0,111],
[102,112,101,99,105,94,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,100,105,96,100,103,95],
[111,0,103,110,95,99,102,101,99],
[113,108,0,95,94,110,97,113,122],
[111,101,116,0,103,113,135,104,117],
[106,116,117,108,0,104,106,108,108],
[115,112,101,98,107,0,96,105,108],
[111,109,114,76,105,115,0,98,109],
[108,110,98,107,103,106,113,0,116],
[116,112,89,94,103,103,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,91,90,90,99,101,127,103],
[137,0,159,105,123,102,103,126,103],
[120,52,0,77,88,74,65,113,67],
[121,106,134,0,109,89,91,157,101],
[121,88,123,102,0,111,111,136,97],
[112,109,137,122,100,0,132,124,112],
[110,108,146,120,100,79,0,146,123],
[84,85,98,54,75,87,65,0,99],
[108,108,144,110,114,99,88,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,105,113,91,113,104,116],
[101,0,110,114,116,98,117,102,106],
[102,101,0,100,101,107,104,102,110],
[106,97,111,0,100,93,105,114,115],
[98,95,110,111,0,108,108,115,107],
[120,113,104,118,103,0,108,122,119],
[98,94,107,106,103,103,0,112,114],
[107,109,109,97,96,89,99,0,110],
[95,105,101,96,104,92,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,118,113,99,109,103,98,106],
[112,0,125,94,110,100,113,124,124],
[93,86,0,78,93,82,95,98,93],
[98,117,133,0,101,125,109,112,120],
[112,101,118,110,0,108,106,122,118],
[102,111,129,86,103,0,94,115,108],
[108,98,116,102,105,117,0,128,110],
[113,87,113,99,89,96,83,0,97],
[105,87,118,91,93,103,101,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,97,102,103,109,99,103],
[106,0,99,94,92,100,108,109,104],
[104,112,0,110,99,97,106,95,102],
[114,117,101,0,99,100,112,99,108],
[109,119,112,112,0,109,109,104,117],
[108,111,114,111,102,0,106,109,105],
[102,103,105,99,102,105,0,99,102],
[112,102,116,112,107,102,112,0,105],
[108,107,109,103,94,106,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,107,94,103,84,108,94,101],
[127,0,110,100,100,107,114,107,109],
[104,101,0,90,105,107,128,101,120],
[117,111,121,0,106,105,106,95,122],
[108,111,106,105,0,93,116,101,114],
[127,104,104,106,118,0,124,101,120],
[103,97,83,105,95,87,0,90,101],
[117,104,110,116,110,110,121,0,115],
[110,102,91,89,97,91,110,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,181,150,181,89,181,91,153],
[58,0,149,120,121,58,151,89,153],
[30,62,0,60,62,30,92,30,62],
[61,91,151,0,91,61,153,121,121],
[30,90,149,120,0,28,123,61,123],
[122,153,181,150,183,0,123,91,183],
[30,60,119,58,88,88,0,91,60],
[120,122,181,90,150,120,120,0,152],
[58,58,149,90,88,28,151,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,122,115,125,118,105,117],
[97,0,97,109,94,116,109,100,115],
[109,114,0,105,113,130,119,106,111],
[89,102,106,0,97,107,99,103,106],
[96,117,98,114,0,121,107,105,104],
[86,95,81,104,90,0,92,80,101],
[93,102,92,112,104,119,0,98,105],
[106,111,105,108,106,131,113,0,118],
[94,96,100,105,107,110,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,121,115,93,101,101,110,117],
[95,0,118,106,108,104,105,110,100],
[90,93,0,94,95,88,97,108,108],
[96,105,117,0,98,103,106,97,108],
[118,103,116,113,0,106,107,110,113],
[110,107,123,108,105,0,104,111,114],
[110,106,114,105,104,107,0,120,118],
[101,101,103,114,101,100,91,0,114],
[94,111,103,103,98,97,93,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,122,86,101,102,119,132,118],
[106,0,133,100,95,125,123,111,119],
[89,78,0,95,86,131,108,104,113],
[125,111,116,0,115,102,131,140,132],
[110,116,125,96,0,115,144,104,119],
[109,86,80,109,96,0,101,93,102],
[92,88,103,80,67,110,0,90,111],
[79,100,107,71,107,118,121,0,123],
[93,92,98,79,92,109,100,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,91,111,115,109,102,99,101],
[109,0,102,125,124,106,117,117,116],
[120,109,0,120,134,102,121,121,119],
[100,86,91,0,114,93,106,108,114],
[96,87,77,97,0,94,98,94,90],
[102,105,109,118,117,0,112,110,104],
[109,94,90,105,113,99,0,110,96],
[112,94,90,103,117,101,101,0,109],
[110,95,92,97,121,107,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,110,102,112,112,102,114],
[103,0,113,105,106,103,105,93,109],
[95,98,0,100,102,98,100,89,101],
[101,106,111,0,103,104,115,90,107],
[109,105,109,108,0,112,119,112,120],
[99,108,113,107,99,0,117,91,115],
[99,106,111,96,92,94,0,90,99],
[109,118,122,121,99,120,121,0,122],
[97,102,110,104,91,96,112,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,111,88,136,110,106,130,102],
[89,0,90,89,103,92,101,93,98],
[100,121,0,115,128,97,93,112,91],
[123,122,96,0,138,96,123,129,108],
[75,108,83,73,0,58,76,123,74],
[101,119,114,115,153,0,112,132,104],
[105,110,118,88,135,99,0,142,111],
[81,118,99,82,88,79,69,0,74],
[109,113,120,103,137,107,100,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,105,106,105,109,95,102],
[101,0,109,112,102,115,117,109,114],
[102,102,0,101,101,102,93,108,91],
[106,99,110,0,110,103,116,109,103],
[105,109,110,101,0,100,106,106,107],
[106,96,109,108,111,0,108,108,106],
[102,94,118,95,105,103,0,109,99],
[116,102,103,102,105,103,102,0,97],
[109,97,120,108,104,105,112,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,122,122,103,98,107,149,160],
[100,0,98,107,87,113,98,121,109],
[89,113,0,135,114,65,136,99,147],
[89,104,76,0,74,89,87,76,110],
[108,124,97,137,0,111,122,122,158],
[113,98,146,122,100,0,122,121,135],
[104,113,75,124,89,89,0,114,149],
[62,90,112,135,89,90,97,0,175],
[51,102,64,101,53,76,62,36,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,110,100,86,92,104,95],
[107,0,103,99,92,97,94,114,98],
[103,108,0,100,94,103,102,101,105],
[101,112,111,0,103,106,113,105,106],
[111,119,117,108,0,101,98,125,102],
[125,114,108,105,110,0,108,110,119],
[119,117,109,98,113,103,0,103,97],
[107,97,110,106,86,101,108,0,99],
[116,113,106,105,109,92,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,110,116,101,123,126,110,120],
[91,0,89,96,76,106,95,93,99],
[101,122,0,105,112,120,117,107,118],
[95,115,106,0,90,107,112,97,99],
[110,135,99,121,0,133,122,107,114],
[88,105,91,104,78,0,107,91,107],
[85,116,94,99,89,104,0,101,107],
[101,118,104,114,104,120,110,0,108],
[91,112,93,112,97,104,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,105,114,110,99,103,107],
[101,0,102,105,118,115,105,105,105],
[103,109,0,110,105,112,95,101,114],
[106,106,101,0,110,109,111,99,114],
[97,93,106,101,0,106,100,103,95],
[101,96,99,102,105,0,99,107,97],
[112,106,116,100,111,112,0,113,105],
[108,106,110,112,108,104,98,0,104],
[104,106,97,97,116,114,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,109,109,117,101,112,103,112],
[95,0,114,108,120,110,114,106,105],
[102,97,0,87,100,85,109,94,94],
[102,103,124,0,98,96,123,100,111],
[94,91,111,113,0,109,117,99,105],
[110,101,126,115,102,0,118,95,117],
[99,97,102,88,94,93,0,93,97],
[108,105,117,111,112,116,118,0,105],
[99,106,117,100,106,94,114,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,117,104,121,119,107,120,111],
[99,0,106,107,99,100,100,111,90],
[94,105,0,103,96,98,97,115,102],
[107,104,108,0,114,90,109,117,104],
[90,112,115,97,0,96,84,117,111],
[92,111,113,121,115,0,116,122,114],
[104,111,114,102,127,95,0,100,119],
[91,100,96,94,94,89,111,0,93],
[100,121,109,107,100,97,92,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,96,100,90,99,99,102],
[106,0,112,86,115,107,106,112,106],
[108,99,0,107,112,113,116,116,109],
[115,125,104,0,115,114,100,125,106],
[111,96,99,96,0,101,107,121,115],
[121,104,98,97,110,0,101,116,102],
[112,105,95,111,104,110,0,113,95],
[112,99,95,86,90,95,98,0,98],
[109,105,102,105,96,109,116,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,115,116,99,116,115,100],
[105,0,111,116,112,108,120,106,110],
[102,100,0,99,110,93,109,94,97],
[96,95,112,0,108,98,108,106,97],
[95,99,101,103,0,91,107,102,102],
[112,103,118,113,120,0,122,102,95],
[95,91,102,103,104,89,0,90,86],
[96,105,117,105,109,109,121,0,103],
[111,101,114,114,109,116,125,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,96,113,110,114,105,104,113],
[94,0,81,101,91,96,89,86,98],
[115,130,0,112,105,118,107,115,111],
[98,110,99,0,119,104,108,97,107],
[101,120,106,92,0,102,95,97,100],
[97,115,93,107,109,0,89,100,91],
[106,122,104,103,116,122,0,114,101],
[107,125,96,114,114,111,97,0,117],
[98,113,100,104,111,120,110,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,101,92,155,87,157,130,140],
[97,0,103,105,126,135,149,125,114],
[110,108,0,88,114,120,150,102,109],
[119,106,123,0,115,95,150,104,123],
[56,85,97,96,0,106,106,90,114],
[124,76,91,116,105,0,150,110,128],
[54,62,61,61,105,61,0,73,98],
[81,86,109,107,121,101,138,0,146],
[71,97,102,88,97,83,113,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,111,101,109,116,121,107],
[101,0,101,102,97,108,110,118,91],
[103,110,0,107,107,115,109,118,94],
[100,109,104,0,99,117,115,115,93],
[110,114,104,112,0,107,108,118,97],
[102,103,96,94,104,0,102,114,94],
[95,101,102,96,103,109,0,109,88],
[90,93,93,96,93,97,102,0,87],
[104,120,117,118,114,117,123,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,131,98,95,99,121,109,103],
[101,0,104,92,107,122,114,119,108],
[80,107,0,103,101,129,110,102,116],
[113,119,108,0,98,101,99,102,113],
[116,104,110,113,0,118,121,109,114],
[112,89,82,110,93,0,99,99,121],
[90,97,101,112,90,112,0,96,117],
[102,92,109,109,102,112,115,0,108],
[108,103,95,98,97,90,94,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,107,97,110,104,105,102,81],
[116,0,113,103,108,118,123,107,114],
[104,98,0,103,108,109,96,82,109],
[114,108,108,0,113,121,114,105,91],
[101,103,103,98,0,97,108,101,105],
[107,93,102,90,114,0,98,88,87],
[106,88,115,97,103,113,0,97,108],
[109,104,129,106,110,123,114,0,100],
[130,97,102,120,106,124,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,74,71,62,64,74,79],
[111,0,116,94,81,74,92,120,119],
[114,95,0,95,56,75,85,106,83],
[137,117,116,0,108,89,109,117,116],
[140,130,155,103,0,130,121,121,103],
[149,137,136,122,81,0,129,148,101],
[147,119,126,102,90,82,0,108,108],
[137,91,105,94,90,63,103,0,72],
[132,92,128,95,108,110,103,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,108,123,113,116,114,104],
[107,0,109,111,115,104,110,104,91],
[97,102,0,103,112,105,107,112,93],
[103,100,108,0,106,95,105,112,110],
[88,96,99,105,0,97,107,104,96],
[98,107,106,116,114,0,112,107,98],
[95,101,104,106,104,99,0,107,93],
[97,107,99,99,107,104,104,0,96],
[107,120,118,101,115,113,118,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,95,113,95,100,100,101,92],
[108,0,91,121,115,116,109,109,112],
[116,120,0,107,102,118,108,108,117],
[98,90,104,0,85,108,96,102,101],
[116,96,109,126,0,123,116,119,116],
[111,95,93,103,88,0,104,105,118],
[111,102,103,115,95,107,0,111,118],
[110,102,103,109,92,106,100,0,103],
[119,99,94,110,95,93,93,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,109,109,104,113,104,106],
[108,0,107,104,99,101,111,98,98],
[103,104,0,96,106,89,114,95,107],
[102,107,115,0,110,106,117,98,109],
[102,112,105,101,0,97,107,96,100],
[107,110,122,105,114,0,121,107,112],
[98,100,97,94,104,90,0,80,101],
[107,113,116,113,115,104,131,0,108],
[105,113,104,102,111,99,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,92,96,108,103,100,94,102],
[107,0,109,105,114,127,107,103,108],
[119,102,0,117,105,122,110,95,101],
[115,106,94,0,109,114,104,94,96],
[103,97,106,102,0,108,104,100,102],
[108,84,89,97,103,0,93,95,97],
[111,104,101,107,107,118,0,107,107],
[117,108,116,117,111,116,104,0,117],
[109,103,110,115,109,114,104,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,122,105,107,114,114,116],
[95,0,90,106,103,105,105,108,125],
[106,121,0,114,103,112,100,108,118],
[89,105,97,0,94,99,97,86,107],
[106,108,108,117,0,103,108,113,100],
[104,106,99,112,108,0,110,132,125],
[97,106,111,114,103,101,0,111,110],
[97,103,103,125,98,79,100,0,100],
[95,86,93,104,111,86,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,99,99,86,137,114,103,98],
[132,0,118,110,141,103,106,127,112],
[112,93,0,105,107,124,109,100,121],
[112,101,106,0,114,135,92,82,69],
[125,70,104,97,0,109,109,123,108],
[74,108,87,76,102,0,104,102,82],
[97,105,102,119,102,107,0,117,105],
[108,84,111,129,88,109,94,0,105],
[113,99,90,142,103,129,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,103,95,106,96,84,99,104],
[119,0,106,124,107,116,113,93,127],
[108,105,0,113,114,114,118,109,119],
[116,87,98,0,113,108,93,95,106],
[105,104,97,98,0,102,92,96,107],
[115,95,97,103,109,0,94,83,110],
[127,98,93,118,119,117,0,100,118],
[112,118,102,116,115,128,111,0,123],
[107,84,92,105,104,101,93,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,84,103,109,104,93,98],
[114,0,106,104,102,115,115,97,111],
[112,105,0,105,111,113,104,107,95],
[127,107,106,0,124,106,118,110,101],
[108,109,100,87,0,111,104,95,102],
[102,96,98,105,100,0,114,92,98],
[107,96,107,93,107,97,0,106,99],
[118,114,104,101,116,119,105,0,98],
[113,100,116,110,109,113,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,122,109,110,82,108,102],
[113,0,111,102,103,118,98,110,117],
[114,100,0,107,116,113,111,112,111],
[89,109,104,0,109,111,86,107,98],
[102,108,95,102,0,111,109,94,104],
[101,93,98,100,100,0,98,110,100],
[129,113,100,125,102,113,0,114,101],
[103,101,99,104,117,101,97,0,106],
[109,94,100,113,107,111,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,93,110,113,107,103,103,118],
[112,0,120,111,108,103,114,111,116],
[118,91,0,106,94,102,100,102,106],
[101,100,105,0,98,103,98,100,97],
[98,103,117,113,0,100,97,101,121],
[104,108,109,108,111,0,108,100,106],
[108,97,111,113,114,103,0,107,115],
[108,100,109,111,110,111,104,0,117],
[93,95,105,114,90,105,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,107,105,116,98,121,99],
[102,0,115,119,107,98,97,120,105],
[112,96,0,109,109,96,82,113,97],
[104,92,102,0,103,100,93,128,97],
[106,104,102,108,0,90,82,119,108],
[95,113,115,111,121,0,100,128,107],
[113,114,129,118,129,111,0,126,100],
[90,91,98,83,92,83,85,0,83],
[112,106,114,114,103,104,111,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,73,97,105,102,98,79,104],
[114,0,83,109,97,99,100,91,130],
[138,128,0,103,111,128,115,92,108],
[114,102,108,0,112,109,103,94,113],
[106,114,100,99,0,114,102,87,119],
[109,112,83,102,97,0,94,109,111],
[113,111,96,108,109,117,0,110,112],
[132,120,119,117,124,102,101,0,129],
[107,81,103,98,92,100,99,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,100,104,89,83,83,78],
[115,0,98,105,105,99,104,105,87],
[114,113,0,108,117,105,103,110,112],
[111,106,103,0,113,98,104,92,91],
[107,106,94,98,0,100,100,96,89],
[122,112,106,113,111,0,103,104,90],
[128,107,108,107,111,108,0,116,99],
[128,106,101,119,115,107,95,0,104],
[133,124,99,120,122,121,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,113,103,120,114,114,105,103],
[114,0,119,113,114,114,118,103,109],
[98,92,0,107,99,93,100,92,96],
[108,98,104,0,102,101,113,103,96],
[91,97,112,109,0,103,115,103,105],
[97,97,118,110,108,0,116,97,100],
[97,93,111,98,96,95,0,90,101],
[106,108,119,108,108,114,121,0,100],
[108,102,115,115,106,111,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,94,104,100,103,116,107,105],
[112,0,107,100,100,101,112,102,104],
[117,104,0,124,112,114,130,115,113],
[107,111,87,0,90,99,107,98,116],
[111,111,99,121,0,102,106,109,108],
[108,110,97,112,109,0,109,109,108],
[95,99,81,104,105,102,0,95,89],
[104,109,96,113,102,102,116,0,113],
[106,107,98,95,103,103,122,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,96,105,94,96,98,106,96],
[113,0,111,124,111,104,107,117,112],
[115,100,0,111,103,106,106,107,101],
[106,87,100,0,94,104,107,94,89],
[117,100,108,117,0,108,102,107,98],
[115,107,105,107,103,0,105,102,99],
[113,104,105,104,109,106,0,107,98],
[105,94,104,117,104,109,104,0,97],
[115,99,110,122,113,112,113,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,111,112,106,95,103,109],
[107,0,111,102,114,103,98,101,115],
[103,100,0,103,116,99,103,103,109],
[100,109,108,0,118,106,104,107,112],
[99,97,95,93,0,86,97,93,110],
[105,108,112,105,125,0,111,117,119],
[116,113,108,107,114,100,0,111,122],
[108,110,108,104,118,94,100,0,103],
[102,96,102,99,101,92,89,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,98,117,102,108,113,115,118],
[101,0,101,102,100,93,90,103,93],
[113,110,0,116,107,104,104,103,97],
[94,109,95,0,108,102,100,109,102],
[109,111,104,103,0,118,108,114,94],
[103,118,107,109,93,0,110,100,104],
[98,121,107,111,103,101,0,103,109],
[96,108,108,102,97,111,108,0,92],
[93,118,114,109,117,107,102,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,105,107,99,107,101,95],
[104,0,94,107,115,96,112,106,98],
[104,117,0,112,124,106,115,111,114],
[106,104,99,0,110,97,98,102,94],
[104,96,87,101,0,93,92,91,94],
[112,115,105,114,118,0,119,110,112],
[104,99,96,113,119,92,0,95,116],
[110,105,100,109,120,101,116,0,114],
[116,113,97,117,117,99,95,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,98,105,109,105,108,110,108],
[95,0,102,92,104,98,104,103,106],
[113,109,0,105,106,116,105,117,114],
[106,119,106,0,104,114,104,121,124],
[102,107,105,107,0,112,97,104,114],
[106,113,95,97,99,0,97,109,107],
[103,107,106,107,114,114,0,113,122],
[101,108,94,90,107,102,98,0,94],
[103,105,97,87,97,104,89,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,115,106,100,120,115,121,104],
[94,0,95,94,97,114,114,91,100],
[96,116,0,93,75,99,106,86,116],
[105,117,118,0,95,121,109,99,117],
[111,114,136,116,0,116,112,103,130],
[91,97,112,90,95,0,112,88,102],
[96,97,105,102,99,99,0,94,104],
[90,120,125,112,108,123,117,0,128],
[107,111,95,94,81,109,107,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,92,96,108,98,116,93],
[96,0,96,84,87,78,79,95,86],
[100,115,0,91,95,93,92,99,76],
[119,127,120,0,96,104,103,115,95],
[115,124,116,115,0,97,113,117,110],
[103,133,118,107,114,0,100,112,96],
[113,132,119,108,98,111,0,108,100],
[95,116,112,96,94,99,103,0,96],
[118,125,135,116,101,115,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,120,103,129,110,123,124,128],
[99,0,117,112,113,99,108,101,123],
[91,94,0,104,102,98,96,105,111],
[108,99,107,0,104,99,113,111,111],
[82,98,109,107,0,101,102,111,117],
[101,112,113,112,110,0,109,121,116],
[88,103,115,98,109,102,0,103,110],
[87,110,106,100,100,90,108,0,93],
[83,88,100,100,94,95,101,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,129,130,100,121,113,108,108],
[86,0,112,131,120,126,109,111,90],
[82,99,0,118,92,99,96,109,85],
[81,80,93,0,81,95,77,106,91],
[111,91,119,130,0,122,107,109,93],
[90,85,112,116,89,0,100,90,78],
[98,102,115,134,104,111,0,88,95],
[103,100,102,105,102,121,123,0,79],
[103,121,126,120,118,133,116,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,102,100,108,99,92,106],
[108,0,95,106,85,104,100,85,101],
[108,116,0,106,105,108,114,101,103],
[109,105,105,0,99,96,98,90,102],
[111,126,106,112,0,108,105,105,114],
[103,107,103,115,103,0,101,99,108],
[112,111,97,113,106,110,0,108,105],
[119,126,110,121,106,112,103,0,112],
[105,110,108,109,97,103,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,110,105,104,84,112,121],
[106,0,96,116,120,113,98,115,105],
[113,115,0,131,117,114,101,132,125],
[101,95,80,0,105,109,83,109,97],
[106,91,94,106,0,106,82,104,99],
[107,98,97,102,105,0,110,104,109],
[127,113,110,128,129,101,0,110,114],
[99,96,79,102,107,107,101,0,100],
[90,106,86,114,112,102,97,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,92,87,101,89,113,109,86],
[115,0,97,111,95,88,99,125,96],
[119,114,0,110,109,106,103,124,117],
[124,100,101,0,93,94,94,124,88],
[110,116,102,118,0,98,91,132,102],
[122,123,105,117,113,0,96,112,93],
[98,112,108,117,120,115,0,122,104],
[102,86,87,87,79,99,89,0,79],
[125,115,94,123,109,118,107,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,113,108,120,113,110,102],
[110,0,110,110,116,119,104,119,105],
[104,101,0,119,115,117,103,110,109],
[98,101,92,0,105,115,103,95,100],
[103,95,96,106,0,114,102,99,100],
[91,92,94,96,97,0,115,98,96],
[98,107,108,108,109,96,0,109,100],
[101,92,101,116,112,113,102,0,100],
[109,106,102,111,111,115,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,99,92,102,107,99,100,120],
[123,0,98,107,110,112,91,113,109],
[112,113,0,97,116,104,94,116,107],
[119,104,114,0,113,100,103,116,133],
[109,101,95,98,0,95,92,109,102],
[104,99,107,111,116,0,106,113,123],
[112,120,117,108,119,105,0,119,120],
[111,98,95,95,102,98,92,0,111],
[91,102,104,78,109,88,91,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,98,101,98,106,104,101],
[102,0,107,98,104,100,106,109,103],
[97,104,0,89,99,95,107,91,96],
[113,113,122,0,106,107,107,105,103],
[110,107,112,105,0,105,105,104,99],
[113,111,116,104,106,0,112,102,107],
[105,105,104,104,106,99,0,102,102],
[107,102,120,106,107,109,109,0,105],
[110,108,115,108,112,104,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,105,108,109,93,105,109],
[96,0,111,103,107,105,102,97,101],
[95,100,0,96,115,109,92,91,103],
[106,108,115,0,116,118,111,101,107],
[103,104,96,95,0,105,96,94,106],
[102,106,102,93,106,0,101,96,97],
[118,109,119,100,115,110,0,110,112],
[106,114,120,110,117,115,101,0,113],
[102,110,108,104,105,114,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,94,99,96,96,95,93,99],
[116,0,119,91,104,99,111,101,101],
[117,92,0,97,102,97,114,104,102],
[112,120,114,0,104,112,118,115,109],
[115,107,109,107,0,115,119,106,104],
[115,112,114,99,96,0,118,110,108],
[116,100,97,93,92,93,0,97,112],
[118,110,107,96,105,101,114,0,105],
[112,110,109,102,107,103,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,91,102,80,120,109,98,108],
[96,0,96,105,100,118,105,94,106],
[120,115,0,118,107,120,110,101,112],
[109,106,93,0,94,120,96,100,98],
[131,111,104,117,0,126,105,100,110],
[91,93,91,91,85,0,113,89,94],
[102,106,101,115,106,98,0,87,102],
[113,117,110,111,111,122,124,0,102],
[103,105,99,113,101,117,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,96,99,101,103,79,114,89],
[115,0,86,100,123,117,112,135,107],
[115,125,0,132,128,128,103,114,132],
[112,111,79,0,100,91,108,84,120],
[110,88,83,111,0,94,105,100,93],
[108,94,83,120,117,0,98,83,105],
[132,99,108,103,106,113,0,109,118],
[97,76,97,127,111,128,102,0,120],
[122,104,79,91,118,106,93,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,113,98,99,111,108,99],
[114,0,111,125,110,100,117,111,116],
[109,100,0,112,103,101,102,99,106],
[98,86,99,0,86,96,115,99,93],
[113,101,108,125,0,106,121,116,109],
[112,111,110,115,105,0,113,115,110],
[100,94,109,96,90,98,0,105,101],
[103,100,112,112,95,96,106,0,107],
[112,95,105,118,102,101,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,106,92,104,95,111,79],
[105,0,131,135,114,116,98,113,101],
[115,80,0,107,91,99,101,81,80],
[105,76,104,0,105,96,97,96,79],
[119,97,120,106,0,88,114,104,114],
[107,95,112,115,123,0,100,106,89],
[116,113,110,114,97,111,0,99,82],
[100,98,130,115,107,105,112,0,95],
[132,110,131,132,97,122,129,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,115,104,101,102,99,99],
[108,0,100,110,104,102,104,96,107],
[103,111,0,107,101,102,104,105,102],
[96,101,104,0,87,102,97,93,95],
[107,107,110,124,0,108,104,107,109],
[110,109,109,109,103,0,97,98,101],
[109,107,107,114,107,114,0,96,104],
[112,115,106,118,104,113,115,0,103],
[112,104,109,116,102,110,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,77,100,89,94,96,84,108],
[125,0,85,92,83,126,75,96,98],
[134,126,0,125,122,128,111,84,122],
[111,119,86,0,100,115,99,102,106],
[122,128,89,111,0,127,92,107,104],
[117,85,83,96,84,0,73,80,109],
[115,136,100,112,119,138,0,84,122],
[127,115,127,109,104,131,127,0,118],
[103,113,89,105,107,102,89,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,100,104,117,112,103,100],
[98,0,110,110,113,120,95,98,103],
[100,101,0,89,102,116,110,95,100],
[111,101,122,0,127,127,114,104,110],
[107,98,109,84,0,109,104,84,94],
[94,91,95,84,102,0,106,87,100],
[99,116,101,97,107,105,0,107,105],
[108,113,116,107,127,124,104,0,119],
[111,108,111,101,117,111,106,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,110,109,100,101,123,118],
[103,0,116,118,101,105,100,122,111],
[108,95,0,98,106,103,112,118,123],
[101,93,113,0,112,114,102,115,116],
[102,110,105,99,0,114,105,122,119],
[111,106,108,97,97,0,104,102,111],
[110,111,99,109,106,107,0,105,103],
[88,89,93,96,89,109,106,0,114],
[93,100,88,95,92,100,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,115,103,100,94,89,99,101],
[117,0,104,96,104,82,78,111,111],
[96,107,0,99,116,90,106,107,110],
[108,115,112,0,111,95,97,102,119],
[111,107,95,100,0,97,110,109,108],
[117,129,121,116,114,0,93,121,106],
[122,133,105,114,101,118,0,109,118],
[112,100,104,109,102,90,102,0,94],
[110,100,101,92,103,105,93,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,100,103,86,112,100,116],
[109,0,104,93,105,94,119,115,116],
[105,107,0,95,100,94,114,118,129],
[111,118,116,0,113,105,125,109,132],
[108,106,111,98,0,112,126,105,133],
[125,117,117,106,99,0,130,107,120],
[99,92,97,86,85,81,0,87,106],
[111,96,93,102,106,104,124,0,130],
[95,95,82,79,78,91,105,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,109,121,110,105,109,99],
[98,0,103,104,120,106,104,110,90],
[101,108,0,110,108,99,100,106,94],
[102,107,101,0,109,112,105,98,104],
[90,91,103,102,0,98,91,101,89],
[101,105,112,99,113,0,102,103,96],
[106,107,111,106,120,109,0,102,109],
[102,101,105,113,110,108,109,0,105],
[112,121,117,107,122,115,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,89,95,111,100,108,85,110],
[104,0,112,94,107,95,107,90,116],
[122,99,0,112,100,108,102,85,110],
[116,117,99,0,117,102,116,104,113],
[100,104,111,94,0,108,121,106,132],
[111,116,103,109,103,0,117,92,127],
[103,104,109,95,90,94,0,89,103],
[126,121,126,107,105,119,122,0,130],
[101,95,101,98,79,84,108,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,95,104,92,103,104,93],
[111,0,97,117,103,115,117,120,112],
[113,114,0,116,115,105,117,101,107],
[116,94,95,0,111,93,110,107,114],
[107,108,96,100,0,102,105,110,106],
[119,96,106,118,109,0,114,117,111],
[108,94,94,101,106,97,0,100,106],
[107,91,110,104,101,94,111,0,111],
[118,99,104,97,105,100,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,108,90,98,126,125,137],
[114,0,104,118,106,104,143,110,127],
[111,107,0,93,93,87,94,98,116],
[103,93,118,0,86,82,89,126,114],
[121,105,118,125,0,106,125,126,119],
[113,107,124,129,105,0,151,113,120],
[85,68,117,122,86,60,0,89,114],
[86,101,113,85,85,98,122,0,131],
[74,84,95,97,92,91,97,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,135,111,125,123,107,109,108],
[119,0,130,130,118,128,104,125,109],
[76,81,0,102,92,106,76,104,100],
[100,81,109,0,110,112,82,100,84],
[86,93,119,101,0,117,93,96,95],
[88,83,105,99,94,0,97,96,104],
[104,107,135,129,118,114,0,127,98],
[102,86,107,111,115,115,84,0,92],
[103,102,111,127,116,107,113,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,97,110,109,105,112,103,110],
[103,0,104,115,107,104,103,91,94],
[114,107,0,107,102,112,111,108,110],
[101,96,104,0,108,101,107,86,112],
[102,104,109,103,0,104,113,95,107],
[106,107,99,110,107,0,107,109,98],
[99,108,100,104,98,104,0,97,107],
[108,120,103,125,116,102,114,0,108],
[101,117,101,99,104,113,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,88,95,104,100,98,106,82],
[109,0,89,116,103,108,113,112,97],
[123,122,0,120,111,104,108,111,101],
[116,95,91,0,112,90,106,100,96],
[107,108,100,99,0,97,103,110,91],
[111,103,107,121,114,0,109,126,113],
[113,98,103,105,108,102,0,109,89],
[105,99,100,111,101,85,102,0,86],
[129,114,110,115,120,98,122,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,116,101,95,100,88,94],
[116,0,91,113,109,105,104,99,101],
[114,120,0,118,118,105,110,99,120],
[95,98,93,0,105,98,99,94,94],
[110,102,93,106,0,101,104,95,106],
[116,106,106,113,110,0,116,100,120],
[111,107,101,112,107,95,0,106,105],
[123,112,112,117,116,111,105,0,118],
[117,110,91,117,105,91,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,102,110,104,106,101,107,127],
[91,0,93,103,110,94,100,95,101],
[109,118,0,113,108,99,118,109,111],
[101,108,98,0,118,109,98,109,113],
[107,101,103,93,0,104,113,99,113],
[105,117,112,102,107,0,94,114,108],
[110,111,93,113,98,117,0,95,106],
[104,116,102,102,112,97,116,0,112],
[84,110,100,98,98,103,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,100,99,101,114,99,94],
[109,0,110,90,93,107,119,97,105],
[97,101,0,93,93,100,100,94,85],
[111,121,118,0,104,98,107,110,113],
[112,118,118,107,0,115,112,118,105],
[110,104,111,113,96,0,112,107,95],
[97,92,111,104,99,99,0,125,87],
[112,114,117,101,93,104,86,0,110],
[117,106,126,98,106,116,124,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,122,89,151,182,119,151,181],
[60,0,60,59,121,182,60,89,149],
[89,151,0,119,151,211,89,119,119],
[122,152,92,0,211,152,90,121,181],
[60,90,60,0,0,152,60,60,149],
[29,29,0,59,59,0,29,59,59],
[92,151,122,121,151,182,0,121,181],
[60,122,92,90,151,152,90,0,119],
[30,62,92,30,62,152,30,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,103,98,92,106,98,109],
[100,0,87,86,76,74,84,92,97],
[104,124,0,105,103,108,103,96,115],
[108,125,106,0,101,102,99,108,104],
[113,135,108,110,0,109,108,100,115],
[119,137,103,109,102,0,89,113,126],
[105,127,108,112,103,122,0,101,121],
[113,119,115,103,111,98,110,0,108],
[102,114,96,107,96,85,90,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,114,108,118,119,109,116,121],
[110,0,114,101,112,115,105,109,112],
[97,97,0,104,117,107,98,103,110],
[103,110,107,0,114,122,99,116,111],
[93,99,94,97,0,112,98,113,107],
[92,96,104,89,99,0,94,107,106],
[102,106,113,112,113,117,0,120,107],
[95,102,108,95,98,104,91,0,105],
[90,99,101,100,104,105,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,120,114,121,122,115,111],
[112,0,100,103,118,103,96,103,99],
[109,111,0,126,121,109,115,89,92],
[91,108,85,0,119,96,102,99,77],
[97,93,90,92,0,102,83,84,70],
[90,108,102,115,109,0,111,101,94],
[89,115,96,109,128,100,0,97,104],
[96,108,122,112,127,110,114,0,101],
[100,112,119,134,141,117,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,117,113,104,103,121,105,79],
[111,0,120,118,111,111,116,100,95],
[94,91,0,123,97,76,104,82,78],
[98,93,88,0,111,69,106,90,85],
[107,100,114,100,0,88,114,93,75],
[108,100,135,142,123,0,127,114,120],
[90,95,107,105,97,84,0,95,79],
[106,111,129,121,118,97,116,0,107],
[132,116,133,126,136,91,132,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,96,103,101,96,102,115],
[116,0,110,104,109,113,101,109,126],
[102,101,0,114,117,105,113,108,128],
[115,107,97,0,101,95,91,99,100],
[108,102,94,110,0,92,103,110,113],
[110,98,106,116,119,0,101,120,123],
[115,110,98,120,108,110,0,104,120],
[109,102,103,112,101,91,107,0,122],
[96,85,83,111,98,88,91,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,93,103,100,117,98,109,83],
[115,0,118,106,109,118,111,104,103],
[118,93,0,97,103,108,103,116,88],
[108,105,114,0,122,111,114,117,102],
[111,102,108,89,0,120,96,104,110],
[94,93,103,100,91,0,102,89,103],
[113,100,108,97,115,109,0,103,106],
[102,107,95,94,107,122,108,0,93],
[128,108,123,109,101,108,105,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,101,113,100,118,117,100],
[100,0,121,105,105,90,110,119,104],
[100,90,0,112,108,101,112,108,99],
[110,106,99,0,117,117,128,108,92],
[98,106,103,94,0,94,117,115,110],
[111,121,110,94,117,0,109,124,103],
[93,101,99,83,94,102,0,105,89],
[94,92,103,103,96,87,106,0,89],
[111,107,112,119,101,108,122,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,107,103,87,111,94,88],
[108,0,90,105,86,95,101,96,88],
[105,121,0,112,99,89,105,101,99],
[104,106,99,0,97,91,87,108,86],
[108,125,112,114,0,91,114,116,104],
[124,116,122,120,120,0,116,122,97],
[100,110,106,124,97,95,0,93,84],
[117,115,110,103,95,89,118,0,108],
[123,123,112,125,107,114,127,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,122,111,113,119,112,100,113],
[109,0,126,112,109,125,112,102,106],
[89,85,0,98,98,92,98,101,92],
[100,99,113,0,92,115,115,101,101],
[98,102,113,119,0,115,107,100,97],
[92,86,119,96,96,0,99,108,91],
[99,99,113,96,104,112,0,92,83],
[111,109,110,110,111,103,119,0,103],
[98,105,119,110,114,120,128,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,112,117,120,128,98,106,97],
[112,0,121,78,115,113,119,110,124],
[99,90,0,89,88,113,95,82,88],
[94,133,122,0,136,144,120,124,101],
[91,96,123,75,0,132,99,108,99],
[83,98,98,67,79,0,95,55,80],
[113,92,116,91,112,116,0,98,121],
[105,101,129,87,103,156,113,0,102],
[114,87,123,110,112,131,90,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,110,112,102,104,115,98],
[104,0,111,111,110,106,100,108,112],
[102,100,0,116,109,117,94,99,99],
[101,100,95,0,94,100,113,102,103],
[99,101,102,117,0,107,98,111,112],
[109,105,94,111,104,0,103,111,107],
[107,111,117,98,113,108,0,108,108],
[96,103,112,109,100,100,103,0,113],
[113,99,112,108,99,104,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,90,117,121,108,106,110,111],
[91,0,78,109,104,96,94,84,95],
[121,133,0,115,112,101,108,128,115],
[94,102,96,0,101,84,99,107,112],
[90,107,99,110,0,100,95,109,103],
[103,115,110,127,111,0,110,111,116],
[105,117,103,112,116,101,0,119,116],
[101,127,83,104,102,100,92,0,107],
[100,116,96,99,108,95,95,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,94,95,86,111,96,93,104],
[122,0,110,112,107,116,95,100,110],
[117,101,0,97,102,113,99,99,115],
[116,99,114,0,104,110,100,110,109],
[125,104,109,107,0,111,106,100,97],
[100,95,98,101,100,0,98,91,91],
[115,116,112,111,105,113,0,105,117],
[118,111,112,101,111,120,106,0,110],
[107,101,96,102,114,120,94,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,133,117,117,126,101,106,101],
[97,0,111,106,110,110,106,105,107],
[78,100,0,94,106,109,90,99,92],
[94,105,117,0,113,108,95,108,101],
[94,101,105,98,0,103,89,89,96],
[85,101,102,103,108,0,97,90,91],
[110,105,121,116,122,114,0,109,118],
[105,106,112,103,122,121,102,0,93],
[110,104,119,110,115,120,93,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,106,117,108,104,111,114],
[101,0,116,96,117,110,106,124,111],
[100,95,0,101,104,106,99,122,103],
[105,115,110,0,115,114,110,110,98],
[94,94,107,96,0,106,104,116,109],
[103,101,105,97,105,0,111,106,109],
[107,105,112,101,107,100,0,113,111],
[100,87,89,101,95,105,98,0,99],
[97,100,108,113,102,102,100,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,115,116,123,110,101,105],
[108,0,115,119,113,112,99,107,107],
[99,96,0,113,107,113,103,110,113],
[96,92,98,0,102,99,87,99,99],
[95,98,104,109,0,105,93,97,101],
[88,99,98,112,106,0,102,96,104],
[101,112,108,124,118,109,0,104,113],
[110,104,101,112,114,115,107,0,109],
[106,104,98,112,110,107,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,96,92,96,94,97,94],
[105,0,125,125,97,103,114,104,115],
[99,86,0,99,87,91,94,62,86],
[115,86,112,0,95,110,102,109,92],
[119,114,124,116,0,106,104,97,106],
[115,108,120,101,105,0,123,99,115],
[117,97,117,109,107,88,0,82,97],
[114,107,149,102,114,112,129,0,126],
[117,96,125,119,105,96,114,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,104,91,103,109,95,94],
[107,0,101,104,95,91,102,109,103],
[100,110,0,103,95,95,103,96,89],
[107,107,108,0,99,104,114,101,97],
[120,116,116,112,0,107,115,102,103],
[108,120,116,107,104,0,110,106,110],
[102,109,108,97,96,101,0,101,98],
[116,102,115,110,109,105,110,0,100],
[117,108,122,114,108,101,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,86,99,106,103,103,102],
[114,0,111,99,110,117,105,102,107],
[111,100,0,112,110,122,107,116,110],
[125,112,99,0,117,121,111,116,117],
[112,101,101,94,0,120,110,98,108],
[105,94,89,90,91,0,103,102,97],
[108,106,104,100,101,108,0,104,108],
[108,109,95,95,113,109,107,0,101],
[109,104,101,94,103,114,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,96,105,88,90,95,112],
[111,0,103,105,106,105,102,107,109],
[116,108,0,101,110,108,105,105,115],
[115,106,110,0,109,98,110,108,107],
[106,105,101,102,0,103,99,114,113],
[123,106,103,113,108,0,102,103,107],
[121,109,106,101,112,109,0,109,119],
[116,104,106,103,97,108,102,0,111],
[99,102,96,104,98,104,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,103,117,110,109,106,106],
[115,0,111,105,121,120,115,113,114],
[101,100,0,100,110,104,100,123,111],
[108,106,111,0,127,104,105,104,97],
[94,90,101,84,0,115,107,106,116],
[101,91,107,107,96,0,92,100,108],
[102,96,111,106,104,119,0,105,116],
[105,98,88,107,105,111,106,0,99],
[105,97,100,114,95,103,95,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,111,123,107,112,99,113,116],
[87,0,107,103,114,75,93,85,90],
[100,104,0,103,108,88,90,101,99],
[88,108,108,0,112,91,95,111,89],
[104,97,103,99,0,90,92,92,95],
[99,136,123,120,121,0,112,108,109],
[112,118,121,116,119,99,0,104,113],
[98,126,110,100,119,103,107,0,115],
[95,121,112,122,116,102,98,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,101,90,96,90,102,104],
[116,0,100,107,101,105,94,104,96],
[110,111,0,117,114,107,100,101,101],
[110,104,94,0,97,99,102,92,98],
[121,110,97,114,0,100,102,109,103],
[115,106,104,112,111,0,102,113,93],
[121,117,111,109,109,109,0,104,105],
[109,107,110,119,102,98,107,0,107],
[107,115,110,113,108,118,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,132,120,133,93,118,122,107],
[75,0,92,94,123,82,102,95,83],
[79,119,0,108,97,98,108,96,97],
[91,117,103,0,118,96,118,113,111],
[78,88,114,93,0,87,103,95,89],
[118,129,113,115,124,0,109,120,84],
[93,109,103,93,108,102,0,116,86],
[89,116,115,98,116,91,95,0,92],
[104,128,114,100,122,127,125,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,78,122,73,103,87,103,107],
[118,0,87,113,74,109,85,87,105],
[133,124,0,124,112,100,108,99,122],
[89,98,87,0,85,112,91,105,99],
[138,137,99,126,0,105,117,119,122],
[108,102,111,99,106,0,93,84,111],
[124,126,103,120,94,118,0,127,130],
[108,124,112,106,92,127,84,0,111],
[104,106,89,112,89,100,81,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,102,90,98,113,106,105],
[111,0,95,101,106,109,112,107,113],
[108,116,0,103,109,112,113,107,115],
[109,110,108,0,108,99,110,99,113],
[121,105,102,103,0,112,112,105,113],
[113,102,99,112,99,0,105,99,98],
[98,99,98,101,99,106,0,105,97],
[105,104,104,112,106,112,106,0,113],
[106,98,96,98,98,113,114,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,113,125,91,123,125,122,131],
[112,0,101,108,89,104,122,138,120],
[98,110,0,102,101,118,116,123,119],
[86,103,109,0,100,121,118,115,121],
[120,122,110,111,0,125,91,117,122],
[88,107,93,90,86,0,109,118,119],
[86,89,95,93,120,102,0,94,102],
[89,73,88,96,94,93,117,0,101],
[80,91,92,90,89,92,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,105,122,141,106,117,115],
[105,0,94,107,126,108,106,125,117],
[105,117,0,120,98,141,80,106,105],
[106,104,91,0,126,139,109,100,97],
[89,85,113,85,0,133,97,102,71],
[70,103,70,72,78,0,72,100,74],
[105,105,131,102,114,139,0,120,113],
[94,86,105,111,109,111,91,0,101],
[96,94,106,114,140,137,98,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,120,88,86,92,92,114],
[105,0,110,112,100,99,113,101,108],
[109,101,0,122,88,97,99,101,98],
[91,99,89,0,88,98,86,92,107],
[123,111,123,123,0,107,101,107,119],
[125,112,114,113,104,0,111,105,123],
[119,98,112,125,110,100,0,106,116],
[119,110,110,119,104,106,105,0,126],
[97,103,113,104,92,88,95,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,109,98,104,106,87,95],
[101,0,107,108,104,104,108,94,126],
[100,104,0,110,100,107,103,108,94],
[102,103,101,0,106,106,108,104,106],
[113,107,111,105,0,100,110,82,89],
[107,107,104,105,111,0,94,93,94],
[105,103,108,103,101,117,0,108,96],
[124,117,103,107,129,118,103,0,112],
[116,85,117,105,122,117,115,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,105,107,94,99,96,94],
[105,0,110,99,95,87,104,98,96],
[97,101,0,87,92,91,88,97,94],
[106,112,124,0,103,105,101,109,113],
[104,116,119,108,0,101,103,111,106],
[117,124,120,106,110,0,104,105,108],
[112,107,123,110,108,107,0,114,101],
[115,113,114,102,100,106,97,0,97],
[117,115,117,98,105,103,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,108,110,106,97,105,106],
[105,0,112,111,108,118,108,114,125],
[106,99,0,91,120,120,95,106,111],
[103,100,120,0,116,126,98,111,125],
[101,103,91,95,0,106,89,109,109],
[105,93,91,85,105,0,77,90,111],
[114,103,116,113,122,134,0,112,124],
[106,97,105,100,102,121,99,0,117],
[105,86,100,86,102,100,87,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,107,103,110,111,118,106],
[104,0,109,112,109,103,114,103,109],
[109,102,0,95,103,94,118,91,107],
[104,99,116,0,112,102,118,113,104],
[108,102,108,99,0,93,121,108,114],
[101,108,117,109,118,0,116,111,116],
[100,97,93,93,90,95,0,108,101],
[93,108,120,98,103,100,103,0,104],
[105,102,104,107,97,95,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,91,99,98,114,110,107],
[100,0,100,94,96,125,114,85,92],
[91,111,0,108,95,112,124,110,107],
[120,117,103,0,116,126,114,101,119],
[112,115,116,95,0,125,113,109,106],
[113,86,99,85,86,0,106,92,96],
[97,97,87,97,98,105,0,90,101],
[101,126,101,110,102,119,121,0,104],
[104,119,104,92,105,115,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,103,105,104,115,103,103],
[114,0,105,106,101,95,119,110,119],
[110,106,0,107,104,104,114,104,112],
[108,105,104,0,111,106,116,101,111],
[106,110,107,100,0,108,120,102,105],
[107,116,107,105,103,0,122,103,115],
[96,92,97,95,91,89,0,97,99],
[108,101,107,110,109,108,114,0,106],
[108,92,99,100,106,96,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,137,107,97,112,119,134,96],
[110,0,120,99,91,116,114,112,100],
[74,91,0,92,93,122,106,102,75],
[104,112,119,0,109,124,119,127,116],
[114,120,118,102,0,128,119,143,120],
[99,95,89,87,83,0,86,106,101],
[92,97,105,92,92,125,0,117,115],
[77,99,109,84,68,105,94,0,92],
[115,111,136,95,91,110,96,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,94,102,109,99,102,106,96],
[100,0,93,108,113,98,94,111,102],
[117,118,0,122,115,107,103,120,109],
[109,103,89,0,101,100,93,101,92],
[102,98,96,110,0,100,94,105,102],
[112,113,104,111,111,0,102,116,101],
[109,117,108,118,117,109,0,122,103],
[105,100,91,110,106,95,89,0,87],
[115,109,102,119,109,110,108,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,118,123,112,119,148,108,100],
[75,0,75,107,95,84,93,103,102],
[93,136,0,141,132,120,121,106,74],
[88,104,70,0,99,72,103,62,64],
[99,116,79,112,0,92,108,105,97],
[92,127,91,139,119,0,131,139,111],
[63,118,90,108,103,80,0,108,73],
[103,108,105,149,106,72,103,0,84],
[111,109,137,147,114,100,138,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,118,110,112,127,113,120,89],
[104,0,106,84,98,131,105,102,105],
[93,105,0,106,113,142,109,102,97],
[101,127,105,0,112,115,112,102,112],
[99,113,98,99,0,120,99,94,104],
[84,80,69,96,91,0,83,62,82],
[98,106,102,99,112,128,0,94,118],
[91,109,109,109,117,149,117,0,107],
[122,106,114,99,107,129,93,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,111,109,106,118,115,111],
[114,0,106,95,93,97,102,107,96],
[106,105,0,95,86,105,107,117,98],
[100,116,116,0,105,130,114,128,112],
[102,118,125,106,0,114,114,117,98],
[105,114,106,81,97,0,107,104,102],
[93,109,104,97,97,104,0,103,113],
[96,104,94,83,94,107,108,0,99],
[100,115,113,99,113,109,98,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,114,104,114,108,102,113,105],
[110,0,107,107,100,116,104,103,100],
[97,104,0,90,82,87,108,86,89],
[107,104,121,0,95,114,110,117,112],
[97,111,129,116,0,94,100,105,118],
[103,95,124,97,117,0,89,103,96],
[109,107,103,101,111,122,0,87,99],
[98,108,125,94,106,108,124,0,99],
[106,111,122,99,93,115,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,108,83,99,105,111,101],
[113,0,118,121,103,105,109,105,107],
[103,93,0,98,96,96,102,86,104],
[103,90,113,0,96,101,102,99,98],
[128,108,115,115,0,106,110,105,111],
[112,106,115,110,105,0,112,101,113],
[106,102,109,109,101,99,0,92,101],
[100,106,125,112,106,110,119,0,113],
[110,104,107,113,100,98,110,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,126,107,87,102,95,95],
[103,0,122,124,127,115,106,95,101],
[97,89,0,105,89,89,75,81,79],
[85,87,106,0,102,101,80,74,67],
[104,84,122,109,0,75,80,77,89],
[124,96,122,110,136,0,90,83,111],
[109,105,136,131,131,121,0,113,110],
[116,116,130,137,134,128,98,0,117],
[116,110,132,144,122,100,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,97,116,103,114,111,101,111],
[100,0,88,119,88,106,106,87,95],
[114,123,0,119,111,116,121,100,113],
[95,92,92,0,89,105,104,92,96],
[108,123,100,122,0,115,117,108,115],
[97,105,95,106,96,0,102,92,100],
[100,105,90,107,94,109,0,98,99],
[110,124,111,119,103,119,113,0,109],
[100,116,98,115,96,111,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,126,95,87,86,147,102,125],
[74,0,133,79,78,68,101,83,100],
[85,78,0,75,66,67,99,69,83],
[116,132,136,0,108,115,140,94,121],
[124,133,145,103,0,117,140,99,103],
[125,143,144,96,94,0,133,116,108],
[64,110,112,71,71,78,0,73,101],
[109,128,142,117,112,95,138,0,100],
[86,111,128,90,108,103,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,110,98,113,103,107,113,101],
[120,0,106,92,113,113,99,111,110],
[101,105,0,91,111,113,104,110,118],
[113,119,120,0,116,105,116,118,107],
[98,98,100,95,0,106,98,104,97],
[108,98,98,106,105,0,100,114,108],
[104,112,107,95,113,111,0,111,96],
[98,100,101,93,107,97,100,0,102],
[110,101,93,104,114,103,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,107,113,117,110,104,111,104],
[90,0,120,108,94,113,112,120,92],
[104,91,0,97,119,126,101,122,120],
[98,103,114,0,97,99,84,92,99],
[94,117,92,114,0,102,100,124,111],
[101,98,85,112,109,0,110,112,110],
[107,99,110,127,111,101,0,114,83],
[100,91,89,119,87,99,97,0,102],
[107,119,91,112,100,101,128,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,104,114,107,108,114,107],
[106,0,127,89,117,115,107,114,109],
[94,84,0,84,104,112,101,101,101],
[107,122,127,0,105,118,113,110,128],
[97,94,107,106,0,102,101,101,102],
[104,96,99,93,109,0,101,114,114],
[103,104,110,98,110,110,0,110,109],
[97,97,110,101,110,97,101,0,103],
[104,102,110,83,109,97,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,110,125,113,118,104,98,97],
[116,0,129,126,126,107,120,121,97],
[101,82,0,112,104,97,92,106,96],
[86,85,99,0,104,89,100,99,85],
[98,85,107,107,0,90,90,98,94],
[93,104,114,122,121,0,112,99,108],
[107,91,119,111,121,99,0,107,85],
[113,90,105,112,113,112,104,0,89],
[114,114,115,126,117,103,126,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,86,111,104,98,106,116,124],
[121,0,106,117,107,108,104,115,114],
[125,105,0,114,104,126,119,127,121],
[100,94,97,0,87,102,99,113,117],
[107,104,107,124,0,111,119,121,110],
[113,103,85,109,100,0,111,107,103],
[105,107,92,112,92,100,0,104,115],
[95,96,84,98,90,104,107,0,97],
[87,97,90,94,101,108,96,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,98,102,102,107,99,95,100],
[114,0,99,95,102,104,100,110,126],
[113,112,0,101,117,125,110,114,100],
[109,116,110,0,113,107,110,101,116],
[109,109,94,98,0,105,101,94,102],
[104,107,86,104,106,0,116,91,96],
[112,111,101,101,110,95,0,102,105],
[116,101,97,110,117,120,109,0,125],
[111,85,111,95,109,115,106,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,121,105,118,108,102,106,106],
[114,0,115,106,116,104,105,107,104],
[90,96,0,97,114,97,98,106,106],
[106,105,114,0,121,100,114,109,101],
[93,95,97,90,0,107,104,93,94],
[103,107,114,111,104,0,106,108,114],
[109,106,113,97,107,105,0,108,111],
[105,104,105,102,118,103,103,0,108],
[105,107,105,110,117,97,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,107,104,119,111,107,90],
[113,0,102,108,103,113,112,102,95],
[107,109,0,103,110,113,104,107,106],
[104,103,108,0,108,104,110,101,88],
[107,108,101,103,0,112,110,103,99],
[92,98,98,107,99,0,98,97,96],
[100,99,107,101,101,113,0,109,91],
[104,109,104,110,108,114,102,0,100],
[121,116,105,123,112,115,120,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,119,104,111,111,106,123,96],
[116,0,101,100,99,118,122,124,98],
[92,110,0,104,100,101,100,113,87],
[107,111,107,0,98,106,92,118,107],
[100,112,111,113,0,111,95,121,96],
[100,93,110,105,100,0,95,121,107],
[105,89,111,119,116,116,0,128,113],
[88,87,98,93,90,90,83,0,85],
[115,113,124,104,115,104,98,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,110,113,107,105,106,113,108],
[82,0,74,93,98,89,91,85,105],
[101,137,0,117,111,114,119,107,121],
[98,118,94,0,105,106,99,93,100],
[104,113,100,106,0,106,117,90,115],
[106,122,97,105,105,0,104,92,124],
[105,120,92,112,94,107,0,106,121],
[98,126,104,118,121,119,105,0,114],
[103,106,90,111,96,87,90,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,113,108,113,108,114,104],
[103,0,106,97,103,103,101,117,95],
[100,105,0,101,103,109,103,117,102],
[98,114,110,0,115,106,97,114,111],
[103,108,108,96,0,94,96,103,111],
[98,108,102,105,117,0,105,117,105],
[103,110,108,114,115,106,0,122,119],
[97,94,94,97,108,94,89,0,105],
[107,116,109,100,100,106,92,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,97,113,108,112,118,105],
[109,0,93,113,116,110,105,95,94],
[104,118,0,116,122,116,126,128,117],
[114,98,95,0,99,95,110,107,95],
[98,95,89,112,0,87,100,93,95],
[103,101,95,116,124,0,117,110,115],
[99,106,85,101,111,94,0,107,98],
[93,116,83,104,118,101,104,0,95],
[106,117,94,116,116,96,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,94,108,99,107,105,92],
[106,0,102,100,105,100,121,116,101],
[103,109,0,104,116,106,128,106,116],
[117,111,107,0,121,106,109,123,105],
[103,106,95,90,0,98,105,100,95],
[112,111,105,105,113,0,129,108,104],
[104,90,83,102,106,82,0,118,86],
[106,95,105,88,111,103,93,0,99],
[119,110,95,106,116,107,125,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,97,99,126,112,103,88],
[110,0,112,107,101,119,107,113,103],
[99,99,0,108,100,118,109,110,107],
[114,104,103,0,109,128,106,116,98],
[112,110,111,102,0,119,121,114,94],
[85,92,93,83,92,0,106,100,84],
[99,104,102,105,90,105,0,103,94],
[108,98,101,95,97,111,108,0,91],
[123,108,104,113,117,127,117,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,99,112,108,95,111,104,100],
[104,0,105,119,128,109,115,98,110],
[112,106,0,113,112,95,108,101,112],
[99,92,98,0,111,98,106,102,109],
[103,83,99,100,0,103,99,93,106],
[116,102,116,113,108,0,120,106,109],
[100,96,103,105,112,91,0,100,96],
[107,113,110,109,118,105,111,0,102],
[111,101,99,102,105,102,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,117,110,116,104,107,114],
[107,0,104,113,114,111,95,105,104],
[103,107,0,109,110,112,113,111,106],
[94,98,102,0,105,109,99,99,103],
[101,97,101,106,0,113,98,103,106],
[95,100,99,102,98,0,95,102,96],
[107,116,98,112,113,116,0,98,105],
[104,106,100,112,108,109,113,0,107],
[97,107,105,108,105,115,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,104,111,117,103,123,110],
[107,0,105,95,108,106,94,108,98],
[94,106,0,101,99,111,96,106,111],
[107,116,110,0,107,117,103,115,115],
[100,103,112,104,0,108,107,112,112],
[94,105,100,94,103,0,82,97,95],
[108,117,115,108,104,129,0,115,108],
[88,103,105,96,99,114,96,0,99],
[101,113,100,96,99,116,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,111,106,103,120,113,99,99],
[116,0,118,121,103,125,115,111,107],
[100,93,0,104,91,105,105,90,97],
[105,90,107,0,96,110,105,92,105],
[108,108,120,115,0,118,111,102,104],
[91,86,106,101,93,0,101,95,97],
[98,96,106,106,100,110,0,92,97],
[112,100,121,119,109,116,119,0,116],
[112,104,114,106,107,114,114,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,114,112,111,113,104,108],
[105,0,110,111,108,106,107,95,104],
[102,101,0,108,97,99,109,95,95],
[97,100,103,0,104,105,106,104,105],
[99,103,114,107,0,104,104,89,115],
[100,105,112,106,107,0,106,94,95],
[98,104,102,105,107,105,0,102,105],
[107,116,116,107,122,117,109,0,104],
[103,107,116,106,96,116,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,125,109,108,107,112,105],
[107,0,103,116,116,109,104,101,108],
[100,108,0,124,108,110,107,111,100],
[86,95,87,0,103,83,96,99,96],
[102,95,103,108,0,99,103,97,100],
[103,102,101,128,112,0,101,99,92],
[104,107,104,115,108,110,0,102,103],
[99,110,100,112,114,112,109,0,112],
[106,103,111,115,111,119,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,124,86,107,107,112,134,131],
[97,0,124,108,113,139,112,134,136],
[87,87,0,97,109,101,74,111,80],
[125,103,114,0,118,101,100,141,130],
[104,98,102,93,0,106,93,120,104],
[104,72,110,110,105,0,93,114,122],
[99,99,137,111,118,118,0,143,142],
[77,77,100,70,91,97,68,0,94],
[80,75,131,81,107,89,69,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,93,81,84,73,102,89,71],
[104,0,71,93,94,93,91,100,70],
[118,140,0,114,103,117,135,120,119],
[130,118,97,0,96,96,124,112,124],
[127,117,108,115,0,94,107,112,121],
[138,118,94,115,117,0,139,122,114],
[109,120,76,87,104,72,0,109,81],
[122,111,91,99,99,89,102,0,102],
[140,141,92,87,90,97,130,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,100,102,106,104,103,108],
[109,0,119,101,104,113,111,108,116],
[102,92,0,112,92,105,100,97,91],
[111,110,99,0,109,109,99,97,101],
[109,107,119,102,0,115,104,108,104],
[105,98,106,102,96,0,101,100,94],
[107,100,111,112,107,110,0,95,110],
[108,103,114,114,103,111,116,0,110],
[103,95,120,110,107,117,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,88,119,100,115,103,114,115],
[118,0,110,117,102,119,109,99,116],
[123,101,0,123,109,120,102,108,113],
[92,94,88,0,99,104,101,94,100],
[111,109,102,112,0,116,112,96,114],
[96,92,91,107,95,0,96,98,106],
[108,102,109,110,99,115,0,103,113],
[97,112,103,117,115,113,108,0,117],
[96,95,98,111,97,105,98,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,119,111,105,101,111,120,102],
[95,0,136,105,109,104,107,93,91],
[92,75,0,97,92,89,80,83,78],
[100,106,114,0,116,107,92,103,85],
[106,102,119,95,0,104,83,98,85],
[110,107,122,104,107,0,103,102,94],
[100,104,131,119,128,108,0,99,108],
[91,118,128,108,113,109,112,0,101],
[109,120,133,126,126,117,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,86,78,89,94,90,86,89],
[114,0,85,100,105,96,100,96,101],
[125,126,0,116,114,109,116,107,99],
[133,111,95,0,119,99,104,105,115],
[122,106,97,92,0,94,104,91,108],
[117,115,102,112,117,0,110,108,120],
[121,111,95,107,107,101,0,88,96],
[125,115,104,106,120,103,123,0,109],
[122,110,112,96,103,91,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,98,97,104,100,119,101],
[107,0,91,99,109,106,114,107,111],
[111,120,0,105,102,107,108,107,110],
[113,112,106,0,109,103,102,113,99],
[114,102,109,102,0,109,109,103,112],
[107,105,104,108,102,0,112,102,110],
[111,97,103,109,102,99,0,107,99],
[92,104,104,98,108,109,104,0,106],
[110,100,101,112,99,101,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,104,113,112,98,121,121],
[105,0,99,108,120,102,107,107,123],
[102,112,0,111,124,100,112,109,117],
[107,103,100,0,109,91,102,112,117],
[98,91,87,102,0,85,104,100,115],
[99,109,111,120,126,0,120,121,135],
[113,104,99,109,107,91,0,104,114],
[90,104,102,99,111,90,107,0,125],
[90,88,94,94,96,76,97,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,124,90,106,116,104,96,110],
[100,0,114,89,95,102,89,94,107],
[87,97,0,90,83,112,100,82,96],
[121,122,121,0,103,121,121,117,129],
[105,116,128,108,0,119,119,125,112],
[95,109,99,90,92,0,107,67,93],
[107,122,111,90,92,104,0,104,113],
[115,117,129,94,86,144,107,0,93],
[101,104,115,82,99,118,98,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,55,93,78,78,85,48,85],
[155,0,105,150,117,137,142,94,115],
[156,106,0,125,116,91,126,76,123],
[118,61,86,0,107,109,111,70,87],
[133,94,95,104,0,96,144,114,121],
[133,74,120,102,115,0,142,93,122],
[126,69,85,100,67,69,0,56,115],
[163,117,135,141,97,118,155,0,125],
[126,96,88,124,90,89,96,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,125,108,110,112,111,101,107],
[103,0,122,111,113,117,110,111,112],
[86,89,0,99,92,98,99,79,91],
[103,100,112,0,106,112,114,98,120],
[101,98,119,105,0,100,110,98,117],
[99,94,113,99,111,0,100,100,106],
[100,101,112,97,101,111,0,102,100],
[110,100,132,113,113,111,109,0,114],
[104,99,120,91,94,105,111,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,103,105,128,114,109,118,104],
[93,0,99,106,114,110,91,110,89],
[108,112,0,101,117,117,119,125,104],
[106,105,110,0,129,118,113,123,107],
[83,97,94,82,0,98,96,101,82],
[97,101,94,93,113,0,107,104,93],
[102,120,92,98,115,104,0,112,96],
[93,101,86,88,110,107,99,0,89],
[107,122,107,104,129,118,115,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,81,79,77,96,98,98,87],
[110,0,90,96,84,101,92,104,113],
[130,121,0,90,83,106,95,106,86],
[132,115,121,0,108,126,112,115,96],
[134,127,128,103,0,100,121,127,113],
[115,110,105,85,111,0,119,107,90],
[113,119,116,99,90,92,0,100,95],
[113,107,105,96,84,104,111,0,101],
[124,98,125,115,98,121,116,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,118,92,117,119,90,86,87],
[114,0,81,105,119,120,100,106,88],
[93,130,0,131,121,108,95,115,90],
[119,106,80,0,93,84,92,88,82],
[94,92,90,118,0,118,89,110,63],
[92,91,103,127,93,0,94,103,87],
[121,111,116,119,122,117,0,86,107],
[125,105,96,123,101,108,125,0,101],
[124,123,121,129,148,124,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,112,113,112,93,108,131,99],
[123,0,121,130,91,114,112,120,124],
[99,90,0,108,91,78,100,116,94],
[98,81,103,0,89,89,112,108,94],
[99,120,120,122,0,103,121,130,106],
[118,97,133,122,108,0,126,115,100],
[103,99,111,99,90,85,0,107,89],
[80,91,95,103,81,96,104,0,97],
[112,87,117,117,105,111,122,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,100,103,109,112,106,98],
[102,0,111,96,108,97,97,109,109],
[100,100,0,101,94,100,81,98,103],
[111,115,110,0,109,109,93,107,105],
[108,103,117,102,0,109,103,109,96],
[102,114,111,102,102,0,101,96,110],
[99,114,130,118,108,110,0,105,116],
[105,102,113,104,102,115,106,0,109],
[113,102,108,106,115,101,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,68,155,80,105,78,78,133],
[119,0,81,131,107,132,95,119,119],
[143,130,0,157,118,130,117,92,130],
[56,80,54,0,54,94,41,55,81],
[131,104,93,157,0,130,106,104,105],
[106,79,81,117,81,0,68,64,107],
[133,116,94,170,105,143,0,118,145],
[133,92,119,156,107,147,93,0,132],
[78,92,81,130,106,104,66,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,114,121,110,118,112,106],
[109,0,102,115,118,101,103,106,119],
[100,109,0,119,112,111,109,102,105],
[97,96,92,0,106,98,105,104,104],
[90,93,99,105,0,95,104,111,95],
[101,110,100,113,116,0,114,103,108],
[93,108,102,106,107,97,0,116,118],
[99,105,109,107,100,108,95,0,112],
[105,92,106,107,116,103,93,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,94,103,113,114,116,106,109],
[109,0,102,102,103,104,106,111,110],
[117,109,0,106,113,111,104,109,118],
[108,109,105,0,109,109,108,109,113],
[98,108,98,102,0,109,110,101,101],
[97,107,100,102,102,0,113,106,109],
[95,105,107,103,101,98,0,101,104],
[105,100,102,102,110,105,110,0,107],
[102,101,93,98,110,102,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,121,116,106,113,121,121],
[110,0,96,116,117,89,105,121,107],
[101,115,0,120,109,101,110,141,124],
[90,95,91,0,105,105,103,123,116],
[95,94,102,106,0,106,106,121,105],
[105,122,110,106,105,0,115,121,110],
[98,106,101,108,105,96,0,109,122],
[90,90,70,88,90,90,102,0,104],
[90,104,87,95,106,101,89,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,90,108,109,99,103,100,103],
[111,0,105,111,115,104,112,119,120],
[121,106,0,105,118,110,105,102,110],
[103,100,106,0,96,107,102,112,98],
[102,96,93,115,0,108,109,107,103],
[112,107,101,104,103,0,110,103,105],
[108,99,106,109,102,101,0,109,111],
[111,92,109,99,104,108,102,0,108],
[108,91,101,113,108,106,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,111,94,95,119,118,103,119],
[92,0,94,84,111,119,102,77,109],
[100,117,0,115,97,116,112,115,109],
[117,127,96,0,110,111,106,88,120],
[116,100,114,101,0,118,117,91,120],
[92,92,95,100,93,0,105,71,125],
[93,109,99,105,94,106,0,76,104],
[108,134,96,123,120,140,135,0,129],
[92,102,102,91,91,86,107,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,111,109,98,102,101,110],
[106,0,109,103,103,97,115,111,103],
[105,102,0,102,101,98,108,93,108],
[100,108,109,0,102,94,110,98,122],
[102,108,110,109,0,94,121,110,109],
[113,114,113,117,117,0,112,104,123],
[109,96,103,101,90,99,0,109,102],
[110,100,118,113,101,107,102,0,110],
[101,108,103,89,102,88,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,131,79,105,105,80,132,91],
[91,0,63,90,78,115,65,90,76],
[80,148,0,106,107,92,90,106,92],
[132,121,105,0,133,170,105,105,119],
[106,133,104,78,0,131,105,118,104],
[106,96,119,41,80,0,41,93,92],
[131,146,121,106,106,170,0,133,77],
[79,121,105,106,93,118,78,0,103],
[120,135,119,92,107,119,134,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,96,103,102,101,109,99,102],
[107,0,99,104,106,102,113,100,114],
[115,112,0,103,127,113,120,113,107],
[108,107,108,0,119,98,116,111,109],
[109,105,84,92,0,92,119,103,97],
[110,109,98,113,119,0,118,105,113],
[102,98,91,95,92,93,0,92,97],
[112,111,98,100,108,106,119,0,104],
[109,97,104,102,114,98,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,118,96,103,105,85,105],
[101,0,104,110,97,84,101,89,99],
[108,107,0,107,106,96,112,88,105],
[93,101,104,0,100,100,98,77,102],
[115,114,105,111,0,97,104,92,103],
[108,127,115,111,114,0,108,109,96],
[106,110,99,113,107,103,0,86,114],
[126,122,123,134,119,102,125,0,115],
[106,112,106,109,108,115,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,100,97,104,118,106,108],
[107,0,98,108,107,100,111,101,116],
[102,113,0,102,105,113,113,113,107],
[111,103,109,0,102,108,112,113,118],
[114,104,106,109,0,99,111,106,117],
[107,111,98,103,112,0,112,99,113],
[93,100,98,99,100,99,0,88,104],
[105,110,98,98,105,112,123,0,124],
[103,95,104,93,94,98,107,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,100,114,105,83,75,82],
[109,0,66,110,98,96,112,90,79],
[102,145,0,123,94,113,121,87,106],
[111,101,88,0,106,96,106,100,74],
[97,113,117,105,0,108,110,85,74],
[106,115,98,115,103,0,101,75,114],
[128,99,90,105,101,110,0,90,82],
[136,121,124,111,126,136,121,0,102],
[129,132,105,137,137,97,129,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,124,113,116,140,122,98,123],
[102,0,132,102,122,129,120,93,126],
[87,79,0,123,99,133,120,82,100],
[98,109,88,0,82,119,127,90,102],
[95,89,112,129,0,124,119,121,154],
[71,82,78,92,87,0,115,87,96],
[89,91,91,84,92,96,0,82,96],
[113,118,129,121,90,124,129,0,130],
[88,85,111,109,57,115,115,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,127,106,114,94,88,110,83],
[128,0,121,94,121,115,108,130,114],
[84,90,0,89,94,113,88,84,84],
[105,117,122,0,89,92,89,129,114],
[97,90,117,122,0,108,85,117,116],
[117,96,98,119,103,0,80,107,131],
[123,103,123,122,126,131,0,132,115],
[101,81,127,82,94,104,79,0,91],
[128,97,127,97,95,80,96,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,109,109,114,100,136,116],
[113,0,109,101,110,104,101,109,116],
[106,102,0,111,119,110,100,110,108],
[102,110,100,0,114,111,118,118,118],
[102,101,92,97,0,91,93,114,101],
[97,107,101,100,120,0,98,121,105],
[111,110,111,93,118,113,0,127,117],
[75,102,101,93,97,90,84,0,89],
[95,95,103,93,110,106,94,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,111,95,102,106,106,102],
[97,0,105,108,89,103,100,100,108],
[104,106,0,101,92,87,92,105,96],
[100,103,110,0,86,99,109,98,119],
[116,122,119,125,0,105,118,113,114],
[109,108,124,112,106,0,120,109,103],
[105,111,119,102,93,91,0,96,114],
[105,111,106,113,98,102,115,0,130],
[109,103,115,92,97,108,97,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,102,111,104,114,112,106,108],
[94,0,97,105,100,109,111,104,110],
[109,114,0,107,99,123,114,121,118],
[100,106,104,0,112,125,110,101,106],
[107,111,112,99,0,115,103,116,104],
[97,102,88,86,96,0,99,100,102],
[99,100,97,101,108,112,0,109,99],
[105,107,90,110,95,111,102,0,104],
[103,101,93,105,107,109,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,94,101,95,99,105,103,101],
[99,0,105,97,98,103,100,99,103],
[117,106,0,107,105,105,105,103,110],
[110,114,104,0,91,102,102,104,108],
[116,113,106,120,0,108,107,112,105],
[112,108,106,109,103,0,102,102,101],
[106,111,106,109,104,109,0,104,111],
[108,112,108,107,99,109,107,0,98],
[110,108,101,103,106,110,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,100,90,92,91,116,87,98],
[136,0,118,116,104,119,130,113,126],
[111,93,0,102,98,96,105,98,101],
[121,95,109,0,104,96,120,105,116],
[119,107,113,107,0,108,103,92,117],
[120,92,115,115,103,0,123,100,126],
[95,81,106,91,108,88,0,95,108],
[124,98,113,106,119,111,116,0,123],
[113,85,110,95,94,85,103,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,106,97,98,105,111,93,100],
[119,0,104,112,101,107,100,104,94],
[105,107,0,105,103,98,98,96,95],
[114,99,106,0,123,110,105,103,101],
[113,110,108,88,0,110,102,95,106],
[106,104,113,101,101,0,104,108,109],
[100,111,113,106,109,107,0,104,95],
[118,107,115,108,116,103,107,0,100],
[111,117,116,110,105,102,116,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,144,96,120,122,103,118,112],
[98,0,132,123,92,92,87,115,131],
[67,79,0,80,103,75,114,97,101],
[115,88,131,0,109,96,108,110,141],
[91,119,108,102,0,86,109,127,125],
[89,119,136,115,125,0,104,116,121],
[108,124,97,103,102,107,0,110,127],
[93,96,114,101,84,95,101,0,113],
[99,80,110,70,86,90,84,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,101,69,93,94,98,82,94],
[124,0,98,88,110,109,95,79,115],
[110,113,0,107,96,103,104,108,118],
[142,123,104,0,126,112,109,90,126],
[118,101,115,85,0,100,106,100,98],
[117,102,108,99,111,0,104,94,104],
[113,116,107,102,105,107,0,94,102],
[129,132,103,121,111,117,117,0,105],
[117,96,93,85,113,107,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,103,104,102,104,99,109,119],
[118,0,101,96,104,92,99,111,116],
[108,110,0,124,123,104,105,110,128],
[107,115,87,0,112,104,95,99,118],
[109,107,88,99,0,111,102,92,113],
[107,119,107,107,100,0,106,110,131],
[112,112,106,116,109,105,0,109,113],
[102,100,101,112,119,101,102,0,113],
[92,95,83,93,98,80,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,95,108,114,110,116,105],
[98,0,116,103,101,90,117,104,98],
[100,95,0,107,101,98,105,115,101],
[116,108,104,0,106,108,111,113,107],
[103,110,110,105,0,115,109,109,113],
[97,121,113,103,96,0,118,115,102],
[101,94,106,100,102,93,0,101,91],
[95,107,96,98,102,96,110,0,105],
[106,113,110,104,98,109,120,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,119,133,125,126,102,115,127],
[66,0,93,119,104,115,92,97,98],
[92,118,0,125,113,113,97,119,110],
[78,92,86,0,94,92,97,85,96],
[86,107,98,117,0,102,104,92,111],
[85,96,98,119,109,0,95,88,102],
[109,119,114,114,107,116,0,112,102],
[96,114,92,126,119,123,99,0,111],
[84,113,101,115,100,109,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,102,103,101,99,118,101],
[106,0,105,101,108,96,106,112,108],
[104,106,0,99,110,93,108,102,105],
[109,110,112,0,104,104,110,109,109],
[108,103,101,107,0,109,110,113,103],
[110,115,118,107,102,0,118,117,104],
[112,105,103,101,101,93,0,106,115],
[93,99,109,102,98,94,105,0,111],
[110,103,106,102,108,107,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,96,97,105,110,107,88,98],
[106,0,104,97,103,105,100,99,101],
[115,107,0,98,99,113,102,100,104],
[114,114,113,0,112,109,111,94,112],
[106,108,112,99,0,122,106,103,108],
[101,106,98,102,89,0,101,93,87],
[104,111,109,100,105,110,0,105,114],
[123,112,111,117,108,118,106,0,105],
[113,110,107,99,103,124,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,105,92,87,109,100,96],
[115,0,110,107,104,111,109,108,101],
[110,101,0,102,99,87,106,103,100],
[106,104,109,0,100,89,109,115,107],
[119,107,112,111,0,97,121,118,112],
[124,100,124,122,114,0,121,121,120],
[102,102,105,102,90,90,0,113,107],
[111,103,108,96,93,90,98,0,110],
[115,110,111,104,99,91,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,109,113,121,114,103,89],
[101,0,112,102,96,107,100,118,95],
[104,99,0,99,96,117,99,113,97],
[102,109,112,0,104,120,105,120,108],
[98,115,115,107,0,111,114,106,98],
[90,104,94,91,100,0,97,103,106],
[97,111,112,106,97,114,0,107,106],
[108,93,98,91,105,108,104,0,93],
[122,116,114,103,113,105,105,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,117,107,119,105,110,105,115],
[118,0,99,102,122,123,106,109,123],
[94,112,0,114,124,118,132,109,115],
[104,109,97,0,116,108,108,97,124],
[92,89,87,95,0,105,105,96,102],
[106,88,93,103,106,0,107,92,121],
[101,105,79,103,106,104,0,89,112],
[106,102,102,114,115,119,122,0,131],
[96,88,96,87,109,90,99,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,108,86,112,112,107,112,96],
[86,0,103,95,109,106,100,99,101],
[103,108,0,92,100,100,102,110,98],
[125,116,119,0,109,116,109,104,101],
[99,102,111,102,0,97,96,106,97],
[99,105,111,95,114,0,99,109,105],
[104,111,109,102,115,112,0,111,108],
[99,112,101,107,105,102,100,0,94],
[115,110,113,110,114,106,103,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,112,110,106,111,105,109,116],
[101,0,103,99,117,106,107,101,109],
[99,108,0,98,105,90,97,96,106],
[101,112,113,0,120,101,118,109,114],
[105,94,106,91,0,98,97,104,102],
[100,105,121,110,113,0,105,103,117],
[106,104,114,93,114,106,0,95,112],
[102,110,115,102,107,108,116,0,109],
[95,102,105,97,109,94,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,74,70,105,90,114,91,94],
[80,0,98,97,72,80,103,76,90],
[137,113,0,110,96,92,129,113,117],
[141,114,101,0,102,115,123,92,104],
[106,139,115,109,0,86,102,85,89],
[121,131,119,96,125,0,127,97,116],
[97,108,82,88,109,84,0,91,110],
[120,135,98,119,126,114,120,0,119],
[117,121,94,107,122,95,101,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,115,125,104,98,119,116,116],
[79,0,97,103,106,94,91,92,88],
[96,114,0,111,116,96,109,98,109],
[86,108,100,0,103,104,103,93,92],
[107,105,95,108,0,116,123,95,106],
[113,117,115,107,95,0,108,95,105],
[92,120,102,108,88,103,0,99,111],
[95,119,113,118,116,116,112,0,117],
[95,123,102,119,105,106,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,113,110,107,98,110,98],
[109,0,102,115,98,102,99,106,100],
[111,109,0,106,101,99,105,110,112],
[98,96,105,0,88,104,94,101,86],
[101,113,110,123,0,106,111,109,98],
[104,109,112,107,105,0,112,102,98],
[113,112,106,117,100,99,0,112,97],
[101,105,101,110,102,109,99,0,97],
[113,111,99,125,113,113,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,99,82,107,72,95,95,93],
[125,0,101,118,132,104,104,91,110],
[112,110,0,94,135,104,99,97,96],
[129,93,117,0,123,100,113,108,104],
[104,79,76,88,0,95,94,93,90],
[139,107,107,111,116,0,114,115,105],
[116,107,112,98,117,97,0,104,86],
[116,120,114,103,118,96,107,0,87],
[118,101,115,107,121,106,125,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,91,97,96,115,84,115,92],
[88,0,100,77,86,95,84,95,100],
[120,111,0,99,111,87,107,111,105],
[114,134,112,0,137,134,102,96,110],
[115,125,100,74,0,105,83,77,101],
[96,116,124,77,106,0,94,126,92],
[127,127,104,109,128,117,0,110,102],
[96,116,100,115,134,85,101,0,91],
[119,111,106,101,110,119,109,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,83,95,95,106,105,102,95],
[83,0,100,95,85,95,107,93,87],
[128,111,0,109,111,115,109,102,110],
[116,116,102,0,95,111,107,103,104],
[116,126,100,116,0,109,106,106,100],
[105,116,96,100,102,0,106,120,105],
[106,104,102,104,105,105,0,107,106],
[109,118,109,108,105,91,104,0,106],
[116,124,101,107,111,106,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,93,95,109,114,114,92,90],
[104,0,115,106,116,96,101,107,107],
[118,96,0,98,118,122,119,121,100],
[116,105,113,0,120,118,115,109,111],
[102,95,93,91,0,103,102,104,108],
[97,115,89,93,108,0,99,119,103],
[97,110,92,96,109,112,0,118,101],
[119,104,90,102,107,92,93,0,85],
[121,104,111,100,103,108,110,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,126,98,102,94,100,107],
[115,0,106,114,117,105,103,98,108],
[112,105,0,123,115,105,91,103,99],
[85,97,88,0,103,89,93,91,92],
[113,94,96,108,0,97,103,111,102],
[109,106,106,122,114,0,113,106,103],
[117,108,120,118,108,98,0,110,114],
[111,113,108,120,100,105,101,0,102],
[104,103,112,119,109,108,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,91,101,94,104,102,100],
[115,0,103,103,118,104,111,108,102],
[105,108,0,98,115,96,97,103,107],
[120,108,113,0,111,108,111,104,111],
[110,93,96,100,0,103,102,107,102],
[117,107,115,103,108,0,109,106,110],
[107,100,114,100,109,102,0,109,103],
[109,103,108,107,104,105,102,0,108],
[111,109,104,100,109,101,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,123,120,116,101,105,105],
[101,0,84,107,105,105,95,97,99],
[108,127,0,120,108,113,104,103,107],
[88,104,91,0,96,98,91,108,98],
[91,106,103,115,0,111,95,111,91],
[95,106,98,113,100,0,101,95,100],
[110,116,107,120,116,110,0,106,96],
[106,114,108,103,100,116,105,0,103],
[106,112,104,113,120,111,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,108,110,104,119,101,102],
[100,0,110,109,93,105,107,109,97],
[100,101,0,117,107,105,104,111,95],
[103,102,94,0,97,104,104,99,104],
[101,118,104,114,0,104,120,111,113],
[107,106,106,107,107,0,117,103,106],
[92,104,107,107,91,94,0,103,104],
[110,102,100,112,100,108,108,0,96],
[109,114,116,107,98,105,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,117,122,88,98,114,103,105],
[88,0,112,123,91,93,111,102,102],
[94,99,0,105,77,95,90,109,76],
[89,88,106,0,70,77,81,90,80],
[123,120,134,141,0,112,117,119,93],
[113,118,116,134,99,0,126,132,113],
[97,100,121,130,94,85,0,103,102],
[108,109,102,121,92,79,108,0,96],
[106,109,135,131,118,98,109,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,112,105,109,114,105,106,96],
[82,0,107,94,104,101,93,96,88],
[99,104,0,100,112,109,107,102,111],
[106,117,111,0,102,113,105,118,87],
[102,107,99,109,0,103,98,113,106],
[97,110,102,98,108,0,110,98,103],
[106,118,104,106,113,101,0,110,103],
[105,115,109,93,98,113,101,0,84],
[115,123,100,124,105,108,108,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,78,123,109,108,106,110],
[112,0,93,102,93,123,105,113,96],
[105,118,0,119,117,114,100,140,103],
[133,109,92,0,100,127,99,125,104],
[88,118,94,111,0,121,117,139,100],
[102,88,97,84,90,0,102,113,100],
[103,106,111,112,94,109,0,106,96],
[105,98,71,86,72,98,105,0,82],
[101,115,108,107,111,111,115,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,109,103,105,104,101,108],
[114,0,100,109,109,102,114,118,106],
[105,111,0,115,106,100,100,101,94],
[102,102,96,0,105,100,100,104,108],
[108,102,105,106,0,106,115,115,110],
[106,109,111,111,105,0,99,108,97],
[107,97,111,111,96,112,0,108,105],
[110,93,110,107,96,103,103,0,102],
[103,105,117,103,101,114,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,76,85,87,94,91,114,74],
[96,0,67,83,79,134,82,106,97],
[135,144,0,122,127,139,98,143,104],
[126,128,89,0,111,139,115,123,105],
[124,132,84,100,0,125,117,114,106],
[117,77,72,72,86,0,96,79,52],
[120,129,113,96,94,115,0,112,96],
[97,105,68,88,97,132,99,0,81],
[137,114,107,106,105,159,115,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,109,116,92,100,84,105],
[96,0,100,94,108,101,99,90,99],
[109,111,0,102,127,113,105,98,107],
[102,117,109,0,118,110,97,107,119],
[95,103,84,93,0,85,99,88,101],
[119,110,98,101,126,0,106,100,121],
[111,112,106,114,112,105,0,104,99],
[127,121,113,104,123,111,107,0,120],
[106,112,104,92,110,90,112,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,97,106,99,109,106,127],
[97,0,97,107,117,119,112,113,128],
[101,114,0,108,110,113,114,112,127],
[114,104,103,0,105,128,107,103,106],
[105,94,101,106,0,110,99,116,115],
[112,92,98,83,101,0,107,101,113],
[102,99,97,104,112,104,0,109,112],
[105,98,99,108,95,110,102,0,114],
[84,83,84,105,96,98,99,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,106,107,127,147,147,83],
[105,0,106,85,85,106,127,83,84],
[104,105,0,126,63,125,169,104,126],
[105,126,85,0,105,106,126,84,104],
[104,126,148,106,0,148,126,126,104],
[84,105,86,105,63,0,148,125,105],
[64,84,42,85,85,63,0,41,62],
[64,128,107,127,85,86,170,0,105],
[128,127,85,107,107,106,149,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,102,117,109,103,115,108,112],
[117,0,106,115,114,104,115,104,107],
[109,105,0,116,108,106,115,118,117],
[94,96,95,0,100,93,97,111,96],
[102,97,103,111,0,109,105,116,119],
[108,107,105,118,102,0,112,109,120],
[96,96,96,114,106,99,0,102,109],
[103,107,93,100,95,102,109,0,102],
[99,104,94,115,92,91,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,103,100,99,106,95,103],
[110,0,102,109,101,104,114,106,115],
[108,109,0,110,99,105,106,104,102],
[108,102,101,0,112,101,111,97,109],
[111,110,112,99,0,98,124,93,120],
[112,107,106,110,113,0,102,104,114],
[105,97,105,100,87,109,0,97,107],
[116,105,107,114,118,107,114,0,121],
[108,96,109,102,91,97,104,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,119,116,99,114,97,111,84],
[96,0,111,109,96,114,109,114,106],
[92,100,0,102,98,100,93,98,84],
[95,102,109,0,94,97,81,105,97],
[112,115,113,117,0,115,113,99,97],
[97,97,111,114,96,0,103,111,96],
[114,102,118,130,98,108,0,117,94],
[100,97,113,106,112,100,94,0,85],
[127,105,127,114,114,115,117,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,99,110,99,100,100,104],
[111,0,112,110,103,104,95,110,104],
[111,99,0,102,99,106,98,105,98],
[112,101,109,0,103,109,108,106,106],
[101,108,112,108,0,105,94,104,111],
[112,107,105,102,106,0,102,97,104],
[111,116,113,103,117,109,0,113,109],
[111,101,106,105,107,114,98,0,107],
[107,107,113,105,100,107,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,109,112,102,101,98,90,93],
[120,0,96,127,102,107,112,98,111],
[102,115,0,108,91,102,84,101,115],
[99,84,103,0,79,79,90,89,107],
[109,109,120,132,0,116,99,114,112],
[110,104,109,132,95,0,97,94,87],
[113,99,127,121,112,114,0,99,108],
[121,113,110,122,97,117,112,0,108],
[118,100,96,104,99,124,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,100,119,113,105,90,114],
[113,0,118,127,107,102,93,110,114],
[98,93,0,101,110,107,102,107,106],
[111,84,110,0,109,102,95,110,107],
[92,104,101,102,0,115,100,96,106],
[98,109,104,109,96,0,106,103,95],
[106,118,109,116,111,105,0,111,120],
[121,101,104,101,115,108,100,0,113],
[97,97,105,104,105,116,91,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,100,96,91,99,94,116,108],
[98,0,94,104,102,114,108,112,111],
[111,117,0,103,101,108,120,104,117],
[115,107,108,0,109,100,103,108,115],
[120,109,110,102,0,102,100,118,130],
[112,97,103,111,109,0,113,120,113],
[117,103,91,108,111,98,0,107,108],
[95,99,107,103,93,91,104,0,116],
[103,100,94,96,81,98,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,116,114,97,92,125,126,131],
[85,0,98,84,74,81,100,86,103],
[95,113,0,103,86,92,116,89,115],
[97,127,108,0,104,110,127,113,109],
[114,137,125,107,0,113,147,123,102],
[119,130,119,101,98,0,136,134,136],
[86,111,95,84,64,75,0,72,109],
[85,125,122,98,88,77,139,0,124],
[80,108,96,102,109,75,102,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,113,108,108,100,106,107,110],
[111,0,107,106,102,106,105,99,107],
[98,104,0,115,94,93,102,104,101],
[103,105,96,0,98,89,103,90,100],
[103,109,117,113,0,103,109,107,120],
[111,105,118,122,108,0,113,107,113],
[105,106,109,108,102,98,0,96,108],
[104,112,107,121,104,104,115,0,107],
[101,104,110,111,91,98,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,95,95,98,98,95,103],
[104,0,100,96,93,93,102,94,100],
[99,111,0,93,101,95,93,98,94],
[116,115,118,0,111,115,108,109,103],
[116,118,110,100,0,107,112,98,107],
[113,118,116,96,104,0,112,110,108],
[113,109,118,103,99,99,0,100,102],
[116,117,113,102,113,101,111,0,106],
[108,111,117,108,104,103,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,108,108,107,93,96,89,114],
[121,0,119,103,116,121,114,101,106],
[103,92,0,107,108,100,95,90,99],
[103,108,104,0,108,95,106,98,99],
[104,95,103,103,0,102,104,111,106],
[118,90,111,116,109,0,101,102,105],
[115,97,116,105,107,110,0,104,115],
[122,110,121,113,100,109,107,0,96],
[97,105,112,112,105,106,96,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,121,112,123,133,149,133,105],
[101,0,94,106,98,94,98,109,103],
[90,117,0,81,117,116,120,118,107],
[99,105,130,0,110,103,126,119,126],
[88,113,94,101,0,111,120,103,99],
[78,117,95,108,100,0,106,118,99],
[62,113,91,85,91,105,0,101,94],
[78,102,93,92,108,93,110,0,82],
[106,108,104,85,112,112,117,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,92,107,106,121,100,108,102],
[98,0,101,97,89,80,117,96,95],
[119,110,0,102,112,105,108,107,111],
[104,114,109,0,103,122,114,114,109],
[105,122,99,108,0,112,119,117,119],
[90,131,106,89,99,0,118,117,114],
[111,94,103,97,92,93,0,81,108],
[103,115,104,97,94,94,130,0,112],
[109,116,100,102,92,97,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,102,87,108,108,113,101,113],
[76,0,90,83,112,84,100,118,66],
[109,121,0,86,111,136,102,94,89],
[124,128,125,0,115,116,99,110,101],
[103,99,100,96,0,112,87,87,106],
[103,127,75,95,99,0,93,95,73],
[98,111,109,112,124,118,0,91,100],
[110,93,117,101,124,116,120,0,105],
[98,145,122,110,105,138,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,86,79,88,103,102,95,88],
[115,0,106,129,122,103,103,93,121],
[125,105,0,114,124,112,112,105,152],
[132,82,97,0,114,118,112,106,124],
[123,89,87,97,0,119,92,110,138],
[108,108,99,93,92,0,104,121,134],
[109,108,99,99,119,107,0,92,135],
[116,118,106,105,101,90,119,0,116],
[123,90,59,87,73,77,76,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,87,123,139,69,70,88,105],
[87,0,139,124,103,69,88,70,71],
[124,72,0,88,85,88,89,53,72],
[88,87,123,0,87,68,86,88,104],
[72,108,126,124,0,69,89,73,107],
[142,142,123,143,142,0,123,123,91],
[141,123,122,125,122,88,0,105,90],
[123,141,158,123,138,88,106,0,71],
[106,140,139,107,104,120,121,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,96,97,98,90,99,97,91],
[116,0,100,108,103,104,106,97,97],
[115,111,0,110,121,115,110,106,102],
[114,103,101,0,106,103,101,87,88],
[113,108,90,105,0,107,104,96,98],
[121,107,96,108,104,0,119,103,92],
[112,105,101,110,107,92,0,101,96],
[114,114,105,124,115,108,110,0,107],
[120,114,109,123,113,119,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,98,110,105,104,111,106,96],
[98,0,112,112,118,110,111,114,103],
[113,99,0,100,99,105,106,101,98],
[101,99,111,0,110,103,103,106,103],
[106,93,112,101,0,116,107,102,105],
[107,101,106,108,95,0,100,96,95],
[100,100,105,108,104,111,0,106,100],
[105,97,110,105,109,115,105,0,110],
[115,108,113,108,106,116,111,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,100,120,91,69,112,83,86],
[126,0,124,125,112,126,145,78,97],
[111,87,0,98,91,84,137,94,95],
[91,86,113,0,100,87,141,92,99],
[120,99,120,111,0,117,132,86,106],
[142,85,127,124,94,0,128,95,100],
[99,66,74,70,79,83,0,77,62],
[128,133,117,119,125,116,134,0,100],
[125,114,116,112,105,111,149,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,96,99,97,103,96,105,93],
[117,0,108,97,102,111,117,109,107],
[115,103,0,107,114,110,110,116,103],
[112,114,104,0,117,118,113,112,105],
[114,109,97,94,0,117,107,98,108],
[108,100,101,93,94,0,105,104,103],
[115,94,101,98,104,106,0,111,98],
[106,102,95,99,113,107,100,0,103],
[118,104,108,106,103,108,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,108,100,100,111,99,119,105],
[96,0,105,89,93,91,91,108,103],
[103,106,0,114,85,105,103,101,106],
[111,122,97,0,96,105,105,115,123],
[111,118,126,115,0,112,112,105,116],
[100,120,106,106,99,0,107,109,116],
[112,120,108,106,99,104,0,112,115],
[92,103,110,96,106,102,99,0,96],
[106,108,105,88,95,95,96,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,91,98,123,112,95,97],
[105,0,110,108,110,124,119,115,108],
[101,101,0,89,93,114,94,92,93],
[120,103,122,0,108,128,112,116,111],
[113,101,118,103,0,104,110,92,100],
[88,87,97,83,107,0,107,96,98],
[99,92,117,99,101,104,0,88,99],
[116,96,119,95,119,115,123,0,114],
[114,103,118,100,111,113,112,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,83,89,112,110,101,102,105],
[89,0,107,117,140,137,108,140,131],
[128,104,0,119,150,129,122,142,124],
[122,94,92,0,113,111,102,122,116],
[99,71,61,98,0,70,71,100,96],
[101,74,82,100,141,0,90,130,126],
[110,103,89,109,140,121,0,119,155],
[109,71,69,89,111,81,92,0,95],
[106,80,87,95,115,85,56,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,123,107,134,106,116,118,103],
[97,0,110,87,109,106,92,93,96],
[88,101,0,113,121,112,128,120,109],
[104,124,98,0,106,107,94,118,92],
[77,102,90,105,0,92,102,110,89],
[105,105,99,104,119,0,102,101,110],
[95,119,83,117,109,109,0,121,100],
[93,118,91,93,101,110,90,0,91],
[108,115,102,119,122,101,111,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,94,97,103,99,101,104],
[108,0,104,109,101,104,100,98,102],
[107,107,0,98,104,99,85,92,102],
[117,102,113,0,99,103,111,108,107],
[114,110,107,112,0,108,118,103,105],
[108,107,112,108,103,0,101,103,107],
[112,111,126,100,93,110,0,99,116],
[110,113,119,103,108,108,112,0,102],
[107,109,109,104,106,104,95,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,97,117,103,101,107,101],
[101,0,88,86,105,102,103,102,94],
[105,123,0,101,121,116,109,117,100],
[114,125,110,0,125,113,119,122,102],
[94,106,90,86,0,107,103,102,100],
[108,109,95,98,104,0,110,102,106],
[110,108,102,92,108,101,0,98,103],
[104,109,94,89,109,109,113,0,106],
[110,117,111,109,111,105,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,107,100,105,108,115,94,121],
[93,0,102,104,99,116,87,86,108],
[104,109,0,96,88,101,107,102,107],
[111,107,115,0,99,104,105,111,112],
[106,112,123,112,0,126,102,97,124],
[103,95,110,107,85,0,106,91,112],
[96,124,104,106,109,105,0,98,115],
[117,125,109,100,114,120,113,0,121],
[90,103,104,99,87,99,96,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,101,97,96,95,105,93],
[101,0,118,105,92,107,102,102,106],
[98,93,0,94,94,100,93,90,90],
[110,106,117,0,92,103,101,94,109],
[114,119,117,119,0,112,95,107,92],
[115,104,111,108,99,0,90,94,96],
[116,109,118,110,116,121,0,102,97],
[106,109,121,117,104,117,109,0,105],
[118,105,121,102,119,115,114,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,103,97,104,106,78,104,90],
[119,0,106,115,109,113,100,112,105],
[108,105,0,112,102,107,96,111,100],
[114,96,99,0,107,108,102,105,109],
[107,102,109,104,0,115,96,104,107],
[105,98,104,103,96,0,86,100,82],
[133,111,115,109,115,125,0,103,125],
[107,99,100,106,107,111,108,0,98],
[121,106,111,102,104,129,86,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,98,112,110,113,115,116,104],
[91,0,107,96,84,101,102,109,103],
[113,104,0,116,98,96,101,102,104],
[99,115,95,0,106,102,97,104,103],
[101,127,113,105,0,119,116,125,116],
[98,110,115,109,92,0,93,120,99],
[96,109,110,114,95,118,0,107,99],
[95,102,109,107,86,91,104,0,98],
[107,108,107,108,95,112,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,103,114,101,94,109,106],
[101,0,85,99,99,114,101,108,108],
[111,126,0,115,121,113,103,111,113],
[108,112,96,0,115,110,106,107,105],
[97,112,90,96,0,107,95,98,101],
[110,97,98,101,104,0,107,102,108],
[117,110,108,105,116,104,0,110,107],
[102,103,100,104,113,109,101,0,116],
[105,103,98,106,110,103,104,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,117,110,102,102,114,109],
[106,0,111,106,102,106,107,110,107],
[105,100,0,119,102,107,105,105,106],
[94,105,92,0,105,99,102,101,110],
[101,109,109,106,0,96,100,113,98],
[109,105,104,112,115,0,110,106,118],
[109,104,106,109,111,101,0,113,119],
[97,101,106,110,98,105,98,0,102],
[102,104,105,101,113,93,92,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,117,100,109,97,106,116,105],
[112,0,115,114,117,101,105,111,109],
[94,96,0,86,105,96,91,105,102],
[111,97,125,0,116,102,101,115,117],
[102,94,106,95,0,99,94,108,115],
[114,110,115,109,112,0,97,118,116],
[105,106,120,110,117,114,0,121,113],
[95,100,106,96,103,93,90,0,105],
[106,102,109,94,96,95,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,107,108,100,108,103,108],
[111,0,114,113,118,107,103,107,115],
[107,97,0,110,113,111,102,104,107],
[104,98,101,0,103,104,98,104,109],
[103,93,98,108,0,100,111,107,110],
[111,104,100,107,111,0,106,107,113],
[103,108,109,113,100,105,0,103,106],
[108,104,107,107,104,104,108,0,104],
[103,96,104,102,101,98,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,112,119,115,97,119,102],
[103,0,88,101,96,100,88,108,86],
[99,123,0,106,111,115,120,116,112],
[99,110,105,0,103,103,96,112,107],
[92,115,100,108,0,99,108,110,114],
[96,111,96,108,112,0,99,111,91],
[114,123,91,115,103,112,0,112,110],
[92,103,95,99,101,100,99,0,102],
[109,125,99,104,97,120,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,67,91,56,44,91,68,44],
[132,0,110,79,87,77,135,101,87],
[144,101,0,91,90,89,102,91,99],
[120,132,120,0,88,66,89,121,84],
[155,124,121,123,0,111,124,134,85],
[167,134,122,145,100,0,135,156,109],
[120,76,109,122,87,76,0,121,98],
[143,110,120,90,77,55,90,0,85],
[167,124,112,127,126,102,113,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,104,93,124,125,112,105,86],
[94,0,85,105,102,104,100,82,75],
[107,126,0,128,125,130,130,102,100],
[118,106,83,0,115,106,94,91,94],
[87,109,86,96,0,99,96,79,75],
[86,107,81,105,112,0,107,106,101],
[99,111,81,117,115,104,0,82,106],
[106,129,109,120,132,105,129,0,107],
[125,136,111,117,136,110,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,108,109,94,114,100,120,123],
[96,0,117,95,112,116,107,116,108],
[103,94,0,106,82,108,94,103,115],
[102,116,105,0,101,106,104,112,102],
[117,99,129,110,0,109,100,106,115],
[97,95,103,105,102,0,79,120,107],
[111,104,117,107,111,132,0,103,113],
[91,95,108,99,105,91,108,0,108],
[88,103,96,109,96,104,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,118,141,114,107,108,101,100],
[95,0,98,114,112,83,108,80,95],
[93,113,0,80,115,89,110,93,83],
[70,97,131,0,108,88,96,104,76],
[97,99,96,103,0,85,83,101,87],
[104,128,122,123,126,0,113,109,101],
[103,103,101,115,128,98,0,104,115],
[110,131,118,107,110,102,107,0,107],
[111,116,128,135,124,110,96,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,99,113,104,125,117,125],
[97,0,97,102,101,108,100,101,115],
[101,114,0,104,118,124,108,105,119],
[112,109,107,0,114,114,117,101,120],
[98,110,93,97,0,104,104,102,127],
[107,103,87,97,107,0,107,93,104],
[86,111,103,94,107,104,0,108,106],
[94,110,106,110,109,118,103,0,114],
[86,96,92,91,84,107,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,124,101,100,116,118,116],
[102,0,125,115,110,115,128,117,117],
[100,86,0,100,102,103,119,108,100],
[87,96,111,0,104,102,117,101,98],
[110,101,109,107,0,111,122,115,103],
[111,96,108,109,100,0,126,117,108],
[95,83,92,94,89,85,0,91,86],
[93,94,103,110,96,94,120,0,102],
[95,94,111,113,108,103,125,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,103,126,114,121,100,122,134],
[92,0,99,91,93,110,100,95,100],
[108,112,0,129,106,128,93,119,134],
[85,120,82,0,88,103,100,109,116],
[97,118,105,123,0,112,107,114,118],
[90,101,83,108,99,0,88,118,114],
[111,111,118,111,104,123,0,110,116],
[89,116,92,102,97,93,101,0,117],
[77,111,77,95,93,97,95,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,111,124,112,102,122,121],
[98,0,119,108,103,101,107,120,116],
[101,92,0,98,109,96,107,126,96],
[100,103,113,0,121,101,106,116,116],
[87,108,102,90,0,97,96,107,98],
[99,110,115,110,114,0,112,111,118],
[109,104,104,105,115,99,0,117,103],
[89,91,85,95,104,100,94,0,92],
[90,95,115,95,113,93,108,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,99,110,95,101,103,86,107],
[93,0,82,95,77,95,79,75,95],
[112,129,0,120,95,115,99,106,114],
[101,116,91,0,92,108,66,72,100],
[116,134,116,119,0,114,97,98,105],
[110,116,96,103,97,0,82,94,108],
[108,132,112,145,114,129,0,100,122],
[125,136,105,139,113,117,111,0,129],
[104,116,97,111,106,103,89,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,118,111,121,118,122,95,104],
[92,0,96,98,104,99,96,88,86],
[93,115,0,104,119,100,110,101,103],
[100,113,107,0,104,112,112,101,97],
[90,107,92,107,0,91,107,107,97],
[93,112,111,99,120,0,116,96,87],
[89,115,101,99,104,95,0,87,94],
[116,123,110,110,104,115,124,0,109],
[107,125,108,114,114,124,117,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,101,93,109,99,100,95,103],
[118,0,105,110,122,105,119,103,108],
[110,106,0,113,113,106,110,91,106],
[118,101,98,0,119,98,106,103,111],
[102,89,98,92,0,97,111,84,101],
[112,106,105,113,114,0,114,114,110],
[111,92,101,105,100,97,0,101,100],
[116,108,120,108,127,97,110,0,108],
[108,103,105,100,110,101,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,37,0,35,37,35,37,69,0],
[174,0,104,174,103,69,104,139,140],
[211,107,0,176,105,106,37,176,107],
[176,37,35,0,72,35,72,106,72],
[174,108,106,139,0,35,107,140,106],
[176,142,105,176,176,0,106,176,142],
[174,107,174,139,104,105,0,139,70],
[142,72,35,105,71,35,72,0,108],
[211,71,104,139,105,69,141,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,49,64,49,65,49,51,81],
[132,0,101,99,100,115,99,99,132],
[162,110,0,145,98,131,114,131,145],
[147,112,66,0,100,83,82,100,130],
[162,111,113,111,0,81,97,129,129],
[146,96,80,128,130,0,112,146,113],
[162,112,97,129,114,99,0,130,130],
[160,112,80,111,82,65,81,0,129],
[130,79,66,81,82,98,81,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,119,95,93,124,109,102,110],
[97,0,101,89,93,106,108,100,103],
[92,110,0,109,103,116,94,106,95],
[116,122,102,0,112,125,117,126,121],
[118,118,108,99,0,125,110,105,105],
[87,105,95,86,86,0,95,96,102],
[102,103,117,94,101,116,0,107,105],
[109,111,105,85,106,115,104,0,117],
[101,108,116,90,106,109,106,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,90,79,107,126,91,105,102],
[131,0,113,117,105,106,109,124,62],
[121,98,0,88,133,134,117,131,106],
[132,94,123,0,108,111,109,133,93],
[104,106,78,103,0,109,121,133,100],
[85,105,77,100,102,0,101,86,77],
[120,102,94,102,90,110,0,142,110],
[106,87,80,78,78,125,69,0,74],
[109,149,105,118,111,134,101,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,96,77,75,98,84,118,77],
[128,0,86,91,97,107,115,93,106],
[115,125,0,111,106,107,133,108,105],
[134,120,100,0,97,108,99,105,99],
[136,114,105,114,0,91,122,88,80],
[113,104,104,103,120,0,117,124,107],
[127,96,78,112,89,94,0,107,66],
[93,118,103,106,123,87,104,0,85],
[134,105,106,112,131,104,145,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,106,114,92,103,98,92],
[112,0,122,117,114,106,114,110,95],
[110,89,0,97,111,108,105,102,99],
[105,94,114,0,107,98,108,105,108],
[97,97,100,104,0,89,91,83,93],
[119,105,103,113,122,0,116,121,107],
[108,97,106,103,120,95,0,100,105],
[113,101,109,106,128,90,111,0,92],
[119,116,112,103,118,104,106,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,102,99,95,107,108,105],
[108,0,108,112,110,100,119,115,103],
[101,103,0,107,95,101,110,97,86],
[109,99,104,0,111,90,114,121,99],
[112,101,116,100,0,110,123,98,108],
[116,111,110,121,101,0,123,111,101],
[104,92,101,97,88,88,0,95,84],
[103,96,114,90,113,100,116,0,106],
[106,108,125,112,103,110,127,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,111,109,105,96,118,111],
[99,0,104,110,108,107,101,118,102],
[102,107,0,101,98,106,85,98,97],
[100,101,110,0,102,107,94,109,92],
[102,103,113,109,0,116,98,112,98],
[106,104,105,104,95,0,84,118,98],
[115,110,126,117,113,127,0,118,98],
[93,93,113,102,99,93,93,0,91],
[100,109,114,119,113,113,113,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,112,114,101,112,113,106,107],
[111,0,104,105,98,101,100,109,95],
[99,107,0,95,90,96,98,101,91],
[97,106,116,0,101,103,101,105,104],
[110,113,121,110,0,108,99,113,100],
[99,110,115,108,103,0,101,100,100],
[98,111,113,110,112,110,0,108,96],
[105,102,110,106,98,111,103,0,107],
[104,116,120,107,111,111,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,96,102,86,106,89,98],
[115,0,106,99,111,111,108,115,102],
[111,105,0,112,120,109,109,123,112],
[115,112,99,0,124,108,97,101,101],
[109,100,91,87,0,102,116,107,109],
[125,100,102,103,109,0,113,107,95],
[105,103,102,114,95,98,0,108,93],
[122,96,88,110,104,104,103,0,104],
[113,109,99,110,102,116,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,83,107,84,59,115,76,70],
[104,0,82,97,72,81,108,87,62],
[128,129,0,146,126,113,137,117,104],
[104,114,65,0,92,71,137,76,95],
[127,139,85,119,0,73,117,119,118],
[152,130,98,140,138,0,139,110,130],
[96,103,74,74,94,72,0,74,92],
[135,124,94,135,92,101,137,0,144],
[141,149,107,116,93,81,119,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,116,136,110,109,106,132,96],
[86,0,114,109,114,116,102,113,95],
[95,97,0,113,104,101,92,110,75],
[75,102,98,0,100,89,84,95,105],
[101,97,107,111,0,122,107,126,108],
[102,95,110,122,89,0,91,112,88],
[105,109,119,127,104,120,0,123,113],
[79,98,101,116,85,99,88,0,97],
[115,116,136,106,103,123,98,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,125,102,115,115,111,102,118],
[97,0,92,100,95,90,108,103,109],
[86,119,0,107,108,114,113,109,109],
[109,111,104,0,106,103,116,102,99],
[96,116,103,105,0,115,109,88,122],
[96,121,97,108,96,0,117,89,109],
[100,103,98,95,102,94,0,92,100],
[109,108,102,109,123,122,119,0,133],
[93,102,102,112,89,102,111,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,87,108,93,119,80,91],
[108,0,89,90,117,122,121,119,121],
[100,122,0,120,78,113,111,110,119],
[124,121,91,0,121,111,122,89,112],
[103,94,133,90,0,106,104,62,110],
[118,89,98,100,105,0,86,86,107],
[92,90,100,89,107,125,0,99,79],
[131,92,101,122,149,125,112,0,121],
[120,90,92,99,101,104,132,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,107,99,98,105,95,91],
[113,0,119,114,107,105,115,113,111],
[107,92,0,105,99,87,106,91,93],
[104,97,106,0,93,94,98,101,99],
[112,104,112,118,0,111,113,102,99],
[113,106,124,117,100,0,117,105,105],
[106,96,105,113,98,94,0,100,105],
[116,98,120,110,109,106,111,0,114],
[120,100,118,112,112,106,106,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,152,110,124,69,111,110,96],
[101,0,111,109,136,129,94,110,111],
[59,100,0,95,99,71,70,127,114],
[101,102,116,0,116,90,70,113,116],
[87,75,112,95,0,85,82,83,87],
[142,82,140,121,126,0,110,137,127],
[100,117,141,141,129,101,0,144,131],
[101,101,84,98,128,74,67,0,87],
[115,100,97,95,124,84,80,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,103,97,108,111,105,102],
[106,0,100,111,98,125,116,119,104],
[110,111,0,101,100,94,127,111,123],
[108,100,110,0,96,128,118,99,107],
[114,113,111,115,0,112,120,103,111],
[103,86,117,83,99,0,108,93,89],
[100,95,84,93,91,103,0,97,105],
[106,92,100,112,108,118,114,0,108],
[109,107,88,104,100,122,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,115,120,120,114,131,108,114],
[108,0,105,101,116,92,116,96,113],
[96,106,0,102,118,98,101,109,112],
[91,110,109,0,112,104,110,110,97],
[91,95,93,99,0,98,101,101,100],
[97,119,113,107,113,0,108,116,113],
[80,95,110,101,110,103,0,101,106],
[103,115,102,101,110,95,110,0,101],
[97,98,99,114,111,98,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,94,105,110,91,110,90,98],
[121,0,105,109,115,99,128,106,117],
[117,106,0,107,122,98,112,110,115],
[106,102,104,0,110,96,112,108,88],
[101,96,89,101,0,84,95,99,84],
[120,112,113,115,127,0,120,109,104],
[101,83,99,99,116,91,0,98,104],
[121,105,101,103,112,102,113,0,115],
[113,94,96,123,127,107,107,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,100,98,113,100,97,110],
[108,0,105,104,101,121,115,109,116],
[108,106,0,92,100,110,101,94,110],
[111,107,119,0,96,113,105,99,119],
[113,110,111,115,0,126,112,100,120],
[98,90,101,98,85,0,99,99,111],
[111,96,110,106,99,112,0,105,116],
[114,102,117,112,111,112,106,0,110],
[101,95,101,92,91,100,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,108,119,110,111,99,122],
[103,0,106,107,107,89,98,107,114],
[102,105,0,101,112,91,115,98,107],
[103,104,110,0,108,105,102,105,118],
[92,104,99,103,0,94,96,103,115],
[101,122,120,106,117,0,116,109,123],
[100,113,96,109,115,95,0,107,117],
[112,104,113,106,108,102,104,0,113],
[89,97,104,93,96,88,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,99,95,114,116,108,102,103],
[119,0,111,100,105,110,114,108,102],
[112,100,0,95,98,87,95,96,106],
[116,111,116,0,104,109,117,98,128],
[97,106,113,107,0,122,125,107,116],
[95,101,124,102,89,0,103,107,92],
[103,97,116,94,86,108,0,102,90],
[109,103,115,113,104,104,109,0,110],
[108,109,105,83,95,119,121,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,93,101,99,128,98,107,128],
[97,0,101,103,112,116,111,104,125],
[118,110,0,110,100,122,117,101,120],
[110,108,101,0,110,108,99,97,109],
[112,99,111,101,0,109,109,100,119],
[83,95,89,103,102,0,95,90,96],
[113,100,94,112,102,116,0,94,98],
[104,107,110,114,111,121,117,0,132],
[83,86,91,102,92,115,113,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,110,117,101,110,108,104],
[97,0,95,104,97,99,103,102,97],
[104,116,0,108,108,109,110,107,106],
[101,107,103,0,112,112,103,103,105],
[94,114,103,99,0,105,101,99,102],
[110,112,102,99,106,0,110,108,96],
[101,108,101,108,110,101,0,99,96],
[103,109,104,108,112,103,112,0,106],
[107,114,105,106,109,115,115,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,102,122,109,120,115,107,119],
[93,0,102,122,102,107,93,102,119],
[109,109,0,116,106,106,105,101,123],
[89,89,95,0,93,102,114,88,111],
[102,109,105,118,0,110,108,97,106],
[91,104,105,109,101,0,110,97,122],
[96,118,106,97,103,101,0,99,98],
[104,109,110,123,114,114,112,0,107],
[92,92,88,100,105,89,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,111,108,115,110,105,106],
[101,0,111,107,89,108,111,101,102],
[109,100,0,116,101,110,113,100,107],
[100,104,95,0,99,110,108,116,105],
[103,122,110,112,0,116,118,123,111],
[96,103,101,101,95,0,102,113,93],
[101,100,98,103,93,109,0,102,100],
[106,110,111,95,88,98,109,0,103],
[105,109,104,106,100,118,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,116,113,112,103,99,120,113],
[94,0,97,114,101,113,99,123,100],
[95,114,0,105,89,107,90,120,91],
[98,97,106,0,92,102,107,98,91],
[99,110,122,119,0,115,107,127,110],
[108,98,104,109,96,0,101,115,89],
[112,112,121,104,104,110,0,119,117],
[91,88,91,113,84,96,92,0,94],
[98,111,120,120,101,122,94,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,90,104,109,109,122,106,97],
[112,0,105,113,119,105,118,119,111],
[121,106,0,106,109,94,105,104,105],
[107,98,105,0,101,104,113,113,105],
[102,92,102,110,0,99,95,101,109],
[102,106,117,107,112,0,105,98,102],
[89,93,106,98,116,106,0,87,97],
[105,92,107,98,110,113,124,0,105],
[114,100,106,106,102,109,114,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,109,107,114,102,96,93],
[105,0,108,106,105,106,107,106,98],
[99,103,0,102,115,128,111,102,108],
[102,105,109,0,110,113,103,102,96],
[104,106,96,101,0,119,91,99,91],
[97,105,83,98,92,0,90,93,99],
[109,104,100,108,120,121,0,101,99],
[115,105,109,109,112,118,110,0,109],
[118,113,103,115,120,112,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,105,96,106,97,95,98,93],
[121,0,107,115,110,102,110,104,118],
[106,104,0,108,107,108,103,106,119],
[115,96,103,0,114,107,97,102,103],
[105,101,104,97,0,97,97,91,103],
[114,109,103,104,114,0,107,108,113],
[116,101,108,114,114,104,0,109,106],
[113,107,105,109,120,103,102,0,111],
[118,93,92,108,108,98,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,97,99,113,85,112,98],
[108,0,94,88,91,103,95,96,74],
[99,117,0,100,97,103,109,85,104],
[114,123,111,0,109,118,113,113,98],
[112,120,114,102,0,111,99,105,107],
[98,108,108,93,100,0,104,93,76],
[126,116,102,98,112,107,0,112,102],
[99,115,126,98,106,118,99,0,83],
[113,137,107,113,104,135,109,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,117,117,126,107,127,107,137],
[113,0,126,125,121,95,96,85,124],
[94,85,0,115,112,85,107,65,125],
[94,86,96,0,104,105,68,105,96],
[85,90,99,107,0,95,89,116,101],
[104,116,126,106,116,0,87,124,125],
[84,115,104,143,122,124,0,113,96],
[104,126,146,106,95,87,98,0,117],
[74,87,86,115,110,86,115,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,118,95,111,96,95,105,110],
[114,0,115,105,108,109,111,98,107],
[93,96,0,87,101,93,88,83,101],
[116,106,124,0,111,95,111,113,108],
[100,103,110,100,0,92,84,102,102],
[115,102,118,116,119,0,103,114,109],
[116,100,123,100,127,108,0,122,105],
[106,113,128,98,109,97,89,0,107],
[101,104,110,103,109,102,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,141,112,104,112,118,120,116],
[94,0,126,116,101,106,102,96,96],
[70,85,0,96,93,88,94,78,82],
[99,95,115,0,105,105,109,100,105],
[107,110,118,106,0,112,108,96,108],
[99,105,123,106,99,0,124,103,109],
[93,109,117,102,103,87,0,109,107],
[91,115,133,111,115,108,102,0,108],
[95,115,129,106,103,102,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,105,115,120,121,114,113],
[104,0,114,93,100,104,115,102,116],
[98,97,0,96,100,106,116,95,110],
[106,118,115,0,104,118,117,107,120],
[96,111,111,107,0,113,107,104,117],
[91,107,105,93,98,0,102,100,103],
[90,96,95,94,104,109,0,99,110],
[97,109,116,104,107,111,112,0,123],
[98,95,101,91,94,108,101,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,86,100,84,93,119,93,124],
[62,0,80,54,79,64,109,62,102],
[125,131,0,115,108,86,131,100,109],
[111,157,96,0,118,104,142,111,151],
[127,132,103,93,0,112,132,109,124],
[118,147,125,107,99,0,147,109,116],
[92,102,80,69,79,64,0,98,95],
[118,149,111,100,102,102,113,0,108],
[87,109,102,60,87,95,116,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,93,69,77,64,83,84,72],
[137,0,119,104,113,107,117,121,96],
[118,92,0,91,82,94,93,95,86],
[142,107,120,0,86,114,129,116,106],
[134,98,129,125,0,94,104,103,106],
[147,104,117,97,117,0,96,89,92],
[128,94,118,82,107,115,0,91,105],
[127,90,116,95,108,122,120,0,106],
[139,115,125,105,105,119,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,70,47,70,68,71,70,92],
[93,0,117,95,95,93,93,93,93],
[141,94,0,117,142,93,70,93,93],
[164,116,94,0,139,139,116,93,118],
[141,116,69,72,0,91,116,68,116],
[143,118,118,72,120,0,71,95,165],
[140,118,141,95,95,140,0,140,140],
[141,118,118,118,143,116,71,0,140],
[119,118,118,93,95,46,71,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,101,118,121,107,103,106],
[102,0,112,92,96,106,95,92,94],
[105,99,0,106,103,115,98,98,108],
[110,119,105,0,105,114,107,108,102],
[93,115,108,106,0,121,107,106,104],
[90,105,96,97,90,0,86,98,104],
[104,116,113,104,104,125,0,108,105],
[108,119,113,103,105,113,103,0,110],
[105,117,103,109,107,107,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,90,102,110,96,107,109],
[104,0,100,100,104,108,102,106,112],
[102,111,0,104,112,114,107,110,112],
[121,111,107,0,111,103,111,116,114],
[109,107,99,100,0,104,92,95,105],
[101,103,97,108,107,0,97,110,108],
[115,109,104,100,119,114,0,104,109],
[104,105,101,95,116,101,107,0,104],
[102,99,99,97,106,103,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,127,121,121,138,141,121],
[111,0,98,125,121,122,131,110,106],
[105,113,0,121,134,116,134,100,118],
[84,86,90,0,116,97,116,83,104],
[90,90,77,95,0,110,123,108,101],
[90,89,95,114,101,0,140,103,108],
[73,80,77,95,88,71,0,100,95],
[70,101,111,128,103,108,111,0,101],
[90,105,93,107,110,103,116,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,118,117,116,97,121,106,104],
[87,0,119,111,105,85,117,93,97],
[93,92,0,105,125,88,120,97,100],
[94,100,106,0,106,86,113,106,104],
[95,106,86,105,0,86,117,93,107],
[114,126,123,125,125,0,133,102,127],
[90,94,91,98,94,78,0,85,80],
[105,118,114,105,118,109,126,0,100],
[107,114,111,107,104,84,131,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,109,102,116,96,115,104],
[102,0,134,102,112,124,99,110,94],
[109,77,0,112,112,117,109,111,98],
[102,109,99,0,100,102,100,98,77],
[109,99,99,111,0,112,100,90,93],
[95,87,94,109,99,0,88,102,86],
[115,112,102,111,111,123,0,101,93],
[96,101,100,113,121,109,110,0,107],
[107,117,113,134,118,125,118,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,111,101,105,115,108,107],
[99,0,100,92,98,93,101,101,89],
[97,111,0,110,101,93,114,111,103],
[100,119,101,0,98,96,108,95,101],
[110,113,110,113,0,99,102,109,99],
[106,118,118,115,112,0,109,109,104],
[96,110,97,103,109,102,0,111,99],
[103,110,100,116,102,102,100,0,97],
[104,122,108,110,112,107,112,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,106,105,106,99,114,145,97],
[76,0,65,65,66,56,45,82,55],
[105,146,0,114,114,95,122,116,79],
[106,146,97,0,104,87,95,124,77],
[105,145,97,107,0,70,88,105,78],
[112,155,116,124,141,0,103,164,115],
[97,166,89,116,123,108,0,125,97],
[66,129,95,87,106,47,86,0,95],
[114,156,132,134,133,96,114,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,101,94,110,101,100,104],
[111,0,117,105,105,115,110,99,99],
[105,94,0,108,103,114,106,103,104],
[110,106,103,0,106,115,108,111,112],
[117,106,108,105,0,123,113,112,108],
[101,96,97,96,88,0,91,97,103],
[110,101,105,103,98,120,0,111,113],
[111,112,108,100,99,114,100,0,101],
[107,112,107,99,103,108,98,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,104,108,114,121,100,115],
[98,0,97,100,100,100,118,103,92],
[101,114,0,124,118,113,121,116,113],
[107,111,87,0,105,95,119,94,99],
[103,111,93,106,0,103,109,98,93],
[97,111,98,116,108,0,112,107,105],
[90,93,90,92,102,99,0,90,89],
[111,108,95,117,113,104,121,0,115],
[96,119,98,112,118,106,122,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,98,94,98,90,93,93,97],
[109,0,104,111,109,104,97,104,104],
[113,107,0,101,111,105,96,107,115],
[117,100,110,0,102,97,109,102,104],
[113,102,100,109,0,107,106,105,106],
[121,107,106,114,104,0,113,114,111],
[118,114,115,102,105,98,0,102,114],
[118,107,104,109,106,97,109,0,111],
[114,107,96,107,105,100,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,93,90,103,96,91,98],
[103,0,100,121,104,95,110,89,96],
[108,111,0,109,91,112,110,104,86],
[118,90,102,0,103,100,119,96,106],
[121,107,120,108,0,101,109,108,106],
[108,116,99,111,110,0,118,101,105],
[115,101,101,92,102,93,0,98,112],
[120,122,107,115,103,110,113,0,114],
[113,115,125,105,105,106,99,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,108,86,107,97,108,98],
[95,0,114,103,97,100,99,112,98],
[104,97,0,105,91,98,98,103,108],
[103,108,106,0,96,98,97,108,83],
[125,114,120,115,0,122,107,115,97],
[104,111,113,113,89,0,103,97,88],
[114,112,113,114,104,108,0,105,112],
[103,99,108,103,96,114,106,0,113],
[113,113,103,128,114,123,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,88,97,101,109,100,121,86],
[127,0,129,113,116,101,105,122,108],
[123,82,0,113,112,117,110,105,106],
[114,98,98,0,109,112,111,97,93],
[110,95,99,102,0,113,100,110,96],
[102,110,94,99,98,0,98,109,99],
[111,106,101,100,111,113,0,109,108],
[90,89,106,114,101,102,102,0,92],
[125,103,105,118,115,112,103,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,99,95,104,94,95,100,90],
[119,0,106,123,114,102,106,102,109],
[112,105,0,97,90,98,99,112,99],
[116,88,114,0,118,109,111,100,103],
[107,97,121,93,0,104,106,98,100],
[117,109,113,102,107,0,97,104,115],
[116,105,112,100,105,114,0,87,110],
[111,109,99,111,113,107,124,0,121],
[121,102,112,108,111,96,101,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,101,107,127,108,90,102,112],
[94,0,104,103,108,98,96,91,87],
[110,107,0,111,112,118,92,95,115],
[104,108,100,0,102,117,106,110,98],
[84,103,99,109,0,95,87,102,105],
[103,113,93,94,116,0,95,115,106],
[121,115,119,105,124,116,0,118,118],
[109,120,116,101,109,96,93,0,128],
[99,124,96,113,106,105,93,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,112,104,116,86,96,82],
[109,0,98,111,93,103,110,73,90],
[103,113,0,117,113,118,92,107,103],
[99,100,94,0,98,85,100,93,78],
[107,118,98,113,0,114,98,82,105],
[95,108,93,126,97,0,83,77,79],
[125,101,119,111,113,128,0,89,115],
[115,138,104,118,129,134,122,0,118],
[129,121,108,133,106,132,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,86,86,102,84,79,96,86],
[124,0,115,116,113,93,124,133,117],
[125,96,0,134,123,114,127,95,103],
[125,95,77,0,95,113,80,87,86],
[109,98,88,116,0,104,113,99,97],
[127,118,97,98,107,0,138,109,105],
[132,87,84,131,98,73,0,119,104],
[115,78,116,124,112,102,92,0,116],
[125,94,108,125,114,106,107,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,119,105,100,119,113,119,107],
[91,0,91,109,99,99,113,109,96],
[92,120,0,112,97,97,110,115,97],
[106,102,99,0,108,100,110,97,112],
[111,112,114,103,0,115,123,115,112],
[92,112,114,111,96,0,121,123,102],
[98,98,101,101,88,90,0,97,82],
[92,102,96,114,96,88,114,0,106],
[104,115,114,99,99,109,129,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,111,98,104,95,98,101],
[115,0,107,125,109,113,112,91,111],
[110,104,0,116,92,110,113,97,102],
[100,86,95,0,94,102,86,93,95],
[113,102,119,117,0,119,118,111,115],
[107,98,101,109,92,0,94,92,100],
[116,99,98,125,93,117,0,103,102],
[113,120,114,118,100,119,108,0,125],
[110,100,109,116,96,111,109,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,119,129,91,107,105,111,75],
[112,0,146,146,112,92,151,126,104],
[92,65,0,105,67,72,121,105,81],
[82,65,106,0,96,80,120,87,80],
[120,99,144,115,0,103,120,126,107],
[104,119,139,131,108,0,129,113,113],
[106,60,90,91,91,82,0,85,49],
[100,85,106,124,85,98,126,0,120],
[136,107,130,131,104,98,162,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,104,102,95,118,97,99,97],
[136,0,104,103,123,118,100,139,107],
[107,107,0,114,98,104,101,104,103],
[109,108,97,0,113,118,106,129,100],
[116,88,113,98,0,101,97,99,107],
[93,93,107,93,110,0,103,103,96],
[114,111,110,105,114,108,0,109,111],
[112,72,107,82,112,108,102,0,112],
[114,104,108,111,104,115,100,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,88,134,108,124,87,98,99],
[95,0,93,133,130,105,135,82,71],
[123,118,0,128,137,104,129,102,100],
[77,78,83,0,121,96,112,74,51],
[103,81,74,90,0,77,91,114,79],
[87,106,107,115,134,0,112,99,91],
[124,76,82,99,120,99,0,87,74],
[113,129,109,137,97,112,124,0,112],
[112,140,111,160,132,120,137,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,96,110,109,97,110,100],
[113,0,112,107,120,120,100,112,109],
[112,99,0,101,106,110,97,103,102],
[115,104,110,0,121,116,110,119,114],
[101,91,105,90,0,102,92,102,105],
[102,91,101,95,109,0,95,109,101],
[114,111,114,101,119,116,0,112,101],
[101,99,108,92,109,102,99,0,107],
[111,102,109,97,106,110,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,123,117,109,92,101,123,96],
[104,0,123,116,121,116,117,125,113],
[88,88,0,101,124,93,110,116,93],
[94,95,110,0,119,86,106,114,120],
[102,90,87,92,0,89,103,105,97],
[119,95,118,125,122,0,110,125,119],
[110,94,101,105,108,101,0,120,98],
[88,86,95,97,106,86,91,0,90],
[115,98,118,91,114,92,113,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,122,101,108,121,109,101,107],
[92,0,116,82,94,90,99,91,77],
[89,95,0,92,101,98,92,79,99],
[110,129,119,0,118,121,122,105,113],
[103,117,110,93,0,105,109,99,100],
[90,121,113,90,106,0,111,96,98],
[102,112,119,89,102,100,0,98,105],
[110,120,132,106,112,115,113,0,105],
[104,134,112,98,111,113,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,94,86,114,121,123,137,118],
[106,0,80,94,105,133,79,122,122],
[117,131,0,121,101,159,112,139,126],
[125,117,90,0,105,127,114,128,124],
[97,106,110,106,0,134,105,131,127],
[90,78,52,84,77,0,73,91,91],
[88,132,99,97,106,138,0,133,106],
[74,89,72,83,80,120,78,0,101],
[93,89,85,87,84,120,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,95,101,99,112,100,96],
[97,0,90,86,90,91,94,86,95],
[101,121,0,106,100,100,102,111,105],
[116,125,105,0,111,101,109,110,110],
[110,121,111,100,0,110,115,114,115],
[112,120,111,110,101,0,106,111,101],
[99,117,109,102,96,105,0,103,100],
[111,125,100,101,97,100,108,0,99],
[115,116,106,101,96,110,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,107,113,109,113,119,120,104],
[92,0,107,93,96,114,115,108,94],
[104,104,0,103,96,110,107,116,104],
[98,118,108,0,94,104,104,111,98],
[102,115,115,117,0,116,118,110,109],
[98,97,101,107,95,0,100,109,92],
[92,96,104,107,93,111,0,111,103],
[91,103,95,100,101,102,100,0,106],
[107,117,107,113,102,119,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,86,101,115,116,98,110,113],
[101,0,111,112,110,126,108,118,113],
[125,100,0,101,100,117,106,98,102],
[110,99,110,0,106,103,91,114,108],
[96,101,111,105,0,106,100,103,102],
[95,85,94,108,105,0,96,97,98],
[113,103,105,120,111,115,0,115,117],
[101,93,113,97,108,114,96,0,101],
[98,98,109,103,109,113,94,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,114,103,116,128,104,116,106],
[93,0,99,86,92,100,95,107,80],
[97,112,0,90,115,108,103,110,107],
[108,125,121,0,113,110,105,116,101],
[95,119,96,98,0,115,109,112,104],
[83,111,103,101,96,0,103,109,96],
[107,116,108,106,102,108,0,120,101],
[95,104,101,95,99,102,91,0,94],
[105,131,104,110,107,115,110,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,107,114,88,115,80,112],
[110,0,112,111,109,99,116,106,111],
[111,99,0,120,116,116,125,104,105],
[104,100,91,0,102,97,116,98,103],
[97,102,95,109,0,79,103,80,101],
[123,112,95,114,132,0,120,104,106],
[96,95,86,95,108,91,0,80,93],
[131,105,107,113,131,107,131,0,120],
[99,100,106,108,110,105,118,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,104,133,121,98,99,99],
[113,0,114,111,133,123,99,110,118],
[109,97,0,100,122,115,95,109,106],
[107,100,111,0,130,133,94,109,127],
[78,78,89,81,0,91,79,75,90],
[90,88,96,78,120,0,74,84,97],
[113,112,116,117,132,137,0,103,119],
[112,101,102,102,136,127,108,0,108],
[112,93,105,84,121,114,92,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,116,113,116,109,112,106],
[114,0,118,113,117,118,101,107,102],
[111,93,0,122,101,108,108,107,116],
[95,98,89,0,90,100,108,98,107],
[98,94,110,121,0,105,99,97,107],
[95,93,103,111,106,0,103,97,101],
[102,110,103,103,112,108,0,114,116],
[99,104,104,113,114,114,97,0,109],
[105,109,95,104,104,110,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,90,89,88,97,103,100,92],
[123,0,103,109,98,109,115,103,110],
[121,108,0,108,102,112,119,105,114],
[122,102,103,0,100,101,111,103,100],
[123,113,109,111,0,115,122,107,101],
[114,102,99,110,96,0,116,98,109],
[108,96,92,100,89,95,0,100,103],
[111,108,106,108,104,113,111,0,103],
[119,101,97,111,110,102,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,113,122,116,109,113,100],
[103,0,121,109,126,102,103,106,113],
[105,90,0,99,109,92,100,97,100],
[98,102,112,0,116,123,116,96,104],
[89,85,102,95,0,91,83,91,75],
[95,109,119,88,120,0,115,107,97],
[102,108,111,95,128,96,0,104,89],
[98,105,114,115,120,104,107,0,99],
[111,98,111,107,136,114,122,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,96,133,122,83,94,117,100],
[101,0,129,114,91,107,108,114,108],
[115,82,0,100,88,99,92,105,86],
[78,97,111,0,100,74,90,118,102],
[89,120,123,111,0,101,113,104,104],
[128,104,112,137,110,0,122,135,110],
[117,103,119,121,98,89,0,114,119],
[94,97,106,93,107,76,97,0,105],
[111,103,125,109,107,101,92,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,106,108,100,105,130,95,81],
[125,0,101,139,122,120,136,126,114],
[105,110,0,112,102,102,122,110,101],
[103,72,99,0,98,99,107,96,85],
[111,89,109,113,0,99,118,113,98],
[106,91,109,112,112,0,113,97,93],
[81,75,89,104,93,98,0,94,92],
[116,85,101,115,98,114,117,0,99],
[130,97,110,126,113,118,119,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,120,133,110,119,121,120,122],
[122,0,110,133,119,100,120,97,153],
[91,101,0,135,99,113,120,120,113],
[78,78,76,0,89,65,86,74,89],
[101,92,112,122,0,110,144,110,98],
[92,111,98,146,101,0,133,122,111],
[90,91,91,125,67,78,0,101,102],
[91,114,91,137,101,89,110,0,113],
[89,58,98,122,113,100,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,89,75,83,98,85,95,81],
[110,0,99,97,116,92,89,109,100],
[122,112,0,94,88,94,93,120,106],
[136,114,117,0,126,109,104,131,113],
[128,95,123,85,0,96,94,125,118],
[113,119,117,102,115,0,111,126,100],
[126,122,118,107,117,100,0,110,106],
[116,102,91,80,86,85,101,0,93],
[130,111,105,98,93,111,105,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,103,92,105,104,96,110],
[112,0,110,95,107,106,102,110,101],
[105,101,0,98,102,118,112,105,110],
[108,116,113,0,107,119,112,110,102],
[119,104,109,104,0,111,109,110,112],
[106,105,93,92,100,0,96,102,107],
[107,109,99,99,102,115,0,102,117],
[115,101,106,101,101,109,109,0,115],
[101,110,101,109,99,104,94,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,96,124,106,143,109,68],
[100,0,120,87,111,98,106,119,99],
[102,91,0,92,132,124,117,125,94],
[115,124,119,0,138,105,109,131,108],
[87,100,79,73,0,92,107,102,93],
[105,113,87,106,119,0,105,113,75],
[68,105,94,102,104,106,0,108,64],
[102,92,86,80,109,98,103,0,96],
[143,112,117,103,118,136,147,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,111,110,103,92,104,113],
[105,0,102,104,98,106,101,106,104],
[110,109,0,106,117,95,99,97,103],
[100,107,105,0,99,96,100,95,105],
[101,113,94,112,0,99,94,95,109],
[108,105,116,115,112,0,112,112,122],
[119,110,112,111,117,99,0,105,127],
[107,105,114,116,116,99,106,0,115],
[98,107,108,106,102,89,84,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,126,108,124,97,96,90,88],
[105,0,133,104,144,101,104,91,113],
[85,78,0,100,118,92,105,74,97],
[103,107,111,0,134,100,108,87,89],
[87,67,93,77,0,78,89,59,78],
[114,110,119,111,133,0,110,98,105],
[115,107,106,103,122,101,0,94,104],
[121,120,137,124,152,113,117,0,104],
[123,98,114,122,133,106,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,85,79,93,93,112,73,105],
[118,0,112,92,99,114,134,115,112],
[126,99,0,89,95,118,111,103,121],
[132,119,122,0,131,123,122,105,113],
[118,112,116,80,0,124,124,90,109],
[118,97,93,88,87,0,108,97,92],
[99,77,100,89,87,103,0,81,108],
[138,96,108,106,121,114,130,0,120],
[106,99,90,98,102,119,103,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,122,102,111,108,98,100],
[115,0,101,117,112,112,110,99,111],
[105,110,0,124,102,112,105,106,112],
[89,94,87,0,94,95,97,95,101],
[109,99,109,117,0,107,106,102,113],
[100,99,99,116,104,0,110,100,104],
[103,101,106,114,105,101,0,102,106],
[113,112,105,116,109,111,109,0,110],
[111,100,99,110,98,107,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,88,117,107,86,98,106],
[113,0,116,92,117,111,116,86,119],
[111,95,0,111,115,113,96,106,117],
[123,119,100,0,112,103,88,110,101],
[94,94,96,99,0,88,86,87,91],
[104,100,98,108,123,0,110,115,115],
[125,95,115,123,125,101,0,103,127],
[113,125,105,101,124,96,108,0,106],
[105,92,94,110,120,96,84,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,95,101,94,102,113,104,101],
[97,0,94,83,86,88,97,103,95],
[116,117,0,101,97,102,97,104,100],
[110,128,110,0,102,112,116,108,116],
[117,125,114,109,0,112,104,112,107],
[109,123,109,99,99,0,107,100,109],
[98,114,114,95,107,104,0,98,99],
[107,108,107,103,99,111,113,0,107],
[110,116,111,95,104,102,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,86,81,115,99,86,101,83],
[115,0,102,88,102,79,98,89,83],
[125,109,0,115,125,92,106,115,105],
[130,123,96,0,127,113,91,105,111],
[96,109,86,84,0,84,88,99,80],
[112,132,119,98,127,0,92,100,108],
[125,113,105,120,123,119,0,116,110],
[110,122,96,106,112,111,95,0,102],
[128,128,106,100,131,103,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,92,103,101,101,79,83,77],
[112,0,80,101,92,115,96,98,81],
[119,131,0,102,114,116,128,131,99],
[108,110,109,0,94,117,102,122,120],
[110,119,97,117,0,108,114,120,82],
[110,96,95,94,103,0,113,97,105],
[132,115,83,109,97,98,0,108,96],
[128,113,80,89,91,114,103,0,91],
[134,130,112,91,129,106,115,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,108,108,98,128,100,103],
[104,0,106,118,120,109,118,119,117],
[103,105,0,112,108,111,119,110,95],
[103,93,99,0,103,101,117,110,107],
[103,91,103,108,0,107,116,111,103],
[113,102,100,110,104,0,123,107,101],
[83,93,92,94,95,88,0,102,82],
[111,92,101,101,100,104,109,0,93],
[108,94,116,104,108,110,129,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,97,78,95,91,86,125,106],
[127,0,107,67,115,99,104,109,103],
[114,104,0,87,129,129,105,113,113],
[133,144,124,0,124,121,129,133,101],
[116,96,82,87,0,108,109,108,115],
[120,112,82,90,103,0,103,125,109],
[125,107,106,82,102,108,0,117,104],
[86,102,98,78,103,86,94,0,94],
[105,108,98,110,96,102,107,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,111,97,112,101,104,113,99],
[94,0,114,101,99,109,111,108,103],
[100,97,0,94,100,117,105,99,104],
[114,110,117,0,99,117,111,104,119],
[99,112,111,112,0,107,118,100,117],
[110,102,94,94,104,0,94,97,114],
[107,100,106,100,93,117,0,98,108],
[98,103,112,107,111,114,113,0,114],
[112,108,107,92,94,97,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,82,91,112,130,82,71,75],
[89,0,58,112,102,133,101,84,48],
[129,153,0,140,140,141,102,113,122],
[120,99,71,0,103,84,80,36,85],
[99,109,71,108,0,128,62,45,83],
[81,78,70,127,83,0,90,74,66],
[129,110,109,131,149,121,0,91,104],
[140,127,98,175,166,137,120,0,120],
[136,163,89,126,128,145,107,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,119,104,94,101,100,111,131],
[126,0,127,116,102,113,122,109,127],
[92,84,0,98,73,88,90,98,111],
[107,95,113,0,97,122,112,108,127],
[117,109,138,114,0,103,110,124,140],
[110,98,123,89,108,0,99,116,117],
[111,89,121,99,101,112,0,102,125],
[100,102,113,103,87,95,109,0,123],
[80,84,100,84,71,94,86,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,92,108,104,106,106,132,109],
[89,0,99,111,94,80,99,108,85],
[119,112,0,108,99,108,106,113,99],
[103,100,103,0,93,82,77,106,109],
[107,117,112,118,0,107,98,95,104],
[105,131,103,129,104,0,81,128,89],
[105,112,105,134,113,130,0,129,103],
[79,103,98,105,116,83,82,0,98],
[102,126,112,102,107,122,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,97,109,116,106,115,103],
[95,0,103,106,117,120,114,119,115],
[106,108,0,103,120,121,122,123,113],
[114,105,108,0,133,117,125,122,118],
[102,94,91,78,0,97,109,108,89],
[95,91,90,94,114,0,102,118,107],
[105,97,89,86,102,109,0,118,104],
[96,92,88,89,103,93,93,0,99],
[108,96,98,93,122,104,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,95,98,104,101,103,102],
[106,0,115,108,103,121,107,101,102],
[112,96,0,94,93,114,102,103,95],
[116,103,117,0,102,126,115,110,101],
[113,108,118,109,0,115,109,108,103],
[107,90,97,85,96,0,98,87,97],
[110,104,109,96,102,113,0,105,106],
[108,110,108,101,103,124,106,0,107],
[109,109,116,110,108,114,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,87,70,116,94,112,84,102],
[138,0,112,94,118,122,147,111,119],
[124,99,0,91,139,108,142,117,113],
[141,117,120,0,91,110,138,101,111],
[95,93,72,120,0,109,127,86,70],
[117,89,103,101,102,0,131,85,88],
[99,64,69,73,84,80,0,70,96],
[127,100,94,110,125,126,141,0,105],
[109,92,98,100,141,123,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,115,104,102,110,88,93],
[108,0,84,109,93,98,110,81,101],
[102,127,0,119,115,106,119,100,111],
[96,102,92,0,90,92,125,96,102],
[107,118,96,121,0,97,112,108,109],
[109,113,105,119,114,0,130,114,121],
[101,101,92,86,99,81,0,92,98],
[123,130,111,115,103,97,119,0,123],
[118,110,100,109,102,90,113,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,118,105,114,124,107,97,137],
[79,0,127,78,92,102,118,105,103],
[93,84,0,89,100,132,90,109,100],
[106,133,122,0,84,123,114,116,106],
[97,119,111,127,0,124,100,112,92],
[87,109,79,88,87,0,95,81,103],
[104,93,121,97,111,116,0,96,103],
[114,106,102,95,99,130,115,0,122],
[74,108,111,105,119,108,108,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,105,112,99,101,105,109],
[98,0,95,103,119,91,95,101,103],
[103,116,0,110,112,100,104,110,112],
[106,108,101,0,104,110,104,109,106],
[99,92,99,107,0,94,100,99,104],
[112,120,111,101,117,0,110,119,101],
[110,116,107,107,111,101,0,110,105],
[106,110,101,102,112,92,101,0,92],
[102,108,99,105,107,110,106,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,106,112,109,103,113,91],
[104,0,101,105,100,94,108,98,102],
[107,110,0,97,103,108,98,106,92],
[105,106,114,0,107,105,97,115,105],
[99,111,108,104,0,100,97,96,102],
[102,117,103,106,111,0,94,114,101],
[108,103,113,114,114,117,0,111,111],
[98,113,105,96,115,97,100,0,95],
[120,109,119,106,109,110,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,100,106,98,105,119,95],
[103,0,102,119,104,109,106,111,100],
[101,109,0,110,108,112,97,94,98],
[111,92,101,0,110,117,102,111,106],
[105,107,103,101,0,106,90,93,99],
[113,102,99,94,105,0,103,104,100],
[106,105,114,109,121,108,0,114,110],
[92,100,117,100,118,107,97,0,105],
[116,111,113,105,112,111,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,94,94,75,115,73,114,86],
[123,0,115,118,103,113,118,139,111],
[117,96,0,101,92,103,92,117,107],
[117,93,110,0,81,104,89,115,98],
[136,108,119,130,0,120,105,133,120],
[96,98,108,107,91,0,107,128,112],
[138,93,119,122,106,104,0,131,116],
[97,72,94,96,78,83,80,0,82],
[125,100,104,113,91,99,95,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,108,115,101,112,111,120],
[109,0,101,128,105,101,101,91,96],
[110,110,0,108,102,100,118,92,99],
[103,83,103,0,95,88,105,68,96],
[96,106,109,116,0,99,107,96,110],
[110,110,111,123,112,0,115,99,115],
[99,110,93,106,104,96,0,92,96],
[100,120,119,143,115,112,119,0,116],
[91,115,112,115,101,96,115,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,124,102,109,123,101,112,118],
[139,0,112,128,122,145,129,102,141],
[87,99,0,105,111,111,94,100,99],
[109,83,106,0,93,131,102,105,114],
[102,89,100,118,0,119,101,81,97],
[88,66,100,80,92,0,69,82,115],
[110,82,117,109,110,142,0,107,115],
[99,109,111,106,130,129,104,0,113],
[93,70,112,97,114,96,96,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,108,117,98,103,124,101],
[103,0,111,117,125,111,101,99,110],
[95,100,0,92,114,106,113,87,97],
[103,94,119,0,108,106,107,116,103],
[94,86,97,103,0,96,101,96,116],
[113,100,105,105,115,0,118,99,100],
[108,110,98,104,110,93,0,98,108],
[87,112,124,95,115,112,113,0,112],
[110,101,114,108,95,111,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,118,114,87,87,97,96],
[105,0,101,112,121,104,86,110,110],
[106,110,0,112,125,80,115,118,123],
[93,99,99,0,113,91,90,95,105],
[97,90,86,98,0,69,69,98,100],
[124,107,131,120,142,0,112,100,115],
[124,125,96,121,142,99,0,108,111],
[114,101,93,116,113,111,103,0,105],
[115,101,88,106,111,96,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,120,96,95,95,102,88,96],
[126,0,129,92,102,114,90,97,95],
[91,82,0,97,106,94,116,74,105],
[115,119,114,0,108,125,117,105,107],
[116,109,105,103,0,112,89,110,87],
[116,97,117,86,99,0,92,114,106],
[109,121,95,94,122,119,0,99,116],
[123,114,137,106,101,97,112,0,112],
[115,116,106,104,124,105,95,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,107,105,103,108,98,98],
[107,0,110,102,100,96,110,103,97],
[100,101,0,109,94,98,99,101,94],
[104,109,102,0,95,105,104,103,91],
[106,111,117,116,0,110,114,112,101],
[108,115,113,106,101,0,110,94,102],
[103,101,112,107,97,101,0,99,102],
[113,108,110,108,99,117,112,0,106],
[113,114,117,120,110,109,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,105,100,102,101,110,93],
[104,0,105,97,95,117,91,107,106],
[108,106,0,111,93,115,95,101,98],
[106,114,100,0,105,99,110,110,101],
[111,116,118,106,0,116,97,112,113],
[109,94,96,112,95,0,101,96,91],
[110,120,116,101,114,110,0,114,91],
[101,104,110,101,99,115,97,0,84],
[118,105,113,110,98,120,120,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,96,95,96,88,96,84,86],
[115,0,101,102,87,107,103,87,96],
[115,110,0,96,96,105,100,92,83],
[116,109,115,0,110,100,114,95,97],
[115,124,115,101,0,98,116,105,106],
[123,104,106,111,113,0,106,108,93],
[115,108,111,97,95,105,0,106,98],
[127,124,119,116,106,103,105,0,101],
[125,115,128,114,105,118,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 211, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_9_211.csv", index=False, header=False)
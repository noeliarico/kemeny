
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,534,460,486,487,439,501,466,454],
[357,0,408,451,403,378,406,419,400],
[431,483,0,498,477,450,475,479,439],
[405,440,393,0,399,433,392,447,420],
[404,488,414,492,0,415,438,400,463],
[452,513,441,458,476,0,440,459,442],
[390,485,416,499,453,451,0,438,490],
[425,472,412,444,491,432,453,0,436],
[437,491,452,471,428,449,401,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,454,471,480,449,455,428,430],
[470,0,446,481,452,455,423,452,445],
[437,445,0,464,439,415,430,427,413],
[420,410,427,0,438,436,421,422,410],
[411,439,452,453,0,469,429,436,420],
[442,436,476,455,422,0,404,445,418],
[436,468,461,470,462,487,0,437,452],
[463,439,464,469,455,446,454,0,433],
[461,446,478,481,471,473,439,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,451,451,446,447,453,452,434],
[430,0,429,429,439,411,434,415,418],
[440,462,0,445,420,447,442,435,429],
[440,462,446,0,442,440,432,415,425],
[445,452,471,449,0,438,431,439,430],
[444,480,444,451,453,0,443,438,443],
[438,457,449,459,460,448,0,440,455],
[439,476,456,476,452,453,451,0,437],
[457,473,462,466,461,448,436,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,462,448,423,473,468,459,429],
[451,0,453,444,460,447,444,491,459],
[429,438,0,433,441,451,419,475,419],
[443,447,458,0,430,478,434,485,425],
[468,431,450,461,0,446,435,440,428],
[418,444,440,413,445,0,409,452,419],
[423,447,472,457,456,482,0,499,461],
[432,400,416,406,451,439,392,0,425],
[462,432,472,466,463,472,430,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,377,386,406,410,477,443,403],
[474,0,405,380,462,422,461,499,452],
[514,486,0,429,450,425,495,507,423],
[505,511,462,0,447,482,547,520,444],
[485,429,441,444,0,469,483,526,397],
[481,469,466,409,422,0,492,502,424],
[414,430,396,344,408,399,0,450,402],
[448,392,384,371,365,389,441,0,400],
[488,439,468,447,494,467,489,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,518,716,574,370,537,625,509],
[394,0,478,721,690,474,708,647,647],
[373,413,0,550,497,374,414,358,413],
[175,170,341,0,363,309,310,363,380],
[317,201,394,528,0,262,326,482,495],
[521,417,517,582,629,0,450,572,590],
[354,183,477,581,565,441,0,443,519],
[266,244,533,528,409,319,448,0,353],
[382,244,478,511,396,301,372,538,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,345,413,533,629,442,646,526,464],
[546,0,465,646,440,395,508,570,595],
[478,426,0,702,563,514,414,619,548],
[358,245,189,0,531,364,346,476,321],
[262,451,328,360,0,326,302,355,374],
[449,496,377,527,565,0,484,606,492],
[245,383,477,545,589,407,0,475,461],
[365,321,272,415,536,285,416,0,467],
[427,296,343,570,517,399,430,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,452,479,453,463,441,455,469],
[425,0,441,446,433,454,443,432,427],
[439,450,0,438,449,455,432,421,438],
[412,445,453,0,443,454,419,431,444],
[438,458,442,448,0,451,425,429,434],
[428,437,436,437,440,0,415,417,428],
[450,448,459,472,466,476,0,449,436],
[436,459,470,460,462,474,442,0,448],
[422,464,453,447,457,463,455,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,427,430,391,395,450,417,402],
[460,0,424,437,412,404,478,441,458],
[464,467,0,458,433,462,436,465,442],
[461,454,433,0,419,415,473,454,446],
[500,479,458,472,0,439,492,472,446],
[496,487,429,476,452,0,476,444,452],
[441,413,455,418,399,415,0,422,416],
[474,450,426,437,419,447,469,0,472],
[489,433,449,445,445,439,475,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,493,524,513,546,491,433,473],
[373,0,391,433,389,476,440,446,382],
[398,500,0,477,438,494,487,468,437],
[367,458,414,0,425,483,445,413,419],
[378,502,453,466,0,456,472,427,451],
[345,415,397,408,435,0,373,387,362],
[400,451,404,446,419,518,0,453,429],
[458,445,423,478,464,504,438,0,446],
[418,509,454,472,440,529,462,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,442,443,439,445,447,418,441],
[443,0,428,450,433,438,440,439,441],
[449,463,0,455,420,441,423,451,442],
[448,441,436,0,419,427,435,431,422],
[452,458,471,472,0,447,455,437,456],
[446,453,450,464,444,0,435,440,426],
[444,451,468,456,436,456,0,444,445],
[473,452,440,460,454,451,447,0,437],
[450,450,449,469,435,465,446,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,468,455,465,432,472,467,473],
[409,0,439,432,445,393,407,387,402],
[423,452,0,420,452,392,437,412,462],
[436,459,471,0,446,430,455,411,488],
[426,446,439,445,0,417,448,403,452],
[459,498,499,461,474,0,471,429,486],
[419,484,454,436,443,420,0,417,427],
[424,504,479,480,488,462,474,0,477],
[418,489,429,403,439,405,464,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,449,468,458,440,446,477,441],
[458,0,444,471,484,470,471,478,465],
[442,447,0,482,454,445,448,462,445],
[423,420,409,0,419,430,432,447,419],
[433,407,437,472,0,429,428,474,446],
[451,421,446,461,462,0,448,458,432],
[445,420,443,459,463,443,0,442,423],
[414,413,429,444,417,433,449,0,422],
[450,426,446,472,445,459,468,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,476,382,461,416,448,447,465],
[444,0,399,397,509,374,376,408,397],
[415,492,0,429,506,453,399,415,461],
[509,494,462,0,522,482,394,426,491],
[430,382,385,369,0,455,396,432,424],
[475,517,438,409,436,0,418,422,433],
[443,515,492,497,495,473,0,462,494],
[444,483,476,465,459,469,429,0,442],
[426,494,430,400,467,458,397,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,446,446,467,443,459,433,454],
[435,0,446,452,458,466,444,450,457],
[445,445,0,436,428,438,454,437,442],
[445,439,455,0,453,445,442,459,440],
[424,433,463,438,0,443,455,446,464],
[448,425,453,446,448,0,443,472,446],
[432,447,437,449,436,448,0,436,438],
[458,441,454,432,445,419,455,0,466],
[437,434,449,451,427,445,453,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,440,443,470,475,437,469,451],
[435,0,423,427,421,455,418,421,430],
[451,468,0,443,442,450,438,451,428],
[448,464,448,0,474,462,440,460,432],
[421,470,449,417,0,454,425,427,435],
[416,436,441,429,437,0,429,444,427],
[454,473,453,451,466,462,0,454,441],
[422,470,440,431,464,447,437,0,429],
[440,461,463,459,456,464,450,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,396,429,431,407,413,450,404],
[460,0,443,476,422,460,432,452,461],
[495,448,0,506,482,445,449,473,477],
[462,415,385,0,407,414,426,454,455],
[460,469,409,484,0,452,452,442,482],
[484,431,446,477,439,0,409,447,470],
[478,459,442,465,439,482,0,529,494],
[441,439,418,437,449,444,362,0,447],
[487,430,414,436,409,421,397,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,477,452,444,457,489,462,443],
[424,0,451,452,424,439,474,434,429],
[414,440,0,439,429,424,453,450,443],
[439,439,452,0,434,442,480,464,450],
[447,467,462,457,0,439,468,461,465],
[434,452,467,449,452,0,488,463,432],
[402,417,438,411,423,403,0,435,430],
[429,457,441,427,430,428,456,0,426],
[448,462,448,441,426,459,461,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,390,478,460,394,480,442,425,373],
[501,0,560,442,520,460,531,477,452],
[413,331,0,377,373,386,398,409,308],
[431,449,514,0,453,443,494,469,335],
[497,371,518,438,0,504,502,511,413],
[411,431,505,448,387,0,461,486,412],
[449,360,493,397,389,430,0,533,407],
[466,414,482,422,380,405,358,0,401],
[518,439,583,556,478,479,484,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,432,425,455,506,455,484,478],
[463,0,428,451,471,510,431,463,452],
[459,463,0,458,469,490,424,495,445],
[466,440,433,0,438,481,431,481,436],
[436,420,422,453,0,463,387,458,422],
[385,381,401,410,428,0,444,442,430],
[436,460,467,460,504,447,0,450,436],
[407,428,396,410,433,449,441,0,407],
[413,439,446,455,469,461,455,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,546,385,371,428,356,406,496],
[594,0,586,474,542,517,200,575,360],
[345,305,0,443,356,355,341,564,450],
[506,417,448,0,462,469,252,354,356],
[520,349,535,429,0,490,354,368,349],
[463,374,536,422,401,0,347,517,374],
[535,691,550,639,537,544,0,422,566],
[485,316,327,537,523,374,469,0,457],
[395,531,441,535,542,517,325,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,464,462,459,445,438,446,466],
[448,0,460,443,453,438,431,440,457],
[427,431,0,426,430,438,435,409,461],
[429,448,465,0,429,430,431,433,454],
[432,438,461,462,0,452,454,417,461],
[446,453,453,461,439,0,450,439,472],
[453,460,456,460,437,441,0,431,477],
[445,451,482,458,474,452,460,0,475],
[425,434,430,437,430,419,414,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,441,454,448,395,433,438,421],
[451,0,486,440,455,446,432,454,450],
[450,405,0,421,426,403,436,403,441],
[437,451,470,0,438,440,454,418,467],
[443,436,465,453,0,424,427,428,433],
[496,445,488,451,467,0,430,434,502],
[458,459,455,437,464,461,0,440,438],
[453,437,488,473,463,457,451,0,432],
[470,441,450,424,458,389,453,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,464,444,451,479,457,461,423],
[434,0,444,430,445,457,448,406,408],
[427,447,0,433,413,475,435,438,418],
[447,461,458,0,467,442,449,453,447],
[440,446,478,424,0,461,463,454,431],
[412,434,416,449,430,0,458,443,416],
[434,443,456,442,428,433,0,433,433],
[430,485,453,438,437,448,458,0,429],
[468,483,473,444,460,475,458,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,453,432,448,396,407,480,449],
[457,0,429,442,401,420,403,486,429],
[438,462,0,431,447,414,439,484,435],
[459,449,460,0,449,425,425,494,430],
[443,490,444,442,0,417,416,463,435],
[495,471,477,466,474,0,451,489,440],
[484,488,452,466,475,440,0,510,465],
[411,405,407,397,428,402,381,0,382],
[442,462,456,461,456,451,426,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,440,433,433,471,428,463,440],
[459,0,462,486,466,448,430,489,484],
[451,429,0,497,432,458,437,442,453],
[458,405,394,0,401,452,424,401,453],
[458,425,459,490,0,481,446,461,474],
[420,443,433,439,410,0,436,433,451],
[463,461,454,467,445,455,0,440,491],
[428,402,449,490,430,458,451,0,462],
[451,407,438,438,417,440,400,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,539,490,491,527,613,566,423,435],
[352,0,518,413,602,560,482,469,473],
[401,373,0,412,519,490,508,458,430],
[400,478,479,0,512,516,463,446,418],
[364,289,372,379,0,448,428,395,410],
[278,331,401,375,443,0,416,360,353],
[325,409,383,428,463,475,0,377,381],
[468,422,433,445,496,531,514,0,462],
[456,418,461,473,481,538,510,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,472,408,452,425,403,455,394],
[468,0,489,490,457,457,442,457,455],
[419,402,0,451,422,417,373,390,452],
[483,401,440,0,433,398,411,411,438],
[439,434,469,458,0,415,464,481,432],
[466,434,474,493,476,0,484,482,438],
[488,449,518,480,427,407,0,507,466],
[436,434,501,480,410,409,384,0,429],
[497,436,439,453,459,453,425,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,381,423,428,391,480,367,283],
[381,0,404,502,308,278,435,422,271],
[510,487,0,503,555,495,466,569,401],
[468,389,388,0,411,335,469,398,427],
[463,583,336,480,0,340,429,375,370],
[500,613,396,556,551,0,603,564,462],
[411,456,425,422,462,288,0,375,317],
[524,469,322,493,516,327,516,0,394],
[608,620,490,464,521,429,574,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,451,466,465,441,468,503,456],
[431,0,473,458,450,436,470,471,414],
[440,418,0,466,457,434,432,453,406],
[425,433,425,0,417,443,445,483,426],
[426,441,434,474,0,426,465,470,404],
[450,455,457,448,465,0,439,475,427],
[423,421,459,446,426,452,0,479,417],
[388,420,438,408,421,416,412,0,387],
[435,477,485,465,487,464,474,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,563,434,608,441,520,334,313,377],
[328,0,277,562,388,452,283,360,515],
[457,614,0,562,440,647,342,583,525],
[283,329,329,0,383,374,380,399,493],
[450,503,451,508,0,416,526,510,445],
[371,439,244,517,475,0,379,357,527],
[557,608,549,511,365,512,0,576,560],
[578,531,308,492,381,534,315,0,445],
[514,376,366,398,446,364,331,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,467,431,446,427,421,412,411],
[441,0,482,484,482,454,457,453,468],
[424,409,0,413,457,389,419,433,424],
[460,407,478,0,455,417,401,431,425],
[445,409,434,436,0,431,412,469,380],
[464,437,502,474,460,0,459,467,456],
[470,434,472,490,479,432,0,464,432],
[479,438,458,460,422,424,427,0,425],
[480,423,467,466,511,435,459,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,442,443,452,435,439,451,408],
[455,0,453,439,415,441,444,450,452],
[449,438,0,440,448,476,437,469,438],
[448,452,451,0,439,444,457,461,453],
[439,476,443,452,0,470,470,460,429],
[456,450,415,447,421,0,463,466,427],
[452,447,454,434,421,428,0,454,447],
[440,441,422,430,431,425,437,0,422],
[483,439,453,438,462,464,444,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,398,457,381,360,506,387,485],
[399,0,560,511,483,413,539,507,537],
[493,331,0,218,465,462,272,235,246],
[434,380,673,0,548,423,606,634,416],
[510,408,426,343,0,625,518,496,397],
[531,478,429,468,266,0,402,469,437],
[385,352,619,285,373,489,0,644,411],
[504,384,656,257,395,422,247,0,236],
[406,354,645,475,494,454,480,655,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,434,468,473,473,447,463,455],
[448,0,451,473,461,484,439,450,454],
[457,440,0,473,475,463,451,474,454],
[423,418,418,0,438,444,436,450,441],
[418,430,416,453,0,457,418,449,445],
[418,407,428,447,434,0,439,435,422],
[444,452,440,455,473,452,0,456,446],
[428,441,417,441,442,456,435,0,451],
[436,437,437,450,446,469,445,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,431,445,438,461,465,447,447],
[468,0,477,463,461,470,465,447,443],
[460,414,0,444,429,464,463,433,424],
[446,428,447,0,422,468,444,431,436],
[453,430,462,469,0,455,451,423,441],
[430,421,427,423,436,0,457,435,417],
[426,426,428,447,440,434,0,410,443],
[444,444,458,460,468,456,481,0,461],
[444,448,467,455,450,474,448,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,453,413,473,448,464,425,492],
[474,0,388,453,473,500,474,434,497],
[438,503,0,523,521,499,507,501,491],
[478,438,368,0,483,491,404,410,484],
[418,418,370,408,0,438,436,454,476],
[443,391,392,400,453,0,378,433,484],
[427,417,384,487,455,513,0,461,462],
[466,457,390,481,437,458,430,0,481],
[399,394,400,407,415,407,429,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,450,442,466,455,429,455,454],
[449,0,450,436,482,465,438,451,443],
[441,441,0,463,476,461,447,452,448],
[449,455,428,0,463,448,435,457,457],
[425,409,415,428,0,444,420,422,444],
[436,426,430,443,447,0,434,447,446],
[462,453,444,456,471,457,0,464,473],
[436,440,439,434,469,444,427,0,450],
[437,448,443,434,447,445,418,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,465,460,456,437,442,437,449],
[433,0,459,428,452,432,450,480,441],
[426,432,0,413,442,432,424,428,448],
[431,463,478,0,444,434,461,469,444],
[435,439,449,447,0,435,440,456,436],
[454,459,459,457,456,0,458,446,443],
[449,441,467,430,451,433,0,456,440],
[454,411,463,422,435,445,435,0,447],
[442,450,443,447,455,448,451,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,410,430,435,424,455,456,481],
[444,0,417,421,449,429,444,409,488],
[481,474,0,484,447,502,479,440,496],
[461,470,407,0,460,450,420,462,489],
[456,442,444,431,0,427,446,441,476],
[467,462,389,441,464,0,438,413,492],
[436,447,412,471,445,453,0,450,467],
[435,482,451,429,450,478,441,0,453],
[410,403,395,402,415,399,424,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,459,461,437,449,445,472,452],
[422,0,446,428,427,434,428,447,430],
[432,445,0,424,411,442,422,434,425],
[430,463,467,0,443,441,432,472,432],
[454,464,480,448,0,436,468,467,473],
[442,457,449,450,455,0,437,473,470],
[446,463,469,459,423,454,0,470,466],
[419,444,457,419,424,418,421,0,403],
[439,461,466,459,418,421,425,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,451,453,446,445,457,460,454],
[429,0,453,440,432,428,460,443,423],
[440,438,0,439,445,454,454,446,451],
[438,451,452,0,438,429,453,467,459],
[445,459,446,453,0,440,458,467,455],
[446,463,437,462,451,0,469,452,448],
[434,431,437,438,433,422,0,445,439],
[431,448,445,424,424,439,446,0,437],
[437,468,440,432,436,443,452,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,437,436,466,424,434,451,458],
[426,0,448,442,454,433,411,446,469],
[454,443,0,431,448,433,427,452,462],
[455,449,460,0,484,453,449,443,456],
[425,437,443,407,0,427,422,430,443],
[467,458,458,438,464,0,428,459,448],
[457,480,464,442,469,463,0,454,477],
[440,445,439,448,461,432,437,0,448],
[433,422,429,435,448,443,414,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,466,441,458,469,466,466,462],
[442,0,459,446,467,446,459,469,447],
[425,432,0,444,433,449,434,447,453],
[450,445,447,0,451,472,448,455,458],
[433,424,458,440,0,478,460,460,443],
[422,445,442,419,413,0,452,446,434],
[425,432,457,443,431,439,0,445,454],
[425,422,444,436,431,445,446,0,429],
[429,444,438,433,448,457,437,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,465,461,459,463,452,454,453],
[460,0,472,471,476,431,429,445,455],
[426,419,0,451,446,413,439,429,435],
[430,420,440,0,449,439,422,428,438],
[432,415,445,442,0,404,424,431,410],
[428,460,478,452,487,0,460,442,462],
[439,462,452,469,467,431,0,424,477],
[437,446,462,463,460,449,467,0,445],
[438,436,456,453,481,429,414,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,453,444,444,442,441,436,444],
[434,0,465,458,427,473,435,451,447],
[438,426,0,443,432,426,440,448,442],
[447,433,448,0,445,442,447,450,438],
[447,464,459,446,0,443,476,456,454],
[449,418,465,449,448,0,438,450,445],
[450,456,451,444,415,453,0,440,432],
[455,440,443,441,435,441,451,0,447],
[447,444,449,453,437,446,459,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,410,399,449,350,402,400,352],
[503,0,401,536,487,429,461,497,477],
[481,490,0,388,541,467,452,514,472],
[492,355,503,0,550,363,473,471,425],
[442,404,350,341,0,385,380,429,478],
[541,462,424,528,506,0,492,435,505],
[489,430,439,418,511,399,0,443,464],
[491,394,377,420,462,456,448,0,446],
[539,414,419,466,413,386,427,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,473,498,465,479,463,422,439],
[483,0,508,500,470,498,431,462,475],
[418,383,0,470,451,414,416,447,385],
[393,391,421,0,387,383,396,471,429],
[426,421,440,504,0,434,455,440,471],
[412,393,477,508,457,0,451,439,412],
[428,460,475,495,436,440,0,479,417],
[469,429,444,420,451,452,412,0,407],
[452,416,506,462,420,479,474,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,440,464,428,459,413,447,424],
[440,0,443,463,453,471,461,463,448],
[451,448,0,459,436,442,432,451,440],
[427,428,432,0,424,453,421,435,421],
[463,438,455,467,0,460,442,454,456],
[432,420,449,438,431,0,417,429,434],
[478,430,459,470,449,474,0,471,440],
[444,428,440,456,437,462,420,0,414],
[467,443,451,470,435,457,451,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,454,371,442,385,440,366,331],
[566,0,566,481,533,529,511,432,449],
[437,325,0,354,474,433,481,351,411],
[520,410,537,0,484,466,504,450,424],
[449,358,417,407,0,430,483,433,370],
[506,362,458,425,461,0,468,364,442],
[451,380,410,387,408,423,0,380,305],
[525,459,540,441,458,527,511,0,426],
[560,442,480,467,521,449,586,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,406,428,455,484,460,449,436],
[459,0,470,432,430,489,500,478,434],
[485,421,0,427,423,479,465,405,446],
[463,459,464,0,453,510,441,478,455],
[436,461,468,438,0,454,460,495,509],
[407,402,412,381,437,0,429,422,429],
[431,391,426,450,431,462,0,478,461],
[442,413,486,413,396,469,413,0,458],
[455,457,445,436,382,462,430,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,427,451,414,423,398,427,437],
[455,0,442,466,458,401,482,414,495],
[464,449,0,485,443,469,474,459,489],
[440,425,406,0,399,406,433,442,468],
[477,433,448,492,0,417,465,444,481],
[468,490,422,485,474,0,477,437,499],
[493,409,417,458,426,414,0,398,422],
[464,477,432,449,447,454,493,0,506],
[454,396,402,423,410,392,469,385,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,470,458,481,483,448,431,468],
[465,0,456,464,470,485,463,457,444],
[421,435,0,437,467,474,442,446,453],
[433,427,454,0,456,458,436,428,458],
[410,421,424,435,0,443,436,428,442],
[408,406,417,433,448,0,418,430,427],
[443,428,449,455,455,473,0,448,453],
[460,434,445,463,463,461,443,0,465],
[423,447,438,433,449,464,438,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,438,472,443,478,547,515,443],
[480,0,422,416,449,534,513,518,457],
[453,469,0,462,507,463,564,540,434],
[419,475,429,0,477,436,515,516,403],
[448,442,384,414,0,445,481,496,415],
[413,357,428,455,446,0,469,525,427],
[344,378,327,376,410,422,0,413,335],
[376,373,351,375,395,366,478,0,373],
[448,434,457,488,476,464,556,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,412,445,411,423,438,450,460],
[443,0,502,479,465,438,466,465,447],
[479,389,0,470,474,407,447,427,448],
[446,412,421,0,410,415,467,480,423],
[480,426,417,481,0,422,455,468,447],
[468,453,484,476,469,0,442,483,466],
[453,425,444,424,436,449,0,461,422],
[441,426,464,411,423,408,430,0,421],
[431,444,443,468,444,425,469,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,476,442,467,463,462,464,455],
[417,0,441,436,438,453,431,431,439],
[415,450,0,444,441,438,430,440,441],
[449,455,447,0,453,431,422,449,455],
[424,453,450,438,0,448,444,455,447],
[428,438,453,460,443,0,455,445,443],
[429,460,461,469,447,436,0,450,446],
[427,460,451,442,436,446,441,0,458],
[436,452,450,436,444,448,445,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,518,460,495,477,465,460,462],
[452,0,427,426,471,421,424,417,409],
[373,464,0,451,421,415,420,401,446],
[431,465,440,0,463,458,472,443,491],
[396,420,470,428,0,472,428,444,456],
[414,470,476,433,419,0,417,459,419],
[426,467,471,419,463,474,0,465,449],
[431,474,490,448,447,432,426,0,455],
[429,482,445,400,435,472,442,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,445,464,402,450,434,453,446],
[424,0,424,470,424,449,441,435,451],
[446,467,0,465,453,448,445,428,449],
[427,421,426,0,414,452,454,436,433],
[489,467,438,477,0,486,461,447,460],
[441,442,443,439,405,0,444,452,449],
[457,450,446,437,430,447,0,456,446],
[438,456,463,455,444,439,435,0,436],
[445,440,442,458,431,442,445,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,609,389,728,163,409,503,319],
[409,0,609,458,728,572,409,503,545],
[282,282,0,168,502,183,282,213,99],
[502,433,723,0,728,277,409,439,319],
[163,163,389,163,0,163,295,389,99],
[728,319,708,614,728,0,508,439,545],
[482,482,609,482,596,383,0,602,319],
[388,388,678,452,502,452,289,0,319],
[572,346,792,572,792,346,572,572,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,445,444,419,418,426,443,393],
[419,0,446,435,440,421,446,421,449],
[446,445,0,469,443,443,485,458,450],
[447,456,422,0,424,446,453,454,408],
[472,451,448,467,0,442,417,496,381],
[473,470,448,445,449,0,467,515,417],
[465,445,406,438,474,424,0,490,447],
[448,470,433,437,395,376,401,0,377],
[498,442,441,483,510,474,444,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,453,436,483,456,497,451,485],
[447,0,421,466,466,448,479,458,452],
[438,470,0,441,475,443,480,455,448],
[455,425,450,0,445,434,457,456,445],
[408,425,416,446,0,416,429,396,441],
[435,443,448,457,475,0,484,439,447],
[394,412,411,434,462,407,0,424,423],
[440,433,436,435,495,452,467,0,437],
[406,439,443,446,450,444,468,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,483,442,469,438,477,426,444],
[492,0,492,489,484,516,503,438,487],
[408,399,0,438,387,417,438,419,402],
[449,402,453,0,447,443,471,400,421],
[422,407,504,444,0,460,478,446,437],
[453,375,474,448,431,0,458,425,419],
[414,388,453,420,413,433,0,399,452],
[465,453,472,491,445,466,492,0,458],
[447,404,489,470,454,472,439,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,464,405,449,444,439,453,438],
[421,0,442,399,448,407,425,428,418],
[427,449,0,400,436,426,420,404,429],
[486,492,491,0,454,433,463,469,474],
[442,443,455,437,0,433,457,437,421],
[447,484,465,458,458,0,453,430,449],
[452,466,471,428,434,438,0,405,414],
[438,463,487,422,454,461,486,0,453],
[453,473,462,417,470,442,477,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,466,449,456,442,461,475,467],
[442,0,462,439,467,451,462,467,463],
[425,429,0,411,430,431,423,443,436],
[442,452,480,0,459,441,457,456,454],
[435,424,461,432,0,442,424,455,447],
[449,440,460,450,449,0,445,469,442],
[430,429,468,434,467,446,0,469,439],
[416,424,448,435,436,422,422,0,438],
[424,428,455,437,444,449,452,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,437,445,441,451,468,429,452],
[446,0,423,443,440,448,457,432,451],
[454,468,0,465,463,480,468,430,470],
[446,448,426,0,462,472,442,432,440],
[450,451,428,429,0,448,457,427,436],
[440,443,411,419,443,0,441,390,446],
[423,434,423,449,434,450,0,431,433],
[462,459,461,459,464,501,460,0,444],
[439,440,421,451,455,445,458,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,442,453,438,442,419,437,439],
[473,0,473,458,442,464,431,438,454],
[449,418,0,457,424,457,436,442,425],
[438,433,434,0,441,455,424,429,438],
[453,449,467,450,0,463,435,437,437],
[449,427,434,436,428,0,421,443,427],
[472,460,455,467,456,470,0,438,449],
[454,453,449,462,454,448,453,0,438],
[452,437,466,453,454,464,442,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,319,419,460,395,429,297,386],
[385,0,441,422,565,444,386,403,473],
[572,450,0,444,483,470,486,500,425],
[472,469,447,0,539,443,484,402,496],
[431,326,408,352,0,409,330,383,412],
[496,447,421,448,482,0,440,471,601],
[462,505,405,407,561,451,0,433,514],
[594,488,391,489,508,420,458,0,435],
[505,418,466,395,479,290,377,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,431,426,456,411,430,452,435],
[446,0,436,431,452,417,425,443,446],
[460,455,0,468,475,455,434,463,474],
[465,460,423,0,475,470,426,464,456],
[435,439,416,416,0,419,416,439,446],
[480,474,436,421,472,0,448,460,456],
[461,466,457,465,475,443,0,467,456],
[439,448,428,427,452,431,424,0,427],
[456,445,417,435,445,435,435,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,411,445,453,436,454,465,426],
[493,0,468,441,446,464,463,435,480],
[480,423,0,445,492,471,466,475,451],
[446,450,446,0,466,478,474,463,427],
[438,445,399,425,0,437,469,445,463],
[455,427,420,413,454,0,438,393,403],
[437,428,425,417,422,453,0,445,405],
[426,456,416,428,446,498,446,0,456],
[465,411,440,464,428,488,486,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,441,425,445,419,456,449,464],
[411,0,446,419,437,424,458,474,437],
[450,445,0,448,455,465,484,480,470],
[466,472,443,0,445,473,450,480,458],
[446,454,436,446,0,441,472,474,427],
[472,467,426,418,450,0,445,448,453],
[435,433,407,441,419,446,0,441,422],
[442,417,411,411,417,443,450,0,421],
[427,454,421,433,464,438,469,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,467,433,438,446,460,454,448],
[435,0,464,446,458,471,456,449,439],
[424,427,0,421,444,446,445,426,419],
[458,445,470,0,447,487,473,443,442],
[453,433,447,444,0,457,439,447,440],
[445,420,445,404,434,0,424,427,419],
[431,435,446,418,452,467,0,439,435],
[437,442,465,448,444,464,452,0,424],
[443,452,472,449,451,472,456,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,412,320,387,424,382,458,412],
[448,0,456,338,392,443,361,478,427],
[479,435,0,365,412,431,447,525,368],
[571,553,526,0,462,450,562,552,430],
[504,499,479,429,0,418,560,514,498],
[467,448,460,441,473,0,467,498,440],
[509,530,444,329,331,424,0,594,434],
[433,413,366,339,377,393,297,0,369],
[479,464,523,461,393,451,457,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,461,446,479,472,422,451,457],
[404,0,386,450,476,494,430,410,445],
[430,505,0,480,485,442,443,452,468],
[445,441,411,0,440,473,449,403,446],
[412,415,406,451,0,458,414,452,423],
[419,397,449,418,433,0,395,412,445],
[469,461,448,442,477,496,0,445,500],
[440,481,439,488,439,479,446,0,482],
[434,446,423,445,468,446,391,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,439,478,443,445,431,485,439],
[459,0,458,452,475,458,415,462,464],
[452,433,0,462,463,478,441,480,464],
[413,439,429,0,462,452,438,427,471],
[448,416,428,429,0,416,456,455,458],
[446,433,413,439,475,0,458,454,455],
[460,476,450,453,435,433,0,452,435],
[406,429,411,464,436,437,439,0,501],
[452,427,427,420,433,436,456,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,477,458,451,432,431,439,429],
[467,0,485,452,478,452,463,430,420],
[414,406,0,474,430,443,459,423,453],
[433,439,417,0,457,454,426,428,438],
[440,413,461,434,0,440,438,426,421],
[459,439,448,437,451,0,446,435,433],
[460,428,432,465,453,445,0,463,434],
[452,461,468,463,465,456,428,0,446],
[462,471,438,453,470,458,457,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,444,433,439,438,417,443,445],
[465,0,463,437,445,447,453,479,456],
[447,428,0,435,449,434,438,456,436],
[458,454,456,0,455,436,453,460,427],
[452,446,442,436,0,422,434,460,442],
[453,444,457,455,469,0,449,449,451],
[474,438,453,438,457,442,0,467,450],
[448,412,435,431,431,442,424,0,448],
[446,435,455,464,449,440,441,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,377,432,419,445,458,433,431,423],
[514,0,468,439,454,465,471,478,447],
[459,423,0,447,444,485,443,434,438],
[472,452,444,0,460,449,446,472,418],
[446,437,447,431,0,487,471,434,429],
[433,426,406,442,404,0,420,450,425],
[458,420,448,445,420,471,0,456,429],
[460,413,457,419,457,441,435,0,420],
[468,444,453,473,462,466,462,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,432,401,474,395,448,479,465],
[482,0,488,453,496,421,474,492,450],
[459,403,0,433,504,433,475,461,416],
[490,438,458,0,470,450,465,476,458],
[417,395,387,421,0,412,438,481,428],
[496,470,458,441,479,0,474,492,440],
[443,417,416,426,453,417,0,458,426],
[412,399,430,415,410,399,433,0,395],
[426,441,475,433,463,451,465,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,434,432,419,442,425,460,439],
[454,0,463,434,459,446,430,457,419],
[457,428,0,428,469,445,421,450,424],
[459,457,463,0,461,454,423,441,448],
[472,432,422,430,0,446,419,430,423],
[449,445,446,437,445,0,412,462,425],
[466,461,470,468,472,479,0,451,439],
[431,434,441,450,461,429,440,0,436],
[452,472,467,443,468,466,452,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,506,458,459,440,476,517,460],
[391,0,417,377,446,418,441,484,424],
[385,474,0,417,416,478,458,461,370],
[433,514,474,0,449,415,478,583,427],
[432,445,475,442,0,424,454,488,459],
[451,473,413,476,467,0,497,530,425],
[415,450,433,413,437,394,0,458,402],
[374,407,430,308,403,361,433,0,383],
[431,467,521,464,432,466,489,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,604,419,436,471,547,542,473,409],
[287,0,382,311,428,412,444,376,314],
[472,509,0,504,374,488,546,447,421],
[455,580,387,0,429,516,600,538,470],
[420,463,517,462,0,524,497,474,530],
[344,479,403,375,367,0,599,485,418],
[349,447,345,291,394,292,0,374,419],
[418,515,444,353,417,406,517,0,481],
[482,577,470,421,361,473,472,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,441,445,473,444,449,408,464],
[450,0,441,409,400,415,423,417,461],
[450,450,0,402,468,410,448,453,463],
[446,482,489,0,482,454,449,422,446],
[418,491,423,409,0,406,431,421,431],
[447,476,481,437,485,0,474,466,466],
[442,468,443,442,460,417,0,421,481],
[483,474,438,469,470,425,470,0,493],
[427,430,428,445,460,425,410,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,437,444,420,401,441,439,439],
[461,0,424,452,403,428,399,432,418],
[454,467,0,461,418,422,434,426,423],
[447,439,430,0,406,425,424,447,445],
[471,488,473,485,0,469,467,450,427],
[490,463,469,466,422,0,451,477,465],
[450,492,457,467,424,440,0,453,425],
[452,459,465,444,441,414,438,0,430],
[452,473,468,446,464,426,466,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,470,491,443,450,458,477,459],
[422,0,460,472,457,468,460,499,445],
[421,431,0,444,444,413,429,446,400],
[400,419,447,0,422,418,429,428,422],
[448,434,447,469,0,454,455,479,446],
[441,423,478,473,437,0,463,445,451],
[433,431,462,462,436,428,0,482,436],
[414,392,445,463,412,446,409,0,420],
[432,446,491,469,445,440,455,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,423,435,443,432,463,422,451],
[446,0,437,432,433,411,424,412,396],
[468,454,0,447,451,440,421,441,456],
[456,459,444,0,442,432,457,455,442],
[448,458,440,449,0,450,436,457,442],
[459,480,451,459,441,0,459,470,456],
[428,467,470,434,455,432,0,453,465],
[469,479,450,436,434,421,438,0,439],
[440,495,435,449,449,435,426,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,460,459,424,416,417,467,428],
[451,0,483,479,468,454,441,496,431],
[431,408,0,424,407,380,414,448,404],
[432,412,467,0,449,418,420,453,426],
[467,423,484,442,0,465,456,460,456],
[475,437,511,473,426,0,432,497,415],
[474,450,477,471,435,459,0,474,444],
[424,395,443,438,431,394,417,0,403],
[463,460,487,465,435,476,447,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,441,435,441,442,435,474,452],
[431,0,444,432,421,446,420,430,442],
[450,447,0,432,456,433,435,432,459],
[456,459,459,0,427,445,445,448,467],
[450,470,435,464,0,444,464,460,473],
[449,445,458,446,447,0,443,443,475],
[456,471,456,446,427,448,0,453,464],
[417,461,459,443,431,448,438,0,465],
[439,449,432,424,418,416,427,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,400,429,433,433,428,446,465],
[462,0,437,425,449,433,452,452,464],
[491,454,0,479,475,467,443,463,459],
[462,466,412,0,466,472,442,453,465],
[458,442,416,425,0,447,428,447,436],
[458,458,424,419,444,0,451,448,482],
[463,439,448,449,463,440,0,443,453],
[445,439,428,438,444,443,448,0,470],
[426,427,432,426,455,409,438,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,460,444,431,453,469,452,444],
[412,0,461,415,413,419,427,454,430],
[431,430,0,443,441,434,426,431,429],
[447,476,448,0,445,433,418,410,432],
[460,478,450,446,0,457,430,451,438],
[438,472,457,458,434,0,436,436,432],
[422,464,465,473,461,455,0,431,468],
[439,437,460,481,440,455,460,0,425],
[447,461,462,459,453,459,423,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,461,452,461,467,430,465,469],
[426,0,459,443,451,446,451,449,453],
[430,432,0,443,447,411,393,417,440],
[439,448,448,0,469,464,446,444,448],
[430,440,444,422,0,423,422,432,436],
[424,445,480,427,468,0,451,432,489],
[461,440,498,445,469,440,0,460,477],
[426,442,474,447,459,459,431,0,467],
[422,438,451,443,455,402,414,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,466,494,443,466,500,447,489],
[416,0,450,458,430,449,473,418,457],
[425,441,0,454,452,434,461,424,460],
[397,433,437,0,449,427,468,410,428],
[448,461,439,442,0,439,479,447,469],
[425,442,457,464,452,0,476,431,478],
[391,418,430,423,412,415,0,406,419],
[444,473,467,481,444,460,485,0,475],
[402,434,431,463,422,413,472,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,534,458,452,413,466,451,453],
[438,0,518,438,461,447,421,454,475],
[357,373,0,442,382,397,363,398,443],
[433,453,449,0,406,436,433,462,456],
[439,430,509,485,0,481,458,491,497],
[478,444,494,455,410,0,495,489,473],
[425,470,528,458,433,396,0,443,471],
[440,437,493,429,400,402,448,0,481],
[438,416,448,435,394,418,420,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,458,466,487,469,498,495,439],
[470,0,473,454,426,490,454,496,422],
[433,418,0,468,509,447,466,490,416],
[425,437,423,0,454,452,445,478,402],
[404,465,382,437,0,394,446,435,401],
[422,401,444,439,497,0,486,466,451],
[393,437,425,446,445,405,0,424,352],
[396,395,401,413,456,425,467,0,421],
[452,469,475,489,490,440,539,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,374,339,517,450,476,490,375,529],
[517,0,408,418,425,448,419,559,511],
[552,483,0,422,398,429,423,461,501],
[374,473,469,0,493,486,516,416,504],
[441,466,493,398,0,421,419,441,475],
[415,443,462,405,470,0,410,466,522],
[401,472,468,375,472,481,0,467,493],
[516,332,430,475,450,425,424,0,455],
[362,380,390,387,416,369,398,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,471,461,454,468,433,492,417],
[428,0,472,420,462,426,403,412,437],
[420,419,0,419,454,449,413,425,431],
[430,471,472,0,524,446,445,506,470],
[437,429,437,367,0,447,418,443,431],
[423,465,442,445,444,0,400,480,399],
[458,488,478,446,473,491,0,527,439],
[399,479,466,385,448,411,364,0,379],
[474,454,460,421,460,492,452,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,435,445,427,414,445,439,468],
[457,0,433,433,448,453,438,486,460],
[456,458,0,435,432,427,471,467,456],
[446,458,456,0,419,456,472,471,463],
[464,443,459,472,0,424,467,480,468],
[477,438,464,435,467,0,447,469,458],
[446,453,420,419,424,444,0,479,455],
[452,405,424,420,411,422,412,0,445],
[423,431,435,428,423,433,436,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,482,475,438,505,457,447,421],
[468,0,475,467,445,488,454,470,449],
[409,416,0,405,398,486,416,411,388],
[416,424,486,0,438,505,458,446,453],
[453,446,493,453,0,503,441,458,453],
[386,403,405,386,388,0,406,412,392],
[434,437,475,433,450,485,0,437,408],
[444,421,480,445,433,479,454,0,426],
[470,442,503,438,438,499,483,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,437,441,433,444,416,411,437],
[455,0,453,449,428,425,440,443,426],
[454,438,0,406,442,441,446,419,439],
[450,442,485,0,428,453,453,440,443],
[458,463,449,463,0,484,438,451,443],
[447,466,450,438,407,0,421,414,434],
[475,451,445,438,453,470,0,445,448],
[480,448,472,451,440,477,446,0,456],
[454,465,452,448,448,457,443,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,426,428,438,446,445,456,442],
[449,0,435,447,448,442,452,437,419],
[465,456,0,441,435,434,462,465,448],
[463,444,450,0,444,445,458,459,427],
[453,443,456,447,0,426,448,459,423],
[445,449,457,446,465,0,464,456,428],
[446,439,429,433,443,427,0,466,430],
[435,454,426,432,432,435,425,0,427],
[449,472,443,464,468,463,461,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,432,485,417,435,407,482,442],
[457,0,462,498,444,435,414,457,504],
[459,429,0,499,433,459,423,408,462],
[406,393,392,0,402,419,422,446,453],
[474,447,458,489,0,431,462,441,470],
[456,456,432,472,460,0,428,473,495],
[484,477,468,469,429,463,0,461,489],
[409,434,483,445,450,418,430,0,490],
[449,387,429,438,421,396,402,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,470,533,371,486,330,341,422],
[476,0,557,508,525,405,422,344,383],
[421,334,0,533,300,422,349,317,427],
[358,383,358,0,288,400,218,264,393],
[520,366,591,603,0,444,387,323,411],
[405,486,469,491,447,0,421,414,467],
[561,469,542,673,504,470,0,468,444],
[550,547,574,627,568,477,423,0,448],
[469,508,464,498,480,424,447,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,476,476,440,464,455,447,488],
[387,0,401,368,434,429,390,381,403],
[415,490,0,422,440,435,458,424,426],
[415,523,469,0,482,453,492,427,462],
[451,457,451,409,0,446,461,427,438],
[427,462,456,438,445,0,422,429,465],
[436,501,433,399,430,469,0,436,433],
[444,510,467,464,464,462,455,0,453],
[403,488,465,429,453,426,458,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,370,479,431,454,428,487,372,449],
[521,0,432,484,499,479,560,500,515],
[412,459,0,479,494,486,493,415,480],
[460,407,412,0,442,470,451,370,494],
[437,392,397,449,0,447,527,445,457],
[463,412,405,421,444,0,442,398,447],
[404,331,398,440,364,449,0,383,431],
[519,391,476,521,446,493,508,0,502],
[442,376,411,397,434,444,460,389,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,472,440,420,448,454,459,458],
[428,0,460,456,467,437,444,450,469],
[419,431,0,444,437,439,433,444,449],
[451,435,447,0,447,452,470,446,438],
[471,424,454,444,0,439,450,456,446],
[443,454,452,439,452,0,462,438,446],
[437,447,458,421,441,429,0,422,463],
[432,441,447,445,435,453,469,0,468],
[433,422,442,453,445,445,428,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,437,442,426,459,463,440,449],
[465,0,429,462,437,461,468,448,438],
[454,462,0,465,431,461,457,455,444],
[449,429,426,0,433,450,450,428,448],
[465,454,460,458,0,480,457,444,472],
[432,430,430,441,411,0,433,434,429],
[428,423,434,441,434,458,0,422,446],
[451,443,436,463,447,457,469,0,446],
[442,453,447,443,419,462,445,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,428,439,468,428,450,415,417],
[434,0,425,427,417,422,432,396,381],
[463,466,0,442,448,455,464,417,426],
[452,464,449,0,453,444,435,426,428],
[423,474,443,438,0,402,404,410,393],
[463,469,436,447,489,0,447,433,417],
[441,459,427,456,487,444,0,417,457],
[476,495,474,465,481,458,474,0,428],
[474,510,465,463,498,474,434,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,448,473,445,450,461,461,452],
[421,0,425,449,442,436,438,442,426],
[443,466,0,469,435,446,442,453,449],
[418,442,422,0,417,431,450,433,428],
[446,449,456,474,0,438,443,466,479],
[441,455,445,460,453,0,453,447,458],
[430,453,449,441,448,438,0,442,445],
[430,449,438,458,425,444,449,0,437],
[439,465,442,463,412,433,446,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,408,394,383,427,368,398,400],
[472,0,420,419,430,440,407,455,446],
[483,471,0,451,467,478,460,485,432],
[497,472,440,0,488,511,448,455,481],
[508,461,424,403,0,470,435,441,491],
[464,451,413,380,421,0,414,424,410],
[523,484,431,443,456,477,0,458,471],
[493,436,406,436,450,467,433,0,445],
[491,445,459,410,400,481,420,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,452,461,432,454,451,474,513],
[413,0,441,424,406,372,426,452,416],
[439,450,0,485,430,449,452,462,459],
[430,467,406,0,412,415,419,435,419],
[459,485,461,479,0,432,418,464,437],
[437,519,442,476,459,0,437,484,476],
[440,465,439,472,473,454,0,470,447],
[417,439,429,456,427,407,421,0,429],
[378,475,432,472,454,415,444,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,425,443,447,460,467,433,435],
[450,0,433,442,451,445,454,444,437],
[466,458,0,442,453,454,461,443,448],
[448,449,449,0,441,463,454,439,426],
[444,440,438,450,0,463,448,415,422],
[431,446,437,428,428,0,443,442,431],
[424,437,430,437,443,448,0,431,418],
[458,447,448,452,476,449,460,0,439],
[456,454,443,465,469,460,473,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,436,415,417,411,424,439,425],
[437,0,430,429,445,412,415,440,419],
[455,461,0,461,432,468,468,456,474],
[476,462,430,0,421,445,434,435,443],
[474,446,459,470,0,444,457,451,458],
[480,479,423,446,447,0,460,429,439],
[467,476,423,457,434,431,0,453,442],
[452,451,435,456,440,462,438,0,426],
[466,472,417,448,433,452,449,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,452,444,430,452,456,441,455],
[446,0,459,444,446,471,458,433,438],
[439,432,0,449,450,449,464,437,451],
[447,447,442,0,442,436,447,452,434],
[461,445,441,449,0,462,462,433,451],
[439,420,442,455,429,0,451,430,427],
[435,433,427,444,429,440,0,411,408],
[450,458,454,439,458,461,480,0,449],
[436,453,440,457,440,464,483,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,575,231,577,692,344,543,690,568],
[316,0,547,714,513,463,316,651,486],
[660,344,0,523,631,366,660,629,693],
[314,177,368,0,316,199,307,454,170],
[199,378,260,575,0,339,314,432,177],
[547,428,525,692,552,0,722,683,722],
[348,575,231,584,577,169,0,629,557],
[201,240,262,437,459,208,262,0,410],
[323,405,198,721,714,169,334,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,456,480,443,440,448,471,460],
[443,0,459,473,435,452,441,458,452],
[435,432,0,461,418,426,432,453,452],
[411,418,430,0,392,410,406,446,425],
[448,456,473,499,0,456,443,461,455],
[451,439,465,481,435,0,453,479,456],
[443,450,459,485,448,438,0,465,454],
[420,433,438,445,430,412,426,0,436],
[431,439,439,466,436,435,437,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,428,443,478,471,462,473,441],
[450,0,464,428,448,496,466,454,489],
[463,427,0,447,430,478,453,467,481],
[448,463,444,0,466,474,489,472,463],
[413,443,461,425,0,477,470,488,468],
[420,395,413,417,414,0,412,450,434],
[429,425,438,402,421,479,0,443,417],
[418,437,424,419,403,441,448,0,438],
[450,402,410,428,423,457,474,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,468,485,465,456,461,461,436],
[424,0,447,448,449,436,427,459,439],
[423,444,0,432,411,438,420,443,420],
[406,443,459,0,443,436,439,440,419],
[426,442,480,448,0,443,454,449,445],
[435,455,453,455,448,0,446,458,446],
[430,464,471,452,437,445,0,443,441],
[430,432,448,451,442,433,448,0,436],
[455,452,471,472,446,445,450,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,472,479,484,490,439,465,464],
[449,0,449,519,433,428,414,440,421],
[419,442,0,457,456,430,437,446,454],
[412,372,434,0,420,433,384,415,452],
[407,458,435,471,0,438,458,434,448],
[401,463,461,458,453,0,433,439,477],
[452,477,454,507,433,458,0,473,459],
[426,451,445,476,457,452,418,0,464],
[427,470,437,439,443,414,432,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,451,428,435,413,433,470,456],
[460,0,490,450,472,466,477,434,472],
[440,401,0,431,430,440,446,465,448],
[463,441,460,0,426,427,448,449,431],
[456,419,461,465,0,451,461,468,458],
[478,425,451,464,440,0,429,439,422],
[458,414,445,443,430,462,0,478,449],
[421,457,426,442,423,452,413,0,426],
[435,419,443,460,433,469,442,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,457,454,451,464,470,450,459],
[461,0,445,467,450,455,467,480,465],
[434,446,0,470,462,458,482,461,485],
[437,424,421,0,451,458,454,435,451],
[440,441,429,440,0,430,438,432,481],
[427,436,433,433,461,0,462,459,440],
[421,424,409,437,453,429,0,450,445],
[441,411,430,456,459,432,441,0,453],
[432,426,406,440,410,451,446,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,459,446,428,450,423,447,417],
[477,0,476,477,479,452,440,434,452],
[432,415,0,455,471,458,431,443,430],
[445,414,436,0,446,452,433,456,435],
[463,412,420,445,0,457,433,409,416],
[441,439,433,439,434,0,424,438,427],
[468,451,460,458,458,467,0,464,438],
[444,457,448,435,482,453,427,0,446],
[474,439,461,456,475,464,453,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,400,407,402,360,448,389,410],
[474,0,422,484,460,450,485,410,448],
[491,469,0,444,481,464,434,406,467],
[484,407,447,0,490,414,470,391,468],
[489,431,410,401,0,416,498,375,461],
[531,441,427,477,475,0,495,456,464],
[443,406,457,421,393,396,0,365,435],
[502,481,485,500,516,435,526,0,483],
[481,443,424,423,430,427,456,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,452,491,458,438,457,442,455],
[438,0,438,469,431,452,464,431,453],
[439,453,0,457,469,464,452,443,452],
[400,422,434,0,433,437,414,424,440],
[433,460,422,458,0,440,430,448,438],
[453,439,427,454,451,0,432,434,444],
[434,427,439,477,461,459,0,459,441],
[449,460,448,467,443,457,432,0,439],
[436,438,439,451,453,447,450,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,459,444,489,463,474,450,455],
[431,0,460,442,464,451,430,447,445],
[432,431,0,425,463,453,451,444,435],
[447,449,466,0,471,453,464,466,441],
[402,427,428,420,0,439,425,419,436],
[428,440,438,438,452,0,438,428,441],
[417,461,440,427,466,453,0,440,460],
[441,444,447,425,472,463,451,0,459],
[436,446,456,450,455,450,431,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,439,412,452,449,478,416,398],
[454,0,429,424,434,448,423,420,435],
[452,462,0,441,440,423,489,435,444],
[479,467,450,0,475,435,455,454,461],
[439,457,451,416,0,432,437,433,423],
[442,443,468,456,459,0,436,449,427],
[413,468,402,436,454,455,0,417,420],
[475,471,456,437,458,442,474,0,424],
[493,456,447,430,468,464,471,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,431,470,494,428,413,469,482],
[440,0,503,472,496,502,496,464,485],
[460,388,0,511,449,472,448,452,437],
[421,419,380,0,395,441,382,415,454],
[397,395,442,496,0,457,396,422,468],
[463,389,419,450,434,0,444,437,348],
[478,395,443,509,495,447,0,463,455],
[422,427,439,476,469,454,428,0,474],
[409,406,454,437,423,543,436,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,418,417,423,427,431,452,423],
[451,0,411,438,416,436,432,456,430],
[473,480,0,451,444,447,435,460,458],
[474,453,440,0,463,462,444,460,463],
[468,475,447,428,0,451,436,459,452],
[464,455,444,429,440,0,461,466,460],
[460,459,456,447,455,430,0,461,445],
[439,435,431,431,432,425,430,0,434],
[468,461,433,428,439,431,446,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,437,451,459,444,426,437,419],
[446,0,454,463,443,426,436,468,450],
[454,437,0,449,452,436,424,436,450],
[440,428,442,0,462,444,441,432,449],
[432,448,439,429,0,429,453,439,432],
[447,465,455,447,462,0,451,441,466],
[465,455,467,450,438,440,0,447,427],
[454,423,455,459,452,450,444,0,450],
[472,441,441,442,459,425,464,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,448,461,455,435,447,450,411],
[452,0,468,460,460,444,435,459,449],
[443,423,0,438,426,436,416,442,427],
[430,431,453,0,424,437,417,444,440],
[436,431,465,467,0,475,448,449,451],
[456,447,455,454,416,0,451,486,452],
[444,456,475,474,443,440,0,475,464],
[441,432,449,447,442,405,416,0,414],
[480,442,464,451,440,439,427,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,462,422,503,392,429,320,354],
[443,0,364,370,352,428,537,376,337],
[429,527,0,504,497,428,533,506,532],
[469,521,387,0,516,358,452,350,303],
[388,539,394,375,0,359,498,377,318],
[499,463,463,533,532,0,577,369,382],
[462,354,358,439,393,314,0,488,502],
[571,515,385,541,514,522,403,0,297],
[537,554,359,588,573,509,389,594,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,386,501,389,385,435,458,465,437],
[505,0,464,471,431,476,438,494,502],
[390,427,0,385,387,379,453,426,414],
[502,420,506,0,479,416,481,512,463],
[506,460,504,412,0,449,503,486,464],
[456,415,512,475,442,0,501,496,502],
[433,453,438,410,388,390,0,499,453],
[426,397,465,379,405,395,392,0,447],
[454,389,477,428,427,389,438,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,434,426,428,411,429,447,437],
[459,0,427,435,439,424,425,437,430],
[457,464,0,443,465,463,457,472,441],
[465,456,448,0,476,447,454,458,438],
[463,452,426,415,0,419,438,451,423],
[480,467,428,444,472,0,453,455,459],
[462,466,434,437,453,438,0,458,449],
[444,454,419,433,440,436,433,0,435],
[454,461,450,453,468,432,442,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,460,435,488,488,448,464,435],
[449,0,473,482,519,453,427,481,475],
[431,418,0,404,499,428,392,424,423],
[456,409,487,0,435,463,425,448,455],
[403,372,392,456,0,421,374,419,421],
[403,438,463,428,470,0,454,420,447],
[443,464,499,466,517,437,0,450,467],
[427,410,467,443,472,471,441,0,409],
[456,416,468,436,470,444,424,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,438,446,421,450,439,460,428],
[474,0,423,467,441,468,461,478,440],
[453,468,0,440,437,471,463,479,447],
[445,424,451,0,454,471,478,498,439],
[470,450,454,437,0,498,496,471,461],
[441,423,420,420,393,0,420,455,422],
[452,430,428,413,395,471,0,467,437],
[431,413,412,393,420,436,424,0,425],
[463,451,444,452,430,469,454,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,451,437,393,427,430,453,483],
[489,0,440,418,411,418,440,452,461],
[440,451,0,429,408,463,387,496,443],
[454,473,462,0,477,504,434,462,425],
[498,480,483,414,0,451,467,502,437],
[464,473,428,387,440,0,463,461,492],
[461,451,504,457,424,428,0,432,468],
[438,439,395,429,389,430,459,0,479],
[408,430,448,466,454,399,423,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,474,461,472,449,436,455,453],
[433,0,448,430,439,452,412,450,419],
[417,443,0,416,428,421,403,436,425],
[430,461,475,0,456,436,422,450,429],
[419,452,463,435,0,447,441,467,447],
[442,439,470,455,444,0,444,444,449],
[455,479,488,469,450,447,0,445,434],
[436,441,455,441,424,447,446,0,433],
[438,472,466,462,444,442,457,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,485,444,462,440,462,428,482],
[430,0,436,420,424,400,444,416,418],
[406,455,0,449,434,439,435,436,445],
[447,471,442,0,466,434,445,460,452],
[429,467,457,425,0,461,452,455,484],
[451,491,452,457,430,0,436,470,451],
[429,447,456,446,439,455,0,431,474],
[463,475,455,431,436,421,460,0,458],
[409,473,446,439,407,440,417,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,461,444,437,459,439,440,448],
[429,0,434,434,438,456,438,442,447],
[430,457,0,446,445,441,420,425,436],
[447,457,445,0,451,438,453,425,446],
[454,453,446,440,0,468,438,441,459],
[432,435,450,453,423,0,435,444,451],
[452,453,471,438,453,456,0,447,432],
[451,449,466,466,450,447,444,0,442],
[443,444,455,445,432,440,459,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,475,454,440,513,492,439,479],
[453,0,454,430,448,459,447,497,446],
[416,437,0,442,438,422,436,415,427],
[437,461,449,0,480,477,494,472,518],
[451,443,453,411,0,432,436,438,439],
[378,432,469,414,459,0,442,464,438],
[399,444,455,397,455,449,0,425,472],
[452,394,476,419,453,427,466,0,461],
[412,445,464,373,452,453,419,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,480,420,439,448,446,453,424],
[415,0,440,427,417,464,455,434,435],
[411,451,0,422,440,443,421,391,432],
[471,464,469,0,440,419,473,424,479],
[452,474,451,451,0,487,484,416,456],
[443,427,448,472,404,0,463,416,417],
[445,436,470,418,407,428,0,394,429],
[438,457,500,467,475,475,497,0,459],
[467,456,459,412,435,474,462,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,492,475,459,425,471,456,474],
[414,0,446,420,426,453,423,410,415],
[399,445,0,408,397,434,400,404,427],
[416,471,483,0,458,454,432,457,438],
[432,465,494,433,0,461,433,434,473],
[466,438,457,437,430,0,442,454,440],
[420,468,491,459,458,449,0,436,459],
[435,481,487,434,457,437,455,0,459],
[417,476,464,453,418,451,432,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,438,453,437,434,439,449,429],
[446,0,415,445,438,446,457,469,451],
[453,476,0,452,437,461,439,461,454],
[438,446,439,0,453,460,413,451,451],
[454,453,454,438,0,451,460,491,457],
[457,445,430,431,440,0,417,476,441],
[452,434,452,478,431,474,0,463,445],
[442,422,430,440,400,415,428,0,410],
[462,440,437,440,434,450,446,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,449,468,456,462,461,442,450],
[442,0,448,451,461,463,432,428,458],
[442,443,0,448,458,457,438,449,458],
[423,440,443,0,445,442,422,403,430],
[435,430,433,446,0,441,450,444,451],
[429,428,434,449,450,0,421,442,450],
[430,459,453,469,441,470,0,430,475],
[449,463,442,488,447,449,461,0,470],
[441,433,433,461,440,441,416,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,416,410,412,414,465,393,378],
[412,0,486,416,472,455,450,457,414],
[475,405,0,437,381,426,451,420,422],
[481,475,454,0,441,444,431,409,450],
[479,419,510,450,0,461,463,457,426],
[477,436,465,447,430,0,449,416,469],
[426,441,440,460,428,442,0,444,440],
[498,434,471,482,434,475,447,0,429],
[513,477,469,441,465,422,451,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,444,465,465,460,487,447,472],
[415,0,393,466,473,448,438,452,456],
[447,498,0,473,492,454,422,459,466],
[426,425,418,0,432,453,458,429,463],
[426,418,399,459,0,454,447,437,469],
[431,443,437,438,437,0,440,460,448],
[404,453,469,433,444,451,0,473,459],
[444,439,432,462,454,431,418,0,453],
[419,435,425,428,422,443,432,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,473,486,457,436,441,490,450],
[432,0,439,470,452,439,447,447,438],
[418,452,0,480,444,449,439,469,423],
[405,421,411,0,421,431,459,472,416],
[434,439,447,470,0,473,458,504,445],
[455,452,442,460,418,0,448,493,438],
[450,444,452,432,433,443,0,481,462],
[401,444,422,419,387,398,410,0,416],
[441,453,468,475,446,453,429,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,498,465,481,459,494,481,458],
[448,0,436,471,488,493,480,472,487],
[393,455,0,450,441,438,447,448,426],
[426,420,441,0,455,461,467,477,451],
[410,403,450,436,0,403,438,453,448],
[432,398,453,430,488,0,429,426,409],
[397,411,444,424,453,462,0,478,446],
[410,419,443,414,438,465,413,0,434],
[433,404,465,440,443,482,445,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,444,440,455,460,466,469,450],
[446,0,443,417,450,447,445,420,426],
[447,448,0,453,454,479,442,464,456],
[451,474,438,0,454,475,467,464,462],
[436,441,437,437,0,469,455,439,435],
[431,444,412,416,422,0,415,436,420],
[425,446,449,424,436,476,0,465,429],
[422,471,427,427,452,455,426,0,450],
[441,465,435,429,456,471,462,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,450,460,458,474,445,471,463],
[462,0,459,435,442,483,463,441,440],
[441,432,0,456,443,468,471,459,438],
[431,456,435,0,440,473,428,436,470],
[433,449,448,451,0,473,447,450,468],
[417,408,423,418,418,0,425,451,429],
[446,428,420,463,444,466,0,475,432],
[420,450,432,455,441,440,416,0,441],
[428,451,453,421,423,462,459,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,501,446,466,434,476,460,449],
[458,0,520,447,478,478,471,456,413],
[390,371,0,444,422,411,422,406,397],
[445,444,447,0,428,440,452,430,411],
[425,413,469,463,0,441,437,415,406],
[457,413,480,451,450,0,457,431,414],
[415,420,469,439,454,434,0,404,399],
[431,435,485,461,476,460,487,0,411],
[442,478,494,480,485,477,492,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,477,484,433,546,472,516,506],
[385,0,426,409,406,467,385,441,391],
[414,465,0,455,487,558,437,483,412],
[407,482,436,0,450,511,445,505,405],
[458,485,404,441,0,467,420,467,457],
[345,424,333,380,424,0,366,378,367],
[419,506,454,446,471,525,0,488,450],
[375,450,408,386,424,513,403,0,405],
[385,500,479,486,434,524,441,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,458,450,431,452,456,449,433],
[457,0,468,439,434,448,478,483,451],
[433,423,0,453,444,432,453,465,430],
[441,452,438,0,421,423,429,475,428],
[460,457,447,470,0,425,455,461,448],
[439,443,459,468,466,0,480,472,453],
[435,413,438,462,436,411,0,449,443],
[442,408,426,416,430,419,442,0,437],
[458,440,461,463,443,438,448,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,443,454,456,422,435,464,430],
[449,0,453,446,467,433,446,467,425],
[448,438,0,476,457,414,443,425,444],
[437,445,415,0,417,390,432,418,433],
[435,424,434,474,0,452,428,452,452],
[469,458,477,501,439,0,450,458,459],
[456,445,448,459,463,441,0,444,432],
[427,424,466,473,439,433,447,0,432],
[461,466,447,458,439,432,459,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,451,459,443,416,439,444,454],
[468,0,451,470,445,450,449,466,452],
[440,440,0,454,433,418,415,442,442],
[432,421,437,0,429,431,438,425,434],
[448,446,458,462,0,445,444,447,452],
[475,441,473,460,446,0,458,477,464],
[452,442,476,453,447,433,0,455,454],
[447,425,449,466,444,414,436,0,441],
[437,439,449,457,439,427,437,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,420,440,439,425,465,463,439],
[426,0,427,423,433,457,449,417,417],
[471,464,0,436,456,466,465,456,425],
[451,468,455,0,456,472,467,452,439],
[452,458,435,435,0,460,460,443,416],
[466,434,425,419,431,0,452,424,425],
[426,442,426,424,431,439,0,429,405],
[428,474,435,439,448,467,462,0,452],
[452,474,466,452,475,466,486,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,433,414,417,430,441,417,454],
[471,0,456,434,426,454,428,429,452],
[458,435,0,451,443,465,458,450,470],
[477,457,440,0,468,464,448,448,450],
[474,465,448,423,0,460,421,441,456],
[461,437,426,427,431,0,437,442,445],
[450,463,433,443,470,454,0,444,457],
[474,462,441,443,450,449,447,0,470],
[437,439,421,441,435,446,434,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,430,464,451,418,430,442,424],
[482,0,440,474,496,458,453,453,467],
[461,451,0,481,477,443,444,455,452],
[427,417,410,0,435,406,435,415,415],
[440,395,414,456,0,412,423,409,412],
[473,433,448,485,479,0,461,448,448],
[461,438,447,456,468,430,0,440,421],
[449,438,436,476,482,443,451,0,455],
[467,424,439,476,479,443,470,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,438,432,424,423,439,439,483],
[472,0,450,473,413,491,413,450,497],
[453,441,0,452,424,431,460,461,450],
[459,418,439,0,388,433,411,447,449],
[467,478,467,503,0,440,458,465,481],
[468,400,460,458,451,0,443,466,463],
[452,478,431,480,433,448,0,469,467],
[452,441,430,444,426,425,422,0,442],
[408,394,441,442,410,428,424,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,468,461,441,455,445,464,454],
[436,0,447,428,444,437,440,426,433],
[423,444,0,449,437,446,446,447,441],
[430,463,442,0,449,430,437,453,442],
[450,447,454,442,0,445,452,444,458],
[436,454,445,461,446,0,457,446,451],
[446,451,445,454,439,434,0,459,421],
[427,465,444,438,447,445,432,0,439],
[437,458,450,449,433,440,470,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,439,456,431,453,399,427,430],
[434,0,470,447,464,435,387,418,450],
[452,421,0,454,477,447,446,446,428],
[435,444,437,0,451,449,376,422,425],
[460,427,414,440,0,405,377,404,436],
[438,456,444,442,486,0,405,421,407],
[492,504,445,515,514,486,0,496,483],
[464,473,445,469,487,470,395,0,464],
[461,441,463,466,455,484,408,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,397,430,436,437,430,467,425],
[448,0,399,430,436,422,411,415,342],
[494,492,0,429,483,432,427,454,443],
[461,461,462,0,462,425,432,469,444],
[455,455,408,429,0,433,404,430,425],
[454,469,459,466,458,0,434,507,438],
[461,480,464,459,487,457,0,437,403],
[424,476,437,422,461,384,454,0,452],
[466,549,448,447,466,453,488,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,452,431,421,418,410,454,427],
[494,0,498,469,467,454,416,470,453],
[439,393,0,435,440,441,419,425,440],
[460,422,456,0,470,432,432,442,426],
[470,424,451,421,0,458,439,447,422],
[473,437,450,459,433,0,430,443,443],
[481,475,472,459,452,461,0,463,436],
[437,421,466,449,444,448,428,0,417],
[464,438,451,465,469,448,455,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,379,348,512,584,456,465,361,463],
[512,0,443,603,540,503,537,384,400],
[543,448,0,597,552,437,522,455,591],
[379,288,294,0,363,402,439,385,425],
[307,351,339,528,0,439,481,407,450],
[435,388,454,489,452,0,481,353,417],
[426,354,369,452,410,410,0,409,320],
[530,507,436,506,484,538,482,0,508],
[428,491,300,466,441,474,571,383,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,432,430,477,454,440,485,459],
[460,0,447,403,455,441,453,424,489],
[459,444,0,413,416,482,462,400,494],
[461,488,478,0,485,463,454,423,518],
[414,436,475,406,0,428,431,403,454],
[437,450,409,428,463,0,429,398,480],
[451,438,429,437,460,462,0,419,469],
[406,467,491,468,488,493,472,0,474],
[432,402,397,373,437,411,422,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,426,424,471,488,519,486,487],
[444,0,503,433,531,488,520,522,476],
[465,388,0,497,473,500,505,529,512],
[467,458,394,0,483,464,506,510,470],
[420,360,418,408,0,462,481,534,438],
[403,403,391,427,429,0,402,501,466],
[372,371,386,385,410,489,0,475,422],
[405,369,362,381,357,390,416,0,385],
[404,415,379,421,453,425,469,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,444,461,474,466,450,456,470],
[453,0,433,460,475,451,457,469,492],
[447,458,0,472,459,466,435,451,476],
[430,431,419,0,467,444,435,456,453],
[417,416,432,424,0,426,434,444,449],
[425,440,425,447,465,0,424,442,456],
[441,434,456,456,457,467,0,450,465],
[435,422,440,435,447,449,441,0,446],
[421,399,415,438,442,435,426,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,433,440,465,447,436,449,441],
[430,0,422,437,424,468,436,431,447],
[458,469,0,451,438,470,456,478,452],
[451,454,440,0,454,490,489,458,463],
[426,467,453,437,0,485,452,450,458],
[444,423,421,401,406,0,435,428,438],
[455,455,435,402,439,456,0,444,436],
[442,460,413,433,441,463,447,0,429],
[450,444,439,428,433,453,455,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,394,433,420,444,462,445,422],
[461,0,444,418,430,450,456,461,399],
[497,447,0,468,455,462,454,493,429],
[458,473,423,0,445,451,484,470,431],
[471,461,436,446,0,450,450,463,446],
[447,441,429,440,441,0,455,459,443],
[429,435,437,407,441,436,0,463,415],
[446,430,398,421,428,432,428,0,429],
[469,492,462,460,445,448,476,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,433,434,477,401,453,434,426],
[470,0,450,453,464,462,467,456,425],
[458,441,0,446,470,442,429,441,436],
[457,438,445,0,466,457,458,439,456],
[414,427,421,425,0,399,420,445,439],
[490,429,449,434,492,0,444,466,457],
[438,424,462,433,471,447,0,450,450],
[457,435,450,452,446,425,441,0,428],
[465,466,455,435,452,434,441,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,445,419,404,430,426,422,458],
[464,0,457,454,447,425,442,429,458],
[446,434,0,421,422,420,440,422,461],
[472,437,470,0,467,436,463,444,476],
[487,444,469,424,0,446,459,438,487],
[461,466,471,455,445,0,452,458,490],
[465,449,451,428,432,439,0,452,489],
[469,462,469,447,453,433,439,0,483],
[433,433,430,415,404,401,402,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,449,462,435,439,436,461,464],
[402,0,403,449,414,409,444,458,469],
[442,488,0,455,478,472,495,457,444],
[429,442,436,0,437,451,456,453,436],
[456,477,413,454,0,409,460,456,454],
[452,482,419,440,482,0,473,470,486],
[455,447,396,435,431,418,0,424,426],
[430,433,434,438,435,421,467,0,462],
[427,422,447,455,437,405,465,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,416,434,434,427,446,448,442],
[439,0,437,448,434,420,431,447,437],
[475,454,0,449,424,445,455,471,446],
[457,443,442,0,433,428,456,470,451],
[457,457,467,458,0,468,455,467,443],
[464,471,446,463,423,0,450,472,457],
[445,460,436,435,436,441,0,435,452],
[443,444,420,421,424,419,456,0,424],
[449,454,445,440,448,434,439,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,451,444,445,463,445,449,456],
[439,0,448,435,417,468,429,433,425],
[440,443,0,448,402,442,434,430,456],
[447,456,443,0,445,472,419,451,448],
[446,474,489,446,0,468,449,421,458],
[428,423,449,419,423,0,421,429,415],
[446,462,457,472,442,470,0,460,439],
[442,458,461,440,470,462,431,0,445],
[435,466,435,443,433,476,452,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,432,426,436,438,434,439,445],
[414,0,409,447,407,416,436,407,417],
[459,482,0,458,448,408,494,439,460],
[465,444,433,0,423,446,465,431,417],
[455,484,443,468,0,418,417,406,435],
[453,475,483,445,473,0,437,440,442],
[457,455,397,426,474,454,0,457,461],
[452,484,452,460,485,451,434,0,441],
[446,474,431,474,456,449,430,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,473,435,460,440,467,461,459],
[419,0,459,435,425,459,460,428,471],
[418,432,0,398,434,435,471,416,451],
[456,456,493,0,441,470,474,441,464],
[431,466,457,450,0,478,496,462,461],
[451,432,456,421,413,0,480,457,470],
[424,431,420,417,395,411,0,392,415],
[430,463,475,450,429,434,499,0,482],
[432,420,440,427,430,421,476,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,437,469,472,478,451,475,466],
[428,0,446,490,474,472,414,450,458],
[454,445,0,461,424,457,462,498,471],
[422,401,430,0,437,465,397,420,449],
[419,417,467,454,0,440,394,458,455],
[413,419,434,426,451,0,412,456,483],
[440,477,429,494,497,479,0,462,452],
[416,441,393,471,433,435,429,0,445],
[425,433,420,442,436,408,439,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,440,453,463,415,427,422,419],
[470,0,453,463,454,445,454,458,429],
[451,438,0,451,465,442,427,443,430],
[438,428,440,0,430,418,416,413,420],
[428,437,426,461,0,397,426,410,404],
[476,446,449,473,494,0,434,410,455],
[464,437,464,475,465,457,0,445,448],
[469,433,448,478,481,481,446,0,446],
[472,462,461,471,487,436,443,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,448,442,431,424,434,432,442],
[460,0,476,402,430,445,396,445,422],
[443,415,0,430,431,412,411,416,410],
[449,489,461,0,457,444,443,473,431],
[460,461,460,434,0,432,426,472,442],
[467,446,479,447,459,0,428,444,463],
[457,495,480,448,465,463,0,461,423],
[459,446,475,418,419,447,430,0,409],
[449,469,481,460,449,428,468,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,441,455,447,439,426,449,451],
[468,0,475,443,431,429,455,465,453],
[450,416,0,433,414,428,389,438,437],
[436,448,458,0,427,435,410,451,427],
[444,460,477,464,0,467,447,444,479],
[452,462,463,456,424,0,434,450,452],
[465,436,502,481,444,457,0,479,478],
[442,426,453,440,447,441,412,0,448],
[440,438,454,464,412,439,413,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,586,596,404,513,437,436,582,599],
[305,0,330,402,303,254,346,420,447],
[295,561,0,265,365,316,373,508,607],
[487,489,626,0,478,338,464,510,579],
[378,588,526,413,0,490,314,439,604],
[454,637,575,553,401,0,437,427,592],
[455,545,518,427,577,454,0,602,517],
[309,471,383,381,452,464,289,0,422],
[292,444,284,312,287,299,374,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,442,471,519,433,488,436,462],
[401,0,401,452,460,444,463,410,435],
[449,490,0,460,485,444,484,454,468],
[420,439,431,0,501,437,454,394,466],
[372,431,406,390,0,412,414,372,412],
[458,447,447,454,479,0,479,442,489],
[403,428,407,437,477,412,0,392,452],
[455,481,437,497,519,449,499,0,511],
[429,456,423,425,479,402,439,380,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,420,406,427,395,407,393,417],
[425,0,363,422,415,384,366,419,395],
[471,528,0,482,446,437,478,464,430],
[485,469,409,0,415,387,444,410,434],
[464,476,445,476,0,409,474,450,440],
[496,507,454,504,482,0,476,430,441],
[484,525,413,447,417,415,0,479,447],
[498,472,427,481,441,461,412,0,393],
[474,496,461,457,451,450,444,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,421,440,404,403,445,405,416],
[477,0,445,467,418,442,468,455,443],
[470,446,0,466,448,450,457,453,444],
[451,424,425,0,417,439,463,443,425],
[487,473,443,474,0,454,486,480,458],
[488,449,441,452,437,0,505,432,437],
[446,423,434,428,405,386,0,414,404],
[486,436,438,448,411,459,477,0,418],
[475,448,447,466,433,454,487,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,466,489,453,492,462,467,487],
[465,0,447,467,434,498,460,467,476],
[425,444,0,441,422,449,476,446,467],
[402,424,450,0,436,466,447,445,472],
[438,457,469,455,0,518,502,492,494],
[399,393,442,425,373,0,410,422,430],
[429,431,415,444,389,481,0,434,431],
[424,424,445,446,399,469,457,0,451],
[404,415,424,419,397,461,460,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,357,428,438,440,408,419,483],
[458,0,400,453,456,442,429,398,479],
[534,491,0,494,477,472,459,445,514],
[463,438,397,0,414,431,433,387,480],
[453,435,414,477,0,468,454,443,481],
[451,449,419,460,423,0,426,449,515],
[483,462,432,458,437,465,0,427,447],
[472,493,446,504,448,442,464,0,449],
[408,412,377,411,410,376,444,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,513,461,473,465,432,498,435],
[412,0,431,449,394,427,435,463,393],
[378,460,0,431,445,444,420,429,471],
[430,442,460,0,456,466,482,451,459],
[418,497,446,435,0,458,433,464,432],
[426,464,447,425,433,0,414,455,426],
[459,456,471,409,458,477,0,440,464],
[393,428,462,440,427,436,451,0,423],
[456,498,420,432,459,465,427,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,436,434,428,429,421,453,443],
[439,0,445,486,448,444,459,482,482],
[455,446,0,462,447,441,439,458,460],
[457,405,429,0,460,418,421,457,424],
[463,443,444,431,0,453,426,447,433],
[462,447,450,473,438,0,447,444,461],
[470,432,452,470,465,444,0,446,467],
[438,409,433,434,444,447,445,0,439],
[448,409,431,467,458,430,424,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,477,472,421,475,460,421,488],
[437,0,448,465,421,442,429,417,452],
[414,443,0,436,421,409,443,403,449],
[419,426,455,0,441,448,431,390,448],
[470,470,470,450,0,446,469,423,470],
[416,449,482,443,445,0,449,446,457],
[431,462,448,460,422,442,0,410,438],
[470,474,488,501,468,445,481,0,491],
[403,439,442,443,421,434,453,400,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,447,450,409,424,416,460,442],
[459,0,510,482,421,482,415,459,471],
[444,381,0,444,430,461,429,461,434],
[441,409,447,0,473,456,435,486,455],
[482,470,461,418,0,426,455,447,459],
[467,409,430,435,465,0,428,449,415],
[475,476,462,456,436,463,0,485,445],
[431,432,430,405,444,442,406,0,397],
[449,420,457,436,432,476,446,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,456,476,469,478,459,431,468],
[427,0,438,471,452,455,465,452,460],
[435,453,0,460,464,451,449,417,468],
[415,420,431,0,446,431,455,418,422],
[422,439,427,445,0,445,433,403,439],
[413,436,440,460,446,0,443,418,433],
[432,426,442,436,458,448,0,407,444],
[460,439,474,473,488,473,484,0,454],
[423,431,423,469,452,458,447,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,396,411,445,450,423,425,407],
[459,0,435,423,436,415,416,436,427],
[495,456,0,467,494,436,463,435,479],
[480,468,424,0,477,458,461,475,444],
[446,455,397,414,0,408,423,430,408],
[441,476,455,433,483,0,455,443,449],
[468,475,428,430,468,436,0,458,481],
[466,455,456,416,461,448,433,0,469],
[484,464,412,447,483,442,410,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,431,442,443,438,396,459,411],
[466,0,432,430,439,403,434,451,411],
[460,459,0,478,453,408,422,445,437],
[449,461,413,0,457,454,458,460,431],
[448,452,438,434,0,412,400,425,429],
[453,488,483,437,479,0,441,461,432],
[495,457,469,433,491,450,0,472,481],
[432,440,446,431,466,430,419,0,404],
[480,480,454,460,462,459,410,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,482,494,470,423,449,472,465],
[443,0,462,502,456,437,467,458,462],
[409,429,0,448,436,403,436,486,416],
[397,389,443,0,430,417,424,456,417],
[421,435,455,461,0,445,459,450,459],
[468,454,488,474,446,0,481,484,443],
[442,424,455,467,432,410,0,437,458],
[419,433,405,435,441,407,454,0,437],
[426,429,475,474,432,448,433,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,458,437,476,460,453,481,436],
[445,0,462,434,425,464,447,471,432],
[433,429,0,427,430,426,424,460,433],
[454,457,464,0,444,456,440,471,433],
[415,466,461,447,0,455,450,452,450],
[431,427,465,435,436,0,443,464,434],
[438,444,467,451,441,448,0,467,430],
[410,420,431,420,439,427,424,0,422],
[455,459,458,458,441,457,461,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,473,555,521,537,706,361,452],
[493,0,812,719,565,470,643,374,553],
[418,79,0,446,480,418,480,174,195],
[336,172,445,0,419,361,534,250,283],
[370,326,411,472,0,424,708,248,468],
[354,421,473,530,467,0,580,358,452],
[185,248,411,357,183,311,0,290,390],
[530,517,717,641,643,533,601,0,364],
[439,338,696,608,423,439,501,527,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,460,436,441,467,442,486,497],
[440,0,429,429,392,433,419,405,467],
[431,462,0,460,458,457,451,438,493],
[455,462,431,0,457,479,441,467,531],
[450,499,433,434,0,488,440,472,492],
[424,458,434,412,403,0,433,412,467],
[449,472,440,450,451,458,0,503,472],
[405,486,453,424,419,479,388,0,523],
[394,424,398,360,399,424,419,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,466,448,449,458,472,464,445],
[433,0,445,435,434,442,448,445,433],
[425,446,0,436,427,449,439,430,442],
[443,456,455,0,431,436,432,442,456],
[442,457,464,460,0,431,471,442,461],
[433,449,442,455,460,0,449,429,435],
[419,443,452,459,420,442,0,443,436],
[427,446,461,449,449,462,448,0,451],
[446,458,449,435,430,456,455,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,439,475,434,422,444,433,438],
[429,0,449,454,453,449,437,432,446],
[452,442,0,462,435,445,463,450,450],
[416,437,429,0,450,430,408,432,383],
[457,438,456,441,0,447,445,454,429],
[469,442,446,461,444,0,452,447,438],
[447,454,428,483,446,439,0,459,443],
[458,459,441,459,437,444,432,0,437],
[453,445,441,508,462,453,448,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,414,497,414,402,457,415,419],
[474,0,426,501,444,425,488,450,388],
[477,465,0,479,442,420,469,465,482],
[394,390,412,0,417,417,434,375,381],
[477,447,449,474,0,450,494,496,429],
[489,466,471,474,441,0,476,451,420],
[434,403,422,457,397,415,0,470,397],
[476,441,426,516,395,440,421,0,435],
[472,503,409,510,462,471,494,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,491,443,519,481,515,466,500],
[414,0,456,459,489,457,477,457,473],
[400,435,0,411,446,447,472,464,415],
[448,432,480,0,484,451,479,484,457],
[372,402,445,407,0,423,458,429,448],
[410,434,444,440,468,0,475,451,462],
[376,414,419,412,433,416,0,443,422],
[425,434,427,407,462,440,448,0,460],
[391,418,476,434,443,429,469,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,495,412,397,425,435,417,448],
[499,0,515,457,427,404,534,348,414],
[396,376,0,332,405,353,397,324,380],
[479,434,559,0,388,497,459,412,405],
[494,464,486,503,0,438,503,467,396],
[466,487,538,394,453,0,476,408,377],
[456,357,494,432,388,415,0,395,420],
[474,543,567,479,424,483,496,0,471],
[443,477,511,486,495,514,471,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,457,445,471,409,469,448,498],
[463,0,423,416,462,423,409,439,438],
[434,468,0,470,492,481,449,456,459],
[446,475,421,0,501,423,457,471,447],
[420,429,399,390,0,393,416,468,446],
[482,468,410,468,498,0,463,489,471],
[422,482,442,434,475,428,0,494,471],
[443,452,435,420,423,402,397,0,424],
[393,453,432,444,445,420,420,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,436,449,467,498,470,467,474],
[415,0,424,453,430,462,466,464,451],
[455,467,0,426,447,487,490,464,479],
[442,438,465,0,424,472,454,493,463],
[424,461,444,467,0,490,454,472,455],
[393,429,404,419,401,0,451,455,429],
[421,425,401,437,437,440,0,441,438],
[424,427,427,398,419,436,450,0,428],
[417,440,412,428,436,462,453,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,326,400,579,460,470,450,365],
[402,0,238,458,547,473,383,345,243],
[565,653,0,570,726,573,443,584,499],
[491,433,321,0,609,515,459,513,441],
[312,344,165,282,0,401,289,510,359],
[431,418,318,376,490,0,431,411,487],
[421,508,448,432,602,460,0,614,330],
[441,546,307,378,381,480,277,0,246],
[526,648,392,450,532,404,561,645,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,455,475,435,496,439,443,465],
[422,0,432,457,427,479,433,453,441],
[436,459,0,461,424,474,457,462,450],
[416,434,430,0,415,470,409,417,438],
[456,464,467,476,0,471,439,475,473],
[395,412,417,421,420,0,435,410,416],
[452,458,434,482,452,456,0,445,439],
[448,438,429,474,416,481,446,0,445],
[426,450,441,453,418,475,452,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,408,412,427,438,417,388,409],
[419,0,417,417,415,445,418,410,397],
[483,474,0,440,439,448,438,427,441],
[479,474,451,0,447,481,444,446,457],
[464,476,452,444,0,470,405,417,450],
[453,446,443,410,421,0,374,408,427],
[474,473,453,447,486,517,0,445,444],
[503,481,464,445,474,483,446,0,470],
[482,494,450,434,441,464,447,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,468,466,460,468,440,433,482],
[442,0,449,482,488,483,469,448,458],
[423,442,0,448,456,440,429,421,484],
[425,409,443,0,440,425,413,400,420],
[431,403,435,451,0,456,440,417,432],
[423,408,451,466,435,0,428,410,452],
[451,422,462,478,451,463,0,420,444],
[458,443,470,491,474,481,471,0,464],
[409,433,407,471,459,439,447,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,464,499,452,443,469,469,455],
[457,0,432,471,453,466,476,459,458],
[427,459,0,516,461,444,490,460,464],
[392,420,375,0,431,434,427,405,418],
[439,438,430,460,0,476,445,470,451],
[448,425,447,457,415,0,441,444,430],
[422,415,401,464,446,450,0,441,420],
[422,432,431,486,421,447,450,0,441],
[436,433,427,473,440,461,471,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,469,476,468,477,471,447,441],
[438,0,454,444,469,448,460,435,479],
[422,437,0,461,479,475,467,443,449],
[415,447,430,0,475,448,448,435,443],
[423,422,412,416,0,446,437,411,433],
[414,443,416,443,445,0,451,414,445],
[420,431,424,443,454,440,0,446,463],
[444,456,448,456,480,477,445,0,475],
[450,412,442,448,458,446,428,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,409,393,458,415,433,410,369],
[460,0,444,445,483,462,483,456,438],
[482,447,0,440,481,461,452,420,437],
[498,446,451,0,452,462,445,443,457],
[433,408,410,439,0,432,436,397,406],
[476,429,430,429,459,0,458,440,426],
[458,408,439,446,455,433,0,421,400],
[481,435,471,448,494,451,470,0,413],
[522,453,454,434,485,465,491,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,459,482,466,451,465,473,447],
[469,0,464,451,445,490,467,495,462],
[432,427,0,469,451,440,459,459,443],
[409,440,422,0,433,422,433,449,440],
[425,446,440,458,0,451,429,484,454],
[440,401,451,469,440,0,449,445,457],
[426,424,432,458,462,442,0,455,431],
[418,396,432,442,407,446,436,0,448],
[444,429,448,451,437,434,460,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,469,442,455,457,476,436,432],
[442,0,454,470,474,465,464,464,435],
[422,437,0,423,459,443,456,422,453],
[449,421,468,0,455,438,473,447,453],
[436,417,432,436,0,435,450,444,450],
[434,426,448,453,456,0,446,426,442],
[415,427,435,418,441,445,0,421,415],
[455,427,469,444,447,465,470,0,431],
[459,456,438,438,441,449,476,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,437,454,462,464,395,438,443],
[441,0,467,437,445,459,460,414,453],
[454,424,0,445,464,441,432,459,451],
[437,454,446,0,450,445,409,427,438],
[429,446,427,441,0,418,425,406,436],
[427,432,450,446,473,0,448,423,428],
[496,431,459,482,466,443,0,438,468],
[453,477,432,464,485,468,453,0,475],
[448,438,440,453,455,463,423,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,435,474,449,436,432,448,449],
[445,0,440,452,425,453,446,464,454],
[456,451,0,448,454,453,439,467,449],
[417,439,443,0,416,426,415,433,431],
[442,466,437,475,0,445,452,469,445],
[455,438,438,465,446,0,448,476,438],
[459,445,452,476,439,443,0,473,451],
[443,427,424,458,422,415,418,0,444],
[442,437,442,460,446,453,440,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,442,461,479,437,451,468,486],
[430,0,438,416,449,437,441,442,472],
[449,453,0,430,436,450,442,453,463],
[430,475,461,0,474,461,456,462,479],
[412,442,455,417,0,390,409,429,444],
[454,454,441,430,501,0,419,467,469],
[440,450,449,435,482,472,0,467,488],
[423,449,438,429,462,424,424,0,442],
[405,419,428,412,447,422,403,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,523,432,440,421,442,430,413,460],
[368,0,402,398,387,388,401,393,399],
[459,489,0,445,437,444,455,443,421],
[451,493,446,0,439,428,411,446,459],
[470,504,454,452,0,442,443,444,448],
[449,503,447,463,449,0,438,476,470],
[461,490,436,480,448,453,0,455,468],
[478,498,448,445,447,415,436,0,459],
[431,492,470,432,443,421,423,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,389,418,393,482,429,432,477],
[412,0,380,496,350,387,394,354,388],
[502,511,0,411,428,452,373,475,436],
[473,395,480,0,366,492,382,460,439],
[498,541,463,525,0,489,424,471,483],
[409,504,439,399,402,0,395,450,456],
[462,497,518,509,467,496,0,438,459],
[459,537,416,431,420,441,453,0,495],
[414,503,455,452,408,435,432,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,442,456,452,449,488,398,473],
[377,0,422,444,432,389,461,400,410],
[449,469,0,432,437,415,447,450,431],
[435,447,459,0,460,428,497,421,431],
[439,459,454,431,0,437,466,429,458],
[442,502,476,463,454,0,474,443,440],
[403,430,444,394,425,417,0,389,400],
[493,491,441,470,462,448,502,0,468],
[418,481,460,460,433,451,491,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,434,454,450,452,463,478,433],
[449,0,421,448,442,459,460,461,436],
[457,470,0,472,466,470,488,478,438],
[437,443,419,0,469,475,465,459,450],
[441,449,425,422,0,445,446,471,426],
[439,432,421,416,446,0,429,466,425],
[428,431,403,426,445,462,0,448,454],
[413,430,413,432,420,425,443,0,444],
[458,455,453,441,465,466,437,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,466,445,474,461,463,481,450],
[443,0,435,418,424,439,451,462,408],
[425,456,0,427,446,447,451,460,434],
[446,473,464,0,471,454,465,453,423],
[417,467,445,420,0,436,431,448,407],
[430,452,444,437,455,0,457,453,432],
[428,440,440,426,460,434,0,455,417],
[410,429,431,438,443,438,436,0,434],
[441,483,457,468,484,459,474,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,459,471,461,470,431,436,442],
[434,0,461,449,467,471,447,470,440],
[432,430,0,440,429,433,438,449,423],
[420,442,451,0,439,449,450,429,427],
[430,424,462,452,0,445,435,447,425],
[421,420,458,442,446,0,447,436,437],
[460,444,453,441,456,444,0,471,459],
[455,421,442,462,444,455,420,0,424],
[449,451,468,464,466,454,432,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,444,393,411,428,415,415,428],
[449,0,475,451,420,433,474,447,415],
[447,416,0,432,412,451,438,451,463],
[498,440,459,0,440,440,465,467,426],
[480,471,479,451,0,467,442,469,449],
[463,458,440,451,424,0,478,417,463],
[476,417,453,426,449,413,0,423,437],
[476,444,440,424,422,474,468,0,471],
[463,476,428,465,442,428,454,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,443,418,443,411,416,469,394],
[470,0,463,466,417,482,441,501,430],
[448,428,0,383,425,426,397,477,426],
[473,425,508,0,416,419,401,486,407],
[448,474,466,475,0,463,462,514,406],
[480,409,465,472,428,0,472,492,432],
[475,450,494,490,429,419,0,523,448],
[422,390,414,405,377,399,368,0,359],
[497,461,465,484,485,459,443,532,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,356,362,404,456,471,383,412,450],
[535,0,497,465,456,499,426,432,461],
[529,394,0,405,464,510,419,471,445],
[487,426,486,0,463,513,493,450,530],
[435,435,427,428,0,484,418,419,480],
[420,392,381,378,407,0,338,400,375],
[508,465,472,398,473,553,0,418,472],
[479,459,420,441,472,491,473,0,488],
[441,430,446,361,411,516,419,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,463,450,424,475,457,462,436],
[453,0,487,485,474,464,427,477,466],
[428,404,0,432,431,462,434,462,427],
[441,406,459,0,464,440,417,464,423],
[467,417,460,427,0,463,397,442,402],
[416,427,429,451,428,0,388,455,412],
[434,464,457,474,494,503,0,519,467],
[429,414,429,427,449,436,372,0,425],
[455,425,464,468,489,479,424,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,483,431,437,466,451,416,476],
[407,0,436,426,405,443,385,377,420],
[408,455,0,441,421,454,402,398,424],
[460,465,450,0,395,492,381,437,440],
[454,486,470,496,0,475,401,452,465],
[425,448,437,399,416,0,404,391,408],
[440,506,489,510,490,487,0,447,477],
[475,514,493,454,439,500,444,0,472],
[415,471,467,451,426,483,414,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,430,418,440,430,408,437,424],
[439,0,454,430,442,432,422,380,443],
[461,437,0,455,421,433,436,421,476],
[473,461,436,0,427,442,407,454,456],
[451,449,470,464,0,423,437,409,455],
[461,459,458,449,468,0,435,439,471],
[483,469,455,484,454,456,0,425,477],
[454,511,470,437,482,452,466,0,479],
[467,448,415,435,436,420,414,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,444,459,449,465,462,418,469],
[442,0,430,478,437,462,427,443,458],
[447,461,0,478,449,452,437,446,450],
[432,413,413,0,447,442,429,409,466],
[442,454,442,444,0,447,422,438,459],
[426,429,439,449,444,0,432,427,427],
[429,464,454,462,469,459,0,464,474],
[473,448,445,482,453,464,427,0,462],
[422,433,441,425,432,464,417,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,471,454,471,457,458,463,440],
[438,0,437,445,441,461,456,438,433],
[420,454,0,452,450,448,435,466,446],
[437,446,439,0,431,443,442,433,426],
[420,450,441,460,0,430,454,432,451],
[434,430,443,448,461,0,423,429,431],
[433,435,456,449,437,468,0,451,437],
[428,453,425,458,459,462,440,0,441],
[451,458,445,465,440,460,454,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,385,366,431,429,477,430,408],
[457,0,416,479,434,478,526,497,412],
[506,475,0,391,444,518,528,488,458],
[525,412,500,0,432,494,535,490,388],
[460,457,447,459,0,413,410,474,418],
[462,413,373,397,478,0,533,426,412],
[414,365,363,356,481,358,0,405,384],
[461,394,403,401,417,465,486,0,383],
[483,479,433,503,473,479,507,508,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,447,428,443,485,448,477,480],
[407,0,407,409,469,422,418,460,459],
[444,484,0,437,456,469,427,465,464],
[463,482,454,0,440,465,475,458,478],
[448,422,435,451,0,437,443,440,464],
[406,469,422,426,454,0,431,432,477],
[443,473,464,416,448,460,0,463,465],
[414,431,426,433,451,459,428,0,436],
[411,432,427,413,427,414,426,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,458,437,474,432,466,437,461],
[429,0,447,428,463,442,457,427,464],
[433,444,0,457,461,440,442,447,487],
[454,463,434,0,501,459,441,477,486],
[417,428,430,390,0,411,428,416,428],
[459,449,451,432,480,0,431,451,466],
[425,434,449,450,463,460,0,436,457],
[454,464,444,414,475,440,455,0,455],
[430,427,404,405,463,425,434,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,470,445,437,461,422,455,439],
[425,0,436,409,420,449,404,443,432],
[421,455,0,432,417,431,402,436,429],
[446,482,459,0,437,453,449,448,457],
[454,471,474,454,0,450,441,433,444],
[430,442,460,438,441,0,454,456,443],
[469,487,489,442,450,437,0,455,458],
[436,448,455,443,458,435,436,0,439],
[452,459,462,434,447,448,433,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,493,436,468,450,458,457,481],
[415,0,446,442,442,432,429,450,451],
[398,445,0,429,444,455,407,429,466],
[455,449,462,0,455,425,445,478,466],
[423,449,447,436,0,438,418,439,454],
[441,459,436,466,453,0,447,464,460],
[433,462,484,446,473,444,0,452,477],
[434,441,462,413,452,427,439,0,471],
[410,440,425,425,437,431,414,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,475,442,464,446,466,402,465],
[456,0,462,477,469,452,478,428,495],
[416,429,0,428,423,456,439,458,399],
[449,414,463,0,448,447,433,394,408],
[427,422,468,443,0,453,411,422,465],
[445,439,435,444,438,0,450,393,451],
[425,413,452,458,480,441,0,444,448],
[489,463,433,497,469,498,447,0,477],
[426,396,492,483,426,440,443,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,426,458,409,447,450,417,420],
[437,0,428,442,406,441,456,404,427],
[465,463,0,466,441,448,449,422,455],
[433,449,425,0,419,453,446,409,423],
[482,485,450,472,0,471,460,441,457],
[444,450,443,438,420,0,434,429,444],
[441,435,442,445,431,457,0,426,428],
[474,487,469,482,450,462,465,0,439],
[471,464,436,468,434,447,463,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,418,449,446,456,454,411,440],
[427,0,447,430,414,431,440,412,444],
[473,444,0,459,436,478,458,470,445],
[442,461,432,0,439,429,471,426,432],
[445,477,455,452,0,473,479,455,419],
[435,460,413,462,418,0,476,443,467],
[437,451,433,420,412,415,0,433,407],
[480,479,421,465,436,448,458,0,435],
[451,447,446,459,472,424,484,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,405,453,429,419,455,458,419],
[481,0,494,442,493,477,502,482,456],
[486,397,0,409,449,442,459,479,436],
[438,449,482,0,458,471,481,447,450],
[462,398,442,433,0,420,447,450,429],
[472,414,449,420,471,0,484,459,436],
[436,389,432,410,444,407,0,394,408],
[433,409,412,444,441,432,497,0,430],
[472,435,455,441,462,455,483,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,417,401,414,427,438,419,418],
[486,0,459,451,441,488,488,450,461],
[474,432,0,431,433,441,423,437,425],
[490,440,460,0,451,461,462,453,475],
[477,450,458,440,0,473,429,425,465],
[464,403,450,430,418,0,424,426,441],
[453,403,468,429,462,467,0,414,446],
[472,441,454,438,466,465,477,0,476],
[473,430,466,416,426,450,445,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,453,440,432,441,455,430,437],
[459,0,451,432,422,451,449,444,429],
[438,440,0,422,439,470,460,438,442],
[451,459,469,0,429,427,453,452,455],
[459,469,452,462,0,463,466,444,454],
[450,440,421,464,428,0,463,425,442],
[436,442,431,438,425,428,0,438,417],
[461,447,453,439,447,466,453,0,455],
[454,462,449,436,437,449,474,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,452,417,397,401,401,406,428],
[453,0,427,393,447,408,408,442,431],
[439,464,0,470,402,447,465,440,434],
[474,498,421,0,454,453,436,483,472],
[494,444,489,437,0,432,431,456,439],
[490,483,444,438,459,0,453,456,460],
[490,483,426,455,460,438,0,479,439],
[485,449,451,408,435,435,412,0,449],
[463,460,457,419,452,431,452,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,424,446,398,447,475,443,512],
[419,0,437,387,439,461,443,405,451],
[467,454,0,417,435,437,433,421,441],
[445,504,474,0,455,450,511,478,486],
[493,452,456,436,0,487,450,442,511],
[444,430,454,441,404,0,450,421,462],
[416,448,458,380,441,441,0,411,461],
[448,486,470,413,449,470,480,0,477],
[379,440,450,405,380,429,430,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,465,452,431,442,414,465,457],
[419,0,439,413,423,449,421,440,427],
[426,452,0,461,447,440,414,417,415],
[439,478,430,0,430,468,407,483,452],
[460,468,444,461,0,476,460,459,448],
[449,442,451,423,415,0,406,469,422],
[477,470,477,484,431,485,0,503,475],
[426,451,474,408,432,422,388,0,422],
[434,464,476,439,443,469,416,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,451,423,440,415,478,449,419],
[432,0,432,427,420,430,443,379,404],
[440,459,0,476,438,445,463,435,426],
[468,464,415,0,466,450,448,441,433],
[451,471,453,425,0,434,448,433,437],
[476,461,446,441,457,0,471,450,431],
[413,448,428,443,443,420,0,460,412],
[442,512,456,450,458,441,431,0,448],
[472,487,465,458,454,460,479,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,457,470,434,456,522,373,498],
[414,0,462,411,470,413,505,453,536],
[434,429,0,400,479,437,470,390,522],
[421,480,491,0,468,469,458,429,521],
[457,421,412,423,0,423,406,507,547],
[435,478,454,422,468,0,490,492,489],
[369,386,421,433,485,401,0,404,398],
[518,438,501,462,384,399,487,0,530],
[393,355,369,370,344,402,493,361,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,437,421,431,429,426,439,428],
[447,0,460,439,433,445,456,436,440],
[454,431,0,424,443,441,437,441,419],
[470,452,467,0,445,456,457,446,443],
[460,458,448,446,0,447,447,440,466],
[462,446,450,435,444,0,462,463,442],
[465,435,454,434,444,429,0,444,446],
[452,455,450,445,451,428,447,0,456],
[463,451,472,448,425,449,445,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,470,452,449,481,434,445,478],
[440,0,462,464,466,479,481,462,470],
[421,429,0,439,454,466,429,438,438],
[439,427,452,0,442,436,426,429,443],
[442,425,437,449,0,470,419,430,438],
[410,412,425,455,421,0,415,425,449],
[457,410,462,465,472,476,0,450,462],
[446,429,453,462,461,466,441,0,445],
[413,421,453,448,453,442,429,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,459,424,417,453,446,501,453],
[498,0,472,469,397,476,447,461,457],
[432,419,0,468,401,451,410,479,424],
[467,422,423,0,423,428,455,479,481],
[474,494,490,468,0,516,444,471,483],
[438,415,440,463,375,0,426,459,425],
[445,444,481,436,447,465,0,483,473],
[390,430,412,412,420,432,408,0,399],
[438,434,467,410,408,466,418,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,458,459,463,484,473,420,493],
[427,0,439,451,446,440,442,448,458],
[433,452,0,452,406,467,444,463,453],
[432,440,439,0,473,467,411,449,490],
[428,445,485,418,0,432,408,440,430],
[407,451,424,424,459,0,426,432,454],
[418,449,447,480,483,465,0,500,452],
[471,443,428,442,451,459,391,0,435],
[398,433,438,401,461,437,439,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,417,424,446,424,417,416,416],
[434,0,430,429,435,428,460,443,405],
[474,461,0,463,447,443,429,463,454],
[467,462,428,0,446,453,458,412,431],
[445,456,444,445,0,432,456,410,432],
[467,463,448,438,459,0,470,400,453],
[474,431,462,433,435,421,0,412,429],
[475,448,428,479,481,491,479,0,435],
[475,486,437,460,459,438,462,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,453,456,432,443,421,414,426],
[458,0,443,431,443,414,426,439,426],
[438,448,0,436,431,428,428,411,416],
[435,460,455,0,419,424,441,434,455],
[459,448,460,472,0,451,459,439,471],
[448,477,463,467,440,0,442,406,456],
[470,465,463,450,432,449,0,449,428],
[477,452,480,457,452,485,442,0,461],
[465,465,475,436,420,435,463,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,446,509,454,486,413,507,475],
[414,0,370,530,375,453,410,482,491],
[445,521,0,446,539,475,397,476,503],
[382,361,445,0,392,403,340,400,478],
[437,516,352,499,0,452,457,399,548],
[405,438,416,488,439,0,402,435,477],
[478,481,494,551,434,489,0,507,535],
[384,409,415,491,492,456,384,0,498],
[416,400,388,413,343,414,356,393,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,450,440,459,465,460,442,485],
[419,0,435,462,461,440,450,459,464],
[441,456,0,440,440,446,456,466,479],
[451,429,451,0,447,427,465,440,460],
[432,430,451,444,0,468,451,446,477],
[426,451,445,464,423,0,439,445,453],
[431,441,435,426,440,452,0,448,471],
[449,432,425,451,445,446,443,0,478],
[406,427,412,431,414,438,420,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,440,428,431,443,424,454,452],
[466,0,468,434,441,448,461,471,471],
[451,423,0,446,436,430,439,449,456],
[463,457,445,0,444,448,448,470,477],
[460,450,455,447,0,444,453,451,457],
[448,443,461,443,447,0,453,462,458],
[467,430,452,443,438,438,0,462,457],
[437,420,442,421,440,429,429,0,432],
[439,420,435,414,434,433,434,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,430,425,449,439,426,416,422],
[438,0,476,438,460,450,429,426,421],
[461,415,0,413,433,428,424,451,413],
[466,453,478,0,480,439,432,439,450],
[442,431,458,411,0,426,421,426,436],
[452,441,463,452,465,0,456,449,450],
[465,462,467,459,470,435,0,427,459],
[475,465,440,452,465,442,464,0,431],
[469,470,478,441,455,441,432,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,467,428,417,423,389,444,466],
[453,0,450,448,447,433,403,450,459],
[424,441,0,445,424,425,407,467,460],
[463,443,446,0,438,433,410,455,470],
[474,444,467,453,0,449,424,481,469],
[468,458,466,458,442,0,450,470,467],
[502,488,484,481,467,441,0,503,500],
[447,441,424,436,410,421,388,0,431],
[425,432,431,421,422,424,391,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,425,455,446,460,457,441,450],
[433,0,439,472,442,458,450,436,481],
[466,452,0,474,440,465,460,455,463],
[436,419,417,0,446,478,433,426,454],
[445,449,451,445,0,484,454,441,450],
[431,433,426,413,407,0,416,416,405],
[434,441,431,458,437,475,0,435,451],
[450,455,436,465,450,475,456,0,461],
[441,410,428,437,441,486,440,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,423,430,423,435,435,412,437],
[458,0,432,435,432,441,435,428,437],
[468,459,0,453,472,460,432,446,455],
[461,456,438,0,449,450,426,446,443],
[468,459,419,442,0,433,443,444,438],
[456,450,431,441,458,0,444,443,460],
[456,456,459,465,448,447,0,442,452],
[479,463,445,445,447,448,449,0,445],
[454,454,436,448,453,431,439,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,433,461,438,458,469,432,457],
[429,0,464,470,445,449,463,440,442],
[458,427,0,450,442,481,468,457,480],
[430,421,441,0,431,426,472,429,424],
[453,446,449,460,0,449,467,445,464],
[433,442,410,465,442,0,453,450,442],
[422,428,423,419,424,438,0,426,463],
[459,451,434,462,446,441,465,0,456],
[434,449,411,467,427,449,428,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,391,396,401,431,435,423,397],
[471,0,404,413,404,481,445,452,473],
[500,487,0,461,451,474,414,461,488],
[495,478,430,0,429,459,439,438,410],
[490,487,440,462,0,535,478,431,496],
[460,410,417,432,356,0,450,416,417],
[456,446,477,452,413,441,0,413,460],
[468,439,430,453,460,475,478,0,451],
[494,418,403,481,395,474,431,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,460,455,453,455,464,444,457],
[435,0,459,485,454,461,454,452,451],
[431,432,0,471,439,453,445,453,444],
[436,406,420,0,426,433,434,416,433],
[438,437,452,465,0,457,455,437,450],
[436,430,438,458,434,0,448,459,429],
[427,437,446,457,436,443,0,462,444],
[447,439,438,475,454,432,429,0,444],
[434,440,447,458,441,462,447,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,445,470,451,463,447,472,460],
[454,0,440,435,440,482,446,460,462],
[446,451,0,463,468,450,437,472,479],
[421,456,428,0,453,446,426,442,450],
[440,451,423,438,0,456,414,463,456],
[428,409,441,445,435,0,420,480,432],
[444,445,454,465,477,471,0,477,479],
[419,431,419,449,428,411,414,0,448],
[431,429,412,441,435,459,412,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,435,415,434,445,421,450,465],
[477,0,465,465,451,472,457,441,479],
[456,426,0,448,436,459,448,455,471],
[476,426,443,0,433,473,447,461,441],
[457,440,455,458,0,474,431,445,494],
[446,419,432,418,417,0,419,408,448],
[470,434,443,444,460,472,0,455,482],
[441,450,436,430,446,483,436,0,475],
[426,412,420,450,397,443,409,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,444,430,465,414,425,468,434],
[454,0,444,404,457,426,417,449,448],
[447,447,0,420,467,427,423,452,410],
[461,487,471,0,480,440,455,450,457],
[426,434,424,411,0,409,417,419,435],
[477,465,464,451,482,0,440,460,453],
[466,474,468,436,474,451,0,431,410],
[423,442,439,441,472,431,460,0,467],
[457,443,481,434,456,438,481,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,477,482,411,465,402,438,438],
[460,0,510,510,441,447,413,414,463],
[414,381,0,465,370,416,404,414,398],
[409,381,426,0,407,420,387,405,430],
[480,450,521,484,0,436,462,457,446],
[426,444,475,471,455,0,385,402,439],
[489,478,487,504,429,506,0,474,486],
[453,477,477,486,434,489,417,0,460],
[453,428,493,461,445,452,405,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,454,462,455,476,479,469,440],
[423,0,439,460,424,447,454,437,434],
[437,452,0,474,461,450,479,464,448],
[429,431,417,0,408,440,440,448,431],
[436,467,430,483,0,459,459,478,451],
[415,444,441,451,432,0,454,447,439],
[412,437,412,451,432,437,0,445,430],
[422,454,427,443,413,444,446,0,442],
[451,457,443,460,440,452,461,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,464,457,483,447,462,459,445],
[406,0,439,422,420,426,430,432,420],
[427,452,0,406,440,432,445,434,397],
[434,469,485,0,449,467,452,458,450],
[408,471,451,442,0,450,431,434,420],
[444,465,459,424,441,0,456,450,427],
[429,461,446,439,460,435,0,431,431],
[432,459,457,433,457,441,460,0,415],
[446,471,494,441,471,464,460,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,410,456,440,431,416,422,435],
[471,0,431,463,446,446,458,434,473],
[481,460,0,468,463,435,458,478,465],
[435,428,423,0,437,442,455,418,442],
[451,445,428,454,0,439,435,450,459],
[460,445,456,449,452,0,440,448,449],
[475,433,433,436,456,451,0,435,469],
[469,457,413,473,441,443,456,0,449],
[456,418,426,449,432,442,422,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,444,482,473,444,429,472,449],
[427,0,450,446,456,423,416,435,432],
[447,441,0,470,470,452,421,469,445],
[409,445,421,0,439,417,389,389,404],
[418,435,421,452,0,453,387,442,401],
[447,468,439,474,438,0,432,453,444],
[462,475,470,502,504,459,0,435,461],
[419,456,422,502,449,438,456,0,445],
[442,459,446,487,490,447,430,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,347,381,501,326,317,430,474,492],
[544,0,352,375,534,386,460,509,574],
[510,539,0,462,526,679,333,564,572],
[390,516,429,0,552,464,454,610,506],
[565,357,365,339,0,486,553,597,476],
[574,505,212,427,405,0,306,565,430],
[461,431,558,437,338,585,0,558,415],
[417,382,327,281,294,326,333,0,456],
[399,317,319,385,415,461,476,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,439,431,423,437,457,437,444],
[458,0,447,441,461,481,480,461,472],
[452,444,0,443,445,465,427,438,485],
[460,450,448,0,445,444,447,444,460],
[468,430,446,446,0,461,443,462,451],
[454,410,426,447,430,0,447,433,446],
[434,411,464,444,448,444,0,436,442],
[454,430,453,447,429,458,455,0,477],
[447,419,406,431,440,445,449,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,464,439,428,448,439,475,467],
[454,0,446,453,422,433,449,439,466],
[427,445,0,431,445,424,429,457,446],
[452,438,460,0,412,462,451,425,446],
[463,469,446,479,0,445,460,445,457],
[443,458,467,429,446,0,463,459,473],
[452,442,462,440,431,428,0,460,444],
[416,452,434,466,446,432,431,0,445],
[424,425,445,445,434,418,447,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,471,483,462,465,416,496,482],
[412,0,403,449,439,430,398,407,429],
[420,488,0,465,451,506,418,438,465],
[408,442,426,0,425,471,459,444,470],
[429,452,440,466,0,461,407,418,432],
[426,461,385,420,430,0,427,428,453],
[475,493,473,432,484,464,0,453,492],
[395,484,453,447,473,463,438,0,455],
[409,462,426,421,459,438,399,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,447,433,436,470,446,455,463],
[477,0,483,485,456,429,433,453,473],
[444,408,0,412,418,428,403,434,469],
[458,406,479,0,450,469,462,454,526],
[455,435,473,441,0,414,425,448,453],
[421,462,463,422,477,0,431,462,478],
[445,458,488,429,466,460,0,467,506],
[436,438,457,437,443,429,424,0,469],
[428,418,422,365,438,413,385,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,449,455,449,468,443,452,449],
[420,0,419,418,392,441,436,438,431],
[442,472,0,448,437,436,450,450,441],
[436,473,443,0,442,459,461,452,418],
[442,499,454,449,0,453,461,459,451],
[423,450,455,432,438,0,421,461,428],
[448,455,441,430,430,470,0,459,457],
[439,453,441,439,432,430,432,0,432],
[442,460,450,473,440,463,434,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,458,433,441,457,439,462,436],
[447,0,441,452,413,424,436,441,423],
[433,450,0,446,439,472,448,476,435],
[458,439,445,0,438,464,428,493,447],
[450,478,452,453,0,472,428,454,480],
[434,467,419,427,419,0,429,447,431],
[452,455,443,463,463,462,0,509,456],
[429,450,415,398,437,444,382,0,440],
[455,468,456,444,411,460,435,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,456,462,464,454,431,449,446],
[455,0,447,445,465,434,449,453,452],
[435,444,0,456,469,464,460,454,453],
[429,446,435,0,456,472,446,462,454],
[427,426,422,435,0,426,447,452,435],
[437,457,427,419,465,0,435,437,443],
[460,442,431,445,444,456,0,449,464],
[442,438,437,429,439,454,442,0,468],
[445,439,438,437,456,448,427,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,425,435,432,456,449,454,434],
[444,0,433,450,430,450,459,430,443],
[466,458,0,466,451,474,462,460,441],
[456,441,425,0,447,470,447,451,419],
[459,461,440,444,0,458,462,473,442],
[435,441,417,421,433,0,463,435,428],
[442,432,429,444,429,428,0,432,434],
[437,461,431,440,418,456,459,0,451],
[457,448,450,472,449,463,457,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,388,408,412,399,379,337,418],
[468,0,479,466,485,456,395,422,445],
[503,412,0,489,492,470,451,443,457],
[483,425,402,0,411,441,369,350,411],
[479,406,399,480,0,445,445,380,421],
[492,435,421,450,446,0,405,372,365],
[512,496,440,522,446,486,0,383,468],
[554,469,448,541,511,519,508,0,436],
[473,446,434,480,470,526,423,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,461,457,478,432,450,416,454],
[436,0,435,427,446,404,428,423,419],
[430,456,0,444,491,423,434,428,435],
[434,464,447,0,460,410,416,408,421],
[413,445,400,431,0,420,420,407,422],
[459,487,468,481,471,0,437,449,441],
[441,463,457,475,471,454,0,461,459],
[475,468,463,483,484,442,430,0,446],
[437,472,456,470,469,450,432,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,478,505,378,500,455,463,449],
[454,0,459,350,345,342,370,561,446],
[413,432,0,386,256,478,410,476,538],
[386,541,505,0,359,429,463,398,519],
[513,546,635,532,0,471,367,594,571],
[391,549,413,462,420,0,378,470,427],
[436,521,481,428,524,513,0,443,468],
[428,330,415,493,297,421,448,0,422],
[442,445,353,372,320,464,423,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,458,462,490,476,445,452,451],
[430,0,416,446,450,426,456,450,436],
[433,475,0,459,496,442,443,457,480],
[429,445,432,0,465,421,429,443,436],
[401,441,395,426,0,389,412,400,443],
[415,465,449,470,502,0,442,466,486],
[446,435,448,462,479,449,0,499,483],
[439,441,434,448,491,425,392,0,417],
[440,455,411,455,448,405,408,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,417,419,441,450,446,413,428],
[484,0,461,451,464,493,476,444,460],
[474,430,0,441,441,454,450,446,466],
[472,440,450,0,455,469,473,454,456],
[450,427,450,436,0,441,456,428,446],
[441,398,437,422,450,0,445,443,440],
[445,415,441,418,435,446,0,441,453],
[478,447,445,437,463,448,450,0,461],
[463,431,425,435,445,451,438,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,442,458,457,447,484,476,465],
[416,0,417,411,428,420,439,430,425],
[449,474,0,456,439,447,459,450,459],
[433,480,435,0,435,438,440,448,428],
[434,463,452,456,0,448,445,455,440],
[444,471,444,453,443,0,445,437,460],
[407,452,432,451,446,446,0,422,435],
[415,461,441,443,436,454,469,0,445],
[426,466,432,463,451,431,456,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,397,411,423,395,428,429,449],
[482,0,428,407,422,404,421,443,469],
[494,463,0,428,439,396,428,440,478],
[480,484,463,0,462,421,448,441,488],
[468,469,452,429,0,431,424,452,460],
[496,487,495,470,460,0,444,451,467],
[463,470,463,443,467,447,0,436,473],
[462,448,451,450,439,440,455,0,460],
[442,422,413,403,431,424,418,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,492,467,439,458,440,461,428],
[436,0,471,466,452,486,455,463,425],
[399,420,0,433,421,450,418,423,397],
[424,425,458,0,418,437,448,435,436],
[452,439,470,473,0,469,451,449,412],
[433,405,441,454,422,0,418,452,390],
[451,436,473,443,440,473,0,449,406],
[430,428,468,456,442,439,442,0,449],
[463,466,494,455,479,501,485,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,423,493,461,457,451,438,493],
[445,0,427,458,437,448,434,457,466],
[468,464,0,500,461,451,434,476,519],
[398,433,391,0,437,408,412,403,441],
[430,454,430,454,0,449,416,412,485],
[434,443,440,483,442,0,445,457,497],
[440,457,457,479,475,446,0,445,481],
[453,434,415,488,479,434,446,0,475],
[398,425,372,450,406,394,410,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,454,445,443,424,449,447,452],
[454,0,478,456,459,464,443,438,461],
[437,413,0,432,411,414,426,425,436],
[446,435,459,0,435,452,456,422,433],
[448,432,480,456,0,443,446,437,445],
[467,427,477,439,448,0,443,417,438],
[442,448,465,435,445,448,0,430,442],
[444,453,466,469,454,474,461,0,446],
[439,430,455,458,446,453,449,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,473,485,465,483,477,467,488],
[446,0,467,491,463,466,473,440,466],
[418,424,0,462,453,443,446,424,469],
[406,400,429,0,444,407,383,435,415],
[426,428,438,447,0,435,428,449,422],
[408,425,448,484,456,0,447,436,437],
[414,418,445,508,463,444,0,454,458],
[424,451,467,456,442,455,437,0,453],
[403,425,422,476,469,454,433,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,511,517,355,531,538,498,452],
[377,0,375,374,352,407,332,367,385],
[380,516,0,486,404,483,466,489,417],
[374,517,405,0,409,526,439,412,482],
[536,539,487,482,0,522,556,415,425],
[360,484,408,365,369,0,389,342,356],
[353,559,425,452,335,502,0,434,462],
[393,524,402,479,476,549,457,0,409],
[439,506,474,409,466,535,429,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,439,440,434,468,436,432,436],
[436,0,454,465,453,440,438,433,443],
[452,437,0,426,458,439,430,430,441],
[451,426,465,0,455,463,417,442,450],
[457,438,433,436,0,424,427,440,452],
[423,451,452,428,467,0,444,440,435],
[455,453,461,474,464,447,0,440,436],
[459,458,461,449,451,451,451,0,432],
[455,448,450,441,439,456,455,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,461,445,450,456,460,431,436],
[447,0,464,452,446,432,448,444,438],
[430,427,0,436,439,413,440,436,420],
[446,439,455,0,442,432,433,435,428],
[441,445,452,449,0,441,443,435,426],
[435,459,478,459,450,0,455,446,427],
[431,443,451,458,448,436,0,441,440],
[460,447,455,456,456,445,450,0,451],
[455,453,471,463,465,464,451,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,472,460,416,469,476,434,413],
[445,0,455,470,449,504,493,467,466],
[419,436,0,409,391,438,489,423,427],
[431,421,482,0,423,457,474,436,483],
[475,442,500,468,0,500,480,453,470],
[422,387,453,434,391,0,442,426,430],
[415,398,402,417,411,449,0,435,441],
[457,424,468,455,438,465,456,0,420],
[478,425,464,408,421,461,450,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,457,456,483,441,463,439,455],
[434,0,432,441,469,456,442,421,457],
[434,459,0,433,453,412,437,421,464],
[435,450,458,0,485,474,450,450,472],
[408,422,438,406,0,451,422,401,450],
[450,435,479,417,440,0,428,417,459],
[428,449,454,441,469,463,0,423,466],
[452,470,470,441,490,474,468,0,500],
[436,434,427,419,441,432,425,391,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,432,441,459,437,452,434,440],
[455,0,448,450,458,453,460,434,425],
[459,443,0,451,445,433,451,433,472],
[450,441,440,0,474,457,459,447,460],
[432,433,446,417,0,427,448,440,445],
[454,438,458,434,464,0,466,466,451],
[439,431,440,432,443,425,0,426,445],
[457,457,458,444,451,425,465,0,459],
[451,466,419,431,446,440,446,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,442,460,444,468,436,466,444],
[444,0,443,468,444,428,439,445,433],
[449,448,0,461,436,431,428,434,434],
[431,423,430,0,434,439,432,423,430],
[447,447,455,457,0,445,470,481,453],
[423,463,460,452,446,0,427,446,442],
[455,452,463,459,421,464,0,460,446],
[425,446,457,468,410,445,431,0,441],
[447,458,457,461,438,449,445,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,436,489,460,466,463,457,449],
[457,0,462,459,489,462,474,466,425],
[455,429,0,482,445,460,452,454,483],
[402,432,409,0,431,443,434,418,454],
[431,402,446,460,0,456,449,435,436],
[425,429,431,448,435,0,480,430,430],
[428,417,439,457,442,411,0,437,438],
[434,425,437,473,456,461,454,0,453],
[442,466,408,437,455,461,453,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,422,426,467,515,397,416,524],
[455,0,422,441,475,467,439,368,456],
[469,469,0,391,466,422,409,399,453],
[465,450,500,0,436,438,462,475,509],
[424,416,425,455,0,420,399,432,462],
[376,424,469,453,471,0,391,413,447],
[494,452,482,429,492,500,0,456,498],
[475,523,492,416,459,478,435,0,533],
[367,435,438,382,429,444,393,358,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,418,438,436,434,456,427,460],
[422,0,448,451,417,438,443,435,463],
[473,443,0,464,434,451,442,458,454],
[453,440,427,0,399,428,431,432,459],
[455,474,457,492,0,449,435,471,495],
[457,453,440,463,442,0,433,461,471],
[435,448,449,460,456,458,0,469,481],
[464,456,433,459,420,430,422,0,449],
[431,428,437,432,396,420,410,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,402,422,436,383,441,385,444],
[492,0,460,498,465,431,497,418,433],
[489,431,0,478,487,465,534,468,492],
[469,393,413,0,417,446,450,430,425],
[455,426,404,474,0,471,475,459,454],
[508,460,426,445,420,0,447,407,467],
[450,394,357,441,416,444,0,388,412],
[506,473,423,461,432,484,503,0,434],
[447,458,399,466,437,424,479,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,442,423,450,434,470,447,432],
[468,0,439,451,456,461,465,469,448],
[449,452,0,448,485,461,473,466,428],
[468,440,443,0,462,456,464,456,452],
[441,435,406,429,0,438,462,444,412],
[457,430,430,435,453,0,467,469,423],
[421,426,418,427,429,424,0,436,410],
[444,422,425,435,447,422,455,0,438],
[459,443,463,439,479,468,481,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,434,420,424,425,418,432,431],
[474,0,465,438,442,421,439,465,458],
[457,426,0,438,421,436,451,449,430],
[471,453,453,0,430,454,445,456,469],
[467,449,470,461,0,443,433,428,440],
[466,470,455,437,448,0,430,420,465],
[473,452,440,446,458,461,0,441,465],
[459,426,442,435,463,471,450,0,458],
[460,433,461,422,451,426,426,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,449,434,438,437,435,456,435],
[432,0,430,440,400,433,426,421,409],
[442,461,0,433,409,420,434,443,424],
[457,451,458,0,442,442,456,475,443],
[453,491,482,449,0,445,462,443,471],
[454,458,471,449,446,0,451,459,444],
[456,465,457,435,429,440,0,450,426],
[435,470,448,416,448,432,441,0,430],
[456,482,467,448,420,447,465,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,426,435,455,432,413,465,427],
[445,0,469,408,483,453,442,474,439],
[465,422,0,422,482,455,433,470,427],
[456,483,469,0,482,442,422,476,444],
[436,408,409,409,0,414,384,462,405],
[459,438,436,449,477,0,426,479,455],
[478,449,458,469,507,465,0,481,434],
[426,417,421,415,429,412,410,0,394],
[464,452,464,447,486,436,457,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,466,466,466,462,459,426,460],
[410,0,428,431,418,423,440,411,424],
[425,463,0,458,463,446,453,428,449],
[425,460,433,0,438,454,440,440,454],
[425,473,428,453,0,449,443,435,435],
[429,468,445,437,442,0,435,447,442],
[432,451,438,451,448,456,0,432,454],
[465,480,463,451,456,444,459,0,454],
[431,467,442,437,456,449,437,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,479,468,452,444,463,472,487],
[399,0,445,438,446,438,417,432,443],
[412,446,0,438,446,425,452,441,459],
[423,453,453,0,463,449,460,462,457],
[439,445,445,428,0,451,453,425,438],
[447,453,466,442,440,0,454,467,470],
[428,474,439,431,438,437,0,445,442],
[419,459,450,429,466,424,446,0,461],
[404,448,432,434,453,421,449,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,461,449,448,451,430,441,464],
[467,0,460,465,448,452,426,423,446],
[430,431,0,444,412,433,406,409,415],
[442,426,447,0,434,450,417,427,450],
[443,443,479,457,0,456,452,464,437],
[440,439,458,441,435,0,413,420,452],
[461,465,485,474,439,478,0,450,471],
[450,468,482,464,427,471,441,0,453],
[427,445,476,441,454,439,420,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,472,505,483,526,427,496,485],
[397,0,466,470,421,523,477,423,441],
[419,425,0,429,428,469,408,423,431],
[386,421,462,0,433,468,409,416,411],
[408,470,463,458,0,506,419,421,427],
[365,368,422,423,385,0,424,413,431],
[464,414,483,482,472,467,0,428,423],
[395,468,468,475,470,478,463,0,445],
[406,450,460,480,464,460,468,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,479,473,500,453,467,462,422],
[442,0,446,489,501,441,477,436,466],
[412,445,0,437,411,439,451,426,446],
[418,402,454,0,416,407,398,420,408],
[391,390,480,475,0,422,450,414,455],
[438,450,452,484,469,0,492,462,421],
[424,414,440,493,441,399,0,436,420],
[429,455,465,471,477,429,455,0,446],
[469,425,445,483,436,470,471,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,494,469,473,472,460,505,380],
[537,0,600,519,444,437,555,588,445],
[397,291,0,441,332,384,397,465,425],
[422,372,450,0,387,422,390,490,438],
[418,447,559,504,0,509,475,469,488],
[419,454,507,469,382,0,463,490,410],
[431,336,494,501,416,428,0,490,413],
[386,303,426,401,422,401,401,0,450],
[511,446,466,453,403,481,478,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,432,464,424,435,447,453,437],
[452,0,440,462,449,425,446,441,436],
[459,451,0,461,445,455,457,461,447],
[427,429,430,0,413,409,424,429,419],
[467,442,446,478,0,437,469,456,455],
[456,466,436,482,454,0,448,453,461],
[444,445,434,467,422,443,0,432,451],
[438,450,430,462,435,438,459,0,453],
[454,455,444,472,436,430,440,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,405,432,415,428,429,430,417],
[466,0,441,434,422,431,455,437,443],
[486,450,0,454,419,452,469,450,450],
[459,457,437,0,425,447,452,439,432],
[476,469,472,466,0,470,468,461,445],
[463,460,439,444,421,0,471,438,454],
[462,436,422,439,423,420,0,434,425],
[461,454,441,452,430,453,457,0,445],
[474,448,441,459,446,437,466,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,423,465,451,401,454,392,441],
[429,0,424,474,472,441,451,414,420],
[468,467,0,481,493,434,464,430,453],
[426,417,410,0,441,447,432,401,456],
[440,419,398,450,0,417,460,412,413],
[490,450,457,444,474,0,462,440,423],
[437,440,427,459,431,429,0,411,415],
[499,477,461,490,479,451,480,0,443],
[450,471,438,435,478,468,476,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,450,462,443,462,460,426,419],
[423,0,493,459,447,478,471,435,462],
[441,398,0,410,415,440,450,396,423],
[429,432,481,0,452,462,444,437,429],
[448,444,476,439,0,499,438,476,442],
[429,413,451,429,392,0,442,391,450],
[431,420,441,447,453,449,0,417,420],
[465,456,495,454,415,500,474,0,435],
[472,429,468,462,449,441,471,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,431,410,426,438,451,428,428],
[486,0,431,425,421,466,443,449,459],
[460,460,0,425,438,462,448,453,437],
[481,466,466,0,455,441,477,455,464],
[465,470,453,436,0,448,459,436,458],
[453,425,429,450,443,0,449,442,438],
[440,448,443,414,432,442,0,424,447],
[463,442,438,436,455,449,467,0,453],
[463,432,454,427,433,453,444,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,443,438,506,498,437,478,468],
[433,0,520,462,449,475,455,494,471],
[448,371,0,418,427,450,466,391,433],
[453,429,473,0,475,493,450,473,468],
[385,442,464,416,0,426,421,410,432],
[393,416,441,398,465,0,411,418,416],
[454,436,425,441,470,480,0,424,435],
[413,397,500,418,481,473,467,0,424],
[423,420,458,423,459,475,456,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,449,443,439,420,447,430,440],
[438,0,434,460,421,444,428,441,452],
[442,457,0,459,451,439,441,442,448],
[448,431,432,0,449,449,438,427,441],
[452,470,440,442,0,435,453,446,461],
[471,447,452,442,456,0,469,445,460],
[444,463,450,453,438,422,0,446,447],
[461,450,449,464,445,446,445,0,434],
[451,439,443,450,430,431,444,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,425,435,451,388,421,415,431],
[467,0,429,458,448,432,438,442,465],
[466,462,0,462,446,438,428,450,468],
[456,433,429,0,432,432,424,425,429],
[440,443,445,459,0,442,443,428,448],
[503,459,453,459,449,0,448,445,439],
[470,453,463,467,448,443,0,435,465],
[476,449,441,466,463,446,456,0,464],
[460,426,423,462,443,452,426,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,469,445,457,449,448,459,426],
[434,0,460,444,453,438,444,459,413],
[422,431,0,428,435,442,434,449,420],
[446,447,463,0,467,459,443,468,458],
[434,438,456,424,0,458,459,444,431],
[442,453,449,432,433,0,418,447,446],
[443,447,457,448,432,473,0,449,441],
[432,432,442,423,447,444,442,0,422],
[465,478,471,433,460,445,450,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,393,404,408,448,385,446,395],
[450,0,400,401,452,425,394,441,442],
[498,491,0,439,458,479,454,490,467],
[487,490,452,0,446,427,417,455,439],
[483,439,433,445,0,449,408,478,443],
[443,466,412,464,442,0,426,455,455],
[506,497,437,474,483,465,0,494,486],
[445,450,401,436,413,436,397,0,474],
[496,449,424,452,448,436,405,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,474,432,448,458,473,467,472],
[434,0,435,437,430,412,451,476,449],
[417,456,0,410,450,437,406,463,444],
[459,454,481,0,452,409,416,476,445],
[443,461,441,439,0,440,438,422,435],
[433,479,454,482,451,0,481,481,477],
[418,440,485,475,453,410,0,454,442],
[424,415,428,415,469,410,437,0,444],
[419,442,447,446,456,414,449,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,454,445,455,483,432,451,484],
[443,0,426,487,455,444,490,443,479],
[437,465,0,452,448,438,445,444,491],
[446,404,439,0,452,431,386,399,459],
[436,436,443,439,0,463,404,447,470],
[408,447,453,460,428,0,422,451,475],
[459,401,446,505,487,469,0,470,534],
[440,448,447,492,444,440,421,0,466],
[407,412,400,432,421,416,357,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,479,457,501,475,481,430,452],
[405,0,437,422,455,430,424,418,423],
[412,454,0,425,436,444,435,407,433],
[434,469,466,0,465,460,475,461,478],
[390,436,455,426,0,449,434,407,457],
[416,461,447,431,442,0,442,409,437],
[410,467,456,416,457,449,0,422,455],
[461,473,484,430,484,482,469,0,470],
[439,468,458,413,434,454,436,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,411,439,417,436,449,447,463],
[435,0,392,420,424,434,453,418,448],
[480,499,0,460,439,462,466,464,465],
[452,471,431,0,448,454,467,446,472],
[474,467,452,443,0,456,469,473,461],
[455,457,429,437,435,0,451,445,449],
[442,438,425,424,422,440,0,436,451],
[444,473,427,445,418,446,455,0,450],
[428,443,426,419,430,442,440,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,427,450,410,440,448,444,440],
[463,0,448,437,428,424,440,447,442],
[464,443,0,446,413,438,437,432,466],
[441,454,445,0,423,442,469,464,463],
[481,463,478,468,0,447,480,445,483],
[451,467,453,449,444,0,453,445,464],
[443,451,454,422,411,438,0,447,444],
[447,444,459,427,446,446,444,0,454],
[451,449,425,428,408,427,447,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,385,437,477,443,407,493,471,488],
[506,0,445,492,532,446,536,552,534],
[454,446,0,522,478,432,489,518,510],
[414,399,369,0,407,339,426,385,430],
[448,359,413,484,0,357,354,469,470],
[484,445,459,552,534,0,520,485,496],
[398,355,402,465,537,371,0,440,481],
[420,339,373,506,422,406,451,0,469],
[403,357,381,461,421,395,410,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,342,454,452,445,495,481,486,469],
[549,0,444,559,538,562,551,482,535],
[437,447,0,555,474,483,563,425,468],
[439,332,336,0,485,448,493,395,453],
[446,353,417,406,0,421,494,411,436],
[396,329,408,443,470,0,472,437,435],
[410,340,328,398,397,419,0,405,434],
[405,409,466,496,480,454,486,0,418],
[422,356,423,438,455,456,457,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,383,404,396,397,442,453,394,403],
[508,0,439,481,438,450,515,446,459],
[487,452,0,495,446,488,496,438,426],
[495,410,396,0,447,456,492,441,427],
[494,453,445,444,0,461,454,446,447],
[449,441,403,435,430,0,448,413,390],
[438,376,395,399,437,443,0,398,395],
[497,445,453,450,445,478,493,0,399],
[488,432,465,464,444,501,496,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,463,441,456,437,449,440,438],
[432,0,456,433,438,455,457,451,444],
[428,435,0,418,452,455,429,432,438],
[450,458,473,0,445,458,449,448,447],
[435,453,439,446,0,441,438,449,447],
[454,436,436,433,450,0,445,451,438],
[442,434,462,442,453,446,0,446,450],
[451,440,459,443,442,440,445,0,433],
[453,447,453,444,444,453,441,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,414,422,474,425,439,397,440],
[423,0,444,405,447,463,394,391,418],
[477,447,0,449,465,467,465,452,437],
[469,486,442,0,449,432,449,452,467],
[417,444,426,442,0,403,425,428,481],
[466,428,424,459,488,0,410,419,474],
[452,497,426,442,466,481,0,448,460],
[494,500,439,439,463,472,443,0,507],
[451,473,454,424,410,417,431,384,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,458,458,451,454,456,467,436],
[445,0,459,452,464,459,473,464,463],
[433,432,0,433,428,450,440,458,456],
[433,439,458,0,434,440,455,467,454],
[440,427,463,457,0,457,455,459,453],
[437,432,441,451,434,0,462,451,460],
[435,418,451,436,436,429,0,438,444],
[424,427,433,424,432,440,453,0,440],
[455,428,435,437,438,431,447,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,404,452,460,455,463,429,430],
[494,0,442,471,482,469,478,439,469],
[487,449,0,444,470,434,480,439,456],
[439,420,447,0,450,459,465,438,427],
[431,409,421,441,0,426,433,411,399],
[436,422,457,432,465,0,462,448,404],
[428,413,411,426,458,429,0,405,398],
[462,452,452,453,480,443,486,0,433],
[461,422,435,464,492,487,493,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,411,402,453,442,405,454,439],
[430,0,389,421,456,428,408,416,458],
[480,502,0,440,509,483,456,451,495],
[489,470,451,0,504,486,445,423,466],
[438,435,382,387,0,407,356,403,437],
[449,463,408,405,484,0,388,436,447],
[486,483,435,446,535,503,0,459,485],
[437,475,440,468,488,455,432,0,484],
[452,433,396,425,454,444,406,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,412,361,436,443,442,410,400],
[502,0,471,451,489,470,500,434,447],
[479,420,0,442,457,460,441,449,403],
[530,440,449,0,486,410,487,427,463],
[455,402,434,405,0,422,448,393,419],
[448,421,431,481,469,0,449,422,427],
[449,391,450,404,443,442,0,438,414],
[481,457,442,464,498,469,453,0,425],
[491,444,488,428,472,464,477,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,415,436,457,451,407,445,448],
[461,0,457,458,467,443,450,451,488],
[476,434,0,441,479,461,431,453,457],
[455,433,450,0,454,442,416,445,440],
[434,424,412,437,0,426,428,420,447],
[440,448,430,449,465,0,448,417,454],
[484,441,460,475,463,443,0,472,473],
[446,440,438,446,471,474,419,0,476],
[443,403,434,451,444,437,418,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,435,465,470,454,439,424,434],
[433,0,452,445,453,457,446,436,432],
[456,439,0,453,463,472,462,430,433],
[426,446,438,0,465,442,454,403,409],
[421,438,428,426,0,469,440,410,413],
[437,434,419,449,422,0,433,430,393],
[452,445,429,437,451,458,0,453,414],
[467,455,461,488,481,461,438,0,460],
[457,459,458,482,478,498,477,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,433,419,465,443,464,433,422],
[482,0,469,459,466,470,464,410,449],
[458,422,0,456,416,424,424,444,414],
[472,432,435,0,434,455,440,449,416],
[426,425,475,457,0,460,471,471,468],
[448,421,467,436,431,0,456,461,452],
[427,427,467,451,420,435,0,417,447],
[458,481,447,442,420,430,474,0,448],
[469,442,477,475,423,439,444,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,517,476,460,508,488,433,513],
[419,0,465,445,361,452,411,425,420],
[374,426,0,460,370,416,428,433,400],
[415,446,431,0,414,499,362,348,356],
[431,530,521,477,0,540,480,489,450],
[383,439,475,392,351,0,393,417,387],
[403,480,463,529,411,498,0,485,466],
[458,466,458,543,402,474,406,0,432],
[378,471,491,535,441,504,425,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,437,452,429,444,433,434,428],
[471,0,469,463,444,443,450,460,445],
[454,422,0,467,432,442,418,443,436],
[439,428,424,0,418,423,410,432,443],
[462,447,459,473,0,445,428,450,447],
[447,448,449,468,446,0,424,438,433],
[458,441,473,481,463,467,0,447,455],
[457,431,448,459,441,453,444,0,441],
[463,446,455,448,444,458,436,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,421,460,449,448,443,448,448],
[487,0,457,473,467,452,457,443,446],
[470,434,0,481,445,454,462,451,433],
[431,418,410,0,438,445,428,451,433],
[442,424,446,453,0,447,475,449,417],
[443,439,437,446,444,0,446,445,423],
[448,434,429,463,416,445,0,437,433],
[443,448,440,440,442,446,454,0,421],
[443,445,458,458,474,468,458,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,439,491,418,456,492,474,466],
[410,0,439,486,408,364,472,471,441],
[452,452,0,487,413,417,440,472,446],
[400,405,404,0,416,397,432,479,463],
[473,483,478,475,0,418,449,460,453],
[435,527,474,494,473,0,479,477,483],
[399,419,451,459,442,412,0,381,415],
[417,420,419,412,431,414,510,0,435],
[425,450,445,428,438,408,476,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,463,451,454,425,462,448,462],
[442,0,455,417,452,424,452,437,440],
[428,436,0,443,446,397,455,446,438],
[440,474,448,0,456,441,475,421,478],
[437,439,445,435,0,425,452,424,450],
[466,467,494,450,466,0,489,436,451],
[429,439,436,416,439,402,0,413,428],
[443,454,445,470,467,455,478,0,479],
[429,451,453,413,441,440,463,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,439,440,499,474,444,441,419],
[428,0,425,433,459,459,430,394,387],
[452,466,0,450,472,486,464,428,455],
[451,458,441,0,484,456,437,417,433],
[392,432,419,407,0,448,411,391,367],
[417,432,405,435,443,0,433,439,381],
[447,461,427,454,480,458,0,432,409],
[450,497,463,474,500,452,459,0,430],
[472,504,436,458,524,510,482,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,463,458,430,464,442,453,438],
[445,0,427,443,436,456,435,441,432],
[428,464,0,446,441,447,441,429,434],
[433,448,445,0,459,443,427,459,442],
[461,455,450,432,0,441,439,453,447],
[427,435,444,448,450,0,446,450,442],
[449,456,450,464,452,445,0,465,441],
[438,450,462,432,438,441,426,0,435],
[453,459,457,449,444,449,450,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,455,440,433,417,472,407,451],
[454,0,425,426,469,426,454,432,454],
[436,466,0,462,470,446,459,450,470],
[451,465,429,0,467,458,442,433,452],
[458,422,421,424,0,427,428,420,425],
[474,465,445,433,464,0,433,432,458],
[419,437,432,449,463,458,0,452,444],
[484,459,441,458,471,459,439,0,469],
[440,437,421,439,466,433,447,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,493,438,450,449,425,455,435],
[422,0,482,440,436,444,446,473,435],
[398,409,0,415,416,402,397,450,403],
[453,451,476,0,440,480,426,444,424],
[441,455,475,451,0,461,428,456,416],
[442,447,489,411,430,0,455,435,412],
[466,445,494,465,463,436,0,463,460],
[436,418,441,447,435,456,428,0,379],
[456,456,488,467,475,479,431,512,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,451,444,455,430,451,458,447],
[437,0,458,440,449,453,448,423,431],
[440,433,0,433,438,440,435,435,410],
[447,451,458,0,446,470,463,449,432],
[436,442,453,445,0,445,443,450,423],
[461,438,451,421,446,0,451,444,436],
[440,443,456,428,448,440,0,464,441],
[433,468,456,442,441,447,427,0,422],
[444,460,481,459,468,455,450,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,485,412,444,414,424,430,431],
[438,0,444,417,445,418,410,417,419],
[406,447,0,414,426,404,430,432,434],
[479,474,477,0,488,436,435,455,444],
[447,446,465,403,0,426,410,432,448],
[477,473,487,455,465,0,433,460,455],
[467,481,461,456,481,458,0,437,468],
[461,474,459,436,459,431,454,0,463],
[460,472,457,447,443,436,423,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,426,419,442,398,424,471,456],
[470,0,385,412,517,408,478,421,445],
[465,506,0,428,450,447,432,407,474],
[472,479,463,0,441,411,467,398,435],
[449,374,441,450,0,450,490,403,431],
[493,483,444,480,441,0,504,453,476],
[467,413,459,424,401,387,0,395,401],
[420,470,484,493,488,438,496,0,455],
[435,446,417,456,460,415,490,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,423,451,453,453,435,442,469],
[452,0,444,439,499,419,484,418,499],
[468,447,0,436,475,418,495,472,486],
[440,452,455,0,511,454,484,476,497],
[438,392,416,380,0,364,415,377,450],
[438,472,473,437,527,0,484,457,481],
[456,407,396,407,476,407,0,374,490],
[449,473,419,415,514,434,517,0,504],
[422,392,405,394,441,410,401,387,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,464,457,460,440,451,455,456],
[428,0,455,433,466,428,432,449,436],
[427,436,0,444,453,449,437,454,453],
[434,458,447,0,455,433,434,448,455],
[431,425,438,436,0,424,428,445,420],
[451,463,442,458,467,0,441,472,460],
[440,459,454,457,463,450,0,464,471],
[436,442,437,443,446,419,427,0,448],
[435,455,438,436,471,431,420,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,412,467,394,484,469,430,382],
[468,0,426,472,394,458,500,452,403],
[479,465,0,474,474,480,468,438,427],
[424,419,417,0,420,418,445,411,330],
[497,497,417,471,0,503,531,449,453],
[407,433,411,473,388,0,448,429,389],
[422,391,423,446,360,443,0,440,355],
[461,439,453,480,442,462,451,0,400],
[509,488,464,561,438,502,536,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,435,423,444,429,441,449,420],
[435,0,432,427,455,427,454,441,418],
[456,459,0,430,464,440,461,454,446],
[468,464,461,0,474,446,441,465,446],
[447,436,427,417,0,413,427,422,434],
[462,464,451,445,478,0,468,459,461],
[450,437,430,450,464,423,0,459,450],
[442,450,437,426,469,432,432,0,431],
[471,473,445,445,457,430,441,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,435,429,435,410,420,414,445],
[504,0,479,429,417,443,476,423,453],
[456,412,0,418,406,399,449,400,419],
[462,462,473,0,438,434,482,448,427],
[456,474,485,453,0,464,503,422,487],
[481,448,492,457,427,0,493,462,464],
[471,415,442,409,388,398,0,415,462],
[477,468,491,443,469,429,476,0,446],
[446,438,472,464,404,427,429,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,462,447,465,448,438,456,450],
[434,0,478,465,473,457,448,464,471],
[429,413,0,429,446,430,439,421,432],
[444,426,462,0,459,452,442,440,462],
[426,418,445,432,0,421,428,439,441],
[443,434,461,439,470,0,425,429,440],
[453,443,452,449,463,466,0,457,446],
[435,427,470,451,452,462,434,0,431],
[441,420,459,429,450,451,445,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,400,518,493,441,463,399,526],
[450,0,442,487,489,434,460,423,490],
[491,449,0,516,496,435,473,377,484],
[373,404,375,0,460,344,414,349,435],
[398,402,395,431,0,390,440,471,394],
[450,457,456,547,501,0,501,361,527],
[428,431,418,477,451,390,0,411,519],
[492,468,514,542,420,530,480,0,521],
[365,401,407,456,497,364,372,370,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,445,453,478,465,463,467,448],
[466,0,428,425,442,454,434,439,454],
[446,463,0,445,479,478,452,438,475],
[438,466,446,0,460,470,449,441,457],
[413,449,412,431,0,459,460,437,436],
[426,437,413,421,432,0,431,429,439],
[428,457,439,442,431,460,0,439,452],
[424,452,453,450,454,462,452,0,457],
[443,437,416,434,455,452,439,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,435,427,448,469,444,451,465],
[428,0,436,425,456,476,436,434,480],
[456,455,0,456,466,457,442,476,471],
[464,466,435,0,457,482,462,464,472],
[443,435,425,434,0,438,438,438,442],
[422,415,434,409,453,0,433,429,479],
[447,455,449,429,453,458,0,448,474],
[440,457,415,427,453,462,443,0,448],
[426,411,420,419,449,412,417,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,434,478,455,448,458,434,452],
[397,0,414,428,421,406,407,410,428],
[457,477,0,459,428,456,450,443,465],
[413,463,432,0,427,434,425,409,452],
[436,470,463,464,0,459,422,462,436],
[443,485,435,457,432,0,444,431,457],
[433,484,441,466,469,447,0,424,454],
[457,481,448,482,429,460,467,0,446],
[439,463,426,439,455,434,437,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,448,441,444,442,426,432,460],
[472,0,455,442,443,423,422,446,465],
[443,436,0,430,464,448,452,458,472],
[450,449,461,0,449,436,418,434,464],
[447,448,427,442,0,442,427,459,461],
[449,468,443,455,449,0,434,461,476],
[465,469,439,473,464,457,0,456,478],
[459,445,433,457,432,430,435,0,444],
[431,426,419,427,430,415,413,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,376,415,377,395,379,442,433,432],
[515,0,465,442,454,455,496,482,502],
[476,426,0,436,437,442,453,479,468],
[514,449,455,0,456,439,459,499,472],
[496,437,454,435,0,467,483,479,441],
[512,436,449,452,424,0,488,485,463],
[449,395,438,432,408,403,0,473,464],
[458,409,412,392,412,406,418,0,433],
[459,389,423,419,450,428,427,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,452,455,478,462,460,440,445],
[443,0,443,441,441,448,451,421,461],
[439,448,0,448,464,456,453,455,448],
[436,450,443,0,418,451,463,433,453],
[413,450,427,473,0,446,442,428,433],
[429,443,435,440,445,0,441,413,437],
[431,440,438,428,449,450,0,425,436],
[451,470,436,458,463,478,466,0,448],
[446,430,443,438,458,454,455,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,454,464,433,420,429,448,435],
[432,0,417,431,420,406,410,442,437],
[437,474,0,434,434,411,437,444,445],
[427,460,457,0,434,420,432,453,419],
[458,471,457,457,0,450,448,452,436],
[471,485,480,471,441,0,471,463,440],
[462,481,454,459,443,420,0,462,449],
[443,449,447,438,439,428,429,0,413],
[456,454,446,472,455,451,442,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,385,461,411,452,448,414,421,481],
[506,0,496,476,471,500,491,411,484],
[430,395,0,463,475,429,414,421,450],
[480,415,428,0,494,474,443,449,446],
[439,420,416,397,0,447,447,446,384],
[443,391,462,417,444,0,452,420,460],
[477,400,477,448,444,439,0,462,464],
[470,480,470,442,445,471,429,0,425],
[410,407,441,445,507,431,427,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,477,444,438,402,469,441,439],
[434,0,505,434,458,440,446,439,434],
[414,386,0,389,368,376,389,390,397],
[447,457,502,0,444,439,463,452,482],
[453,433,523,447,0,453,472,452,438],
[489,451,515,452,438,0,452,465,473],
[422,445,502,428,419,439,0,431,451],
[450,452,501,439,439,426,460,0,433],
[452,457,494,409,453,418,440,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,447,443,448,429,444,435,454],
[402,0,443,427,426,452,406,422,443],
[444,448,0,413,419,449,445,446,426],
[448,464,478,0,446,439,419,472,429],
[443,465,472,445,0,446,450,431,462],
[462,439,442,452,445,0,436,423,449],
[447,485,446,472,441,455,0,434,463],
[456,469,445,419,460,468,457,0,436],
[437,448,465,462,429,442,428,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,369,513,451,376,398,430,439,423],
[522,0,490,474,341,460,402,493,522],
[378,401,0,345,308,388,277,368,352],
[440,417,546,0,338,415,359,453,392],
[515,550,583,553,0,469,431,558,553],
[493,431,503,476,422,0,482,471,426],
[461,489,614,532,460,409,0,493,506],
[452,398,523,438,333,420,398,0,472],
[468,369,539,499,338,465,385,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,451,450,448,427,447,448,449],
[463,0,450,447,441,453,449,450,442],
[440,441,0,447,456,430,454,426,459],
[441,444,444,0,467,418,465,442,455],
[443,450,435,424,0,425,439,451,438],
[464,438,461,473,466,0,473,456,482],
[444,442,437,426,452,418,0,435,453],
[443,441,465,449,440,435,456,0,442],
[442,449,432,436,453,409,438,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,404,441,466,472,410,485,398],
[440,0,447,443,436,459,406,451,409],
[487,444,0,446,470,469,478,482,470],
[450,448,445,0,462,456,431,507,419],
[425,455,421,429,0,455,439,457,436],
[419,432,422,435,436,0,428,465,437],
[481,485,413,460,452,463,0,488,439],
[406,440,409,384,434,426,403,0,431],
[493,482,421,472,455,454,452,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,412,406,437,453,452,400,423],
[490,0,420,409,435,480,502,383,436],
[479,471,0,456,454,500,457,466,443],
[485,482,435,0,476,486,502,485,475],
[454,456,437,415,0,457,474,419,414],
[438,411,391,405,434,0,482,418,432],
[439,389,434,389,417,409,0,412,409],
[491,508,425,406,472,473,479,0,448],
[468,455,448,416,477,459,482,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,508,494,484,510,446,476,493],
[458,0,396,404,389,470,403,366,419],
[383,495,0,492,465,472,416,465,506],
[397,487,399,0,378,425,420,370,419],
[407,502,426,513,0,427,438,460,452],
[381,421,419,466,464,0,406,420,442],
[445,488,475,471,453,485,0,472,468],
[415,525,426,521,431,471,419,0,432],
[398,472,385,472,439,449,423,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,450,442,451,454,462,431,431],
[472,0,467,467,443,445,453,446,442],
[441,424,0,441,421,441,457,418,412],
[449,424,450,0,439,463,467,454,454],
[440,448,470,452,0,465,467,457,450],
[437,446,450,428,426,0,459,429,438],
[429,438,434,424,424,432,0,453,444],
[460,445,473,437,434,462,438,0,442],
[460,449,479,437,441,453,447,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,440,434,444,457,425,446,458],
[439,0,443,452,445,455,427,448,446],
[451,448,0,461,439,450,417,430,426],
[457,439,430,0,436,448,418,436,447],
[447,446,452,455,0,464,440,433,451],
[434,436,441,443,427,0,411,448,429],
[466,464,474,473,451,480,0,453,442],
[445,443,461,455,458,443,438,0,455],
[433,445,465,444,440,462,449,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,445,448,426,432,463,426,408],
[451,0,477,461,445,423,493,473,444],
[446,414,0,479,444,420,464,430,397],
[443,430,412,0,446,415,451,434,418],
[465,446,447,445,0,449,448,437,443],
[459,468,471,476,442,0,472,467,429],
[428,398,427,440,443,419,0,427,414],
[465,418,461,457,454,424,464,0,450],
[483,447,494,473,448,462,477,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,475,467,434,465,462,463,444],
[421,0,476,451,433,445,462,435,437],
[416,415,0,465,415,431,434,405,434],
[424,440,426,0,422,443,449,406,413],
[457,458,476,469,0,470,472,440,461],
[426,446,460,448,421,0,428,429,443],
[429,429,457,442,419,463,0,447,432],
[428,456,486,485,451,462,444,0,439],
[447,454,457,478,430,448,459,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,439,422,412,432,446,387,420],
[452,0,419,347,324,356,445,386,373],
[452,472,0,421,366,433,439,410,384],
[469,544,470,0,443,442,497,524,443],
[479,567,525,448,0,457,436,462,485],
[459,535,458,449,434,0,444,437,428],
[445,446,452,394,455,447,0,432,487],
[504,505,481,367,429,454,459,0,396],
[471,518,507,448,406,463,404,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,428,467,456,453,421,460,466],
[450,0,418,462,443,427,438,456,460],
[463,473,0,490,453,430,421,473,454],
[424,429,401,0,406,427,425,450,399],
[435,448,438,485,0,441,429,465,415],
[438,464,461,464,450,0,457,491,424],
[470,453,470,466,462,434,0,497,473],
[431,435,418,441,426,400,394,0,428],
[425,431,437,492,476,467,418,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,427,445,538,455,463,466,454],
[441,0,471,438,521,513,467,415,512],
[464,420,0,451,493,448,469,445,448],
[446,453,440,0,522,451,469,442,479],
[353,370,398,369,0,330,398,427,354],
[436,378,443,440,561,0,441,444,473],
[428,424,422,422,493,450,0,384,395],
[425,476,446,449,464,447,507,0,449],
[437,379,443,412,537,418,496,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,343,452,428,420,346,374,436],
[493,0,474,489,507,495,477,442,473],
[548,417,0,501,504,502,509,470,487],
[439,402,390,0,474,403,415,373,391],
[463,384,387,417,0,414,417,344,444],
[471,396,389,488,477,0,403,431,396],
[545,414,382,476,474,488,0,400,444],
[517,449,421,518,547,460,491,0,517],
[455,418,404,500,447,495,447,374,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,452,454,420,429,445,435,439],
[461,0,478,442,430,428,445,455,436],
[439,413,0,452,391,404,401,424,422],
[437,449,439,0,403,408,430,433,440],
[471,461,500,488,0,454,465,452,442],
[462,463,487,483,437,0,441,434,460],
[446,446,490,461,426,450,0,453,451],
[456,436,467,458,439,457,438,0,453],
[452,455,469,451,449,431,440,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,464,407,473,458,420,450,422],
[452,0,421,444,459,434,413,421,439],
[427,470,0,459,450,461,462,435,483],
[484,447,432,0,483,468,427,482,440],
[418,432,441,408,0,410,379,418,410],
[433,457,430,423,481,0,429,419,434],
[471,478,429,464,512,462,0,486,448],
[441,470,456,409,473,472,405,0,430],
[469,452,408,451,481,457,443,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,468,445,417,398,491,468,507],
[417,0,435,470,423,403,475,360,383],
[423,456,0,467,496,399,423,388,460],
[446,421,424,0,418,408,398,425,457],
[474,468,395,473,0,410,409,375,458],
[493,488,492,483,481,0,526,423,535],
[400,416,468,493,482,365,0,447,464],
[423,531,503,466,516,468,444,0,454],
[384,508,431,434,433,356,427,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,515,377,396,461,511,444,463,517],
[376,0,391,441,392,419,309,499,499],
[514,500,0,491,469,489,405,488,499],
[495,450,400,0,481,426,458,580,452],
[430,499,422,410,0,454,356,425,457],
[380,472,402,465,437,0,342,462,499],
[447,582,486,433,535,549,0,533,516],
[428,392,403,311,466,429,358,0,430],
[374,392,392,439,434,392,375,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,456,443,428,448,415,454,441],
[481,0,462,453,426,428,454,447,462],
[435,429,0,444,446,416,402,474,442],
[448,438,447,0,451,436,424,461,476],
[463,465,445,440,0,427,433,450,482],
[443,463,475,455,464,0,448,457,459],
[476,437,489,467,458,443,0,483,480],
[437,444,417,430,441,434,408,0,448],
[450,429,449,415,409,432,411,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,447,458,437,467,453,480,483],
[440,0,426,451,437,425,442,451,446],
[444,465,0,467,459,447,468,457,492],
[433,440,424,0,436,421,443,438,448],
[454,454,432,455,0,429,444,442,450],
[424,466,444,470,462,0,457,470,473],
[438,449,423,448,447,434,0,440,435],
[411,440,434,453,449,421,451,0,447],
[408,445,399,443,441,418,456,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,420,434,419,380,385,380,417],
[464,0,463,496,453,429,452,425,427],
[471,428,0,436,448,427,415,417,446],
[457,395,455,0,447,398,431,453,413],
[472,438,443,444,0,413,465,460,441],
[511,462,464,493,478,0,478,446,434],
[506,439,476,460,426,413,0,422,459],
[511,466,474,438,431,445,469,0,431],
[474,464,445,478,450,457,432,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,431,449,463,447,454,427,447],
[428,0,425,453,431,442,431,419,417],
[460,466,0,452,458,430,451,453,435],
[442,438,439,0,472,438,448,438,427],
[428,460,433,419,0,435,466,426,442],
[444,449,461,453,456,0,432,449,432],
[437,460,440,443,425,459,0,446,419],
[464,472,438,453,465,442,445,0,452],
[444,474,456,464,449,459,472,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,462,468,425,484,439,493,444],
[415,0,436,455,407,451,424,480,424],
[429,455,0,485,415,473,449,483,459],
[423,436,406,0,412,460,430,466,403],
[466,484,476,479,0,474,436,524,461],
[407,440,418,431,417,0,403,458,425],
[452,467,442,461,455,488,0,511,444],
[398,411,408,425,367,433,380,0,402],
[447,467,432,488,430,466,447,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,427,433,420,433,429,412,407],
[445,0,409,439,447,424,463,421,436],
[464,482,0,434,452,467,482,457,466],
[458,452,457,0,462,455,457,435,462],
[471,444,439,429,0,430,446,444,439],
[458,467,424,436,461,0,449,452,454],
[462,428,409,434,445,442,0,430,444],
[479,470,434,456,447,439,461,0,451],
[484,455,425,429,452,437,447,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,442,467,457,464,451,445,461],
[430,0,442,430,425,451,425,456,440],
[449,449,0,459,442,479,451,461,465],
[424,461,432,0,425,450,446,431,445],
[434,466,449,466,0,457,461,445,462],
[427,440,412,441,434,0,440,436,423],
[440,466,440,445,430,451,0,443,427],
[446,435,430,460,446,455,448,0,448],
[430,451,426,446,429,468,464,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,454,443,445,432,475,445,448],
[419,0,420,435,421,419,423,417,431],
[437,471,0,441,456,444,453,450,454],
[448,456,450,0,460,441,441,439,435],
[446,470,435,431,0,447,453,455,462],
[459,472,447,450,444,0,433,458,445],
[416,468,438,450,438,458,0,422,452],
[446,474,441,452,436,433,469,0,432],
[443,460,437,456,429,446,439,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,385,404,454,442,498,451,426,415],
[506,0,459,477,438,518,430,469,423],
[487,432,0,513,430,495,495,465,446],
[437,414,378,0,415,442,475,431,433],
[449,453,461,476,0,459,428,439,446],
[393,373,396,449,432,0,414,402,420],
[440,461,396,416,463,477,0,438,454],
[465,422,426,460,452,489,453,0,419],
[476,468,445,458,445,471,437,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,445,435,445,417,448,422,439],
[407,0,458,367,400,421,445,405,424],
[446,433,0,397,422,437,460,407,398],
[456,524,494,0,485,470,475,441,456],
[446,491,469,406,0,449,496,396,465],
[474,470,454,421,442,0,470,449,456],
[443,446,431,416,395,421,0,414,446],
[469,486,484,450,495,442,477,0,458],
[452,467,493,435,426,435,445,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,441,462,411,429,395,403,439],
[476,0,447,482,428,434,449,453,465],
[450,444,0,479,424,420,440,454,471],
[429,409,412,0,407,407,428,440,444],
[480,463,467,484,0,446,438,473,484],
[462,457,471,484,445,0,454,469,489],
[496,442,451,463,453,437,0,455,489],
[488,438,437,451,418,422,436,0,445],
[452,426,420,447,407,402,402,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,402,388,383,436,423,447,443],
[435,0,437,395,420,465,434,444,468],
[489,454,0,429,462,478,453,455,468],
[503,496,462,0,428,487,482,471,458],
[508,471,429,463,0,489,464,500,498],
[455,426,413,404,402,0,461,436,453],
[468,457,438,409,427,430,0,476,438],
[444,447,436,420,391,455,415,0,439],
[448,423,423,433,393,438,453,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,429,421,441,431,424,432,442],
[435,0,434,429,441,446,441,446,465],
[462,457,0,451,461,482,442,458,470],
[470,462,440,0,473,485,451,464,480],
[450,450,430,418,0,461,435,436,452],
[460,445,409,406,430,0,399,426,440],
[467,450,449,440,456,492,0,430,456],
[459,445,433,427,455,465,461,0,472],
[449,426,421,411,439,451,435,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,466,471,455,500,450,453,429],
[435,0,445,450,437,469,455,442,454],
[425,446,0,427,449,492,454,444,417],
[420,441,464,0,424,505,449,460,408],
[436,454,442,467,0,470,483,476,432],
[391,422,399,386,421,0,437,431,412],
[441,436,437,442,408,454,0,443,479],
[438,449,447,431,415,460,448,0,435],
[462,437,474,483,459,479,412,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,451,456,470,483,437,452,437],
[414,0,451,439,446,442,443,439,452],
[440,440,0,450,463,456,452,460,434],
[435,452,441,0,480,464,456,441,451],
[421,445,428,411,0,432,445,434,409],
[408,449,435,427,459,0,433,462,444],
[454,448,439,435,446,458,0,469,444],
[439,452,431,450,457,429,422,0,449],
[454,439,457,440,482,447,447,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,459,455,453,465,441,415,449],
[454,0,461,469,498,483,515,443,474],
[432,430,0,468,471,462,512,417,453],
[436,422,423,0,469,456,504,436,461],
[438,393,420,422,0,468,494,435,463],
[426,408,429,435,423,0,486,417,439],
[450,376,379,387,397,405,0,425,386],
[476,448,474,455,456,474,466,0,442],
[442,417,438,430,428,452,505,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,451,448,423,408,389,453,449],
[452,0,490,455,486,404,465,468,492],
[440,401,0,431,431,398,424,487,440],
[443,436,460,0,440,379,477,464,487],
[468,405,460,451,0,413,418,443,444],
[483,487,493,512,478,0,424,457,492],
[502,426,467,414,473,467,0,483,488],
[438,423,404,427,448,434,408,0,412],
[442,399,451,404,447,399,403,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,398,464,429,403,367,392,438],
[467,0,399,524,446,418,444,446,431],
[493,492,0,470,478,469,470,489,445],
[427,367,421,0,394,365,349,430,407],
[462,445,413,497,0,490,481,477,436],
[488,473,422,526,401,0,403,411,473],
[524,447,421,542,410,488,0,463,461],
[499,445,402,461,414,480,428,0,475],
[453,460,446,484,455,418,430,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,463,429,446,479,463,442,412],
[447,0,455,430,396,449,501,430,457],
[428,436,0,458,436,461,454,451,443],
[462,461,433,0,424,477,473,453,430],
[445,495,455,467,0,489,497,479,450],
[412,442,430,414,402,0,475,457,436],
[428,390,437,418,394,416,0,407,442],
[449,461,440,438,412,434,484,0,472],
[479,434,448,461,441,455,449,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,429,447,462,447,431,458,434],
[447,0,458,455,454,449,460,455,436],
[462,433,0,440,453,435,433,442,420],
[444,436,451,0,455,421,445,460,417],
[429,437,438,436,0,406,461,443,426],
[444,442,456,470,485,0,462,451,448],
[460,431,458,446,430,429,0,444,426],
[433,436,449,431,448,440,447,0,426],
[457,455,471,474,465,443,465,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,453,442,437,448,455,456,465],
[411,0,433,436,403,418,441,428,431],
[438,458,0,455,479,452,473,467,450],
[449,455,436,0,443,432,457,432,428],
[454,488,412,448,0,450,454,437,441],
[443,473,439,459,441,0,450,426,423],
[436,450,418,434,437,441,0,424,442],
[435,463,424,459,454,465,467,0,472],
[426,460,441,463,450,468,449,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,452,431,439,429,443,482,425],
[404,0,419,428,452,442,439,481,427],
[439,472,0,424,445,456,379,468,438],
[460,463,467,0,461,471,458,473,440],
[452,439,446,430,0,421,424,477,414],
[462,449,435,420,470,0,433,443,433],
[448,452,512,433,467,458,0,492,480],
[409,410,423,418,414,448,399,0,417],
[466,464,453,451,477,458,411,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,435,484,482,483,469,456,434],
[445,0,398,532,418,508,444,448,453],
[456,493,0,500,472,522,455,446,436],
[407,359,391,0,394,429,380,379,382],
[409,473,419,497,0,476,462,491,465],
[408,383,369,462,415,0,375,378,368],
[422,447,436,511,429,516,0,492,420],
[435,443,445,512,400,513,399,0,418],
[457,438,455,509,426,523,471,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,439,441,468,441,437,426,447],
[488,0,444,455,487,430,478,462,446],
[452,447,0,423,446,428,445,443,478],
[450,436,468,0,463,467,451,494,472],
[423,404,445,428,0,395,438,444,459],
[450,461,463,424,496,0,476,449,455],
[454,413,446,440,453,415,0,447,501],
[465,429,448,397,447,442,444,0,451],
[444,445,413,419,432,436,390,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,420,453,427,449,420,442,441],
[483,0,491,494,471,481,441,455,499],
[471,400,0,448,444,436,442,405,440],
[438,397,443,0,402,469,417,394,422],
[464,420,447,489,0,438,435,399,445],
[442,410,455,422,453,0,425,427,455],
[471,450,449,474,456,466,0,435,460],
[449,436,486,497,492,464,456,0,454],
[450,392,451,469,446,436,431,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,438,433,443,450,420,448,430],
[441,0,442,426,429,435,430,453,449],
[453,449,0,444,430,451,442,467,454],
[458,465,447,0,445,469,439,472,455],
[448,462,461,446,0,447,441,480,456],
[441,456,440,422,444,0,449,469,442],
[471,461,449,452,450,442,0,464,446],
[443,438,424,419,411,422,427,0,432],
[461,442,437,436,435,449,445,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,463,436,440,449,441,450,448],
[431,0,438,427,417,430,444,451,421],
[428,453,0,418,429,435,447,457,424],
[455,464,473,0,462,457,442,458,452],
[451,474,462,429,0,445,424,459,444],
[442,461,456,434,446,0,449,445,439],
[450,447,444,449,467,442,0,454,459],
[441,440,434,433,432,446,437,0,447],
[443,470,467,439,447,452,432,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,472,435,459,434,467,453,443],
[453,0,452,449,452,438,440,469,457],
[419,439,0,426,438,437,446,455,440],
[456,442,465,0,441,453,471,462,460],
[432,439,453,450,0,420,465,440,458],
[457,453,454,438,471,0,450,445,449],
[424,451,445,420,426,441,0,450,458],
[438,422,436,429,451,446,441,0,425],
[448,434,451,431,433,442,433,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,423,405,436,459,415,433,423],
[467,0,457,430,458,466,453,440,470],
[468,434,0,453,432,474,429,459,450],
[486,461,438,0,458,456,437,440,459],
[455,433,459,433,0,440,444,451,446],
[432,425,417,435,451,0,434,444,438],
[476,438,462,454,447,457,0,463,443],
[458,451,432,451,440,447,428,0,452],
[468,421,441,432,445,453,448,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,405,318,340,421,300,356,299],
[610,0,390,409,424,417,379,336,326],
[486,501,0,403,540,493,552,440,555],
[573,482,488,0,537,491,388,485,377],
[551,467,351,354,0,495,318,440,321],
[470,474,398,400,396,0,334,486,427],
[591,512,339,503,573,557,0,534,463],
[535,555,451,406,451,405,357,0,301],
[592,565,336,514,570,464,428,590,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,439,464,432,460,439,455,445],
[446,0,436,472,437,464,444,439,455],
[452,455,0,437,450,461,447,463,461],
[427,419,454,0,427,468,443,449,445],
[459,454,441,464,0,452,427,454,466],
[431,427,430,423,439,0,431,434,440],
[452,447,444,448,464,460,0,439,440],
[436,452,428,442,437,457,452,0,460],
[446,436,430,446,425,451,451,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,444,443,443,429,424,430,439],
[443,0,446,463,462,445,450,439,457],
[447,445,0,443,455,442,439,445,430],
[448,428,448,0,462,437,446,442,447],
[448,429,436,429,0,450,442,447,430],
[462,446,449,454,441,0,455,441,420],
[467,441,452,445,449,436,0,451,439],
[461,452,446,449,444,450,440,0,422],
[452,434,461,444,461,471,452,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,461,411,429,440,442,412,447],
[439,0,462,437,443,442,445,435,437],
[430,429,0,424,403,459,419,418,436],
[480,454,467,0,456,443,455,443,462],
[462,448,488,435,0,433,445,445,445],
[451,449,432,448,458,0,462,452,463],
[449,446,472,436,446,429,0,445,458],
[479,456,473,448,446,439,446,0,457],
[444,454,455,429,446,428,433,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,491,393,482,425,412,413,451],
[442,0,475,451,500,465,402,490,470],
[400,416,0,415,460,423,404,392,438],
[498,440,476,0,452,443,462,454,483],
[409,391,431,439,0,404,399,441,448],
[466,426,468,448,487,0,458,480,486],
[479,489,487,429,492,433,0,493,495],
[478,401,499,437,450,411,398,0,447],
[440,421,453,408,443,405,396,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,410,450,418,410,450,425,457],
[416,0,427,420,422,443,437,429,426],
[481,464,0,451,428,448,462,429,469],
[441,471,440,0,445,438,467,448,457],
[473,469,463,446,0,466,471,433,473],
[481,448,443,453,425,0,457,408,455],
[441,454,429,424,420,434,0,446,466],
[466,462,462,443,458,483,445,0,483],
[434,465,422,434,418,436,425,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,494,463,420,490,450,441,482],
[426,0,447,435,454,457,427,467,485],
[397,444,0,430,490,483,453,473,455],
[428,456,461,0,437,436,463,474,462],
[471,437,401,454,0,446,414,472,471],
[401,434,408,455,445,0,458,460,458],
[441,464,438,428,477,433,0,456,475],
[450,424,418,417,419,431,435,0,455],
[409,406,436,429,420,433,416,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,446,444,437,446,414,430,433],
[441,0,454,409,437,424,402,415,416],
[445,437,0,415,424,451,415,424,401],
[447,482,476,0,482,487,417,457,435],
[454,454,467,409,0,487,451,413,434],
[445,467,440,404,404,0,416,396,409],
[477,489,476,474,440,475,0,456,473],
[461,476,467,434,478,495,435,0,435],
[458,475,490,456,457,482,418,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,494,438,461,460,452,461,477],
[438,0,469,467,512,505,433,439,469],
[397,422,0,381,417,437,433,430,437],
[453,424,510,0,442,493,483,455,464],
[430,379,474,449,0,459,396,356,419],
[431,386,454,398,432,0,421,424,437],
[439,458,458,408,495,470,0,504,431],
[430,452,461,436,535,467,387,0,430],
[414,422,454,427,472,454,460,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,442,456,427,429,459,423,467],
[435,0,446,432,452,447,473,413,425],
[449,445,0,458,480,445,480,454,470],
[435,459,433,0,431,462,467,420,406],
[464,439,411,460,0,440,460,449,407],
[462,444,446,429,451,0,483,433,427],
[432,418,411,424,431,408,0,417,432],
[468,478,437,471,442,458,474,0,418],
[424,466,421,485,484,464,459,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,389,435,418,409,447,440,416],
[427,0,430,394,407,424,449,386,405],
[502,461,0,466,467,479,492,433,457],
[456,497,425,0,465,467,470,476,416],
[473,484,424,426,0,436,474,457,420],
[482,467,412,424,455,0,476,460,419],
[444,442,399,421,417,415,0,416,418],
[451,505,458,415,434,431,475,0,450],
[475,486,434,475,471,472,473,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,478,443,457,447,448,461,445],
[397,0,436,427,434,423,427,422,431],
[413,455,0,418,434,415,423,437,459],
[448,464,473,0,471,435,439,459,460],
[434,457,457,420,0,425,433,431,428],
[444,468,476,456,466,0,432,439,461],
[443,464,468,452,458,459,0,468,458],
[430,469,454,432,460,452,423,0,459],
[446,460,432,431,463,430,433,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,441,441,436,464,448,443,441],
[447,0,452,415,460,454,471,435,465],
[450,439,0,437,487,486,504,465,441],
[450,476,454,0,476,470,454,443,436],
[455,431,404,415,0,456,482,444,441],
[427,437,405,421,435,0,443,383,410],
[443,420,387,437,409,448,0,426,428],
[448,456,426,448,447,508,465,0,434],
[450,426,450,455,450,481,463,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,427,426,430,447,449,480,432],
[455,0,418,444,449,420,449,448,420],
[464,473,0,447,446,440,441,451,459],
[465,447,444,0,452,471,455,451,431],
[461,442,445,439,0,464,466,461,449],
[444,471,451,420,427,0,452,448,433],
[442,442,450,436,425,439,0,454,454],
[411,443,440,440,430,443,437,0,427],
[459,471,432,460,442,458,437,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,461,449,487,467,468,467,422],
[413,0,444,462,431,451,468,465,410],
[430,447,0,446,479,457,465,465,449],
[442,429,445,0,446,447,471,461,462],
[404,460,412,445,0,442,467,413,412],
[424,440,434,444,449,0,467,431,402],
[423,423,426,420,424,424,0,425,413],
[424,426,426,430,478,460,466,0,451],
[469,481,442,429,479,489,478,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,432,419,468,400,421,447,408],
[408,0,398,412,392,457,433,524,455],
[459,493,0,467,489,385,474,491,397],
[472,479,424,0,541,418,498,507,508],
[423,499,402,350,0,402,435,482,440],
[491,434,506,473,489,0,494,535,527],
[470,458,417,393,456,397,0,485,457],
[444,367,400,384,409,356,406,0,441],
[483,436,494,383,451,364,434,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,450,419,441,421,462,431,443],
[458,0,462,469,432,448,465,467,471],
[441,429,0,441,440,414,453,456,439],
[472,422,450,0,451,432,468,446,455],
[450,459,451,440,0,440,448,463,460],
[470,443,477,459,451,0,486,463,487],
[429,426,438,423,443,405,0,444,460],
[460,424,435,445,428,428,447,0,457],
[448,420,452,436,431,404,431,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,405,430,434,417,456,438,403],
[426,0,388,398,384,450,451,404,416],
[486,503,0,441,473,479,518,456,426],
[461,493,450,0,463,464,474,422,444],
[457,507,418,428,0,473,481,432,439],
[474,441,412,427,418,0,450,400,410],
[435,440,373,417,410,441,0,416,398],
[453,487,435,469,459,491,475,0,448],
[488,475,465,447,452,481,493,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,408,445,440,392,408,462,482],
[402,0,421,415,441,455,404,443,502],
[483,470,0,448,495,446,434,447,501],
[446,476,443,0,438,455,476,450,465],
[451,450,396,453,0,414,453,454,507],
[499,436,445,436,477,0,438,432,542],
[483,487,457,415,438,453,0,432,522],
[429,448,444,441,437,459,459,0,493],
[409,389,390,426,384,349,369,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,418,455,459,451,470,441,457],
[455,0,435,452,451,467,442,435,471],
[473,456,0,443,466,457,477,452,472],
[436,439,448,0,438,458,431,445,454],
[432,440,425,453,0,463,455,454,445],
[440,424,434,433,428,0,455,420,433],
[421,449,414,460,436,436,0,423,461],
[450,456,439,446,437,471,468,0,445],
[434,420,419,437,446,458,430,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,452,446,445,440,453,449,438],
[432,0,450,466,476,450,468,449,455],
[439,441,0,474,453,450,460,431,458],
[445,425,417,0,435,424,443,415,424],
[446,415,438,456,0,428,452,421,436],
[451,441,441,467,463,0,465,452,438],
[438,423,431,448,439,426,0,423,433],
[442,442,460,476,470,439,468,0,440],
[453,436,433,467,455,453,458,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,473,493,484,469,443,454,477],
[450,0,475,444,459,452,401,461,466],
[418,416,0,428,433,422,413,458,409],
[398,447,463,0,431,429,447,420,433],
[407,432,458,460,0,451,401,445,467],
[422,439,469,462,440,0,417,486,490],
[448,490,478,444,490,474,0,507,444],
[437,430,433,471,446,405,384,0,461],
[414,425,482,458,424,401,447,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,454,485,386,348,399,300,278],
[570,0,513,494,504,491,523,386,480],
[437,378,0,520,453,365,459,370,370],
[406,397,371,0,413,422,339,352,327],
[505,387,438,478,0,410,423,358,318],
[543,400,526,469,481,0,453,447,439],
[492,368,432,552,468,438,0,476,357],
[591,505,521,539,533,444,415,0,386],
[613,411,521,564,573,452,534,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,444,445,429,463,432,463,444],
[463,0,468,461,442,444,449,465,451],
[447,423,0,428,436,448,420,453,451],
[446,430,463,0,425,449,426,453,452],
[462,449,455,466,0,469,440,464,457],
[428,447,443,442,422,0,409,435,450],
[459,442,471,465,451,482,0,487,475],
[428,426,438,438,427,456,404,0,436],
[447,440,440,439,434,441,416,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,429,478,454,485,479,460,434],
[403,0,417,444,400,456,408,449,400],
[462,474,0,490,442,476,435,486,449],
[413,447,401,0,394,450,413,437,392],
[437,491,449,497,0,461,435,428,433],
[406,435,415,441,430,0,413,460,410],
[412,483,456,478,456,478,0,482,407],
[431,442,405,454,463,431,409,0,421],
[457,491,442,499,458,481,484,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,453,455,441,441,457,456,456],
[455,0,448,465,434,448,441,454,452],
[438,443,0,451,425,442,430,434,455],
[436,426,440,0,436,440,438,450,467],
[450,457,466,455,0,444,447,463,449],
[450,443,449,451,447,0,441,441,462],
[434,450,461,453,444,450,0,460,451],
[435,437,457,441,428,450,431,0,463],
[435,439,436,424,442,429,440,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,442,440,417,447,416,439,399],
[465,0,458,440,435,443,451,451,434],
[449,433,0,448,448,440,428,463,426],
[451,451,443,0,442,440,439,455,431],
[474,456,443,449,0,459,445,460,449],
[444,448,451,451,432,0,440,454,424],
[475,440,463,452,446,451,0,461,433],
[452,440,428,436,431,437,430,0,433],
[492,457,465,460,442,467,458,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,407,323,479,423,467,498,346],
[369,0,376,316,463,345,323,358,346],
[484,515,0,324,499,375,358,424,382],
[568,575,567,0,623,521,445,536,502],
[412,428,392,268,0,307,350,358,274],
[468,546,516,370,584,0,463,510,478],
[424,568,533,446,541,428,0,538,426],
[393,533,467,355,533,381,353,0,412],
[545,545,509,389,617,413,465,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,471,454,432,440,411,417,464],
[494,0,443,473,443,455,474,435,445],
[420,448,0,487,439,484,478,434,466],
[437,418,404,0,442,411,407,418,418],
[459,448,452,449,0,438,430,457,385],
[451,436,407,480,453,0,470,459,465],
[480,417,413,484,461,421,0,436,460],
[474,456,457,473,434,432,455,0,402],
[427,446,425,473,506,426,431,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,483,504,466,447,558,418,499],
[411,0,426,486,515,471,520,411,419],
[408,465,0,507,502,394,502,485,496],
[387,405,384,0,442,411,450,432,370],
[425,376,389,449,0,401,490,421,483],
[444,420,497,480,490,0,518,432,467],
[333,371,389,441,401,373,0,398,427],
[473,480,406,459,470,459,493,0,467],
[392,472,395,521,408,424,464,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,441,446,466,458,397,437,478],
[469,0,453,480,448,444,452,464,469],
[450,438,0,447,448,447,435,440,471],
[445,411,444,0,465,485,442,479,448],
[425,443,443,426,0,454,446,401,462],
[433,447,444,406,437,0,433,430,466],
[494,439,456,449,445,458,0,444,465],
[454,427,451,412,490,461,447,0,497],
[413,422,420,443,429,425,426,394,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,428,412,434,439,456,478,419],
[437,0,428,398,368,458,455,438,419],
[463,463,0,450,430,430,463,428,443],
[479,493,441,0,446,478,479,479,427],
[457,523,461,445,0,470,457,481,464],
[452,433,461,413,421,0,448,443,441],
[435,436,428,412,434,443,0,454,424],
[413,453,463,412,410,448,437,0,430],
[472,472,448,464,427,450,467,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,453,437,415,435,442,418,460],
[469,0,472,461,436,455,491,457,435],
[438,419,0,417,455,430,464,437,441],
[454,430,474,0,436,442,443,450,461],
[476,455,436,455,0,473,462,439,442],
[456,436,461,449,418,0,438,426,434],
[449,400,427,448,429,453,0,431,445],
[473,434,454,441,452,465,460,0,455],
[431,456,450,430,449,457,446,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,496,458,386,398,476,495,456],
[392,0,505,476,358,422,422,467,401],
[395,386,0,381,366,399,384,381,410],
[433,415,510,0,390,418,445,470,432],
[505,533,525,501,0,462,447,443,469],
[493,469,492,473,429,0,448,439,438],
[415,469,507,446,444,443,0,472,392],
[396,424,510,421,448,452,419,0,411],
[435,490,481,459,422,453,499,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,417,420,450,468,425,455,462],
[377,0,383,402,381,414,390,380,381],
[474,508,0,459,465,494,449,425,468],
[471,489,432,0,440,487,430,444,473],
[441,510,426,451,0,438,431,418,457],
[423,477,397,404,453,0,377,419,472],
[466,501,442,461,460,514,0,464,465],
[436,511,466,447,473,472,427,0,489],
[429,510,423,418,434,419,426,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,424,416,412,423,425,409,446],
[475,0,426,457,448,443,473,448,469],
[467,465,0,455,436,464,457,430,483],
[475,434,436,0,428,435,458,443,459],
[479,443,455,463,0,451,473,464,486],
[468,448,427,456,440,0,464,467,481],
[466,418,434,433,418,427,0,421,430],
[482,443,461,448,427,424,470,0,473],
[445,422,408,432,405,410,461,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,514,388,379,511,422,423,414,364],
[377,0,283,187,331,316,316,368,324],
[503,608,0,329,463,474,439,451,352],
[512,704,562,0,617,467,431,478,481],
[380,560,428,274,0,426,392,396,388],
[469,575,417,424,465,0,441,440,387],
[468,575,452,460,499,450,0,442,480],
[477,523,440,413,495,451,449,0,385],
[527,567,539,410,503,504,411,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,420,428,414,447,430,423,418],
[484,0,472,471,458,460,435,453,466],
[471,419,0,430,438,421,411,441,431],
[463,420,461,0,431,445,435,421,456],
[477,433,453,460,0,447,448,441,449],
[444,431,470,446,444,0,448,453,461],
[461,456,480,456,443,443,0,446,458],
[468,438,450,470,450,438,445,0,456],
[473,425,460,435,442,430,433,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,466,453,457,473,415,463,423],
[440,0,472,475,446,476,479,473,445],
[425,419,0,454,439,443,423,446,425],
[438,416,437,0,425,419,394,437,412],
[434,445,452,466,0,453,433,437,440],
[418,415,448,472,438,0,410,435,428],
[476,412,468,497,458,481,0,458,456],
[428,418,445,454,454,456,433,0,421],
[468,446,466,479,451,463,435,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,463,447,411,428,440,449,431],
[452,0,439,403,421,393,445,447,415],
[428,452,0,459,457,423,457,457,420],
[444,488,432,0,447,438,474,466,427],
[480,470,434,444,0,467,481,494,456],
[463,498,468,453,424,0,461,469,427],
[451,446,434,417,410,430,0,437,435],
[442,444,434,425,397,422,454,0,450],
[460,476,471,464,435,464,456,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,465,414,436,490,468,456,473],
[450,0,451,435,457,473,462,454,455],
[426,440,0,401,439,457,436,462,433],
[477,456,490,0,441,467,463,467,463],
[455,434,452,450,0,482,442,463,462],
[401,418,434,424,409,0,425,419,430],
[423,429,455,428,449,466,0,454,464],
[435,437,429,424,428,472,437,0,441],
[418,436,458,428,429,461,427,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,471,521,496,468,440,478,476],
[448,0,458,473,500,412,524,462,465],
[420,433,0,463,473,408,472,440,425],
[370,418,428,0,424,401,428,420,419],
[395,391,418,467,0,433,456,426,485],
[423,479,483,490,458,0,461,461,479],
[451,367,419,463,435,430,0,442,444],
[413,429,451,471,465,430,449,0,455],
[415,426,466,472,406,412,447,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,472,473,462,450,487,453,449],
[446,0,446,452,446,433,466,464,451],
[419,445,0,460,441,454,472,427,450],
[418,439,431,0,450,428,481,433,447],
[429,445,450,441,0,435,465,455,445],
[441,458,437,463,456,0,486,430,479],
[404,425,419,410,426,405,0,413,438],
[438,427,464,458,436,461,478,0,472],
[442,440,441,444,446,412,453,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,435,459,455,432,508,404,459],
[465,0,445,493,437,430,535,442,472],
[456,446,0,459,456,392,565,462,437],
[432,398,432,0,394,454,480,405,460],
[436,454,435,497,0,432,562,464,463],
[459,461,499,437,459,0,516,434,444],
[383,356,326,411,329,375,0,382,374],
[487,449,429,486,427,457,509,0,423],
[432,419,454,431,428,447,517,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,453,449,451,465,415,470,426],
[437,0,471,444,391,347,428,471,403],
[438,420,0,483,418,441,414,510,429],
[442,447,408,0,446,446,451,485,431],
[440,500,473,445,0,476,457,487,458],
[426,544,450,445,415,0,403,450,432],
[476,463,477,440,434,488,0,491,491],
[421,420,381,406,404,441,400,0,400],
[465,488,462,460,433,459,400,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,447,405,456,440,476,409,429],
[439,0,440,417,460,460,431,432,417],
[444,451,0,492,417,437,458,482,455],
[486,474,399,0,499,479,452,434,419],
[435,431,474,392,0,433,461,458,396],
[451,431,454,412,458,0,413,455,433],
[415,460,433,439,430,478,0,445,406],
[482,459,409,457,433,436,446,0,399],
[462,474,436,472,495,458,485,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,493,505,704,421,579,398,576],
[496,0,455,455,562,491,461,385,361],
[398,436,0,544,552,471,445,243,400],
[386,436,347,0,644,243,310,385,385],
[187,329,339,247,0,306,297,275,181],
[470,400,420,648,585,0,662,494,500],
[312,430,446,581,594,229,0,450,333],
[493,506,648,506,616,397,441,0,489],
[315,530,491,506,710,391,558,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,438,432,389,472,446,449,421],
[431,0,415,390,412,426,430,446,431],
[453,476,0,430,382,457,440,430,429],
[459,501,461,0,428,457,444,439,457],
[502,479,509,463,0,493,438,468,476],
[419,465,434,434,398,0,420,420,441],
[445,461,451,447,453,471,0,459,446],
[442,445,461,452,423,471,432,0,436],
[470,460,462,434,415,450,445,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,382,451,384,452,429,397,390],
[493,0,427,461,377,423,451,374,420],
[509,464,0,487,432,446,444,471,466],
[440,430,404,0,424,436,412,407,395],
[507,514,459,467,0,494,456,427,486],
[439,468,445,455,397,0,420,415,428],
[462,440,447,479,435,471,0,411,472],
[494,517,420,484,464,476,480,0,425],
[501,471,425,496,405,463,419,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,479,470,478,464,457,471,434],
[423,0,474,448,411,448,434,450,429],
[412,417,0,442,431,428,415,453,429],
[421,443,449,0,433,453,431,420,410],
[413,480,460,458,0,442,462,436,469],
[427,443,463,438,449,0,418,441,423],
[434,457,476,460,429,473,0,469,430],
[420,441,438,471,455,450,422,0,442],
[457,462,462,481,422,468,461,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,431,435,456,460,435,474,482],
[427,0,401,427,424,461,423,436,434],
[460,490,0,441,457,508,435,432,466],
[456,464,450,0,460,468,442,433,478],
[435,467,434,431,0,470,438,410,466],
[431,430,383,423,421,0,396,397,422],
[456,468,456,449,453,495,0,422,463],
[417,455,459,458,481,494,469,0,467],
[409,457,425,413,425,469,428,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,413,453,456,534,371,736,567],
[435,0,420,390,393,438,375,375,372],
[478,471,0,386,481,503,371,619,220],
[438,501,505,0,429,438,463,828,567],
[435,498,410,462,0,576,211,778,410],
[357,453,388,453,315,0,202,453,453],
[520,516,520,428,680,689,0,796,428],
[155,516,272,63,113,438,95,0,18],
[324,519,671,324,481,438,463,873,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,468,445,475,437,433,478,436],
[420,0,437,427,457,411,439,447,437],
[423,454,0,425,454,419,457,440,430],
[446,464,466,0,484,460,443,461,421],
[416,434,437,407,0,436,413,446,406],
[454,480,472,431,455,0,425,463,459],
[458,452,434,448,478,466,0,463,449],
[413,444,451,430,445,428,428,0,439],
[455,454,461,470,485,432,442,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,607,409,469,479,504,429,520,594],
[284,0,360,317,298,423,491,478,506],
[482,531,0,444,387,491,514,599,584],
[422,574,447,0,488,445,499,540,511],
[412,593,504,403,0,434,540,604,513],
[387,468,400,446,457,0,454,585,548],
[462,400,377,392,351,437,0,466,446],
[371,413,292,351,287,306,425,0,365],
[297,385,307,380,378,343,445,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,460,438,466,468,457,457,450],
[425,0,448,444,458,449,436,452,439],
[431,443,0,456,467,459,465,477,438],
[453,447,435,0,476,460,443,474,437],
[425,433,424,415,0,434,416,441,403],
[423,442,432,431,457,0,438,451,413],
[434,455,426,448,475,453,0,456,450],
[434,439,414,417,450,440,435,0,419],
[441,452,453,454,488,478,441,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,446,437,473,420,452,464,442],
[429,0,429,449,447,423,426,455,427],
[445,462,0,477,469,450,442,454,450],
[454,442,414,0,444,431,410,435,448],
[418,444,422,447,0,411,450,436,445],
[471,468,441,460,480,0,454,484,462],
[439,465,449,481,441,437,0,456,435],
[427,436,437,456,455,407,435,0,446],
[449,464,441,443,446,429,456,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,401,481,480,359,396,464,387],
[571,0,429,575,584,420,495,499,511],
[490,462,0,575,524,371,486,466,470],
[410,316,316,0,431,214,348,406,395],
[411,307,367,460,0,352,480,394,315],
[532,471,520,677,539,0,525,557,440],
[495,396,405,543,411,366,0,421,398],
[427,392,425,485,497,334,470,0,381],
[504,380,421,496,576,451,493,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,475,440,456,445,450,465,479],
[418,0,445,439,415,442,425,428,436],
[416,446,0,444,426,438,432,423,464],
[451,452,447,0,437,444,440,440,463],
[435,476,465,454,0,474,442,452,460],
[446,449,453,447,417,0,429,444,451],
[441,466,459,451,449,462,0,459,475],
[426,463,468,451,439,447,432,0,462],
[412,455,427,428,431,440,416,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,403,416,417,477,382,485,455],
[445,0,387,439,394,496,488,509,440],
[488,504,0,508,484,529,440,479,435],
[475,452,383,0,468,536,408,504,402],
[474,497,407,423,0,537,434,521,424],
[414,395,362,355,354,0,365,464,405],
[509,403,451,483,457,526,0,537,455],
[406,382,412,387,370,427,354,0,405],
[436,451,456,489,467,486,436,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,440,452,424,453,442,464,429],
[438,0,450,458,449,454,433,467,449],
[451,441,0,470,454,477,457,469,459],
[439,433,421,0,426,446,439,440,434],
[467,442,437,465,0,461,429,472,447],
[438,437,414,445,430,0,420,477,429],
[449,458,434,452,462,471,0,457,453],
[427,424,422,451,419,414,434,0,435],
[462,442,432,457,444,462,438,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,451,453,454,420,464,431,453],
[459,0,450,455,453,436,463,467,463],
[440,441,0,458,451,447,448,476,452],
[438,436,433,0,447,411,445,451,454],
[437,438,440,444,0,420,446,449,432],
[471,455,444,480,471,0,463,463,456],
[427,428,443,446,445,428,0,453,460],
[460,424,415,440,442,428,438,0,429],
[438,428,439,437,459,435,431,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,443,454,464,450,452,451,435],
[433,0,420,426,430,429,449,435,428],
[448,471,0,432,446,472,461,457,458],
[437,465,459,0,467,460,453,464,456],
[427,461,445,424,0,455,437,458,429],
[441,462,419,431,436,0,462,440,428],
[439,442,430,438,454,429,0,436,443],
[440,456,434,427,433,451,455,0,431],
[456,463,433,435,462,463,448,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,467,451,456,441,442,427,460],
[456,0,463,474,456,442,470,428,451],
[424,428,0,454,462,419,440,441,441],
[440,417,437,0,433,432,424,404,441],
[435,435,429,458,0,437,427,400,440],
[450,449,472,459,454,0,453,446,443],
[449,421,451,467,464,438,0,432,442],
[464,463,450,487,491,445,459,0,463],
[431,440,450,450,451,448,449,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,699,498,654,584,440,550,639,607],
[192,0,58,308,116,153,109,338,269],
[393,833,0,726,616,683,542,557,448],
[237,583,165,0,273,285,112,274,174],
[307,775,275,618,0,275,511,580,391],
[451,738,208,606,616,0,447,556,504],
[341,782,349,779,380,444,0,609,322],
[252,553,334,617,311,335,282,0,219],
[284,622,443,717,500,387,569,672,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,442,475,446,421,429,452,376],
[497,0,495,515,475,443,443,449,455],
[449,396,0,439,385,365,402,456,413],
[416,376,452,0,430,416,397,432,399],
[445,416,506,461,0,430,460,446,425],
[470,448,526,475,461,0,465,479,442],
[462,448,489,494,431,426,0,446,403],
[439,442,435,459,445,412,445,0,413],
[515,436,478,492,466,449,488,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,386,518,516,453,450,437,440],
[448,0,408,419,472,435,400,495,431],
[505,483,0,462,525,501,416,492,465],
[373,472,429,0,452,394,453,431,455],
[375,419,366,439,0,329,395,418,381],
[438,456,390,497,562,0,421,461,374],
[441,491,475,438,496,470,0,541,423],
[454,396,399,460,473,430,350,0,408],
[451,460,426,436,510,517,468,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,473,464,464,466,437,480,461],
[418,0,417,424,432,439,424,428,420],
[418,474,0,455,462,457,430,426,478],
[427,467,436,0,433,447,420,423,419],
[427,459,429,458,0,460,452,433,460],
[425,452,434,444,431,0,431,435,436],
[454,467,461,471,439,460,0,446,463],
[411,463,465,468,458,456,445,0,466],
[430,471,413,472,431,455,428,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,503,447,468,440,542,462,491],
[419,0,423,417,430,398,485,418,438],
[388,468,0,438,416,378,509,398,431],
[444,474,453,0,479,429,515,491,480],
[423,461,475,412,0,420,495,449,494],
[451,493,513,462,471,0,529,442,485],
[349,406,382,376,396,362,0,332,423],
[429,473,493,400,442,449,559,0,472],
[400,453,460,411,397,406,468,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,448,428,464,438,456,438,432],
[453,0,446,434,475,439,449,449,437],
[443,445,0,436,468,444,459,441,464],
[463,457,455,0,477,434,467,456,452],
[427,416,423,414,0,421,435,413,431],
[453,452,447,457,470,0,462,424,459],
[435,442,432,424,456,429,0,432,430],
[453,442,450,435,478,467,459,0,457],
[459,454,427,439,460,432,461,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,498,474,458,459,483,434,478],
[411,0,466,435,427,426,470,411,456],
[393,425,0,436,415,412,457,427,445],
[417,456,455,0,456,436,458,434,458],
[433,464,476,435,0,424,460,425,457],
[432,465,479,455,467,0,470,458,451],
[408,421,434,433,431,421,0,411,435],
[457,480,464,457,466,433,480,0,465],
[413,435,446,433,434,440,456,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,342,486,462,350,316,355,339,481],
[549,0,375,301,323,440,461,260,401],
[405,516,0,474,344,452,471,257,439],
[429,590,417,0,452,417,447,401,450],
[541,568,547,439,0,464,468,543,644],
[575,451,439,474,427,0,512,303,396],
[536,430,420,444,423,379,0,288,344],
[552,631,634,490,348,588,603,0,516],
[410,490,452,441,247,495,547,375,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,367,431,389,406,438,435,399,437],
[524,0,467,420,474,473,454,412,414],
[460,424,0,397,461,492,418,415,442],
[502,471,494,0,455,502,429,462,466],
[485,417,430,436,0,445,415,412,403],
[453,418,399,389,446,0,422,358,404],
[456,437,473,462,476,469,0,397,494],
[492,479,476,429,479,533,494,0,470],
[454,477,449,425,488,487,397,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,455,453,457,451,444,444,472],
[428,0,437,431,446,445,432,435,438],
[436,454,0,445,452,466,442,448,458],
[438,460,446,0,453,449,435,440,466],
[434,445,439,438,0,441,455,443,454],
[440,446,425,442,450,0,464,467,467],
[447,459,449,456,436,427,0,453,461],
[447,456,443,451,448,424,438,0,454],
[419,453,433,425,437,424,430,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,513,453,495,440,476,472,480],
[432,0,477,442,416,433,426,446,466],
[378,414,0,434,428,465,409,406,424],
[438,449,457,0,460,444,477,454,486],
[396,475,463,431,0,419,429,421,428],
[451,458,426,447,472,0,427,454,479],
[415,465,482,414,462,464,0,456,479],
[419,445,485,437,470,437,435,0,451],
[411,425,467,405,463,412,412,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,489,444,434,451,448,492,469],
[428,0,448,431,429,435,434,457,446],
[402,443,0,427,417,440,433,454,451],
[447,460,464,0,440,440,463,476,448],
[457,462,474,451,0,462,470,488,438],
[440,456,451,451,429,0,480,466,458],
[443,457,458,428,421,411,0,429,444],
[399,434,437,415,403,425,462,0,419],
[422,445,440,443,453,433,447,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,424,468,433,453,457,432,467],
[403,0,443,439,426,433,435,407,422],
[467,448,0,466,449,466,439,446,461],
[423,452,425,0,457,482,454,416,439],
[458,465,442,434,0,471,423,417,468],
[438,458,425,409,420,0,439,439,449],
[434,456,452,437,468,452,0,454,451],
[459,484,445,475,474,452,437,0,476],
[424,469,430,452,423,442,440,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,405,393,423,449,398,392,417],
[485,0,431,415,473,483,453,417,422],
[486,460,0,452,481,486,455,436,452],
[498,476,439,0,449,485,414,438,452],
[468,418,410,442,0,445,427,414,433],
[442,408,405,406,446,0,399,445,377],
[493,438,436,477,464,492,0,456,474],
[499,474,455,453,477,446,435,0,455],
[474,469,439,439,458,514,417,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,460,447,435,468,439,423,452],
[419,0,430,394,447,456,404,401,428],
[431,461,0,427,450,494,411,428,447],
[444,497,464,0,451,496,479,463,448],
[456,444,441,440,0,478,439,439,432],
[423,435,397,395,413,0,406,419,426],
[452,487,480,412,452,485,0,447,443],
[468,490,463,428,452,472,444,0,447],
[439,463,444,443,459,465,448,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,437,434,456,447,465,468,422],
[447,0,441,452,444,456,452,505,437],
[454,450,0,466,407,417,441,442,424],
[457,439,425,0,436,445,404,468,434],
[435,447,484,455,0,431,454,452,430],
[444,435,474,446,460,0,462,479,441],
[426,439,450,487,437,429,0,439,447],
[423,386,449,423,439,412,452,0,375],
[469,454,467,457,461,450,444,516,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,369,383,572,462,444,374,458,413],
[522,0,346,411,480,410,410,424,335],
[508,545,0,550,489,447,461,502,387],
[319,480,341,0,372,376,403,449,266],
[429,411,402,519,0,396,364,438,367],
[447,481,444,515,495,0,478,476,449],
[517,481,430,488,527,413,0,473,386],
[433,467,389,442,453,415,418,0,385],
[478,556,504,625,524,442,505,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,479,453,481,480,475,453,482],
[447,0,454,448,435,460,452,445,469],
[412,437,0,445,444,448,445,434,447],
[438,443,446,0,473,451,469,460,467],
[410,456,447,418,0,442,438,441,454],
[411,431,443,440,449,0,445,449,444],
[416,439,446,422,453,446,0,453,460],
[438,446,457,431,450,442,438,0,442],
[409,422,444,424,437,447,431,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,537,291,541,302,404,299,394,397],
[354,0,348,501,263,340,317,263,454],
[600,543,0,544,383,458,581,533,439],
[350,390,347,0,194,383,446,380,338],
[589,628,508,697,0,561,568,519,435],
[487,551,433,508,330,0,417,457,440],
[592,574,310,445,323,474,0,475,360],
[497,628,358,511,372,434,416,0,470],
[494,437,452,553,456,451,531,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,466,457,437,506,452,471,473],
[419,0,419,393,434,467,432,430,430],
[425,472,0,415,456,481,412,479,430],
[434,498,476,0,464,477,486,474,468],
[454,457,435,427,0,480,440,465,442],
[385,424,410,414,411,0,398,453,423],
[439,459,479,405,451,493,0,483,442],
[420,461,412,417,426,438,408,0,460],
[418,461,461,423,449,468,449,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,431,394,477,453,430,428,461],
[421,0,405,415,468,438,406,428,413],
[460,486,0,417,481,437,442,440,458],
[497,476,474,0,505,461,435,470,463],
[414,423,410,386,0,405,432,422,400],
[438,453,454,430,486,0,429,464,450],
[461,485,449,456,459,462,0,458,439],
[463,463,451,421,469,427,433,0,424],
[430,478,433,428,491,441,452,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,464,426,418,445,451,413,463],
[462,0,470,423,438,431,458,423,446],
[427,421,0,407,424,447,466,431,438],
[465,468,484,0,442,454,491,465,462],
[473,453,467,449,0,431,475,439,426],
[446,460,444,437,460,0,456,458,449],
[440,433,425,400,416,435,0,424,411],
[478,468,460,426,452,433,467,0,427],
[428,445,453,429,465,442,480,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,442,413,455,486,452,439,463],
[454,0,446,454,448,499,466,440,410],
[449,445,0,439,503,477,472,460,508],
[478,437,452,0,457,465,507,454,424],
[436,443,388,434,0,492,466,431,415],
[405,392,414,426,399,0,438,402,394],
[439,425,419,384,425,453,0,435,400],
[452,451,431,437,460,489,456,0,459],
[428,481,383,467,476,497,491,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,466,478,452,460,536,468,417],
[483,0,450,488,501,485,526,512,378],
[425,441,0,522,488,492,523,510,448],
[413,403,369,0,398,406,482,409,461],
[439,390,403,493,0,454,513,401,419],
[431,406,399,485,437,0,471,516,406],
[355,365,368,409,378,420,0,479,332],
[423,379,381,482,490,375,412,0,376],
[474,513,443,430,472,485,559,515,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,429,426,452,438,413,429,441],
[463,0,463,429,458,434,435,462,469],
[462,428,0,428,467,453,438,423,460],
[465,462,463,0,485,463,449,440,455],
[439,433,424,406,0,430,403,432,448],
[453,457,438,428,461,0,422,438,462],
[478,456,453,442,488,469,0,453,464],
[462,429,468,451,459,453,438,0,464],
[450,422,431,436,443,429,427,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,467,468,459,462,466,428,472],
[429,0,447,452,444,441,448,451,462],
[424,444,0,440,435,440,450,414,438],
[423,439,451,0,466,440,449,431,443],
[432,447,456,425,0,445,453,425,445],
[429,450,451,451,446,0,475,410,458],
[425,443,441,442,438,416,0,433,437],
[463,440,477,460,466,481,458,0,462],
[419,429,453,448,446,433,454,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,437,423,456,449,460,429,426],
[453,0,441,446,448,438,483,458,447],
[454,450,0,439,445,441,464,442,445],
[468,445,452,0,460,436,464,454,465],
[435,443,446,431,0,427,444,440,428],
[442,453,450,455,464,0,458,454,448],
[431,408,427,427,447,433,0,441,433],
[462,433,449,437,451,437,450,0,465],
[465,444,446,426,463,443,458,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,447,444,453,463,454,442,451],
[435,0,427,424,433,453,445,448,439],
[444,464,0,430,449,472,431,448,442],
[447,467,461,0,464,446,440,451,457],
[438,458,442,427,0,464,437,449,464],
[428,438,419,445,427,0,420,444,441],
[437,446,460,451,454,471,0,444,449],
[449,443,443,440,442,447,447,0,432],
[440,452,449,434,427,450,442,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,469,436,461,480,449,461,446],
[421,0,431,420,424,427,421,442,422],
[422,460,0,448,461,465,454,439,446],
[455,471,443,0,452,452,446,452,459],
[430,467,430,439,0,438,415,426,441],
[411,464,426,439,453,0,431,446,423],
[442,470,437,445,476,460,0,432,424],
[430,449,452,439,465,445,459,0,454],
[445,469,445,432,450,468,467,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,482,468,447,434,435,430,445],
[452,0,491,442,463,462,469,431,492],
[409,400,0,424,397,402,394,395,424],
[423,449,467,0,412,430,406,411,439],
[444,428,494,479,0,443,454,446,456],
[457,429,489,461,448,0,448,440,451],
[456,422,497,485,437,443,0,414,439],
[461,460,496,480,445,451,477,0,462],
[446,399,467,452,435,440,452,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,396,397,431,391,449,420,429],
[474,0,467,428,442,435,456,464,462],
[495,424,0,468,474,412,452,440,475],
[494,463,423,0,467,471,483,424,447],
[460,449,417,424,0,410,430,418,415],
[500,456,479,420,481,0,495,456,463],
[442,435,439,408,461,396,0,444,418],
[471,427,451,467,473,435,447,0,433],
[462,429,416,444,476,428,473,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,430,437,454,460,451,458,446],
[447,0,433,452,456,441,454,419,425],
[461,458,0,442,455,447,435,438,437],
[454,439,449,0,445,465,463,436,445],
[437,435,436,446,0,456,449,443,446],
[431,450,444,426,435,0,439,434,434],
[440,437,456,428,442,452,0,443,434],
[433,472,453,455,448,457,448,0,449],
[445,466,454,446,445,457,457,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,423,458,436,415,427,437,461],
[466,0,443,404,474,446,428,426,491],
[468,448,0,476,428,412,415,386,425],
[433,487,415,0,420,401,418,449,434],
[455,417,463,471,0,458,446,471,472],
[476,445,479,490,433,0,450,514,454],
[464,463,476,473,445,441,0,473,507],
[454,465,505,442,420,377,418,0,437],
[430,400,466,457,419,437,384,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,432,461,459,452,433,444,469],
[453,0,448,449,476,432,395,401,445],
[459,443,0,442,479,435,411,421,465],
[430,442,449,0,475,466,450,445,459],
[432,415,412,416,0,456,384,414,452],
[439,459,456,425,435,0,425,440,483],
[458,496,480,441,507,466,0,464,500],
[447,490,470,446,477,451,427,0,489],
[422,446,426,432,439,408,391,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,410,499,412,447,458,439,429],
[405,0,403,420,399,370,376,392,386],
[481,488,0,509,446,446,463,438,445],
[392,471,382,0,394,389,370,410,351],
[479,492,445,497,0,426,467,473,414],
[444,521,445,502,465,0,490,455,480],
[433,515,428,521,424,401,0,462,482],
[452,499,453,481,418,436,429,0,423],
[462,505,446,540,477,411,409,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,478,437,509,448,476,458,458],
[435,0,451,422,477,412,405,427,444],
[413,440,0,452,508,450,468,467,453],
[454,469,439,0,497,450,450,445,432],
[382,414,383,394,0,379,392,398,403],
[443,479,441,441,512,0,478,435,465],
[415,486,423,441,499,413,0,437,436],
[433,464,424,446,493,456,454,0,468],
[433,447,438,459,488,426,455,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,434,444,453,452,459,445,476],
[409,0,428,437,410,405,428,423,434],
[457,463,0,436,446,449,461,450,474],
[447,454,455,0,440,450,457,441,467],
[438,481,445,451,0,438,476,445,475],
[439,486,442,441,453,0,442,441,453],
[432,463,430,434,415,449,0,439,457],
[446,468,441,450,446,450,452,0,486],
[415,457,417,424,416,438,434,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,457,474,471,427,439,441,469],
[453,0,438,470,446,460,433,434,460],
[434,453,0,428,453,444,419,417,457],
[417,421,463,0,455,440,449,427,421],
[420,445,438,436,0,444,402,412,437],
[464,431,447,451,447,0,421,430,444],
[452,458,472,442,489,470,0,449,457],
[450,457,474,464,479,461,442,0,465],
[422,431,434,470,454,447,434,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,657,546,484,510,534,346,457,514],
[234,0,139,327,617,292,534,541,295],
[345,752,0,448,663,441,580,587,341],
[407,564,443,0,570,354,489,457,518],
[381,274,228,321,0,324,275,157,168],
[357,599,450,537,567,0,657,353,493],
[545,357,311,402,616,234,0,484,251],
[434,350,304,434,734,538,407,0,304],
[377,596,550,373,723,398,640,587,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,433,424,417,422,406,425,433],
[459,0,459,438,452,440,443,444,464],
[458,432,0,433,424,462,454,454,442],
[467,453,458,0,472,446,439,471,465],
[474,439,467,419,0,436,432,450,448],
[469,451,429,445,455,0,444,441,451],
[485,448,437,452,459,447,0,445,462],
[466,447,437,420,441,450,446,0,444],
[458,427,449,426,443,440,429,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,456,471,448,464,434,453,448],
[477,0,441,484,444,450,416,463,451],
[435,450,0,457,431,430,396,454,415],
[420,407,434,0,414,427,401,423,414],
[443,447,460,477,0,446,442,465,417],
[427,441,461,464,445,0,454,449,427],
[457,475,495,490,449,437,0,463,455],
[438,428,437,468,426,442,428,0,430],
[443,440,476,477,474,464,436,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,386,444,457,447,453,462,443],
[436,0,422,428,437,462,464,443,433],
[505,469,0,480,467,494,482,433,485],
[447,463,411,0,458,477,480,470,437],
[434,454,424,433,0,467,459,461,426],
[444,429,397,414,424,0,436,430,426],
[438,427,409,411,432,455,0,430,449],
[429,448,458,421,430,461,461,0,447],
[448,458,406,454,465,465,442,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,449,450,444,500,469,484,510],
[433,0,447,410,427,435,428,443,482],
[442,444,0,434,415,467,443,465,468],
[441,481,457,0,470,458,473,473,484],
[447,464,476,421,0,444,428,465,475],
[391,456,424,433,447,0,435,435,446],
[422,463,448,418,463,456,0,482,454],
[407,448,426,418,426,456,409,0,459],
[381,409,423,407,416,445,437,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,458,461,446,431,454,469,451],
[369,0,409,426,403,420,401,382,390],
[433,482,0,458,426,433,477,440,457],
[430,465,433,0,452,432,446,442,454],
[445,488,465,439,0,448,480,442,461],
[460,471,458,459,443,0,455,455,457],
[437,490,414,445,411,436,0,423,454],
[422,509,451,449,449,436,468,0,415],
[440,501,434,437,430,434,437,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,466,400,418,462,403,476,378],
[497,0,442,422,442,426,394,440,403],
[425,449,0,429,409,450,408,400,386],
[491,469,462,0,464,454,481,490,427],
[473,449,482,427,0,487,405,468,461],
[429,465,441,437,404,0,439,422,376],
[488,497,483,410,486,452,0,468,484],
[415,451,491,401,423,469,423,0,417],
[513,488,505,464,430,515,407,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,441,422,434,446,425,445,444],
[429,0,419,429,418,427,418,442,439],
[450,472,0,426,468,459,450,469,477],
[469,462,465,0,469,479,431,477,472],
[457,473,423,422,0,450,423,445,439],
[445,464,432,412,441,0,435,421,436],
[466,473,441,460,468,456,0,462,458],
[446,449,422,414,446,470,429,0,417],
[447,452,414,419,452,455,433,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,475,426,436,444,414,443,417],
[440,0,501,444,448,446,447,448,428],
[416,390,0,416,403,409,409,401,416],
[465,447,475,0,420,445,433,428,426],
[455,443,488,471,0,485,459,449,448],
[447,445,482,446,406,0,443,407,426],
[477,444,482,458,432,448,0,433,419],
[448,443,490,463,442,484,458,0,437],
[474,463,475,465,443,465,472,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,450,458,450,491,429,432,447],
[436,0,478,446,487,497,454,443,430],
[441,413,0,476,431,463,428,426,436],
[433,445,415,0,433,439,420,434,407],
[441,404,460,458,0,428,420,436,422],
[400,394,428,452,463,0,430,401,423],
[462,437,463,471,471,461,0,458,448],
[459,448,465,457,455,490,433,0,471],
[444,461,455,484,469,468,443,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,404,442,435,453,439,466,443],
[443,0,433,430,470,426,400,489,478],
[487,458,0,433,481,475,452,485,468],
[449,461,458,0,456,452,442,455,474],
[456,421,410,435,0,439,412,455,454],
[438,465,416,439,452,0,428,471,428],
[452,491,439,449,479,463,0,475,487],
[425,402,406,436,436,420,416,0,443],
[448,413,423,417,437,463,404,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,471,455,442,443,457,453,423],
[417,0,429,440,414,423,451,437,419],
[420,462,0,419,439,450,427,418,402],
[436,451,472,0,424,441,443,436,450],
[449,477,452,467,0,433,461,433,439],
[448,468,441,450,458,0,451,457,453],
[434,440,464,448,430,440,0,430,430],
[438,454,473,455,458,434,461,0,431],
[468,472,489,441,452,438,461,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,436,433,434,446,476,467,417],
[441,0,435,453,467,430,466,449,410],
[455,456,0,421,424,405,454,417,396],
[458,438,470,0,446,445,476,461,446],
[457,424,467,445,0,463,454,428,389],
[445,461,486,446,428,0,495,488,441],
[415,425,437,415,437,396,0,423,368],
[424,442,474,430,463,403,468,0,424],
[474,481,495,445,502,450,523,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,452,450,442,445,450,440,473],
[432,0,460,439,435,434,459,445,465],
[439,431,0,458,460,446,447,439,457],
[441,452,433,0,470,421,444,447,443],
[449,456,431,421,0,442,441,423,465],
[446,457,445,470,449,0,465,434,474],
[441,432,444,447,450,426,0,447,452],
[451,446,452,444,468,457,444,0,472],
[418,426,434,448,426,417,439,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,444,468,486,457,493,480,467],
[378,0,365,412,435,370,426,419,412],
[447,526,0,474,482,445,453,501,437],
[423,479,417,0,471,399,447,453,432],
[405,456,409,420,0,403,429,440,448],
[434,521,446,492,488,0,487,487,459],
[398,465,438,444,462,404,0,461,434],
[411,472,390,438,451,404,430,0,409],
[424,479,454,459,443,432,457,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,437,467,457,466,454,474,455],
[429,0,460,472,444,468,465,474,457],
[454,431,0,442,464,457,445,473,451],
[424,419,449,0,433,447,433,435,435],
[434,447,427,458,0,441,450,449,453],
[425,423,434,444,450,0,445,459,451],
[437,426,446,458,441,446,0,447,445],
[417,417,418,456,442,432,444,0,433],
[436,434,440,456,438,440,446,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,468,420,450,476,422,480,442],
[414,0,448,416,415,460,423,424,439],
[423,443,0,432,437,464,439,421,409],
[471,475,459,0,467,475,434,482,445],
[441,476,454,424,0,476,456,455,458],
[415,431,427,416,415,0,412,452,430],
[469,468,452,457,435,479,0,466,463],
[411,467,470,409,436,439,425,0,435],
[449,452,482,446,433,461,428,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,460,455,445,447,422,428,436],
[477,0,463,431,471,478,467,447,450],
[431,428,0,398,472,440,446,418,425],
[436,460,493,0,443,442,468,453,445],
[446,420,419,448,0,408,453,418,424],
[444,413,451,449,483,0,478,444,426],
[469,424,445,423,438,413,0,408,430],
[463,444,473,438,473,447,483,0,503],
[455,441,466,446,467,465,461,388,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,420,436,437,415,428,459,436],
[450,0,402,458,421,402,416,457,446],
[471,489,0,458,463,435,448,479,457],
[455,433,433,0,402,417,425,467,451],
[454,470,428,489,0,472,441,489,468],
[476,489,456,474,419,0,454,463,437],
[463,475,443,466,450,437,0,488,463],
[432,434,412,424,402,428,403,0,424],
[455,445,434,440,423,454,428,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,456,441,454,433,430,457,429],
[411,0,426,428,445,421,423,422,412],
[435,465,0,426,445,434,430,449,430],
[450,463,465,0,465,442,453,451,450],
[437,446,446,426,0,429,436,430,412],
[458,470,457,449,462,0,450,453,438],
[461,468,461,438,455,441,0,457,428],
[434,469,442,440,461,438,434,0,420],
[462,479,461,441,479,453,463,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,450,463,468,428,445,416,455],
[447,0,443,487,457,442,429,451,469],
[441,448,0,453,437,441,445,419,429],
[428,404,438,0,445,437,417,427,421],
[423,434,454,446,0,461,448,435,413],
[463,449,450,454,430,0,447,429,443],
[446,462,446,474,443,444,0,442,431],
[475,440,472,464,456,462,449,0,436],
[436,422,462,470,478,448,460,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,399,459,411,425,450,469,430],
[472,0,442,441,436,435,400,443,430],
[492,449,0,445,442,420,426,461,483],
[432,450,446,0,441,408,430,456,469],
[480,455,449,450,0,447,431,461,445],
[466,456,471,483,444,0,476,465,480],
[441,491,465,461,460,415,0,489,418],
[422,448,430,435,430,426,402,0,447],
[461,461,408,422,446,411,473,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,557,492,445,319,555,445,471],
[440,0,576,386,478,466,421,461,423],
[334,315,0,364,405,355,425,341,378],
[399,505,527,0,494,384,456,454,479],
[446,413,486,397,0,451,436,430,355],
[572,425,536,507,440,0,611,530,443],
[336,470,466,435,455,280,0,441,389],
[446,430,550,437,461,361,450,0,363],
[420,468,513,412,536,448,502,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,449,422,458,474,473,428,446],
[467,0,454,446,447,485,480,436,457],
[442,437,0,428,466,480,462,452,451],
[469,445,463,0,450,493,491,456,430],
[433,444,425,441,0,473,441,444,442],
[417,406,411,398,418,0,435,395,424],
[418,411,429,400,450,456,0,433,438],
[463,455,439,435,447,496,458,0,446],
[445,434,440,461,449,467,453,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,452,483,437,437,487,432,467],
[400,0,417,419,369,394,424,437,401],
[439,474,0,410,427,384,411,369,382],
[408,472,481,0,401,418,468,429,424],
[454,522,464,490,0,402,435,444,433],
[454,497,507,473,489,0,509,420,449],
[404,467,480,423,456,382,0,474,418],
[459,454,522,462,447,471,417,0,428],
[424,490,509,467,458,442,473,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,435,456,447,436,452,442,448],
[421,0,440,429,448,452,456,455,415],
[456,451,0,447,454,451,465,445,441],
[435,462,444,0,452,443,457,458,421],
[444,443,437,439,0,444,445,431,439],
[455,439,440,448,447,0,445,435,430],
[439,435,426,434,446,446,0,429,435],
[449,436,446,433,460,456,462,0,440],
[443,476,450,470,452,461,456,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,460,501,467,416,439,443,468],
[423,0,479,499,446,508,449,470,490],
[431,412,0,433,467,441,447,444,408],
[390,392,458,0,442,424,470,399,460],
[424,445,424,449,0,455,464,433,452],
[475,383,450,467,436,0,432,443,453],
[452,442,444,421,427,459,0,452,451],
[448,421,447,492,458,448,439,0,459],
[423,401,483,431,439,438,440,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,471,435,479,466,447,426,428],
[430,0,435,440,491,485,428,438,450],
[420,456,0,465,490,437,457,427,418],
[456,451,426,0,496,448,457,475,425],
[412,400,401,395,0,397,418,384,427],
[425,406,454,443,494,0,445,444,421],
[444,463,434,434,473,446,0,432,445],
[465,453,464,416,507,447,459,0,410],
[463,441,473,466,464,470,446,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,426,458,462,470,428,481,420],
[445,0,456,485,464,445,484,482,442],
[465,435,0,483,475,473,425,458,446],
[433,406,408,0,451,443,443,427,376],
[429,427,416,440,0,419,424,400,403],
[421,446,418,448,472,0,480,419,422],
[463,407,466,448,467,411,0,443,432],
[410,409,433,464,491,472,448,0,373],
[471,449,445,515,488,469,459,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,403,422,414,428,444,424,417],
[423,0,433,443,428,452,448,451,450],
[488,458,0,465,450,442,475,448,455],
[469,448,426,0,445,453,465,417,443],
[477,463,441,446,0,449,467,445,448],
[463,439,449,438,442,0,443,407,459],
[447,443,416,426,424,448,0,442,442],
[467,440,443,474,446,484,449,0,455],
[474,441,436,448,443,432,449,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,395,441,414,430,432,390,415],
[398,0,396,439,464,461,438,409,472],
[496,495,0,482,477,485,464,442,492],
[450,452,409,0,429,424,398,409,423],
[477,427,414,462,0,458,408,431,430],
[461,430,406,467,433,0,410,389,472],
[459,453,427,493,483,481,0,472,463],
[501,482,449,482,460,502,419,0,460],
[476,419,399,468,461,419,428,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,445,442,456,436,450,442,448],
[413,0,411,397,402,427,411,449,416],
[446,480,0,459,438,429,469,471,466],
[449,494,432,0,457,470,460,475,463],
[435,489,453,434,0,452,441,469,459],
[455,464,462,421,439,0,447,479,457],
[441,480,422,431,450,444,0,455,450],
[449,442,420,416,422,412,436,0,441],
[443,475,425,428,432,434,441,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,423,469,431,454,452,419,443],
[437,0,446,462,464,457,465,447,469],
[468,445,0,482,461,463,466,452,465],
[422,429,409,0,421,442,439,421,424],
[460,427,430,470,0,447,456,451,452],
[437,434,428,449,444,0,450,411,436],
[439,426,425,452,435,441,0,423,448],
[472,444,439,470,440,480,468,0,455],
[448,422,426,467,439,455,443,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,451,450,452,437,435,439,431],
[469,0,457,451,459,454,447,426,413],
[440,434,0,452,438,434,420,400,431],
[441,440,439,0,455,439,440,448,437],
[439,432,453,436,0,425,436,442,407],
[454,437,457,452,466,0,444,438,439],
[456,444,471,451,455,447,0,458,451],
[452,465,491,443,449,453,433,0,407],
[460,478,460,454,484,452,440,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,418,444,449,442,430,426,440],
[462,0,461,443,430,438,430,427,451],
[473,430,0,454,433,456,442,443,447],
[447,448,437,0,438,434,432,451,459],
[442,461,458,453,0,464,428,455,453],
[449,453,435,457,427,0,422,442,435],
[461,461,449,459,463,469,0,438,444],
[465,464,448,440,436,449,453,0,452],
[451,440,444,432,438,456,447,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,471,430,479,481,409,465,451],
[450,0,447,455,475,445,437,457,448],
[420,444,0,425,451,445,424,460,450],
[461,436,466,0,490,479,475,479,459],
[412,416,440,401,0,429,407,439,443],
[410,446,446,412,462,0,425,464,469],
[482,454,467,416,484,466,0,476,453],
[426,434,431,412,452,427,415,0,400],
[440,443,441,432,448,422,438,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,423,422,428,473,466,418,408],
[475,0,429,457,478,490,498,419,416],
[468,462,0,432,444,467,454,429,415],
[469,434,459,0,466,462,497,485,429],
[463,413,447,425,0,474,493,444,458],
[418,401,424,429,417,0,453,393,438],
[425,393,437,394,398,438,0,400,370],
[473,472,462,406,447,498,491,0,446],
[483,475,476,462,433,453,521,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,412,403,445,449,436,443,439],
[465,0,439,438,451,466,461,470,468],
[479,452,0,442,463,452,450,459,475],
[488,453,449,0,439,466,472,471,492],
[446,440,428,452,0,458,464,469,459],
[442,425,439,425,433,0,440,465,464],
[455,430,441,419,427,451,0,443,450],
[448,421,432,420,422,426,448,0,465],
[452,423,416,399,432,427,441,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,440,450,399,397,444,441,425],
[453,0,454,464,418,406,460,422,434],
[451,437,0,450,417,439,434,445,416],
[441,427,441,0,422,393,409,416,418],
[492,473,474,469,0,435,475,460,452],
[494,485,452,498,456,0,443,450,448],
[447,431,457,482,416,448,0,425,409],
[450,469,446,475,431,441,466,0,431],
[466,457,475,473,439,443,482,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,473,421,433,501,476,442,475],
[445,0,472,415,485,468,461,436,442],
[418,419,0,404,428,442,401,441,432],
[470,476,487,0,495,479,465,430,441],
[458,406,463,396,0,464,454,450,445],
[390,423,449,412,427,0,441,414,437],
[415,430,490,426,437,450,0,426,418],
[449,455,450,461,441,477,465,0,446],
[416,449,459,450,446,454,473,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,436,451,458,437,455,441,456],
[446,0,445,434,474,474,435,434,437],
[455,446,0,439,483,478,433,451,466],
[440,457,452,0,469,462,451,447,467],
[433,417,408,422,0,459,441,449,446],
[454,417,413,429,432,0,436,446,435],
[436,456,458,440,450,455,0,473,467],
[450,457,440,444,442,445,418,0,444],
[435,454,425,424,445,456,424,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,477,427,442,464,388,407,437],
[451,0,488,444,496,478,472,446,437],
[414,403,0,393,377,443,372,447,470],
[464,447,498,0,445,478,415,462,443],
[449,395,514,446,0,429,400,458,481],
[427,413,448,413,462,0,387,454,434],
[503,419,519,476,491,504,0,487,441],
[484,445,444,429,433,437,404,0,448],
[454,454,421,448,410,457,450,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,450,457,424,430,437,431,427],
[451,0,452,443,447,432,433,433,439],
[441,439,0,446,448,427,453,418,434],
[434,448,445,0,431,461,432,431,432],
[467,444,443,460,0,468,465,430,460],
[461,459,464,430,423,0,448,450,464],
[454,458,438,459,426,443,0,428,426],
[460,458,473,460,461,441,463,0,457],
[464,452,457,459,431,427,465,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,440,447,415,428,441,427,440],
[457,0,445,455,427,437,446,443,454],
[451,446,0,459,453,432,447,432,450],
[444,436,432,0,428,436,446,430,441],
[476,464,438,463,0,448,459,463,472],
[463,454,459,455,443,0,439,442,459],
[450,445,444,445,432,452,0,417,444],
[464,448,459,461,428,449,474,0,460],
[451,437,441,450,419,432,447,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,459,445,451,479,460,436,462],
[449,0,433,437,471,482,476,415,451],
[432,458,0,414,397,476,428,443,425],
[446,454,477,0,455,500,475,437,457],
[440,420,494,436,0,520,487,456,460],
[412,409,415,391,371,0,427,434,425],
[431,415,463,416,404,464,0,409,445],
[455,476,448,454,435,457,482,0,490],
[429,440,466,434,431,466,446,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,463,458,463,468,405,390,389],
[441,0,479,432,488,441,446,423,415],
[428,412,0,436,427,462,396,414,437],
[433,459,455,0,434,414,421,448,417],
[428,403,464,457,0,434,400,454,402],
[423,450,429,477,457,0,373,440,374],
[486,445,495,470,491,518,0,419,448],
[501,468,477,443,437,451,472,0,439],
[502,476,454,474,489,517,443,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,433,443,447,457,484,428,486],
[441,0,440,423,442,445,452,430,414],
[458,451,0,415,425,420,490,459,441],
[448,468,476,0,461,445,464,446,498],
[444,449,466,430,0,438,480,433,436],
[434,446,471,446,453,0,487,440,457],
[407,439,401,427,411,404,0,425,421],
[463,461,432,445,458,451,466,0,429],
[405,477,450,393,455,434,470,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,264,336,494,406,333,402,405],
[584,0,373,366,561,441,334,408,419],
[627,518,0,438,536,559,459,453,604],
[555,525,453,0,555,511,462,440,472],
[397,330,355,336,0,325,434,340,389],
[485,450,332,380,566,0,365,401,478],
[558,557,432,429,457,526,0,385,486],
[489,483,438,451,551,490,506,0,465],
[486,472,287,419,502,413,405,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,427,437,436,451,427,424,453],
[474,0,437,458,475,460,462,434,451],
[464,454,0,438,459,434,447,451,476],
[454,433,453,0,466,449,442,425,450],
[455,416,432,425,0,434,463,435,450],
[440,431,457,442,457,0,430,444,457],
[464,429,444,449,428,461,0,439,454],
[467,457,440,466,456,447,452,0,449],
[438,440,415,441,441,434,437,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,469,436,439,446,440,453,424],
[449,0,495,457,437,440,430,432,484],
[422,396,0,426,416,416,421,420,420],
[455,434,465,0,430,413,426,428,428],
[452,454,475,461,0,422,456,457,461],
[445,451,475,478,469,0,433,452,474],
[451,461,470,465,435,458,0,443,450],
[438,459,471,463,434,439,448,0,457],
[467,407,471,463,430,417,441,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,450,436,453,430,438,454,456],
[454,0,446,426,456,451,441,464,482],
[441,445,0,460,449,449,449,451,467],
[455,465,431,0,469,452,450,470,465],
[438,435,442,422,0,419,436,471,465],
[461,440,442,439,472,0,445,469,460],
[453,450,442,441,455,446,0,469,448],
[437,427,440,421,420,422,422,0,453],
[435,409,424,426,426,431,443,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,434,461,443,435,436,430,439],
[464,0,443,459,463,452,459,443,455],
[457,448,0,456,462,451,445,458,457],
[430,432,435,0,451,455,423,435,462],
[448,428,429,440,0,449,451,433,454],
[456,439,440,436,442,0,445,428,464],
[455,432,446,468,440,446,0,433,479],
[461,448,433,456,458,463,458,0,451],
[452,436,434,429,437,427,412,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,462,430,453,454,463,455,452],
[443,0,442,398,445,448,431,459,431],
[429,449,0,427,459,449,445,460,449],
[461,493,464,0,471,460,440,485,473],
[438,446,432,420,0,449,436,469,434],
[437,443,442,431,442,0,439,469,429],
[428,460,446,451,455,452,0,468,452],
[436,432,431,406,422,422,423,0,437],
[439,460,442,418,457,462,439,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,427,453,422,377,421,424,424],
[482,0,452,466,471,463,486,440,481],
[464,439,0,459,453,420,481,443,439],
[438,425,432,0,443,430,456,433,415],
[469,420,438,448,0,429,443,453,445],
[514,428,471,461,462,0,454,442,473],
[470,405,410,435,448,437,0,425,420],
[467,451,448,458,438,449,466,0,462],
[467,410,452,476,446,418,471,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,412,456,417,446,432,418,439],
[447,0,455,437,422,448,435,434,435],
[479,436,0,449,450,439,447,431,443],
[435,454,442,0,426,424,433,429,436],
[474,469,441,465,0,472,444,421,451],
[445,443,452,467,419,0,455,438,424],
[459,456,444,458,447,436,0,453,436],
[473,457,460,462,470,453,438,0,461],
[452,456,448,455,440,467,455,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,278,203,397,288,395,385,466],
[617,0,354,316,605,386,535,515,462],
[613,537,0,508,502,372,620,413,462],
[688,575,383,0,621,460,398,582,519],
[494,286,389,270,0,355,503,396,428],
[603,505,519,431,536,0,574,583,541],
[496,356,271,493,388,317,0,461,472],
[506,376,478,309,495,308,430,0,424],
[425,429,429,372,463,350,419,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,443,434,444,448,443,451,450],
[417,0,441,445,454,455,453,459,446],
[448,450,0,439,470,472,424,458,463],
[457,446,452,0,444,446,435,440,459],
[447,437,421,447,0,460,433,451,472],
[443,436,419,445,431,0,423,415,428],
[448,438,467,456,458,468,0,441,463],
[440,432,433,451,440,476,450,0,461],
[441,445,428,432,419,463,428,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,422,455,472,452,489,517,507],
[386,0,397,410,374,400,418,433,438],
[469,494,0,465,418,453,469,503,464],
[436,481,426,0,425,424,457,522,505],
[419,517,473,466,0,453,508,497,474],
[439,491,438,467,438,0,443,540,485],
[402,473,422,434,383,448,0,472,453],
[374,458,388,369,394,351,419,0,420],
[384,453,427,386,417,406,438,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,427,437,445,435,448,442,419],
[443,0,472,446,434,439,452,445,430],
[464,419,0,431,444,432,449,416,428],
[454,445,460,0,455,433,451,463,444],
[446,457,447,436,0,453,435,430,440],
[456,452,459,458,438,0,473,463,464],
[443,439,442,440,456,418,0,435,429],
[449,446,475,428,461,428,456,0,440],
[472,461,463,447,451,427,462,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,444,437,467,449,425,458,451],
[442,0,433,448,476,428,419,415,446],
[447,458,0,477,470,430,449,444,486],
[454,443,414,0,452,429,414,443,473],
[424,415,421,439,0,419,418,421,440],
[442,463,461,462,472,0,447,446,466],
[466,472,442,477,473,444,0,442,452],
[433,476,447,448,470,445,449,0,453],
[440,445,405,418,451,425,439,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,446,444,467,449,464,457,459],
[422,0,449,444,439,431,443,434,442],
[445,442,0,436,452,451,445,454,426],
[447,447,455,0,470,435,440,443,445],
[424,452,439,421,0,438,431,439,431],
[442,460,440,456,453,0,439,432,436],
[427,448,446,451,460,452,0,448,436],
[434,457,437,448,452,459,443,0,443],
[432,449,465,446,460,455,455,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,439,462,427,429,434,432,438],
[441,0,461,457,435,424,440,450,453],
[452,430,0,449,419,422,432,423,457],
[429,434,442,0,417,435,422,411,439],
[464,456,472,474,0,441,434,446,456],
[462,467,469,456,450,0,443,446,462],
[457,451,459,469,457,448,0,444,440],
[459,441,468,480,445,445,447,0,456],
[453,438,434,452,435,429,451,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,438,412,434,442,394,434,449],
[461,0,462,434,438,475,444,465,465],
[453,429,0,443,449,455,451,456,456],
[479,457,448,0,447,461,436,480,470],
[457,453,442,444,0,466,429,449,442],
[449,416,436,430,425,0,419,443,422],
[497,447,440,455,462,472,0,472,472],
[457,426,435,411,442,448,419,0,432],
[442,426,435,421,449,469,419,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,476,483,485,474,489,417,396],
[432,0,439,505,451,411,443,429,406],
[415,452,0,460,434,439,461,408,392],
[408,386,431,0,469,383,463,429,379],
[406,440,457,422,0,390,455,429,389],
[417,480,452,508,501,0,488,464,430],
[402,448,430,428,436,403,0,426,369],
[474,462,483,462,462,427,465,0,451],
[495,485,499,512,502,461,522,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,447,445,439,457,424,456,457],
[458,0,442,451,433,481,447,435,463],
[444,449,0,451,457,454,428,437,451],
[446,440,440,0,452,459,440,449,457],
[452,458,434,439,0,484,438,440,475],
[434,410,437,432,407,0,412,431,437],
[467,444,463,451,453,479,0,447,462],
[435,456,454,442,451,460,444,0,454],
[434,428,440,434,416,454,429,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,353,246,271,271,510,271,164,11],
[538,0,281,118,545,275,382,549,549],
[645,610,0,264,641,350,371,538,538],
[620,773,627,0,616,350,627,538,631],
[620,346,250,275,0,514,617,549,631],
[381,616,541,541,377,0,541,381,392],
[620,509,520,264,274,350,0,274,620],
[727,342,353,353,342,510,617,0,357],
[880,342,353,260,260,499,271,534,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,440,405,495,484,327,365,340],
[439,0,438,356,437,505,351,401,343],
[451,453,0,384,506,334,325,350,297],
[486,535,507,0,563,476,416,413,451],
[396,454,385,328,0,328,346,304,358],
[407,386,557,415,563,0,464,372,358],
[564,540,566,475,545,427,0,493,456],
[526,490,541,478,587,519,398,0,515],
[551,548,594,440,533,533,435,376,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,473,426,469,495,463,470,464],
[427,0,485,454,482,431,496,431,427],
[418,406,0,384,398,458,424,396,427],
[465,437,507,0,440,498,486,462,451],
[422,409,493,451,0,489,446,484,405],
[396,460,433,393,402,0,419,408,439],
[428,395,467,405,445,472,0,445,433],
[421,460,495,429,407,483,446,0,466],
[427,464,464,440,486,452,458,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,476,450,417,428,478,417,432],
[478,0,510,445,465,460,461,452,438],
[415,381,0,463,429,433,437,458,426],
[441,446,428,0,439,429,439,448,438],
[474,426,462,452,0,487,448,460,461],
[463,431,458,462,404,0,466,428,433],
[413,430,454,452,443,425,0,430,481],
[474,439,433,443,431,463,461,0,465],
[459,453,465,453,430,458,410,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,433,437,456,526,443,467,449],
[456,0,484,467,462,542,468,508,430],
[458,407,0,459,442,504,441,436,424],
[454,424,432,0,439,487,451,437,405],
[435,429,449,452,0,489,472,431,419],
[365,349,387,404,402,0,381,412,380],
[448,423,450,440,419,510,0,487,424],
[424,383,455,454,460,479,404,0,425],
[442,461,467,486,472,511,467,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,479,463,459,440,442,440,469],
[435,0,434,448,458,441,442,447,451],
[412,457,0,435,458,431,427,431,427],
[428,443,456,0,445,443,428,415,413],
[432,433,433,446,0,436,387,424,407],
[451,450,460,448,455,0,450,442,433],
[449,449,464,463,504,441,0,441,461],
[451,444,460,476,467,449,450,0,473],
[422,440,464,478,484,458,430,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,421,430,429,454,445,451,431],
[439,0,445,428,439,437,445,448,423],
[470,446,0,435,441,443,433,450,440],
[461,463,456,0,442,459,449,451,463],
[462,452,450,449,0,453,440,453,450],
[437,454,448,432,438,0,429,471,469],
[446,446,458,442,451,462,0,459,452],
[440,443,441,440,438,420,432,0,454],
[460,468,451,428,441,422,439,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,535,338,351,529,379,354,526],
[563,0,700,352,334,618,454,588,504],
[356,191,0,297,360,387,255,315,288],
[553,539,594,0,374,495,398,426,443],
[540,557,531,517,0,469,452,413,580],
[362,273,504,396,422,0,436,386,484],
[512,437,636,493,439,455,0,509,568],
[537,303,576,465,478,505,382,0,571],
[365,387,603,448,311,407,323,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,467,429,443,496,431,426,469],
[440,0,452,441,429,468,430,453,435],
[424,439,0,427,444,444,444,430,426],
[462,450,464,0,446,466,436,427,469],
[448,462,447,445,0,486,467,445,471],
[395,423,447,425,405,0,435,433,443],
[460,461,447,455,424,456,0,429,462],
[465,438,461,464,446,458,462,0,447],
[422,456,465,422,420,448,429,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,442,440,518,552,459,483,439],
[379,0,455,339,508,491,396,485,568],
[449,436,0,387,483,511,457,453,540],
[451,552,504,0,469,413,428,420,547],
[373,383,408,422,0,419,346,426,400],
[339,400,380,478,472,0,428,430,450],
[432,495,434,463,545,463,0,505,540],
[408,406,438,471,465,461,386,0,456],
[452,323,351,344,491,441,351,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,478,438,438,428,445,434,428],
[457,0,471,444,429,449,424,443,422],
[413,420,0,415,417,418,400,420,405],
[453,447,476,0,478,434,429,462,434],
[453,462,474,413,0,435,433,448,467],
[463,442,473,457,456,0,456,471,438],
[446,467,491,462,458,435,0,450,427],
[457,448,471,429,443,420,441,0,436],
[463,469,486,457,424,453,464,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,425,449,473,442,471,492,454],
[442,0,432,492,471,505,479,497,421],
[466,459,0,466,493,467,420,444,425],
[442,399,425,0,464,438,479,476,421],
[418,420,398,427,0,395,417,445,429],
[449,386,424,453,496,0,454,443,441],
[420,412,471,412,474,437,0,462,427],
[399,394,447,415,446,448,429,0,404],
[437,470,466,470,462,450,464,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,449,455,418,448,431,429,428],
[450,0,433,424,448,426,414,396,414],
[442,458,0,434,450,464,459,451,434],
[436,467,457,0,418,439,431,446,448],
[473,443,441,473,0,459,456,451,471],
[443,465,427,452,432,0,460,424,421],
[460,477,432,460,435,431,0,427,452],
[462,495,440,445,440,467,464,0,492],
[463,477,457,443,420,470,439,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,460,446,469,437,448,411,449],
[454,0,473,449,470,482,447,441,460],
[431,418,0,436,441,441,442,428,434],
[445,442,455,0,452,437,446,449,431],
[422,421,450,439,0,433,437,445,432],
[454,409,450,454,458,0,446,438,474],
[443,444,449,445,454,445,0,472,456],
[480,450,463,442,446,453,419,0,442],
[442,431,457,460,459,417,435,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,414,430,420,423,456,421,446],
[478,0,446,466,454,440,448,460,467],
[477,445,0,466,459,451,450,455,462],
[461,425,425,0,430,435,450,438,457],
[471,437,432,461,0,450,453,449,459],
[468,451,440,456,441,0,459,441,466],
[435,443,441,441,438,432,0,444,434],
[470,431,436,453,442,450,447,0,462],
[445,424,429,434,432,425,457,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,420,442,440,439,447,449,425],
[458,0,438,465,462,454,433,480,451],
[471,453,0,482,437,462,451,461,459],
[449,426,409,0,446,448,436,460,449],
[451,429,454,445,0,443,417,475,451],
[452,437,429,443,448,0,422,462,427],
[444,458,440,455,474,469,0,469,446],
[442,411,430,431,416,429,422,0,437],
[466,440,432,442,440,464,445,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,410,388,410,456,408,423,399],
[497,0,432,422,471,484,412,446,438],
[481,459,0,413,457,465,429,473,438],
[503,469,478,0,441,466,446,456,453],
[481,420,434,450,0,474,436,453,428],
[435,407,426,425,417,0,425,433,407],
[483,479,462,445,455,466,0,490,439],
[468,445,418,435,438,458,401,0,412],
[492,453,453,438,463,484,452,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,400,409,439,386,426,453,412],
[495,0,421,437,446,426,438,452,456],
[491,470,0,432,461,405,446,474,456],
[482,454,459,0,441,398,454,457,447],
[452,445,430,450,0,448,436,465,468],
[505,465,486,493,443,0,464,491,483],
[465,453,445,437,455,427,0,467,433],
[438,439,417,434,426,400,424,0,444],
[479,435,435,444,423,408,458,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,458,513,470,432,451,445,455],
[455,0,445,508,466,467,487,471,486],
[433,446,0,508,448,455,476,446,447],
[378,383,383,0,417,385,382,394,407],
[421,425,443,474,0,466,470,416,435],
[459,424,436,506,425,0,463,449,488],
[440,404,415,509,421,428,0,421,411],
[446,420,445,497,475,442,470,0,496],
[436,405,444,484,456,403,480,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,460,440,430,425,451,443,423],
[465,0,444,440,462,477,481,455,447],
[431,447,0,476,439,424,472,440,459],
[451,451,415,0,435,433,432,440,424],
[461,429,452,456,0,460,486,446,434],
[466,414,467,458,431,0,447,434,449],
[440,410,419,459,405,444,0,441,438],
[448,436,451,451,445,457,450,0,423],
[468,444,432,467,457,442,453,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,384,478,407,422,415,412,388],
[471,0,409,464,430,428,451,446,441],
[507,482,0,493,481,467,470,473,436],
[413,427,398,0,424,395,416,422,406],
[484,461,410,467,0,416,422,444,425],
[469,463,424,496,475,0,471,456,416],
[476,440,421,475,469,420,0,422,433],
[479,445,418,469,447,435,469,0,509],
[503,450,455,485,466,475,458,382,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,342,364,393,394,333,384,497],
[479,0,404,517,442,465,453,428,543],
[549,487,0,410,465,475,467,458,598],
[527,374,481,0,446,432,419,429,515],
[498,449,426,445,0,383,394,359,561],
[497,426,416,459,508,0,429,330,468],
[558,438,424,472,497,462,0,413,517],
[507,463,433,462,532,561,478,0,574],
[394,348,293,376,330,423,374,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,461,456,436,466,491,428,454],
[431,0,433,428,432,468,440,433,465],
[430,458,0,447,431,442,454,403,444],
[435,463,444,0,436,460,470,429,456],
[455,459,460,455,0,463,478,437,464],
[425,423,449,431,428,0,434,419,423],
[400,451,437,421,413,457,0,447,443],
[463,458,488,462,454,472,444,0,469],
[437,426,447,435,427,468,448,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,482,428,468,453,439,513,443],
[420,0,449,408,491,453,473,450,451],
[409,442,0,450,464,445,413,469,460],
[463,483,441,0,464,416,437,457,441],
[423,400,427,427,0,435,385,446,385],
[438,438,446,475,456,0,435,461,451],
[452,418,478,454,506,456,0,408,453],
[378,441,422,434,445,430,483,0,423],
[448,440,431,450,506,440,438,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,461,452,451,432,448,431,457],
[434,0,442,421,424,431,444,432,427],
[430,449,0,416,433,438,419,428,445],
[439,470,475,0,471,448,461,430,476],
[440,467,458,420,0,437,435,437,448],
[459,460,453,443,454,0,452,446,446],
[443,447,472,430,456,439,0,429,441],
[460,459,463,461,454,445,462,0,467],
[434,464,446,415,443,445,450,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,511,490,457,477,436,470,445,490],
[380,0,463,431,443,435,422,382,444],
[401,428,0,449,475,388,440,449,438],
[434,460,442,0,490,411,464,478,442],
[414,448,416,401,0,409,426,439,421],
[455,456,503,480,482,0,474,469,442],
[421,469,451,427,465,417,0,430,459],
[446,509,442,413,452,422,461,0,456],
[401,447,453,449,470,449,432,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,483,451,400,434,429,478,426],
[423,0,467,421,425,438,446,444,455],
[408,424,0,402,414,413,410,434,392],
[440,470,489,0,473,463,446,522,440],
[491,466,477,418,0,453,479,426,400],
[457,453,478,428,438,0,416,462,416],
[462,445,481,445,412,475,0,454,426],
[413,447,457,369,465,429,437,0,439],
[465,436,499,451,491,475,465,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,510,419,496,504,501,471,461],
[429,0,442,411,472,453,435,443,521],
[381,449,0,435,435,436,426,374,471],
[472,480,456,0,492,454,495,445,468],
[395,419,456,399,0,368,470,427,439],
[387,438,455,437,523,0,464,449,463],
[390,456,465,396,421,427,0,380,454],
[420,448,517,446,464,442,511,0,493],
[430,370,420,423,452,428,437,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,415,416,451,379,445,395,403],
[477,0,444,454,463,410,452,423,436],
[476,447,0,438,490,427,476,438,453],
[475,437,453,0,485,455,461,433,445],
[440,428,401,406,0,401,415,379,386],
[512,481,464,436,490,0,456,455,438],
[446,439,415,430,476,435,0,421,411],
[496,468,453,458,512,436,470,0,444],
[488,455,438,446,505,453,480,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,457,384,439,443,416,369,461],
[492,0,558,486,490,546,440,420,527],
[434,333,0,338,418,360,465,411,458],
[507,405,553,0,451,469,454,444,488],
[452,401,473,440,0,439,410,447,454],
[448,345,531,422,452,0,439,384,453],
[475,451,426,437,481,452,0,483,509],
[522,471,480,447,444,507,408,0,515],
[430,364,433,403,437,438,382,376,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,343,346,384,422,372,389,347],
[444,0,468,478,486,526,443,506,423],
[548,423,0,391,456,527,379,392,406],
[545,413,500,0,596,558,464,453,362],
[507,405,435,295,0,441,369,420,359],
[469,365,364,333,450,0,223,358,337],
[519,448,512,427,522,668,0,496,395],
[502,385,499,438,471,533,395,0,480],
[544,468,485,529,532,554,496,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,424,427,431,440,435,435,447],
[440,0,429,424,423,424,448,440,440],
[467,462,0,448,444,441,467,453,476],
[464,467,443,0,452,456,460,445,468],
[460,468,447,439,0,439,477,441,458],
[451,467,450,435,452,0,470,429,462],
[456,443,424,431,414,421,0,421,448],
[456,451,438,446,450,462,470,0,464],
[444,451,415,423,433,429,443,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,429,456,444,422,421,444,460],
[459,0,429,478,445,460,450,446,458],
[462,462,0,475,440,454,442,453,455],
[435,413,416,0,431,433,418,415,451],
[447,446,451,460,0,440,441,440,472],
[469,431,437,458,451,0,435,450,453],
[470,441,449,473,450,456,0,471,469],
[447,445,438,476,451,441,420,0,446],
[431,433,436,440,419,438,422,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,458,432,458,418,437,437,435],
[443,0,472,440,443,440,435,437,456],
[433,419,0,439,433,435,423,428,428],
[459,451,452,0,460,450,445,442,433],
[433,448,458,431,0,429,442,427,443],
[473,451,456,441,462,0,453,428,439],
[454,456,468,446,449,438,0,449,435],
[454,454,463,449,464,463,442,0,450],
[456,435,463,458,448,452,456,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,420,437,451,434,438,457,423],
[439,0,427,439,479,440,441,471,425],
[471,464,0,448,458,436,445,486,419],
[454,452,443,0,459,451,456,445,444],
[440,412,433,432,0,432,442,469,415],
[457,451,455,440,459,0,449,449,442],
[453,450,446,435,449,442,0,463,446],
[434,420,405,446,422,442,428,0,414],
[468,466,472,447,476,449,445,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,471,463,462,464,471,440,459],
[443,0,473,449,444,471,474,447,446],
[420,418,0,437,444,454,453,430,433],
[428,442,454,0,456,446,452,440,423],
[429,447,447,435,0,449,460,443,458],
[427,420,437,445,442,0,451,455,436],
[420,417,438,439,431,440,0,432,414],
[451,444,461,451,448,436,459,0,435],
[432,445,458,468,433,455,477,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,518,497,499,445,541,561,500],
[381,0,492,399,429,474,445,451,429],
[373,399,0,427,460,340,427,389,391],
[394,492,464,0,424,405,438,470,483],
[392,462,431,467,0,365,453,410,374],
[446,417,551,486,526,0,476,511,487],
[350,446,464,453,438,415,0,445,459],
[330,440,502,421,481,380,446,0,449],
[391,462,500,408,517,404,432,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,488,485,463,554,432,580,488],
[402,0,451,411,460,453,401,484,294],
[403,440,0,423,324,472,423,422,370],
[406,480,468,0,384,468,465,534,375],
[428,431,567,507,0,421,452,468,472],
[337,438,419,423,470,0,491,437,366],
[459,490,468,426,439,400,0,501,258],
[311,407,469,357,423,454,390,0,365],
[403,597,521,516,419,525,633,526,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,504,444,504,470,441,446,481],
[433,0,470,433,489,473,504,500,468],
[387,421,0,382,493,492,446,455,421],
[447,458,509,0,522,497,445,488,462],
[387,402,398,369,0,438,389,414,407],
[421,418,399,394,453,0,421,372,443],
[450,387,445,446,502,470,0,451,452],
[445,391,436,403,477,519,440,0,426],
[410,423,470,429,484,448,439,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,420,457,442,438,444,453,428],
[451,0,429,452,444,455,436,418,447],
[471,462,0,460,470,455,456,464,430],
[434,439,431,0,436,436,432,437,417],
[449,447,421,455,0,448,463,457,432],
[453,436,436,455,443,0,429,453,426],
[447,455,435,459,428,462,0,431,424],
[438,473,427,454,434,438,460,0,434],
[463,444,461,474,459,465,467,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,408,445,449,419,439,467,435],
[442,0,417,406,428,424,408,451,405],
[483,474,0,438,477,455,441,484,424],
[446,485,453,0,457,453,437,449,432],
[442,463,414,434,0,444,409,446,423],
[472,467,436,438,447,0,429,471,417],
[452,483,450,454,482,462,0,435,470],
[424,440,407,442,445,420,456,0,419],
[456,486,467,459,468,474,421,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,510,431,445,452,446,436,444],
[443,0,471,466,447,443,447,436,431],
[381,420,0,429,394,421,378,425,404],
[460,425,462,0,441,477,458,470,456],
[446,444,497,450,0,438,443,473,473],
[439,448,470,414,453,0,442,441,448],
[445,444,513,433,448,449,0,454,457],
[455,455,466,421,418,450,437,0,440],
[447,460,487,435,418,443,434,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,412,468,376,408,408,453,444],
[416,0,332,385,369,344,368,455,398],
[479,559,0,460,445,466,447,508,477],
[423,506,431,0,408,403,426,434,412],
[515,522,446,483,0,457,443,517,511],
[483,547,425,488,434,0,465,480,484],
[483,523,444,465,448,426,0,449,444],
[438,436,383,457,374,411,442,0,431],
[447,493,414,479,380,407,447,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,370,475,433,412,412,501,435],
[453,0,429,455,456,410,412,465,407],
[521,462,0,466,518,472,426,509,461],
[416,436,425,0,466,437,442,516,399],
[458,435,373,425,0,405,435,454,436],
[479,481,419,454,486,0,478,482,468],
[479,479,465,449,456,413,0,506,444],
[390,426,382,375,437,409,385,0,403],
[456,484,430,492,455,423,447,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,447,440,447,447,453,430,460],
[451,0,448,445,443,442,455,429,455],
[444,443,0,439,457,471,449,461,470],
[451,446,452,0,441,471,443,449,466],
[444,448,434,450,0,459,428,437,470],
[444,449,420,420,432,0,442,445,454],
[438,436,442,448,463,449,0,448,433],
[461,462,430,442,454,446,443,0,460],
[431,436,421,425,421,437,458,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,494,446,464,441,436,435,463],
[454,0,491,469,453,451,465,442,469],
[397,400,0,434,433,442,416,422,419],
[445,422,457,0,450,445,422,439,463],
[427,438,458,441,0,443,427,449,445],
[450,440,449,446,448,0,436,447,444],
[455,426,475,469,464,455,0,465,479],
[456,449,469,452,442,444,426,0,449],
[428,422,472,428,446,447,412,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,450,475,419,399,435,416,434],
[466,0,426,454,450,390,427,420,430],
[441,465,0,450,433,461,467,433,451],
[416,437,441,0,455,411,402,430,447],
[472,441,458,436,0,400,441,437,466],
[492,501,430,480,491,0,452,459,439],
[456,464,424,489,450,439,0,441,446],
[475,471,458,461,454,432,450,0,490],
[457,461,440,444,425,452,445,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,481,398,486,444,448,430,456],
[405,0,441,396,453,446,466,419,464],
[410,450,0,428,468,436,479,472,460],
[493,495,463,0,496,479,507,419,485],
[405,438,423,395,0,409,486,401,463],
[447,445,455,412,482,0,530,417,476],
[443,425,412,384,405,361,0,375,451],
[461,472,419,472,490,474,516,0,484],
[435,427,431,406,428,415,440,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,447,474,479,466,438,470,440],
[441,0,424,442,440,464,427,438,392],
[444,467,0,447,450,440,429,432,417],
[417,449,444,0,470,464,470,437,399],
[412,451,441,421,0,455,422,438,401],
[425,427,451,427,436,0,429,435,424],
[453,464,462,421,469,462,0,448,449],
[421,453,459,454,453,456,443,0,426],
[451,499,474,492,490,467,442,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,465,450,444,441,441,455,452],
[429,0,449,438,441,434,431,435,442],
[426,442,0,449,440,411,437,443,450],
[441,453,442,0,425,451,433,440,447],
[447,450,451,466,0,440,442,455,459],
[450,457,480,440,451,0,447,461,434],
[450,460,454,458,449,444,0,449,472],
[436,456,448,451,436,430,442,0,458],
[439,449,441,444,432,457,419,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,486,482,456,467,464,458,453],
[453,0,483,458,479,442,450,455,423],
[405,408,0,435,408,417,441,423,405],
[409,433,456,0,442,442,432,436,419],
[435,412,483,449,0,441,452,434,432],
[424,449,474,449,450,0,457,468,438],
[427,441,450,459,439,434,0,436,421],
[433,436,468,455,457,423,455,0,422],
[438,468,486,472,459,453,470,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,485,408,470,562,522,413,557],
[378,0,427,353,437,441,422,323,443],
[406,464,0,346,398,494,427,335,486],
[483,538,545,0,454,559,439,453,497],
[421,454,493,437,0,529,498,411,477],
[329,450,397,332,362,0,429,299,402],
[369,469,464,452,393,462,0,422,447],
[478,568,556,438,480,592,469,0,585],
[334,448,405,394,414,489,444,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,476,456,517,414,477,461,492],
[428,0,423,414,458,394,420,397,437],
[415,468,0,433,445,430,430,424,470],
[435,477,458,0,486,467,490,484,468],
[374,433,446,405,0,394,403,380,393],
[477,497,461,424,497,0,470,463,466],
[414,471,461,401,488,421,0,403,441],
[430,494,467,407,511,428,488,0,488],
[399,454,421,423,498,425,450,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,463,418,461,423,426,435,440],
[456,0,482,432,459,440,451,434,432],
[428,409,0,421,440,432,432,422,420],
[473,459,470,0,468,445,472,461,452],
[430,432,451,423,0,430,439,442,440],
[468,451,459,446,461,0,450,431,435],
[465,440,459,419,452,441,0,441,438],
[456,457,469,430,449,460,450,0,447],
[451,459,471,439,451,456,453,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,399,392,472,440,417,442,379],
[444,0,424,496,500,480,381,396,387],
[492,467,0,484,504,468,483,528,423],
[499,395,407,0,516,472,510,382,423],
[419,391,387,375,0,396,338,420,369],
[451,411,423,419,495,0,420,455,410],
[474,510,408,381,553,471,0,459,408],
[449,495,363,509,471,436,432,0,448],
[512,504,468,468,522,481,483,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,432,450,462,442,447,449,466],
[419,0,409,443,450,431,458,423,420],
[459,482,0,438,440,433,469,434,467],
[441,448,453,0,474,447,492,458,479],
[429,441,451,417,0,445,459,437,433],
[449,460,458,444,446,0,470,426,438],
[444,433,422,399,432,421,0,440,439],
[442,468,457,433,454,465,451,0,468],
[425,471,424,412,458,453,452,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,446,447,471,452,464,480,461],
[452,0,465,439,471,410,433,454,455],
[445,426,0,441,473,445,470,465,470],
[444,452,450,0,464,443,443,479,458],
[420,420,418,427,0,431,448,437,447],
[439,481,446,448,460,0,463,469,474],
[427,458,421,448,443,428,0,459,429],
[411,437,426,412,454,422,432,0,459],
[430,436,421,433,444,417,462,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,474,455,481,466,431,449,422],
[457,0,478,462,505,461,443,456,442],
[417,413,0,442,447,416,423,432,398],
[436,429,449,0,476,439,460,432,448],
[410,386,444,415,0,408,387,418,424],
[425,430,475,452,483,0,433,475,453],
[460,448,468,431,504,458,0,466,448],
[442,435,459,459,473,416,425,0,444],
[469,449,493,443,467,438,443,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,384,364,428,386,378,411,400,370],
[507,0,462,477,457,451,445,454,410],
[527,429,0,453,441,454,490,446,447],
[463,414,438,0,433,425,418,429,427],
[505,434,450,458,0,441,440,457,469],
[513,440,437,466,450,0,469,507,500],
[480,446,401,473,451,422,0,471,441],
[491,437,445,462,434,384,420,0,425],
[521,481,444,464,422,391,450,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,414,451,456,478,471,443,449],
[431,0,400,414,418,443,414,413,435],
[477,491,0,482,440,512,516,485,454],
[440,477,409,0,434,488,452,477,450],
[435,473,451,457,0,495,446,447,444],
[413,448,379,403,396,0,440,477,442],
[420,477,375,439,445,451,0,458,450],
[448,478,406,414,444,414,433,0,432],
[442,456,437,441,447,449,441,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,437,430,446,433,420,398,426],
[455,0,440,404,443,410,415,388,421],
[454,451,0,428,455,441,449,412,444],
[461,487,463,0,459,448,449,416,438],
[445,448,436,432,0,430,430,389,417],
[458,481,450,443,461,0,434,409,433],
[471,476,442,442,461,457,0,406,455],
[493,503,479,475,502,482,485,0,432],
[465,470,447,453,474,458,436,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,424,423,433,462,423,441,434],
[431,0,421,403,398,457,425,403,434],
[467,470,0,421,428,461,427,474,451],
[468,488,470,0,458,457,431,467,485],
[458,493,463,433,0,464,452,481,455],
[429,434,430,434,427,0,452,449,448],
[468,466,464,460,439,439,0,464,469],
[450,488,417,424,410,442,427,0,453],
[457,457,440,406,436,443,422,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,422,465,439,425,445,423,427],
[438,0,434,483,457,442,414,444,445],
[469,457,0,486,438,454,446,442,468],
[426,408,405,0,415,411,418,404,422],
[452,434,453,476,0,432,449,440,455],
[466,449,437,480,459,0,453,438,437],
[446,477,445,473,442,438,0,419,457],
[468,447,449,487,451,453,472,0,436],
[464,446,423,469,436,454,434,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,615,467,440,588,489,428,327],
[417,0,651,518,452,570,439,374,457],
[276,240,0,422,344,376,231,330,413],
[424,373,469,0,298,456,427,284,389],
[451,439,547,593,0,544,495,358,547],
[303,321,515,435,347,0,471,438,330],
[402,452,660,464,396,420,0,384,403],
[463,517,561,607,533,453,507,0,439],
[564,434,478,502,344,561,488,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,436,424,438,462,447,451,448],
[435,0,445,463,466,430,421,452,420],
[455,446,0,439,455,445,423,438,420],
[467,428,452,0,434,407,408,421,428],
[453,425,436,457,0,419,401,420,435],
[429,461,446,484,472,0,458,458,444],
[444,470,468,483,490,433,0,431,448],
[440,439,453,470,471,433,460,0,443],
[443,471,471,463,456,447,443,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,430,412,453,429,431,442,456],
[454,0,443,409,423,463,459,396,449],
[461,448,0,413,432,439,457,433,455],
[479,482,478,0,438,471,463,448,457],
[438,468,459,453,0,464,444,436,445],
[462,428,452,420,427,0,412,428,461],
[460,432,434,428,447,479,0,451,467],
[449,495,458,443,455,463,440,0,455],
[435,442,436,434,446,430,424,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,495,455,443,426,505,445,455],
[458,0,437,492,439,414,531,423,515],
[396,454,0,482,416,394,471,481,532],
[436,399,409,0,414,436,460,422,442],
[448,452,475,477,0,480,493,411,486],
[465,477,497,455,411,0,522,456,496],
[386,360,420,431,398,369,0,474,447],
[446,468,410,469,480,435,417,0,480],
[436,376,359,449,405,395,444,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,465,462,507,497,441,441,477],
[454,0,445,434,469,460,413,474,463],
[426,446,0,439,474,440,422,436,436],
[429,457,452,0,495,498,441,463,434],
[384,422,417,396,0,459,417,434,393],
[394,431,451,393,432,0,381,425,442],
[450,478,469,450,474,510,0,457,438],
[450,417,455,428,457,466,434,0,477],
[414,428,455,457,498,449,453,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,425,411,471,415,437,468,473],
[433,0,438,434,472,462,423,464,457],
[466,453,0,431,468,447,456,456,436],
[480,457,460,0,498,424,433,460,427],
[420,419,423,393,0,445,403,442,448],
[476,429,444,467,446,0,442,504,471],
[454,468,435,458,488,449,0,476,477],
[423,427,435,431,449,387,415,0,427],
[418,434,455,464,443,420,414,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,414,488,516,441,515,394,509],
[472,0,457,438,439,451,437,507,418],
[477,434,0,437,415,488,424,449,542],
[403,453,454,0,452,424,527,341,496],
[375,452,476,439,0,468,401,459,481],
[450,440,403,467,423,0,425,402,537],
[376,454,467,364,490,466,0,384,515],
[497,384,442,550,432,489,507,0,473],
[382,473,349,395,410,354,376,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,532,507,462,443,482,499,452,486],
[359,0,444,383,357,416,488,357,380],
[384,447,0,477,401,482,495,431,421],
[429,508,414,0,416,450,499,413,455],
[448,534,490,475,0,479,503,431,458],
[409,475,409,441,412,0,486,410,431],
[392,403,396,392,388,405,0,406,375],
[439,534,460,478,460,481,485,0,450],
[405,511,470,436,433,460,516,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,419,481,428,459,460,515,452],
[413,0,410,441,429,405,389,472,452],
[472,481,0,521,477,482,453,513,426],
[410,450,370,0,470,429,423,485,410],
[463,462,414,421,0,484,406,435,473],
[432,486,409,462,407,0,437,519,440],
[431,502,438,468,485,454,0,480,459],
[376,419,378,406,456,372,411,0,403],
[439,439,465,481,418,451,432,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,492,498,483,438,499,503,503],
[404,0,465,432,458,404,468,467,488],
[399,426,0,445,441,402,397,460,448],
[393,459,446,0,468,457,444,466,450],
[408,433,450,423,0,426,451,473,434],
[453,487,489,434,465,0,468,496,488],
[392,423,494,447,440,423,0,467,475],
[388,424,431,425,418,395,424,0,419],
[388,403,443,441,457,403,416,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,420,411,388,418,485,399,442],
[453,0,417,440,407,447,447,402,427],
[471,474,0,473,446,433,511,454,469],
[480,451,418,0,436,443,479,451,430],
[503,484,445,455,0,452,508,445,455],
[473,444,458,448,439,0,480,461,474],
[406,444,380,412,383,411,0,412,408],
[492,489,437,440,446,430,479,0,457],
[449,464,422,461,436,417,483,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,378,360,337,454,375,380,371],
[426,0,422,443,358,447,372,450,425],
[513,469,0,468,396,465,412,451,457],
[531,448,423,0,451,514,441,477,490],
[554,533,495,440,0,467,437,488,515],
[437,444,426,377,424,0,457,408,402],
[516,519,479,450,454,434,0,455,508],
[511,441,440,414,403,483,436,0,431],
[520,466,434,401,376,489,383,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,453,467,437,449,480,480,452],
[436,0,448,453,444,439,474,455,446],
[438,443,0,456,450,440,441,460,440],
[424,438,435,0,434,423,453,465,457],
[454,447,441,457,0,427,472,462,448],
[442,452,451,468,464,0,477,452,480],
[411,417,450,438,419,414,0,454,427],
[411,436,431,426,429,439,437,0,442],
[439,445,451,434,443,411,464,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,468,448,431,434,424,451,466],
[438,0,437,467,464,459,471,446,489],
[423,454,0,430,413,420,446,408,467],
[443,424,461,0,435,452,447,414,453],
[460,427,478,456,0,450,446,441,476],
[457,432,471,439,441,0,464,468,469],
[467,420,445,444,445,427,0,442,462],
[440,445,483,477,450,423,449,0,512],
[425,402,424,438,415,422,429,379,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,422,460,464,428,438,412,442],
[450,0,440,423,441,438,431,423,447],
[469,451,0,468,443,439,443,428,458],
[431,468,423,0,415,425,411,439,439],
[427,450,448,476,0,455,490,465,482],
[463,453,452,466,436,0,465,446,448],
[453,460,448,480,401,426,0,444,451],
[479,468,463,452,426,445,447,0,472],
[449,444,433,452,409,443,440,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,481,454,442,440,451,473,473],
[452,0,453,451,446,455,445,439,467],
[410,438,0,455,436,446,450,450,456],
[437,440,436,0,422,449,435,453,462],
[449,445,455,469,0,446,440,438,465],
[451,436,445,442,445,0,453,446,460],
[440,446,441,456,451,438,0,450,462],
[418,452,441,438,453,445,441,0,451],
[418,424,435,429,426,431,429,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,420,444,461,451,444,447,445],
[455,0,446,442,482,452,455,435,432],
[471,445,0,449,469,451,460,448,444],
[447,449,442,0,455,451,436,426,455],
[430,409,422,436,0,441,428,386,412],
[440,439,440,440,450,0,440,417,420],
[447,436,431,455,463,451,0,427,442],
[444,456,443,465,505,474,464,0,473],
[446,459,447,436,479,471,449,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,437,427,425,455,428,436,438],
[437,0,452,421,428,420,419,458,418],
[454,439,0,421,422,465,435,449,412],
[464,470,470,0,446,446,444,460,426],
[466,463,469,445,0,450,466,471,439],
[436,471,426,445,441,0,461,446,446],
[463,472,456,447,425,430,0,495,453],
[455,433,442,431,420,445,396,0,416],
[453,473,479,465,452,445,438,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,418,456,444,421,419,416,456],
[461,0,465,484,457,445,447,444,432],
[473,426,0,495,467,464,441,450,443],
[435,407,396,0,402,411,408,400,440],
[447,434,424,489,0,429,440,426,442],
[470,446,427,480,462,0,443,455,445],
[472,444,450,483,451,448,0,432,456],
[475,447,441,491,465,436,459,0,462],
[435,459,448,451,449,446,435,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,411,396,400,425,468,430,440],
[435,0,426,432,451,444,491,453,475],
[480,465,0,460,444,433,479,494,516],
[495,459,431,0,458,451,479,457,483],
[491,440,447,433,0,441,515,501,479],
[466,447,458,440,450,0,500,481,482],
[423,400,412,412,376,391,0,438,422],
[461,438,397,434,390,410,453,0,452],
[451,416,375,408,412,409,469,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,416,414,403,449,431,431,409],
[482,0,440,413,429,447,442,453,452],
[475,451,0,446,428,480,442,455,441],
[477,478,445,0,449,475,449,479,441],
[488,462,463,442,0,462,435,460,446],
[442,444,411,416,429,0,442,437,413],
[460,449,449,442,456,449,0,462,441],
[460,438,436,412,431,454,429,0,432],
[482,439,450,450,445,478,450,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,448,453,425,453,430,450,443],
[471,0,440,468,439,450,454,447,444],
[443,451,0,453,460,458,432,437,457],
[438,423,438,0,455,452,435,423,441],
[466,452,431,436,0,474,435,471,456],
[438,441,433,439,417,0,418,428,437],
[461,437,459,456,456,473,0,447,466],
[441,444,454,468,420,463,444,0,457],
[448,447,434,450,435,454,425,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,542,489,441,486,491,496,476,528],
[349,0,427,416,410,429,386,439,409],
[402,464,0,430,380,479,432,473,415],
[450,475,461,0,415,567,403,455,424],
[405,481,511,476,0,526,490,469,430],
[400,462,412,324,365,0,372,385,379],
[395,505,459,488,401,519,0,487,490],
[415,452,418,436,422,506,404,0,391],
[363,482,476,467,461,512,401,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,469,521,465,450,500,488,404],
[407,0,402,464,424,426,445,459,422],
[422,489,0,415,444,483,445,445,447],
[370,427,476,0,409,401,423,423,488],
[426,467,447,482,0,419,477,470,419],
[441,465,408,490,472,0,495,422,440],
[391,446,446,468,414,396,0,404,385],
[403,432,446,468,421,469,487,0,463],
[487,469,444,403,472,451,506,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,526,447,398,479,382,469,572,445],
[365,0,347,442,443,370,371,443,360],
[444,544,0,467,477,474,433,423,388],
[493,449,424,0,478,436,415,532,355],
[412,448,414,413,0,344,360,513,335],
[509,521,417,455,547,0,403,492,319],
[422,520,458,476,531,488,0,523,459],
[319,448,468,359,378,399,368,0,400],
[446,531,503,536,556,572,432,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,443,424,410,409,406,441,430],
[446,0,464,458,427,451,442,447,420],
[448,427,0,437,428,427,418,423,430],
[467,433,454,0,437,449,428,451,420],
[481,464,463,454,0,442,450,444,455],
[482,440,464,442,449,0,443,484,427],
[485,449,473,463,441,448,0,476,433],
[450,444,468,440,447,407,415,0,444],
[461,471,461,471,436,464,458,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,445,435,464,432,471,453,463],
[431,0,420,440,444,395,447,458,433],
[446,471,0,438,459,413,452,447,429],
[456,451,453,0,454,406,465,435,444],
[427,447,432,437,0,420,452,437,436],
[459,496,478,485,471,0,490,450,441],
[420,444,439,426,439,401,0,443,438],
[438,433,444,456,454,441,448,0,466],
[428,458,462,447,455,450,453,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,428,430,439,437,406,422,441],
[467,0,442,439,451,471,438,439,447],
[463,449,0,444,451,465,458,444,478],
[461,452,447,0,446,456,429,441,476],
[452,440,440,445,0,477,441,429,468],
[454,420,426,435,414,0,415,436,451],
[485,453,433,462,450,476,0,472,487],
[469,452,447,450,462,455,419,0,472],
[450,444,413,415,423,440,404,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,402,401,408,414,372,423,401],
[450,0,426,420,419,407,404,435,410],
[489,465,0,441,406,457,456,471,445],
[490,471,450,0,438,473,452,477,459],
[483,472,485,453,0,430,398,481,444],
[477,484,434,418,461,0,470,473,424],
[519,487,435,439,493,421,0,488,459],
[468,456,420,414,410,418,403,0,458],
[490,481,446,432,447,467,432,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,464,429,425,428,437,425,442],
[466,0,449,446,431,459,446,440,451],
[427,442,0,419,416,447,421,443,429],
[462,445,472,0,433,465,455,428,471],
[466,460,475,458,0,468,447,439,483],
[463,432,444,426,423,0,426,443,446],
[454,445,470,436,444,465,0,440,466],
[466,451,448,463,452,448,451,0,439],
[449,440,462,420,408,445,425,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,410,431,413,437,412,438,431],
[426,0,399,465,401,422,435,406,442],
[481,492,0,415,419,431,477,433,419],
[460,426,476,0,504,447,503,462,415],
[478,490,472,387,0,488,459,447,461],
[454,469,460,444,403,0,460,418,453],
[479,456,414,388,432,431,0,439,448],
[453,485,458,429,444,473,452,0,466],
[460,449,472,476,430,438,443,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,361,425,384,410,407,337,363,332],
[530,0,442,458,487,466,360,411,450],
[466,449,0,411,529,538,464,418,566],
[507,433,480,0,465,380,337,378,391],
[481,404,362,426,0,344,340,330,366],
[484,425,353,511,547,0,400,402,454],
[554,531,427,554,551,491,0,458,519],
[528,480,473,513,561,489,433,0,402],
[559,441,325,500,525,437,372,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,427,420,427,462,439,446,428],
[503,0,455,477,404,467,442,487,419],
[464,436,0,391,427,449,415,486,400],
[471,414,500,0,424,403,414,439,421],
[464,487,464,467,0,456,428,458,397],
[429,424,442,488,435,0,501,507,453],
[452,449,476,477,463,390,0,482,423],
[445,404,405,452,433,384,409,0,425],
[463,472,491,470,494,438,468,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,489,531,427,454,526,523,454],
[419,0,428,416,411,471,466,537,422],
[402,463,0,457,467,450,508,577,422],
[360,475,434,0,425,413,452,507,434],
[464,480,424,466,0,476,488,550,392],
[437,420,441,478,415,0,455,485,472],
[365,425,383,439,403,436,0,456,372],
[368,354,314,384,341,406,435,0,348],
[437,469,469,457,499,419,519,543,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,454,457,467,428,460,437,448],
[451,0,442,473,459,449,447,450,451],
[437,449,0,463,445,428,453,434,429],
[434,418,428,0,443,434,442,415,438],
[424,432,446,448,0,419,447,402,433],
[463,442,463,457,472,0,471,451,463],
[431,444,438,449,444,420,0,433,447],
[454,441,457,476,489,440,458,0,462],
[443,440,462,453,458,428,444,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,452,430,439,424,409,388,402],
[463,0,429,476,483,440,454,423,436],
[439,462,0,473,448,445,453,389,406],
[461,415,418,0,427,438,387,449,416],
[452,408,443,464,0,448,462,436,459],
[467,451,446,453,443,0,455,435,455],
[482,437,438,504,429,436,0,446,471],
[503,468,502,442,455,456,445,0,441],
[489,455,485,475,432,436,420,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,489,488,457,459,441,492,454],
[445,0,457,468,443,468,436,474,459],
[402,434,0,451,453,467,427,462,454],
[403,423,440,0,427,435,409,425,451],
[434,448,438,464,0,450,437,480,461],
[432,423,424,456,441,0,446,420,468],
[450,455,464,482,454,445,0,448,433],
[399,417,429,466,411,471,443,0,428],
[437,432,437,440,430,423,458,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,439,452,444,432,457,452,447],
[460,0,436,464,452,431,452,443,421],
[452,455,0,457,436,432,446,435,419],
[439,427,434,0,453,452,466,443,445],
[447,439,455,438,0,445,462,429,429],
[459,460,459,439,446,0,465,458,433],
[434,439,445,425,429,426,0,431,424],
[439,448,456,448,462,433,460,0,441],
[444,470,472,446,462,458,467,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,438,439,461,465,433,442,438],
[427,0,440,451,434,468,421,424,454],
[453,451,0,450,415,460,434,423,467],
[452,440,441,0,436,467,423,428,447],
[430,457,476,455,0,448,435,457,430],
[426,423,431,424,443,0,432,422,425],
[458,470,457,468,456,459,0,439,457],
[449,467,468,463,434,469,452,0,447],
[453,437,424,444,461,466,434,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,517,457,492,431,444,463,460],
[467,0,481,476,454,447,447,438,458],
[374,410,0,484,448,425,397,460,418],
[434,415,407,0,450,407,414,419,396],
[399,437,443,441,0,381,398,451,382],
[460,444,466,484,510,0,415,466,419],
[447,444,494,477,493,476,0,454,459],
[428,453,431,472,440,425,437,0,438],
[431,433,473,495,509,472,432,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,447,467,457,447,440,461,457],
[457,0,471,494,471,462,444,475,467],
[444,420,0,456,444,450,443,452,447],
[424,397,435,0,419,404,403,435,438],
[434,420,447,472,0,438,439,436,464],
[444,429,441,487,453,0,454,458,470],
[451,447,448,488,452,437,0,467,472],
[430,416,439,456,455,433,424,0,438],
[434,424,444,453,427,421,419,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,401,461,350,414,451,390,451],
[478,0,373,424,466,432,482,403,477],
[490,518,0,511,479,504,469,428,529],
[430,467,380,0,468,435,508,461,444],
[541,425,412,423,0,514,512,444,489],
[477,459,387,456,377,0,482,436,468],
[440,409,422,383,379,409,0,424,382],
[501,488,463,430,447,455,467,0,478],
[440,414,362,447,402,423,509,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,411,334,307,439,388,284,466],
[481,0,407,407,402,434,397,472,514],
[480,484,0,408,394,437,417,411,476],
[557,484,483,0,423,554,417,432,496],
[584,489,497,468,0,470,436,458,465],
[452,457,454,337,421,0,455,342,530],
[503,494,474,474,455,436,0,417,496],
[607,419,480,459,433,549,474,0,466],
[425,377,415,395,426,361,395,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,434,422,444,434,425,459,425],
[473,0,437,443,461,467,449,453,434],
[457,454,0,454,466,420,427,451,423],
[469,448,437,0,457,444,440,431,446],
[447,430,425,434,0,418,400,398,452],
[457,424,471,447,473,0,423,408,424],
[466,442,464,451,491,468,0,449,449],
[432,438,440,460,493,483,442,0,422],
[466,457,468,445,439,467,442,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,467,445,469,443,456,436,462],
[438,0,443,432,440,432,455,408,444],
[424,448,0,436,443,426,449,440,433],
[446,459,455,0,476,454,469,441,469],
[422,451,448,415,0,444,452,413,437],
[448,459,465,437,447,0,471,451,446],
[435,436,442,422,439,420,0,430,445],
[455,483,451,450,478,440,461,0,476],
[429,447,458,422,454,445,446,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,368,315,114,357,546,313,225],
[688,0,391,663,574,469,614,633,418],
[523,500,0,636,352,491,544,633,308],
[576,228,255,0,136,155,320,193,357],
[777,317,539,755,0,603,522,671,469],
[534,422,400,736,288,0,391,347,228],
[345,277,347,571,369,500,0,387,301],
[578,258,258,698,220,544,504,0,368],
[666,473,583,534,422,663,590,523,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,477,479,445,462,459,470,468],
[448,0,444,480,457,428,463,462,441],
[414,447,0,455,457,446,437,467,467],
[412,411,436,0,439,410,426,457,435],
[446,434,434,452,0,436,439,464,439],
[429,463,445,481,455,0,464,472,472],
[432,428,454,465,452,427,0,464,433],
[421,429,424,434,427,419,427,0,435],
[423,450,424,456,452,419,458,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,432,440,415,407,435,427,398],
[434,0,420,415,418,421,412,430,419],
[459,471,0,452,443,456,442,454,431],
[451,476,439,0,448,430,445,454,428],
[476,473,448,443,0,450,455,437,455],
[484,470,435,461,441,0,466,452,435],
[456,479,449,446,436,425,0,454,438],
[464,461,437,437,454,439,437,0,428],
[493,472,460,463,436,456,453,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,466,442,462,423,413,397,471],
[442,0,453,477,419,413,435,397,469],
[425,438,0,463,429,424,453,390,453],
[449,414,428,0,450,398,426,398,444],
[429,472,462,441,0,448,458,425,473],
[468,478,467,493,443,0,490,461,509],
[478,456,438,465,433,401,0,409,449],
[494,494,501,493,466,430,482,0,488],
[420,422,438,447,418,382,442,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,417,439,434,455,447,431,412],
[476,0,458,441,449,449,440,416,428],
[474,433,0,461,453,453,488,433,455],
[452,450,430,0,462,462,458,452,433],
[457,442,438,429,0,444,451,444,429],
[436,442,438,429,447,0,435,445,397],
[444,451,403,433,440,456,0,413,407],
[460,475,458,439,447,446,478,0,434],
[479,463,436,458,462,494,484,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,428,399,487,489,511,444,418],
[415,0,404,355,415,494,414,408,291],
[463,487,0,379,423,473,459,420,394],
[492,536,512,0,482,480,476,536,445],
[404,476,468,409,0,439,395,407,387],
[402,397,418,411,452,0,432,406,367],
[380,477,432,415,496,459,0,408,506],
[447,483,471,355,484,485,483,0,461],
[473,600,497,446,504,524,385,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,472,472,453,445,488,484,469],
[416,0,441,429,441,440,449,427,447],
[419,450,0,434,414,434,462,464,437],
[419,462,457,0,437,422,472,452,434],
[438,450,477,454,0,459,477,474,461],
[446,451,457,469,432,0,467,482,457],
[403,442,429,419,414,424,0,445,431],
[407,464,427,439,417,409,446,0,419],
[422,444,454,457,430,434,460,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,444,423,405,448,443,484,425],
[418,0,451,417,428,475,466,466,433],
[447,440,0,415,449,428,433,428,433],
[468,474,476,0,430,459,484,491,481],
[486,463,442,461,0,436,473,460,454],
[443,416,463,432,455,0,448,481,468],
[448,425,458,407,418,443,0,464,445],
[407,425,463,400,431,410,427,0,429],
[466,458,458,410,437,423,446,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,420,451,439,450,448,438,433],
[443,0,417,438,441,433,445,429,420],
[471,474,0,434,448,450,441,464,437],
[440,453,457,0,445,449,429,458,456],
[452,450,443,446,0,459,468,445,446],
[441,458,441,442,432,0,443,433,425],
[443,446,450,462,423,448,0,439,418],
[453,462,427,433,446,458,452,0,420],
[458,471,454,435,445,466,473,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,469,448,453,378,442,421,431],
[454,0,462,436,452,402,480,418,436],
[422,429,0,413,386,360,408,403,393],
[443,455,478,0,458,456,499,472,424],
[438,439,505,433,0,431,477,419,413],
[513,489,531,435,460,0,486,428,471],
[449,411,483,392,414,405,0,394,426],
[470,473,488,419,472,463,497,0,418],
[460,455,498,467,478,420,465,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,439,425,439,446,514,472,479],
[430,0,488,439,465,418,481,464,464],
[452,403,0,430,448,434,459,434,497],
[466,452,461,0,468,358,509,453,455],
[452,426,443,423,0,430,479,440,486],
[445,473,457,533,461,0,494,424,511],
[377,410,432,382,412,397,0,381,438],
[419,427,457,438,451,467,510,0,534],
[412,427,394,436,405,380,453,357,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,452,437,445,440,463,423,443],
[456,0,469,453,455,446,478,445,452],
[439,422,0,443,442,438,457,449,454],
[454,438,448,0,447,422,472,442,448],
[446,436,449,444,0,444,465,450,438],
[451,445,453,469,447,0,475,458,438],
[428,413,434,419,426,416,0,420,429],
[468,446,442,449,441,433,471,0,457],
[448,439,437,443,453,453,462,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,448,424,496,435,454,410,324],
[455,0,513,483,482,478,422,450,461],
[443,378,0,404,454,422,415,451,407],
[467,408,487,0,527,484,464,450,476],
[395,409,437,364,0,415,411,305,355],
[456,413,469,407,476,0,407,406,444],
[437,469,476,427,480,484,0,412,450],
[481,441,440,441,586,485,479,0,429],
[567,430,484,415,536,447,441,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,452,459,396,493,451,439,484],
[442,0,419,416,407,472,450,439,453],
[439,472,0,436,467,479,489,468,487],
[432,475,455,0,465,445,433,457,499],
[495,484,424,426,0,469,480,473,484],
[398,419,412,446,422,0,439,388,444],
[440,441,402,458,411,452,0,415,480],
[452,452,423,434,418,503,476,0,472],
[407,438,404,392,407,447,411,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,428,448,456,477,433,464,455],
[409,0,383,421,412,456,402,407,418],
[463,508,0,458,463,467,440,432,445],
[443,470,433,0,447,479,443,431,468],
[435,479,428,444,0,465,426,423,450],
[414,435,424,412,426,0,414,414,432],
[458,489,451,448,465,477,0,465,440],
[427,484,459,460,468,477,426,0,431],
[436,473,446,423,441,459,451,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,455,439,447,471,437,418,439],
[455,0,452,428,433,464,434,443,427],
[436,439,0,422,424,446,436,423,414],
[452,463,469,0,436,484,457,441,429],
[444,458,467,455,0,472,443,430,448],
[420,427,445,407,419,0,425,419,417],
[454,457,455,434,448,466,0,431,437],
[473,448,468,450,461,472,460,0,428],
[452,464,477,462,443,474,454,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,451,440,435,435,427,427,429],
[446,0,438,435,421,402,404,399,431],
[440,453,0,439,424,418,438,415,427],
[451,456,452,0,432,425,421,427,437],
[456,470,467,459,0,425,427,406,450],
[456,489,473,466,466,0,444,461,452],
[464,487,453,470,464,447,0,431,457],
[464,492,476,464,485,430,460,0,448],
[462,460,464,454,441,439,434,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,527,471,475,488,528,493,480],
[486,0,463,469,468,406,515,495,483],
[364,428,0,420,418,447,444,437,437],
[420,422,471,0,487,439,517,478,424],
[416,423,473,404,0,413,467,415,459],
[403,485,444,452,478,0,486,442,440],
[363,376,447,374,424,405,0,438,384],
[398,396,454,413,476,449,453,0,431],
[411,408,454,467,432,451,507,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,444,455,429,446,441,477,435],
[480,0,450,492,436,488,455,497,486],
[447,441,0,431,416,453,438,481,430],
[436,399,460,0,409,458,444,484,431],
[462,455,475,482,0,499,431,480,456],
[445,403,438,433,392,0,428,457,447],
[450,436,453,447,460,463,0,455,434],
[414,394,410,407,411,434,436,0,434],
[456,405,461,460,435,444,457,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,478,460,479,436,436,433,491],
[444,0,459,422,469,415,465,448,491],
[413,432,0,447,448,414,438,437,447],
[431,469,444,0,470,418,436,424,505],
[412,422,443,421,0,438,443,402,484],
[455,476,477,473,453,0,440,445,516],
[455,426,453,455,448,451,0,441,437],
[458,443,454,467,489,446,450,0,462],
[400,400,444,386,407,375,454,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,617,521,568,515,489,388,509],
[445,0,586,467,539,556,474,458,551],
[274,305,0,323,324,320,323,331,364],
[370,424,568,0,447,434,479,384,471],
[323,352,567,444,0,424,377,400,397],
[376,335,571,457,467,0,415,395,477],
[402,417,568,412,514,476,0,395,527],
[503,433,560,507,491,496,496,0,546],
[382,340,527,420,494,414,364,345,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,455,465,443,451,413,454,431],
[466,0,448,468,462,481,442,452,409],
[436,443,0,464,447,459,418,479,411],
[426,423,427,0,423,451,429,399,401],
[448,429,444,468,0,448,450,449,427],
[440,410,432,440,443,0,411,426,407],
[478,449,473,462,441,480,0,451,456],
[437,439,412,492,442,465,440,0,408],
[460,482,480,490,464,484,435,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,418,438,450,464,419,434,435],
[462,0,430,432,445,474,459,432,437],
[473,461,0,429,478,487,444,449,467],
[453,459,462,0,447,483,453,439,439],
[441,446,413,444,0,476,435,450,464],
[427,417,404,408,415,0,416,435,429],
[472,432,447,438,456,475,0,448,477],
[457,459,442,452,441,456,443,0,467],
[456,454,424,452,427,462,414,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,523,428,682,469,290,343,483],
[369,0,397,443,351,413,261,341,497],
[368,494,0,476,561,464,431,486,436],
[463,448,415,0,493,520,438,455,607],
[209,540,330,398,0,333,366,261,411],
[422,478,427,371,558,0,428,312,347],
[601,630,460,453,525,463,0,377,422],
[548,550,405,436,630,579,514,0,557],
[408,394,455,284,480,544,469,334,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,454,434,446,447,460,453,470],
[441,0,466,454,438,460,459,435,472],
[437,425,0,426,437,442,434,428,450],
[457,437,465,0,434,445,477,434,463],
[445,453,454,457,0,439,469,459,459],
[444,431,449,446,452,0,457,434,472],
[431,432,457,414,422,434,0,430,460],
[438,456,463,457,432,457,461,0,479],
[421,419,441,428,432,419,431,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,450,446,438,447,432,451,446],
[455,0,452,441,441,439,444,438,443],
[441,439,0,444,433,416,434,443,431],
[445,450,447,0,448,453,436,458,469],
[453,450,458,443,0,462,460,452,456],
[444,452,475,438,429,0,440,450,469],
[459,447,457,455,431,451,0,449,454],
[440,453,448,433,439,441,442,0,443],
[445,448,460,422,435,422,437,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,390,385,440,436,436,474,432,484],
[501,0,472,455,470,482,492,443,433],
[506,419,0,474,437,479,488,501,438],
[451,436,417,0,451,435,464,382,384],
[455,421,454,440,0,458,471,447,390],
[455,409,412,456,433,0,450,467,390],
[417,399,403,427,420,441,0,381,407],
[459,448,390,509,444,424,510,0,470],
[407,458,453,507,501,501,484,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,453,490,495,467,453,447,422],
[413,0,436,412,445,417,403,415,400],
[438,455,0,436,469,419,448,429,402],
[401,479,455,0,463,443,425,412,436],
[396,446,422,428,0,421,422,400,412],
[424,474,472,448,470,0,437,421,431],
[438,488,443,466,469,454,0,437,430],
[444,476,462,479,491,470,454,0,447],
[469,491,489,455,479,460,461,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,430,443,464,467,448,468,467],
[416,0,430,421,438,435,423,435,441],
[461,461,0,466,462,442,464,444,479],
[448,470,425,0,455,476,468,432,449],
[427,453,429,436,0,438,460,429,451],
[424,456,449,415,453,0,430,447,458],
[443,468,427,423,431,461,0,444,439],
[423,456,447,459,462,444,447,0,458],
[424,450,412,442,440,433,452,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,436,448,437,445,427,425,432],
[462,0,423,463,437,438,462,446,437],
[455,468,0,457,460,459,449,432,453],
[443,428,434,0,426,431,433,438,431],
[454,454,431,465,0,457,446,422,459],
[446,453,432,460,434,0,455,442,434],
[464,429,442,458,445,436,0,449,437],
[466,445,459,453,469,449,442,0,445],
[459,454,438,460,432,457,454,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,500,489,546,539,435,480,497],
[419,0,483,576,489,474,441,485,499],
[391,408,0,520,438,421,365,376,495],
[402,315,371,0,379,370,363,425,447],
[345,402,453,512,0,411,453,432,456],
[352,417,470,521,480,0,394,419,494],
[456,450,526,528,438,497,0,450,547],
[411,406,515,466,459,472,441,0,490],
[394,392,396,444,435,397,344,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,450,441,440,469,466,440,463],
[442,0,454,440,431,457,446,440,456],
[441,437,0,427,411,446,417,436,464],
[450,451,464,0,452,453,441,439,451],
[451,460,480,439,0,461,462,461,478],
[422,434,445,438,430,0,436,441,455],
[425,445,474,450,429,455,0,454,456],
[451,451,455,452,430,450,437,0,447],
[428,435,427,440,413,436,435,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,449,394,497,485,477,508,453],
[404,0,411,394,452,476,437,399,389],
[442,480,0,443,483,446,504,491,445],
[497,497,448,0,482,476,444,466,487],
[394,439,408,409,0,400,436,418,403],
[406,415,445,415,491,0,482,467,416],
[414,454,387,447,455,409,0,432,388],
[383,492,400,425,473,424,459,0,453],
[438,502,446,404,488,475,503,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,427,439,441,423,449,400,432],
[482,0,445,471,498,463,449,473,468],
[464,446,0,465,472,445,456,453,464],
[452,420,426,0,453,437,424,432,418],
[450,393,419,438,0,404,424,423,412],
[468,428,446,454,487,0,476,430,470],
[442,442,435,467,467,415,0,423,444],
[491,418,438,459,468,461,468,0,468],
[459,423,427,473,479,421,447,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,434,435,449,458,431,431,449],
[442,0,450,453,464,479,439,448,458],
[457,441,0,429,466,482,446,451,457],
[456,438,462,0,468,481,461,446,453],
[442,427,425,423,0,478,420,423,452],
[433,412,409,410,413,0,399,404,410],
[460,452,445,430,471,492,0,444,463],
[460,443,440,445,468,487,447,0,445],
[442,433,434,438,439,481,428,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,436,447,482,456,465,468,483],
[415,0,452,461,460,467,451,421,480],
[455,439,0,461,467,461,474,475,492],
[444,430,430,0,443,416,419,432,467],
[409,431,424,448,0,405,437,436,459],
[435,424,430,475,486,0,468,450,456],
[426,440,417,472,454,423,0,448,495],
[423,470,416,459,455,441,443,0,486],
[408,411,399,424,432,435,396,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,447,450,432,466,422,448,457],
[435,0,433,433,424,417,419,442,442],
[444,458,0,438,441,457,427,483,441],
[441,458,453,0,445,468,447,468,448],
[459,467,450,446,0,442,434,475,452],
[425,474,434,423,449,0,434,489,450],
[469,472,464,444,457,457,0,485,441],
[443,449,408,423,416,402,406,0,430],
[434,449,450,443,439,441,450,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,445,442,439,444,436,444,432],
[467,0,434,447,450,430,441,434,431],
[446,457,0,458,458,440,461,445,442],
[449,444,433,0,460,448,435,437,432],
[452,441,433,431,0,429,435,419,421],
[447,461,451,443,462,0,456,440,429],
[455,450,430,456,456,435,0,456,452],
[447,457,446,454,472,451,435,0,433],
[459,460,449,459,470,462,439,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,462,342,328,451,343,428,370],
[602,0,594,462,440,547,475,526,611],
[429,297,0,351,251,351,307,347,449],
[549,429,540,0,408,498,453,469,638],
[563,451,640,483,0,484,438,474,540],
[440,344,540,393,407,0,413,422,507],
[548,416,584,438,453,478,0,509,586],
[463,365,544,422,417,469,382,0,421],
[521,280,442,253,351,384,305,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,478,456,424,445,455,491,499],
[408,0,444,457,427,447,472,457,476],
[413,447,0,463,454,456,449,459,507],
[435,434,428,0,457,436,426,430,488],
[467,464,437,434,0,422,485,463,483],
[446,444,435,455,469,0,471,472,512],
[436,419,442,465,406,420,0,442,493],
[400,434,432,461,428,419,449,0,489],
[392,415,384,403,408,379,398,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,444,431,461,475,452,455,468],
[422,0,431,413,424,421,405,408,429],
[447,460,0,415,442,450,437,442,462],
[460,478,476,0,475,447,441,459,471],
[430,467,449,416,0,456,440,419,458],
[416,470,441,444,435,0,419,416,441],
[439,486,454,450,451,472,0,426,454],
[436,483,449,432,472,475,465,0,450],
[423,462,429,420,433,450,437,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,503,460,460,386,392,455,458],
[381,0,488,406,416,330,355,390,414],
[388,403,0,368,406,308,334,373,394],
[431,485,523,0,444,454,448,451,426],
[431,475,485,447,0,416,380,454,485],
[505,561,583,437,475,0,467,490,503],
[499,536,557,443,511,424,0,471,506],
[436,501,518,440,437,401,420,0,446],
[433,477,497,465,406,388,385,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,464,439,425,436,434,431,445],
[463,0,451,454,441,422,447,438,452],
[427,440,0,420,430,411,435,424,423],
[452,437,471,0,446,450,436,441,431],
[466,450,461,445,0,437,432,450,439],
[455,469,480,441,454,0,438,460,446],
[457,444,456,455,459,453,0,439,455],
[460,453,467,450,441,431,452,0,449],
[446,439,468,460,452,445,436,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,385,370,399,385,466,444,377,414],
[506,0,464,419,483,478,464,413,452],
[521,427,0,474,435,486,494,439,446],
[492,472,417,0,485,504,493,446,476],
[506,408,456,406,0,437,422,411,413],
[425,413,405,387,454,0,446,383,401],
[447,427,397,398,469,445,0,430,404],
[514,478,452,445,480,508,461,0,463],
[477,439,445,415,478,490,487,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,479,450,446,445,392,440,451],
[470,0,492,424,426,443,428,475,443],
[412,399,0,417,421,418,410,408,413],
[441,467,474,0,436,439,431,452,474],
[445,465,470,455,0,449,438,440,444],
[446,448,473,452,442,0,419,427,463],
[499,463,481,460,453,472,0,447,444],
[451,416,483,439,451,464,444,0,441],
[440,448,478,417,447,428,447,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,433,489,473,486,448,441,451],
[425,0,427,467,458,460,449,431,433],
[458,464,0,482,464,473,461,445,457],
[402,424,409,0,434,422,416,413,404],
[418,433,427,457,0,472,449,424,436],
[405,431,418,469,419,0,417,417,408],
[443,442,430,475,442,474,0,426,449],
[450,460,446,478,467,474,465,0,438],
[440,458,434,487,455,483,442,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,443,394,461,448,419,469,420],
[460,0,438,473,463,484,440,489,395],
[448,453,0,438,442,453,490,505,457],
[497,418,453,0,431,436,433,471,423],
[430,428,449,460,0,439,479,471,444],
[443,407,438,455,452,0,462,493,450],
[472,451,401,458,412,429,0,437,380],
[422,402,386,420,420,398,454,0,367],
[471,496,434,468,447,441,511,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,403,457,455,447,432,446,450],
[444,0,436,440,436,443,409,426,420],
[488,455,0,472,466,469,421,454,431],
[434,451,419,0,432,441,424,436,434],
[436,455,425,459,0,452,436,443,445],
[444,448,422,450,439,0,414,428,420],
[459,482,470,467,455,477,0,473,428],
[445,465,437,455,448,463,418,0,451],
[441,471,460,457,446,471,463,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,460,439,450,443,447,455,440],
[434,0,436,445,431,447,409,453,434],
[431,455,0,440,457,431,426,447,452],
[452,446,451,0,443,439,434,461,435],
[441,460,434,448,0,423,418,445,446],
[448,444,460,452,468,0,430,447,439],
[444,482,465,457,473,461,0,443,457],
[436,438,444,430,446,444,448,0,436],
[451,457,439,456,445,452,434,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,435,476,483,479,378,431,465],
[486,0,444,416,499,470,390,384,439],
[456,447,0,515,509,510,459,441,427],
[415,475,376,0,455,392,336,390,391],
[408,392,382,436,0,450,354,352,382],
[412,421,381,499,441,0,358,473,431],
[513,501,432,555,537,533,0,433,490],
[460,507,450,501,539,418,458,0,454],
[426,452,464,500,509,460,401,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,441,432,463,447,477,452,463],
[440,0,434,408,448,429,460,433,456],
[450,457,0,434,474,427,453,465,466],
[459,483,457,0,464,432,501,489,484],
[428,443,417,427,0,424,465,443,466],
[444,462,464,459,467,0,486,474,466],
[414,431,438,390,426,405,0,421,438],
[439,458,426,402,448,417,470,0,465],
[428,435,425,407,425,425,453,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,445,453,464,445,469,435,428],
[442,0,442,416,455,433,456,436,425],
[446,449,0,426,448,447,466,446,442],
[438,475,465,0,463,446,456,443,447],
[427,436,443,428,0,436,463,435,437],
[446,458,444,445,455,0,457,448,436],
[422,435,425,435,428,434,0,421,418],
[456,455,445,448,456,443,470,0,447],
[463,466,449,444,454,455,473,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,413,453,455,447,435,421,420],
[447,0,448,424,462,460,442,443,435],
[478,443,0,455,473,451,459,433,443],
[438,467,436,0,496,462,436,440,444],
[436,429,418,395,0,418,432,414,419],
[444,431,440,429,473,0,414,412,432],
[456,449,432,455,459,477,0,455,442],
[470,448,458,451,477,479,436,0,446],
[471,456,448,447,472,459,449,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,446,420,435,420,421,422,410],
[461,0,459,443,448,460,444,393,437],
[445,432,0,418,447,410,443,405,407],
[471,448,473,0,485,452,444,457,433],
[456,443,444,406,0,419,423,424,449],
[471,431,481,439,472,0,420,430,417],
[470,447,448,447,468,471,0,425,434],
[469,498,486,434,467,461,466,0,471],
[481,454,484,458,442,474,457,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,460,458,449,462,435,431,409],
[454,0,470,463,473,459,468,434,447],
[431,421,0,447,460,473,441,452,441],
[433,428,444,0,441,458,438,437,424],
[442,418,431,450,0,468,457,424,427],
[429,432,418,433,423,0,454,425,425],
[456,423,450,453,434,437,0,435,434],
[460,457,439,454,467,466,456,0,449],
[482,444,450,467,464,466,457,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,452,405,439,460,440,450,462],
[472,0,447,441,482,457,459,444,453],
[439,444,0,444,446,443,416,427,419],
[486,450,447,0,450,443,469,459,455],
[452,409,445,441,0,436,463,455,436],
[431,434,448,448,455,0,470,471,458],
[451,432,475,422,428,421,0,452,426],
[441,447,464,432,436,420,439,0,444],
[429,438,472,436,455,433,465,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,464,499,452,514,448,440,429],
[402,0,440,460,420,451,448,398,401],
[427,451,0,464,404,436,440,412,401],
[392,431,427,0,372,454,388,372,395],
[439,471,487,519,0,481,452,481,457],
[377,440,455,437,410,0,425,376,385],
[443,443,451,503,439,466,0,416,421],
[451,493,479,519,410,515,475,0,463],
[462,490,490,496,434,506,470,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,469,499,456,449,459,440,447],
[422,0,394,446,440,419,402,416,430],
[422,497,0,481,439,436,447,442,460],
[392,445,410,0,421,421,415,453,415],
[435,451,452,470,0,436,447,475,433],
[442,472,455,470,455,0,492,488,479],
[432,489,444,476,444,399,0,441,452],
[451,475,449,438,416,403,450,0,455],
[444,461,431,476,458,412,439,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,433,471,445,448,459,463,446],
[448,0,431,449,414,422,451,431,415],
[458,460,0,460,460,445,468,482,447],
[420,442,431,0,428,439,437,467,451],
[446,477,431,463,0,423,439,458,448],
[443,469,446,452,468,0,463,476,476],
[432,440,423,454,452,428,0,448,461],
[428,460,409,424,433,415,443,0,449],
[445,476,444,440,443,415,430,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,462,458,451,417,464,482,429],
[435,0,473,466,450,437,452,441,425],
[429,418,0,451,457,464,452,472,469],
[433,425,440,0,454,417,409,434,384],
[440,441,434,437,0,416,451,473,424],
[474,454,427,474,475,0,479,456,421],
[427,439,439,482,440,412,0,456,444],
[409,450,419,457,418,435,435,0,426],
[462,466,422,507,467,470,447,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,436,441,411,444,445,438,431],
[449,0,443,422,443,448,457,428,432],
[455,448,0,435,430,434,456,429,428],
[450,469,456,0,452,475,469,433,450],
[480,448,461,439,0,450,442,457,451],
[447,443,457,416,441,0,457,451,428],
[446,434,435,422,449,434,0,419,432],
[453,463,462,458,434,440,472,0,461],
[460,459,463,441,440,463,459,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,453,431,462,451,419,439,443],
[444,0,438,450,434,460,422,441,459],
[438,453,0,453,427,439,418,448,439],
[460,441,438,0,435,471,436,468,456],
[429,457,464,456,0,481,445,446,431],
[440,431,452,420,410,0,422,441,430],
[472,469,473,455,446,469,0,444,467],
[452,450,443,423,445,450,447,0,455],
[448,432,452,435,460,461,424,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,445,454,436,455,429,469,446],
[485,0,465,448,433,465,441,490,503],
[446,426,0,425,434,459,416,467,450],
[437,443,466,0,457,464,438,447,428],
[455,458,457,434,0,453,451,453,432],
[436,426,432,427,438,0,411,441,402],
[462,450,475,453,440,480,0,469,460],
[422,401,424,444,438,450,422,0,409],
[445,388,441,463,459,489,431,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,412,363,428,418,412,409,386],
[479,0,451,455,412,440,469,459,453],
[479,440,0,437,449,496,420,458,441],
[528,436,454,0,457,431,461,489,463],
[463,479,442,434,0,474,440,447,428],
[473,451,395,460,417,0,383,425,451],
[479,422,471,430,451,508,0,467,460],
[482,432,433,402,444,466,424,0,439],
[505,438,450,428,463,440,431,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,456,444,414,433,479,443,435],
[475,0,485,452,451,434,472,481,473],
[435,406,0,451,419,442,467,451,444],
[447,439,440,0,462,443,466,474,466],
[477,440,472,429,0,441,483,462,453],
[458,457,449,448,450,0,476,461,433],
[412,419,424,425,408,415,0,407,415],
[448,410,440,417,429,430,484,0,406],
[456,418,447,425,438,458,476,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,467,458,441,424,458,423,489],
[476,0,486,449,473,459,501,440,507],
[424,405,0,395,446,431,444,392,442],
[433,442,496,0,443,408,450,429,451],
[450,418,445,448,0,448,486,453,451],
[467,432,460,483,443,0,457,422,464],
[433,390,447,441,405,434,0,412,429],
[468,451,499,462,438,469,479,0,452],
[402,384,449,440,440,427,462,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,448,436,503,453,433,454,447],
[478,0,493,452,508,440,500,485,471],
[443,398,0,464,470,412,434,447,472],
[455,439,427,0,489,424,442,481,467],
[388,383,421,402,0,417,432,425,424],
[438,451,479,467,474,0,432,440,487],
[458,391,457,449,459,459,0,456,449],
[437,406,444,410,466,451,435,0,472],
[444,420,419,424,467,404,442,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,441,431,444,435,462,463,448],
[470,0,425,452,452,457,476,476,467],
[450,466,0,457,441,467,461,482,445],
[460,439,434,0,447,454,494,461,425],
[447,439,450,444,0,457,482,481,448],
[456,434,424,437,434,0,473,493,440],
[429,415,430,397,409,418,0,451,426],
[428,415,409,430,410,398,440,0,426],
[443,424,446,466,443,451,465,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,434,454,427,450,447,444,429],
[433,0,414,429,412,452,424,445,439],
[457,477,0,464,444,475,423,452,444],
[437,462,427,0,419,461,465,452,436],
[464,479,447,472,0,475,452,462,437],
[441,439,416,430,416,0,438,424,424],
[444,467,468,426,439,453,0,465,458],
[447,446,439,439,429,467,426,0,436],
[462,452,447,455,454,467,433,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,434,505,461,477,486,444,453],
[385,0,427,478,458,453,451,432,448],
[457,464,0,448,453,424,452,408,464],
[386,413,443,0,425,430,431,453,446],
[430,433,438,466,0,440,466,437,440],
[414,438,467,461,451,0,468,430,423],
[405,440,439,460,425,423,0,401,456],
[447,459,483,438,454,461,490,0,461],
[438,443,427,445,451,468,435,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,453,415,441,427,452,436,421],
[420,0,439,424,440,431,448,442,443],
[438,452,0,430,432,436,449,447,437],
[476,467,461,0,453,426,470,461,449],
[450,451,459,438,0,421,448,449,439],
[464,460,455,465,470,0,458,477,441],
[439,443,442,421,443,433,0,434,432],
[455,449,444,430,442,414,457,0,434],
[470,448,454,442,452,450,459,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,418,430,427,465,431,435,401],
[459,0,433,442,428,465,455,424,449],
[473,458,0,486,450,470,447,453,433],
[461,449,405,0,441,475,448,437,442],
[464,463,441,450,0,474,468,466,452],
[426,426,421,416,417,0,440,441,417],
[460,436,444,443,423,451,0,439,428],
[456,467,438,454,425,450,452,0,461],
[490,442,458,449,439,474,463,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,644,260,484,376,413,617,357,428],
[247,0,211,376,175,223,422,223,318],
[631,680,0,402,352,389,582,587,653],
[407,515,489,0,451,489,532,476,450],
[515,716,539,440,0,592,583,515,660],
[478,668,502,402,299,0,668,505,603],
[274,469,309,359,308,223,0,240,270],
[534,668,304,415,376,386,651,0,509],
[463,573,238,441,231,288,621,382,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,469,445,464,445,453,436,438],
[430,0,442,449,448,442,443,439,445],
[422,449,0,436,427,455,426,442,455],
[446,442,455,0,437,459,428,446,438],
[427,443,464,454,0,429,440,443,446],
[446,449,436,432,462,0,447,438,436],
[438,448,465,463,451,444,0,424,431],
[455,452,449,445,448,453,467,0,446],
[453,446,436,453,445,455,460,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,421,435,450,445,464,439,433],
[479,0,439,456,440,467,470,452,406],
[470,452,0,420,417,433,436,414,429],
[456,435,471,0,424,439,450,458,434],
[441,451,474,467,0,468,442,457,438],
[446,424,458,452,423,0,427,406,404],
[427,421,455,441,449,464,0,453,443],
[452,439,477,433,434,485,438,0,451],
[458,485,462,457,453,487,448,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,477,518,469,476,450,413,464],
[446,0,413,445,399,439,402,406,417],
[414,478,0,422,421,473,402,418,455],
[373,446,469,0,440,421,448,429,445],
[422,492,470,451,0,465,486,449,443],
[415,452,418,470,426,0,400,392,431],
[441,489,489,443,405,491,0,425,471],
[478,485,473,462,442,499,466,0,439],
[427,474,436,446,448,460,420,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,446,447,458,458,478,435,431],
[463,0,463,438,439,444,442,443,427],
[445,428,0,400,440,440,431,428,436],
[444,453,491,0,447,470,461,462,458],
[433,452,451,444,0,453,446,423,454],
[433,447,451,421,438,0,458,419,429],
[413,449,460,430,445,433,0,433,425],
[456,448,463,429,468,472,458,0,442],
[460,464,455,433,437,462,466,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,440,436,410,415,385,399,420],
[458,0,449,425,429,450,458,472,428],
[451,442,0,410,420,420,453,473,430],
[455,466,481,0,450,469,481,459,441],
[481,462,471,441,0,455,443,467,458],
[476,441,471,422,436,0,422,445,434],
[506,433,438,410,448,469,0,478,437],
[492,419,418,432,424,446,413,0,454],
[471,463,461,450,433,457,454,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,487,431,396,508,376,480,461],
[484,0,480,446,463,456,393,476,424],
[404,411,0,392,398,469,407,418,398],
[460,445,499,0,412,509,452,510,467],
[495,428,493,479,0,482,427,526,445],
[383,435,422,382,409,0,382,433,424],
[515,498,484,439,464,509,0,534,506],
[411,415,473,381,365,458,357,0,457],
[430,467,493,424,446,467,385,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,464,461,469,468,467,437,465],
[430,0,450,458,447,464,433,446,455],
[427,441,0,441,445,442,445,426,462],
[430,433,450,0,460,435,457,431,472],
[422,444,446,431,0,445,432,419,445],
[423,427,449,456,446,0,447,443,460],
[424,458,446,434,459,444,0,420,449],
[454,445,465,460,472,448,471,0,463],
[426,436,429,419,446,431,442,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,457,459,507,449,492,508,466],
[458,0,455,433,423,466,455,470,438],
[434,436,0,397,472,458,452,461,443],
[432,458,494,0,444,486,475,502,471],
[384,468,419,447,0,468,432,500,440],
[442,425,433,405,423,0,438,457,431],
[399,436,439,416,459,453,0,501,457],
[383,421,430,389,391,434,390,0,406],
[425,453,448,420,451,460,434,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,452,466,483,460,431,453,461],
[468,0,443,506,466,477,468,424,433],
[439,448,0,455,451,458,447,428,435],
[425,385,436,0,436,451,431,455,417],
[408,425,440,455,0,472,446,454,469],
[431,414,433,440,419,0,446,426,444],
[460,423,444,460,445,445,0,414,421],
[438,467,463,436,437,465,477,0,429],
[430,458,456,474,422,447,470,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,449,440,470,476,440,450,470],
[455,0,436,449,446,479,421,457,434],
[442,455,0,484,482,463,459,470,467],
[451,442,407,0,442,463,425,445,438],
[421,445,409,449,0,461,434,438,447],
[415,412,428,428,430,0,431,452,436],
[451,470,432,466,457,460,0,463,481],
[441,434,421,446,453,439,428,0,441],
[421,457,424,453,444,455,410,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,500,449,425,430,478,472,430],
[400,0,464,435,442,431,455,433,424],
[391,427,0,465,428,426,442,447,418],
[442,456,426,0,433,427,464,453,443],
[466,449,463,458,0,437,462,434,463],
[461,460,465,464,454,0,457,442,467],
[413,436,449,427,429,434,0,418,399],
[419,458,444,438,457,449,473,0,416],
[461,467,473,448,428,424,492,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,445,486,447,444,455,454,483],
[442,0,466,529,502,495,484,469,531],
[446,425,0,483,487,469,463,450,486],
[405,362,408,0,405,435,440,425,456],
[444,389,404,486,0,435,464,426,445],
[447,396,422,456,456,0,433,454,467],
[436,407,428,451,427,458,0,465,435],
[437,422,441,466,465,437,426,0,477],
[408,360,405,435,446,424,456,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,507,477,440,442,418,450,480],
[447,0,480,535,543,436,485,407,451],
[384,411,0,450,411,466,454,456,455],
[414,356,441,0,407,367,427,424,420],
[451,348,480,484,0,364,404,419,402],
[449,455,425,524,527,0,433,454,481],
[473,406,437,464,487,458,0,475,426],
[441,484,435,467,472,437,416,0,492],
[411,440,436,471,489,410,465,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,483,473,451,429,439,456,454,453],
[408,0,439,405,425,451,437,429,445],
[418,452,0,455,444,445,422,442,461],
[440,486,436,0,423,458,456,461,469],
[462,466,447,468,0,483,434,470,455],
[452,440,446,433,408,0,467,454,462],
[435,454,469,435,457,424,0,421,471],
[437,462,449,430,421,437,470,0,453],
[438,446,430,422,436,429,420,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,461,464,463,450,454,451,432],
[422,0,421,424,436,443,436,436,419],
[430,470,0,447,433,466,474,451,456],
[427,467,444,0,441,442,450,433,438],
[428,455,458,450,0,464,459,459,444],
[441,448,425,449,427,0,449,432,407],
[437,455,417,441,432,442,0,429,428],
[440,455,440,458,432,459,462,0,417],
[459,472,435,453,447,484,463,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,445,461,451,431,449,494,458],
[455,0,448,459,424,415,460,447,440],
[446,443,0,452,454,428,464,444,458],
[430,432,439,0,430,418,453,441,439],
[440,467,437,461,0,452,454,453,427],
[460,476,463,473,439,0,464,471,472],
[442,431,427,438,437,427,0,443,442],
[397,444,447,450,438,420,448,0,455],
[433,451,433,452,464,419,449,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,435,452,430,442,455,454,448],
[448,0,421,439,435,426,414,444,451],
[456,470,0,459,453,462,438,463,460],
[439,452,432,0,448,436,422,427,453],
[461,456,438,443,0,447,445,435,443],
[449,465,429,455,444,0,441,460,454],
[436,477,453,469,446,450,0,445,470],
[437,447,428,464,456,431,446,0,444],
[443,440,431,438,448,437,421,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,442,463,443,446,435,416,454],
[443,0,445,468,434,463,428,423,449],
[449,446,0,450,438,458,441,434,455],
[428,423,441,0,429,450,447,396,429],
[448,457,453,462,0,451,420,438,463],
[445,428,433,441,440,0,412,419,436],
[456,463,450,444,471,479,0,453,463],
[475,468,457,495,453,472,438,0,479],
[437,442,436,462,428,455,428,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,428,418,382,369,388,495,411],
[585,0,449,470,387,385,495,509,459],
[463,442,0,492,393,407,404,436,422],
[473,421,399,0,382,401,429,421,416],
[509,504,498,509,0,411,494,519,405],
[522,506,484,490,480,0,432,522,422],
[503,396,487,462,397,459,0,478,457],
[396,382,455,470,372,369,413,0,394],
[480,432,469,475,486,469,434,497,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,453,463,449,453,456,461,445],
[431,0,448,445,441,433,445,434,430],
[438,443,0,445,434,453,461,444,439],
[428,446,446,0,439,459,454,458,436],
[442,450,457,452,0,446,462,433,448],
[438,458,438,432,445,0,438,428,444],
[435,446,430,437,429,453,0,437,437],
[430,457,447,433,458,463,454,0,447],
[446,461,452,455,443,447,454,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,454,448,434,450,429,435,443],
[442,0,488,468,448,460,440,453,465],
[437,403,0,431,402,442,393,419,414],
[443,423,460,0,386,433,395,433,432],
[457,443,489,505,0,464,457,446,474],
[441,431,449,458,427,0,428,427,446],
[462,451,498,496,434,463,0,459,472],
[456,438,472,458,445,464,432,0,447],
[448,426,477,459,417,445,419,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,436,447,448,473,432,468,446],
[478,0,420,420,400,445,421,452,434],
[455,471,0,446,442,450,426,516,468],
[444,471,445,0,462,433,462,480,438],
[443,491,449,429,0,451,463,462,437],
[418,446,441,458,440,0,414,478,457],
[459,470,465,429,428,477,0,498,431],
[423,439,375,411,429,413,393,0,408],
[445,457,423,453,454,434,460,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,444,467,432,428,434,450,439],
[453,0,418,463,438,421,439,452,433],
[447,473,0,474,450,443,448,487,456],
[424,428,417,0,445,409,433,456,433],
[459,453,441,446,0,439,453,445,429],
[463,470,448,482,452,0,444,478,464],
[457,452,443,458,438,447,0,473,428],
[441,439,404,435,446,413,418,0,428],
[452,458,435,458,462,427,463,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,446,448,434,461,467,463,434],
[443,0,439,451,439,458,462,462,439],
[445,452,0,439,430,441,448,473,419],
[443,440,452,0,443,450,467,448,441],
[457,452,461,448,0,435,456,471,455],
[430,433,450,441,456,0,448,459,432],
[424,429,443,424,435,443,0,454,416],
[428,429,418,443,420,432,437,0,426],
[457,452,472,450,436,459,475,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,425,406,394,421,461,387,388],
[459,0,414,439,436,421,403,444,422],
[466,477,0,436,444,450,437,453,456],
[485,452,455,0,396,414,427,443,443],
[497,455,447,495,0,464,433,425,447],
[470,470,441,477,427,0,459,463,423],
[430,488,454,464,458,432,0,447,428],
[504,447,438,448,466,428,444,0,425],
[503,469,435,448,444,468,463,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,442,551,479,593,579,465,427],
[375,0,382,498,441,448,466,505,470],
[449,509,0,573,396,567,514,495,463],
[340,393,318,0,362,390,346,413,344],
[412,450,495,529,0,516,467,453,381],
[298,443,324,501,375,0,430,453,385],
[312,425,377,545,424,461,0,464,466],
[426,386,396,478,438,438,427,0,382],
[464,421,428,547,510,506,425,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,494,453,461,427,439,446,457],
[453,0,479,481,462,430,435,455,438],
[397,412,0,423,423,423,406,414,437],
[438,410,468,0,439,442,432,438,457],
[430,429,468,452,0,452,436,428,447],
[464,461,468,449,439,0,449,467,482],
[452,456,485,459,455,442,0,449,457],
[445,436,477,453,463,424,442,0,443],
[434,453,454,434,444,409,434,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,475,460,472,442,441,476,443],
[422,0,428,442,428,427,468,410,426],
[416,463,0,464,472,438,424,431,453],
[431,449,427,0,444,438,437,427,442],
[419,463,419,447,0,447,436,437,450],
[449,464,453,453,444,0,423,436,526],
[450,423,467,454,455,468,0,466,449],
[415,481,460,464,454,455,425,0,494],
[448,465,438,449,441,365,442,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,458,411,421,401,433,411,441],
[456,0,445,416,433,459,450,452,453],
[433,446,0,398,412,437,436,411,442],
[480,475,493,0,457,466,464,442,448],
[470,458,479,434,0,438,451,457,461],
[490,432,454,425,453,0,469,410,448],
[458,441,455,427,440,422,0,436,444],
[480,439,480,449,434,481,455,0,449],
[450,438,449,443,430,443,447,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,473,480,426,445,458,458,445],
[454,0,466,457,438,452,456,479,458],
[418,425,0,433,427,430,455,488,444],
[411,434,458,0,416,443,448,471,415],
[465,453,464,475,0,475,469,485,432],
[446,439,461,448,416,0,466,446,449],
[433,435,436,443,422,425,0,464,428],
[433,412,403,420,406,445,427,0,415],
[446,433,447,476,459,442,463,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,475,411,441,483,428,420,445],
[457,0,421,420,455,468,432,403,471],
[416,470,0,400,424,469,456,424,462],
[480,471,491,0,468,495,499,440,444],
[450,436,467,423,0,442,427,420,436],
[408,423,422,396,449,0,406,378,413],
[463,459,435,392,464,485,0,444,454],
[471,488,467,451,471,513,447,0,441],
[446,420,429,447,455,478,437,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,450,441,444,419,494,435,439],
[450,0,462,435,456,448,495,441,462],
[441,429,0,434,413,413,459,418,436],
[450,456,457,0,425,435,497,437,429],
[447,435,478,466,0,444,481,467,457],
[472,443,478,456,447,0,491,447,470],
[397,396,432,394,410,400,0,389,406],
[456,450,473,454,424,444,502,0,493],
[452,429,455,462,434,421,485,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,464,446,412,460,464,449,402],
[466,0,407,451,439,445,471,417,444],
[427,484,0,445,445,477,460,466,451],
[445,440,446,0,457,457,445,451,419],
[479,452,446,434,0,451,492,454,425],
[431,446,414,434,440,0,447,430,409],
[427,420,431,446,399,444,0,416,414],
[442,474,425,440,437,461,475,0,421],
[489,447,440,472,466,482,477,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,467,443,450,434,479,450,470],
[436,0,435,432,403,409,449,396,458],
[424,456,0,455,421,426,442,411,476],
[448,459,436,0,426,438,481,426,459],
[441,488,470,465,0,449,449,436,451],
[457,482,465,453,442,0,464,455,471],
[412,442,449,410,442,427,0,417,451],
[441,495,480,465,455,436,474,0,491],
[421,433,415,432,440,420,440,400,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,433,412,352,401,415,414,430],
[495,0,459,449,422,474,449,457,432],
[458,432,0,381,399,454,405,464,465],
[479,442,510,0,441,483,477,460,487],
[539,469,492,450,0,474,435,498,486],
[490,417,437,408,417,0,452,443,443],
[476,442,486,414,456,439,0,510,500],
[477,434,427,431,393,448,381,0,437],
[461,459,426,404,405,448,391,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,435,487,449,467,470,477,509],
[438,0,447,496,450,466,476,478,488],
[456,444,0,505,431,453,461,480,489],
[404,395,386,0,381,411,420,421,429],
[442,441,460,510,0,446,462,481,475],
[424,425,438,480,445,0,453,465,472],
[421,415,430,471,429,438,0,437,452],
[414,413,411,470,410,426,454,0,427],
[382,403,402,462,416,419,439,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,441,442,493,473,477,568,534],
[560,0,431,514,516,574,483,573,612],
[450,460,0,519,535,586,354,539,553],
[449,377,372,0,476,474,401,480,483],
[398,375,356,415,0,504,402,521,409],
[418,317,305,417,387,0,328,452,435],
[414,408,537,490,489,563,0,545,466],
[323,318,352,411,370,439,346,0,501],
[357,279,338,408,482,456,425,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,456,457,447,430,429,472,439],
[432,0,479,488,458,439,449,501,447],
[435,412,0,452,452,445,443,457,433],
[434,403,439,0,441,441,462,486,435],
[444,433,439,450,0,426,411,487,445],
[461,452,446,450,465,0,440,502,437],
[462,442,448,429,480,451,0,476,447],
[419,390,434,405,404,389,415,0,407],
[452,444,458,456,446,454,444,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,448,462,427,424,437,430,431],
[453,0,467,455,432,458,434,459,467],
[443,424,0,439,429,421,419,459,435],
[429,436,452,0,412,432,442,446,444],
[464,459,462,479,0,443,463,472,456],
[467,433,470,459,448,0,444,462,462],
[454,457,472,449,428,447,0,468,466],
[461,432,432,445,419,429,423,0,434],
[460,424,456,447,435,429,425,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,463,466,447,454,484,443,451],
[419,0,435,435,443,442,470,428,458],
[428,456,0,439,439,458,469,426,452],
[425,456,452,0,456,457,455,451,463],
[444,448,452,435,0,458,474,440,457],
[437,449,433,434,433,0,471,411,447],
[407,421,422,436,417,420,0,415,393],
[448,463,465,440,451,480,476,0,455],
[440,433,439,428,434,444,498,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,550,270,378,372,340,326,394],
[406,0,527,288,309,334,365,252,281],
[341,364,0,264,314,352,332,349,270],
[621,603,627,0,550,533,376,470,469],
[513,582,577,341,0,407,465,296,336],
[519,557,539,358,484,0,485,382,385],
[551,526,559,515,426,406,0,411,411],
[565,639,542,421,595,509,480,0,389],
[497,610,621,422,555,506,480,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,472,430,469,449,469,438,443],
[444,0,434,441,446,464,437,444,454],
[419,457,0,451,462,476,454,460,443],
[461,450,440,0,441,441,460,431,455],
[422,445,429,450,0,460,458,466,459],
[442,427,415,450,431,0,471,423,421],
[422,454,437,431,433,420,0,452,455],
[453,447,431,460,425,468,439,0,450],
[448,437,448,436,432,470,436,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,472,440,442,402,370,381,435],
[382,0,432,395,382,440,411,400,330],
[419,459,0,470,418,416,521,478,380],
[451,496,421,0,421,461,397,391,498],
[449,509,473,470,0,545,485,417,441],
[489,451,475,430,346,0,477,393,422],
[521,480,370,494,406,414,0,501,444],
[510,491,413,500,474,498,390,0,386],
[456,561,511,393,450,469,447,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,475,466,446,441,471,471,463],
[454,0,466,458,440,435,475,470,473],
[416,425,0,444,424,410,439,417,449],
[425,433,447,0,421,407,451,444,452],
[445,451,467,470,0,445,461,458,479],
[450,456,481,484,446,0,479,445,457],
[420,416,452,440,430,412,0,442,445],
[420,421,474,447,433,446,449,0,450],
[428,418,442,439,412,434,446,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,429,486,382,457,374,463,419],
[424,0,456,480,401,411,452,401,492],
[462,435,0,347,339,425,396,314,387],
[405,411,544,0,446,495,411,378,414],
[509,490,552,445,0,522,409,352,480],
[434,480,466,396,369,0,315,382,485],
[517,439,495,480,482,576,0,414,473],
[428,490,577,513,539,509,477,0,522],
[472,399,504,477,411,406,418,369,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,470,478,457,475,459,456,470],
[451,0,458,472,432,464,465,434,472],
[421,433,0,457,427,460,452,415,452],
[413,419,434,0,452,437,431,399,431],
[434,459,464,439,0,453,461,435,429],
[416,427,431,454,438,0,444,440,449],
[432,426,439,460,430,447,0,407,435],
[435,457,476,492,456,451,484,0,440],
[421,419,439,460,462,442,456,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,468,446,461,487,435,476,419],
[457,0,442,425,426,464,453,463,453],
[423,449,0,449,459,444,438,455,440],
[445,466,442,0,453,486,452,433,425],
[430,465,432,438,0,502,469,461,461],
[404,427,447,405,389,0,409,434,406],
[456,438,453,439,422,482,0,443,438],
[415,428,436,458,430,457,448,0,448],
[472,438,451,466,430,485,453,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,490,452,451,408,468,434,416],
[428,0,491,494,479,464,420,437,452],
[401,400,0,412,439,365,415,388,421],
[439,397,479,0,491,383,458,451,450],
[440,412,452,400,0,423,436,407,403],
[483,427,526,508,468,0,440,469,444],
[423,471,476,433,455,451,0,450,447],
[457,454,503,440,484,422,441,0,461],
[475,439,470,441,488,447,444,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,448,504,512,413,562,640,510],
[570,0,531,699,658,452,647,663,415],
[443,360,0,500,607,409,753,600,486],
[387,192,391,0,298,347,514,491,365],
[379,233,284,593,0,390,557,390,451],
[478,439,482,544,501,0,644,588,636],
[329,244,138,377,334,247,0,267,200],
[251,228,291,400,501,303,624,0,380],
[381,476,405,526,440,255,691,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,435,441,459,449,438,435,439],
[441,0,456,444,469,443,445,457,436],
[456,435,0,451,493,445,455,463,442],
[450,447,440,0,477,443,451,473,443],
[432,422,398,414,0,412,426,445,411],
[442,448,446,448,479,0,439,458,448],
[453,446,436,440,465,452,0,461,448],
[456,434,428,418,446,433,430,0,428],
[452,455,449,448,480,443,443,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,387,428,410,447,419,477,463],
[446,0,417,456,453,439,462,458,429],
[504,474,0,485,439,504,515,478,440],
[463,435,406,0,441,517,401,445,435],
[481,438,452,450,0,479,419,454,463],
[444,452,387,374,412,0,442,447,410],
[472,429,376,490,472,449,0,450,452],
[414,433,413,446,437,444,441,0,484],
[428,462,451,456,428,481,439,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,465,483,465,432,472,452,498],
[427,0,433,459,441,460,452,452,425],
[426,458,0,446,450,433,439,430,464],
[408,432,445,0,468,419,463,421,421],
[426,450,441,423,0,399,425,401,441],
[459,431,458,472,492,0,495,436,465],
[419,439,452,428,466,396,0,440,438],
[439,439,461,470,490,455,451,0,448],
[393,466,427,470,450,426,453,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,385,410,449,434,436,421,465],
[452,0,421,437,454,415,450,415,444],
[506,470,0,464,465,418,425,460,478],
[481,454,427,0,471,457,458,470,459],
[442,437,426,420,0,435,432,424,445],
[457,476,473,434,456,0,466,439,495],
[455,441,466,433,459,425,0,413,410],
[470,476,431,421,467,452,478,0,462],
[426,447,413,432,446,396,481,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,468,445,456,467,499,440,453],
[420,0,429,424,429,434,438,421,443],
[423,462,0,417,449,457,460,443,450],
[446,467,474,0,436,475,477,443,453],
[435,462,442,455,0,462,463,440,432],
[424,457,434,416,429,0,454,442,423],
[392,453,431,414,428,437,0,432,448],
[451,470,448,448,451,449,459,0,444],
[438,448,441,438,459,468,443,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,429,439,439,451,462,463,442],
[422,0,426,460,453,470,487,447,471],
[462,465,0,429,432,451,472,467,476],
[452,431,462,0,444,458,444,472,457],
[452,438,459,447,0,459,470,453,438],
[440,421,440,433,432,0,452,447,428],
[429,404,419,447,421,439,0,429,435],
[428,444,424,419,438,444,462,0,429],
[449,420,415,434,453,463,456,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,428,430,438,415,415,452,442],
[494,0,462,432,467,424,440,454,436],
[463,429,0,425,431,433,422,439,445],
[461,459,466,0,485,424,455,444,417],
[453,424,460,406,0,447,497,429,441],
[476,467,458,467,444,0,466,458,454],
[476,451,469,436,394,425,0,464,455],
[439,437,452,447,462,433,427,0,433],
[449,455,446,474,450,437,436,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,436,418,411,421,427,432,462],
[466,0,459,452,445,429,447,465,482],
[455,432,0,424,411,414,423,442,452],
[473,439,467,0,446,432,454,448,454],
[480,446,480,445,0,449,483,487,473],
[470,462,477,459,442,0,466,459,485],
[464,444,468,437,408,425,0,447,435],
[459,426,449,443,404,432,444,0,454],
[429,409,439,437,418,406,456,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,443,450,433,487,443,461,435],
[429,0,441,421,400,428,432,439,419],
[448,450,0,431,420,453,443,439,423],
[441,470,460,0,447,462,443,455,420],
[458,491,471,444,0,476,471,461,431],
[404,463,438,429,415,0,430,458,390],
[448,459,448,448,420,461,0,465,451],
[430,452,452,436,430,433,426,0,425],
[456,472,468,471,460,501,440,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,465,456,454,443,454,470,478],
[441,0,445,431,459,439,468,442,448],
[426,446,0,417,423,444,435,447,432],
[435,460,474,0,436,437,469,463,438],
[437,432,468,455,0,433,459,461,447],
[448,452,447,454,458,0,446,477,437],
[437,423,456,422,432,445,0,448,433],
[421,449,444,428,430,414,443,0,438],
[413,443,459,453,444,454,458,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,440,446,442,414,458,423,417],
[457,0,448,460,456,446,461,453,440],
[451,443,0,445,463,441,449,462,454],
[445,431,446,0,438,419,466,445,424],
[449,435,428,453,0,428,439,432,412],
[477,445,450,472,463,0,471,433,439],
[433,430,442,425,452,420,0,439,429],
[468,438,429,446,459,458,452,0,436],
[474,451,437,467,479,452,462,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,481,478,458,489,439,467,458],
[424,0,444,454,451,452,430,464,429],
[410,447,0,440,429,443,431,417,459],
[413,437,451,0,441,454,439,455,453],
[433,440,462,450,0,460,447,444,468],
[402,439,448,437,431,0,424,439,422],
[452,461,460,452,444,467,0,446,441],
[424,427,474,436,447,452,445,0,465],
[433,462,432,438,423,469,450,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,479,518,444,477,468,512,472],
[424,0,472,495,461,550,450,525,502],
[412,419,0,499,371,445,435,536,426],
[373,396,392,0,346,427,380,452,388],
[447,430,520,545,0,581,414,544,470],
[414,341,446,464,310,0,380,486,415],
[423,441,456,511,477,511,0,567,504],
[379,366,355,439,347,405,324,0,382],
[419,389,465,503,421,476,387,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,454,473,460,479,464,446,475],
[447,0,423,448,449,470,448,460,467],
[437,468,0,480,459,432,483,436,465],
[418,443,411,0,428,440,457,460,463],
[431,442,432,463,0,432,451,428,445],
[412,421,459,451,459,0,458,427,473],
[427,443,408,434,440,433,0,428,445],
[445,431,455,431,463,464,463,0,480],
[416,424,426,428,446,418,446,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,467,448,437,475,479,458,441],
[431,0,463,448,418,447,455,449,443],
[424,428,0,433,420,439,456,428,421],
[443,443,458,0,468,478,480,459,453],
[454,473,471,423,0,472,448,461,472],
[416,444,452,413,419,0,436,416,444],
[412,436,435,411,443,455,0,403,437],
[433,442,463,432,430,475,488,0,443],
[450,448,470,438,419,447,454,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,431,404,412,435,429,431,453],
[447,0,448,450,442,425,442,449,465],
[460,443,0,421,427,442,418,439,441],
[487,441,470,0,461,449,467,464,476],
[479,449,464,430,0,446,485,463,477],
[456,466,449,442,445,0,455,468,491],
[462,449,473,424,406,436,0,477,473],
[460,442,452,427,428,423,414,0,465],
[438,426,450,415,414,400,418,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,447,455,445,433,447,453,471],
[431,0,451,433,430,426,436,419,422],
[444,440,0,447,445,446,448,457,438],
[436,458,444,0,428,425,412,457,461],
[446,461,446,463,0,452,434,438,438],
[458,465,445,466,439,0,440,458,439],
[444,455,443,479,457,451,0,467,442],
[438,472,434,434,453,433,424,0,448],
[420,469,453,430,453,452,449,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,444,471,491,430,471,467,461],
[419,0,476,421,459,411,403,435,458],
[447,415,0,473,430,405,453,456,456],
[420,470,418,0,414,424,449,393,408],
[400,432,461,477,0,422,426,454,422],
[461,480,486,467,469,0,422,497,491],
[420,488,438,442,465,469,0,460,458],
[424,456,435,498,437,394,431,0,440],
[430,433,435,483,469,400,433,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,419,581,299,435,340,476,505],
[487,0,458,549,523,527,427,515,567],
[472,433,0,440,320,425,351,450,433],
[310,342,451,0,292,341,357,432,399],
[592,368,571,599,0,443,476,594,512],
[456,364,466,550,448,0,464,557,521],
[551,464,540,534,415,427,0,476,552],
[415,376,441,459,297,334,415,0,509],
[386,324,458,492,379,370,339,382,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,453,441,403,437,427,437,410],
[489,0,488,463,472,485,467,466,385],
[438,403,0,439,444,449,425,432,449],
[450,428,452,0,428,453,466,420,419],
[488,419,447,463,0,445,440,494,417],
[454,406,442,438,446,0,464,473,390],
[464,424,466,425,451,427,0,423,409],
[454,425,459,471,397,418,468,0,396],
[481,506,442,472,474,501,482,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,479,489,445,499,475,466,475],
[440,0,408,426,410,438,423,436,444],
[412,483,0,476,425,462,458,458,470],
[402,465,415,0,433,437,440,451,493],
[446,481,466,458,0,475,439,481,482],
[392,453,429,454,416,0,433,441,473],
[416,468,433,451,452,458,0,464,456],
[425,455,433,440,410,450,427,0,437],
[416,447,421,398,409,418,435,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,504,523,477,441,512,506,540],
[407,0,433,469,416,375,425,419,514],
[387,458,0,491,562,435,365,436,447],
[368,422,400,0,418,403,458,382,439],
[414,475,329,473,0,459,449,409,471],
[450,516,456,488,432,0,454,472,553],
[379,466,526,433,442,437,0,470,495],
[385,472,455,509,482,419,421,0,470],
[351,377,444,452,420,338,396,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,443,469,474,476,464,461,453],
[436,0,465,432,476,447,474,457,463],
[448,426,0,440,488,466,466,434,459],
[422,459,451,0,454,469,466,461,442],
[417,415,403,437,0,424,430,422,423],
[415,444,425,422,467,0,466,441,438],
[427,417,425,425,461,425,0,415,417],
[430,434,457,430,469,450,476,0,444],
[438,428,432,449,468,453,474,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,435,431,402,438,420,432,418],
[483,0,466,471,448,458,449,469,442],
[456,425,0,449,417,441,436,446,425],
[460,420,442,0,404,460,430,455,433],
[489,443,474,487,0,464,453,473,463],
[453,433,450,431,427,0,429,465,451],
[471,442,455,461,438,462,0,496,439],
[459,422,445,436,418,426,395,0,421],
[473,449,466,458,428,440,452,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,449,449,430,440,440,440,451],
[450,0,468,454,462,454,449,442,444],
[442,423,0,429,438,437,429,436,436],
[442,437,462,0,433,435,432,434,444],
[461,429,453,458,0,456,429,457,454],
[451,437,454,456,435,0,455,472,449],
[451,442,462,459,462,436,0,442,449],
[451,449,455,457,434,419,449,0,442],
[440,447,455,447,437,442,442,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,464,446,448,421,460,457,430],
[442,0,424,461,443,448,441,449,450],
[427,467,0,443,446,444,452,455,450],
[445,430,448,0,455,449,436,469,444],
[443,448,445,436,0,434,446,442,440],
[470,443,447,442,457,0,440,452,452],
[431,450,439,455,445,451,0,429,432],
[434,442,436,422,449,439,462,0,447],
[461,441,441,447,451,439,459,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,456,433,432,446,437,437,444],
[460,0,453,442,440,452,440,430,449],
[435,438,0,413,442,452,416,441,459],
[458,449,478,0,448,456,451,431,470],
[459,451,449,443,0,434,419,450,447],
[445,439,439,435,457,0,458,443,448],
[454,451,475,440,472,433,0,456,452],
[454,461,450,460,441,448,435,0,441],
[447,442,432,421,444,443,439,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,446,446,489,474,454,450,442],
[451,0,446,486,459,441,428,448,454],
[445,445,0,475,457,459,451,428,441],
[445,405,416,0,445,441,399,423,407],
[402,432,434,446,0,423,421,425,412],
[417,450,432,450,468,0,450,426,428],
[437,463,440,492,470,441,0,448,443],
[441,443,463,468,466,465,443,0,443],
[449,437,450,484,479,463,448,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,429,438,461,421,461,453,451],
[424,0,453,393,464,439,499,446,490],
[462,438,0,453,462,426,468,455,455],
[453,498,438,0,506,450,469,444,466],
[430,427,429,385,0,400,435,432,432],
[470,452,465,441,491,0,486,470,487],
[430,392,423,422,456,405,0,409,427],
[438,445,436,447,459,421,482,0,462],
[440,401,436,425,459,404,464,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,454,455,406,416,492,445,461],
[440,0,408,413,422,419,420,404,446],
[437,483,0,489,448,458,455,449,453],
[436,478,402,0,400,398,448,447,438],
[485,469,443,491,0,435,485,438,465],
[475,472,433,493,456,0,475,472,467],
[399,471,436,443,406,416,0,396,449],
[446,487,442,444,453,419,495,0,454],
[430,445,438,453,426,424,442,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,462,446,461,455,445,431,436],
[460,0,473,446,450,436,461,437,438],
[429,418,0,425,439,425,435,401,422],
[445,445,466,0,457,463,439,451,442],
[430,441,452,434,0,433,437,440,447],
[436,455,466,428,458,0,431,438,442],
[446,430,456,452,454,460,0,441,438],
[460,454,490,440,451,453,450,0,449],
[455,453,469,449,444,449,453,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,426,411,426,415,436,410,383],
[438,0,448,469,494,466,448,401,434],
[465,443,0,469,506,446,492,440,454],
[480,422,422,0,438,459,455,417,397],
[465,397,385,453,0,414,435,429,419],
[476,425,445,432,477,0,468,436,437],
[455,443,399,436,456,423,0,409,436],
[481,490,451,474,462,455,482,0,430],
[508,457,437,494,472,454,455,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,398,528,386,342,408,451,330],
[415,0,384,423,377,373,362,403,371],
[493,507,0,516,449,533,399,419,433],
[363,468,375,0,362,450,436,350,319],
[505,514,442,529,0,557,453,493,449],
[549,518,358,441,334,0,412,423,370],
[483,529,492,455,438,479,0,447,386],
[440,488,472,541,398,468,444,0,339],
[561,520,458,572,442,521,505,552,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,479,455,445,448,463,450,452],
[448,0,446,473,450,427,441,436,436],
[412,445,0,402,413,410,420,434,421],
[436,418,489,0,438,427,464,455,439],
[446,441,478,453,0,468,449,449,438],
[443,464,481,464,423,0,442,448,462],
[428,450,471,427,442,449,0,447,441],
[441,455,457,436,442,443,444,0,471],
[439,455,470,452,453,429,450,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,485,465,495,417,461,507,477],
[428,0,494,450,461,450,412,456,437],
[406,397,0,429,464,378,418,419,400],
[426,441,462,0,484,446,417,417,440],
[396,430,427,407,0,423,407,428,391],
[474,441,513,445,468,0,465,501,498],
[430,479,473,474,484,426,0,480,441],
[384,435,472,474,463,390,411,0,438],
[414,454,491,451,500,393,450,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,462,468,440,448,444,466,462],
[457,0,462,454,434,463,434,476,467],
[429,429,0,460,423,443,433,450,455],
[423,437,431,0,424,429,450,450,457],
[451,457,468,467,0,441,470,467,469],
[443,428,448,462,450,0,433,456,488],
[447,457,458,441,421,458,0,457,461],
[425,415,441,441,424,435,434,0,457],
[429,424,436,434,422,403,430,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,437,469,448,435,474,464,467],
[462,0,448,445,457,424,472,454,455],
[454,443,0,444,444,453,481,452,446],
[422,446,447,0,423,411,459,437,452],
[443,434,447,468,0,431,461,448,479],
[456,467,438,480,460,0,496,475,489],
[417,419,410,432,430,395,0,432,454],
[427,437,439,454,443,416,459,0,461],
[424,436,445,439,412,402,437,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,423,451,418,437,440,427,440],
[445,0,448,460,453,437,450,440,449],
[468,443,0,468,446,445,467,439,449],
[440,431,423,0,414,426,425,440,413],
[473,438,445,477,0,460,448,435,452],
[454,454,446,465,431,0,451,443,459],
[451,441,424,466,443,440,0,449,440],
[464,451,452,451,456,448,442,0,453],
[451,442,442,478,439,432,451,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,472,463,458,445,443,450,431],
[435,0,459,454,448,430,444,450,448],
[419,432,0,435,429,415,425,403,414],
[428,437,456,0,446,444,458,421,435],
[433,443,462,445,0,431,435,447,431],
[446,461,476,447,460,0,441,451,436],
[448,447,466,433,456,450,0,443,430],
[441,441,488,470,444,440,448,0,439],
[460,443,477,456,460,455,461,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,456,461,418,456,430,420,436],
[489,0,468,444,468,452,442,471,474],
[435,423,0,425,458,423,428,449,458],
[430,447,466,0,469,417,430,433,439],
[473,423,433,422,0,428,423,429,434],
[435,439,468,474,463,0,450,427,479],
[461,449,463,461,468,441,0,469,481],
[471,420,442,458,462,464,422,0,450],
[455,417,433,452,457,412,410,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,451,458,443,444,430,432,427],
[454,0,439,473,449,463,454,458,413],
[440,452,0,466,450,469,426,447,438],
[433,418,425,0,425,455,418,436,403],
[448,442,441,466,0,462,457,438,443],
[447,428,422,436,429,0,451,433,424],
[461,437,465,473,434,440,0,466,450],
[459,433,444,455,453,458,425,0,430],
[464,478,453,488,448,467,441,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,438,446,445,452,432,433,461],
[445,0,443,465,447,464,444,419,466],
[453,448,0,463,445,436,425,417,453],
[445,426,428,0,421,422,413,425,439],
[446,444,446,470,0,466,461,437,468],
[439,427,455,469,425,0,429,413,455],
[459,447,466,478,430,462,0,455,474],
[458,472,474,466,454,478,436,0,488],
[430,425,438,452,423,436,417,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,412,414,406,454,413,420,457],
[467,0,427,415,407,453,444,430,461],
[479,464,0,420,472,439,451,443,471],
[477,476,471,0,434,473,442,441,476],
[485,484,419,457,0,464,462,451,493],
[437,438,452,418,427,0,448,440,442],
[478,447,440,449,429,443,0,440,467],
[471,461,448,450,440,451,451,0,448],
[434,430,420,415,398,449,424,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,437,430,490,479,399,491,487],
[403,0,411,443,440,452,435,508,479],
[454,480,0,411,455,513,476,505,499],
[461,448,480,0,462,466,405,500,516],
[401,451,436,429,0,450,416,494,461],
[412,439,378,425,441,0,394,501,432],
[492,456,415,486,475,497,0,488,484],
[400,383,386,391,397,390,403,0,477],
[404,412,392,375,430,459,407,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,425,419,428,388,424,450,448],
[485,0,456,464,469,438,464,460,487],
[466,435,0,455,449,444,464,446,477],
[472,427,436,0,453,418,443,466,464],
[463,422,442,438,0,434,462,461,434],
[503,453,447,473,457,0,446,445,461],
[467,427,427,448,429,445,0,438,440],
[441,431,445,425,430,446,453,0,473],
[443,404,414,427,457,430,451,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,491,474,448,483,462,446,465],
[447,0,458,440,436,425,424,411,436],
[400,433,0,451,419,420,425,428,443],
[417,451,440,0,395,401,445,407,432],
[443,455,472,496,0,438,442,460,484],
[408,466,471,490,453,0,429,429,452],
[429,467,466,446,449,462,0,458,449],
[445,480,463,484,431,462,433,0,443],
[426,455,448,459,407,439,442,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,453,429,432,446,448,456,451],
[433,0,448,439,415,453,430,464,428],
[438,443,0,426,417,424,432,456,427],
[462,452,465,0,449,445,448,482,442],
[459,476,474,442,0,469,438,482,440],
[445,438,467,446,422,0,461,486,448],
[443,461,459,443,453,430,0,454,425],
[435,427,435,409,409,405,437,0,424],
[440,463,464,449,451,443,466,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,422,425,420,380,418,406,407],
[462,0,456,443,452,435,450,407,428],
[469,435,0,405,470,427,435,424,409],
[466,448,486,0,458,420,421,464,404],
[471,439,421,433,0,408,444,428,440],
[511,456,464,471,483,0,419,442,435],
[473,441,456,470,447,472,0,450,455],
[485,484,467,427,463,449,441,0,480],
[484,463,482,487,451,456,436,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,446,459,424,483,443,447,449],
[428,0,423,456,417,444,434,448,420],
[445,468,0,458,457,456,434,459,451],
[432,435,433,0,427,462,413,441,429],
[467,474,434,464,0,471,420,441,443],
[408,447,435,429,420,0,419,434,424],
[448,457,457,478,471,472,0,452,440],
[444,443,432,450,450,457,439,0,421],
[442,471,440,462,448,467,451,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,435,420,457,451,408,413,450],
[425,0,448,420,443,437,433,426,454],
[456,443,0,432,446,472,448,431,476],
[471,471,459,0,479,471,475,445,474],
[434,448,445,412,0,430,418,409,435],
[440,454,419,420,461,0,423,416,462],
[483,458,443,416,473,468,0,447,453],
[478,465,460,446,482,475,444,0,454],
[441,437,415,417,456,429,438,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,521,447,493,465,460,433,459,384],
[370,0,417,474,509,448,408,432,356],
[444,474,0,465,556,448,404,498,472],
[398,417,426,0,477,428,405,451,416],
[426,382,335,414,0,421,382,360,333],
[431,443,443,463,470,0,344,396,364],
[458,483,487,486,509,547,0,416,404],
[432,459,393,440,531,495,475,0,476],
[507,535,419,475,558,527,487,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,554,459,548,424,467,482,597,468],
[337,0,331,433,314,436,399,479,391],
[432,560,0,607,501,464,486,538,493],
[343,458,284,0,394,427,407,481,375],
[467,577,390,497,0,442,457,517,488],
[424,455,427,464,449,0,499,554,441],
[409,492,405,484,434,392,0,567,506],
[294,412,353,410,374,337,324,0,390],
[423,500,398,516,403,450,385,501,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,565,649,460,565,0,565,218],
[673,0,649,431,673,649,431,431,431],
[326,242,0,326,326,807,242,326,326],
[242,460,565,0,242,565,0,589,0],
[431,218,565,649,0,565,347,565,649],
[326,242,84,326,326,0,0,326,84],
[891,460,649,891,544,891,0,891,302],
[326,460,565,302,326,565,0,0,302],
[673,460,565,891,242,807,589,589,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,444,423,428,435,413,417,408],
[453,0,452,427,419,437,418,442,452],
[447,439,0,425,455,445,430,454,445],
[468,464,466,0,448,444,469,459,455],
[463,472,436,443,0,488,457,469,468],
[456,454,446,447,403,0,446,421,438],
[478,473,461,422,434,445,0,461,486],
[474,449,437,432,422,470,430,0,440],
[483,439,446,436,423,453,405,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,444,407,444,461,445,438,475],
[445,0,471,441,446,462,430,463,470],
[447,420,0,426,429,467,460,450,460],
[484,450,465,0,448,480,435,468,450],
[447,445,462,443,0,447,430,485,475],
[430,429,424,411,444,0,427,437,450],
[446,461,431,456,461,464,0,450,469],
[453,428,441,423,406,454,441,0,456],
[416,421,431,441,416,441,422,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,467,445,445,450,444,469,452],
[438,0,442,429,443,459,433,466,428],
[424,449,0,428,425,437,427,456,437],
[446,462,463,0,470,458,451,471,425],
[446,448,466,421,0,456,451,444,432],
[441,432,454,433,435,0,433,440,424],
[447,458,464,440,440,458,0,485,448],
[422,425,435,420,447,451,406,0,411],
[439,463,454,466,459,467,443,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,457,449,448,461,431,459,461],
[433,0,486,461,444,462,455,459,463],
[434,405,0,418,393,456,419,454,422],
[442,430,473,0,448,463,436,467,461],
[443,447,498,443,0,465,446,463,442],
[430,429,435,428,426,0,420,467,436],
[460,436,472,455,445,471,0,469,446],
[432,432,437,424,428,424,422,0,443],
[430,428,469,430,449,455,445,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,480,488,442,472,412,428,391],
[486,0,461,443,482,479,438,462,412],
[411,430,0,504,439,433,429,468,433],
[403,448,387,0,442,397,448,445,379],
[449,409,452,449,0,454,447,421,413],
[419,412,458,494,437,0,443,469,413],
[479,453,462,443,444,448,0,484,460],
[463,429,423,446,470,422,407,0,400],
[500,479,458,512,478,478,431,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,442,462,424,470,441,497,438],
[417,0,455,464,404,435,432,428,422],
[449,436,0,461,400,430,432,458,442],
[429,427,430,0,439,457,462,470,420],
[467,487,491,452,0,477,461,480,433],
[421,456,461,434,414,0,447,469,399],
[450,459,459,429,430,444,0,464,457],
[394,463,433,421,411,422,427,0,413],
[453,469,449,471,458,492,434,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,403,385,408,360,392,382,386],
[485,0,464,468,449,408,458,439,407],
[488,427,0,423,418,393,428,417,430],
[506,423,468,0,438,385,440,440,434],
[483,442,473,453,0,421,428,449,418],
[531,483,498,506,470,0,483,465,438],
[499,433,463,451,463,408,0,494,467],
[509,452,474,451,442,426,397,0,435],
[505,484,461,457,473,453,424,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,428,480,486,490,518,496,458],
[407,0,487,471,515,534,508,508,463],
[463,404,0,463,444,472,398,492,441],
[411,420,428,0,433,514,431,488,425],
[405,376,447,458,0,470,444,460,327],
[401,357,419,377,421,0,403,439,397],
[373,383,493,460,447,488,0,465,452],
[395,383,399,403,431,452,426,0,408],
[433,428,450,466,564,494,439,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,523,493,456,454,504,457,436],
[477,0,530,503,478,506,509,442,456],
[368,361,0,447,426,423,495,421,409],
[398,388,444,0,385,457,428,413,446],
[435,413,465,506,0,417,483,446,460],
[437,385,468,434,474,0,448,423,440],
[387,382,396,463,408,443,0,406,405],
[434,449,470,478,445,468,485,0,430],
[455,435,482,445,431,451,486,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,422,436,407,447,426,470,441],
[418,0,457,471,467,453,462,467,478],
[469,434,0,451,450,452,455,479,472],
[455,420,440,0,441,452,444,465,453],
[484,424,441,450,0,445,428,477,453],
[444,438,439,439,446,0,440,446,435],
[465,429,436,447,463,451,0,481,432],
[421,424,412,426,414,445,410,0,425],
[450,413,419,438,438,456,459,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,453,463,422,433,457,413,428],
[450,0,460,452,451,472,444,410,446],
[438,431,0,449,417,434,444,400,412],
[428,439,442,0,408,448,419,402,418],
[469,440,474,483,0,451,425,428,431],
[458,419,457,443,440,0,437,436,441],
[434,447,447,472,466,454,0,443,411],
[478,481,491,489,463,455,448,0,443],
[463,445,479,473,460,450,480,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,426,428,471,446,447,459,443],
[473,0,459,447,476,450,489,485,445],
[465,432,0,427,457,435,472,440,456],
[463,444,464,0,451,452,469,492,459],
[420,415,434,440,0,434,435,446,455],
[445,441,456,439,457,0,479,427,457],
[444,402,419,422,456,412,0,437,435],
[432,406,451,399,445,464,454,0,449],
[448,446,435,432,436,434,456,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,413,430,419,421,434,429,419],
[455,0,453,456,421,435,440,406,420],
[478,438,0,468,416,435,434,448,447],
[461,435,423,0,428,434,438,445,424],
[472,470,475,463,0,446,443,463,460],
[470,456,456,457,445,0,461,476,432],
[457,451,457,453,448,430,0,454,436],
[462,485,443,446,428,415,437,0,430],
[472,471,444,467,431,459,455,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,434,427,431,421,400,449,414],
[471,0,453,445,468,409,437,480,458],
[457,438,0,460,428,424,448,493,455],
[464,446,431,0,411,420,416,475,416],
[460,423,463,480,0,453,428,503,467],
[470,482,467,471,438,0,438,481,458],
[491,454,443,475,463,453,0,483,467],
[442,411,398,416,388,410,408,0,393],
[477,433,436,475,424,433,424,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,447,441,481,474,436,426,451],
[450,0,450,463,450,465,446,443,448],
[444,441,0,427,443,420,382,401,416],
[450,428,464,0,462,471,436,435,439],
[410,441,448,429,0,437,397,428,417],
[417,426,471,420,454,0,431,442,426],
[455,445,509,455,494,460,0,435,469],
[465,448,490,456,463,449,456,0,441],
[440,443,475,452,474,465,422,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,413,432,435,448,436,442,443],
[459,0,445,448,443,481,471,457,478],
[478,446,0,439,451,458,445,446,483],
[459,443,452,0,440,452,449,465,476],
[456,448,440,451,0,450,460,462,483],
[443,410,433,439,441,0,418,432,462],
[455,420,446,442,431,473,0,453,483],
[449,434,445,426,429,459,438,0,455],
[448,413,408,415,408,429,408,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,461,458,453,447,464,460,464],
[476,0,456,473,454,444,481,457,465],
[430,435,0,464,477,460,471,451,450],
[433,418,427,0,440,419,461,406,430],
[438,437,414,451,0,447,451,456,437],
[444,447,431,472,444,0,479,454,459],
[427,410,420,430,440,412,0,436,445],
[431,434,440,485,435,437,455,0,470],
[427,426,441,461,454,432,446,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,439,444,418,432,434,433,433],
[453,0,452,438,440,431,432,448,439],
[452,439,0,441,443,436,456,452,444],
[447,453,450,0,437,427,432,455,433],
[473,451,448,454,0,439,459,458,462],
[459,460,455,464,452,0,433,459,449],
[457,459,435,459,432,458,0,448,444],
[458,443,439,436,433,432,443,0,455],
[458,452,447,458,429,442,447,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,436,447,452,453,467,432,445],
[428,0,468,465,477,437,454,439,453],
[455,423,0,433,432,421,437,439,430],
[444,426,458,0,445,426,431,427,449],
[439,414,459,446,0,444,456,444,452],
[438,454,470,465,447,0,466,449,433],
[424,437,454,460,435,425,0,425,448],
[459,452,452,464,447,442,466,0,458],
[446,438,461,442,439,458,443,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,417,413,385,406,463,423,417],
[462,0,488,446,442,465,451,469,447],
[474,403,0,452,452,433,438,438,411],
[478,445,439,0,418,426,430,479,462],
[506,449,439,473,0,457,459,450,434],
[485,426,458,465,434,0,482,465,447],
[428,440,453,461,432,409,0,423,451],
[468,422,453,412,441,426,468,0,419],
[474,444,480,429,457,444,440,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,467,452,462,457,452,444,427],
[455,0,457,478,452,458,440,454,457],
[424,434,0,433,421,419,423,449,442],
[439,413,458,0,434,436,423,437,420],
[429,439,470,457,0,446,447,454,437],
[434,433,472,455,445,0,458,464,439],
[439,451,468,468,444,433,0,444,441],
[447,437,442,454,437,427,447,0,432],
[464,434,449,471,454,452,450,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,462,473,437,430,450,440,445],
[460,0,470,445,449,499,425,436,425],
[429,421,0,454,418,433,446,451,449],
[418,446,437,0,433,408,436,435,436],
[454,442,473,458,0,467,466,439,475],
[461,392,458,483,424,0,451,427,429],
[441,466,445,455,425,440,0,445,444],
[451,455,440,456,452,464,446,0,460],
[446,466,442,455,416,462,447,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,451,478,453,455,468,439,469],
[438,0,450,461,462,440,456,454,450],
[440,441,0,455,449,446,456,466,427],
[413,430,436,0,406,430,428,427,448],
[438,429,442,485,0,458,433,456,452],
[436,451,445,461,433,0,469,446,452],
[423,435,435,463,458,422,0,423,444],
[452,437,425,464,435,445,468,0,441],
[422,441,464,443,439,439,447,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,418,446,445,422,451,438,443],
[437,0,441,462,461,438,449,456,468],
[473,450,0,454,464,448,464,442,456],
[445,429,437,0,440,452,444,430,430],
[446,430,427,451,0,437,426,420,437],
[469,453,443,439,454,0,456,450,447],
[440,442,427,447,465,435,0,452,448],
[453,435,449,461,471,441,439,0,454],
[448,423,435,461,454,444,443,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,441,488,483,465,450,447,473],
[423,0,417,415,435,424,426,375,429],
[450,474,0,435,461,426,461,437,445],
[403,476,456,0,460,469,464,408,450],
[408,456,430,431,0,423,426,441,424],
[426,467,465,422,468,0,473,441,460],
[441,465,430,427,465,418,0,418,421],
[444,516,454,483,450,450,473,0,472],
[418,462,446,441,467,431,470,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,398,436,457,483,477,499,432,482],
[493,0,478,442,486,512,475,477,519],
[455,413,0,478,443,482,466,429,471],
[434,449,413,0,448,509,456,428,468],
[408,405,448,443,0,482,438,443,496],
[414,379,409,382,409,0,427,410,436],
[392,416,425,435,453,464,0,423,459],
[459,414,462,463,448,481,468,0,486],
[409,372,420,423,395,455,432,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,435,439,418,418,438,424,449],
[439,0,395,433,412,422,410,420,411],
[456,496,0,443,425,423,448,440,406],
[452,458,448,0,417,429,457,444,406],
[473,479,466,474,0,437,461,453,436],
[473,469,468,462,454,0,458,421,462],
[453,481,443,434,430,433,0,441,424],
[467,471,451,447,438,470,450,0,459],
[442,480,485,485,455,429,467,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,431,448,435,442,451,460,456],
[443,0,450,427,439,460,465,461,459],
[460,441,0,448,452,465,445,454,461],
[443,464,443,0,460,449,461,458,477],
[456,452,439,431,0,450,444,445,467],
[449,431,426,442,441,0,446,445,464],
[440,426,446,430,447,445,0,438,446],
[431,430,437,433,446,446,453,0,453],
[435,432,430,414,424,427,445,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,469,458,425,459,462,462,463],
[449,0,411,419,437,422,466,435,462],
[422,480,0,435,449,443,459,463,469],
[433,472,456,0,455,449,444,462,447],
[466,454,442,436,0,442,477,471,477],
[432,469,448,442,449,0,486,447,483],
[429,425,432,447,414,405,0,460,437],
[429,456,428,429,420,444,431,0,442],
[428,429,422,444,414,408,454,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,455,474,457,441,439,463,444],
[437,0,455,464,469,440,418,458,426],
[436,436,0,444,441,431,439,459,450],
[417,427,447,0,424,431,401,432,427],
[434,422,450,467,0,440,450,443,405],
[450,451,460,460,451,0,446,440,458],
[452,473,452,490,441,445,0,467,446],
[428,433,432,459,448,451,424,0,427],
[447,465,441,464,486,433,445,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,530,406,456,467,423,456,474],
[372,0,516,395,442,470,474,398,444],
[361,375,0,409,421,466,416,392,410],
[485,496,482,0,489,481,509,474,436],
[435,449,470,402,0,484,440,430,429],
[424,421,425,410,407,0,430,459,392],
[468,417,475,382,451,461,0,466,409],
[435,493,499,417,461,432,425,0,456],
[417,447,481,455,462,499,482,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,384,427,459,374,410,441,447,442],
[507,0,487,518,486,426,468,503,474],
[464,404,0,481,406,419,451,469,405],
[432,373,410,0,390,441,366,427,436],
[517,405,485,501,0,457,452,535,467],
[481,465,472,450,434,0,406,488,481],
[450,423,440,525,439,485,0,457,480],
[444,388,422,464,356,403,434,0,410],
[449,417,486,455,424,410,411,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,445,444,449,432,439,429,445],
[446,0,422,453,432,436,446,455,457],
[446,469,0,422,445,433,449,445,462],
[447,438,469,0,417,440,446,416,453],
[442,459,446,474,0,430,431,440,444],
[459,455,458,451,461,0,440,437,469],
[452,445,442,445,460,451,0,433,454],
[462,436,446,475,451,454,458,0,465],
[446,434,429,438,447,422,437,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,463,437,473,481,443,476,480],
[432,0,450,452,423,470,435,459,474],
[428,441,0,430,437,466,437,442,452],
[454,439,461,0,419,469,444,472,484],
[418,468,454,472,0,469,447,438,467],
[410,421,425,422,422,0,430,436,430],
[448,456,454,447,444,461,0,460,455],
[415,432,449,419,453,455,431,0,456],
[411,417,439,407,424,461,436,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,418,439,430,391,435,464,423],
[463,0,411,471,443,400,444,472,433],
[473,480,0,468,452,479,477,509,430],
[452,420,423,0,444,409,448,458,429],
[461,448,439,447,0,429,447,461,447],
[500,491,412,482,462,0,454,459,411],
[456,447,414,443,444,437,0,470,450],
[427,419,382,433,430,432,421,0,420],
[468,458,461,462,444,480,441,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,423,472,446,436,497,418,376],
[450,0,498,491,442,462,468,445,413],
[468,393,0,468,375,410,434,419,412],
[419,400,423,0,400,395,404,389,366],
[445,449,516,491,0,469,527,494,459],
[455,429,481,496,422,0,475,423,418],
[394,423,457,487,364,416,0,398,371],
[473,446,472,502,397,468,493,0,415],
[515,478,479,525,432,473,520,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,419,379,432,400,399,413,455],
[464,0,451,452,472,430,414,488,433],
[472,440,0,403,465,445,475,449,469],
[512,439,488,0,480,462,474,450,489],
[459,419,426,411,0,393,422,414,419],
[491,461,446,429,498,0,438,466,457],
[492,477,416,417,469,453,0,467,476],
[478,403,442,441,477,425,424,0,470],
[436,458,422,402,472,434,415,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,435,443,437,463,461,439,479],
[466,0,454,434,435,410,419,406,470],
[456,437,0,462,444,446,444,447,502],
[448,457,429,0,440,446,470,392,470],
[454,456,447,451,0,453,438,411,473],
[428,481,445,445,438,0,453,439,475],
[430,472,447,421,453,438,0,437,473],
[452,485,444,499,480,452,454,0,494],
[412,421,389,421,418,416,418,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,421,442,438,437,445,467,447],
[491,0,436,461,459,453,463,491,505],
[470,455,0,474,451,431,472,476,471],
[449,430,417,0,420,426,446,467,451],
[453,432,440,471,0,432,463,483,458],
[454,438,460,465,459,0,466,488,470],
[446,428,419,445,428,425,0,427,447],
[424,400,415,424,408,403,464,0,417],
[444,386,420,440,433,421,444,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,440,423,431,435,416,407,420],
[460,0,463,457,476,447,444,435,461],
[451,428,0,431,451,451,457,415,453],
[468,434,460,0,465,464,440,464,458],
[460,415,440,426,0,448,447,413,442],
[456,444,440,427,443,0,431,439,449],
[475,447,434,451,444,460,0,425,449],
[484,456,476,427,478,452,466,0,470],
[471,430,438,433,449,442,442,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,463,460,466,451,466,447,446],
[449,0,441,477,459,447,456,460,439],
[428,450,0,477,447,435,450,445,444],
[431,414,414,0,444,430,423,441,419],
[425,432,444,447,0,423,422,448,430],
[440,444,456,461,468,0,433,453,435],
[425,435,441,468,469,458,0,455,446],
[444,431,446,450,443,438,436,0,432],
[445,452,447,472,461,456,445,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,541,534,429,403,505,517,471],
[390,0,516,543,515,457,494,533,484],
[350,375,0,403,396,324,487,380,365],
[357,348,488,0,446,460,434,477,426],
[462,376,495,445,0,426,437,529,485],
[488,434,567,431,465,0,530,475,544],
[386,397,404,457,454,361,0,421,424],
[374,358,511,414,362,416,470,0,442],
[420,407,526,465,406,347,467,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,450,476,442,440,455,452,432],
[426,0,454,439,436,444,439,439,428],
[441,437,0,452,462,454,450,440,450],
[415,452,439,0,432,447,446,444,438],
[449,455,429,459,0,452,455,452,439],
[451,447,437,444,439,0,435,459,447],
[436,452,441,445,436,456,0,451,458],
[439,452,451,447,439,432,440,0,456],
[459,463,441,453,452,444,433,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,449,467,445,462,446,443,456],
[445,0,455,461,485,445,440,453,451],
[442,436,0,474,469,446,465,461,459],
[424,430,417,0,449,437,446,454,453],
[446,406,422,442,0,426,420,444,425],
[429,446,445,454,465,0,452,449,444],
[445,451,426,445,471,439,0,430,453],
[448,438,430,437,447,442,461,0,426],
[435,440,432,438,466,447,438,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,433,446,413,436,446,454,474],
[482,0,478,455,473,420,488,503,507],
[458,413,0,419,398,424,430,431,457],
[445,436,472,0,436,463,481,431,469],
[478,418,493,455,0,480,461,481,487],
[455,471,467,428,411,0,475,501,467],
[445,403,461,410,430,416,0,458,456],
[437,388,460,460,410,390,433,0,456],
[417,384,434,422,404,424,435,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,427,431,465,441,437,417,439],
[473,0,469,467,472,430,437,429,430],
[464,422,0,447,459,444,441,422,451],
[460,424,444,0,459,431,450,428,444],
[426,419,432,432,0,420,450,409,423],
[450,461,447,460,471,0,461,410,453],
[454,454,450,441,441,430,0,462,461],
[474,462,469,463,482,481,429,0,466],
[452,461,440,447,468,438,430,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,447,437,442,439,437,445,470],
[435,0,434,445,464,470,456,427,448],
[444,457,0,443,448,463,467,467,463],
[454,446,448,0,445,462,458,453,486],
[449,427,443,446,0,469,440,467,466],
[452,421,428,429,422,0,453,418,451],
[454,435,424,433,451,438,0,434,475],
[446,464,424,438,424,473,457,0,445],
[421,443,428,405,425,440,416,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,433,428,410,427,438,437,428],
[454,0,465,453,417,423,438,453,442],
[458,426,0,435,437,428,428,458,436],
[463,438,456,0,437,435,435,450,443],
[481,474,454,454,0,451,445,462,451],
[464,468,463,456,440,0,438,472,459],
[453,453,463,456,446,453,0,454,445],
[454,438,433,441,429,419,437,0,439],
[463,449,455,448,440,432,446,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,488,430,536,433,539,487,480],
[457,0,454,476,528,478,509,463,420],
[403,437,0,457,480,445,468,477,470],
[461,415,434,0,525,422,449,513,473],
[355,363,411,366,0,374,444,391,379],
[458,413,446,469,517,0,481,429,451],
[352,382,423,442,447,410,0,442,464],
[404,428,414,378,500,462,449,0,409],
[411,471,421,418,512,440,427,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,537,414,414,476,432,467,432],
[456,0,520,487,477,491,435,445,387],
[354,371,0,381,398,461,405,435,380],
[477,404,510,0,433,473,452,503,424],
[477,414,493,458,0,453,458,423,451],
[415,400,430,418,438,0,415,418,372],
[459,456,486,439,433,476,0,461,415],
[424,446,456,388,468,473,430,0,430],
[459,504,511,467,440,519,476,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,438,426,449,468,454,458,446],
[440,0,453,459,464,476,467,460,471],
[453,438,0,453,449,472,475,468,441],
[465,432,438,0,455,478,469,458,469],
[442,427,442,436,0,445,451,435,463],
[423,415,419,413,446,0,446,432,417],
[437,424,416,422,440,445,0,432,423],
[433,431,423,433,456,459,459,0,427],
[445,420,450,422,428,474,468,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,548,458,546,440,480,459,520,465],
[343,0,417,546,446,441,435,415,426],
[433,474,0,461,335,375,307,431,339],
[345,345,430,0,424,416,390,363,374],
[451,445,556,467,0,493,462,379,471],
[411,450,516,475,398,0,547,479,487],
[432,456,584,501,429,344,0,458,345],
[371,476,460,528,512,412,433,0,448],
[426,465,552,517,420,404,546,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,467,458,471,435,454,449,467],
[426,0,438,449,446,433,460,452,433],
[424,453,0,448,457,425,440,443,440],
[433,442,443,0,447,425,438,433,423],
[420,445,434,444,0,425,422,423,437],
[456,458,466,466,466,0,438,449,441],
[437,431,451,453,469,453,0,443,439],
[442,439,448,458,468,442,448,0,446],
[424,458,451,468,454,450,452,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,424,425,432,430,434,419,421],
[461,0,446,454,449,454,450,453,432],
[467,445,0,451,431,444,449,431,444],
[466,437,440,0,449,446,450,433,453],
[459,442,460,442,0,455,426,430,429],
[461,437,447,445,436,0,433,418,431],
[457,441,442,441,465,458,0,433,448],
[472,438,460,458,461,473,458,0,435],
[470,459,447,438,462,460,443,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,432,369,388,420,455,413,397],
[422,0,432,379,401,470,433,441,432],
[459,459,0,384,436,433,458,444,401],
[522,512,507,0,436,446,530,512,457],
[503,490,455,455,0,490,455,420,438],
[471,421,458,445,401,0,434,438,369],
[436,458,433,361,436,457,0,407,364],
[478,450,447,379,471,453,484,0,435],
[494,459,490,434,453,522,527,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,439,455,445,447,439,440,447],
[462,0,448,438,452,455,443,443,460],
[452,443,0,449,458,444,452,442,444],
[436,453,442,0,418,422,455,430,459],
[446,439,433,473,0,442,452,442,434],
[444,436,447,469,449,0,456,453,451],
[452,448,439,436,439,435,0,442,456],
[451,448,449,461,449,438,449,0,472],
[444,431,447,432,457,440,435,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,430,436,425,448,450,479,472],
[432,0,393,432,428,411,450,437,437],
[461,498,0,475,449,466,445,466,482],
[455,459,416,0,433,458,458,473,482],
[466,463,442,458,0,490,456,473,502],
[443,480,425,433,401,0,433,450,445],
[441,441,446,433,435,458,0,460,449],
[412,454,425,418,418,441,431,0,443],
[419,454,409,409,389,446,442,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,458,461,485,437,456,479,460],
[441,0,421,425,447,443,437,408,437],
[433,470,0,423,430,459,412,430,433],
[430,466,468,0,442,446,458,435,472],
[406,444,461,449,0,446,422,410,463],
[454,448,432,445,445,0,404,402,443],
[435,454,479,433,469,487,0,442,462],
[412,483,461,456,481,489,449,0,465],
[431,454,458,419,428,448,429,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,410,452,464,516,429,448,418],
[444,0,423,456,466,472,450,462,450],
[481,468,0,460,460,492,392,471,454],
[439,435,431,0,453,483,414,466,401],
[427,425,431,438,0,492,421,460,457],
[375,419,399,408,399,0,417,427,383],
[462,441,499,477,470,474,0,492,453],
[443,429,420,425,431,464,399,0,443],
[473,441,437,490,434,508,438,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,518,338,473,491,506,478,420],
[394,0,434,395,366,419,273,358,276],
[373,457,0,461,446,537,396,483,194],
[553,496,430,0,538,470,419,434,354],
[418,525,445,353,0,454,443,441,418],
[400,472,354,421,437,0,358,360,376],
[385,618,495,472,448,533,0,560,493],
[413,533,408,457,450,531,331,0,367],
[471,615,697,537,473,515,398,524,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,435,434,428,400,425,424,431],
[448,0,431,437,429,423,433,438,449],
[456,460,0,432,435,434,454,430,427],
[457,454,459,0,455,448,442,453,450],
[463,462,456,436,0,429,445,433,435],
[491,468,457,443,462,0,449,454,440],
[466,458,437,449,446,442,0,451,441],
[467,453,461,438,458,437,440,0,445],
[460,442,464,441,456,451,450,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,441,411,387,438,417,438,425],
[472,0,415,424,419,435,416,400,453],
[450,476,0,462,425,487,441,448,457],
[480,467,429,0,446,486,480,459,465],
[504,472,466,445,0,489,455,444,502],
[453,456,404,405,402,0,423,427,429],
[474,475,450,411,436,468,0,420,470],
[453,491,443,432,447,464,471,0,465],
[466,438,434,426,389,462,421,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,449,469,421,454,440,456,459],
[453,0,436,457,421,462,424,438,433],
[442,455,0,456,425,444,426,439,433],
[422,434,435,0,413,431,411,443,441],
[470,470,466,478,0,454,454,437,461],
[437,429,447,460,437,0,433,454,451],
[451,467,465,480,437,458,0,443,446],
[435,453,452,448,454,437,448,0,448],
[432,458,458,450,430,440,445,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,458,435,419,455,433,453,426],
[417,0,479,427,452,443,435,453,424],
[433,412,0,426,408,438,438,414,442],
[456,464,465,0,442,470,459,459,486],
[472,439,483,449,0,479,448,433,470],
[436,448,453,421,412,0,427,434,422],
[458,456,453,432,443,464,0,418,435],
[438,438,477,432,458,457,473,0,459],
[465,467,449,405,421,469,456,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,461,440,419,457,457,410,440],
[439,0,448,465,434,452,427,425,435],
[430,443,0,447,431,458,450,446,435],
[451,426,444,0,407,434,425,439,423],
[472,457,460,484,0,455,433,413,434],
[434,439,433,457,436,0,459,433,468],
[434,464,441,466,458,432,0,438,429],
[481,466,445,452,478,458,453,0,453],
[451,456,456,468,457,423,462,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,495,516,443,473,450,413,444,412],
[396,0,479,444,387,443,432,372,386],
[375,412,0,452,421,396,374,411,404],
[448,447,439,0,419,419,436,420,431],
[418,504,470,472,0,436,431,455,461],
[441,448,495,472,455,0,467,443,459],
[478,459,517,455,460,424,0,383,472],
[447,519,480,471,436,448,508,0,491],
[479,505,487,460,430,432,419,400,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,426,439,442,429,444,435,463],
[442,0,422,454,441,458,455,446,456],
[465,469,0,450,449,445,462,460,462],
[452,437,441,0,445,435,447,441,467],
[449,450,442,446,0,453,450,438,459],
[462,433,446,456,438,0,462,449,466],
[447,436,429,444,441,429,0,436,448],
[456,445,431,450,453,442,455,0,460],
[428,435,429,424,432,425,443,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,390,401,435,435,447,485,407,423],
[501,0,442,433,431,472,529,485,452],
[490,449,0,431,494,473,495,434,450],
[456,458,460,0,457,460,481,433,410],
[456,460,397,434,0,398,461,399,378],
[444,419,418,431,493,0,520,440,418],
[406,362,396,410,430,371,0,407,371],
[484,406,457,458,492,451,484,0,488],
[468,439,441,481,513,473,520,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,459,423,477,433,470,447,428],
[445,0,470,441,460,422,469,454,435],
[432,421,0,432,452,434,443,448,429],
[468,450,459,0,454,438,479,479,457],
[414,431,439,437,0,419,450,456,424],
[458,469,457,453,472,0,513,485,443],
[421,422,448,412,441,378,0,403,401],
[444,437,443,412,435,406,488,0,436],
[463,456,462,434,467,448,490,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,418,415,418,514,476,458,406],
[468,0,385,403,400,416,450,423,465],
[473,506,0,462,494,526,548,492,394],
[476,488,429,0,380,458,468,520,429],
[473,491,397,511,0,409,560,483,378],
[377,475,365,433,482,0,476,388,375],
[415,441,343,423,331,415,0,377,374],
[433,468,399,371,408,503,514,0,363],
[485,426,497,462,513,516,517,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,434,427,465,440,427,427,438],
[449,0,447,446,472,453,450,435,451],
[457,444,0,453,476,472,455,465,450],
[464,445,438,0,470,475,450,441,441],
[426,419,415,421,0,442,450,419,400],
[451,438,419,416,449,0,435,434,452],
[464,441,436,441,441,456,0,428,445],
[464,456,426,450,472,457,463,0,441],
[453,440,441,450,491,439,446,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,374,334,313,351,315,391,426,347],
[517,0,386,399,429,420,485,477,436],
[557,505,0,407,408,427,531,530,442],
[578,492,484,0,454,422,538,499,439],
[540,462,483,437,0,472,458,493,467],
[576,471,464,469,419,0,494,468,441],
[500,406,360,353,433,397,0,464,429],
[465,414,361,392,398,423,427,0,369],
[544,455,449,452,424,450,462,522,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,456,467,439,442,469,443,448],
[443,0,465,476,452,469,503,450,456],
[435,426,0,461,451,431,489,429,452],
[424,415,430,0,429,399,425,410,428],
[452,439,440,462,0,442,468,447,454],
[449,422,460,492,449,0,475,421,456],
[422,388,402,466,423,416,0,409,407],
[448,441,462,481,444,470,482,0,443],
[443,435,439,463,437,435,484,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,366,357,522,421,591,478,308],
[477,0,379,486,476,398,678,460,492],
[525,512,0,585,440,478,593,507,437],
[534,405,306,0,279,368,376,367,291],
[369,415,451,612,0,529,518,447,357],
[470,493,413,523,362,0,467,407,327],
[300,213,298,515,373,424,0,367,350],
[413,431,384,524,444,484,524,0,329],
[583,399,454,600,534,564,541,562,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,457,469,459,454,447,445,465],
[425,0,462,472,452,483,410,451,487],
[434,429,0,461,483,425,451,443,461],
[422,419,430,0,466,448,454,425,437],
[432,439,408,425,0,437,420,418,442],
[437,408,466,443,454,0,426,441,434],
[444,481,440,437,471,465,0,473,464],
[446,440,448,466,473,450,418,0,453],
[426,404,430,454,449,457,427,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,438,460,465,453,446,457,445],
[434,0,438,445,457,422,431,458,429],
[453,453,0,456,462,451,446,469,440],
[431,446,435,0,448,470,431,461,433],
[426,434,429,443,0,445,429,451,432],
[438,469,440,421,446,0,450,465,414],
[445,460,445,460,462,441,0,463,446],
[434,433,422,430,440,426,428,0,411],
[446,462,451,458,459,477,445,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,410,449,409,446,446,479,462],
[431,0,409,461,398,402,430,447,449],
[481,482,0,492,450,441,452,498,516],
[442,430,399,0,416,428,409,447,464],
[482,493,441,475,0,469,496,474,495],
[445,489,450,463,422,0,481,454,491],
[445,461,439,482,395,410,0,480,479],
[412,444,393,444,417,437,411,0,464],
[429,442,375,427,396,400,412,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,413,440,446,432,443,441,449],
[449,0,400,432,425,443,427,448,450],
[478,491,0,454,470,444,465,458,455],
[451,459,437,0,425,450,427,451,446],
[445,466,421,466,0,452,436,440,462],
[459,448,447,441,439,0,448,441,457],
[448,464,426,464,455,443,0,450,441],
[450,443,433,440,451,450,441,0,441],
[442,441,436,445,429,434,450,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,425,471,445,434,456,484,477],
[424,0,423,426,447,413,440,421,432],
[466,468,0,463,461,440,481,482,484],
[420,465,428,0,424,435,438,447,417],
[446,444,430,467,0,424,476,458,446],
[457,478,451,456,467,0,475,492,442],
[435,451,410,453,415,416,0,440,448],
[407,470,409,444,433,399,451,0,443],
[414,459,407,474,445,449,443,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,479,448,437,451,434,446,468],
[426,0,452,447,414,424,419,427,457],
[412,439,0,436,425,423,420,409,439],
[443,444,455,0,446,427,408,441,449],
[454,477,466,445,0,434,458,458,452],
[440,467,468,464,457,0,437,443,456],
[457,472,471,483,433,454,0,448,472],
[445,464,482,450,433,448,443,0,459],
[423,434,452,442,439,435,419,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,464,441,478,452,503,468,453],
[431,0,468,426,462,436,495,432,410],
[427,423,0,436,488,459,428,438,412],
[450,465,455,0,461,469,480,441,483],
[413,429,403,430,0,413,447,434,425],
[439,455,432,422,478,0,475,425,421],
[388,396,463,411,444,416,0,433,416],
[423,459,453,450,457,466,458,0,453],
[438,481,479,408,466,470,475,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,467,463,441,448,468,485,449],
[437,0,471,456,434,433,467,448,457],
[424,420,0,393,412,405,418,414,382],
[428,435,498,0,439,410,447,449,458],
[450,457,479,452,0,428,478,421,462],
[443,458,486,481,463,0,489,458,470],
[423,424,473,444,413,402,0,426,434],
[406,443,477,442,470,433,465,0,460],
[442,434,509,433,429,421,457,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,461,444,466,515,449,398,443],
[379,0,449,431,450,502,484,456,439],
[430,442,0,415,428,492,466,399,438],
[447,460,476,0,468,522,442,453,449],
[425,441,463,423,0,475,443,409,435],
[376,389,399,369,416,0,434,382,359],
[442,407,425,449,448,457,0,410,377],
[493,435,492,438,482,509,481,0,431],
[448,452,453,442,456,532,514,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,461,457,432,452,436,423,475],
[444,0,473,413,441,423,419,424,480],
[430,418,0,411,438,425,425,396,456],
[434,478,480,0,443,435,448,449,489],
[459,450,453,448,0,441,430,424,453],
[439,468,466,456,450,0,435,443,484],
[455,472,466,443,461,456,0,451,475],
[468,467,495,442,467,448,440,0,477],
[416,411,435,402,438,407,416,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,432,420,400,413,448,429,439],
[458,0,464,440,432,424,414,416,477],
[459,427,0,442,429,410,435,419,438],
[471,451,449,0,459,458,418,462,478],
[491,459,462,432,0,445,424,439,459],
[478,467,481,433,446,0,443,452,467],
[443,477,456,473,467,448,0,462,496],
[462,475,472,429,452,439,429,0,465],
[452,414,453,413,432,424,395,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,469,472,476,452,460,482,433],
[452,0,440,465,457,441,445,466,448],
[422,451,0,437,459,456,431,469,430],
[419,426,454,0,462,445,406,431,423],
[415,434,432,429,0,437,449,446,422],
[439,450,435,446,454,0,430,451,399],
[431,446,460,485,442,461,0,454,422],
[409,425,422,460,445,440,437,0,436],
[458,443,461,468,469,492,469,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,449,416,458,448,415,419,417],
[457,0,478,433,473,440,437,477,457],
[442,413,0,451,456,462,451,465,455],
[475,458,440,0,467,460,438,453,503],
[433,418,435,424,0,419,399,463,428],
[443,451,429,431,472,0,422,425,418],
[476,454,440,453,492,469,0,444,459],
[472,414,426,438,428,466,447,0,441],
[474,434,436,388,463,473,432,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,473,517,395,553,424,537,551],
[459,0,360,493,427,522,454,510,515],
[418,531,0,432,431,505,403,553,433],
[374,398,459,0,335,583,363,483,382],
[496,464,460,556,0,622,422,497,496],
[338,369,386,308,269,0,293,530,284],
[467,437,488,528,469,598,0,498,377],
[354,381,338,408,394,361,393,0,405],
[340,376,458,509,395,607,514,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,451,420,432,450,461,448,434],
[443,0,489,445,447,458,459,449,432],
[440,402,0,414,396,427,428,443,421],
[471,446,477,0,435,469,457,458,455],
[459,444,495,456,0,477,453,445,441],
[441,433,464,422,414,0,447,442,435],
[430,432,463,434,438,444,0,453,416],
[443,442,448,433,446,449,438,0,446],
[457,459,470,436,450,456,475,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,438,447,458,453,454,455,446],
[441,0,421,436,423,435,434,440,434],
[453,470,0,466,460,429,439,459,453],
[444,455,425,0,451,444,443,437,456],
[433,468,431,440,0,439,443,465,431],
[438,456,462,447,452,0,432,450,444],
[437,457,452,448,448,459,0,440,442],
[436,451,432,454,426,441,451,0,428],
[445,457,438,435,460,447,449,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,449,484,453,464,452,410,421],
[458,0,461,486,473,481,459,469,412],
[442,430,0,489,448,436,460,481,435],
[407,405,402,0,428,425,395,437,384],
[438,418,443,463,0,441,466,437,452],
[427,410,455,466,450,0,460,461,428],
[439,432,431,496,425,431,0,446,438],
[481,422,410,454,454,430,445,0,402],
[470,479,456,507,439,463,453,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,423,456,456,471,486,429,427],
[431,0,424,440,415,433,440,408,420],
[468,467,0,426,444,429,431,418,428],
[435,451,465,0,475,472,468,427,450],
[435,476,447,416,0,450,482,417,443],
[420,458,462,419,441,0,466,430,432],
[405,451,460,423,409,425,0,420,409],
[462,483,473,464,474,461,471,0,440],
[464,471,463,441,448,459,482,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,450,445,450,441,430,454,453],
[463,0,428,449,442,438,451,460,441],
[441,463,0,459,449,435,453,462,427],
[446,442,432,0,440,439,431,427,446],
[441,449,442,451,0,446,446,471,424],
[450,453,456,452,445,0,442,451,460],
[461,440,438,460,445,449,0,462,438],
[437,431,429,464,420,440,429,0,423],
[438,450,464,445,467,431,453,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,428,465,431,425,448,474,469],
[472,0,462,481,425,435,446,486,488],
[463,429,0,435,424,455,447,497,432],
[426,410,456,0,451,455,472,468,461],
[460,466,467,440,0,423,457,482,464],
[466,456,436,436,468,0,435,441,455],
[443,445,444,419,434,456,0,439,442],
[417,405,394,423,409,450,452,0,432],
[422,403,459,430,427,436,449,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,466,441,471,471,468,482,484],
[404,0,463,451,410,451,460,438,455],
[425,428,0,421,448,423,451,427,467],
[450,440,470,0,467,469,435,506,489],
[420,481,443,424,0,475,449,484,466],
[420,440,468,422,416,0,439,442,432],
[423,431,440,456,442,452,0,470,494],
[409,453,464,385,407,449,421,0,438],
[407,436,424,402,425,459,397,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,446,429,392,535,444,471,459],
[434,0,472,488,465,497,473,499,417],
[445,419,0,502,467,494,440,456,463],
[462,403,389,0,418,480,397,448,474],
[499,426,424,473,0,500,431,483,448],
[356,394,397,411,391,0,384,391,375],
[447,418,451,494,460,507,0,527,461],
[420,392,435,443,408,500,364,0,470],
[432,474,428,417,443,516,430,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,464,447,454,464,437,469,456],
[456,0,461,480,440,440,467,463,451],
[427,430,0,437,448,437,421,454,472],
[444,411,454,0,429,430,436,456,444],
[437,451,443,462,0,445,440,446,466],
[427,451,454,461,446,0,458,458,457],
[454,424,470,455,451,433,0,454,458],
[422,428,437,435,445,433,437,0,444],
[435,440,419,447,425,434,433,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,414,433,432,447,460,453,478],
[460,0,400,450,422,422,398,451,439],
[477,491,0,481,402,437,459,479,466],
[458,441,410,0,456,474,478,445,460],
[459,469,489,435,0,394,453,436,446],
[444,469,454,417,497,0,458,456,435],
[431,493,432,413,438,433,0,439,451],
[438,440,412,446,455,435,452,0,454],
[413,452,425,431,445,456,440,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,429,508,473,476,534,507,451],
[430,0,460,452,487,485,485,489,443],
[462,431,0,455,452,430,481,497,453],
[383,439,436,0,424,415,469,482,413],
[418,404,439,467,0,441,441,471,431],
[415,406,461,476,450,0,485,472,424],
[357,406,410,422,450,406,0,450,378],
[384,402,394,409,420,419,441,0,384],
[440,448,438,478,460,467,513,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,405,412,422,410,434,407,435],
[480,0,431,428,429,446,453,431,444],
[486,460,0,467,451,460,463,439,475],
[479,463,424,0,478,450,470,448,450],
[469,462,440,413,0,441,453,437,460],
[481,445,431,441,450,0,444,458,452],
[457,438,428,421,438,447,0,416,460],
[484,460,452,443,454,433,475,0,444],
[456,447,416,441,431,439,431,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,471,425,443,452,471,436,416],
[463,0,474,447,434,473,462,491,441],
[420,417,0,396,434,422,418,400,402],
[466,444,495,0,431,412,484,481,419],
[448,457,457,460,0,469,498,450,439],
[439,418,469,479,422,0,469,460,464],
[420,429,473,407,393,422,0,426,414],
[455,400,491,410,441,431,465,0,389],
[475,450,489,472,452,427,477,502,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,433,423,427,464,446,415,425],
[462,0,449,453,423,438,441,442,439],
[458,442,0,464,458,439,466,467,422],
[468,438,427,0,428,459,444,384,438],
[464,468,433,463,0,461,448,441,449],
[427,453,452,432,430,0,466,440,443],
[445,450,425,447,443,425,0,440,417],
[476,449,424,507,450,451,451,0,457],
[466,452,469,453,442,448,474,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,488,445,429,501,437,483,470],
[446,0,458,431,420,426,427,466,435],
[403,433,0,396,384,438,385,412,421],
[446,460,495,0,421,479,423,446,463],
[462,471,507,470,0,479,481,463,441],
[390,465,453,412,412,0,429,446,422],
[454,464,506,468,410,462,0,473,479],
[408,425,479,445,428,445,418,0,402],
[421,456,470,428,450,469,412,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,471,467,468,445,439,440,437],
[448,0,468,437,453,454,441,448,416],
[420,423,0,441,432,433,421,399,399],
[424,454,450,0,451,432,418,412,416],
[423,438,459,440,0,425,426,428,419],
[446,437,458,459,466,0,419,450,426],
[452,450,470,473,465,472,0,440,427],
[451,443,492,479,463,441,451,0,447],
[454,475,492,475,472,465,464,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,439,473,497,464,480,475,474],
[433,0,450,442,491,485,443,461,455],
[452,441,0,462,479,489,469,471,441],
[418,449,429,0,476,478,455,438,430],
[394,400,412,415,0,434,429,428,416],
[427,406,402,413,457,0,414,414,431],
[411,448,422,436,462,477,0,459,446],
[416,430,420,453,463,477,432,0,459],
[417,436,450,461,475,460,445,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,445,438,431,417,406,428,405],
[468,0,437,456,475,431,443,457,439],
[446,454,0,434,428,432,419,407,387],
[453,435,457,0,429,449,427,462,393],
[460,416,463,462,0,434,432,450,458],
[474,460,459,442,457,0,457,446,458],
[485,448,472,464,459,434,0,450,448],
[463,434,484,429,441,445,441,0,442],
[486,452,504,498,433,433,443,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,430,417,377,396,424,420,472],
[411,0,400,447,379,438,423,409,393],
[461,491,0,447,386,427,478,462,453],
[474,444,444,0,424,436,474,423,455],
[514,512,505,467,0,469,443,483,487],
[495,453,464,455,422,0,430,414,506],
[467,468,413,417,448,461,0,451,448],
[471,482,429,468,408,477,440,0,463],
[419,498,438,436,404,385,443,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,455,488,465,460,451,445,445],
[416,0,428,451,439,458,446,410,416],
[436,463,0,464,443,476,445,426,459],
[403,440,427,0,440,449,440,417,426],
[426,452,448,451,0,448,434,456,459],
[431,433,415,442,443,0,432,416,449],
[440,445,446,451,457,459,0,425,459],
[446,481,465,474,435,475,466,0,459],
[446,475,432,465,432,442,432,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,447,442,467,476,422,455,452],
[435,0,425,443,446,443,430,428,448],
[444,466,0,486,448,465,459,453,463],
[449,448,405,0,431,435,439,406,450],
[424,445,443,460,0,438,422,455,438],
[415,448,426,456,453,0,421,443,430],
[469,461,432,452,469,470,0,442,442],
[436,463,438,485,436,448,449,0,445],
[439,443,428,441,453,461,449,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,488,502,465,484,419,464,450],
[437,0,472,496,502,514,452,472,442],
[403,419,0,432,434,470,402,432,431],
[389,395,459,0,443,477,413,428,426],
[426,389,457,448,0,459,395,441,434],
[407,377,421,414,432,0,397,426,404],
[472,439,489,478,496,494,0,500,489],
[427,419,459,463,450,465,391,0,449],
[441,449,460,465,457,487,402,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,439,433,453,452,436,450,463],
[425,0,445,440,462,450,410,437,443],
[452,446,0,436,446,461,437,426,453],
[458,451,455,0,463,460,417,442,451],
[438,429,445,428,0,420,436,421,439],
[439,441,430,431,471,0,409,441,445],
[455,481,454,474,455,482,0,442,483],
[441,454,465,449,470,450,449,0,447],
[428,448,438,440,452,446,408,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,455,453,468,462,430,465,462],
[428,0,436,435,474,432,416,448,460],
[436,455,0,452,468,445,433,469,486],
[438,456,439,0,473,450,444,463,469],
[423,417,423,418,0,426,408,452,442],
[429,459,446,441,465,0,447,448,456],
[461,475,458,447,483,444,0,472,481],
[426,443,422,428,439,443,419,0,435],
[429,431,405,422,449,435,410,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,409,422,404,441,422,423,417],
[474,0,419,427,423,480,451,450,445],
[482,472,0,449,428,499,483,450,444],
[469,464,442,0,488,470,494,501,450],
[487,468,463,403,0,523,464,474,475],
[450,411,392,421,368,0,453,396,393],
[469,440,408,397,427,438,0,471,412],
[468,441,441,390,417,495,420,0,407],
[474,446,447,441,416,498,479,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,443,432,455,453,438,460,467],
[427,0,426,420,402,448,418,433,449],
[448,465,0,455,467,466,461,464,440],
[459,471,436,0,427,455,442,433,421],
[436,489,424,464,0,444,476,437,450],
[438,443,425,436,447,0,437,452,425],
[453,473,430,449,415,454,0,444,435],
[431,458,427,458,454,439,447,0,423],
[424,442,451,470,441,466,456,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,473,461,442,466,466,471,457],
[457,0,459,474,455,482,436,455,465],
[418,432,0,452,438,435,430,434,457],
[430,417,439,0,407,436,427,415,426],
[449,436,453,484,0,451,465,455,476],
[425,409,456,455,440,0,453,423,438],
[425,455,461,464,426,438,0,444,448],
[420,436,457,476,436,468,447,0,446],
[434,426,434,465,415,453,443,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,422,424,470,465,451,456,420],
[429,0,409,423,433,464,452,424,418],
[469,482,0,465,475,472,485,482,441],
[467,468,426,0,474,450,436,447,438],
[421,458,416,417,0,454,427,448,425],
[426,427,419,441,437,0,428,455,447],
[440,439,406,455,464,463,0,461,441],
[435,467,409,444,443,436,430,0,409],
[471,473,450,453,466,444,450,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,415,438,432,429,425,410,437],
[443,0,442,434,417,439,435,435,434],
[476,449,0,464,419,438,438,450,442],
[453,457,427,0,427,435,435,427,440],
[459,474,472,464,0,456,474,444,453],
[462,452,453,456,435,0,443,463,454],
[466,456,453,456,417,448,0,437,447],
[481,456,441,464,447,428,454,0,452],
[454,457,449,451,438,437,444,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,415,417,396,451,418,435,425],
[446,0,433,418,416,459,419,443,442],
[476,458,0,421,452,476,448,479,452],
[474,473,470,0,423,498,450,483,460],
[495,475,439,468,0,467,443,491,469],
[440,432,415,393,424,0,441,466,416],
[473,472,443,441,448,450,0,460,466],
[456,448,412,408,400,425,431,0,423],
[466,449,439,431,422,475,425,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,456,473,463,444,473,450,458],
[420,0,475,474,455,457,442,446,452],
[435,416,0,474,440,414,449,451,431],
[418,417,417,0,447,453,447,423,443],
[428,436,451,444,0,436,478,441,436],
[447,434,477,438,455,0,470,470,446],
[418,449,442,444,413,421,0,425,452],
[441,445,440,468,450,421,466,0,452],
[433,439,460,448,455,445,439,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,456,438,453,446,437,476,463],
[413,0,419,451,442,370,411,383,435],
[435,472,0,481,453,418,487,432,449],
[453,440,410,0,382,414,400,461,414],
[438,449,438,509,0,417,401,431,476],
[445,521,473,477,474,0,449,482,479],
[454,480,404,491,490,442,0,453,449],
[415,508,459,430,460,409,438,0,487],
[428,456,442,477,415,412,442,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,438,452,451,439,435,446,435],
[466,0,450,475,466,441,450,432,463],
[453,441,0,478,455,451,441,444,452],
[439,416,413,0,419,430,420,406,440],
[440,425,436,472,0,436,426,436,442],
[452,450,440,461,455,0,463,423,452],
[456,441,450,471,465,428,0,417,435],
[445,459,447,485,455,468,474,0,462],
[456,428,439,451,449,439,456,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,409,460,388,388,427,436,426],
[454,0,438,428,409,413,447,409,426],
[482,453,0,466,472,442,459,465,456],
[431,463,425,0,392,429,443,457,441],
[503,482,419,499,0,454,473,504,443],
[503,478,449,462,437,0,501,498,447],
[464,444,432,448,418,390,0,470,404],
[455,482,426,434,387,393,421,0,404],
[465,465,435,450,448,444,487,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,492,472,421,482,461,455,439],
[428,0,493,443,442,495,502,458,456],
[399,398,0,382,403,435,426,395,442],
[419,448,509,0,450,459,465,474,468],
[470,449,488,441,0,490,501,477,475],
[409,396,456,432,401,0,483,416,421],
[430,389,465,426,390,408,0,448,415],
[436,433,496,417,414,475,443,0,450],
[452,435,449,423,416,470,476,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,458,434,422,437,442,456,474],
[453,0,466,447,458,441,436,453,485],
[433,425,0,388,397,432,415,436,422],
[457,444,503,0,434,469,450,447,467],
[469,433,494,457,0,450,445,476,462],
[454,450,459,422,441,0,424,433,427],
[449,455,476,441,446,467,0,458,479],
[435,438,455,444,415,458,433,0,420],
[417,406,469,424,429,464,412,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,453,466,456,440,450,468,451],
[471,0,450,452,443,428,432,437,401],
[438,441,0,437,433,465,396,458,435],
[425,439,454,0,458,449,436,468,406],
[435,448,458,433,0,449,417,460,458],
[451,463,426,442,442,0,440,458,423],
[441,459,495,455,474,451,0,460,463],
[423,454,433,423,431,433,431,0,435],
[440,490,456,485,433,468,428,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,432,429,460,426,441,429,439],
[441,0,427,434,433,433,430,397,425],
[459,464,0,470,457,459,459,438,456],
[462,457,421,0,442,431,456,429,450],
[431,458,434,449,0,436,454,431,443],
[465,458,432,460,455,0,448,456,467],
[450,461,432,435,437,443,0,418,444],
[462,494,453,462,460,435,473,0,447],
[452,466,435,441,448,424,447,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,420,413,420,435,455,467,453],
[455,0,397,426,440,445,448,468,468],
[471,494,0,458,448,401,441,477,453],
[478,465,433,0,434,444,469,449,461],
[471,451,443,457,0,458,453,451,476],
[456,446,490,447,433,0,475,457,465],
[436,443,450,422,438,416,0,455,433],
[424,423,414,442,440,434,436,0,441],
[438,423,438,430,415,426,458,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,428,452,513,433,460,465,451],
[401,0,402,394,414,454,408,370,427],
[463,489,0,452,459,486,438,460,462],
[439,497,439,0,431,444,412,488,437],
[378,477,432,460,0,420,434,446,405],
[458,437,405,447,471,0,439,417,445],
[431,483,453,479,457,452,0,410,462],
[426,521,431,403,445,474,481,0,462],
[440,464,429,454,486,446,429,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,533,443,426,329,474,388,378,509],
[358,0,433,396,368,455,434,339,381],
[448,458,0,495,448,533,398,394,469],
[465,495,396,0,468,436,329,469,326],
[562,523,443,423,0,487,440,332,377],
[417,436,358,455,404,0,409,451,386],
[503,457,493,562,451,482,0,420,483],
[513,552,497,422,559,440,471,0,411],
[382,510,422,565,514,505,408,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,421,445,431,460,440,470,438],
[444,0,500,448,446,452,483,482,452],
[470,391,0,441,416,428,459,460,445],
[446,443,450,0,414,401,477,472,449],
[460,445,475,477,0,466,469,493,473],
[431,439,463,490,425,0,454,478,444],
[451,408,432,414,422,437,0,403,442],
[421,409,431,419,398,413,488,0,416],
[453,439,446,442,418,447,449,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,440,475,444,461,443,493,439],
[457,0,459,502,445,459,464,498,441],
[451,432,0,464,447,478,429,509,417],
[416,389,427,0,426,463,440,482,429],
[447,446,444,465,0,482,464,498,466],
[430,432,413,428,409,0,414,459,435],
[448,427,462,451,427,477,0,490,447],
[398,393,382,409,393,432,401,0,414],
[452,450,474,462,425,456,444,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,452,474,490,478,466,451,415],
[462,0,442,422,463,441,460,445,434],
[439,449,0,452,441,431,446,425,404],
[417,469,439,0,496,478,476,461,479],
[401,428,450,395,0,422,469,425,412],
[413,450,460,413,469,0,477,444,401],
[425,431,445,415,422,414,0,422,415],
[440,446,466,430,466,447,469,0,451],
[476,457,487,412,479,490,476,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,486,440,426,440,414,388,462],
[410,0,471,435,397,414,432,460,484],
[405,420,0,422,381,422,412,365,510],
[451,456,469,0,386,410,412,378,479],
[465,494,510,505,0,467,451,441,552],
[451,477,469,481,424,0,449,439,535],
[477,459,479,479,440,442,0,423,495],
[503,431,526,513,450,452,468,0,508],
[429,407,381,412,339,356,396,383,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,410,489,460,483,431,471,457],
[416,0,448,489,445,440,458,483,456],
[481,443,0,517,412,458,455,433,448],
[402,402,374,0,398,450,410,397,406],
[431,446,479,493,0,461,472,486,449],
[408,451,433,441,430,0,456,423,441],
[460,433,436,481,419,435,0,436,432],
[420,408,458,494,405,468,455,0,468],
[434,435,443,485,442,450,459,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,443,474,427,447,434,433,448],
[458,0,457,475,437,475,467,440,478],
[448,434,0,446,441,446,432,441,450],
[417,416,445,0,416,445,427,406,443],
[464,454,450,475,0,471,461,429,481],
[444,416,445,446,420,0,437,433,445],
[457,424,459,464,430,454,0,446,441],
[458,451,450,485,462,458,445,0,470],
[443,413,441,448,410,446,450,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,392,456,447,408,388,412,501],
[442,0,401,503,457,415,420,396,499],
[499,490,0,521,488,519,448,433,534],
[435,388,370,0,485,437,368,385,465],
[444,434,403,406,0,460,360,435,476],
[483,476,372,454,431,0,450,452,483],
[503,471,443,523,531,441,0,490,590],
[479,495,458,506,456,439,401,0,543],
[390,392,357,426,415,408,301,348,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,453,436,429,456,452,435,442],
[455,0,468,449,436,445,457,477,470],
[438,423,0,432,432,437,451,462,452],
[455,442,459,0,438,444,454,454,450],
[462,455,459,453,0,440,473,463,444],
[435,446,454,447,451,0,436,445,439],
[439,434,440,437,418,455,0,448,432],
[456,414,429,437,428,446,443,0,447],
[449,421,439,441,447,452,459,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,412,438,389,452,409,417,424],
[484,0,442,470,438,473,457,444,477],
[479,449,0,484,465,468,438,424,453],
[453,421,407,0,422,446,436,414,396],
[502,453,426,469,0,459,457,448,445],
[439,418,423,445,432,0,415,432,449],
[482,434,453,455,434,476,0,434,440],
[474,447,467,477,443,459,457,0,460],
[467,414,438,495,446,442,451,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,477,465,466,465,467,511,463],
[465,0,417,385,439,474,463,431,436],
[414,474,0,449,491,495,388,504,462],
[426,506,442,0,487,494,498,507,462],
[425,452,400,404,0,485,426,432,410],
[426,417,396,397,406,0,396,433,377],
[424,428,503,393,465,495,0,473,467],
[380,460,387,384,459,458,418,0,409],
[428,455,429,429,481,514,424,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,452,419,457,407,455,458,461],
[457,0,449,453,463,456,462,460,444],
[439,442,0,442,465,444,448,452,457],
[472,438,449,0,462,432,444,462,446],
[434,428,426,429,0,433,408,429,441],
[484,435,447,459,458,0,470,469,452],
[436,429,443,447,483,421,0,440,438],
[433,431,439,429,462,422,451,0,454],
[430,447,434,445,450,439,453,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,451,465,459,419,416,437,425],
[446,0,432,463,451,405,424,487,471],
[440,459,0,429,438,446,420,463,476],
[426,428,462,0,426,434,449,472,445],
[432,440,453,465,0,429,422,459,442],
[472,486,445,457,462,0,431,479,440],
[475,467,471,442,469,460,0,450,449],
[454,404,428,419,432,412,441,0,432],
[466,420,415,446,449,451,442,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,469,418,442,451,470,459,436],
[447,0,455,443,459,452,484,473,463],
[422,436,0,413,405,438,476,462,437],
[473,448,478,0,436,455,473,462,461],
[449,432,486,455,0,441,488,460,465],
[440,439,453,436,450,0,468,451,436],
[421,407,415,418,403,423,0,420,418],
[432,418,429,429,431,440,471,0,430],
[455,428,454,430,426,455,473,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,391,438,457,459,427,488,438,375],
[500,0,480,515,427,517,535,518,441],
[453,411,0,398,348,425,409,405,360],
[434,376,493,0,377,440,467,371,294],
[432,464,543,514,0,533,532,450,453],
[464,374,466,451,358,0,503,436,344],
[403,356,482,424,359,388,0,383,312],
[453,373,486,520,441,455,508,0,373],
[516,450,531,597,438,547,579,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,409,439,429,428,419,438,460],
[457,0,418,447,432,467,430,437,466],
[482,473,0,450,454,460,445,465,451],
[452,444,441,0,458,454,450,458,485],
[462,459,437,433,0,451,418,465,448],
[463,424,431,437,440,0,427,440,443],
[472,461,446,441,473,464,0,474,482],
[453,454,426,433,426,451,417,0,426],
[431,425,440,406,443,448,409,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,443,445,449,484,448,450,456],
[460,0,450,452,461,477,451,440,462],
[448,441,0,446,441,461,431,425,435],
[446,439,445,0,450,463,442,440,436],
[442,430,450,441,0,472,428,428,441],
[407,414,430,428,419,0,404,409,413],
[443,440,460,449,463,487,0,439,448],
[441,451,466,451,463,482,452,0,446],
[435,429,456,455,450,478,443,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,417,448,419,453,470,449,432],
[446,0,429,433,395,445,458,455,424],
[474,462,0,445,445,446,471,452,472],
[443,458,446,0,433,445,488,436,469],
[472,496,446,458,0,454,486,433,480],
[438,446,445,446,437,0,467,454,475],
[421,433,420,403,405,424,0,438,424],
[442,436,439,455,458,437,453,0,454],
[459,467,419,422,411,416,467,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,443,441,466,459,459,465,439],
[438,0,444,463,450,461,441,457,449],
[448,447,0,420,470,464,443,468,439],
[450,428,471,0,421,447,443,462,443],
[425,441,421,470,0,473,447,475,429],
[432,430,427,444,418,0,439,452,439],
[432,450,448,448,444,452,0,454,442],
[426,434,423,429,416,439,437,0,444],
[452,442,452,448,462,452,449,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,439,484,436,443,432,425,430],
[485,0,463,486,426,441,449,472,438],
[452,428,0,452,437,438,419,435,420],
[407,405,439,0,409,429,423,441,415],
[455,465,454,482,0,429,439,450,433],
[448,450,453,462,462,0,418,437,448],
[459,442,472,468,452,473,0,494,453],
[466,419,456,450,441,454,397,0,434],
[461,453,471,476,458,443,438,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,386,439,454,422,439,420,422,430],
[505,0,466,485,460,498,448,427,445],
[452,425,0,485,453,462,467,451,450],
[437,406,406,0,420,432,429,410,413],
[469,431,438,471,0,461,455,454,441],
[452,393,429,459,430,0,415,425,424],
[471,443,424,462,436,476,0,423,422],
[469,464,440,481,437,466,468,0,466],
[461,446,441,478,450,467,469,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,431,450,462,478,472,469,484],
[419,0,430,429,415,434,468,443,449],
[460,461,0,470,439,439,476,444,466],
[441,462,421,0,452,472,443,457,465],
[429,476,452,439,0,460,487,447,472],
[413,457,452,419,431,0,440,450,461],
[419,423,415,448,404,451,0,455,451],
[422,448,447,434,444,441,436,0,444],
[407,442,425,426,419,430,440,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,446,437,450,420,473,417,454],
[436,0,442,447,451,420,433,458,456],
[445,449,0,458,452,431,435,425,473],
[454,444,433,0,443,433,464,416,485],
[441,440,439,448,0,418,449,414,442],
[471,471,460,458,473,0,467,438,489],
[418,458,456,427,442,424,0,406,443],
[474,433,466,475,477,453,485,0,499],
[437,435,418,406,449,402,448,392,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,418,426,438,404,445,395,427],
[468,0,436,461,482,432,478,410,436],
[473,455,0,429,472,448,439,434,435],
[465,430,462,0,447,411,430,403,395],
[453,409,419,444,0,412,443,406,397],
[487,459,443,480,479,0,471,448,434],
[446,413,452,461,448,420,0,414,411],
[496,481,457,488,485,443,477,0,459],
[464,455,456,496,494,457,480,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,457,452,446,440,457,461,458],
[422,0,486,477,462,441,462,484,446],
[434,405,0,440,444,410,452,480,405],
[439,414,451,0,464,434,475,495,454],
[445,429,447,427,0,456,473,462,428],
[451,450,481,457,435,0,424,479,427],
[434,429,439,416,418,467,0,436,443],
[430,407,411,396,429,412,455,0,391],
[433,445,486,437,463,464,448,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,506,452,455,488,450,453,435,441],
[385,0,431,420,428,417,415,400,455],
[439,460,0,433,423,433,427,410,416],
[436,471,458,0,441,447,431,411,438],
[403,463,468,450,0,440,432,432,443],
[441,474,458,444,451,0,450,457,445],
[438,476,464,460,459,441,0,436,458],
[456,491,481,480,459,434,455,0,455],
[450,436,475,453,448,446,433,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,430,433,474,440,434,447,419],
[447,0,446,455,473,451,438,450,433],
[461,445,0,446,464,454,429,446,449],
[458,436,445,0,478,452,440,443,436],
[417,418,427,413,0,413,397,422,418],
[451,440,437,439,478,0,447,420,426],
[457,453,462,451,494,444,0,460,459],
[444,441,445,448,469,471,431,0,423],
[472,458,442,455,473,465,432,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,458,438,424,442,471,453,412],
[451,0,456,447,434,453,450,442,423],
[433,435,0,447,399,436,464,438,422],
[453,444,444,0,449,454,458,434,425],
[467,457,492,442,0,471,488,462,465],
[449,438,455,437,420,0,457,442,429],
[420,441,427,433,403,434,0,431,414],
[438,449,453,457,429,449,460,0,422],
[479,468,469,466,426,462,477,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,479,441,430,447,467,453,458],
[453,0,453,430,453,431,464,458,450],
[412,438,0,429,431,426,450,445,448],
[450,461,462,0,450,438,473,455,451],
[461,438,460,441,0,477,470,446,443],
[444,460,465,453,414,0,459,453,456],
[424,427,441,418,421,432,0,443,438],
[438,433,446,436,445,438,448,0,426],
[433,441,443,440,448,435,453,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,430,459,453,436,438,449,433],
[451,0,443,451,435,449,464,457,451],
[461,448,0,458,456,440,453,454,445],
[432,440,433,0,444,414,459,450,425],
[438,456,435,447,0,436,459,464,450],
[455,442,451,477,455,0,451,458,448],
[453,427,438,432,432,440,0,430,442],
[442,434,437,441,427,433,461,0,440],
[458,440,446,466,441,443,449,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,493,470,446,443,469,480,489,437],
[398,0,414,403,433,402,400,442,410],
[421,477,0,412,449,431,421,444,437],
[445,488,479,0,505,465,429,505,419],
[448,458,442,386,0,435,402,464,431],
[422,489,460,426,456,0,411,443,454],
[411,491,470,462,489,480,0,489,472],
[402,449,447,386,427,448,402,0,377],
[454,481,454,472,460,437,419,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,529,501,451,501,537,422,386,555],
[362,0,247,447,360,416,395,354,389],
[390,644,0,391,504,644,477,464,499],
[440,444,500,0,471,640,532,434,473],
[390,531,387,420,0,478,453,359,391],
[354,475,247,251,413,0,363,296,386],
[469,496,414,359,438,528,0,406,492],
[505,537,427,457,532,595,485,0,449],
[336,502,392,418,500,505,399,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,422,449,436,441,462,428,424],
[419,0,411,407,415,437,454,405,396],
[469,480,0,441,451,468,473,428,444],
[442,484,450,0,444,476,490,435,457],
[455,476,440,447,0,436,486,436,437],
[450,454,423,415,455,0,455,431,413],
[429,437,418,401,405,436,0,427,379],
[463,486,463,456,455,460,464,0,420],
[467,495,447,434,454,478,512,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,435,501,457,458,487,516,457],
[445,0,415,448,420,436,500,488,449],
[456,476,0,486,433,436,484,521,489],
[390,443,405,0,383,419,453,477,447],
[434,471,458,508,0,479,502,511,491],
[433,455,455,472,412,0,497,467,483],
[404,391,407,438,389,394,0,452,423],
[375,403,370,414,380,424,439,0,427],
[434,442,402,444,400,408,468,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,368,438,505,396,365,450,479,416],
[523,0,487,517,493,396,517,504,455],
[453,404,0,487,441,426,485,491,455],
[386,374,404,0,383,305,437,413,359],
[495,398,450,508,0,436,488,497,484],
[526,495,465,586,455,0,475,426,423],
[441,374,406,454,403,416,0,475,407],
[412,387,400,478,394,465,416,0,421],
[475,436,436,532,407,468,484,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,447,423,445,442,471,474,488],
[449,0,452,469,438,480,463,469,494],
[444,439,0,430,454,449,453,450,490],
[468,422,461,0,431,452,453,485,458],
[446,453,437,460,0,476,468,498,494],
[449,411,442,439,415,0,419,451,466],
[420,428,438,438,423,472,0,452,477],
[417,422,441,406,393,440,439,0,453],
[403,397,401,433,397,425,414,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,451,430,435,434,434,429,418],
[463,0,450,460,467,449,460,437,435],
[440,441,0,456,428,431,432,443,434],
[461,431,435,0,450,444,433,435,433],
[456,424,463,441,0,437,449,426,446],
[457,442,460,447,454,0,436,437,443],
[457,431,459,458,442,455,0,442,437],
[462,454,448,456,465,454,449,0,436],
[473,456,457,458,445,448,454,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,427,430,441,450,425,430,457],
[445,0,458,467,473,440,449,479,434],
[464,433,0,451,504,475,427,439,463],
[461,424,440,0,494,469,435,457,418],
[450,418,387,397,0,430,377,407,402],
[441,451,416,422,461,0,431,429,470],
[466,442,464,456,514,460,0,452,456],
[461,412,452,434,484,462,439,0,445],
[434,457,428,473,489,421,435,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,466,432,468,450,473,446,504],
[431,0,470,459,467,434,473,476,487],
[425,421,0,436,464,411,446,409,452],
[459,432,455,0,480,445,454,474,470],
[423,424,427,411,0,430,442,466,444],
[441,457,480,446,461,0,451,428,452],
[418,418,445,437,449,440,0,446,439],
[445,415,482,417,425,463,445,0,441],
[387,404,439,421,447,439,452,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,374,395,368,402,369,356,378,391],
[517,0,487,424,462,444,412,419,454],
[496,404,0,480,451,441,444,471,455],
[523,467,411,0,511,467,434,409,444],
[489,429,440,380,0,434,409,448,459],
[522,447,450,424,457,0,436,429,436],
[535,479,447,457,482,455,0,456,434],
[513,472,420,482,443,462,435,0,475],
[500,437,436,447,432,455,457,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,450,457,431,431,431,463,446],
[458,0,462,458,440,456,418,457,441],
[441,429,0,456,441,451,432,434,449],
[434,433,435,0,407,441,425,445,434],
[460,451,450,484,0,468,436,457,435],
[460,435,440,450,423,0,441,433,445],
[460,473,459,466,455,450,0,439,448],
[428,434,457,446,434,458,452,0,453],
[445,450,442,457,456,446,443,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,442,439,456,460,433,444,444],
[430,0,445,449,455,447,443,461,451],
[449,446,0,438,445,451,447,443,458],
[452,442,453,0,449,452,441,453,465],
[435,436,446,442,0,455,430,439,445],
[431,444,440,439,436,0,446,439,440],
[458,448,444,450,461,445,0,430,458],
[447,430,448,438,452,452,461,0,464],
[447,440,433,426,446,451,433,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,482,469,452,460,440,477,452],
[391,0,435,423,433,406,442,456,414],
[409,456,0,424,438,436,430,455,421],
[422,468,467,0,442,444,457,473,442],
[439,458,453,449,0,448,453,458,445],
[431,485,455,447,443,0,438,458,431],
[451,449,461,434,438,453,0,471,436],
[414,435,436,418,433,433,420,0,439],
[439,477,470,449,446,460,455,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,450,447,428,484,483,476,472],
[415,0,430,495,435,485,422,502,452],
[441,461,0,437,451,457,408,398,447],
[444,396,454,0,468,446,445,415,460],
[463,456,440,423,0,462,459,456,461],
[407,406,434,445,429,0,416,429,454],
[408,469,483,446,432,475,0,441,532],
[415,389,493,476,435,462,450,0,463],
[419,439,444,431,430,437,359,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,437,447,433,453,439,475,468],
[427,0,431,428,444,440,442,465,432],
[454,460,0,448,459,470,430,471,443],
[444,463,443,0,450,447,450,483,463],
[458,447,432,441,0,459,455,471,451],
[438,451,421,444,432,0,452,458,429],
[452,449,461,441,436,439,0,484,439],
[416,426,420,408,420,433,407,0,445],
[423,459,448,428,440,462,452,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,447,468,429,466,448,465,480],
[402,0,396,408,400,417,393,418,431],
[444,495,0,438,451,461,440,490,484],
[423,483,453,0,430,476,425,477,452],
[462,491,440,461,0,477,442,465,458],
[425,474,430,415,414,0,392,445,458],
[443,498,451,466,449,499,0,487,451],
[426,473,401,414,426,446,404,0,442],
[411,460,407,439,433,433,440,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,376,356,439,455,400,408,406],
[504,0,446,320,421,403,420,424,424],
[515,445,0,373,452,436,479,400,402],
[535,571,518,0,536,515,414,520,506],
[452,470,439,355,0,401,414,435,508],
[436,488,455,376,490,0,401,387,387],
[491,471,412,477,477,490,0,423,459],
[483,467,491,371,456,504,468,0,471],
[485,467,489,385,383,504,432,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,443,459,456,433,456,469,488],
[447,0,444,447,471,475,441,458,435],
[448,447,0,431,465,443,455,465,487],
[432,444,460,0,504,454,427,462,487],
[435,420,426,387,0,419,440,445,436],
[458,416,448,437,472,0,438,473,443],
[435,450,436,464,451,453,0,447,468],
[422,433,426,429,446,418,444,0,474],
[403,456,404,404,455,448,423,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,464,426,443,444,505,446,439],
[450,0,454,443,457,438,467,437,443],
[427,437,0,444,447,444,475,437,456],
[465,448,447,0,445,452,483,425,411],
[448,434,444,446,0,446,461,401,460],
[447,453,447,439,445,0,464,396,428],
[386,424,416,408,430,427,0,402,419],
[445,454,454,466,490,495,489,0,437],
[452,448,435,480,431,463,472,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,435,441,446,512,435,430,462],
[438,0,460,451,449,461,441,431,476],
[456,431,0,450,454,474,406,439,432],
[450,440,441,0,442,479,452,438,504],
[445,442,437,449,0,479,438,416,461],
[379,430,417,412,412,0,407,379,446],
[456,450,485,439,453,484,0,458,463],
[461,460,452,453,475,512,433,0,491],
[429,415,459,387,430,445,428,400,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,463,442,453,457,458,468,449],
[441,0,445,440,442,451,463,426,439],
[428,446,0,431,455,443,462,454,441],
[449,451,460,0,458,461,456,459,442],
[438,449,436,433,0,460,457,463,444],
[434,440,448,430,431,0,425,434,435],
[433,428,429,435,434,466,0,416,423],
[423,465,437,432,428,457,475,0,443],
[442,452,450,449,447,456,468,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,470,444,445,461,489,449,462],
[431,0,448,432,430,453,447,435,451],
[421,443,0,444,419,444,441,420,418],
[447,459,447,0,445,451,443,452,442],
[446,461,472,446,0,463,462,438,456],
[430,438,447,440,428,0,462,433,446],
[402,444,450,448,429,429,0,431,437],
[442,456,471,439,453,458,460,0,447],
[429,440,473,449,435,445,454,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,468,454,450,480,432,458,429],
[432,0,439,435,446,448,432,447,450],
[423,452,0,461,438,450,435,452,421],
[437,456,430,0,457,472,436,431,428],
[441,445,453,434,0,444,454,429,435],
[411,443,441,419,447,0,432,432,434],
[459,459,456,455,437,459,0,451,431],
[433,444,439,460,462,459,440,0,433],
[462,441,470,463,456,457,460,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,473,525,416,579,471,364,418],
[473,0,367,524,626,577,470,416,522],
[418,524,0,526,364,681,419,417,573],
[366,367,365,0,418,526,417,364,575],
[475,265,527,473,0,579,419,469,524],
[312,314,210,365,312,0,104,260,466],
[420,421,472,474,472,787,0,312,629],
[527,475,474,527,422,631,579,0,523],
[473,369,318,316,367,425,262,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,489,448,476,438,441,448,497],
[492,0,445,448,463,463,407,457,505],
[402,446,0,371,397,402,436,475,484],
[443,443,520,0,460,454,452,432,511],
[415,428,494,431,0,400,381,463,497],
[453,428,489,437,491,0,408,461,495],
[450,484,455,439,510,483,0,512,529],
[443,434,416,459,428,430,379,0,527],
[394,386,407,380,394,396,362,364,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,448,450,452,466,464,443,456],
[418,0,445,458,432,463,470,465,466],
[443,446,0,475,467,458,470,449,449],
[441,433,416,0,438,450,458,444,441],
[439,459,424,453,0,461,474,470,461],
[425,428,433,441,430,0,456,455,431],
[427,421,421,433,417,435,0,426,420],
[448,426,442,447,421,436,465,0,442],
[435,425,442,450,430,460,471,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,413,438,430,378,473,450,459],
[442,0,459,491,448,455,495,469,434],
[478,432,0,434,442,455,496,475,454],
[453,400,457,0,400,433,451,455,396],
[461,443,449,491,0,461,483,467,442],
[513,436,436,458,430,0,527,475,461],
[418,396,395,440,408,364,0,432,397],
[441,422,416,436,424,416,459,0,399],
[432,457,437,495,449,430,494,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,453,456,420,436,476,429,431],
[444,0,466,464,397,397,477,468,461],
[438,425,0,483,447,398,486,470,444],
[435,427,408,0,392,362,472,419,409],
[471,494,444,499,0,455,507,443,444],
[455,494,493,529,436,0,521,470,497],
[415,414,405,419,384,370,0,427,427],
[462,423,421,472,448,421,464,0,424],
[460,430,447,482,447,394,464,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,449,470,445,460,476,440,459],
[445,0,441,436,453,435,447,433,442],
[442,450,0,451,432,460,474,467,444],
[421,455,440,0,439,451,453,436,447],
[446,438,459,452,0,458,435,436,435],
[431,456,431,440,433,0,453,442,450],
[415,444,417,438,456,438,0,423,432],
[451,458,424,455,455,449,468,0,462],
[432,449,447,444,456,441,459,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,444,428,482,464,434,431,439],
[439,0,461,451,469,458,450,450,449],
[447,430,0,446,461,432,423,431,420],
[463,440,445,0,474,449,446,423,455],
[409,422,430,417,0,407,408,412,416],
[427,433,459,442,484,0,435,462,419],
[457,441,468,445,483,456,0,437,433],
[460,441,460,468,479,429,454,0,432],
[452,442,471,436,475,472,458,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,464,460,447,460,427,455,467],
[431,0,466,471,433,449,449,465,446],
[427,425,0,468,418,445,420,439,441],
[431,420,423,0,410,472,424,450,462],
[444,458,473,481,0,477,448,455,473],
[431,442,446,419,414,0,424,434,450],
[464,442,471,467,443,467,0,470,471],
[436,426,452,441,436,457,421,0,437],
[424,445,450,429,418,441,420,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,449,436,442,456,437,453,437],
[467,0,470,464,454,475,459,445,458],
[442,421,0,420,415,447,438,454,451],
[455,427,471,0,449,467,451,443,463],
[449,437,476,442,0,463,457,436,447],
[435,416,444,424,428,0,434,456,424],
[454,432,453,440,434,457,0,431,447],
[438,446,437,448,455,435,460,0,426],
[454,433,440,428,444,467,444,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,391,458,476,411,469,516,403,469],
[500,0,456,514,464,470,428,440,456],
[433,435,0,465,395,451,433,441,451],
[415,377,426,0,437,447,447,402,395],
[480,427,496,454,0,500,435,384,443],
[422,421,440,444,391,0,379,367,402],
[375,463,458,444,456,512,0,436,392],
[488,451,450,489,507,524,455,0,435],
[422,435,440,496,448,489,499,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,427,448,439,433,425,405,424],
[434,0,422,429,459,424,437,438,442],
[464,469,0,448,472,444,459,438,448],
[443,462,443,0,497,426,451,452,464],
[452,432,419,394,0,424,424,423,439],
[458,467,447,465,467,0,440,438,468],
[466,454,432,440,467,451,0,436,445],
[486,453,453,439,468,453,455,0,439],
[467,449,443,427,452,423,446,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,475,509,592,474,479,474,592],
[450,0,451,424,451,483,360,451,652],
[416,440,0,389,477,502,506,535,562],
[382,467,502,0,500,502,445,474,590],
[299,440,414,391,0,503,359,447,561],
[417,408,389,389,388,0,419,388,560],
[412,531,385,446,532,472,0,530,617],
[417,440,356,417,444,503,361,0,558],
[299,239,329,301,330,331,274,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,537,437,443,430,508,522,461],
[439,0,491,365,424,478,510,466,435],
[354,400,0,378,415,378,472,393,409],
[454,526,513,0,467,445,499,537,451],
[448,467,476,424,0,500,477,500,465],
[461,413,513,446,391,0,467,386,410],
[383,381,419,392,414,424,0,415,380],
[369,425,498,354,391,505,476,0,460],
[430,456,482,440,426,481,511,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,508,467,415,428,448,474,415],
[423,0,488,463,434,432,473,435,451],
[383,403,0,414,407,430,423,428,414],
[424,428,477,0,432,438,477,461,444],
[476,457,484,459,0,411,451,463,424],
[463,459,461,453,480,0,433,501,462],
[443,418,468,414,440,458,0,487,447],
[417,456,463,430,428,390,404,0,404],
[476,440,477,447,467,429,444,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,493,480,457,482,458,474,439],
[430,0,471,456,433,457,481,448,449],
[398,420,0,409,436,441,432,449,395],
[411,435,482,0,452,457,458,471,421],
[434,458,455,439,0,448,447,456,438],
[409,434,450,434,443,0,434,459,424],
[433,410,459,433,444,457,0,455,437],
[417,443,442,420,435,432,436,0,411],
[452,442,496,470,453,467,454,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,404,492,468,462,437,399,426],
[470,0,447,549,464,483,480,430,463],
[487,444,0,502,470,503,400,498,454],
[399,342,389,0,402,430,431,358,374],
[423,427,421,489,0,505,442,421,435],
[429,408,388,461,386,0,431,423,445],
[454,411,491,460,449,460,0,437,442],
[492,461,393,533,470,468,454,0,464],
[465,428,437,517,456,446,449,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,462,442,468,445,445,425,434],
[439,0,461,446,463,421,430,431,426],
[429,430,0,459,478,432,420,447,440],
[449,445,432,0,469,438,420,440,436],
[423,428,413,422,0,425,407,421,409],
[446,470,459,453,466,0,441,435,440],
[446,461,471,471,484,450,0,450,442],
[466,460,444,451,470,456,441,0,456],
[457,465,451,455,482,451,449,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,454,457,458,447,499,461,428],
[452,0,484,438,481,453,431,442,461],
[437,407,0,435,450,384,403,411,402],
[434,453,456,0,467,476,439,399,459],
[433,410,441,424,0,413,438,413,395],
[444,438,507,415,478,0,437,386,380],
[392,460,488,452,453,454,0,408,419],
[430,449,480,492,478,505,483,0,491],
[463,430,489,432,496,511,472,400,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,489,436,461,458,450,457,501],
[421,0,465,425,441,456,430,478,484],
[402,426,0,419,430,437,424,429,455],
[455,466,472,0,457,471,431,453,479],
[430,450,461,434,0,445,420,492,474],
[433,435,454,420,446,0,422,466,453],
[441,461,467,460,471,469,0,473,523],
[434,413,462,438,399,425,418,0,481],
[390,407,436,412,417,438,368,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,466,491,445,461,466,454,468],
[401,0,440,440,411,424,442,419,437],
[425,451,0,456,434,436,452,429,424],
[400,451,435,0,443,428,464,442,455],
[446,480,457,448,0,437,456,448,458],
[430,467,455,463,454,0,468,436,470],
[425,449,439,427,435,423,0,418,446],
[437,472,462,449,443,455,473,0,455],
[423,454,467,436,433,421,445,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,466,462,467,453,428,430,467],
[437,0,423,424,464,435,418,419,463],
[425,468,0,454,452,453,443,422,464],
[429,467,437,0,463,443,456,433,483],
[424,427,439,428,0,450,422,424,457],
[438,456,438,448,441,0,402,427,473],
[463,473,448,435,469,489,0,452,467],
[461,472,469,458,467,464,439,0,459],
[424,428,427,408,434,418,424,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,467,438,440,454,435,442,428],
[466,0,465,479,460,477,473,444,465],
[424,426,0,447,444,421,408,442,448],
[453,412,444,0,456,452,431,437,438],
[451,431,447,435,0,452,426,457,438],
[437,414,470,439,439,0,427,465,436],
[456,418,483,460,465,464,0,486,451],
[449,447,449,454,434,426,405,0,458],
[463,426,443,453,453,455,440,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,457,447,432,437,422,442,439],
[435,0,441,464,437,442,441,445,450],
[434,450,0,444,441,451,452,458,438],
[444,427,447,0,448,444,435,437,439],
[459,454,450,443,0,442,467,428,459],
[454,449,440,447,449,0,463,443,435],
[469,450,439,456,424,428,0,441,446],
[449,446,433,454,463,448,450,0,438],
[452,441,453,452,432,456,445,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,462,416,450,405,493,444,445],
[476,0,456,430,419,437,457,437,468],
[429,435,0,447,458,418,455,481,451],
[475,461,444,0,462,464,500,449,460],
[441,472,433,429,0,424,455,477,510],
[486,454,473,427,467,0,540,480,440],
[398,434,436,391,436,351,0,405,411],
[447,454,410,442,414,411,486,0,483],
[446,423,440,431,381,451,480,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,455,444,439,458,453,459,459],
[448,0,470,445,467,458,449,449,461],
[436,421,0,418,423,427,455,423,470],
[447,446,473,0,440,457,460,466,477],
[452,424,468,451,0,464,443,445,475],
[433,433,464,434,427,0,457,444,450],
[438,442,436,431,448,434,0,446,475],
[432,442,468,425,446,447,445,0,451],
[432,430,421,414,416,441,416,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,431,442,417,428,427,416,450],
[444,0,447,453,427,440,442,447,469],
[460,444,0,450,442,447,444,443,471],
[449,438,441,0,432,453,446,437,458],
[474,464,449,459,0,465,443,442,469],
[463,451,444,438,426,0,435,442,479],
[464,449,447,445,448,456,0,456,475],
[475,444,448,454,449,449,435,0,466],
[441,422,420,433,422,412,416,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,419,458,461,408,482,432,407],
[441,0,461,465,477,432,466,436,441],
[472,430,0,457,465,430,453,459,433],
[433,426,434,0,444,381,479,448,446],
[430,414,426,447,0,380,446,462,399],
[483,459,461,510,511,0,514,500,439],
[409,425,438,412,445,377,0,428,413],
[459,455,432,443,429,391,463,0,436],
[484,450,458,445,492,452,478,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,448,485,441,424,471,429,433],
[445,0,434,498,440,439,471,444,456],
[443,457,0,490,469,454,478,454,456],
[406,393,401,0,398,395,407,407,420],
[450,451,422,493,0,465,503,457,466],
[467,452,437,496,426,0,473,423,470],
[420,420,413,484,388,418,0,404,429],
[462,447,437,484,434,468,487,0,463],
[458,435,435,471,425,421,462,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,437,446,440,437,435,454,468],
[414,0,424,451,439,431,438,445,457],
[454,467,0,471,446,442,454,471,476],
[445,440,420,0,428,418,426,449,450],
[451,452,445,463,0,440,437,453,463],
[454,460,449,473,451,0,445,478,476],
[456,453,437,465,454,446,0,459,470],
[437,446,420,442,438,413,432,0,450],
[423,434,415,441,428,415,421,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,446,443,463,470,453,446,416],
[447,0,439,442,423,415,426,427,418],
[445,452,0,448,437,411,418,434,428],
[448,449,443,0,447,421,448,478,427],
[428,468,454,444,0,465,426,447,415],
[421,476,480,470,426,0,452,458,466],
[438,465,473,443,465,439,0,438,428],
[445,464,457,413,444,433,453,0,432],
[475,473,463,464,476,425,463,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,448,427,444,439,441,442,456],
[462,0,433,425,420,435,412,408,404],
[443,458,0,407,435,462,426,425,448],
[464,466,484,0,434,457,426,455,476],
[447,471,456,457,0,479,419,435,474],
[452,456,429,434,412,0,408,413,424],
[450,479,465,465,472,483,0,439,456],
[449,483,466,436,456,478,452,0,445],
[435,487,443,415,417,467,435,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,428,467,457,467,449,459,452],
[444,0,467,477,459,455,430,457,481],
[463,424,0,451,431,454,438,431,453],
[424,414,440,0,437,414,435,449,441],
[434,432,460,454,0,455,424,465,441],
[424,436,437,477,436,0,452,426,450],
[442,461,453,456,467,439,0,456,447],
[432,434,460,442,426,465,435,0,447],
[439,410,438,450,450,441,444,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,458,477,473,474,442,458,452],
[448,0,467,444,465,464,442,421,464],
[433,424,0,440,462,447,437,428,440],
[414,447,451,0,451,440,441,421,451],
[418,426,429,440,0,431,429,442,440],
[417,427,444,451,460,0,421,429,431],
[449,449,454,450,462,470,0,442,479],
[433,470,463,470,449,462,449,0,437],
[439,427,451,440,451,460,412,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,446,463,443,450,451,463,439],
[457,0,443,453,448,454,480,430,451],
[445,448,0,449,431,427,450,431,453],
[428,438,442,0,419,426,438,436,423],
[448,443,460,472,0,461,472,463,451],
[441,437,464,465,430,0,452,437,446],
[440,411,441,453,419,439,0,450,419],
[428,461,460,455,428,454,441,0,459],
[452,440,438,468,440,445,472,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,491,516,486,446,443,452,446],
[432,0,459,452,474,460,461,467,468],
[400,432,0,449,472,428,431,471,445],
[375,439,442,0,422,418,418,466,463],
[405,417,419,469,0,429,424,457,441],
[445,431,463,473,462,0,440,484,461],
[448,430,460,473,467,451,0,458,457],
[439,424,420,425,434,407,433,0,439],
[445,423,446,428,450,430,434,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,433,470,404,430,437,458,430],
[438,0,422,454,444,419,416,458,405],
[458,469,0,480,444,451,437,484,445],
[421,437,411,0,436,438,412,455,432],
[487,447,447,455,0,446,429,460,449],
[461,472,440,453,445,0,463,452,450],
[454,475,454,479,462,428,0,461,460],
[433,433,407,436,431,439,430,0,424],
[461,486,446,459,442,441,431,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,468,489,507,446,450,453,443],
[413,0,468,472,445,404,462,412,457],
[423,423,0,457,473,424,438,442,409],
[402,419,434,0,455,392,457,402,437],
[384,446,418,436,0,390,463,450,419],
[445,487,467,499,501,0,471,475,480],
[441,429,453,434,428,420,0,415,477],
[438,479,449,489,441,416,476,0,461],
[448,434,482,454,472,411,414,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,360,380,385,422,421,417,398,434],
[531,0,433,487,499,489,516,483,500],
[511,458,0,442,468,443,474,443,477],
[506,404,449,0,469,490,435,407,459],
[469,392,423,422,0,504,447,401,453],
[470,402,448,401,387,0,425,373,384],
[474,375,417,456,444,466,0,437,432],
[493,408,448,484,490,518,454,0,489],
[457,391,414,432,438,507,459,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,405,424,466,414,450,440,453],
[435,0,411,442,467,433,451,447,431],
[486,480,0,460,460,446,435,466,469],
[467,449,431,0,458,435,440,452,489],
[425,424,431,433,0,420,443,404,434],
[477,458,445,456,471,0,461,431,460],
[441,440,456,451,448,430,0,451,443],
[451,444,425,439,487,460,440,0,462],
[438,460,422,402,457,431,448,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,454,415,445,497,521,394,496],
[407,0,378,393,424,452,451,376,472],
[437,513,0,465,461,503,513,497,557],
[476,498,426,0,482,484,485,395,498],
[446,467,430,409,0,476,414,405,513],
[394,439,388,407,415,0,427,420,476],
[370,440,378,406,477,464,0,399,474],
[497,515,394,496,486,471,492,0,492],
[395,419,334,393,378,415,417,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,470,494,471,497,480,491,444],
[410,0,450,466,460,486,456,443,437],
[421,441,0,503,494,475,489,483,462],
[397,425,388,0,440,431,434,422,418],
[420,431,397,451,0,458,451,432,417],
[394,405,416,460,433,0,414,428,401],
[411,435,402,457,440,477,0,475,449],
[400,448,408,469,459,463,416,0,452],
[447,454,429,473,474,490,442,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,451,423,441,452,429,433,472],
[460,0,467,439,453,478,451,462,475],
[440,424,0,462,447,449,436,441,458],
[468,452,429,0,449,459,441,437,464],
[450,438,444,442,0,458,431,441,463],
[439,413,442,432,433,0,441,442,452],
[462,440,455,450,460,450,0,448,456],
[458,429,450,454,450,449,443,0,475],
[419,416,433,427,428,439,435,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,384,447,397,430,418,396,409,433],
[507,0,516,431,445,517,455,448,535],
[444,375,0,468,419,419,398,415,459],
[494,460,423,0,478,452,461,462,446],
[461,446,472,413,0,405,496,441,536],
[473,374,472,439,486,0,423,472,450],
[495,436,493,430,395,468,0,450,479],
[482,443,476,429,450,419,441,0,529],
[458,356,432,445,355,441,412,362,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,442,484,452,417,410,445,470],
[434,0,451,495,464,445,449,450,414],
[449,440,0,501,427,430,433,420,403],
[407,396,390,0,412,400,405,402,393],
[439,427,464,479,0,440,432,450,407],
[474,446,461,491,451,0,448,476,430],
[481,442,458,486,459,443,0,461,426],
[446,441,471,489,441,415,430,0,433],
[421,477,488,498,484,461,465,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,464,443,465,449,482,469,436],
[448,0,448,405,449,454,459,449,433],
[427,443,0,421,430,448,460,420,427],
[448,486,470,0,446,462,433,453,466],
[426,442,461,445,0,465,424,434,441],
[442,437,443,429,426,0,450,423,444],
[409,432,431,458,467,441,0,451,437],
[422,442,471,438,457,468,440,0,427],
[455,458,464,425,450,447,454,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,439,524,477,484,448,465,458],
[417,0,428,450,408,429,426,391,411],
[452,463,0,497,454,490,456,444,425],
[367,441,394,0,407,395,382,399,393],
[414,483,437,484,0,443,424,448,404],
[407,462,401,496,448,0,417,441,433],
[443,465,435,509,467,474,0,447,428],
[426,500,447,492,443,450,444,0,416],
[433,480,466,498,487,458,463,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,441,420,470,413,387,416,416],
[470,0,418,448,467,483,455,442,432],
[450,473,0,408,450,399,427,415,399],
[471,443,483,0,501,457,453,428,446],
[421,424,441,390,0,450,419,438,389],
[478,408,492,434,441,0,418,427,413],
[504,436,464,438,472,473,0,436,439],
[475,449,476,463,453,464,455,0,441],
[475,459,492,445,502,478,452,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,404,444,445,425,432,437,424],
[481,0,437,478,476,465,438,465,461],
[487,454,0,453,487,434,449,454,458],
[447,413,438,0,469,419,442,442,460],
[446,415,404,422,0,415,432,440,434],
[466,426,457,472,476,0,457,489,472],
[459,453,442,449,459,434,0,443,442],
[454,426,437,449,451,402,448,0,442],
[467,430,433,431,457,419,449,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,430,421,434,454,455,425,436],
[452,0,447,454,422,447,452,433,411],
[461,444,0,453,431,453,438,452,441],
[470,437,438,0,458,451,447,427,446],
[457,469,460,433,0,438,430,448,460],
[437,444,438,440,453,0,427,445,442],
[436,439,453,444,461,464,0,451,447],
[466,458,439,464,443,446,440,0,451],
[455,480,450,445,431,449,444,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,453,442,471,450,466,434,461],
[441,0,461,453,490,471,473,458,467],
[438,430,0,446,467,453,449,431,459],
[449,438,445,0,467,450,454,430,446],
[420,401,424,424,0,432,422,426,421],
[441,420,438,441,459,0,451,413,444],
[425,418,442,437,469,440,0,425,442],
[457,433,460,461,465,478,466,0,450],
[430,424,432,445,470,447,449,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,470,442,487,465,467,441,435],
[426,0,479,418,420,430,453,449,434],
[421,412,0,421,452,430,439,435,426],
[449,473,470,0,472,450,494,432,449],
[404,471,439,419,0,440,446,410,434],
[426,461,461,441,451,0,474,431,439],
[424,438,452,397,445,417,0,396,400],
[450,442,456,459,481,460,495,0,435],
[456,457,465,442,457,452,491,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,576,361,435,408,432,507,384],
[459,0,510,385,532,456,506,534,455],
[315,381,0,288,383,310,410,436,361],
[530,506,603,0,553,525,506,553,430],
[456,359,508,338,0,361,506,532,430],
[483,435,581,366,530,0,555,482,431],
[459,385,481,385,385,336,0,410,431],
[384,357,455,338,359,409,481,0,382],
[507,436,530,461,461,460,460,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,479,467,442,470,469,440,472],
[432,0,449,445,427,465,467,450,460],
[412,442,0,430,416,419,440,425,419],
[424,446,461,0,458,454,451,466,448],
[449,464,475,433,0,454,449,472,430],
[421,426,472,437,437,0,447,463,426],
[422,424,451,440,442,444,0,441,450],
[451,441,466,425,419,428,450,0,436],
[419,431,472,443,461,465,441,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,429,412,411,433,449,411,435],
[435,0,438,414,433,408,446,415,433],
[462,453,0,444,439,443,457,440,434],
[479,477,447,0,447,451,452,440,461],
[480,458,452,444,0,453,447,441,439],
[458,483,448,440,438,0,476,452,458],
[442,445,434,439,444,415,0,417,409],
[480,476,451,451,450,439,474,0,444],
[456,458,457,430,452,433,482,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,495,454,413,446,468,516,419],
[384,0,495,406,448,450,442,516,435],
[396,396,0,364,383,443,453,368,371],
[437,485,527,0,507,470,479,479,456],
[478,443,508,384,0,516,516,466,422],
[445,441,448,421,375,0,492,463,473],
[423,449,438,412,375,399,0,515,387],
[375,375,523,412,425,428,376,0,388],
[472,456,520,435,469,418,504,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,474,577,533,496,421,464,491],
[453,0,494,529,465,504,445,488,496],
[417,397,0,491,421,466,435,436,491],
[314,362,400,0,428,333,417,455,369],
[358,426,470,463,0,430,451,446,462],
[395,387,425,558,461,0,435,410,439],
[470,446,456,474,440,456,0,482,489],
[427,403,455,436,445,481,409,0,442],
[400,395,400,522,429,452,402,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,462,420,436,431,433,451,448],
[461,0,470,457,448,439,465,468,467],
[429,421,0,440,424,430,451,443,447],
[471,434,451,0,447,462,469,476,472],
[455,443,467,444,0,440,448,474,478],
[460,452,461,429,451,0,467,476,465],
[458,426,440,422,443,424,0,454,456],
[440,423,448,415,417,415,437,0,442],
[443,424,444,419,413,426,435,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,431,453,438,485,437,418,438],
[463,0,450,425,450,474,440,425,461],
[460,441,0,445,447,491,461,453,444],
[438,466,446,0,450,477,447,475,447],
[453,441,444,441,0,477,430,451,437],
[406,417,400,414,414,0,405,441,406],
[454,451,430,444,461,486,0,456,446],
[473,466,438,416,440,450,435,0,451],
[453,430,447,444,454,485,445,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,431,443,420,449,461,445,448],
[469,0,440,448,448,479,447,461,447],
[460,451,0,457,462,463,445,463,457],
[448,443,434,0,431,477,453,450,443],
[471,443,429,460,0,445,455,471,444],
[442,412,428,414,446,0,476,454,438],
[430,444,446,438,436,415,0,457,437],
[446,430,428,441,420,437,434,0,432],
[443,444,434,448,447,453,454,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,448,411,439,440,442,438,433],
[465,0,453,424,431,446,441,441,423],
[443,438,0,424,458,450,459,428,417],
[480,467,467,0,446,470,436,449,448],
[452,460,433,445,0,458,447,442,428],
[451,445,441,421,433,0,439,430,439],
[449,450,432,455,444,452,0,439,426],
[453,450,463,442,449,461,452,0,448],
[458,468,474,443,463,452,465,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,447,454,451,432,421,471,434],
[478,0,437,479,453,454,460,459,422],
[444,454,0,493,445,446,458,448,445],
[437,412,398,0,462,439,413,446,408],
[440,438,446,429,0,421,423,447,445],
[459,437,445,452,470,0,430,446,418],
[470,431,433,478,468,461,0,472,429],
[420,432,443,445,444,445,419,0,451],
[457,469,446,483,446,473,462,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,457,457,453,439,466,451,453],
[448,0,461,482,442,442,462,469,457],
[434,430,0,451,427,428,433,443,436],
[434,409,440,0,424,409,421,430,417],
[438,449,464,467,0,440,460,458,446],
[452,449,463,482,451,0,459,473,444],
[425,429,458,470,431,432,0,458,445],
[440,422,448,461,433,418,433,0,442],
[438,434,455,474,445,447,446,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,468,469,455,474,477,474,432],
[421,0,396,421,430,421,453,423,424],
[423,495,0,452,494,463,473,454,448],
[422,470,439,0,435,428,495,457,419],
[436,461,397,456,0,436,453,421,420],
[417,470,428,463,455,0,480,447,425],
[414,438,418,396,438,411,0,405,423],
[417,468,437,434,470,444,486,0,445],
[459,467,443,472,471,466,468,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,454,424,435,434,432,409,433],
[437,0,432,441,453,456,433,442,449],
[437,459,0,440,441,446,420,428,459],
[467,450,451,0,464,469,440,438,461],
[456,438,450,427,0,434,430,408,431],
[457,435,445,422,457,0,429,431,458],
[459,458,471,451,461,462,0,446,436],
[482,449,463,453,483,460,445,0,469],
[458,442,432,430,460,433,455,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,432,449,457,436,476,417,417],
[464,0,426,440,474,447,467,423,418],
[459,465,0,432,482,473,435,446,425],
[442,451,459,0,445,454,480,446,443],
[434,417,409,446,0,466,459,424,444],
[455,444,418,437,425,0,432,419,419],
[415,424,456,411,432,459,0,418,417],
[474,468,445,445,467,472,473,0,448],
[474,473,466,448,447,472,474,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,469,535,504,503,449,465,460],
[453,0,415,560,498,445,531,451,417],
[422,476,0,542,521,504,551,467,437],
[356,331,349,0,357,456,425,387,385],
[387,393,370,534,0,427,429,395,363],
[388,446,387,435,464,0,549,479,419],
[442,360,340,466,462,342,0,424,401],
[426,440,424,504,496,412,467,0,473],
[431,474,454,506,528,472,490,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,467,444,441,452,468,436,437],
[419,0,447,430,434,442,430,432,449],
[424,444,0,456,419,445,467,419,436],
[447,461,435,0,412,444,468,435,429],
[450,457,472,479,0,469,472,439,443],
[439,449,446,447,422,0,439,424,427],
[423,461,424,423,419,452,0,439,445],
[455,459,472,456,452,467,452,0,443],
[454,442,455,462,448,464,446,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,456,422,412,424,448,449,458],
[436,0,436,448,433,401,447,442,454],
[435,455,0,389,394,384,402,442,426],
[469,443,502,0,443,450,442,469,456],
[479,458,497,448,0,444,427,469,479],
[467,490,507,441,447,0,447,466,463],
[443,444,489,449,464,444,0,466,470],
[442,449,449,422,422,425,425,0,462],
[433,437,465,435,412,428,421,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,505,443,500,451,490,449,475],
[439,0,502,452,471,468,483,455,472],
[386,389,0,456,447,433,429,419,460],
[448,439,435,0,472,452,452,416,472],
[391,420,444,419,0,391,432,429,438],
[440,423,458,439,500,0,451,413,455],
[401,408,462,439,459,440,0,433,442],
[442,436,472,475,462,478,458,0,473],
[416,419,431,419,453,436,449,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,446,423,432,458,394,386,416],
[452,0,440,450,445,473,466,452,437],
[445,451,0,422,421,444,456,442,463],
[468,441,469,0,413,487,496,436,458],
[459,446,470,478,0,500,482,449,430],
[433,418,447,404,391,0,445,422,436],
[497,425,435,395,409,446,0,401,428],
[505,439,449,455,442,469,490,0,476],
[475,454,428,433,461,455,463,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,406,435,455,459,469,435,459],
[422,0,383,399,420,400,410,412,409],
[485,508,0,455,485,492,487,444,455],
[456,492,436,0,505,475,476,457,465],
[436,471,406,386,0,448,435,438,426],
[432,491,399,416,443,0,440,442,445],
[422,481,404,415,456,451,0,431,467],
[456,479,447,434,453,449,460,0,455],
[432,482,436,426,465,446,424,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,441,481,464,440,426,469,441],
[428,0,411,447,431,453,444,435,457],
[450,480,0,452,465,463,468,442,457],
[410,444,439,0,474,446,449,417,435],
[427,460,426,417,0,453,423,417,427],
[451,438,428,445,438,0,455,432,446],
[465,447,423,442,468,436,0,437,446],
[422,456,449,474,474,459,454,0,447],
[450,434,434,456,464,445,445,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,437,463,459,447,436,427,464],
[416,0,426,457,440,434,409,424,429],
[454,465,0,470,447,455,458,437,463],
[428,434,421,0,449,434,430,435,440],
[432,451,444,442,0,430,410,434,417],
[444,457,436,457,461,0,431,438,451],
[455,482,433,461,481,460,0,463,461],
[464,467,454,456,457,453,428,0,454],
[427,462,428,451,474,440,430,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,489,421,539,446,469,399,514],
[467,0,492,513,466,397,465,491,466],
[402,399,0,473,520,379,493,471,471],
[470,378,418,0,424,331,517,425,446],
[352,425,371,467,0,398,518,420,512],
[445,494,512,560,493,0,516,493,468],
[422,426,398,374,373,375,0,448,470],
[492,400,420,466,471,398,443,0,490],
[377,425,420,445,379,423,421,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,447,432,471,509,487,496,481],
[409,0,406,404,422,421,422,371,496],
[444,485,0,459,489,500,466,443,505],
[459,487,432,0,475,455,477,436,481],
[420,469,402,416,0,445,459,397,479],
[382,470,391,436,446,0,413,430,482],
[404,469,425,414,432,478,0,441,448],
[395,520,448,455,494,461,450,0,493],
[410,395,386,410,412,409,443,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,448,441,462,437,440,430,455],
[442,0,429,449,446,430,441,438,450],
[443,462,0,464,466,443,456,444,446],
[450,442,427,0,461,448,430,455,460],
[429,445,425,430,0,420,409,420,447],
[454,461,448,443,471,0,444,446,469],
[451,450,435,461,482,447,0,440,464],
[461,453,447,436,471,445,451,0,461],
[436,441,445,431,444,422,427,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,445,422,442,422,436,434,441],
[463,0,462,450,436,463,454,444,453],
[446,429,0,419,436,431,436,444,425],
[469,441,472,0,453,455,460,457,452],
[449,455,455,438,0,440,448,472,443],
[469,428,460,436,451,0,450,466,431],
[455,437,455,431,443,441,0,447,450],
[457,447,447,434,419,425,444,0,431],
[450,438,466,439,448,460,441,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,460,370,392,402,460,396,410],
[390,0,477,379,415,374,477,366,449],
[431,414,0,347,328,366,417,369,371],
[521,512,544,0,450,449,484,428,474],
[499,476,563,441,0,436,539,457,508],
[489,517,525,442,455,0,469,434,428],
[431,414,474,407,352,422,0,373,363],
[495,525,522,463,434,457,518,0,490],
[481,442,520,417,383,463,528,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,450,431,443,410,449,446,425],
[444,0,459,426,456,401,424,411,449],
[441,432,0,432,412,399,413,414,443],
[460,465,459,0,452,425,464,441,451],
[448,435,479,439,0,446,467,433,453],
[481,490,492,466,445,0,461,456,462],
[442,467,478,427,424,430,0,412,435],
[445,480,477,450,458,435,479,0,474],
[466,442,448,440,438,429,456,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,446,448,420,448,468,439,467],
[452,0,431,441,427,429,464,425,447],
[445,460,0,465,439,460,444,429,467],
[443,450,426,0,440,437,470,454,468],
[471,464,452,451,0,449,478,427,461],
[443,462,431,454,442,0,450,447,461],
[423,427,447,421,413,441,0,411,431],
[452,466,462,437,464,444,480,0,437],
[424,444,424,423,430,430,460,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,454,480,432,452,407,489,427],
[445,0,497,468,412,484,417,449,493],
[437,394,0,460,445,451,479,448,460],
[411,423,431,0,425,446,422,494,424],
[459,479,446,466,0,481,434,502,404],
[439,407,440,445,410,0,415,496,438],
[484,474,412,469,457,476,0,502,447],
[402,442,443,397,389,395,389,0,416],
[464,398,431,467,487,453,444,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,434,420,405,395,397,433,451],
[467,0,457,455,447,433,423,430,457],
[457,434,0,432,399,439,407,474,439],
[471,436,459,0,404,417,418,462,459],
[486,444,492,487,0,442,451,479,490],
[496,458,452,474,449,0,445,482,465],
[494,468,484,473,440,446,0,474,468],
[458,461,417,429,412,409,417,0,440],
[440,434,452,432,401,426,423,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,441,455,454,436,463,445,449],
[433,0,446,466,445,456,464,448,453],
[450,445,0,447,439,442,461,470,449],
[436,425,444,0,424,432,446,432,441],
[437,446,452,467,0,452,473,437,434],
[455,435,449,459,439,0,453,457,455],
[428,427,430,445,418,438,0,421,432],
[446,443,421,459,454,434,470,0,430],
[442,438,442,450,457,436,459,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,456,322,370,387,401,457,381],
[460,0,474,410,420,404,404,487,334],
[435,417,0,330,417,391,426,394,369],
[569,481,561,0,464,460,516,569,438],
[521,471,474,427,0,419,483,485,361],
[504,487,500,431,472,0,500,500,450],
[490,487,465,375,408,391,0,408,387],
[434,404,497,322,406,391,483,0,397],
[510,557,522,453,530,441,504,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,476,476,435,441,488,467,450],
[438,0,499,455,468,485,450,471,440],
[415,392,0,444,426,446,455,443,416],
[415,436,447,0,413,439,472,439,455],
[456,423,465,478,0,467,470,450,438],
[450,406,445,452,424,0,475,466,450],
[403,441,436,419,421,416,0,418,421],
[424,420,448,452,441,425,473,0,435],
[441,451,475,436,453,441,470,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,446,438,452,445,441,466,439],
[419,0,424,419,425,417,423,427,435],
[445,467,0,438,430,437,454,440,434],
[453,472,453,0,467,430,419,466,463],
[439,466,461,424,0,440,444,447,445],
[446,474,454,461,451,0,445,447,444],
[450,468,437,472,447,446,0,435,437],
[425,464,451,425,444,444,456,0,441],
[452,456,457,428,446,447,454,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,471,461,411,419,466,428,465],
[468,0,457,453,445,412,470,459,458],
[420,434,0,458,417,415,478,450,449],
[430,438,433,0,408,389,452,411,441],
[480,446,474,483,0,450,434,443,457],
[472,479,476,502,441,0,458,460,455],
[425,421,413,439,457,433,0,408,457],
[463,432,441,480,448,431,483,0,448],
[426,433,442,450,434,436,434,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,459,437,435,438,444,453,444],
[470,0,467,462,454,444,472,458,458],
[432,424,0,436,439,432,430,439,428],
[454,429,455,0,448,422,459,455,446],
[456,437,452,443,0,426,480,477,442],
[453,447,459,469,465,0,448,438,451],
[447,419,461,432,411,443,0,435,433],
[438,433,452,436,414,453,456,0,442],
[447,433,463,445,449,440,458,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,430,459,458,414,446,425,433],
[452,0,411,441,473,473,452,430,460],
[461,480,0,447,468,454,495,450,445],
[432,450,444,0,462,425,399,442,426],
[433,418,423,429,0,421,452,426,438],
[477,418,437,466,470,0,452,428,406],
[445,439,396,492,439,439,0,426,412],
[466,461,441,449,465,463,465,0,448],
[458,431,446,465,453,485,479,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,430,461,415,443,444,442,446],
[455,0,442,461,442,445,453,476,454],
[461,449,0,470,427,467,460,461,453],
[430,430,421,0,427,417,444,453,432],
[476,449,464,464,0,442,452,480,470],
[448,446,424,474,449,0,423,447,447],
[447,438,431,447,439,468,0,448,455],
[449,415,430,438,411,444,443,0,425],
[445,437,438,459,421,444,436,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,472,466,454,446,452,473,444],
[441,0,456,464,455,454,444,463,453],
[419,435,0,434,430,430,437,435,440],
[425,427,457,0,433,424,450,450,453],
[437,436,461,458,0,433,448,445,449],
[445,437,461,467,458,0,476,456,451],
[439,447,454,441,443,415,0,462,437],
[418,428,456,441,446,435,429,0,441],
[447,438,451,438,442,440,454,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,454,463,429,407,457,420,450],
[476,0,460,455,480,452,451,424,462],
[437,431,0,416,434,433,460,397,421],
[428,436,475,0,445,423,441,412,457],
[462,411,457,446,0,397,424,397,451],
[484,439,458,468,494,0,459,451,466],
[434,440,431,450,467,432,0,417,456],
[471,467,494,479,494,440,474,0,477],
[441,429,470,434,440,425,435,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,450,467,446,464,433,440,442],
[454,0,470,453,431,497,446,422,423],
[441,421,0,441,448,495,423,415,431],
[424,438,450,0,438,477,429,441,422],
[445,460,443,453,0,495,447,449,452],
[427,394,396,414,396,0,394,397,411],
[458,445,468,462,444,497,0,426,438],
[451,469,476,450,442,494,465,0,452],
[449,468,460,469,439,480,453,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,503,493,472,444,453,452,439],
[410,0,476,460,457,411,408,371,409],
[388,415,0,428,446,421,415,442,394],
[398,431,463,0,442,414,443,467,403],
[419,434,445,449,0,433,424,399,414],
[447,480,470,477,458,0,458,415,454],
[438,483,476,448,467,433,0,441,445],
[439,520,449,424,492,476,450,0,444],
[452,482,497,488,477,437,446,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,447,461,450,439,441,446,422],
[434,0,438,431,460,435,451,402,445],
[444,453,0,461,425,434,455,428,458],
[430,460,430,0,447,439,446,427,445],
[441,431,466,444,0,450,449,462,432],
[452,456,457,452,441,0,429,463,440],
[450,440,436,445,442,462,0,446,415],
[445,489,463,464,429,428,445,0,434],
[469,446,433,446,459,451,476,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,412,441,427,412,387,449,435],
[465,0,450,439,432,441,403,433,452],
[479,441,0,476,514,502,457,429,461],
[450,452,415,0,433,379,381,454,432],
[464,459,377,458,0,420,457,438,417],
[479,450,389,512,471,0,402,443,440],
[504,488,434,510,434,489,0,476,497],
[442,458,462,437,453,448,415,0,451],
[456,439,430,459,474,451,394,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,469,454,416,452,448,492,460],
[440,0,465,464,474,463,432,488,472],
[422,426,0,429,440,439,440,490,434],
[437,427,462,0,413,446,432,455,480],
[475,417,451,478,0,470,480,520,476],
[439,428,452,445,421,0,429,475,461],
[443,459,451,459,411,462,0,446,462],
[399,403,401,436,371,416,445,0,420],
[431,419,457,411,415,430,429,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,466,443,454,431,446,458,443],
[436,0,451,443,450,433,449,448,430],
[425,440,0,438,442,429,438,428,432],
[448,448,453,0,476,454,447,428,455],
[437,441,449,415,0,453,431,448,432],
[460,458,462,437,438,0,437,455,459],
[445,442,453,444,460,454,0,465,446],
[433,443,463,463,443,436,426,0,450],
[448,461,459,436,459,432,445,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,485,474,438,487,431,467,439],
[428,0,438,466,435,492,455,398,445],
[406,453,0,461,437,440,430,399,480],
[417,425,430,0,410,427,438,409,439],
[453,456,454,481,0,457,439,442,457],
[404,399,451,464,434,0,393,414,402],
[460,436,461,453,452,498,0,450,456],
[424,493,492,482,449,477,441,0,476],
[452,446,411,452,434,489,435,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,366,426,401,419,409,407,429],
[472,0,429,487,434,425,441,446,485],
[525,462,0,476,445,463,459,473,447],
[465,404,415,0,464,458,433,440,453],
[490,457,446,427,0,478,415,434,483],
[472,466,428,433,413,0,436,436,449],
[482,450,432,458,476,455,0,451,429],
[484,445,418,451,457,455,440,0,401],
[462,406,444,438,408,442,462,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,449,444,424,451,449,434,419],
[452,0,452,474,428,471,440,447,464],
[442,439,0,473,435,466,464,463,413],
[447,417,418,0,432,452,438,452,423],
[467,463,456,459,0,471,456,466,437],
[440,420,425,439,420,0,459,463,437],
[442,451,427,453,435,432,0,463,393],
[457,444,428,439,425,428,428,0,386],
[472,427,478,468,454,454,498,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,435,400,400,469,518,442,390],
[463,0,447,430,459,479,483,456,407],
[456,444,0,425,434,449,504,440,416],
[491,461,466,0,466,499,504,465,411],
[491,432,457,425,0,507,510,492,452],
[422,412,442,392,384,0,473,407,395],
[373,408,387,387,381,418,0,379,383],
[449,435,451,426,399,484,512,0,380],
[501,484,475,480,439,496,508,511,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,443,444,482,434,440,429,441],
[434,0,442,456,451,421,432,448,414],
[448,449,0,448,487,431,434,443,427],
[447,435,443,0,469,406,436,407,422],
[409,440,404,422,0,386,399,410,428],
[457,470,460,485,505,0,459,450,444],
[451,459,457,455,492,432,0,434,443],
[462,443,448,484,481,441,457,0,472],
[450,477,464,469,463,447,448,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,440,440,454,465,460,450,455],
[443,0,450,428,451,469,427,422,426],
[451,441,0,445,459,465,475,453,445],
[451,463,446,0,470,457,482,443,459],
[437,440,432,421,0,427,424,418,443],
[426,422,426,434,464,0,451,435,416],
[431,464,416,409,467,440,0,437,438],
[441,469,438,448,473,456,454,0,478],
[436,465,446,432,448,475,453,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,417,437,469,434,436,459,463],
[475,0,439,432,442,466,471,454,493],
[474,452,0,447,504,423,447,463,492],
[454,459,444,0,505,467,497,491,476],
[422,449,387,386,0,428,398,418,415],
[457,425,468,424,463,0,418,424,468],
[455,420,444,394,493,473,0,451,462],
[432,437,428,400,473,467,440,0,472],
[428,398,399,415,476,423,429,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,431,476,476,457,440,469,456],
[442,0,432,476,462,453,428,458,456],
[460,459,0,485,455,438,454,498,462],
[415,415,406,0,441,450,413,448,443],
[415,429,436,450,0,439,424,471,459],
[434,438,453,441,452,0,431,454,436],
[451,463,437,478,467,460,0,473,452],
[422,433,393,443,420,437,418,0,412],
[435,435,429,448,432,455,439,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,451,431,413,449,430,434,490],
[451,0,433,433,421,435,422,447,477],
[440,458,0,427,420,446,433,423,471],
[460,458,464,0,427,451,453,456,465],
[478,470,471,464,0,445,447,455,480],
[442,456,445,440,446,0,439,429,461],
[461,469,458,438,444,452,0,438,475],
[457,444,468,435,436,462,453,0,477],
[401,414,420,426,411,430,416,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,454,448,426,429,511,392,476],
[431,0,472,418,432,423,458,412,455],
[437,419,0,443,430,451,522,377,410],
[443,473,448,0,417,459,460,403,448],
[465,459,461,474,0,445,456,429,440],
[462,468,440,432,446,0,449,424,488],
[380,433,369,431,435,442,0,376,442],
[499,479,514,488,462,467,515,0,437],
[415,436,481,443,451,403,449,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,411,428,422,390,475,402,406],
[443,0,427,398,377,430,468,420,413],
[480,464,0,438,418,461,477,432,453],
[463,493,453,0,450,445,530,457,452],
[469,514,473,441,0,451,487,496,490],
[501,461,430,446,440,0,478,455,464],
[416,423,414,361,404,413,0,380,406],
[489,471,459,434,395,436,511,0,446],
[485,478,438,439,401,427,485,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,437,424,454,450,426,432,390],
[487,0,497,443,474,489,470,481,452],
[454,394,0,413,421,441,433,399,386],
[467,448,478,0,496,474,439,456,410],
[437,417,470,395,0,463,404,390,401],
[441,402,450,417,428,0,434,399,382],
[465,421,458,452,487,457,0,451,423],
[459,410,492,435,501,492,440,0,442],
[501,439,505,481,490,509,468,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,419,415,437,443,428,443,456],
[490,0,439,456,484,455,459,452,494],
[472,452,0,444,467,478,466,478,468],
[476,435,447,0,470,470,454,457,482],
[454,407,424,421,0,444,422,441,459],
[448,436,413,421,447,0,412,444,455],
[463,432,425,437,469,479,0,438,474],
[448,439,413,434,450,447,453,0,485],
[435,397,423,409,432,436,417,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,454,446,460,443,449,484,467],
[439,0,455,433,444,428,456,465,451],
[437,436,0,439,431,469,448,482,458],
[445,458,452,0,457,450,471,472,467],
[431,447,460,434,0,456,466,486,432],
[448,463,422,441,435,0,433,446,447],
[442,435,443,420,425,458,0,452,436],
[407,426,409,419,405,445,439,0,421],
[424,440,433,424,459,444,455,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,455,426,421,417,416,440,436],
[435,0,448,403,382,425,428,429,405],
[436,443,0,427,398,448,408,405,397],
[465,488,464,0,456,461,445,458,449],
[470,509,493,435,0,476,463,453,463],
[474,466,443,430,415,0,434,454,422],
[475,463,483,446,428,457,0,443,447],
[451,462,486,433,438,437,448,0,463],
[455,486,494,442,428,469,444,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,446,457,438,419,451,443,442],
[439,0,431,441,447,423,432,433,440],
[445,460,0,453,462,442,443,455,447],
[434,450,438,0,437,452,435,455,443],
[453,444,429,454,0,428,426,451,434],
[472,468,449,439,463,0,445,443,452],
[440,459,448,456,465,446,0,435,456],
[448,458,436,436,440,448,456,0,454],
[449,451,444,448,457,439,435,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,399,459,453,433,445,440,431],
[447,0,431,452,452,444,445,437,431],
[492,460,0,442,474,459,493,481,435],
[432,439,449,0,419,425,440,433,432],
[438,439,417,472,0,423,440,446,421],
[458,447,432,466,468,0,489,434,451],
[446,446,398,451,451,402,0,436,416],
[451,454,410,458,445,457,455,0,404],
[460,460,456,459,470,440,475,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,456,415,424,431,448,427,438],
[457,0,433,431,441,455,475,448,446],
[435,458,0,429,430,437,422,421,455],
[476,460,462,0,435,472,451,442,438],
[467,450,461,456,0,471,449,442,492],
[460,436,454,419,420,0,463,415,436],
[443,416,469,440,442,428,0,425,436],
[464,443,470,449,449,476,466,0,454],
[453,445,436,453,399,455,455,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,463,453,441,415,453,416,443],
[399,0,426,418,446,450,422,457,473],
[428,465,0,429,440,439,429,453,444],
[438,473,462,0,438,459,473,455,499],
[450,445,451,453,0,461,490,474,499],
[476,441,452,432,430,0,481,445,452],
[438,469,462,418,401,410,0,416,424],
[475,434,438,436,417,446,475,0,440],
[448,418,447,392,392,439,467,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,449,443,456,455,476,433,458],
[439,0,460,473,455,447,467,447,437],
[442,431,0,443,449,425,452,448,452],
[448,418,448,0,487,447,446,435,451],
[435,436,442,404,0,444,443,428,444],
[436,444,466,444,447,0,445,440,455],
[415,424,439,445,448,446,0,428,452],
[458,444,443,456,463,451,463,0,471],
[433,454,439,440,447,436,439,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,434,430,410,489,432,415,398],
[477,0,491,466,427,502,428,513,494],
[457,400,0,431,399,465,464,431,457],
[461,425,460,0,463,484,476,414,508],
[481,464,492,428,0,504,479,458,483],
[402,389,426,407,387,0,433,416,425],
[459,463,427,415,412,458,0,431,454],
[476,378,460,477,433,475,460,0,481],
[493,397,434,383,408,466,437,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,403,449,444,420,466,468,421],
[474,0,438,417,441,445,475,471,467],
[488,453,0,486,463,430,473,502,438],
[442,474,405,0,452,428,496,477,417],
[447,450,428,439,0,462,492,485,428],
[471,446,461,463,429,0,499,518,453],
[425,416,418,395,399,392,0,458,406],
[423,420,389,414,406,373,433,0,440],
[470,424,453,474,463,438,485,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,449,450,444,447,473,411,457],
[461,0,447,463,481,447,468,436,452],
[442,444,0,468,459,446,459,412,440],
[441,428,423,0,461,453,466,450,443],
[447,410,432,430,0,421,445,428,430],
[444,444,445,438,470,0,456,442,461],
[418,423,432,425,446,435,0,410,434],
[480,455,479,441,463,449,481,0,458],
[434,439,451,448,461,430,457,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,449,411,433,433,449,422,409],
[419,0,425,400,422,425,417,407,416],
[442,466,0,407,429,440,431,389,389],
[480,491,484,0,439,455,461,450,436],
[458,469,462,452,0,441,469,408,432],
[458,466,451,436,450,0,452,403,407],
[442,474,460,430,422,439,0,415,422],
[469,484,502,441,483,488,476,0,460],
[482,475,502,455,459,484,469,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,387,439,431,406,447,434,405],
[491,0,433,476,472,436,478,484,456],
[504,458,0,453,477,456,478,452,439],
[452,415,438,0,434,425,464,453,430],
[460,419,414,457,0,429,470,434,451],
[485,455,435,466,462,0,496,484,450],
[444,413,413,427,421,395,0,424,413],
[457,407,439,438,457,407,467,0,415],
[486,435,452,461,440,441,478,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,446,448,432,425,446,445,465],
[450,0,433,462,454,444,470,465,440],
[445,458,0,479,459,459,437,474,445],
[443,429,412,0,433,431,451,451,443],
[459,437,432,458,0,417,441,465,431],
[466,447,432,460,474,0,456,470,466],
[445,421,454,440,450,435,0,472,445],
[446,426,417,440,426,421,419,0,427],
[426,451,446,448,460,425,446,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,509,498,431,447,439,471,425,460],
[382,0,404,337,438,386,419,375,401],
[393,487,0,419,473,465,433,415,463],
[460,554,472,0,512,469,455,430,453],
[444,453,418,379,0,444,418,367,399],
[452,505,426,422,447,0,392,426,436],
[420,472,458,436,473,499,0,447,416],
[466,516,476,461,524,465,444,0,460],
[431,490,428,438,492,455,475,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,405,445,505,460,485,481,466],
[474,0,447,429,489,475,488,493,448],
[486,444,0,436,493,473,485,488,436],
[446,462,455,0,494,471,481,465,441],
[386,402,398,397,0,409,433,450,401],
[431,416,418,420,482,0,476,461,463],
[406,403,406,410,458,415,0,458,407],
[410,398,403,426,441,430,433,0,431],
[425,443,455,450,490,428,484,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,459,439,456,439,464,439,456],
[443,0,431,458,471,472,455,437,441],
[432,460,0,443,469,439,441,430,429],
[452,433,448,0,467,458,452,452,447],
[435,420,422,424,0,446,453,414,415],
[452,419,452,433,445,0,444,430,435],
[427,436,450,439,438,447,0,449,423],
[452,454,461,439,477,461,442,0,439],
[435,450,462,444,476,456,468,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,474,441,446,452,454,468,459],
[449,0,452,471,454,460,457,456,444],
[417,439,0,476,437,440,445,452,454],
[450,420,415,0,427,414,439,416,456],
[445,437,454,464,0,440,455,457,461],
[439,431,451,477,451,0,473,452,496],
[437,434,446,452,436,418,0,430,439],
[423,435,439,475,434,439,461,0,450],
[432,447,437,435,430,395,452,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,436,450,467,454,468,452,435],
[429,0,438,445,464,417,448,454,451],
[455,453,0,454,454,446,450,433,438],
[441,446,437,0,467,431,441,429,427],
[424,427,437,424,0,409,422,436,408],
[437,474,445,460,482,0,441,448,439],
[423,443,441,450,469,450,0,427,433],
[439,437,458,462,455,443,464,0,432],
[456,440,453,464,483,452,458,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,475,470,389,420,456,431,402],
[502,0,441,493,467,501,468,476,517],
[416,450,0,458,381,462,447,473,481],
[421,398,433,0,412,435,415,443,491],
[502,424,510,479,0,463,472,503,463],
[471,390,429,456,428,0,415,497,442],
[435,423,444,476,419,476,0,451,443],
[460,415,418,448,388,394,440,0,466],
[489,374,410,400,428,449,448,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,457,456,439,457,453,455,443],
[455,0,450,446,472,425,442,452,433],
[434,441,0,451,452,431,437,454,447],
[435,445,440,0,448,440,439,460,441],
[452,419,439,443,0,427,454,445,442],
[434,466,460,451,464,0,445,446,439],
[438,449,454,452,437,446,0,449,446],
[436,439,437,431,446,445,442,0,434],
[448,458,444,450,449,452,445,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,449,441,414,439,474,437,427],
[459,0,460,442,407,472,469,455,423],
[442,431,0,444,428,476,475,433,427],
[450,449,447,0,427,462,464,436,449],
[477,484,463,464,0,466,469,433,432],
[452,419,415,429,425,0,455,427,414],
[417,422,416,427,422,436,0,433,414],
[454,436,458,455,458,464,458,0,441],
[464,468,464,442,459,477,477,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,439,438,422,422,433,453,425],
[473,0,445,442,457,447,438,435,443],
[452,446,0,440,432,426,444,438,438],
[453,449,451,0,436,457,469,427,440],
[469,434,459,455,0,449,463,441,447],
[469,444,465,434,442,0,443,434,455],
[458,453,447,422,428,448,0,424,433],
[438,456,453,464,450,457,467,0,448],
[466,448,453,451,444,436,458,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,400,360,431,448,390,397,389],
[478,0,451,468,495,526,444,480,432],
[491,440,0,480,508,461,497,475,467],
[531,423,411,0,501,535,415,475,441],
[460,396,383,390,0,451,352,443,398],
[443,365,430,356,440,0,418,386,394],
[501,447,394,476,539,473,0,484,443],
[494,411,416,416,448,505,407,0,424],
[502,459,424,450,493,497,448,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,455,443,443,433,435,479,456],
[440,0,444,452,449,438,442,453,441],
[436,447,0,424,455,435,444,429,428],
[448,439,467,0,443,437,444,448,435],
[448,442,436,448,0,441,438,437,427],
[458,453,456,454,450,0,459,461,427],
[456,449,447,447,453,432,0,461,450],
[412,438,462,443,454,430,430,0,443],
[435,450,463,456,464,464,441,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,451,435,469,433,429,465,451],
[464,0,454,436,473,452,438,457,457],
[440,437,0,440,427,443,438,466,445],
[456,455,451,0,470,435,454,461,471],
[422,418,464,421,0,440,424,472,451],
[458,439,448,456,451,0,430,458,470],
[462,453,453,437,467,461,0,461,454],
[426,434,425,430,419,433,430,0,432],
[440,434,446,420,440,421,437,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,447,442,455,446,471,451,458],
[456,0,442,463,462,464,453,453,476],
[444,449,0,462,450,456,449,447,455],
[449,428,429,0,434,430,449,429,438],
[436,429,441,457,0,430,439,454,433],
[445,427,435,461,461,0,445,448,449],
[420,438,442,442,452,446,0,446,451],
[440,438,444,462,437,443,445,0,456],
[433,415,436,453,458,442,440,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,446,443,471,446,445,464,452],
[446,0,441,457,476,464,455,466,485],
[445,450,0,436,471,456,425,455,455],
[448,434,455,0,477,452,442,481,464],
[420,415,420,414,0,424,404,429,419],
[445,427,435,439,467,0,454,458,467],
[446,436,466,449,487,437,0,453,454],
[427,425,436,410,462,433,438,0,451],
[439,406,436,427,472,424,437,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,474,473,446,435,446,442,442],
[428,0,436,445,458,452,440,433,471],
[417,455,0,453,452,434,441,415,461],
[418,446,438,0,438,428,425,439,435],
[445,433,439,453,0,440,425,433,426],
[456,439,457,463,451,0,431,437,464],
[445,451,450,466,466,460,0,459,470],
[449,458,476,452,458,454,432,0,460],
[449,420,430,456,465,427,421,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,482,456,466,447,467,499,475],
[449,0,438,465,439,428,437,444,459],
[409,453,0,455,467,463,473,495,436],
[435,426,436,0,467,447,502,453,435],
[425,452,424,424,0,422,431,449,415],
[444,463,428,444,469,0,484,472,451],
[424,454,418,389,460,407,0,477,419],
[392,447,396,438,442,419,414,0,414],
[416,432,455,456,476,440,472,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,437,424,420,443,441,457,468],
[443,0,442,442,419,440,431,440,449],
[454,449,0,429,424,437,459,439,447],
[467,449,462,0,425,441,440,449,453],
[471,472,467,466,0,447,457,470,441],
[448,451,454,450,444,0,442,456,445],
[450,460,432,451,434,449,0,461,463],
[434,451,452,442,421,435,430,0,441],
[423,442,444,438,450,446,428,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,461,452,467,443,444,459,450],
[433,0,444,480,452,464,437,467,451],
[430,447,0,472,445,431,444,455,447],
[439,411,419,0,436,424,436,435,424],
[424,439,446,455,0,426,424,464,436],
[448,427,460,467,465,0,443,452,437],
[447,454,447,455,467,448,0,477,445],
[432,424,436,456,427,439,414,0,420],
[441,440,444,467,455,454,446,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,462,450,448,424,454,469,444],
[414,0,427,434,434,452,458,460,406],
[429,464,0,432,472,421,467,471,417],
[441,457,459,0,463,429,463,475,449],
[443,457,419,428,0,401,437,440,413],
[467,439,470,462,490,0,491,466,438],
[437,433,424,428,454,400,0,420,409],
[422,431,420,416,451,425,471,0,430],
[447,485,474,442,478,453,482,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,437,464,431,446,432,453,452],
[470,0,463,441,446,459,438,447,472],
[454,428,0,447,418,410,410,438,436],
[427,450,444,0,415,430,437,440,461],
[460,445,473,476,0,449,420,461,464],
[445,432,481,461,442,0,449,459,463],
[459,453,481,454,471,442,0,461,490],
[438,444,453,451,430,432,430,0,420],
[439,419,455,430,427,428,401,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,461,444,441,455,434,434,428],
[438,0,441,449,446,423,441,403,428],
[430,450,0,444,460,445,456,437,450],
[447,442,447,0,434,419,427,418,428],
[450,445,431,457,0,419,444,432,427],
[436,468,446,472,472,0,481,426,460],
[457,450,435,464,447,410,0,446,451],
[457,488,454,473,459,465,445,0,457],
[463,463,441,463,464,431,440,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,456,447,437,456,449,449,428],
[418,0,405,403,436,419,424,417,417],
[435,486,0,454,426,451,450,454,465],
[444,488,437,0,436,466,449,435,449],
[454,455,465,455,0,457,433,438,453],
[435,472,440,425,434,0,455,410,436],
[442,467,441,442,458,436,0,433,451],
[442,474,437,456,453,481,458,0,439],
[463,474,426,442,438,455,440,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,440,467,453,439,436,433,431],
[446,0,449,455,474,439,444,443,454],
[451,442,0,477,474,435,446,433,465],
[424,436,414,0,438,411,435,431,425],
[438,417,417,453,0,426,453,418,388],
[452,452,456,480,465,0,426,436,434],
[455,447,445,456,438,465,0,427,430],
[458,448,458,460,473,455,464,0,435],
[460,437,426,466,503,457,461,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,505,454,421,461,382,503,435,488],
[386,0,393,417,380,358,456,414,414],
[437,498,0,406,474,473,471,456,487],
[470,474,485,0,433,429,503,457,487],
[430,511,417,458,0,388,463,450,483],
[509,533,418,462,503,0,488,485,508],
[388,435,420,388,428,403,0,404,414],
[456,477,435,434,441,406,487,0,467],
[403,477,404,404,408,383,477,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,453,450,456,443,477,477,426],
[413,0,421,470,437,459,452,499,447],
[438,470,0,445,455,460,442,471,453],
[441,421,446,0,420,450,473,479,465],
[435,454,436,471,0,481,457,469,471],
[448,432,431,441,410,0,483,471,409],
[414,439,449,418,434,408,0,475,420],
[414,392,420,412,422,420,416,0,427],
[465,444,438,426,420,482,471,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,427,425,424,418,438,432,461],
[462,0,429,429,432,435,451,414,447],
[464,462,0,440,420,429,444,438,467],
[466,462,451,0,442,442,464,450,487],
[467,459,471,449,0,439,458,435,473],
[473,456,462,449,452,0,443,463,459],
[453,440,447,427,433,448,0,426,448],
[459,477,453,441,456,428,465,0,461],
[430,444,424,404,418,432,443,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,400,403,401,500,398,403,348],
[643,0,519,428,503,597,498,524,569],
[491,372,0,470,395,489,468,473,492],
[488,463,421,0,491,567,518,565,515],
[490,388,496,400,0,541,543,446,564],
[391,294,402,324,350,0,393,397,322],
[493,393,423,373,348,498,0,471,419],
[488,367,418,326,445,494,420,0,616],
[543,322,399,376,327,569,472,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,450,444,445,443,456,442,449],
[459,0,429,415,453,441,455,437,461],
[441,462,0,443,446,443,440,421,447],
[447,476,448,0,456,449,424,439,464],
[446,438,445,435,0,438,447,455,462],
[448,450,448,442,453,0,446,440,446],
[435,436,451,467,444,445,0,444,455],
[449,454,470,452,436,451,447,0,466],
[442,430,444,427,429,445,436,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,443,443,439,477,481,460,458],
[449,0,429,461,450,474,491,445,473],
[448,462,0,445,433,473,488,467,484],
[448,430,446,0,438,458,478,430,464],
[452,441,458,453,0,471,470,422,463],
[414,417,418,433,420,0,430,432,429],
[410,400,403,413,421,461,0,419,435],
[431,446,424,461,469,459,472,0,451],
[433,418,407,427,428,462,456,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,501,445,429,497,492,456,462],
[417,0,443,443,423,451,416,403,455],
[390,448,0,419,444,436,447,431,441],
[446,448,472,0,459,441,436,420,450],
[462,468,447,432,0,472,430,439,429],
[394,440,455,450,419,0,419,392,441],
[399,475,444,455,461,472,0,410,447],
[435,488,460,471,452,499,481,0,466],
[429,436,450,441,462,450,444,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,428,422,446,447,460,420,442],
[472,0,410,425,431,469,477,441,466],
[463,481,0,458,477,452,445,445,466],
[469,466,433,0,431,462,494,408,441],
[445,460,414,460,0,457,465,442,469],
[444,422,439,429,434,0,487,420,445],
[431,414,446,397,426,404,0,421,429],
[471,450,446,483,449,471,470,0,441],
[449,425,425,450,422,446,462,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,470,447,446,468,449,467,452],
[447,0,437,460,446,444,446,455,450],
[421,454,0,446,433,441,463,444,442],
[444,431,445,0,429,440,436,433,445],
[445,445,458,462,0,458,441,463,426],
[423,447,450,451,433,0,443,470,455],
[442,445,428,455,450,448,0,469,439],
[424,436,447,458,428,421,422,0,432],
[439,441,449,446,465,436,452,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,509,435,393,478,427,356,419],
[455,0,445,467,356,481,434,390,395],
[382,446,0,443,335,441,370,365,404],
[456,424,448,0,414,443,435,419,441],
[498,535,556,477,0,527,496,438,474],
[413,410,450,448,364,0,387,360,371],
[464,457,521,456,395,504,0,414,454],
[535,501,526,472,453,531,477,0,442],
[472,496,487,450,417,520,437,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,443,432,438,447,443,420,437],
[449,0,456,431,438,442,445,448,432],
[448,435,0,429,446,458,446,440,432],
[459,460,462,0,461,469,472,465,437],
[453,453,445,430,0,453,454,449,461],
[444,449,433,422,438,0,429,411,429],
[448,446,445,419,437,462,0,438,430],
[471,443,451,426,442,480,453,0,458],
[454,459,459,454,430,462,461,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,434,456,406,408,392,405,405],
[452,0,445,451,440,454,474,450,420],
[457,446,0,432,400,436,414,413,414],
[435,440,459,0,408,439,420,420,457],
[485,451,491,483,0,466,454,461,423],
[483,437,455,452,425,0,463,445,418],
[499,417,477,471,437,428,0,432,441],
[486,441,478,471,430,446,459,0,418],
[486,471,477,434,468,473,450,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,473,468,446,467,445,515,464],
[445,0,467,459,438,453,447,477,461],
[418,424,0,426,451,431,442,468,448],
[423,432,465,0,411,453,439,467,461],
[445,453,440,480,0,466,451,464,464],
[424,438,460,438,425,0,427,463,448],
[446,444,449,452,440,464,0,463,463],
[376,414,423,424,427,428,428,0,414],
[427,430,443,430,427,443,428,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,424,429,443,439,445,461,456],
[429,0,423,414,441,442,448,427,428],
[467,468,0,476,463,472,477,470,436],
[462,477,415,0,451,438,457,495,436],
[448,450,428,440,0,439,442,437,430],
[452,449,419,453,452,0,465,461,459],
[446,443,414,434,449,426,0,465,440],
[430,464,421,396,454,430,426,0,424],
[435,463,455,455,461,432,451,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,448,443,450,421,432,465,442],
[463,0,452,452,479,423,455,462,464],
[443,439,0,429,426,398,412,439,438],
[448,439,462,0,447,436,455,460,440],
[441,412,465,444,0,439,437,444,435],
[470,468,493,455,452,0,422,470,457],
[459,436,479,436,454,469,0,474,461],
[426,429,452,431,447,421,417,0,460],
[449,427,453,451,456,434,430,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,409,448,341,309,339,378,384],
[486,0,481,489,505,392,413,433,504],
[482,410,0,481,459,369,414,360,427],
[443,402,410,0,476,453,412,419,417],
[550,386,432,415,0,429,395,400,477],
[582,499,522,438,462,0,494,472,467],
[552,478,477,479,496,397,0,470,461],
[513,458,531,472,491,419,421,0,463],
[507,387,464,474,414,424,430,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,465,443,465,427,448,461,450],
[447,0,452,445,464,434,437,449,418],
[426,439,0,428,446,414,410,444,431],
[448,446,463,0,485,442,449,468,455],
[426,427,445,406,0,419,442,429,428],
[464,457,477,449,472,0,460,437,441],
[443,454,481,442,449,431,0,407,440],
[430,442,447,423,462,454,484,0,450],
[441,473,460,436,463,450,451,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,432,446,440,427,429,426,494],
[438,0,436,473,444,433,435,445,479],
[459,455,0,463,481,434,441,433,504],
[445,418,428,0,421,433,445,471,482],
[451,447,410,470,0,476,423,408,451],
[464,458,457,458,415,0,457,436,465],
[462,456,450,446,468,434,0,422,496],
[465,446,458,420,483,455,469,0,520],
[397,412,387,409,440,426,395,371,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,462,433,451,453,471,465,443],
[441,0,489,446,489,458,492,473,457],
[429,402,0,404,454,448,450,408,445],
[458,445,487,0,494,485,461,456,452],
[440,402,437,397,0,413,483,424,404],
[438,433,443,406,478,0,449,420,440],
[420,399,441,430,408,442,0,399,421],
[426,418,483,435,467,471,492,0,447],
[448,434,446,439,487,451,470,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,493,386,486,461,478,475,473],
[453,0,453,415,441,455,437,455,469],
[398,438,0,408,450,399,455,452,412],
[505,476,483,0,490,426,498,452,473],
[405,450,441,401,0,417,422,421,465],
[430,436,492,465,474,0,477,467,491],
[413,454,436,393,469,414,0,448,438],
[416,436,439,439,470,424,443,0,443],
[418,422,479,418,426,400,453,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,448,453,465,446,482,444,485],
[421,0,437,442,437,436,449,457,430],
[443,454,0,468,478,438,475,483,464],
[438,449,423,0,447,417,446,462,443],
[426,454,413,444,0,431,458,449,475],
[445,455,453,474,460,0,468,487,472],
[409,442,416,445,433,423,0,439,432],
[447,434,408,429,442,404,452,0,435],
[406,461,427,448,416,419,459,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,454,425,429,459,422,416,446],
[403,0,435,426,418,445,443,434,459],
[437,456,0,459,433,440,435,447,462],
[466,465,432,0,452,464,465,440,455],
[462,473,458,439,0,469,454,434,486],
[432,446,451,427,422,0,474,413,448],
[469,448,456,426,437,417,0,448,452],
[475,457,444,451,457,478,443,0,477],
[445,432,429,436,405,443,439,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,484,466,447,451,490,440,474],
[450,0,442,465,449,438,474,447,449],
[407,449,0,438,431,424,457,438,458],
[425,426,453,0,448,405,454,408,467],
[444,442,460,443,0,427,471,440,457],
[440,453,467,486,464,0,485,458,479],
[401,417,434,437,420,406,0,388,425],
[451,444,453,483,451,433,503,0,461],
[417,442,433,424,434,412,466,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,417,444,436,441,445,471,444],
[455,0,428,441,437,460,466,481,443],
[474,463,0,453,461,454,457,478,436],
[447,450,438,0,444,449,454,481,452],
[455,454,430,447,0,443,434,472,441],
[450,431,437,442,448,0,442,467,449],
[446,425,434,437,457,449,0,465,454],
[420,410,413,410,419,424,426,0,431],
[447,448,455,439,450,442,437,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,449,455,459,443,442,434,426],
[441,0,427,436,458,450,447,435,423],
[442,464,0,460,447,461,460,454,463],
[436,455,431,0,480,442,474,441,460],
[432,433,444,411,0,421,449,418,428],
[448,441,430,449,470,0,471,446,438],
[449,444,431,417,442,420,0,408,418],
[457,456,437,450,473,445,483,0,462],
[465,468,428,431,463,453,473,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,477,451,437,444,484,448,465],
[471,0,456,433,467,467,478,453,452],
[414,435,0,445,446,449,449,422,458],
[440,458,446,0,476,465,474,422,441],
[454,424,445,415,0,433,454,438,456],
[447,424,442,426,458,0,467,444,468],
[407,413,442,417,437,424,0,428,463],
[443,438,469,469,453,447,463,0,468],
[426,439,433,450,435,423,428,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,466,473,456,436,481,431,447],
[451,0,455,451,458,448,470,421,446],
[425,436,0,431,429,419,427,427,416],
[418,440,460,0,433,417,451,421,428],
[435,433,462,458,0,401,446,432,438],
[455,443,472,474,490,0,483,464,457],
[410,421,464,440,445,408,0,430,435],
[460,470,464,470,459,427,461,0,461],
[444,445,475,463,453,434,456,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,442,477,465,447,456,467,456],
[446,0,433,473,464,465,454,459,444],
[449,458,0,474,433,479,457,476,475],
[414,418,417,0,427,426,430,452,414],
[426,427,458,464,0,439,467,462,433],
[444,426,412,465,452,0,466,464,438],
[435,437,434,461,424,425,0,464,410],
[424,432,415,439,429,427,427,0,404],
[435,447,416,477,458,453,481,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,442,421,436,376,429,439,457],
[483,0,440,439,426,451,446,443,461],
[449,451,0,454,467,418,471,441,462],
[470,452,437,0,439,434,473,440,474],
[455,465,424,452,0,425,464,445,486],
[515,440,473,457,466,0,485,467,493],
[462,445,420,418,427,406,0,419,449],
[452,448,450,451,446,424,472,0,476],
[434,430,429,417,405,398,442,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,480,411,422,427,392,414,365],
[433,0,449,409,432,459,423,461,448],
[411,442,0,420,476,384,431,411,418],
[480,482,471,0,463,469,458,410,487],
[469,459,415,428,0,431,443,468,455],
[464,432,507,422,460,0,429,440,428],
[499,468,460,433,448,462,0,408,446],
[477,430,480,481,423,451,483,0,448],
[526,443,473,404,436,463,445,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,401,485,491,465,498,504,491],
[419,0,384,430,401,430,405,433,487],
[490,507,0,445,455,477,511,454,521],
[406,461,446,0,472,453,446,410,516],
[400,490,436,419,0,430,478,435,468],
[426,461,414,438,461,0,476,481,539],
[393,486,380,445,413,415,0,448,490],
[387,458,437,481,456,410,443,0,490],
[400,404,370,375,423,352,401,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,433,430,426,432,441,391,411],
[474,0,443,444,434,446,463,425,440],
[458,448,0,441,418,465,437,406,391],
[461,447,450,0,436,435,437,411,435],
[465,457,473,455,0,446,454,453,433],
[459,445,426,456,445,0,437,407,427],
[450,428,454,454,437,454,0,422,405],
[500,466,485,480,438,484,469,0,471],
[480,451,500,456,458,464,486,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,593,394,496,501,368,491,330,198],
[298,0,263,496,499,400,427,361,465],
[497,628,0,595,534,367,560,498,369],
[395,395,296,0,463,331,524,392,333],
[390,392,357,428,0,296,425,325,196],
[523,491,524,560,595,0,557,495,428],
[400,464,331,367,466,334,0,333,367],
[561,530,393,499,566,396,558,0,431],
[693,426,522,558,695,463,524,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,454,456,471,448,440,463,456],
[405,0,438,421,432,419,409,406,399],
[437,453,0,455,441,411,426,404,436],
[435,470,436,0,426,407,408,420,440],
[420,459,450,465,0,451,420,427,420],
[443,472,480,484,440,0,419,466,439],
[451,482,465,483,471,472,0,445,452],
[428,485,487,471,464,425,446,0,441],
[435,492,455,451,471,452,439,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,444,465,446,457,452,448,458],
[445,0,428,459,453,451,469,479,442],
[447,463,0,451,440,437,450,465,442],
[426,432,440,0,465,415,467,439,447],
[445,438,451,426,0,422,454,426,430],
[434,440,454,476,469,0,478,462,455],
[439,422,441,424,437,413,0,441,437],
[443,412,426,452,465,429,450,0,440],
[433,449,449,444,461,436,454,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,410,481,447,423,427,479,400],
[471,0,454,492,522,443,443,493,459],
[481,437,0,483,434,455,411,481,419],
[410,399,408,0,474,375,415,453,396],
[444,369,457,417,0,404,404,419,403],
[468,448,436,516,487,0,428,451,452],
[464,448,480,476,487,463,0,511,408],
[412,398,410,438,472,440,380,0,355],
[491,432,472,495,488,439,483,536,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,458,412,453,435,460,442,455],
[436,0,429,409,414,417,433,431,458],
[433,462,0,446,442,427,463,438,465],
[479,482,445,0,458,459,480,461,480],
[438,477,449,433,0,442,477,447,473],
[456,474,464,432,449,0,467,435,463],
[431,458,428,411,414,424,0,439,446],
[449,460,453,430,444,456,452,0,465],
[436,433,426,411,418,428,445,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,462,431,468,429,441,437,452],
[422,0,414,429,445,438,426,428,442],
[429,477,0,465,468,456,438,457,436],
[460,462,426,0,439,450,448,441,453],
[423,446,423,452,0,428,442,435,434],
[462,453,435,441,463,0,466,425,436],
[450,465,453,443,449,425,0,442,422],
[454,463,434,450,456,466,449,0,460],
[439,449,455,438,457,455,469,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,431,442,454,420,444,434,442],
[430,0,410,424,404,398,441,421,416],
[460,481,0,455,439,431,443,443,441],
[449,467,436,0,430,439,456,471,446],
[437,487,452,461,0,447,455,467,458],
[471,493,460,452,444,0,465,470,444],
[447,450,448,435,436,426,0,465,449],
[457,470,448,420,424,421,426,0,444],
[449,475,450,445,433,447,442,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,417,423,454,494,467,465,446],
[448,0,394,406,389,452,378,411,399],
[474,497,0,401,398,517,417,437,415],
[468,485,490,0,461,541,459,440,484],
[437,502,493,430,0,554,460,468,467],
[397,439,374,350,337,0,383,358,341],
[424,513,474,432,431,508,0,454,459],
[426,480,454,451,423,533,437,0,402],
[445,492,476,407,424,550,432,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,392,461,382,425,433,457,414,444],
[499,0,462,433,460,440,489,430,469],
[430,429,0,431,471,435,501,440,455],
[509,458,460,0,510,438,477,436,449],
[466,431,420,381,0,422,451,424,399],
[458,451,456,453,469,0,456,438,434],
[434,402,390,414,440,435,0,385,406],
[477,461,451,455,467,453,506,0,437],
[447,422,436,442,492,457,485,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,498,398,456,451,465,443,447],
[416,0,507,358,436,455,463,456,436],
[393,384,0,355,424,414,434,356,406],
[493,533,536,0,467,509,478,426,477],
[435,455,467,424,0,454,479,434,495],
[440,436,477,382,437,0,441,389,442],
[426,428,457,413,412,450,0,435,455],
[448,435,535,465,457,502,456,0,453],
[444,455,485,414,396,449,436,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,375,466,477,375,461,413,494,462],
[516,0,470,525,479,497,550,527,431],
[425,421,0,407,385,368,449,476,489],
[414,366,484,0,400,398,352,416,396],
[516,412,506,491,0,365,448,477,517],
[430,394,523,493,526,0,448,451,499],
[478,341,442,539,443,443,0,507,504],
[397,364,415,475,414,440,384,0,462],
[429,460,402,495,374,392,387,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,380,569,444,446,509,378,505,442],
[511,0,636,510,571,764,511,443,506],
[322,255,0,445,574,572,319,381,317],
[447,381,446,0,508,571,381,445,443],
[445,320,317,383,0,510,319,379,318],
[382,127,319,320,381,0,256,251,318],
[513,380,572,510,572,635,0,507,634],
[386,448,510,446,512,640,384,0,382],
[449,385,574,448,573,573,257,509,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,471,459,461,426,467,429,458],
[436,0,448,450,442,436,423,460,436],
[420,443,0,439,435,433,436,434,423],
[432,441,452,0,458,446,440,434,427],
[430,449,456,433,0,449,464,426,433],
[465,455,458,445,442,0,455,428,433],
[424,468,455,451,427,436,0,426,436],
[462,431,457,457,465,463,465,0,442],
[433,455,468,464,458,458,455,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,456,403,458,486,465,470,500],
[463,0,494,436,450,475,462,465,483],
[435,397,0,418,388,435,448,487,417],
[488,455,473,0,486,491,438,532,469],
[433,441,503,405,0,452,414,435,468],
[405,416,456,400,439,0,383,415,464],
[426,429,443,453,477,508,0,471,491],
[421,426,404,359,456,476,420,0,486],
[391,408,474,422,423,427,400,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,431,438,473,431,469,419,452],
[439,0,408,401,434,401,455,386,449],
[460,483,0,434,504,451,447,413,468],
[453,490,457,0,442,445,486,459,472],
[418,457,387,449,0,437,440,440,441],
[460,490,440,446,454,0,487,431,487],
[422,436,444,405,451,404,0,407,446],
[472,505,478,432,451,460,484,0,474],
[439,442,423,419,450,404,445,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,454,491,468,445,465,443,452],
[404,0,453,468,469,435,450,446,449],
[437,438,0,468,448,440,467,458,433],
[400,423,423,0,406,442,426,415,409],
[423,422,443,485,0,433,447,456,418],
[446,456,451,449,458,0,452,483,433],
[426,441,424,465,444,439,0,439,424],
[448,445,433,476,435,408,452,0,442],
[439,442,458,482,473,458,467,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,445,447,470,428,454,468,458],
[444,0,452,439,432,455,429,484,425],
[446,439,0,471,445,436,437,474,457],
[444,452,420,0,466,469,461,500,441],
[421,459,446,425,0,413,435,458,452],
[463,436,455,422,478,0,454,481,452],
[437,462,454,430,456,437,0,462,442],
[423,407,417,391,433,410,429,0,446],
[433,466,434,450,439,439,449,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,443,492,437,470,472,458,453],
[436,0,399,482,438,446,422,428,437],
[448,492,0,456,447,453,461,465,428],
[399,409,435,0,427,410,392,436,397],
[454,453,444,464,0,442,475,449,432],
[421,445,438,481,449,0,445,472,432],
[419,469,430,499,416,446,0,446,414],
[433,463,426,455,442,419,445,0,421],
[438,454,463,494,459,459,477,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,475,450,453,476,471,476,443],
[446,0,462,427,441,490,447,468,439],
[416,429,0,428,440,457,464,440,432],
[441,464,463,0,443,473,483,469,447],
[438,450,451,448,0,458,456,464,432],
[415,401,434,418,433,0,446,429,434],
[420,444,427,408,435,445,0,447,429],
[415,423,451,422,427,462,444,0,429],
[448,452,459,444,459,457,462,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,424,444,431,409,448,479,453],
[474,0,430,432,437,435,446,472,459],
[467,461,0,448,472,444,470,456,452],
[447,459,443,0,440,449,458,473,446],
[460,454,419,451,0,434,446,466,445],
[482,456,447,442,457,0,449,463,449],
[443,445,421,433,445,442,0,478,459],
[412,419,435,418,425,428,413,0,448],
[438,432,439,445,446,442,432,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,466,476,435,468,461,478,457],
[389,0,426,425,452,410,427,421,400],
[425,465,0,482,452,431,438,446,439],
[415,466,409,0,435,425,433,447,423],
[456,439,439,456,0,457,437,455,450],
[423,481,460,466,434,0,435,452,428],
[430,464,453,458,454,456,0,456,453],
[413,470,445,444,436,439,435,0,416],
[434,491,452,468,441,463,438,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,418,457,444,445,472,416,445],
[463,0,444,472,480,439,473,449,473],
[473,447,0,473,456,433,434,405,447],
[434,419,418,0,440,414,464,392,441],
[447,411,435,451,0,427,439,409,428],
[446,452,458,477,464,0,470,441,459],
[419,418,457,427,452,421,0,440,441],
[475,442,486,499,482,450,451,0,477],
[446,418,444,450,463,432,450,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,434,469,502,469,441,465,448],
[421,0,436,435,414,429,410,423,395],
[457,455,0,474,486,440,439,442,422],
[422,456,417,0,434,427,445,421,420],
[389,477,405,457,0,451,459,443,377],
[422,462,451,464,440,0,451,460,411],
[450,481,452,446,432,440,0,461,407],
[426,468,449,470,448,431,430,0,432],
[443,496,469,471,514,480,484,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,458,435,473,454,452,454,444],
[421,0,432,426,445,441,434,448,440],
[433,459,0,447,456,446,439,469,451],
[456,465,444,0,455,455,445,467,443],
[418,446,435,436,0,433,440,446,438],
[437,450,445,436,458,0,441,461,437],
[439,457,452,446,451,450,0,464,445],
[437,443,422,424,445,430,427,0,445],
[447,451,440,448,453,454,446,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,466,443,447,459,460,472,495],
[419,0,432,423,436,465,447,450,453],
[425,459,0,457,432,467,461,456,473],
[448,468,434,0,450,470,451,432,479],
[444,455,459,441,0,459,449,450,482],
[432,426,424,421,432,0,433,450,464],
[431,444,430,440,442,458,0,428,458],
[419,441,435,459,441,441,463,0,439],
[396,438,418,412,409,427,433,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,411,430,433,442,423,433,420],
[456,0,418,431,420,448,438,425,426],
[480,473,0,444,466,459,436,450,441],
[461,460,447,0,440,457,445,432,451],
[458,471,425,451,0,467,436,435,450],
[449,443,432,434,424,0,436,409,445],
[468,453,455,446,455,455,0,437,453],
[458,466,441,459,456,482,454,0,464],
[471,465,450,440,441,446,438,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,457,405,461,469,415,424,453],
[444,0,488,454,501,501,503,472,481],
[434,403,0,428,441,516,460,449,431],
[486,437,463,0,411,530,469,497,458],
[430,390,450,480,0,473,430,372,400],
[422,390,375,361,418,0,411,410,439],
[476,388,431,422,461,480,0,476,425],
[467,419,442,394,519,481,415,0,442],
[438,410,460,433,491,452,466,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,439,433,456,419,406,453,411],
[458,0,445,464,470,457,414,476,446],
[452,446,0,451,458,401,437,464,413],
[458,427,440,0,472,428,433,442,427],
[435,421,433,419,0,400,399,424,402],
[472,434,490,463,491,0,430,485,446],
[485,477,454,458,492,461,0,476,423],
[438,415,427,449,467,406,415,0,386],
[480,445,478,464,489,445,468,505,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,442,467,436,453,449,429,429],
[474,0,465,459,463,445,458,435,447],
[449,426,0,447,417,426,422,433,460],
[424,432,444,0,425,439,426,441,435],
[455,428,474,466,0,444,440,457,444],
[438,446,465,452,447,0,443,441,465],
[442,433,469,465,451,448,0,444,428],
[462,456,458,450,434,450,447,0,442],
[462,444,431,456,447,426,463,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,457,433,459,448,450,434,444],
[443,0,484,458,462,456,457,452,442],
[434,407,0,437,441,432,425,434,428],
[458,433,454,0,463,463,457,448,437],
[432,429,450,428,0,436,435,437,434],
[443,435,459,428,455,0,428,431,426],
[441,434,466,434,456,463,0,434,438],
[457,439,457,443,454,460,457,0,454],
[447,449,463,454,457,465,453,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,408,450,413,423,418,429,400],
[478,0,428,448,443,449,434,430,443],
[483,463,0,464,468,453,453,433,431],
[441,443,427,0,438,428,444,436,422],
[478,448,423,453,0,432,423,456,441],
[468,442,438,463,459,0,446,423,431],
[473,457,438,447,468,445,0,454,445],
[462,461,458,455,435,468,437,0,455],
[491,448,460,469,450,460,446,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,442,477,447,444,432,452,431],
[437,0,436,456,437,437,421,441,433],
[449,455,0,476,456,444,428,424,442],
[414,435,415,0,430,399,402,427,411],
[444,454,435,461,0,433,437,452,441],
[447,454,447,492,458,0,439,426,455],
[459,470,463,489,454,452,0,459,443],
[439,450,467,464,439,465,432,0,418],
[460,458,449,480,450,436,448,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,509,514,513,486,420,464,490],
[436,0,457,494,440,457,451,437,459],
[382,434,0,475,465,446,429,423,465],
[377,397,416,0,422,402,393,391,414],
[378,451,426,469,0,428,460,451,467],
[405,434,445,489,463,0,463,457,469],
[471,440,462,498,431,428,0,458,489],
[427,454,468,500,440,434,433,0,452],
[401,432,426,477,424,422,402,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,338,392,460,415,399,430,431],
[431,0,453,410,468,412,509,427,466],
[553,438,0,484,461,443,445,499,548],
[499,481,407,0,430,428,472,478,502],
[431,423,430,461,0,450,470,494,496],
[476,479,448,463,441,0,446,487,490],
[492,382,446,419,421,445,0,497,468],
[461,464,392,413,397,404,394,0,439],
[460,425,343,389,395,401,423,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,455,432,438,461,426,429,459],
[437,0,437,432,407,455,447,443,450],
[436,454,0,424,438,476,474,424,449],
[459,459,467,0,446,482,459,434,453],
[453,484,453,445,0,473,454,447,441],
[430,436,415,409,418,0,431,422,402],
[465,444,417,432,437,460,0,444,436],
[462,448,467,457,444,469,447,0,474],
[432,441,442,438,450,489,455,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,429,436,438,411,439,420,460],
[465,0,457,461,438,426,446,442,461],
[462,434,0,453,462,428,452,416,445],
[455,430,438,0,430,423,420,424,431],
[453,453,429,461,0,410,425,430,442],
[480,465,463,468,481,0,438,465,450],
[452,445,439,471,466,453,0,459,457],
[471,449,475,467,461,426,432,0,446],
[431,430,446,460,449,441,434,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,459,489,496,446,480,439,453],
[440,0,447,443,456,438,435,453,449],
[432,444,0,462,456,474,459,476,463],
[402,448,429,0,441,445,436,441,414],
[395,435,435,450,0,422,439,433,439],
[445,453,417,446,469,0,445,427,458],
[411,456,432,455,452,446,0,455,460],
[452,438,415,450,458,464,436,0,437],
[438,442,428,477,452,433,431,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,425,468,456,443,433,442,426],
[446,0,425,475,439,467,459,454,467],
[466,466,0,467,446,472,464,444,432],
[423,416,424,0,442,473,460,428,445],
[435,452,445,449,0,452,472,444,446],
[448,424,419,418,439,0,426,448,432],
[458,432,427,431,419,465,0,442,427],
[449,437,447,463,447,443,449,0,444],
[465,424,459,446,445,459,464,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,431,405,470,429,446,458,430],
[481,0,449,429,472,412,449,477,459],
[460,442,0,424,452,447,444,453,454],
[486,462,467,0,482,453,439,441,429],
[421,419,439,409,0,415,464,433,450],
[462,479,444,438,476,0,448,476,465],
[445,442,447,452,427,443,0,429,449],
[433,414,438,450,458,415,462,0,449],
[461,432,437,462,441,426,442,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,442,453,456,441,454,431,427],
[449,0,484,421,456,483,456,463,457],
[449,407,0,444,408,436,425,430,416],
[438,470,447,0,448,476,475,433,457],
[435,435,483,443,0,478,448,452,458],
[450,408,455,415,413,0,402,449,427],
[437,435,466,416,443,489,0,419,424],
[460,428,461,458,439,442,472,0,418],
[464,434,475,434,433,464,467,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,432,423,430,451,461,434,434],
[463,0,470,456,422,473,460,430,426],
[459,421,0,416,438,452,463,453,440],
[468,435,475,0,457,463,471,435,447],
[461,469,453,434,0,467,472,450,454],
[440,418,439,428,424,0,435,443,432],
[430,431,428,420,419,456,0,423,407],
[457,461,438,456,441,448,468,0,429],
[457,465,451,444,437,459,484,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,460,430,443,462,480,452,456],
[411,0,413,394,405,409,435,392,462],
[431,478,0,409,428,396,465,444,454],
[461,497,482,0,443,421,466,488,437],
[448,486,463,448,0,428,483,467,471],
[429,482,495,470,463,0,485,487,477],
[411,456,426,425,408,406,0,418,419],
[439,499,447,403,424,404,473,0,442],
[435,429,437,454,420,414,472,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,473,468,430,463,477,456,485],
[435,0,454,445,414,444,486,424,456],
[418,437,0,423,413,457,444,431,453],
[423,446,468,0,437,441,464,441,468],
[461,477,478,454,0,469,450,439,468],
[428,447,434,450,422,0,431,426,441],
[414,405,447,427,441,460,0,438,451],
[435,467,460,450,452,465,453,0,475],
[406,435,438,423,423,450,440,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,471,373,398,419,447,439,397],
[478,0,407,390,461,452,444,444,426],
[420,484,0,427,406,404,450,440,448],
[518,501,464,0,461,516,498,518,443],
[493,430,485,430,0,498,465,404,444],
[472,439,487,375,393,0,460,447,456],
[444,447,441,393,426,431,0,440,460],
[452,447,451,373,487,444,451,0,396],
[494,465,443,448,447,435,431,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,467,455,420,451,450,513,406],
[492,0,442,445,469,454,495,459,417],
[424,449,0,427,464,423,457,448,422],
[436,446,464,0,476,408,477,483,428],
[471,422,427,415,0,404,424,425,389],
[440,437,468,483,487,0,494,484,466],
[441,396,434,414,467,397,0,458,434],
[378,432,443,408,466,407,433,0,398],
[485,474,469,463,502,425,457,493,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,446,462,460,433,472,431,447],
[433,0,423,449,450,461,463,432,447],
[445,468,0,479,461,439,454,448,443],
[429,442,412,0,446,421,415,454,418],
[431,441,430,445,0,410,413,437,459],
[458,430,452,470,481,0,460,443,452],
[419,428,437,476,478,431,0,430,446],
[460,459,443,437,454,448,461,0,471],
[444,444,448,473,432,439,445,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,440,453,437,437,456,423,475],
[435,0,423,430,448,439,451,440,468],
[451,468,0,427,452,422,437,440,449],
[438,461,464,0,479,436,451,456,470],
[454,443,439,412,0,417,438,413,472],
[454,452,469,455,474,0,451,445,466],
[435,440,454,440,453,440,0,444,473],
[468,451,451,435,478,446,447,0,483],
[416,423,442,421,419,425,418,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,452,467,436,474,466,425,456],
[424,0,439,429,441,486,467,456,438],
[439,452,0,424,433,482,450,438,397],
[424,462,467,0,431,442,428,432,395],
[455,450,458,460,0,464,455,422,410],
[417,405,409,449,427,0,443,420,405],
[425,424,441,463,436,448,0,423,409],
[466,435,453,459,469,471,468,0,449],
[435,453,494,496,481,486,482,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,454,462,458,444,472,444,471],
[465,0,472,445,468,465,470,448,481],
[437,419,0,434,426,411,436,382,465],
[429,446,457,0,437,474,485,454,458],
[433,423,465,454,0,433,480,435,504],
[447,426,480,417,458,0,466,419,465],
[419,421,455,406,411,425,0,404,462],
[447,443,509,437,456,472,487,0,505],
[420,410,426,433,387,426,429,386,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,417,442,450,442,424,439,464],
[442,0,441,459,462,439,447,453,453],
[474,450,0,456,451,445,454,462,469],
[449,432,435,0,454,457,462,423,454],
[441,429,440,437,0,438,447,428,456],
[449,452,446,434,453,0,437,457,464],
[467,444,437,429,444,454,0,445,462],
[452,438,429,468,463,434,446,0,456],
[427,438,422,437,435,427,429,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,426,489,488,449,519,447,454],
[474,0,486,498,477,527,439,439,447],
[465,405,0,485,457,501,435,428,453],
[402,393,406,0,439,429,347,404,384],
[403,414,434,452,0,435,406,399,433],
[442,364,390,462,456,0,405,374,429],
[372,452,456,544,485,486,0,462,439],
[444,452,463,487,492,517,429,0,467],
[437,444,438,507,458,462,452,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,445,423,435,465,417,451,448],
[465,0,450,432,452,465,447,450,468],
[446,441,0,446,446,474,444,441,464],
[468,459,445,0,438,495,436,456,462],
[456,439,445,453,0,478,431,444,466],
[426,426,417,396,413,0,415,423,428],
[474,444,447,455,460,476,0,448,470],
[440,441,450,435,447,468,443,0,456],
[443,423,427,429,425,463,421,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,420,439,437,448,429,428,433],
[432,0,443,440,443,435,456,431,443],
[471,448,0,454,430,439,461,423,457],
[452,451,437,0,427,402,457,435,464],
[454,448,461,464,0,429,441,458,443],
[443,456,452,489,462,0,479,451,466],
[462,435,430,434,450,412,0,422,449],
[463,460,468,456,433,440,469,0,451],
[458,448,434,427,448,425,442,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,454,474,453,444,478,445,480],
[418,0,449,436,426,410,448,425,432],
[437,442,0,429,404,404,430,421,445],
[417,455,462,0,413,434,471,448,453],
[438,465,487,478,0,467,488,457,488],
[447,481,487,457,424,0,462,458,463],
[413,443,461,420,403,429,0,425,452],
[446,466,470,443,434,433,466,0,460],
[411,459,446,438,403,428,439,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,479,459,490,439,450,448,471],
[421,0,462,465,445,447,444,413,425],
[412,429,0,437,425,414,425,438,435],
[432,426,454,0,432,437,437,412,452],
[401,446,466,459,0,451,447,434,427],
[452,444,477,454,440,0,461,440,453],
[441,447,466,454,444,430,0,455,491],
[443,478,453,479,457,451,436,0,460],
[420,466,456,439,464,438,400,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,428,466,454,452,466,436,458],
[399,0,425,432,415,416,449,434,434],
[463,466,0,468,478,443,466,455,447],
[425,459,423,0,423,444,455,406,463],
[437,476,413,468,0,457,481,448,469],
[439,475,448,447,434,0,486,432,472],
[425,442,425,436,410,405,0,402,430],
[455,457,436,485,443,459,489,0,456],
[433,457,444,428,422,419,461,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,456,478,468,453,475,465,455],
[451,0,459,471,461,476,461,465,439],
[435,432,0,467,429,449,465,440,422],
[413,420,424,0,439,430,465,418,420],
[423,430,462,452,0,449,454,457,451],
[438,415,442,461,442,0,444,443,435],
[416,430,426,426,437,447,0,432,423],
[426,426,451,473,434,448,459,0,433],
[436,452,469,471,440,456,468,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,475,478,449,459,415,463,420],
[395,0,442,436,376,432,423,407,402],
[416,449,0,436,414,421,415,451,408],
[413,455,455,0,373,452,438,411,427],
[442,515,477,518,0,470,511,526,468],
[432,459,470,439,421,0,439,442,424],
[476,468,476,453,380,452,0,431,456],
[428,484,440,480,365,449,460,0,429],
[471,489,483,464,423,467,435,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,428,412,439,425,422,443,421],
[466,0,444,426,443,442,439,452,445],
[463,447,0,431,455,442,437,445,434],
[479,465,460,0,479,453,428,462,455],
[452,448,436,412,0,433,432,442,432],
[466,449,449,438,458,0,470,463,457],
[469,452,454,463,459,421,0,477,439],
[448,439,446,429,449,428,414,0,434],
[470,446,457,436,459,434,452,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,438,415,419,424,409,436,436],
[464,0,479,436,455,460,438,460,479],
[453,412,0,422,406,449,420,436,431],
[476,455,469,0,465,454,449,441,457],
[472,436,485,426,0,452,440,443,459],
[467,431,442,437,439,0,431,442,443],
[482,453,471,442,451,460,0,484,471],
[455,431,455,450,448,449,407,0,447],
[455,412,460,434,432,448,420,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,427,468,410,415,457,428,462],
[418,0,433,401,439,408,469,430,446],
[464,458,0,432,448,412,451,445,469],
[423,490,459,0,447,445,455,469,448],
[481,452,443,444,0,428,419,407,384],
[476,483,479,446,463,0,464,412,454],
[434,422,440,436,472,427,0,404,430],
[463,461,446,422,484,479,487,0,451],
[429,445,422,443,507,437,461,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,453,440,457,470,459,435,459],
[445,0,426,443,462,437,447,446,476],
[438,465,0,469,456,448,446,493,490],
[451,448,422,0,462,462,458,461,470],
[434,429,435,429,0,445,459,445,474],
[421,454,443,429,446,0,454,431,468],
[432,444,445,433,432,437,0,464,486],
[456,445,398,430,446,460,427,0,425],
[432,415,401,421,417,423,405,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,462,449,447,469,458,456,445],
[466,0,476,463,437,465,472,465,449],
[429,415,0,449,419,437,440,448,438],
[442,428,442,0,403,476,442,427,426],
[444,454,472,488,0,478,472,492,474],
[422,426,454,415,413,0,461,419,434],
[433,419,451,449,419,430,0,426,431],
[435,426,443,464,399,472,465,0,435],
[446,442,453,465,417,457,460,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,450,447,441,436,437,460,460],
[443,0,443,398,411,451,411,407,424],
[441,448,0,429,446,441,425,460,436],
[444,493,462,0,429,447,472,453,450],
[450,480,445,462,0,427,439,464,445],
[455,440,450,444,464,0,442,448,446],
[454,480,466,419,452,449,0,464,450],
[431,484,431,438,427,443,427,0,447],
[431,467,455,441,446,445,441,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,440,412,456,448,436,479,437],
[472,0,450,416,453,418,428,451,445],
[451,441,0,428,460,442,431,465,426],
[479,475,463,0,485,437,459,454,452],
[435,438,431,406,0,401,418,451,427],
[443,473,449,454,490,0,463,475,440],
[455,463,460,432,473,428,0,458,457],
[412,440,426,437,440,416,433,0,429],
[454,446,465,439,464,451,434,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,414,410,410,439,410,451,389],
[443,0,432,413,399,414,416,463,415],
[477,459,0,431,418,433,426,452,443],
[481,478,460,0,424,455,434,473,475],
[481,492,473,467,0,454,437,459,478],
[452,477,458,436,437,0,437,466,427],
[481,475,465,457,454,454,0,472,441],
[440,428,439,418,432,425,419,0,448],
[502,476,448,416,413,464,450,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,298,344,343,344,246,293,343],
[449,0,346,296,296,345,449,397,442],
[593,545,0,446,444,496,596,593,544],
[547,595,445,0,542,496,594,544,445],
[548,595,447,349,0,494,547,444,494],
[547,546,395,395,397,0,498,447,493],
[645,442,295,297,344,393,0,293,542],
[598,494,298,347,447,444,598,0,493],
[548,449,347,446,397,398,349,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,437,447,443,470,447,466,472],
[456,0,417,430,443,468,457,464,467],
[454,474,0,466,446,454,441,468,498],
[444,461,425,0,437,492,435,455,466],
[448,448,445,454,0,475,453,458,491],
[421,423,437,399,416,0,427,419,439],
[444,434,450,456,438,464,0,473,455],
[425,427,423,436,433,472,418,0,489],
[419,424,393,425,400,452,436,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,474,468,447,464,455,470,471],
[464,0,469,478,469,424,464,489,477],
[417,422,0,463,417,421,459,442,468],
[423,413,428,0,436,403,438,438,478],
[444,422,474,455,0,426,432,471,429],
[427,467,470,488,465,0,447,436,464],
[436,427,432,453,459,444,0,447,434],
[421,402,449,453,420,455,444,0,436],
[420,414,423,413,462,427,457,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,429,413,432,444,435,423,447],
[411,0,414,421,425,426,426,430,429],
[462,477,0,443,448,455,458,446,443],
[478,470,448,0,458,474,438,410,460],
[459,466,443,433,0,466,449,437,472],
[447,465,436,417,425,0,425,418,449],
[456,465,433,453,442,466,0,437,443],
[468,461,445,481,454,473,454,0,462],
[444,462,448,431,419,442,448,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,459,438,450,445,453,476,475],
[417,0,436,441,414,414,423,446,425],
[432,455,0,448,430,437,436,473,436],
[453,450,443,0,425,447,428,425,459],
[441,477,461,466,0,449,435,472,459],
[446,477,454,444,442,0,452,452,451],
[438,468,455,463,456,439,0,465,482],
[415,445,418,466,419,439,426,0,422],
[416,466,455,432,432,440,409,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,453,423,460,425,436,434,457],
[450,0,448,421,468,434,439,423,441],
[438,443,0,429,461,434,457,447,460],
[468,470,462,0,478,465,456,444,484],
[431,423,430,413,0,445,447,419,432],
[466,457,457,426,446,0,447,442,460],
[455,452,434,435,444,444,0,445,449],
[457,468,444,447,472,449,446,0,464],
[434,450,431,407,459,431,442,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,449,450,464,448,478,445,467],
[426,0,431,429,453,448,462,445,444],
[442,460,0,447,457,454,484,452,453],
[441,462,444,0,453,470,465,420,456],
[427,438,434,438,0,437,463,423,450],
[443,443,437,421,454,0,467,462,448],
[413,429,407,426,428,424,0,418,425],
[446,446,439,471,468,429,473,0,445],
[424,447,438,435,441,443,466,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,410,448,458,432,489,483,452],
[457,0,420,409,435,451,475,493,422],
[481,471,0,436,490,485,530,505,485],
[443,482,455,0,469,448,489,489,433],
[433,456,401,422,0,445,498,478,428],
[459,440,406,443,446,0,459,445,422],
[402,416,361,402,393,432,0,466,405],
[408,398,386,402,413,446,425,0,403],
[439,469,406,458,463,469,486,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,472,446,444,453,448,459,461],
[444,0,457,439,443,432,461,425,448],
[419,434,0,422,419,413,439,430,430],
[445,452,469,0,425,442,456,431,473],
[447,448,472,466,0,439,482,436,447],
[438,459,478,449,452,0,454,446,476],
[443,430,452,435,409,437,0,422,451],
[432,466,461,460,455,445,469,0,485],
[430,443,461,418,444,415,440,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,444,452,446,423,431,464,452],
[484,0,437,452,461,432,454,460,470],
[447,454,0,434,439,431,429,478,454],
[439,439,457,0,479,435,442,438,459],
[445,430,452,412,0,427,416,450,465],
[468,459,460,456,464,0,439,466,484],
[460,437,462,449,475,452,0,448,460],
[427,431,413,453,441,425,443,0,454],
[439,421,437,432,426,407,431,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,444,470,429,428,442,465,433],
[456,0,454,478,465,442,434,454,463],
[447,437,0,471,480,453,440,442,451],
[421,413,420,0,430,409,409,424,431],
[462,426,411,461,0,431,447,438,437],
[463,449,438,482,460,0,465,462,448],
[449,457,451,482,444,426,0,425,420],
[426,437,449,467,453,429,466,0,434],
[458,428,440,460,454,443,471,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,461,432,444,443,449,439,439],
[445,0,427,425,464,446,459,431,438],
[430,464,0,443,437,461,440,437,438],
[459,466,448,0,457,455,470,447,441],
[447,427,454,434,0,443,459,429,432],
[448,445,430,436,448,0,437,418,425],
[442,432,451,421,432,454,0,414,414],
[452,460,454,444,462,473,477,0,467],
[452,453,453,450,459,466,477,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,510,514,495,640,524,546,497,427],
[381,0,431,414,540,458,493,475,458],
[377,460,0,445,541,506,473,440,378],
[396,477,446,0,555,475,570,542,407],
[251,351,350,336,0,330,364,316,298],
[367,433,385,416,561,0,415,463,348],
[345,398,418,321,527,476,0,397,394],
[394,416,451,349,575,428,494,0,399],
[464,433,513,484,593,543,497,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,419,419,450,401,424,469,438],
[457,0,429,441,456,461,437,471,458],
[472,462,0,469,458,494,444,533,465],
[472,450,422,0,474,446,434,487,434],
[441,435,433,417,0,451,449,483,464],
[490,430,397,445,440,0,443,457,479],
[467,454,447,457,442,448,0,469,446],
[422,420,358,404,408,434,422,0,413],
[453,433,426,457,427,412,445,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,441,408,426,446,442,426,420],
[462,0,472,461,430,445,461,465,442],
[450,419,0,422,445,450,441,429,445],
[483,430,469,0,447,455,486,455,438],
[465,461,446,444,0,455,454,461,449],
[445,446,441,436,436,0,463,445,435],
[449,430,450,405,437,428,0,430,428],
[465,426,462,436,430,446,461,0,444],
[471,449,446,453,442,456,463,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,452,461,473,440,443,434,458],
[453,0,424,437,427,420,434,435,462],
[439,467,0,462,455,455,460,435,449],
[430,454,429,0,452,427,438,455,465],
[418,464,436,439,0,407,437,448,444],
[451,471,436,464,484,0,463,458,496],
[448,457,431,453,454,428,0,448,442],
[457,456,456,436,443,433,443,0,493],
[433,429,442,426,447,395,449,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,433,414,436,441,434,438,467],
[470,0,453,430,457,472,448,431,464],
[458,438,0,447,479,468,450,430,446],
[477,461,444,0,465,478,477,462,497],
[455,434,412,426,0,432,450,426,453],
[450,419,423,413,459,0,438,424,441],
[457,443,441,414,441,453,0,433,455],
[453,460,461,429,465,467,458,0,476],
[424,427,445,394,438,450,436,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,485,470,439,459,508,464,485],
[371,0,379,420,408,400,382,407,403],
[406,512,0,444,428,419,501,415,463],
[421,471,447,0,452,443,470,430,455],
[452,483,463,439,0,435,452,440,450],
[432,491,472,448,456,0,497,443,459],
[383,509,390,421,439,394,0,396,411],
[427,484,476,461,451,448,495,0,448],
[406,488,428,436,441,432,480,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,453,444,473,460,484,477,464],
[391,0,439,431,446,429,438,438,394],
[438,452,0,409,449,421,452,489,456],
[447,460,482,0,441,446,471,467,442],
[418,445,442,450,0,440,469,477,438],
[431,462,470,445,451,0,487,476,456],
[407,453,439,420,422,404,0,441,426],
[414,453,402,424,414,415,450,0,413],
[427,497,435,449,453,435,465,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,469,431,457,436,450,450,446],
[439,0,478,430,434,433,419,452,419],
[422,413,0,406,429,404,416,435,411],
[460,461,485,0,459,439,455,485,452],
[434,457,462,432,0,430,438,456,411],
[455,458,487,452,461,0,462,464,444],
[441,472,475,436,453,429,0,448,451],
[441,439,456,406,435,427,443,0,434],
[445,472,480,439,480,447,440,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,383,398,463,429,422,521,473],
[410,0,425,399,462,431,466,538,447],
[508,466,0,449,433,410,419,548,471],
[493,492,442,0,566,495,520,620,480],
[428,429,458,325,0,389,413,484,423],
[462,460,481,396,502,0,471,545,446],
[469,425,472,371,478,420,0,494,425],
[370,353,343,271,407,346,397,0,396],
[418,444,420,411,468,445,466,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,441,451,482,465,459,483,453],
[436,0,472,411,462,456,452,487,445],
[450,419,0,444,464,436,451,466,466],
[440,480,447,0,471,460,451,466,473],
[409,429,427,420,0,446,406,434,447],
[426,435,455,431,445,0,409,469,465],
[432,439,440,440,485,482,0,468,465],
[408,404,425,425,457,422,423,0,446],
[438,446,425,418,444,426,426,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,459,470,455,441,466,453,511],
[403,0,414,466,450,430,429,430,454],
[432,477,0,492,498,470,456,475,473],
[421,425,399,0,420,434,399,441,440],
[436,441,393,471,0,458,419,447,469],
[450,461,421,457,433,0,428,457,458],
[425,462,435,492,472,463,0,455,460],
[438,461,416,450,444,434,436,0,471],
[380,437,418,451,422,433,431,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,401,430,396,384,437,433,437,423],
[490,0,446,461,440,490,490,474,451],
[461,445,0,432,461,506,448,488,469],
[495,430,459,0,437,468,445,454,448],
[507,451,430,454,0,509,449,489,466],
[454,401,385,423,382,0,419,452,374],
[458,401,443,446,442,472,0,476,428],
[454,417,403,437,402,439,415,0,397],
[468,440,422,443,425,517,463,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,379,413,425,439,428,426,438,409],
[512,0,455,410,467,442,449,473,454],
[478,436,0,436,435,439,408,430,416],
[466,481,455,0,458,478,405,431,450],
[452,424,456,433,0,460,427,421,461],
[463,449,452,413,431,0,416,447,418],
[465,442,483,486,464,475,0,479,425],
[453,418,461,460,470,444,412,0,447],
[482,437,475,441,430,473,466,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,361,477,431,405,507,551,435],
[411,0,410,479,410,431,557,486,436],
[530,481,0,383,480,405,533,529,457],
[414,412,508,0,412,410,461,462,409],
[460,481,411,479,0,459,553,438,412],
[486,460,486,481,432,0,508,458,459],
[384,334,358,430,338,383,0,482,311],
[340,405,362,429,453,433,409,0,384],
[456,455,434,482,479,432,580,507,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,446,398,429,430,445,528,425],
[460,0,463,411,375,427,425,473,473],
[445,428,0,428,359,426,443,544,489],
[493,480,463,0,514,517,427,461,506],
[462,516,532,377,0,479,511,457,477],
[461,464,465,374,412,0,423,512,528],
[446,466,448,464,380,468,0,445,427],
[363,418,347,430,434,379,446,0,392],
[466,418,402,385,414,363,464,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,472,482,463,454,448,458,456],
[459,0,426,443,464,461,458,448,444],
[419,465,0,434,452,436,437,451,425],
[409,448,457,0,436,449,442,461,425],
[428,427,439,455,0,441,435,448,430],
[437,430,455,442,450,0,418,447,444],
[443,433,454,449,456,473,0,457,447],
[433,443,440,430,443,444,434,0,432],
[435,447,466,466,461,447,444,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,428,431,427,416,450,442,411],
[440,0,417,430,427,443,448,423,443],
[463,474,0,449,453,437,474,462,459],
[460,461,442,0,470,459,450,461,442],
[464,464,438,421,0,463,459,450,433],
[475,448,454,432,428,0,470,473,473],
[441,443,417,441,432,421,0,438,400],
[449,468,429,430,441,418,453,0,448],
[480,448,432,449,458,418,491,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,435,436,433,459,435,465,482],
[452,0,442,458,444,435,451,462,431],
[456,449,0,437,415,472,434,480,432],
[455,433,454,0,431,454,444,456,488],
[458,447,476,460,0,443,476,484,456],
[432,456,419,437,448,0,442,464,465],
[456,440,457,447,415,449,0,485,463],
[426,429,411,435,407,427,406,0,425],
[409,460,459,403,435,426,428,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,519,439,486,482,550,436,496],
[422,0,419,386,328,480,407,362,450],
[372,472,0,389,441,423,420,460,512],
[452,505,502,0,471,451,525,403,502],
[405,563,450,420,0,439,494,378,484],
[409,411,468,440,452,0,473,393,492],
[341,484,471,366,397,418,0,420,433],
[455,529,431,488,513,498,471,0,525],
[395,441,379,389,407,399,458,366,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,429,460,442,456,421,472,441],
[444,0,436,438,419,467,455,468,437],
[462,455,0,466,452,467,426,455,442],
[431,453,425,0,421,442,429,451,429],
[449,472,439,470,0,454,421,480,480],
[435,424,424,449,437,0,443,474,441],
[470,436,465,462,470,448,0,455,455],
[419,423,436,440,411,417,436,0,408],
[450,454,449,462,411,450,436,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,422,442,428,402,424,411,448],
[455,0,446,451,451,413,421,436,431],
[469,445,0,441,441,413,438,443,440],
[449,440,450,0,440,419,430,416,436],
[463,440,450,451,0,415,437,409,449],
[489,478,478,472,476,0,459,444,467],
[467,470,453,461,454,432,0,428,448],
[480,455,448,475,482,447,463,0,442],
[443,460,451,455,442,424,443,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,450,421,436,479,462,398,429],
[397,0,386,367,361,429,397,432,402],
[441,505,0,388,387,489,479,460,402],
[470,524,503,0,458,520,512,442,477],
[455,530,504,433,0,533,466,483,480],
[412,462,402,371,358,0,443,382,372],
[429,494,412,379,425,448,0,483,382],
[493,459,431,449,408,509,408,0,442],
[462,489,489,414,411,519,509,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,453,452,402,425,400,420,435],
[438,0,412,450,400,441,400,370,429],
[438,479,0,475,411,450,372,403,442],
[439,441,416,0,417,445,392,399,372],
[489,491,480,474,0,498,430,450,438],
[466,450,441,446,393,0,390,414,436],
[491,491,519,499,461,501,0,440,484],
[471,521,488,492,441,477,451,0,448],
[456,462,449,519,453,455,407,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,462,468,405,527,445,512,490],
[461,0,440,487,451,477,493,514,460],
[429,451,0,486,426,520,470,527,484],
[423,404,405,0,437,484,451,499,415],
[486,440,465,454,0,472,491,571,485],
[364,414,371,407,419,0,409,481,397],
[446,398,421,440,400,482,0,509,438],
[379,377,364,392,320,410,382,0,387],
[401,431,407,476,406,494,453,504,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,474,425,453,439,464,453,440],
[426,0,445,412,443,430,443,421,403],
[417,446,0,456,463,425,445,450,439],
[466,479,435,0,463,449,458,423,455],
[438,448,428,428,0,418,455,453,444],
[452,461,466,442,473,0,474,450,436],
[427,448,446,433,436,417,0,418,407],
[438,470,441,468,438,441,473,0,454],
[451,488,452,436,447,455,484,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,416,439,428,414,436,450,440],
[460,0,436,472,455,450,467,457,448],
[475,455,0,473,480,436,452,448,442],
[452,419,418,0,439,428,441,445,423],
[463,436,411,452,0,437,436,447,450],
[477,441,455,463,454,0,450,461,430],
[455,424,439,450,455,441,0,445,460],
[441,434,443,446,444,430,446,0,445],
[451,443,449,468,441,461,431,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,453,461,444,472,419,455,448],
[423,0,445,419,430,456,398,440,443],
[438,446,0,441,456,464,419,434,451],
[430,472,450,0,469,466,431,426,427],
[447,461,435,422,0,436,405,438,447],
[419,435,427,425,455,0,424,413,429],
[472,493,472,460,486,467,0,445,463],
[436,451,457,465,453,478,446,0,452],
[443,448,440,464,444,462,428,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,425,411,413,467,432,438,462],
[489,0,437,450,452,473,455,476,492],
[466,454,0,453,459,452,483,433,469],
[480,441,438,0,458,479,485,467,515],
[478,439,432,433,0,453,436,445,479],
[424,418,439,412,438,0,472,429,467],
[459,436,408,406,455,419,0,432,482],
[453,415,458,424,446,462,459,0,492],
[429,399,422,376,412,424,409,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,449,444,423,435,423,414,431],
[496,0,466,436,430,468,473,470,453],
[442,425,0,431,450,437,458,450,453],
[447,455,460,0,474,424,465,458,467],
[468,461,441,417,0,447,426,452,420],
[456,423,454,467,444,0,439,432,445],
[468,418,433,426,465,452,0,454,406],
[477,421,441,433,439,459,437,0,449],
[460,438,438,424,471,446,485,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,487,451,431,476,469,434,427],
[424,0,488,447,406,416,451,428,423],
[404,403,0,437,429,374,414,411,396],
[440,444,454,0,427,427,435,447,412],
[460,485,462,464,0,440,477,452,412],
[415,475,517,464,451,0,453,476,413],
[422,440,477,456,414,438,0,441,405],
[457,463,480,444,439,415,450,0,452],
[464,468,495,479,479,478,486,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,485,430,442,467,472,451,532],
[432,0,420,396,429,442,522,408,491],
[406,471,0,421,372,404,424,386,443],
[461,495,470,0,386,428,478,423,465],
[449,462,519,505,0,462,522,411,473],
[424,449,487,463,429,0,564,476,512],
[419,369,467,413,369,327,0,418,360],
[440,483,505,468,480,415,473,0,442],
[359,400,448,426,418,379,531,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,441,440,444,426,443,440,451],
[454,0,457,472,459,460,459,461,432],
[450,434,0,430,454,444,425,456,443],
[451,419,461,0,437,454,446,448,445],
[447,432,437,454,0,467,468,468,457],
[465,431,447,437,424,0,434,441,464],
[448,432,466,445,423,457,0,453,454],
[451,430,435,443,423,450,438,0,437],
[440,459,448,446,434,427,437,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,484,460,446,468,452,435,469],
[423,0,475,456,469,475,460,458,481],
[407,416,0,438,441,435,413,413,421],
[431,435,453,0,443,459,435,446,463],
[445,422,450,448,0,459,412,401,440],
[423,416,456,432,432,0,411,435,450],
[439,431,478,456,479,480,0,448,445],
[456,433,478,445,490,456,443,0,443],
[422,410,470,428,451,441,446,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,452,423,452,433,466,470,450],
[453,0,456,444,456,452,454,470,447],
[439,435,0,441,445,484,476,473,475],
[468,447,450,0,447,452,470,485,445],
[439,435,446,444,0,467,471,460,452],
[458,439,407,439,424,0,463,430,437],
[425,437,415,421,420,428,0,448,442],
[421,421,418,406,431,461,443,0,431],
[441,444,416,446,439,454,449,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,460,456,457,456,444,448,481],
[406,0,418,425,437,434,420,450,424],
[431,473,0,434,439,445,453,464,474],
[435,466,457,0,460,449,444,444,459],
[434,454,452,431,0,447,435,453,475],
[435,457,446,442,444,0,446,465,451],
[447,471,438,447,456,445,0,449,440],
[443,441,427,447,438,426,442,0,468],
[410,467,417,432,416,440,451,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,398,421,428,480,480,467,441],
[461,0,427,462,419,443,449,462,462],
[493,464,0,400,441,428,490,493,461],
[470,429,491,0,383,454,459,475,390],
[463,472,450,508,0,450,524,429,465],
[411,448,463,437,441,0,463,492,463],
[411,442,401,432,367,428,0,463,393],
[424,429,398,416,462,399,428,0,373],
[450,429,430,501,426,428,498,518,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,433,453,439,440,453,439,434],
[452,0,470,473,462,457,464,454,442],
[458,421,0,463,444,457,453,466,453],
[438,418,428,0,441,417,447,415,418],
[452,429,447,450,0,448,458,437,449],
[451,434,434,474,443,0,448,458,455],
[438,427,438,444,433,443,0,426,449],
[452,437,425,476,454,433,465,0,448],
[457,449,438,473,442,436,442,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,474,562,494,442,528,467,481],
[437,0,467,464,411,396,466,483,398],
[417,424,0,476,379,390,430,500,400],
[329,427,415,0,413,382,431,470,360],
[397,480,512,478,0,456,426,497,412],
[449,495,501,509,435,0,465,492,417],
[363,425,461,460,465,426,0,483,380],
[424,408,391,421,394,399,408,0,354],
[410,493,491,531,479,474,511,537,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,431,471,459,482,461,441,479],
[423,0,457,424,476,496,465,470,485],
[460,434,0,447,469,459,467,455,534],
[420,467,444,0,426,462,435,422,450],
[432,415,422,465,0,433,438,430,456],
[409,395,432,429,458,0,432,440,450],
[430,426,424,456,453,459,0,457,484],
[450,421,436,469,461,451,434,0,482],
[412,406,357,441,435,441,407,409,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,427,446,443,467,463,449,448],
[437,0,435,425,437,435,430,445,417],
[464,456,0,427,457,479,458,468,450],
[445,466,464,0,439,464,452,469,475],
[448,454,434,452,0,454,449,429,445],
[424,456,412,427,437,0,454,457,438],
[428,461,433,439,442,437,0,433,444],
[442,446,423,422,462,434,458,0,438],
[443,474,441,416,446,453,447,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,447,444,486,479,465,459,446],
[426,0,396,404,446,436,447,413,399],
[444,495,0,432,487,457,442,438,454],
[447,487,459,0,492,464,473,416,473],
[405,445,404,399,0,420,434,405,422],
[412,455,434,427,471,0,427,436,437],
[426,444,449,418,457,464,0,441,470],
[432,478,453,475,486,455,450,0,455],
[445,492,437,418,469,454,421,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,444,429,425,442,439,447,423],
[461,0,445,447,422,450,445,452,428],
[447,446,0,455,419,454,472,469,450],
[462,444,436,0,428,447,455,445,443],
[466,469,472,463,0,440,450,467,468],
[449,441,437,444,451,0,452,446,429],
[452,446,419,436,441,439,0,444,439],
[444,439,422,446,424,445,447,0,443],
[468,463,441,448,423,462,452,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,471,463,364,384,445,369,433,359],
[420,0,438,388,347,447,347,393,357],
[428,453,0,464,382,432,381,420,392],
[527,503,427,0,442,459,447,432,452],
[507,544,509,449,0,456,394,444,452],
[446,444,459,432,435,0,414,427,363],
[522,544,510,444,497,477,0,536,490],
[458,498,471,459,447,464,355,0,461],
[532,534,499,439,439,528,401,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,473,451,449,430,462,457,489],
[443,0,505,475,496,469,534,541,548],
[418,386,0,427,430,413,442,492,472],
[440,416,464,0,442,465,428,466,483],
[442,395,461,449,0,398,455,442,463],
[461,422,478,426,493,0,420,455,524],
[429,357,449,463,436,471,0,487,489],
[434,350,399,425,449,436,404,0,498],
[402,343,419,408,428,367,402,393,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,507,469,479,444,445,467,414,457],
[384,0,419,427,385,430,397,395,411],
[422,472,0,450,477,428,440,393,457],
[412,464,441,0,446,414,384,382,443],
[447,506,414,445,0,415,435,398,435],
[446,461,463,477,476,0,415,428,463],
[424,494,451,507,456,476,0,455,467],
[477,496,498,509,493,463,436,0,479],
[434,480,434,448,456,428,424,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,381,435,414,417,391,409,445,364],
[510,0,450,437,462,473,463,460,470],
[456,441,0,463,449,471,470,440,472],
[477,454,428,0,469,413,470,409,399],
[474,429,442,422,0,455,462,481,438],
[500,418,420,478,436,0,496,450,482],
[482,428,421,421,429,395,0,426,453],
[446,431,451,482,410,441,465,0,438],
[527,421,419,492,453,409,438,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,456,437,467,457,460,438,445],
[447,0,453,457,456,425,450,463,427],
[435,438,0,447,467,451,451,443,447],
[454,434,444,0,475,429,453,437,462],
[424,435,424,416,0,407,437,422,427],
[434,466,440,462,484,0,472,437,439],
[431,441,440,438,454,419,0,429,437],
[453,428,448,454,469,454,462,0,433],
[446,464,444,429,464,452,454,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,431,443,471,425,469,467,451],
[458,0,442,454,495,424,443,452,471],
[460,449,0,433,469,423,454,462,437],
[448,437,458,0,463,424,453,443,476],
[420,396,422,428,0,420,397,437,404],
[466,467,468,467,471,0,463,462,445],
[422,448,437,438,494,428,0,441,417],
[424,439,429,448,454,429,450,0,440],
[440,420,454,415,487,446,474,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,447,456,459,475,438,442,449],
[451,0,443,433,457,457,422,461,453],
[444,448,0,440,458,427,454,442,457],
[435,458,451,0,456,448,433,447,459],
[432,434,433,435,0,434,414,449,464],
[416,434,464,443,457,0,417,453,445],
[453,469,437,458,477,474,0,487,463],
[449,430,449,444,442,438,404,0,424],
[442,438,434,432,427,446,428,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,558,391,442,610,445,388,446,443],
[333,0,277,332,499,388,221,277,443],
[500,614,0,442,611,611,443,500,499],
[449,559,449,0,667,557,337,335,558],
[281,392,280,224,0,222,224,222,504],
[446,503,280,334,669,0,224,392,613],
[503,670,448,554,667,667,0,391,613],
[445,614,391,556,669,499,500,0,557],
[448,448,392,333,387,278,278,334,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,456,438,425,454,462,446,463],
[443,0,450,438,433,454,436,423,442],
[435,441,0,426,453,435,419,437,441],
[453,453,465,0,435,448,457,450,450],
[466,458,438,456,0,455,452,469,463],
[437,437,456,443,436,0,445,439,455],
[429,455,472,434,439,446,0,465,463],
[445,468,454,441,422,452,426,0,431],
[428,449,450,441,428,436,428,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,741,442,294,592,444,444,294,444],
[150,0,298,147,148,0,297,297,0],
[449,593,0,294,594,444,444,294,297],
[597,744,597,0,744,594,595,297,447],
[299,743,297,147,0,147,297,444,147],
[447,891,447,297,744,0,594,444,297],
[447,594,447,296,594,297,0,443,147],
[597,594,597,594,447,447,448,0,445],
[447,891,594,444,744,594,744,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,435,415,460,424,449,438,403],
[445,0,448,411,450,424,439,437,448],
[456,443,0,406,460,416,433,448,432],
[476,480,485,0,497,453,461,459,440],
[431,441,431,394,0,425,419,421,397],
[467,467,475,438,466,0,458,437,432],
[442,452,458,430,472,433,0,448,450],
[453,454,443,432,470,454,443,0,434],
[488,443,459,451,494,459,441,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,482,436,439,420,466,543,429],
[457,0,468,348,448,429,432,546,412],
[409,423,0,442,461,473,373,459,505],
[455,543,449,0,425,481,445,499,495],
[452,443,430,466,0,389,439,494,453],
[471,462,418,410,502,0,450,486,510],
[425,459,518,446,452,441,0,473,494],
[348,345,432,392,397,405,418,0,459],
[462,479,386,396,438,381,397,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,496,442,464,484,439,458,454,429],
[395,0,422,430,429,416,437,427,430],
[449,469,0,450,434,449,426,449,432],
[427,461,441,0,445,443,434,439,451],
[407,462,457,446,0,427,438,424,425],
[452,475,442,448,464,0,443,445,440],
[433,454,465,457,453,448,0,430,440],
[437,464,442,452,467,446,461,0,449],
[462,461,459,440,466,451,451,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,440,407,456,427,439,417,422],
[470,0,456,428,466,463,430,425,437],
[451,435,0,439,424,458,422,448,443],
[484,463,452,0,453,461,455,471,444],
[435,425,467,438,0,455,442,410,439],
[464,428,433,430,436,0,456,438,447],
[452,461,469,436,449,435,0,486,455],
[474,466,443,420,481,453,405,0,456],
[469,454,448,447,452,444,436,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,465,489,482,471,471,445,459],
[441,0,490,477,476,467,469,437,426],
[426,401,0,460,465,442,436,439,454],
[402,414,431,0,421,428,413,395,405],
[409,415,426,470,0,407,430,433,410],
[420,424,449,463,484,0,464,477,454],
[420,422,455,478,461,427,0,443,429],
[446,454,452,496,458,414,448,0,441],
[432,465,437,486,481,437,462,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,425,432,465,425,431,470,459],
[441,0,422,470,441,453,476,456,463],
[466,469,0,449,443,472,455,465,462],
[459,421,442,0,467,443,479,462,435],
[426,450,448,424,0,443,468,499,414],
[466,438,419,448,448,0,469,481,455],
[460,415,436,412,423,422,0,447,418],
[421,435,426,429,392,410,444,0,411],
[432,428,429,456,477,436,473,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,442,456,419,456,446,459,467],
[447,0,429,433,450,482,468,478,459],
[449,462,0,461,413,475,461,466,441],
[435,458,430,0,436,452,450,430,457],
[472,441,478,455,0,465,468,475,458],
[435,409,416,439,426,0,450,438,414],
[445,423,430,441,423,441,0,443,433],
[432,413,425,461,416,453,448,0,454],
[424,432,450,434,433,477,458,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,454,440,458,452,445,474,431],
[426,0,421,404,428,458,414,454,424],
[437,470,0,462,455,447,446,463,451],
[451,487,429,0,452,449,446,459,456],
[433,463,436,439,0,466,426,458,446],
[439,433,444,442,425,0,442,449,452],
[446,477,445,445,465,449,0,461,454],
[417,437,428,432,433,442,430,0,434],
[460,467,440,435,445,439,437,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,470,425,455,433,451,435,453],
[432,0,455,444,480,439,437,452,468],
[421,436,0,431,449,451,428,456,478],
[466,447,460,0,474,452,455,445,493],
[436,411,442,417,0,424,409,425,450],
[458,452,440,439,467,0,449,465,448],
[440,454,463,436,482,442,0,446,459],
[456,439,435,446,466,426,445,0,464],
[438,423,413,398,441,443,432,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,365,448,403,499,416,466,499,432],
[526,0,498,483,516,464,427,512,515],
[443,393,0,402,382,326,333,479,463],
[488,408,489,0,507,423,388,457,458],
[392,375,509,384,0,392,475,425,476],
[475,427,565,468,499,0,445,432,463],
[425,464,558,503,416,446,0,446,443],
[392,379,412,434,466,459,445,0,436],
[459,376,428,433,415,428,448,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,415,445,463,451,446,458,433],
[464,0,437,441,466,463,464,465,456],
[476,454,0,436,483,469,461,457,466],
[446,450,455,0,465,462,428,451,449],
[428,425,408,426,0,437,414,426,438],
[440,428,422,429,454,0,434,440,439],
[445,427,430,463,477,457,0,446,447],
[433,426,434,440,465,451,445,0,444],
[458,435,425,442,453,452,444,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,465,422,469,453,432,473,461],
[402,0,458,423,473,456,409,420,424],
[426,433,0,411,454,424,430,413,431],
[469,468,480,0,450,470,428,468,439],
[422,418,437,441,0,426,397,439,425],
[438,435,467,421,465,0,461,471,440],
[459,482,461,463,494,430,0,448,462],
[418,471,478,423,452,420,443,0,445],
[430,467,460,452,466,451,429,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,502,461,500,462,453,449,518],
[492,0,521,427,509,445,483,446,497],
[389,370,0,424,450,363,402,386,444],
[430,464,467,0,465,458,471,500,481],
[391,382,441,426,0,385,453,404,409],
[429,446,528,433,506,0,452,468,522],
[438,408,489,420,438,439,0,449,453],
[442,445,505,391,487,423,442,0,474],
[373,394,447,410,482,369,438,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,449,449,453,455,472,436,424],
[440,0,448,414,438,467,425,420,431],
[442,443,0,449,470,447,452,450,422],
[442,477,442,0,483,473,452,467,435],
[438,453,421,408,0,448,437,436,404],
[436,424,444,418,443,0,441,439,410],
[419,466,439,439,454,450,0,407,446],
[455,471,441,424,455,452,484,0,459],
[467,460,469,456,487,481,445,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,406,426,441,481,456,412,425],
[487,0,448,498,455,505,445,390,480],
[485,443,0,431,472,486,428,512,481],
[465,393,460,0,455,500,426,498,494],
[450,436,419,436,0,503,447,455,430],
[410,386,405,391,388,0,425,367,406],
[435,446,463,465,444,466,0,414,442],
[479,501,379,393,436,524,477,0,459],
[466,411,410,397,461,485,449,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,408,487,426,418,428,451,451],
[453,0,450,437,477,451,457,417,460],
[483,441,0,477,501,474,457,471,493],
[404,454,414,0,441,416,470,420,439],
[465,414,390,450,0,384,458,425,374],
[473,440,417,475,507,0,477,457,466],
[463,434,434,421,433,414,0,418,428],
[440,474,420,471,466,434,473,0,457],
[440,431,398,452,517,425,463,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,450,532,418,471,510,431,437],
[430,0,470,502,350,401,396,381,500],
[441,421,0,486,395,442,435,389,459],
[359,389,405,0,401,319,442,440,364],
[473,541,496,490,0,416,461,431,483],
[420,490,449,572,475,0,523,498,463],
[381,495,456,449,430,368,0,432,370],
[460,510,502,451,460,393,459,0,467],
[454,391,432,527,408,428,521,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,408,439,419,417,408,435,413],
[460,0,459,463,450,451,429,454,435],
[483,432,0,455,452,434,415,444,426],
[452,428,436,0,427,388,401,428,411],
[472,441,439,464,0,444,445,472,424],
[474,440,457,503,447,0,466,473,445],
[483,462,476,490,446,425,0,499,460],
[456,437,447,463,419,418,392,0,429],
[478,456,465,480,467,446,431,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,418,436,427,429,425,424,440],
[457,0,468,450,452,449,474,436,471],
[473,423,0,433,415,467,439,439,463],
[455,441,458,0,411,432,447,416,452],
[464,439,476,480,0,471,467,452,480],
[462,442,424,459,420,0,459,435,455],
[466,417,452,444,424,432,0,467,450],
[467,455,452,475,439,456,424,0,470],
[451,420,428,439,411,436,441,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,441,427,418,446,407,422,451],
[453,0,420,432,422,441,448,457,446],
[450,471,0,430,437,449,445,456,448],
[464,459,461,0,436,462,440,453,468],
[473,469,454,455,0,482,443,458,464],
[445,450,442,429,409,0,422,422,469],
[484,443,446,451,448,469,0,444,455],
[469,434,435,438,433,469,447,0,445],
[440,445,443,423,427,422,436,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,441,434,427,477,455,458,428],
[446,0,420,420,425,443,432,470,442],
[450,471,0,458,422,467,439,464,448],
[457,471,433,0,438,448,440,494,458],
[464,466,469,453,0,483,451,447,435],
[414,448,424,443,408,0,439,446,435],
[436,459,452,451,440,452,0,461,455],
[433,421,427,397,444,445,430,0,417],
[463,449,443,433,456,456,436,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,448,461,458,457,466,459,441],
[433,0,436,431,411,431,483,429,444],
[443,455,0,456,441,453,460,449,445],
[430,460,435,0,437,449,432,428,428],
[433,480,450,454,0,462,491,451,450],
[434,460,438,442,429,0,454,424,439],
[425,408,431,459,400,437,0,401,426],
[432,462,442,463,440,467,490,0,437],
[450,447,446,463,441,452,465,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,468,464,443,421,444,429,452],
[445,0,450,412,445,402,438,459,446],
[423,441,0,425,458,422,430,429,455],
[427,479,466,0,434,419,437,446,444],
[448,446,433,457,0,446,440,443,449],
[470,489,469,472,445,0,464,441,471],
[447,453,461,454,451,427,0,449,443],
[462,432,462,445,448,450,442,0,447],
[439,445,436,447,442,420,448,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,454,485,508,518,458,542,436],
[392,0,412,426,498,466,411,497,460],
[437,479,0,426,505,527,433,514,452],
[406,465,465,0,526,527,420,468,480],
[383,393,386,365,0,464,403,442,462],
[373,425,364,364,427,0,390,430,412],
[433,480,458,471,488,501,0,500,479],
[349,394,377,423,449,461,391,0,421],
[455,431,439,411,429,479,412,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,464,419,449,469,437,467,424],
[428,0,469,439,425,430,453,448,438],
[427,422,0,418,428,427,435,416,411],
[472,452,473,0,468,446,438,444,434],
[442,466,463,423,0,424,459,447,447],
[422,461,464,445,467,0,433,452,452],
[454,438,456,453,432,458,0,450,427],
[424,443,475,447,444,439,441,0,418],
[467,453,480,457,444,439,464,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,452,455,436,454,460,433,455],
[443,0,420,464,440,462,454,441,466],
[439,471,0,464,474,472,490,441,462],
[436,427,427,0,443,426,439,405,441],
[455,451,417,448,0,468,424,457,448],
[437,429,419,465,423,0,428,420,457],
[431,437,401,452,467,463,0,409,462],
[458,450,450,486,434,471,482,0,452],
[436,425,429,450,443,434,429,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,455,455,459,443,463,447,440],
[454,0,462,460,492,460,462,440,459],
[436,429,0,447,471,424,441,429,428],
[436,431,444,0,461,434,458,427,454],
[432,399,420,430,0,450,425,433,432],
[448,431,467,457,441,0,466,441,425],
[428,429,450,433,466,425,0,430,432],
[444,451,462,464,458,450,461,0,450],
[451,432,463,437,459,466,459,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,460,443,500,474,455,483,468],
[425,0,452,470,479,456,458,470,455],
[431,439,0,436,467,462,434,462,460],
[448,421,455,0,472,461,431,450,449],
[391,412,424,419,0,441,409,400,411],
[417,435,429,430,450,0,433,431,442],
[436,433,457,460,482,458,0,463,478],
[408,421,429,441,491,460,428,0,446],
[423,436,431,442,480,449,413,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,450,427,433,449,444,469,431],
[466,0,450,458,443,450,463,450,434],
[441,441,0,442,439,435,434,458,418],
[464,433,449,0,427,444,465,460,419],
[458,448,452,464,0,471,449,464,440],
[442,441,456,447,420,0,463,458,451],
[447,428,457,426,442,428,0,433,411],
[422,441,433,431,427,433,458,0,415],
[460,457,473,472,451,440,480,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,394,449,451,487,382,443,460],
[479,0,429,430,484,422,453,421,448],
[497,462,0,442,532,554,456,458,498],
[442,461,449,0,538,470,434,422,487],
[440,407,359,353,0,472,393,391,456],
[404,469,337,421,419,0,424,449,403],
[509,438,435,457,498,467,0,435,508],
[448,470,433,469,500,442,456,0,508],
[431,443,393,404,435,488,383,383,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,441,435,446,429,447,437,451],
[424,0,430,418,435,427,432,419,457],
[450,461,0,453,458,434,462,416,469],
[456,473,438,0,455,460,444,464,459],
[445,456,433,436,0,438,462,447,455],
[462,464,457,431,453,0,461,462,476],
[444,459,429,447,429,430,0,419,446],
[454,472,475,427,444,429,472,0,469],
[440,434,422,432,436,415,445,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,449,450,449,462,457,460,439],
[438,0,454,440,434,452,464,435,460],
[442,437,0,444,434,469,459,428,446],
[441,451,447,0,423,444,460,445,438],
[442,457,457,468,0,470,466,462,451],
[429,439,422,447,421,0,425,421,422],
[434,427,432,431,425,466,0,433,438],
[431,456,463,446,429,470,458,0,458],
[452,431,445,453,440,469,453,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,452,445,434,460,412,470,462],
[429,0,441,438,434,457,442,471,425],
[439,450,0,442,456,465,424,479,426],
[446,453,449,0,434,454,415,452,445],
[457,457,435,457,0,468,451,489,442],
[431,434,426,437,423,0,409,492,417],
[479,449,467,476,440,482,0,472,469],
[421,420,412,439,402,399,419,0,417],
[429,466,465,446,449,474,422,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,424,467,461,434,449,468,444],
[438,0,437,432,437,437,448,437,434],
[467,454,0,468,440,455,479,450,432],
[424,459,423,0,424,438,458,460,446],
[430,454,451,467,0,443,436,441,437],
[457,454,436,453,448,0,454,445,446],
[442,443,412,433,455,437,0,450,457],
[423,454,441,431,450,446,441,0,440],
[447,457,459,445,454,445,434,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,482,374,424,364,423,450,387],
[433,0,345,286,362,367,374,466,382],
[409,546,0,419,422,395,414,474,448],
[517,605,472,0,423,385,470,467,505],
[467,529,469,468,0,418,416,559,467],
[527,524,496,506,473,0,426,514,457],
[468,517,477,421,475,465,0,521,452],
[441,425,417,424,332,377,370,0,391],
[504,509,443,386,424,434,439,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,414,433,410,457,430,442,428],
[433,0,424,438,409,413,452,423,419],
[477,467,0,445,450,459,498,452,467],
[458,453,446,0,440,454,463,458,453],
[481,482,441,451,0,475,507,461,480],
[434,478,432,437,416,0,462,426,443],
[461,439,393,428,384,429,0,415,437],
[449,468,439,433,430,465,476,0,467],
[463,472,424,438,411,448,454,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,443,450,443,439,446,441,426],
[415,0,428,450,435,429,435,436,414],
[448,463,0,456,456,460,455,446,438],
[441,441,435,0,440,420,445,439,421],
[448,456,435,451,0,445,423,442,441],
[452,462,431,471,446,0,463,461,449],
[445,456,436,446,468,428,0,448,446],
[450,455,445,452,449,430,443,0,437],
[465,477,453,470,450,442,445,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,425,446,477,457,468,449,444],
[423,0,426,456,459,428,453,431,470],
[466,465,0,440,460,434,447,449,453],
[445,435,451,0,480,442,449,446,437],
[414,432,431,411,0,439,414,427,437],
[434,463,457,449,452,0,452,444,446],
[423,438,444,442,477,439,0,440,436],
[442,460,442,445,464,447,451,0,449],
[447,421,438,454,454,445,455,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,481,457,491,446,481,451,480],
[446,0,473,446,463,428,468,434,470],
[410,418,0,398,467,434,408,400,441],
[434,445,493,0,478,460,432,475,481],
[400,428,424,413,0,400,409,412,437],
[445,463,457,431,491,0,439,459,498],
[410,423,483,459,482,452,0,448,456],
[440,457,491,416,479,432,443,0,444],
[411,421,450,410,454,393,435,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,446,463,426,448,430,451,453],
[448,0,432,455,437,447,437,441,450],
[445,459,0,445,441,433,442,467,463],
[428,436,446,0,421,429,421,458,458],
[465,454,450,470,0,445,451,469,456],
[443,444,458,462,446,0,445,445,463],
[461,454,449,470,440,446,0,454,442],
[440,450,424,433,422,446,437,0,447],
[438,441,428,433,435,428,449,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,477,470,495,436,466,483,476],
[416,0,430,459,429,411,415,436,441],
[414,461,0,424,455,435,423,446,419],
[421,432,467,0,420,435,428,444,441],
[396,462,436,471,0,444,446,476,457],
[455,480,456,456,447,0,450,465,444],
[425,476,468,463,445,441,0,468,450],
[408,455,445,447,415,426,423,0,445],
[415,450,472,450,434,447,441,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,432,452,450,447,429,467,490],
[452,0,415,448,431,443,440,469,486],
[459,476,0,447,457,463,421,464,509],
[439,443,444,0,446,448,447,497,477],
[441,460,434,445,0,468,445,464,491],
[444,448,428,443,423,0,442,470,472],
[462,451,470,444,446,449,0,518,503],
[424,422,427,394,427,421,373,0,449],
[401,405,382,414,400,419,388,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,463,456,455,475,452,438,442],
[457,0,471,441,473,460,447,450,467],
[428,420,0,461,449,410,411,429,452],
[435,450,430,0,447,441,447,435,437],
[436,418,442,444,0,442,430,420,432],
[416,431,481,450,449,0,439,444,441],
[439,444,480,444,461,452,0,453,439],
[453,441,462,456,471,447,438,0,447],
[449,424,439,454,459,450,452,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,440,499,471,467,440,448,468],
[431,0,455,473,416,427,441,444,498],
[451,436,0,434,468,447,433,450,484],
[392,418,457,0,424,437,424,459,462],
[420,475,423,467,0,469,468,461,473],
[424,464,444,454,422,0,436,451,485],
[451,450,458,467,423,455,0,435,485],
[443,447,441,432,430,440,456,0,474],
[423,393,407,429,418,406,406,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,444,424,480,434,450,379,436],
[433,0,413,402,415,393,438,384,428],
[447,478,0,454,473,420,482,445,440],
[467,489,437,0,442,463,469,401,454],
[411,476,418,449,0,423,465,486,428],
[457,498,471,428,468,0,437,436,426],
[441,453,409,422,426,454,0,438,408],
[512,507,446,490,405,455,453,0,449],
[455,463,451,437,463,465,483,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,379,386,476,415,490,395,347,371],
[512,0,475,522,504,467,423,473,448],
[505,416,0,467,444,499,424,450,401],
[415,369,424,0,458,461,402,402,383],
[476,387,447,433,0,429,436,391,387],
[401,424,392,430,462,0,370,372,327],
[496,468,467,489,455,521,0,456,427],
[544,418,441,489,500,519,435,0,430],
[520,443,490,508,504,564,464,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,474,496,500,460,496,449,529],
[459,0,469,441,493,456,449,441,506],
[417,422,0,442,469,443,470,393,475],
[395,450,449,0,469,461,438,412,495],
[391,398,422,422,0,451,438,428,479],
[431,435,448,430,440,0,466,413,445],
[395,442,421,453,453,425,0,430,480],
[442,450,498,479,463,478,461,0,519],
[362,385,416,396,412,446,411,372,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,463,504,459,444,449,392,447],
[437,0,439,501,461,479,441,409,476],
[428,452,0,491,443,448,459,443,445],
[387,390,400,0,416,449,414,394,406],
[432,430,448,475,0,420,452,424,408],
[447,412,443,442,471,0,459,438,430],
[442,450,432,477,439,432,0,418,410],
[499,482,448,497,467,453,473,0,426],
[444,415,446,485,483,461,481,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,471,449,444,461,463,434,450],
[431,0,457,437,442,443,455,444,461],
[420,434,0,421,437,425,445,435,452],
[442,454,470,0,459,446,453,446,474],
[447,449,454,432,0,458,485,446,466],
[430,448,466,445,433,0,456,468,477],
[428,436,446,438,406,435,0,443,433],
[457,447,456,445,445,423,448,0,473],
[441,430,439,417,425,414,458,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,413,423,452,407,418,427,422],
[450,0,429,434,432,456,457,438,465],
[478,462,0,454,452,432,437,448,440],
[468,457,437,0,462,426,458,439,451],
[439,459,439,429,0,438,421,429,458],
[484,435,459,465,453,0,436,472,436],
[473,434,454,433,470,455,0,465,464],
[464,453,443,452,462,419,426,0,436],
[469,426,451,440,433,455,427,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,428,420,370,492,463,393,502],
[392,0,447,449,373,488,437,366,461],
[463,444,0,461,460,521,408,464,475],
[471,442,430,0,455,477,523,430,520],
[521,518,431,436,0,493,432,421,519],
[399,403,370,414,398,0,407,336,375],
[428,454,483,368,459,484,0,389,447],
[498,525,427,461,470,555,502,0,503],
[389,430,416,371,372,516,444,388,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,453,437,447,443,452,440,432],
[438,0,461,444,436,455,428,437,424],
[438,430,0,428,445,423,428,425,430],
[454,447,463,0,429,435,434,439,441],
[444,455,446,462,0,461,456,456,438],
[448,436,468,456,430,0,426,434,429],
[439,463,463,457,435,465,0,439,433],
[451,454,466,452,435,457,452,0,459],
[459,467,461,450,453,462,458,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,522,446,521,226,445,371,444,372],
[369,0,298,375,297,369,295,370,299],
[445,593,0,669,521,517,591,369,445],
[370,516,222,0,297,369,369,370,371],
[665,594,370,594,0,369,369,444,370],
[446,522,374,522,522,0,372,370,298],
[520,596,300,522,522,519,0,446,375],
[447,521,522,521,447,521,445,0,448],
[519,592,446,520,521,593,516,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,415,420,433,444,439,388,443],
[473,0,415,444,448,461,452,448,478],
[476,476,0,473,466,478,489,426,482],
[471,447,418,0,451,479,445,449,489],
[458,443,425,440,0,493,453,431,474],
[447,430,413,412,398,0,439,408,434],
[452,439,402,446,438,452,0,435,472],
[503,443,465,442,460,483,456,0,517],
[448,413,409,402,417,457,419,374,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,439,460,440,481,461,447,451],
[421,0,394,416,440,444,432,413,457],
[452,497,0,450,443,474,460,461,469],
[431,475,441,0,449,477,445,464,467],
[451,451,448,442,0,461,458,431,449],
[410,447,417,414,430,0,430,402,453],
[430,459,431,446,433,461,0,421,447],
[444,478,430,427,460,489,470,0,473],
[440,434,422,424,442,438,444,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,444,506,470,469,433,447,461],
[447,0,425,514,449,451,467,485,474],
[447,466,0,496,459,482,434,475,470],
[385,377,395,0,430,437,442,440,441],
[421,442,432,461,0,460,447,452,443],
[422,440,409,454,431,0,444,454,444],
[458,424,457,449,444,447,0,477,454],
[444,406,416,451,439,437,414,0,441],
[430,417,421,450,448,447,437,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,473,440,451,456,472,457,457],
[438,0,446,425,410,464,447,429,512],
[418,445,0,424,401,430,467,386,401],
[451,466,467,0,433,449,488,435,500],
[440,481,490,458,0,474,464,427,457],
[435,427,461,442,417,0,449,431,436],
[419,444,424,403,427,442,0,393,468],
[434,462,505,456,464,460,498,0,527],
[434,379,490,391,434,455,423,364,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,458,459,450,448,456,427,405],
[427,0,442,440,418,441,455,440,456],
[433,449,0,480,432,454,469,423,456],
[432,451,411,0,418,441,465,420,447],
[441,473,459,473,0,452,475,459,461],
[443,450,437,450,439,0,443,438,436],
[435,436,422,426,416,448,0,420,431],
[464,451,468,471,432,453,471,0,492],
[486,435,435,444,430,455,460,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,452,419,482,440,419,489,459],
[437,0,445,433,462,440,463,472,455],
[439,446,0,484,469,425,461,517,490],
[472,458,407,0,457,446,462,464,456],
[409,429,422,434,0,384,455,451,438],
[451,451,466,445,507,0,474,457,485],
[472,428,430,429,436,417,0,448,424],
[402,419,374,427,440,434,443,0,418],
[432,436,401,435,453,406,467,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,434,436,436,438,448,449,426],
[431,0,461,438,443,465,453,448,453],
[457,430,0,451,455,487,490,470,451],
[455,453,440,0,425,482,481,464,443],
[455,448,436,466,0,446,461,487,457],
[453,426,404,409,445,0,434,464,434],
[443,438,401,410,430,457,0,422,458],
[442,443,421,427,404,427,469,0,439],
[465,438,440,448,434,457,433,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,431,426,407,402,427,434,431],
[466,0,450,452,431,406,433,411,440],
[460,441,0,468,387,410,426,428,418],
[465,439,423,0,434,404,408,413,459],
[484,460,504,457,0,424,466,443,455],
[489,485,481,487,467,0,478,428,434],
[464,458,465,483,425,413,0,440,459],
[457,480,463,478,448,463,451,0,441],
[460,451,473,432,436,457,432,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,402,437,420,422,449,487,452],
[448,0,440,427,451,463,486,478,467],
[489,451,0,430,449,452,464,493,469],
[454,464,461,0,435,459,469,529,455],
[471,440,442,456,0,453,452,507,453],
[469,428,439,432,438,0,487,505,451],
[442,405,427,422,439,404,0,481,463],
[404,413,398,362,384,386,410,0,418],
[439,424,422,436,438,440,428,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,455,497,415,501,457,462,456],
[437,0,459,477,422,491,422,471,443],
[436,432,0,425,419,485,451,479,450],
[394,414,466,0,433,512,411,507,440],
[476,469,472,458,0,462,480,479,437],
[390,400,406,379,429,0,384,480,395],
[434,469,440,480,411,507,0,456,442],
[429,420,412,384,412,411,435,0,432],
[435,448,441,451,454,496,449,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,528,556,458,475,447,445,545,453],
[363,0,501,500,451,428,412,434,421],
[335,390,0,418,383,377,364,398,338],
[433,391,473,0,394,409,369,432,369],
[416,440,508,497,0,425,394,515,453],
[444,463,514,482,466,0,453,510,459],
[446,479,527,522,497,438,0,520,451],
[346,457,493,459,376,381,371,0,363],
[438,470,553,522,438,432,440,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,453,426,462,478,500,443,489],
[425,0,416,461,428,455,438,395,411],
[438,475,0,484,508,504,531,455,425],
[465,430,407,0,445,429,411,362,375],
[429,463,383,446,0,472,462,441,431],
[413,436,387,462,419,0,411,408,379],
[391,453,360,480,429,480,0,340,330],
[448,496,436,529,450,483,551,0,462],
[402,480,466,516,460,512,561,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,472,437,464,464,470,456,479],
[421,0,505,447,474,473,471,447,476],
[419,386,0,428,492,431,417,435,457],
[454,444,463,0,473,449,461,438,484],
[427,417,399,418,0,408,413,427,433],
[427,418,460,442,483,0,443,434,457],
[421,420,474,430,478,448,0,420,458],
[435,444,456,453,464,457,471,0,464],
[412,415,434,407,458,434,433,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,434,448,463,449,413,439,433],
[443,0,434,447,461,421,439,438,407],
[457,457,0,496,478,444,452,445,497],
[443,444,395,0,458,443,433,444,401],
[428,430,413,433,0,439,407,430,453],
[442,470,447,448,452,0,428,418,385],
[478,452,439,458,484,463,0,448,448],
[452,453,446,447,461,473,443,0,428],
[458,484,394,490,438,506,443,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,410,491,472,436,419,431,447],
[437,0,448,493,455,455,454,444,428],
[481,443,0,472,464,467,444,442,434],
[400,398,419,0,440,429,423,434,417],
[419,436,427,451,0,422,414,452,421],
[455,436,424,462,469,0,413,427,399],
[472,437,447,468,477,478,0,452,450],
[460,447,449,457,439,464,439,0,464],
[444,463,457,474,470,492,441,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,438,426,476,408,504,393,478],
[448,0,403,406,402,409,451,472,426],
[453,488,0,446,456,444,534,417,484],
[465,485,445,0,466,447,464,459,507],
[415,489,435,425,0,430,461,433,447],
[483,482,447,444,461,0,456,463,523],
[387,440,357,427,430,435,0,409,473],
[498,419,474,432,458,428,482,0,492],
[413,465,407,384,444,368,418,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,445,436,430,396,434,418,427],
[435,0,462,441,446,422,450,442,415],
[446,429,0,467,425,428,434,397,427],
[455,450,424,0,443,364,450,378,406],
[461,445,466,448,0,432,471,393,436],
[495,469,463,527,459,0,469,436,464],
[457,441,457,441,420,422,0,423,442],
[473,449,494,513,498,455,468,0,443],
[464,476,464,485,455,427,449,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,347,321,368,451,502,457,481,298],
[544,0,434,497,544,595,524,527,382],
[570,457,0,385,475,550,542,573,410],
[523,394,506,0,388,557,459,482,477],
[440,347,416,503,0,553,500,438,348],
[389,296,341,334,338,0,408,453,335],
[434,367,349,432,391,483,0,528,415],
[410,364,318,409,453,438,363,0,319],
[593,509,481,414,543,556,476,572,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,478,468,419,489,469,500,470],
[422,0,441,418,451,471,466,438,412],
[413,450,0,437,447,478,472,457,467],
[423,473,454,0,441,485,475,476,449],
[472,440,444,450,0,490,483,455,457],
[402,420,413,406,401,0,450,401,439],
[422,425,419,416,408,441,0,448,437],
[391,453,434,415,436,490,443,0,434],
[421,479,424,442,434,452,454,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,412,470,435,421,476,438,467],
[405,0,395,412,426,456,443,389,448],
[479,496,0,452,438,478,454,446,464],
[421,479,439,0,417,452,422,429,475],
[456,465,453,474,0,519,455,441,483],
[470,435,413,439,372,0,443,440,439],
[415,448,437,469,436,448,0,429,447],
[453,502,445,462,450,451,462,0,471],
[424,443,427,416,408,452,444,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,447,448,464,390,527,406,421],
[407,0,389,373,488,352,450,317,349],
[444,502,0,411,523,424,426,430,405],
[443,518,480,0,583,409,488,326,498],
[427,403,368,308,0,424,428,368,326],
[501,539,467,482,467,0,563,485,403],
[364,441,465,403,463,328,0,291,384],
[485,574,461,565,523,406,600,0,498],
[470,542,486,393,565,488,507,393,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,447,434,440,431,452,434,447],
[434,0,431,432,452,435,441,438,452],
[444,460,0,436,432,446,455,437,458],
[457,459,455,0,456,448,455,437,452],
[451,439,459,435,0,432,457,441,427],
[460,456,445,443,459,0,463,442,469],
[439,450,436,436,434,428,0,433,437],
[457,453,454,454,450,449,458,0,443],
[444,439,433,439,464,422,454,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,451,430,425,430,448,474,416],
[425,0,442,470,440,436,443,462,445],
[440,449,0,437,455,431,453,449,470],
[461,421,454,0,458,450,456,466,448],
[466,451,436,433,0,453,436,466,437],
[461,455,460,441,438,0,454,480,452],
[443,448,438,435,455,437,0,464,447],
[417,429,442,425,425,411,427,0,419],
[475,446,421,443,454,439,444,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,478,455,464,418,424,420,434],
[456,0,490,481,474,456,432,461,472],
[413,401,0,455,445,435,411,431,463],
[436,410,436,0,459,432,424,457,437],
[427,417,446,432,0,415,410,437,460],
[473,435,456,459,476,0,428,448,470],
[467,459,480,467,481,463,0,435,454],
[471,430,460,434,454,443,456,0,486],
[457,419,428,454,431,421,437,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,488,466,436,469,455,471,494],
[400,0,460,436,416,451,439,412,443],
[403,431,0,403,409,427,418,395,398],
[425,455,488,0,450,454,462,448,453],
[455,475,482,441,0,507,482,480,465],
[422,440,464,437,384,0,444,420,446],
[436,452,473,429,409,447,0,432,435],
[420,479,496,443,411,471,459,0,458],
[397,448,493,438,426,445,456,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,434,445,435,443,432,481,473],
[431,0,440,458,429,393,433,483,416],
[457,451,0,461,487,435,463,519,493],
[446,433,430,0,428,426,456,532,486],
[456,462,404,463,0,463,467,547,468],
[448,498,456,465,428,0,497,544,504],
[459,458,428,435,424,394,0,462,439],
[410,408,372,359,344,347,429,0,448],
[418,475,398,405,423,387,452,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,456,466,460,448,446,437,446],
[463,0,443,470,467,442,444,415,438],
[435,448,0,448,449,432,466,449,447],
[425,421,443,0,435,439,446,406,420],
[431,424,442,456,0,402,421,416,438],
[443,449,459,452,489,0,457,447,433],
[445,447,425,445,470,434,0,449,444],
[454,476,442,485,475,444,442,0,443],
[445,453,444,471,453,458,447,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,433,483,472,457,457,452,455],
[436,0,413,449,465,431,444,418,413],
[458,478,0,495,474,475,487,427,446],
[408,442,396,0,429,399,441,387,409],
[419,426,417,462,0,417,444,430,420],
[434,460,416,492,474,0,455,435,407],
[434,447,404,450,447,436,0,434,431],
[439,473,464,504,461,456,457,0,460],
[436,478,445,482,471,484,460,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,448,468,444,439,423,417,445],
[474,0,416,472,482,427,477,448,488],
[443,475,0,461,495,468,425,434,465],
[423,419,430,0,440,410,432,379,450],
[447,409,396,451,0,412,386,403,429],
[452,464,423,481,479,0,461,473,452],
[468,414,466,459,505,430,0,489,447],
[474,443,457,512,488,418,402,0,465],
[446,403,426,441,462,439,444,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,437,482,504,449,519,512,584],
[407,0,438,409,466,424,489,475,513],
[454,453,0,453,508,426,551,449,489],
[409,482,438,0,472,400,559,466,517],
[387,425,383,419,0,381,478,438,463],
[442,467,465,491,510,0,583,506,564],
[372,402,340,332,413,308,0,374,467],
[379,416,442,425,453,385,517,0,492],
[307,378,402,374,428,327,424,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,441,432,419,413,409,453,413],
[470,0,473,445,475,460,466,494,489],
[450,418,0,431,432,442,436,441,432],
[459,446,460,0,454,469,468,461,439],
[472,416,459,437,0,460,456,446,433],
[478,431,449,422,431,0,463,455,466],
[482,425,455,423,435,428,0,423,420],
[438,397,450,430,445,436,468,0,413],
[478,402,459,452,458,425,471,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,441,480,477,455,476,463,460],
[442,0,434,471,448,441,458,435,439],
[450,457,0,496,467,451,470,414,467],
[411,420,395,0,424,385,436,414,423],
[414,443,424,467,0,437,457,430,435],
[436,450,440,506,454,0,516,430,481],
[415,433,421,455,434,375,0,408,443],
[428,456,477,477,461,461,483,0,461],
[431,452,424,468,456,410,448,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,457,441,446,452,493,489,447],
[414,0,434,402,425,397,450,436,433],
[434,457,0,406,400,399,458,441,456],
[450,489,485,0,443,445,494,494,490],
[445,466,491,448,0,425,484,475,446],
[439,494,492,446,466,0,504,466,475],
[398,441,433,397,407,387,0,409,421],
[402,455,450,397,416,425,482,0,425],
[444,458,435,401,445,416,470,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,478,452,440,450,480,479,468],
[429,0,434,437,434,430,444,431,439],
[413,457,0,433,422,435,431,451,447],
[439,454,458,0,443,440,454,455,441],
[451,457,469,448,0,435,447,433,418],
[441,461,456,451,456,0,458,458,460],
[411,447,460,437,444,433,0,455,453],
[412,460,440,436,458,433,436,0,454],
[423,452,444,450,473,431,438,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,429,422,435,421,460,449,451],
[469,0,471,439,466,458,451,461,504],
[462,420,0,431,430,408,425,487,458],
[469,452,460,0,454,432,421,484,472],
[456,425,461,437,0,434,426,486,465],
[470,433,483,459,457,0,426,474,467],
[431,440,466,470,465,465,0,509,476],
[442,430,404,407,405,417,382,0,454],
[440,387,433,419,426,424,415,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,498,429,464,476,480,475,478],
[422,0,449,451,472,443,466,465,460],
[393,442,0,472,443,416,458,424,443],
[462,440,419,0,473,451,492,482,445],
[427,419,448,418,0,430,468,423,441],
[415,448,475,440,461,0,488,442,439],
[411,425,433,399,423,403,0,434,432],
[416,426,467,409,468,449,457,0,460],
[413,431,448,446,450,452,459,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,429,468,441,434,448,459,459],
[433,0,414,454,403,437,438,459,445],
[462,477,0,468,452,448,439,481,463],
[423,437,423,0,394,427,444,424,456],
[450,488,439,497,0,476,472,489,463],
[457,454,443,464,415,0,455,450,448],
[443,453,452,447,419,436,0,438,476],
[432,432,410,467,402,441,453,0,452],
[432,446,428,435,428,443,415,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,412,388,397,403,373,385,381],
[457,0,413,382,387,456,403,416,399],
[479,478,0,407,444,445,441,434,420],
[503,509,484,0,458,494,425,472,493],
[494,504,447,433,0,508,438,412,437],
[488,435,446,397,383,0,395,444,455],
[518,488,450,466,453,496,0,446,412],
[506,475,457,419,479,447,445,0,431],
[510,492,471,398,454,436,479,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,460,434,451,461,471,446,454],
[433,0,420,439,460,453,440,451,436],
[431,471,0,447,464,443,463,471,476],
[457,452,444,0,420,446,475,467,455],
[440,431,427,471,0,448,433,435,442],
[430,438,448,445,443,0,453,441,443],
[420,451,428,416,458,438,0,441,422],
[445,440,420,424,456,450,450,0,437],
[437,455,415,436,449,448,469,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,291,437,451,416,362,427,409],
[450,0,366,518,547,498,469,488,455],
[600,525,0,533,554,511,438,534,489],
[454,373,358,0,445,462,407,541,436],
[440,344,337,446,0,428,420,476,473],
[475,393,380,429,463,0,432,508,414],
[529,422,453,484,471,459,0,584,431],
[464,403,357,350,415,383,307,0,324],
[482,436,402,455,418,477,460,567,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,406,411,402,439,405,440,420],
[446,0,416,425,440,404,407,431,432],
[485,475,0,442,457,448,441,440,457],
[480,466,449,0,448,450,464,436,460],
[489,451,434,443,0,448,422,447,476],
[452,487,443,441,443,0,434,440,456],
[486,484,450,427,469,457,0,444,455],
[451,460,451,455,444,451,447,0,460],
[471,459,434,431,415,435,436,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,441,474,456,459,466,442,456],
[449,0,459,485,434,470,448,432,429],
[450,432,0,455,446,447,456,439,439],
[417,406,436,0,435,445,461,420,437],
[435,457,445,456,0,455,462,451,434],
[432,421,444,446,436,0,463,418,416],
[425,443,435,430,429,428,0,445,414],
[449,459,452,471,440,473,446,0,458],
[435,462,452,454,457,475,477,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,462,477,458,473,441,455,467],
[410,0,445,455,442,460,445,444,443],
[429,446,0,448,417,451,437,431,441],
[414,436,443,0,452,436,456,427,459],
[433,449,474,439,0,422,449,441,444],
[418,431,440,455,469,0,450,446,423],
[450,446,454,435,442,441,0,451,442],
[436,447,460,464,450,445,440,0,452],
[424,448,450,432,447,468,449,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,467,451,391,422,447,418,413],
[458,0,462,437,413,399,462,407,444],
[424,429,0,463,423,478,438,437,453],
[440,454,428,0,405,457,462,465,461],
[500,478,468,486,0,470,419,468,490],
[469,492,413,434,421,0,489,487,427],
[444,429,453,429,472,402,0,471,445],
[473,484,454,426,423,404,420,0,464],
[478,447,438,430,401,464,446,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,421,464,420,445,483,469,421],
[438,0,372,485,454,426,472,463,486],
[470,519,0,485,436,469,502,474,440],
[427,406,406,0,403,450,406,398,428],
[471,437,455,488,0,458,486,437,391],
[446,465,422,441,433,0,439,477,468],
[408,419,389,485,405,452,0,502,426],
[422,428,417,493,454,414,389,0,498],
[470,405,451,463,500,423,465,393,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,427,508,455,524,466,541,524],
[407,0,427,542,440,424,435,483,494],
[464,464,0,464,450,453,440,512,539],
[383,349,427,0,438,392,395,427,455],
[436,451,441,453,0,463,377,479,494],
[367,467,438,499,428,0,485,471,457],
[425,456,451,496,514,406,0,425,511],
[350,408,379,464,412,420,466,0,395],
[367,397,352,436,397,434,380,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,513,380,441,467,468,473,475,490],
[378,0,347,405,429,421,353,383,415],
[511,544,0,473,465,468,403,427,489],
[450,486,418,0,465,515,469,477,485],
[424,462,426,426,0,431,432,371,481],
[423,470,423,376,460,0,433,454,464],
[418,538,488,422,459,458,0,467,499],
[416,508,464,414,520,437,424,0,444],
[401,476,402,406,410,427,392,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,463,451,451,454,481,409,418],
[474,0,487,432,488,443,590,416,405],
[428,404,0,415,390,319,483,348,354],
[440,459,476,0,435,343,465,466,454],
[440,403,501,456,0,405,515,411,427],
[437,448,572,548,486,0,526,457,500],
[410,301,408,426,376,365,0,414,364],
[482,475,543,425,480,434,477,0,485],
[473,486,537,437,464,391,527,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,462,418,439,467,443,456,416],
[415,0,428,421,374,411,348,437,350],
[429,463,0,455,384,405,423,435,331],
[473,470,436,0,347,424,404,404,414],
[452,517,507,544,0,416,435,463,449],
[424,480,486,467,475,0,412,453,448],
[448,543,468,487,456,479,0,522,440],
[435,454,456,487,428,438,369,0,381],
[475,541,560,477,442,443,451,510,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,483,438,458,465,469,488,470],
[423,0,439,458,443,463,421,444,446],
[408,452,0,430,420,454,423,425,445],
[453,433,461,0,434,482,431,473,450],
[433,448,471,457,0,461,431,437,439],
[426,428,437,409,430,0,434,464,431],
[422,470,468,460,460,457,0,463,463],
[403,447,466,418,454,427,428,0,448],
[421,445,446,441,452,460,428,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,437,423,425,463,401,426,421],
[430,0,390,423,408,432,408,431,415],
[454,501,0,449,433,474,423,439,433],
[468,468,442,0,444,475,453,454,435],
[466,483,458,447,0,474,427,467,453],
[428,459,417,416,417,0,417,442,430],
[490,483,468,438,464,474,0,466,466],
[465,460,452,437,424,449,425,0,456],
[470,476,458,456,438,461,425,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,467,448,473,457,451,450,430],
[436,0,476,451,461,483,466,460,437],
[424,415,0,412,447,449,425,430,428],
[443,440,479,0,449,474,462,458,455],
[418,430,444,442,0,441,419,417,426],
[434,408,442,417,450,0,436,449,431],
[440,425,466,429,472,455,0,431,435],
[441,431,461,433,474,442,460,0,437],
[461,454,463,436,465,460,456,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,423,440,420,461,405,446,437],
[446,0,435,437,448,491,468,476,446],
[468,456,0,442,431,475,417,445,472],
[451,454,449,0,444,452,433,440,468],
[471,443,460,447,0,497,468,473,460],
[430,400,416,439,394,0,408,436,434],
[486,423,474,458,423,483,0,468,446],
[445,415,446,451,418,455,423,0,430],
[454,445,419,423,431,457,445,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,418,497,488,390,471,456,432],
[451,0,400,457,419,409,427,398,476],
[473,491,0,495,464,447,486,436,458],
[394,434,396,0,507,348,424,435,423],
[403,472,427,384,0,343,405,433,406],
[501,482,444,543,548,0,512,501,479],
[420,464,405,467,486,379,0,424,450],
[435,493,455,456,458,390,467,0,432],
[459,415,433,468,485,412,441,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,445,445,468,451,447,463,441],
[429,0,438,421,435,452,432,479,442],
[446,453,0,409,446,446,443,491,470],
[446,470,482,0,469,455,431,478,475],
[423,456,445,422,0,437,413,471,425],
[440,439,445,436,454,0,447,489,456],
[444,459,448,460,478,444,0,482,470],
[428,412,400,413,420,402,409,0,429],
[450,449,421,416,466,435,421,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,443,451,443,458,454,457,449],
[437,0,427,452,439,452,446,453,434],
[448,464,0,476,455,457,463,471,439],
[440,439,415,0,423,450,435,452,424],
[448,452,436,468,0,468,462,485,446],
[433,439,434,441,423,0,459,426,448],
[437,445,428,456,429,432,0,458,455],
[434,438,420,439,406,465,433,0,434],
[442,457,452,467,445,443,436,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,447,445,450,417,444,447,445],
[449,0,453,439,415,451,436,441,449],
[444,438,0,420,426,427,433,443,461],
[446,452,471,0,439,466,444,441,476],
[441,476,465,452,0,436,479,461,477],
[474,440,464,425,455,0,471,452,452],
[447,455,458,447,412,420,0,442,459],
[444,450,448,450,430,439,449,0,461],
[446,442,430,415,414,439,432,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,463,440,479,448,437,451,434],
[437,0,458,432,439,448,462,419,438],
[428,433,0,442,428,448,422,427,416],
[451,459,449,0,463,458,455,436,438],
[412,452,463,428,0,438,437,428,425],
[443,443,443,433,453,0,425,415,427],
[454,429,469,436,454,466,0,434,433],
[440,472,464,455,463,476,457,0,456],
[457,453,475,453,466,464,458,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,442,468,462,455,452,431,420],
[432,0,462,444,434,434,432,431,414],
[449,429,0,457,440,420,419,440,376],
[423,447,434,0,439,453,431,416,429],
[429,457,451,452,0,445,446,434,459],
[436,457,471,438,446,0,461,435,432],
[439,459,472,460,445,430,0,435,434],
[460,460,451,475,457,456,456,0,432],
[471,477,515,462,432,459,457,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,463,476,462,439,470,479,457],
[430,0,464,457,438,426,429,429,438],
[428,427,0,458,449,428,438,441,421],
[415,434,433,0,443,444,457,451,420],
[429,453,442,448,0,445,447,446,434],
[452,465,463,447,446,0,460,436,437],
[421,462,453,434,444,431,0,427,408],
[412,462,450,440,445,455,464,0,456],
[434,453,470,471,457,454,483,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,398,400,438,423,411,420,412],
[457,0,435,424,439,468,404,462,450],
[493,456,0,472,476,460,409,468,409],
[491,467,419,0,423,461,364,452,430],
[453,452,415,468,0,437,415,479,437],
[468,423,431,430,454,0,381,469,436],
[480,487,482,527,476,510,0,539,431],
[471,429,423,439,412,422,352,0,422],
[479,441,482,461,454,455,460,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,456,454,447,447,478,448,444],
[437,0,437,454,421,449,452,454,431],
[435,454,0,468,434,436,467,446,451],
[437,437,423,0,419,427,449,445,437],
[444,470,457,472,0,457,472,466,432],
[444,442,455,464,434,0,481,458,428],
[413,439,424,442,419,410,0,445,437],
[443,437,445,446,425,433,446,0,426],
[447,460,440,454,459,463,454,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,438,405,450,434,419,400,409],
[459,0,425,470,444,462,436,440,452],
[453,466,0,459,446,411,433,427,409],
[486,421,432,0,474,450,453,434,465],
[441,447,445,417,0,429,422,422,421],
[457,429,480,441,462,0,471,422,447],
[472,455,458,438,469,420,0,426,467],
[491,451,464,457,469,469,465,0,442],
[482,439,482,426,470,444,424,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,445,434,459,469,443,433,469],
[462,0,476,480,456,482,425,465,462],
[446,415,0,449,423,499,451,445,446],
[457,411,442,0,420,478,441,445,454],
[432,435,468,471,0,475,426,441,474],
[422,409,392,413,416,0,390,433,406],
[448,466,440,450,465,501,0,456,416],
[458,426,446,446,450,458,435,0,466],
[422,429,445,437,417,485,475,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,512,494,492,502,553,466,442,436],
[379,0,461,457,464,479,405,424,447],
[397,430,0,450,413,449,441,405,395],
[399,434,441,0,473,493,418,421,403],
[389,427,478,418,0,484,397,390,403],
[338,412,442,398,407,0,402,399,380],
[425,486,450,473,494,489,0,396,411],
[449,467,486,470,501,492,495,0,429],
[455,444,496,488,488,511,480,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,452,468,459,453,468,442,445],
[454,0,449,453,469,471,444,451,458],
[439,442,0,472,460,454,433,438,438],
[423,438,419,0,429,424,416,430,419],
[432,422,431,462,0,443,435,447,433],
[438,420,437,467,448,0,452,432,426],
[423,447,458,475,456,439,0,427,437],
[449,440,453,461,444,459,464,0,432],
[446,433,453,472,458,465,454,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,367,381,413,339,403,435,383],
[448,0,373,416,379,425,449,480,461],
[524,518,0,485,450,504,461,404,452],
[510,475,406,0,433,394,463,429,486],
[478,512,441,458,0,390,472,467,440],
[552,466,387,497,501,0,509,462,459],
[488,442,430,428,419,382,0,400,414],
[456,411,487,462,424,429,491,0,440],
[508,430,439,405,451,432,477,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,458,453,439,428,456,416,446],
[450,0,462,489,440,426,461,429,459],
[433,429,0,424,409,375,429,411,441],
[438,402,467,0,436,408,446,428,438],
[452,451,482,455,0,459,463,437,478],
[463,465,516,483,432,0,452,447,472],
[435,430,462,445,428,439,0,420,460],
[475,462,480,463,454,444,471,0,465],
[445,432,450,453,413,419,431,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,450,443,468,443,472,460,456],
[454,0,484,429,434,443,445,460,450],
[441,407,0,406,427,423,440,436,452],
[448,462,485,0,446,428,474,486,457],
[423,457,464,445,0,450,461,457,453],
[448,448,468,463,441,0,469,473,455],
[419,446,451,417,430,422,0,451,444],
[431,431,455,405,434,418,440,0,422],
[435,441,439,434,438,436,447,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,413,436,417,418,443,426,434],
[467,0,467,481,438,455,460,454,445],
[478,424,0,440,430,440,442,428,433],
[455,410,451,0,416,431,424,460,438],
[474,453,461,475,0,429,467,470,452],
[473,436,451,460,462,0,457,449,455],
[448,431,449,467,424,434,0,450,414],
[465,437,463,431,421,442,441,0,432],
[457,446,458,453,439,436,477,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,418,416,420,456,442,428,429],
[481,0,483,461,488,499,466,453,442],
[473,408,0,402,439,439,428,422,405],
[475,430,489,0,462,465,460,449,421],
[471,403,452,429,0,449,460,438,424],
[435,392,452,426,442,0,439,409,422],
[449,425,463,431,431,452,0,431,409],
[463,438,469,442,453,482,460,0,466],
[462,449,486,470,467,469,482,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,444,448,438,436,423,441,433],
[439,0,450,448,434,437,434,439,446],
[447,441,0,461,450,438,441,434,440],
[443,443,430,0,422,440,426,437,433],
[453,457,441,469,0,435,447,438,452],
[455,454,453,451,456,0,434,448,455],
[468,457,450,465,444,457,0,436,448],
[450,452,457,454,453,443,455,0,437],
[458,445,451,458,439,436,443,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,416,417,404,382,424,398,394],
[481,0,443,407,450,431,475,436,424],
[475,448,0,445,425,426,479,446,445],
[474,484,446,0,465,431,493,425,429],
[487,441,466,426,0,435,489,433,442],
[509,460,465,460,456,0,478,445,435],
[467,416,412,398,402,413,0,439,394],
[493,455,445,466,458,446,452,0,481],
[497,467,446,462,449,456,497,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,431,441,466,446,475,421,428],
[446,0,441,432,452,436,460,443,447],
[460,450,0,433,425,457,434,470,460],
[450,459,458,0,449,402,459,447,439],
[425,439,466,442,0,427,434,461,471],
[445,455,434,489,464,0,466,482,473],
[416,431,457,432,457,425,0,459,459],
[470,448,421,444,430,409,432,0,419],
[463,444,431,452,420,418,432,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,575,470,451,481,506,399,430,509],
[316,0,363,433,435,408,352,407,438],
[421,528,0,434,486,479,419,462,506],
[440,458,457,0,481,520,412,468,480],
[410,456,405,410,0,479,480,428,511],
[385,483,412,371,412,0,400,410,441],
[492,539,472,479,411,491,0,484,513],
[461,484,429,423,463,481,407,0,498],
[382,453,385,411,380,450,378,393,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,458,457,472,475,483,435,445],
[441,0,438,459,447,467,450,434,438],
[433,453,0,436,443,432,461,460,434],
[434,432,455,0,473,463,473,444,436],
[419,444,448,418,0,447,441,426,433],
[416,424,459,428,444,0,461,444,434],
[408,441,430,418,450,430,0,416,408],
[456,457,431,447,465,447,475,0,453],
[446,453,457,455,458,457,483,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,427,449,501,460,461,463,477],
[461,0,486,460,457,409,506,455,435],
[464,405,0,461,405,421,458,425,422],
[442,431,430,0,464,435,483,461,446],
[390,434,486,427,0,396,460,443,429],
[431,482,470,456,495,0,500,502,476],
[430,385,433,408,431,391,0,429,423],
[428,436,466,430,448,389,462,0,422],
[414,456,469,445,462,415,468,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,434,503,491,458,459,430,451],
[468,0,433,462,493,457,457,473,474],
[457,458,0,505,490,511,469,436,457],
[388,429,386,0,431,434,419,431,427],
[400,398,401,460,0,455,437,395,446],
[433,434,380,457,436,0,451,401,456],
[432,434,422,472,454,440,0,435,487],
[461,418,455,460,496,490,456,0,485],
[440,417,434,464,445,435,404,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,396,418,449,415,393,413,439],
[467,0,431,474,462,452,435,437,402],
[495,460,0,473,484,457,454,443,448],
[473,417,418,0,477,490,429,466,433],
[442,429,407,414,0,441,439,416,403],
[476,439,434,401,450,0,425,408,402],
[498,456,437,462,452,466,0,453,408],
[478,454,448,425,475,483,438,0,421],
[452,489,443,458,488,489,483,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,443,442,452,447,477,451,449],
[443,0,438,451,415,409,475,457,445],
[448,453,0,472,435,429,439,470,448],
[449,440,419,0,430,416,471,449,434],
[439,476,456,461,0,375,463,496,458],
[444,482,462,475,516,0,506,490,474],
[414,416,452,420,428,385,0,459,430],
[440,434,421,442,395,401,432,0,427],
[442,446,443,457,433,417,461,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,517,472,518,469,420,416,418],
[442,0,469,454,541,541,468,493,493],
[374,422,0,377,540,446,354,444,352],
[419,437,514,0,514,538,466,460,392],
[373,350,351,377,0,421,323,393,326],
[422,350,445,353,470,0,352,394,374],
[471,423,537,425,568,539,0,421,469],
[475,398,447,431,498,497,470,0,446],
[473,398,539,499,565,517,422,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,436,475,478,474,439,446,455],
[437,0,432,478,453,453,419,451,429],
[455,459,0,468,449,440,435,441,434],
[416,413,423,0,441,425,415,417,431],
[413,438,442,450,0,451,461,448,428],
[417,438,451,466,440,0,444,445,428],
[452,472,456,476,430,447,0,452,432],
[445,440,450,474,443,446,439,0,433],
[436,462,457,460,463,463,459,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,431,469,446,435,461,460,489],
[473,0,456,443,456,433,460,484,492],
[460,435,0,469,451,444,466,470,486],
[422,448,422,0,471,446,452,470,496],
[445,435,440,420,0,413,450,442,472],
[456,458,447,445,478,0,483,462,491],
[430,431,425,439,441,408,0,465,491],
[431,407,421,421,449,429,426,0,472],
[402,399,405,395,419,400,400,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,371,445,370,592,370,446,519,519],
[520,0,445,297,519,518,521,446,296],
[446,446,0,371,594,519,373,223,298],
[521,594,520,0,742,445,521,299,446],
[299,372,297,149,0,298,224,224,222],
[521,373,372,446,593,0,522,224,447],
[445,370,518,370,667,369,0,295,295],
[372,445,668,592,667,667,596,0,444],
[372,595,593,445,669,444,596,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,452,435,436,433,440,443,452],
[463,0,464,424,462,441,427,451,413],
[439,427,0,453,424,402,420,425,439],
[456,467,438,0,441,465,441,456,461],
[455,429,467,450,0,463,453,433,435],
[458,450,489,426,428,0,415,435,432],
[451,464,471,450,438,476,0,459,457],
[448,440,466,435,458,456,432,0,437],
[439,478,452,430,456,459,434,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,530,542,487,412,498,430,441,479],
[361,0,379,349,318,398,329,362,374],
[349,512,0,502,388,448,414,378,441],
[404,542,389,0,373,446,412,404,439],
[479,573,503,518,0,476,445,491,506],
[393,493,443,445,415,0,447,444,375],
[461,562,477,479,446,444,0,493,425],
[450,529,513,487,400,447,398,0,448],
[412,517,450,452,385,516,466,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,395,386,428,424,378,405,446],
[448,0,414,419,464,410,447,421,459],
[496,477,0,454,475,404,472,463,463],
[505,472,437,0,517,452,495,488,467],
[463,427,416,374,0,426,450,430,480],
[467,481,487,439,465,0,470,433,476],
[513,444,419,396,441,421,0,436,411],
[486,470,428,403,461,458,455,0,441],
[445,432,428,424,411,415,480,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,384,478,435,401,443,485,443],
[470,0,465,457,445,413,447,473,418],
[507,426,0,450,472,413,473,484,474],
[413,434,441,0,455,414,416,465,479],
[456,446,419,436,0,480,410,468,500],
[490,478,478,477,411,0,482,477,472],
[448,444,418,475,481,409,0,451,490],
[406,418,407,426,423,414,440,0,465],
[448,473,417,412,391,419,401,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,434,399,425,466,465,411,420],
[421,0,424,394,402,454,435,372,391],
[457,467,0,428,473,475,457,414,453],
[492,497,463,0,445,507,467,420,490],
[466,489,418,446,0,488,449,446,493],
[425,437,416,384,403,0,420,380,432],
[426,456,434,424,442,471,0,406,398],
[480,519,477,471,445,511,485,0,490],
[471,500,438,401,398,459,493,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,442,440,389,401,425,455,411],
[461,0,472,476,434,453,447,453,456],
[449,419,0,442,471,443,446,455,445],
[451,415,449,0,425,464,414,439,419],
[502,457,420,466,0,461,453,483,454],
[490,438,448,427,430,0,435,435,405],
[466,444,445,477,438,456,0,438,438],
[436,438,436,452,408,456,453,0,442],
[480,435,446,472,437,486,453,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,398,436,418,429,458,449,416],
[457,0,412,448,435,462,451,449,441],
[493,479,0,478,494,440,480,465,461],
[455,443,413,0,448,444,469,455,461],
[473,456,397,443,0,430,453,449,443],
[462,429,451,447,461,0,468,463,446],
[433,440,411,422,438,423,0,413,435],
[442,442,426,436,442,428,478,0,468],
[475,450,430,430,448,445,456,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,461,443,444,490,464,446,444],
[411,0,415,407,408,418,398,386,368],
[430,476,0,418,419,454,420,432,421],
[448,484,473,0,483,471,435,459,446],
[447,483,472,408,0,450,463,434,421],
[401,473,437,420,441,0,452,419,421],
[427,493,471,456,428,439,0,466,451],
[445,505,459,432,457,472,425,0,422],
[447,523,470,445,470,470,440,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,507,408,462,411,418,506,444],
[438,0,486,458,517,462,484,491,496],
[384,405,0,417,469,445,449,448,437],
[483,433,474,0,473,494,462,441,430],
[429,374,422,418,0,429,405,492,455],
[480,429,446,397,462,0,455,476,431],
[473,407,442,429,486,436,0,481,429],
[385,400,443,450,399,415,410,0,400],
[447,395,454,461,436,460,462,491,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,425,378,409,427,433,418,424],
[466,0,401,378,442,393,366,418,410],
[466,490,0,446,388,448,440,429,513],
[513,513,445,0,429,438,445,409,470],
[482,449,503,462,0,417,449,466,491],
[464,498,443,453,474,0,404,425,449],
[458,525,451,446,442,487,0,409,460],
[473,473,462,482,425,466,482,0,464],
[467,481,378,421,400,442,431,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,442,446,456,499,471,431,439],
[445,0,473,415,456,475,476,413,417],
[449,418,0,432,403,480,436,402,418],
[445,476,459,0,438,499,448,426,416],
[435,435,488,453,0,483,424,435,391],
[392,416,411,392,408,0,439,353,406],
[420,415,455,443,467,452,0,463,406],
[460,478,489,465,456,538,428,0,463],
[452,474,473,475,500,485,485,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,452,466,466,475,438,482,493],
[411,0,449,431,444,416,434,420,465],
[439,442,0,447,473,446,456,464,489],
[425,460,444,0,462,421,432,415,475],
[425,447,418,429,0,423,437,447,470],
[416,475,445,470,468,0,469,468,469],
[453,457,435,459,454,422,0,425,481],
[409,471,427,476,444,423,466,0,496],
[398,426,402,416,421,422,410,395,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,430,428,436,438,429,483,449],
[454,0,436,462,457,449,488,448,469],
[461,455,0,448,437,453,452,458,428],
[463,429,443,0,442,460,448,462,472],
[455,434,454,449,0,443,446,463,458],
[453,442,438,431,448,0,478,435,461],
[462,403,439,443,445,413,0,460,470],
[408,443,433,429,428,456,431,0,467],
[442,422,463,419,433,430,421,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,440,488,420,488,429,426,486],
[457,0,464,463,450,466,426,431,485],
[451,427,0,421,455,430,460,437,462],
[403,428,470,0,431,466,430,449,429],
[471,441,436,460,0,488,410,444,484],
[403,425,461,425,403,0,406,401,453],
[462,465,431,461,481,485,0,489,452],
[465,460,454,442,447,490,402,0,464],
[405,406,429,462,407,438,439,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,435,383,422,407,440,384,400],
[485,0,456,435,456,424,482,421,406],
[456,435,0,409,467,423,455,426,411],
[508,456,482,0,476,462,487,455,434],
[469,435,424,415,0,414,434,403,387],
[484,467,468,429,477,0,481,459,446],
[451,409,436,404,457,410,0,453,410],
[507,470,465,436,488,432,438,0,445],
[491,485,480,457,504,445,481,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,413,440,463,442,421,448,477],
[431,0,399,400,447,441,406,463,474],
[478,492,0,491,522,479,458,440,435],
[451,491,400,0,485,443,389,464,509],
[428,444,369,406,0,395,379,422,401],
[449,450,412,448,496,0,383,406,455],
[470,485,433,502,512,508,0,503,465],
[443,428,451,427,469,485,388,0,459],
[414,417,456,382,490,436,426,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,434,463,438,452,447,441,432],
[412,0,410,434,432,434,447,430,425],
[457,481,0,447,421,447,469,461,433],
[428,457,444,0,428,409,442,418,429],
[453,459,470,463,0,442,471,433,447],
[439,457,444,482,449,0,489,457,464],
[444,444,422,449,420,402,0,426,414],
[450,461,430,473,458,434,465,0,428],
[459,466,458,462,444,427,477,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,467,419,445,445,436,394,420],
[451,0,443,446,446,488,447,436,483],
[424,448,0,498,469,466,458,443,458],
[472,445,393,0,447,449,427,394,453],
[446,445,422,444,0,473,442,415,446],
[446,403,425,442,418,0,442,411,445],
[455,444,433,464,449,449,0,425,455],
[497,455,448,497,476,480,466,0,445],
[471,408,433,438,445,446,436,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,460,450,464,441,438,438,427],
[441,0,448,439,418,421,431,438,437],
[431,443,0,453,437,419,455,415,443],
[441,452,438,0,433,435,425,432,447],
[427,473,454,458,0,463,459,445,459],
[450,470,472,456,428,0,446,418,453],
[453,460,436,466,432,445,0,443,459],
[453,453,476,459,446,473,448,0,427],
[464,454,448,444,432,438,432,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,442,434,436,429,428,432,441],
[449,0,448,427,460,432,451,437,450],
[449,443,0,444,436,424,423,449,440],
[457,464,447,0,451,459,421,460,456],
[455,431,455,440,0,435,428,441,434],
[462,459,467,432,456,0,447,449,449],
[463,440,468,470,463,444,0,454,448],
[459,454,442,431,450,442,437,0,428],
[450,441,451,435,457,442,443,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,417,467,454,466,444,454,489],
[451,0,456,482,500,504,486,431,483],
[474,435,0,495,518,490,475,445,495],
[424,409,396,0,470,437,403,402,460],
[437,391,373,421,0,440,424,446,428],
[425,387,401,454,451,0,453,446,429],
[447,405,416,488,467,438,0,439,435],
[437,460,446,489,445,445,452,0,471],
[402,408,396,431,463,462,456,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,421,463,376,405,436,476,429],
[560,0,505,565,435,486,507,522,564],
[470,386,0,489,423,370,487,516,381],
[428,326,402,0,352,412,360,431,409],
[515,456,468,539,0,434,517,493,469],
[486,405,521,479,457,0,437,445,487],
[455,384,404,531,374,454,0,463,484],
[415,369,375,460,398,446,428,0,437],
[462,327,510,482,422,404,407,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,480,461,489,429,509,494,463],
[400,0,436,467,478,452,532,466,457],
[411,455,0,471,463,447,496,470,437],
[430,424,420,0,471,432,457,494,425],
[402,413,428,420,0,439,461,493,483],
[462,439,444,459,452,0,477,478,476],
[382,359,395,434,430,414,0,464,401],
[397,425,421,397,398,413,427,0,391],
[428,434,454,466,408,415,490,500,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,426,419,443,420,438,420,462],
[454,0,444,443,473,459,446,435,471],
[465,447,0,455,446,450,471,445,471],
[472,448,436,0,468,432,462,451,471],
[448,418,445,423,0,444,455,424,456],
[471,432,441,459,447,0,435,445,488],
[453,445,420,429,436,456,0,415,469],
[471,456,446,440,467,446,476,0,461],
[429,420,420,420,435,403,422,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,401,442,470,395,466,495,454],
[389,0,378,442,446,413,435,428,422],
[490,513,0,454,508,468,483,534,433],
[449,449,437,0,419,400,423,445,415],
[421,445,383,472,0,420,432,444,424],
[496,478,423,491,471,0,483,502,432],
[425,456,408,468,459,408,0,455,388],
[396,463,357,446,447,389,436,0,415],
[437,469,458,476,467,459,503,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,452,463,445,461,459,440,406],
[471,0,442,441,438,491,469,457,417],
[439,449,0,448,409,442,444,456,436],
[428,450,443,0,414,466,407,454,419],
[446,453,482,477,0,486,444,501,431],
[430,400,449,425,405,0,401,434,410],
[432,422,447,484,447,490,0,479,446],
[451,434,435,437,390,457,412,0,412],
[485,474,455,472,460,481,445,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,484,444,388,444,571,460,441],
[414,0,490,370,410,489,541,441,390],
[407,401,0,347,406,387,502,382,425],
[447,521,544,0,448,412,575,481,522],
[503,481,485,443,0,466,611,462,502],
[447,402,504,479,425,0,571,477,461],
[320,350,389,316,280,320,0,444,313],
[431,450,509,410,429,414,447,0,483],
[450,501,466,369,389,430,578,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,359,428,439,385,408,401,388],
[455,0,337,424,452,338,438,428,446],
[532,554,0,485,470,411,466,463,415],
[463,467,406,0,456,378,418,445,382],
[452,439,421,435,0,446,472,413,386],
[506,553,480,513,445,0,448,438,438],
[483,453,425,473,419,443,0,443,447],
[490,463,428,446,478,453,448,0,469],
[503,445,476,509,505,453,444,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,410,431,429,462,425,435,409],
[452,0,431,429,437,456,457,456,434],
[481,460,0,461,452,482,472,440,451],
[460,462,430,0,453,465,437,424,427],
[462,454,439,438,0,474,418,443,444],
[429,435,409,426,417,0,429,420,405],
[466,434,419,454,473,462,0,458,442],
[456,435,451,467,448,471,433,0,440],
[482,457,440,464,447,486,449,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,460,439,440,463,471,453,457],
[474,0,460,442,477,473,448,447,448],
[431,431,0,418,436,438,434,398,403],
[452,449,473,0,478,467,449,455,434],
[451,414,455,413,0,449,435,409,432],
[428,418,453,424,442,0,433,410,429],
[420,443,457,442,456,458,0,419,468],
[438,444,493,436,482,481,472,0,445],
[434,443,488,457,459,462,423,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,432,443,413,451,461,430,418],
[428,0,425,463,428,449,455,424,419],
[459,466,0,439,443,474,432,429,451],
[448,428,452,0,448,465,451,452,441],
[478,463,448,443,0,479,505,473,460],
[440,442,417,426,412,0,442,418,427],
[430,436,459,440,386,449,0,434,431],
[461,467,462,439,418,473,457,0,425],
[473,472,440,450,431,464,460,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,424,397,404,452,425,447,434],
[410,0,419,407,419,416,402,390,422],
[467,472,0,455,441,426,437,439,469],
[494,484,436,0,440,494,468,462,478],
[487,472,450,451,0,442,450,460,497],
[439,475,465,397,449,0,466,469,484],
[466,489,454,423,441,425,0,417,468],
[444,501,452,429,431,422,474,0,466],
[457,469,422,413,394,407,423,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,406,456,424,437,419,448,414],
[468,0,441,456,444,450,463,459,441],
[485,450,0,452,442,463,443,458,438],
[435,435,439,0,433,426,430,437,421],
[467,447,449,458,0,436,447,449,447],
[454,441,428,465,455,0,450,438,428],
[472,428,448,461,444,441,0,454,428],
[443,432,433,454,442,453,437,0,445],
[477,450,453,470,444,463,463,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,401,411,485,437,432,463,407],
[478,0,451,446,481,470,460,442,446],
[490,440,0,449,483,489,422,455,440],
[480,445,442,0,427,458,425,448,410],
[406,410,408,464,0,450,418,459,431],
[454,421,402,433,441,0,404,453,399],
[459,431,469,466,473,487,0,497,416],
[428,449,436,443,432,438,394,0,403],
[484,445,451,481,460,492,475,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,432,427,406,443,445,447,430],
[456,0,453,440,439,437,444,448,440],
[459,438,0,443,446,438,459,436,427],
[464,451,448,0,443,455,476,449,435],
[485,452,445,448,0,461,483,450,454],
[448,454,453,436,430,0,459,433,427],
[446,447,432,415,408,432,0,431,420],
[444,443,455,442,441,458,460,0,445],
[461,451,464,456,437,464,471,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,465,433,460,427,430,427,454],
[414,0,437,421,420,410,430,422,446],
[426,454,0,420,457,415,430,421,439],
[458,470,471,0,480,446,438,464,463],
[431,471,434,411,0,424,459,446,453],
[464,481,476,445,467,0,445,429,472],
[461,461,461,453,432,446,0,454,452],
[464,469,470,427,445,462,437,0,468],
[437,445,452,428,438,419,439,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,448,449,480,438,428,379,467],
[459,0,456,459,488,459,437,431,477],
[443,435,0,456,474,438,443,446,457],
[442,432,435,0,488,447,429,421,479],
[411,403,417,403,0,430,398,385,438],
[453,432,453,444,461,0,455,437,460],
[463,454,448,462,493,436,0,430,450],
[512,460,445,470,506,454,461,0,489],
[424,414,434,412,453,431,441,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,470,477,453,476,430,453,452],
[438,0,453,449,450,447,439,443,447],
[421,438,0,420,433,470,447,429,421],
[414,442,471,0,462,446,425,441,452],
[438,441,458,429,0,436,403,442,442],
[415,444,421,445,455,0,396,419,433],
[461,452,444,466,488,495,0,447,461],
[438,448,462,450,449,472,444,0,465],
[439,444,470,439,449,458,430,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,431,457,427,436,435,476,443],
[482,0,456,456,463,466,428,494,482],
[460,435,0,446,421,440,428,491,433],
[434,435,445,0,437,451,456,480,440],
[464,428,470,454,0,443,430,450,454],
[455,425,451,440,448,0,430,455,417],
[456,463,463,435,461,461,0,483,449],
[415,397,400,411,441,436,408,0,432],
[448,409,458,451,437,474,442,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,448,431,453,450,446,434,448],
[440,0,435,455,466,456,444,455,481],
[443,456,0,426,453,430,457,431,439],
[460,436,465,0,471,456,457,423,452],
[438,425,438,420,0,459,437,435,458],
[441,435,461,435,432,0,452,456,478],
[445,447,434,434,454,439,0,425,456],
[457,436,460,468,456,435,466,0,460],
[443,410,452,439,433,413,435,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,427,461,430,446,435,461,432],
[450,0,446,474,440,445,449,470,463],
[464,445,0,478,449,454,454,453,447],
[430,417,413,0,430,430,405,440,433],
[461,451,442,461,0,436,428,463,441],
[445,446,437,461,455,0,440,447,440],
[456,442,437,486,463,451,0,461,458],
[430,421,438,451,428,444,430,0,450],
[459,428,444,458,450,451,433,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,428,442,480,450,449,404,447],
[433,0,452,460,478,444,432,411,443],
[463,439,0,481,509,482,455,443,458],
[449,431,410,0,423,458,472,419,457],
[411,413,382,468,0,436,455,384,415],
[441,447,409,433,455,0,459,421,458],
[442,459,436,419,436,432,0,389,422],
[487,480,448,472,507,470,502,0,436],
[444,448,433,434,476,433,469,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,493,402,499,437,460,449,467],
[400,0,408,385,431,389,386,388,430],
[398,483,0,421,437,405,395,428,435],
[489,506,470,0,465,471,461,441,463],
[392,460,454,426,0,460,440,394,468],
[454,502,486,420,431,0,425,420,488],
[431,505,496,430,451,466,0,451,504],
[442,503,463,450,497,471,440,0,514],
[424,461,456,428,423,403,387,377,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,509,464,436,502,451,473,425],
[416,0,468,437,428,472,415,451,400],
[382,423,0,411,377,431,394,411,378],
[427,454,480,0,450,462,428,447,430],
[455,463,514,441,0,463,448,489,431],
[389,419,460,429,428,0,408,462,406],
[440,476,497,463,443,483,0,494,447],
[418,440,480,444,402,429,397,0,402],
[466,491,513,461,460,485,444,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,471,449,453,432,441,464,470],
[469,0,487,439,477,456,460,470,475],
[420,404,0,427,439,435,426,444,444],
[442,452,464,0,469,445,472,455,469],
[438,414,452,422,0,444,433,449,451],
[459,435,456,446,447,0,453,452,447],
[450,431,465,419,458,438,0,457,464],
[427,421,447,436,442,439,434,0,442],
[421,416,447,422,440,444,427,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,440,455,432,469,410,458,447],
[449,0,454,445,460,465,444,470,437],
[451,437,0,448,442,470,431,475,439],
[436,446,443,0,458,442,420,464,439],
[459,431,449,433,0,477,418,450,443],
[422,426,421,449,414,0,418,448,421],
[481,447,460,471,473,473,0,463,425],
[433,421,416,427,441,443,428,0,407],
[444,454,452,452,448,470,466,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,465,431,477,437,438,441,460],
[427,0,442,420,446,431,417,429,436],
[426,449,0,441,467,455,434,444,464],
[460,471,450,0,472,441,442,446,461],
[414,445,424,419,0,424,412,434,405],
[454,460,436,450,467,0,447,449,451],
[453,474,457,449,479,444,0,450,445],
[450,462,447,445,457,442,441,0,449],
[431,455,427,430,486,440,446,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,516,461,353,378,487,413,435,512],
[375,0,430,376,351,381,354,490,432],
[430,461,0,512,349,543,436,434,539],
[538,515,379,0,461,458,489,516,511],
[513,540,542,430,0,409,462,490,517],
[404,510,348,433,482,0,351,512,485],
[478,537,455,402,429,540,0,512,510],
[456,401,457,375,401,379,379,0,431],
[379,459,352,380,374,406,381,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,399,513,360,451,394,493,441],
[537,0,464,558,510,550,443,504,492],
[492,427,0,549,535,529,514,559,519],
[378,333,342,0,407,435,413,393,408],
[531,381,356,484,0,470,436,463,466],
[440,341,362,456,421,0,417,466,436],
[497,448,377,478,455,474,0,492,498],
[398,387,332,498,428,425,399,0,404],
[450,399,372,483,425,455,393,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,461,424,478,432,444,435,439],
[483,0,464,487,431,455,464,465,481],
[430,427,0,473,409,409,475,429,455],
[467,404,418,0,404,430,476,438,455],
[413,460,482,487,0,487,479,477,489],
[459,436,482,461,404,0,438,430,455],
[447,427,416,415,412,453,0,451,472],
[456,426,462,453,414,461,440,0,483],
[452,410,436,436,402,436,419,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,481,419,448,442,474,455,408],
[444,0,479,409,397,447,465,444,420],
[410,412,0,426,420,433,407,439,445],
[472,482,465,0,413,469,464,488,456],
[443,494,471,478,0,484,492,481,454],
[449,444,458,422,407,0,482,454,431],
[417,426,484,427,399,409,0,412,383],
[436,447,452,403,410,437,479,0,431],
[483,471,446,435,437,460,508,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,421,408,437,429,418,440,428],
[489,0,456,462,489,463,437,468,460],
[470,435,0,432,455,438,436,455,434],
[483,429,459,0,471,445,437,461,454],
[454,402,436,420,0,420,424,453,437],
[462,428,453,446,471,0,451,477,436],
[473,454,455,454,467,440,0,442,431],
[451,423,436,430,438,414,449,0,403],
[463,431,457,437,454,455,460,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,443,432,451,469,477,480,451],
[436,0,452,441,430,439,451,464,451],
[448,439,0,441,455,476,455,453,474],
[459,450,450,0,450,451,456,483,439],
[440,461,436,441,0,442,459,467,452],
[422,452,415,440,449,0,470,463,461],
[414,440,436,435,432,421,0,454,408],
[411,427,438,408,424,428,437,0,435],
[440,440,417,452,439,430,483,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,456,458,452,450,438,434,449],
[443,0,467,459,467,447,432,453,453],
[435,424,0,461,452,434,454,425,439],
[433,432,430,0,456,445,449,431,428],
[439,424,439,435,0,431,426,427,430],
[441,444,457,446,460,0,468,433,437],
[453,459,437,442,465,423,0,429,430],
[457,438,466,460,464,458,462,0,463],
[442,438,452,463,461,454,461,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,431,416,426,407,410,388,388],
[462,0,443,433,446,458,431,422,420],
[460,448,0,427,420,472,442,469,424],
[475,458,464,0,411,457,442,454,436],
[465,445,471,480,0,472,442,463,462],
[484,433,419,434,419,0,428,445,422],
[481,460,449,449,449,463,0,435,430],
[503,469,422,437,428,446,456,0,418],
[503,471,467,455,429,469,461,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,418,440,431,429,437,424,426],
[441,0,432,442,427,434,447,442,453],
[473,459,0,437,444,449,461,455,433],
[451,449,454,0,448,428,471,447,441],
[460,464,447,443,0,445,459,458,426],
[462,457,442,463,446,0,447,465,455],
[454,444,430,420,432,444,0,442,456],
[467,449,436,444,433,426,449,0,440],
[465,438,458,450,465,436,435,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,444,473,416,422,411,397,448],
[433,0,448,433,406,403,397,413,416],
[447,443,0,423,449,424,462,446,434],
[418,458,468,0,430,436,403,438,432],
[475,485,442,461,0,380,488,440,459],
[469,488,467,455,511,0,439,444,488],
[480,494,429,488,403,452,0,455,481],
[494,478,445,453,451,447,436,0,445],
[443,475,457,459,432,403,410,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,436,420,330,423,387,446,383],
[481,0,510,489,425,451,467,490,461],
[455,381,0,491,447,488,529,500,485],
[471,402,400,0,386,412,435,434,345],
[561,466,444,505,0,535,495,495,492],
[468,440,403,479,356,0,413,399,435],
[504,424,362,456,396,478,0,440,431],
[445,401,391,457,396,492,451,0,410],
[508,430,406,546,399,456,460,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,464,490,491,507,455,472,415],
[450,0,444,454,449,469,467,466,465],
[427,447,0,477,517,455,475,459,462],
[401,437,414,0,436,413,438,448,404],
[400,442,374,455,0,457,432,466,406],
[384,422,436,478,434,0,414,438,426],
[436,424,416,453,459,477,0,454,443],
[419,425,432,443,425,453,437,0,418],
[476,426,429,487,485,465,448,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,547,598,432,491,468,494,505],
[373,0,489,492,443,454,478,425,439],
[344,402,0,498,418,466,416,388,422],
[293,399,393,0,368,413,376,335,384],
[459,448,473,523,0,490,479,437,468],
[400,437,425,478,401,0,428,439,449],
[423,413,475,515,412,463,0,447,412],
[397,466,503,556,454,452,444,0,529],
[386,452,469,507,423,442,479,362,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,473,444,454,477,434,447,431],
[412,0,459,448,430,444,431,438,444],
[418,432,0,411,409,433,434,453,434],
[447,443,480,0,421,445,451,405,406],
[437,461,482,470,0,481,497,465,453],
[414,447,458,446,410,0,416,423,446],
[457,460,457,440,394,475,0,453,410],
[444,453,438,486,426,468,438,0,429],
[460,447,457,485,438,445,481,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,509,461,475,460,472,450,431],
[445,0,451,450,454,456,472,482,428],
[382,440,0,421,427,399,476,470,397],
[430,441,470,0,460,449,468,504,438],
[416,437,464,431,0,413,429,436,418],
[431,435,492,442,478,0,465,490,456],
[419,419,415,423,462,426,0,441,414],
[441,409,421,387,455,401,450,0,419],
[460,463,494,453,473,435,477,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,435,421,452,438,410,443,437],
[445,0,441,391,459,458,415,477,479],
[456,450,0,472,486,449,420,462,425],
[470,500,419,0,430,419,433,495,455],
[439,432,405,461,0,447,447,485,459],
[453,433,442,472,444,0,393,474,394],
[481,476,471,458,444,498,0,499,458],
[448,414,429,396,406,417,392,0,457],
[454,412,466,436,432,497,433,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,466,460,451,467,438,464,453],
[434,0,452,444,458,454,427,480,433],
[425,439,0,455,443,461,446,459,435],
[431,447,436,0,431,455,417,462,438],
[440,433,448,460,0,436,434,464,411],
[424,437,430,436,455,0,421,458,440],
[453,464,445,474,457,470,0,466,465],
[427,411,432,429,427,433,425,0,423],
[438,458,456,453,480,451,426,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,557,221,444,332,446,556,333,444],
[334,0,222,222,111,221,334,111,223],
[670,669,0,556,446,558,557,448,334],
[447,669,335,0,223,558,447,448,447],
[559,780,445,668,0,668,780,558,447],
[445,670,333,333,223,0,445,333,334],
[335,557,334,444,111,446,0,336,334],
[558,780,443,443,333,558,555,0,445],
[447,668,557,444,444,557,557,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,485,456,477,460,433,471,451],
[421,0,426,447,452,435,428,455,425],
[406,465,0,456,433,433,426,438,441],
[435,444,435,0,411,431,421,437,434],
[414,439,458,480,0,432,448,423,443],
[431,456,458,460,459,0,426,455,454],
[458,463,465,470,443,465,0,453,425],
[420,436,453,454,468,436,438,0,428],
[440,466,450,457,448,437,466,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,439,439,436,429,437,435,442],
[442,0,449,425,422,416,410,418,430],
[452,442,0,422,442,421,447,418,436],
[452,466,469,0,444,428,453,444,453],
[455,469,449,447,0,441,430,451,463],
[462,475,470,463,450,0,444,455,465],
[454,481,444,438,461,447,0,465,456],
[456,473,473,447,440,436,426,0,450],
[449,461,455,438,428,426,435,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,457,456,454,464,463,442,473],
[445,0,431,475,461,484,467,459,462],
[434,460,0,465,434,474,430,437,441],
[435,416,426,0,426,440,429,423,448],
[437,430,457,465,0,463,447,424,432],
[427,407,417,451,428,0,421,436,442],
[428,424,461,462,444,470,0,457,456],
[449,432,454,468,467,455,434,0,448],
[418,429,450,443,459,449,435,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,396,519,561,540,497,395,412],
[497,0,414,456,539,538,455,495,519],
[495,477,0,455,497,452,477,413,493],
[372,435,436,0,459,374,436,352,392],
[330,352,394,432,0,477,372,312,410],
[351,353,439,517,414,0,394,373,408],
[394,436,414,455,519,497,0,456,411],
[496,396,478,539,579,518,435,0,411],
[479,372,398,499,481,483,480,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,387,389,415,422,424,426,417,353],
[504,0,418,438,409,426,468,432,380],
[502,473,0,519,448,493,528,439,482],
[476,453,372,0,428,489,424,415,362],
[469,482,443,463,0,468,488,453,349],
[467,465,398,402,423,0,419,401,375],
[465,423,363,467,403,472,0,439,403],
[474,459,452,476,438,490,452,0,401],
[538,511,409,529,542,516,488,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,406,412,394,387,372,413,453,398],
[485,0,436,405,425,445,476,454,426],
[479,455,0,441,468,457,474,479,486],
[497,486,450,0,507,424,508,498,461],
[504,466,423,384,0,415,444,445,455],
[519,446,434,467,476,0,481,500,484],
[478,415,417,383,447,410,0,454,464],
[438,437,412,393,446,391,437,0,405],
[493,465,405,430,436,407,427,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,445,410,365,448,446,435,431],
[454,0,458,456,445,456,482,467,491],
[446,433,0,417,417,462,468,452,462],
[481,435,474,0,446,481,441,461,465],
[526,446,474,445,0,472,459,482,455],
[443,435,429,410,419,0,451,449,464],
[445,409,423,450,432,440,0,464,432],
[456,424,439,430,409,442,427,0,436],
[460,400,429,426,436,427,459,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,481,454,455,410,458,446,449],
[457,0,451,503,442,409,427,487,469],
[410,440,0,419,453,399,468,434,378],
[437,388,472,0,414,376,448,379,407],
[436,449,438,477,0,390,534,463,422],
[481,482,492,515,501,0,482,492,421],
[433,464,423,443,357,409,0,453,438],
[445,404,457,512,428,399,438,0,401],
[442,422,513,484,469,470,453,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,438,450,462,464,474,436,445],
[446,0,463,426,472,461,433,444,441],
[453,428,0,435,446,452,413,442,440],
[441,465,456,0,454,446,450,434,455],
[429,419,445,437,0,433,443,423,436],
[427,430,439,445,458,0,454,442,480],
[417,458,478,441,448,437,0,445,434],
[455,447,449,457,468,449,446,0,423],
[446,450,451,436,455,411,457,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,423,460,444,468,424,417,451],
[449,0,469,474,458,470,445,442,466],
[468,422,0,459,445,458,474,437,484],
[431,417,432,0,421,472,455,449,496],
[447,433,446,470,0,468,455,440,440],
[423,421,433,419,423,0,427,387,463],
[467,446,417,436,436,464,0,418,439],
[474,449,454,442,451,504,473,0,490],
[440,425,407,395,451,428,452,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,440,467,439,453,475,430,442],
[437,0,412,420,427,449,438,408,413],
[451,479,0,454,457,431,452,433,448],
[424,471,437,0,441,424,431,438,455],
[452,464,434,450,0,425,432,437,459],
[438,442,460,467,466,0,464,436,456],
[416,453,439,460,459,427,0,434,445],
[461,483,458,453,454,455,457,0,443],
[449,478,443,436,432,435,446,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,414,466,455,493,464,432,426],
[433,0,379,449,417,453,424,438,443],
[477,512,0,465,467,514,496,535,438],
[425,442,426,0,459,469,441,435,429],
[436,474,424,432,0,466,457,440,468],
[398,438,377,422,425,0,465,431,411],
[427,467,395,450,434,426,0,427,435],
[459,453,356,456,451,460,464,0,466],
[465,448,453,462,423,480,456,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,459,443,466,442,434,440,442],
[411,0,446,438,431,411,422,431,433],
[432,445,0,437,428,410,438,447,438],
[448,453,454,0,446,440,441,447,435],
[425,460,463,445,0,433,430,469,434],
[449,480,481,451,458,0,435,453,466],
[457,469,453,450,461,456,0,442,452],
[451,460,444,444,422,438,449,0,451],
[449,458,453,456,457,425,439,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,452,460,456,449,439,448,440],
[428,0,437,435,428,434,445,442,426],
[439,454,0,461,450,430,446,444,453],
[431,456,430,0,451,452,448,447,418],
[435,463,441,440,0,432,435,445,444],
[442,457,461,439,459,0,436,484,441],
[452,446,445,443,456,455,0,432,426],
[443,449,447,444,446,407,459,0,433],
[451,465,438,473,447,450,465,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,450,456,452,443,436,427,462],
[459,0,462,459,441,471,455,432,468],
[441,429,0,450,460,452,448,430,467],
[435,432,441,0,433,452,442,405,444],
[439,450,431,458,0,460,436,446,468],
[448,420,439,439,431,0,434,427,450],
[455,436,443,449,455,457,0,429,461],
[464,459,461,486,445,464,462,0,471],
[429,423,424,447,423,441,430,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,417,445,455,478,477,457,461],
[405,0,402,420,433,467,447,423,450],
[474,489,0,413,445,481,453,469,454],
[446,471,478,0,463,496,459,445,461],
[436,458,446,428,0,458,446,439,454],
[413,424,410,395,433,0,403,414,428],
[414,444,438,432,445,488,0,445,417],
[434,468,422,446,452,477,446,0,451],
[430,441,437,430,437,463,474,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,463,519,485,533,464,474,470],
[462,0,442,485,435,448,468,471,488],
[428,449,0,489,498,472,449,432,472],
[372,406,402,0,419,468,435,389,442],
[406,456,393,472,0,463,430,422,459],
[358,443,419,423,428,0,425,388,377],
[427,423,442,456,461,466,0,411,441],
[417,420,459,502,469,503,480,0,439],
[421,403,419,449,432,514,450,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,448,460,456,458,446,445,457],
[444,0,459,447,446,461,432,436,436],
[443,432,0,455,428,426,448,458,423],
[431,444,436,0,440,454,447,444,425],
[435,445,463,451,0,450,453,437,443],
[433,430,465,437,441,0,439,415,425],
[445,459,443,444,438,452,0,436,437],
[446,455,433,447,454,476,455,0,428],
[434,455,468,466,448,466,454,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,358,415,458,437,513,429,450,369],
[533,0,350,465,368,488,494,437,415],
[476,541,0,597,449,520,415,466,383],
[433,426,294,0,331,411,382,471,348],
[454,523,442,560,0,523,534,501,459],
[378,403,371,480,368,0,330,432,340],
[462,397,476,509,357,561,0,460,422],
[441,454,425,420,390,459,431,0,393],
[522,476,508,543,432,551,469,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,458,432,434,443,401,461,442],
[458,0,475,448,458,409,421,435,458],
[433,416,0,435,432,433,395,421,435],
[459,443,456,0,437,435,441,451,447],
[457,433,459,454,0,414,421,448,455],
[448,482,458,456,477,0,445,491,468],
[490,470,496,450,470,446,0,443,483],
[430,456,470,440,443,400,448,0,438],
[449,433,456,444,436,423,408,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,445,431,430,450,388,418,421],
[427,0,423,414,388,400,385,406,377],
[446,468,0,430,439,464,443,452,444],
[460,477,461,0,468,437,431,468,471],
[461,503,452,423,0,471,453,449,470],
[441,491,427,454,420,0,430,410,459],
[503,506,448,460,438,461,0,496,435],
[473,485,439,423,442,481,395,0,426],
[470,514,447,420,421,432,456,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,448,489,471,464,454,426,451],
[457,0,460,485,412,465,463,451,467],
[443,431,0,456,438,480,426,435,450],
[402,406,435,0,417,443,437,425,447],
[420,479,453,474,0,469,460,418,453],
[427,426,411,448,422,0,424,425,450],
[437,428,465,454,431,467,0,446,463],
[465,440,456,466,473,466,445,0,483],
[440,424,441,444,438,441,428,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,487,431,446,417,439,484,456,373],
[404,0,440,439,452,437,506,403,466],
[460,451,0,469,499,431,516,404,486],
[445,452,422,0,483,411,475,371,419],
[474,439,392,408,0,410,499,396,430],
[452,454,460,480,481,0,454,437,458],
[407,385,375,416,392,437,0,369,377],
[435,488,487,520,495,454,522,0,460],
[518,425,405,472,461,433,514,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,443,479,440,422,443,477,448],
[460,0,471,458,481,456,445,468,450],
[448,420,0,444,451,431,428,426,442],
[412,433,447,0,430,432,416,432,416],
[451,410,440,461,0,423,425,425,426],
[469,435,460,459,468,0,450,451,446],
[448,446,463,475,466,441,0,445,457],
[414,423,465,459,466,440,446,0,438],
[443,441,449,475,465,445,434,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,439,428,445,479,461,414,467],
[466,0,407,414,390,429,489,422,445],
[452,484,0,449,441,473,483,408,484],
[463,477,442,0,460,491,474,416,486],
[446,501,450,431,0,461,499,447,465],
[412,462,418,400,430,0,469,390,481],
[430,402,408,417,392,422,0,406,447],
[477,469,483,475,444,501,485,0,485],
[424,446,407,405,426,410,444,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,434,421,412,471,445,431,436],
[429,0,422,426,400,456,404,423,422],
[457,469,0,421,428,473,422,426,428],
[470,465,470,0,432,483,436,428,432],
[479,491,463,459,0,496,444,455,468],
[420,435,418,408,395,0,405,404,418],
[446,487,469,455,447,486,0,434,465],
[460,468,465,463,436,487,457,0,488],
[455,469,463,459,423,473,426,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,510,439,456,492,472,465,457],
[428,0,480,469,477,471,471,464,435],
[381,411,0,430,442,445,439,431,411],
[452,422,461,0,438,438,436,439,449],
[435,414,449,453,0,447,452,462,422],
[399,420,446,453,444,0,446,426,406],
[419,420,452,455,439,445,0,433,431],
[426,427,460,452,429,465,458,0,433],
[434,456,480,442,469,485,460,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,461,451,444,456,463,437,426],
[448,0,441,455,439,433,450,445,443],
[430,450,0,435,427,445,439,421,432],
[440,436,456,0,437,448,440,441,418],
[447,452,464,454,0,465,447,457,438],
[435,458,446,443,426,0,421,451,435],
[428,441,452,451,444,470,0,436,447],
[454,446,470,450,434,440,455,0,438],
[465,448,459,473,453,456,444,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,491,469,473,425,459,450,453,479],
[400,0,400,380,400,433,413,415,460],
[422,491,0,467,446,455,459,441,476],
[418,511,424,0,449,462,451,444,468],
[466,491,445,442,0,460,442,448,455],
[432,458,436,429,431,0,463,457,439],
[441,478,432,440,449,428,0,434,477],
[438,476,450,447,443,434,457,0,448],
[412,431,415,423,436,452,414,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,471,429,445,454,440,435,434],
[426,0,439,411,394,474,381,437,396],
[420,452,0,456,452,475,435,451,426],
[462,480,435,0,420,455,430,441,394],
[446,497,439,471,0,446,458,444,451],
[437,417,416,436,445,0,395,453,399],
[451,510,456,461,433,496,0,469,444],
[456,454,440,450,447,438,422,0,418],
[457,495,465,497,440,492,447,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,388,455,466,469,390,414,408],
[422,0,365,464,398,384,408,364,424],
[503,526,0,432,461,466,421,421,445],
[436,427,459,0,379,380,445,375,445],
[425,493,430,512,0,489,468,424,468],
[422,507,425,511,402,0,397,400,411],
[501,483,470,446,423,494,0,496,526],
[477,527,470,516,467,491,395,0,473],
[483,467,446,446,423,480,365,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,490,448,427,410,413,424,453,407],
[401,0,416,429,284,376,317,382,383],
[443,475,0,403,341,351,416,427,381],
[464,462,488,0,347,359,400,401,341],
[481,607,550,544,0,504,504,531,445],
[478,515,540,532,387,0,377,440,471],
[467,574,475,491,387,514,0,531,418],
[438,509,464,490,360,451,360,0,377],
[484,508,510,550,446,420,473,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,437,449,446,462,484,478,445],
[441,0,420,427,454,448,439,481,437],
[454,471,0,444,461,444,460,491,457],
[442,464,447,0,476,451,481,478,481],
[445,437,430,415,0,448,455,469,432],
[429,443,447,440,443,0,461,476,432],
[407,452,431,410,436,430,0,471,447],
[413,410,400,413,422,415,420,0,421],
[446,454,434,410,459,459,444,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,445,447,436,425,442,436,456],
[464,0,446,460,445,447,450,445,453],
[446,445,0,438,434,439,435,427,463],
[444,431,453,0,438,427,438,452,477],
[455,446,457,453,0,465,443,454,447],
[466,444,452,464,426,0,447,444,458],
[449,441,456,453,448,444,0,437,451],
[455,446,464,439,437,447,454,0,464],
[435,438,428,414,444,433,440,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,366,399,519,523,461,553,369],
[432,0,395,493,367,369,431,522,334],
[525,496,0,559,428,496,556,582,461],
[492,398,332,0,364,341,365,490,366],
[372,524,463,527,0,432,433,492,370],
[368,522,395,550,459,0,462,459,432],
[430,460,335,526,458,429,0,641,394],
[338,369,309,401,399,432,250,0,374],
[522,557,430,525,521,459,497,517,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,482,451,460,436,446,472,511],
[429,0,470,442,436,430,428,478,434],
[409,421,0,389,427,412,447,444,436],
[440,449,502,0,429,447,464,455,458],
[431,455,464,462,0,438,476,465,479],
[455,461,479,444,453,0,441,488,452],
[445,463,444,427,415,450,0,436,442],
[419,413,447,436,426,403,455,0,458],
[380,457,455,433,412,439,449,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,481,468,417,398,456,419,442],
[412,0,461,416,414,433,447,400,401],
[410,430,0,406,396,404,446,427,389],
[423,475,485,0,401,389,438,412,416],
[474,477,495,490,0,460,468,461,430],
[493,458,487,502,431,0,468,475,452],
[435,444,445,453,423,423,0,420,413],
[472,491,464,479,430,416,471,0,437],
[449,490,502,475,461,439,478,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,446,437,438,430,484,442,431],
[455,0,442,444,457,463,505,477,455],
[445,449,0,462,447,445,482,458,442],
[454,447,429,0,439,446,484,463,454],
[453,434,444,452,0,437,475,464,440],
[461,428,446,445,454,0,505,447,481],
[407,386,409,407,416,386,0,428,406],
[449,414,433,428,427,444,463,0,443],
[460,436,449,437,451,410,485,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,433,430,447,458,455,463,430],
[450,0,421,414,463,449,414,443,451],
[458,470,0,432,443,451,423,431,483],
[461,477,459,0,490,462,455,445,466],
[444,428,448,401,0,448,419,435,460],
[433,442,440,429,443,0,426,460,444],
[436,477,468,436,472,465,0,484,462],
[428,448,460,446,456,431,407,0,437],
[461,440,408,425,431,447,429,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,430,448,421,439,424,424,404],
[440,0,422,451,419,427,416,450,403],
[461,469,0,465,446,429,462,447,469],
[443,440,426,0,437,412,439,437,425],
[470,472,445,454,0,453,450,437,445],
[452,464,462,479,438,0,469,462,419],
[467,475,429,452,441,422,0,455,425],
[467,441,444,454,454,429,436,0,412],
[487,488,422,466,446,472,466,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,427,479,448,402,453,475,422],
[427,0,413,414,456,452,425,436,447],
[464,478,0,453,439,445,469,472,514],
[412,477,438,0,469,456,486,473,451],
[443,435,452,422,0,446,457,461,442],
[489,439,446,435,445,0,470,445,456],
[438,466,422,405,434,421,0,469,440],
[416,455,419,418,430,446,422,0,464],
[469,444,377,440,449,435,451,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,439,462,472,501,474,461,464],
[411,0,437,432,452,471,469,460,444],
[452,454,0,416,499,475,467,450,461],
[429,459,475,0,486,480,468,473,455],
[419,439,392,405,0,462,471,433,421],
[390,420,416,411,429,0,448,432,417],
[417,422,424,423,420,443,0,453,400],
[430,431,441,418,458,459,438,0,439],
[427,447,430,436,470,474,491,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,451,472,448,461,439,433,456],
[416,0,438,457,423,432,431,427,443],
[440,453,0,424,448,446,418,419,455],
[419,434,467,0,434,449,436,420,435],
[443,468,443,457,0,453,436,441,443],
[430,459,445,442,438,0,454,441,437],
[452,460,473,455,455,437,0,448,467],
[458,464,472,471,450,450,443,0,452],
[435,448,436,456,448,454,424,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,458,427,438,471,393,473,449],
[437,0,450,437,467,497,451,519,469],
[433,441,0,449,442,471,391,472,471],
[464,454,442,0,474,471,419,496,428],
[453,424,449,417,0,470,408,482,446],
[420,394,420,420,421,0,389,447,413],
[498,440,500,472,483,502,0,484,477],
[418,372,419,395,409,444,407,0,417],
[442,422,420,463,445,478,414,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,352,384,400,474,521,382,436,457],
[539,0,471,435,546,558,438,452,475],
[507,420,0,471,505,508,416,418,455],
[491,456,420,0,577,574,543,404,474],
[417,345,386,314,0,384,327,365,368],
[370,333,383,317,507,0,370,328,351],
[509,453,475,348,564,521,0,487,470],
[455,439,473,487,526,563,404,0,490],
[434,416,436,417,523,540,421,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,448,457,441,426,433,439,452],
[449,0,464,453,463,455,438,434,459],
[443,427,0,448,409,425,430,432,439],
[434,438,443,0,446,424,437,443,440],
[450,428,482,445,0,443,444,425,442],
[465,436,466,467,448,0,452,456,485],
[458,453,461,454,447,439,0,431,464],
[452,457,459,448,466,435,460,0,456],
[439,432,452,451,449,406,427,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,451,447,442,428,419,428,437],
[464,0,456,458,434,427,448,460,431],
[440,435,0,454,420,423,438,430,431],
[444,433,437,0,426,404,413,432,442],
[449,457,471,465,0,441,449,467,434],
[463,464,468,487,450,0,443,453,459],
[472,443,453,478,442,448,0,455,457],
[463,431,461,459,424,438,436,0,439],
[454,460,460,449,457,432,434,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,418,438,444,422,407,411,425],
[456,0,440,457,446,448,453,443,449],
[473,451,0,451,432,453,440,444,434],
[453,434,440,0,456,425,416,436,444],
[447,445,459,435,0,449,412,453,439],
[469,443,438,466,442,0,437,450,460],
[484,438,451,475,479,454,0,464,459],
[480,448,447,455,438,441,427,0,437],
[466,442,457,447,452,431,432,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,464,457,432,428,440,444,440],
[450,0,430,446,415,438,481,442,423],
[427,461,0,467,442,455,474,438,458],
[434,445,424,0,428,430,452,440,403],
[459,476,449,463,0,470,487,413,443],
[463,453,436,461,421,0,447,397,407],
[451,410,417,439,404,444,0,401,377],
[447,449,453,451,478,494,490,0,443],
[451,468,433,488,448,484,514,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,500,467,436,476,491,428,425,457],
[391,0,402,429,426,464,425,411,425],
[424,489,0,430,440,478,443,446,486],
[455,462,461,0,476,494,469,435,495],
[415,465,451,415,0,442,429,400,438],
[400,427,413,397,449,0,432,386,415],
[463,466,448,422,462,459,0,439,462],
[466,480,445,456,491,505,452,0,467],
[434,466,405,396,453,476,429,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,418,451,430,428,458,443,446],
[451,0,447,421,437,448,470,455,434],
[473,444,0,458,451,448,469,469,472],
[440,470,433,0,441,442,467,464,441],
[461,454,440,450,0,418,455,432,436],
[463,443,443,449,473,0,457,452,446],
[433,421,422,424,436,434,0,440,438],
[448,436,422,427,459,439,451,0,470],
[445,457,419,450,455,445,453,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,446,427,420,457,417,441,428],
[442,0,432,424,441,435,438,455,435],
[445,459,0,420,429,439,442,431,430],
[464,467,471,0,450,478,452,462,434],
[471,450,462,441,0,479,453,454,443],
[434,456,452,413,412,0,435,439,425],
[474,453,449,439,438,456,0,449,446],
[450,436,460,429,437,452,442,0,431],
[463,456,461,457,448,466,445,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,427,445,440,446,435,417,436],
[447,0,449,476,437,470,441,423,440],
[464,442,0,445,459,460,422,426,432],
[446,415,446,0,445,449,449,450,428],
[451,454,432,446,0,457,447,441,446],
[445,421,431,442,434,0,439,418,428],
[456,450,469,442,444,452,0,428,443],
[474,468,465,441,450,473,463,0,451],
[455,451,459,463,445,463,448,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,456,442,465,442,462,457,462],
[435,0,426,439,428,416,438,436,457],
[435,465,0,435,446,448,440,436,462],
[449,452,456,0,440,442,461,461,450],
[426,463,445,451,0,434,454,460,451],
[449,475,443,449,457,0,469,457,461],
[429,453,451,430,437,422,0,442,453],
[434,455,455,430,431,434,449,0,443],
[429,434,429,441,440,430,438,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,412,421,414,432,441,426,433],
[478,0,451,456,427,432,447,452,439],
[479,440,0,454,421,419,447,463,431],
[470,435,437,0,452,463,462,465,439],
[477,464,470,439,0,473,460,467,476],
[459,459,472,428,418,0,457,437,450],
[450,444,444,429,431,434,0,442,449],
[465,439,428,426,424,454,449,0,450],
[458,452,460,452,415,441,442,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,444,468,447,448,478,452,466],
[446,0,448,460,455,443,476,448,462],
[447,443,0,440,451,460,489,427,458],
[423,431,451,0,429,430,482,419,437],
[444,436,440,462,0,443,490,438,457],
[443,448,431,461,448,0,475,432,447],
[413,415,402,409,401,416,0,420,400],
[439,443,464,472,453,459,471,0,449],
[425,429,433,454,434,444,491,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,463,487,453,451,496,427,468],
[425,0,420,450,417,401,447,446,429],
[428,471,0,478,451,434,460,445,464],
[404,441,413,0,420,447,437,435,439],
[438,474,440,471,0,406,445,455,450],
[440,490,457,444,485,0,477,454,465],
[395,444,431,454,446,414,0,420,430],
[464,445,446,456,436,437,471,0,467],
[423,462,427,452,441,426,461,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,402,419,419,399,434,424,427],
[475,0,416,443,450,432,442,462,471],
[489,475,0,468,432,455,474,465,452],
[472,448,423,0,432,457,478,444,435],
[472,441,459,459,0,471,500,506,457],
[492,459,436,434,420,0,473,451,422],
[457,449,417,413,391,418,0,446,413],
[467,429,426,447,385,440,445,0,441],
[464,420,439,456,434,469,478,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,498,582,435,498,479,519,486,448],
[393,0,500,383,432,419,497,441,445],
[309,391,0,375,406,379,444,328,388],
[456,508,516,0,410,400,458,387,389],
[393,459,485,481,0,414,473,427,428],
[412,472,512,491,477,0,404,411,391],
[372,394,447,433,418,487,0,412,393],
[405,450,563,504,464,480,479,0,402],
[443,446,503,502,463,500,498,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,407,398,420,433,420,395,426],
[434,0,423,426,438,456,412,426,434],
[484,468,0,459,466,438,458,448,467],
[493,465,432,0,454,467,435,409,467],
[471,453,425,437,0,455,454,453,481],
[458,435,453,424,436,0,436,439,456],
[471,479,433,456,437,455,0,400,458],
[496,465,443,482,438,452,491,0,476],
[465,457,424,424,410,435,433,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,431,426,416,441,442,421,442],
[475,0,447,455,452,470,461,421,476],
[460,444,0,457,452,453,449,454,467],
[465,436,434,0,474,465,425,422,452],
[475,439,439,417,0,453,446,410,442],
[450,421,438,426,438,0,439,430,443],
[449,430,442,466,445,452,0,442,447],
[470,470,437,469,481,461,449,0,455],
[449,415,424,439,449,448,444,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,466,438,448,461,445,433,461],
[440,0,458,437,471,444,447,427,450],
[425,433,0,426,421,443,431,407,442],
[453,454,465,0,468,443,436,465,472],
[443,420,470,423,0,450,420,422,447],
[430,447,448,448,441,0,420,439,469],
[446,444,460,455,471,471,0,434,453],
[458,464,484,426,469,452,457,0,455],
[430,441,449,419,444,422,438,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,457,437,482,464,459,497,444],
[428,0,446,456,429,446,461,462,430],
[434,445,0,444,436,425,470,442,456],
[454,435,447,0,456,464,456,487,469],
[409,462,455,435,0,450,456,471,418],
[427,445,466,427,441,0,495,488,453],
[432,430,421,435,435,396,0,437,457],
[394,429,449,404,420,403,454,0,411],
[447,461,435,422,473,438,434,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,449,449,425,467,513,454,449],
[415,0,401,437,413,465,484,421,427],
[442,490,0,438,440,483,499,464,461],
[442,454,453,0,454,482,475,434,455],
[466,478,451,437,0,497,465,483,450],
[424,426,408,409,394,0,500,450,449],
[378,407,392,416,426,391,0,403,411],
[437,470,427,457,408,441,488,0,438],
[442,464,430,436,441,442,480,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,462,465,463,454,455,524,444],
[441,0,423,424,400,403,423,402,387],
[429,468,0,444,421,460,419,468,389],
[426,467,447,0,438,431,458,457,456],
[428,491,470,453,0,440,452,449,431],
[437,488,431,460,451,0,485,459,452],
[436,468,472,433,439,406,0,461,417],
[367,489,423,434,442,432,430,0,417],
[447,504,502,435,460,439,474,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,557,222,334,220,334,334,666],
[670,0,668,558,447,444,556,556,556],
[334,223,0,445,334,334,337,331,334],
[669,333,446,0,669,555,446,555,555],
[557,444,557,222,0,445,445,445,668],
[671,447,557,336,446,0,448,556,777],
[557,335,554,445,446,443,0,443,443],
[557,335,560,336,446,335,448,0,668],
[225,335,557,336,223,114,448,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,442,438,439,404,434,440,435],
[449,0,439,407,457,429,427,469,430],
[449,452,0,447,473,433,410,470,414],
[453,484,444,0,426,438,441,469,448],
[452,434,418,465,0,400,443,456,411],
[487,462,458,453,491,0,452,481,444],
[457,464,481,450,448,439,0,461,435],
[451,422,421,422,435,410,430,0,428],
[456,461,477,443,480,447,456,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,438,459,483,460,454,432,454],
[442,0,428,478,473,457,471,457,455],
[453,463,0,453,456,460,467,435,450],
[432,413,438,0,435,435,484,424,454],
[408,418,435,456,0,439,447,425,463],
[431,434,431,456,452,0,448,419,424],
[437,420,424,407,444,443,0,434,446],
[459,434,456,467,466,472,457,0,462],
[437,436,441,437,428,467,445,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,491,477,501,431,453,444,467],
[410,0,469,428,468,438,440,445,460],
[400,422,0,440,471,396,414,395,456],
[414,463,451,0,464,434,443,416,465],
[390,423,420,427,0,379,408,371,394],
[460,453,495,457,512,0,444,464,468],
[438,451,477,448,483,447,0,417,468],
[447,446,496,475,520,427,474,0,464],
[424,431,435,426,497,423,423,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,434,458,435,441,445,466,432],
[433,0,428,462,425,422,420,434,406],
[457,463,0,483,442,448,445,459,444],
[433,429,408,0,405,398,446,439,441],
[456,466,449,486,0,435,462,450,439],
[450,469,443,493,456,0,446,469,466],
[446,471,446,445,429,445,0,436,428],
[425,457,432,452,441,422,455,0,434],
[459,485,447,450,452,425,463,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,444,447,433,452,474,474,462],
[438,0,445,452,443,420,454,460,442],
[447,446,0,436,440,430,479,473,468],
[444,439,455,0,447,451,475,459,467],
[458,448,451,444,0,466,487,479,465],
[439,471,461,440,425,0,481,459,481],
[417,437,412,416,404,410,0,448,426],
[417,431,418,432,412,432,443,0,462],
[429,449,423,424,426,410,465,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,451,431,454,479,462,444,447],
[463,0,459,436,447,448,459,466,442],
[440,432,0,438,444,445,434,445,427],
[460,455,453,0,430,445,440,448,464],
[437,444,447,461,0,439,445,454,431],
[412,443,446,446,452,0,438,430,434],
[429,432,457,451,446,453,0,444,435],
[447,425,446,443,437,461,447,0,418],
[444,449,464,427,460,457,456,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,452,456,436,446,439,464,419],
[415,0,453,460,451,444,456,448,431],
[439,438,0,439,463,442,443,463,450],
[435,431,452,0,479,441,453,449,482],
[455,440,428,412,0,442,434,469,456],
[445,447,449,450,449,0,438,461,456],
[452,435,448,438,457,453,0,453,452],
[427,443,428,442,422,430,438,0,442],
[472,460,441,409,435,435,439,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,436,447,441,417,427,434,451],
[469,0,457,455,443,453,454,433,463],
[455,434,0,458,468,444,439,442,441],
[444,436,433,0,431,422,448,439,438],
[450,448,423,460,0,463,449,437,469],
[474,438,447,469,428,0,441,440,449],
[464,437,452,443,442,450,0,454,445],
[457,458,449,452,454,451,437,0,456],
[440,428,450,453,422,442,446,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,462,460,446,459,477,441,469],
[425,0,463,442,440,439,457,432,452],
[429,428,0,424,431,432,459,440,438],
[431,449,467,0,441,442,459,446,447],
[445,451,460,450,0,443,450,447,460],
[432,452,459,449,448,0,472,431,458],
[414,434,432,432,441,419,0,430,429],
[450,459,451,445,444,460,461,0,445],
[422,439,453,444,431,433,462,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,437,395,433,435,439,414,401],
[468,0,458,452,437,461,469,429,440],
[454,433,0,428,463,448,453,430,445],
[496,439,463,0,470,474,490,451,446],
[458,454,428,421,0,439,461,410,436],
[456,430,443,417,452,0,457,402,434],
[452,422,438,401,430,434,0,417,411],
[477,462,461,440,481,489,474,0,457],
[490,451,446,445,455,457,480,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,468,444,446,448,435,413,421],
[465,0,456,446,475,456,451,450,434],
[423,435,0,427,442,437,426,435,431],
[447,445,464,0,454,442,446,423,438],
[445,416,449,437,0,441,422,427,421],
[443,435,454,449,450,0,441,439,445],
[456,440,465,445,469,450,0,429,446],
[478,441,456,468,464,452,462,0,452],
[470,457,460,453,470,446,445,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,451,432,444,477,439,466,470],
[436,0,416,430,442,455,460,464,426],
[440,475,0,433,452,449,436,456,442],
[459,461,458,0,481,478,445,469,490],
[447,449,439,410,0,441,442,463,443],
[414,436,442,413,450,0,436,446,460],
[452,431,455,446,449,455,0,471,463],
[425,427,435,422,428,445,420,0,430],
[421,465,449,401,448,431,428,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,470,485,487,425,502,405,427],
[424,0,484,430,412,476,455,428,447],
[421,407,0,422,472,443,449,454,418],
[406,461,469,0,448,501,449,431,453],
[404,479,419,443,0,452,458,394,432],
[466,415,448,390,439,0,441,415,408],
[389,436,442,442,433,450,0,430,441],
[486,463,437,460,497,476,461,0,476],
[464,444,473,438,459,483,450,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,469,454,471,447,421,458,450],
[461,0,485,444,455,446,434,473,448],
[422,406,0,435,458,458,421,451,410],
[437,447,456,0,470,433,440,483,445],
[420,436,433,421,0,429,433,462,442],
[444,445,433,458,462,0,446,450,449],
[470,457,470,451,458,445,0,469,444],
[433,418,440,408,429,441,422,0,433],
[441,443,481,446,449,442,447,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,484,403,377,414,418,388,462,473],
[407,0,281,405,422,367,358,394,435],
[488,610,0,527,495,553,423,523,590],
[514,486,364,0,479,475,464,492,457],
[477,469,396,412,0,428,353,418,439],
[473,524,338,416,463,0,354,388,520],
[503,533,468,427,538,537,0,574,500],
[429,497,368,399,473,503,317,0,505],
[418,456,301,434,452,371,391,386,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,449,420,445,425,512,455,461],
[444,0,430,446,417,429,508,450,518],
[442,461,0,426,480,453,435,454,488],
[471,445,465,0,484,462,455,494,485],
[446,474,411,407,0,399,427,471,472],
[466,462,438,429,492,0,472,460,467],
[379,383,456,436,464,419,0,432,452],
[436,441,437,397,420,431,459,0,446],
[430,373,403,406,419,424,439,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,424,426,365,373,417,377,426,419],
[467,0,461,462,455,420,445,442,434],
[465,430,0,413,396,421,403,463,410],
[526,429,478,0,459,448,428,470,453],
[518,436,495,432,0,421,424,475,471],
[474,471,470,443,470,0,468,499,447],
[514,446,488,463,467,423,0,456,474],
[465,449,428,421,416,392,435,0,462],
[472,457,481,438,420,444,417,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,449,452,438,435,436,452,450],
[457,0,453,457,440,451,436,472,422],
[442,438,0,441,451,448,446,459,460],
[439,434,450,0,446,434,430,486,456],
[453,451,440,445,0,450,450,448,448],
[456,440,443,457,441,0,423,462,440],
[455,455,445,461,441,468,0,463,455],
[439,419,432,405,443,429,428,0,421],
[441,469,431,435,443,451,436,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,480,443,447,488,462,462,506],
[403,0,421,458,424,455,419,420,450],
[411,470,0,440,465,452,413,426,467],
[448,433,451,0,440,484,424,445,477],
[444,467,426,451,0,485,459,468,474],
[403,436,439,407,406,0,401,407,432],
[429,472,478,467,432,490,0,453,489],
[429,471,465,446,423,484,438,0,432],
[385,441,424,414,417,459,402,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,438,420,412,422,414,476,408],
[492,0,468,449,459,442,452,489,459],
[453,423,0,439,410,420,468,464,397],
[471,442,452,0,469,416,454,490,433],
[479,432,481,422,0,465,440,460,442],
[469,449,471,475,426,0,454,503,446],
[477,439,423,437,451,437,0,471,431],
[415,402,427,401,431,388,420,0,377],
[483,432,494,458,449,445,460,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,437,422,430,423,446,449,391],
[478,0,451,460,437,451,461,463,420],
[454,440,0,436,457,420,442,439,408],
[469,431,455,0,440,463,447,445,441],
[461,454,434,451,0,434,456,451,399],
[468,440,471,428,457,0,438,450,456],
[445,430,449,444,435,453,0,418,421],
[442,428,452,446,440,441,473,0,408],
[500,471,483,450,492,435,470,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,451,454,452,475,455,474,442],
[431,0,424,426,467,444,450,442,441],
[440,467,0,436,463,478,459,456,430],
[437,465,455,0,467,493,460,471,461],
[439,424,428,424,0,473,424,440,432],
[416,447,413,398,418,0,419,446,442],
[436,441,432,431,467,472,0,455,449],
[417,449,435,420,451,445,436,0,437],
[449,450,461,430,459,449,442,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,452,474,416,467,480,466,446],
[426,0,437,450,428,433,458,455,451],
[439,454,0,457,454,430,452,459,432],
[417,441,434,0,420,427,463,445,442],
[475,463,437,471,0,451,477,455,440],
[424,458,461,464,440,0,451,441,434],
[411,433,439,428,414,440,0,439,400],
[425,436,432,446,436,450,452,0,418],
[445,440,459,449,451,457,491,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,445,462,437,466,445,430,467],
[421,0,458,438,430,448,445,441,467],
[446,433,0,462,427,453,434,441,468],
[429,453,429,0,460,449,464,448,461],
[454,461,464,431,0,456,469,441,495],
[425,443,438,442,435,0,457,434,450],
[446,446,457,427,422,434,0,418,457],
[461,450,450,443,450,457,473,0,483],
[424,424,423,430,396,441,434,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,454,474,470,437,455,457,479],
[432,0,450,438,464,422,461,451,473],
[437,441,0,447,449,446,466,449,466],
[417,453,444,0,447,414,444,442,475],
[421,427,442,444,0,417,457,438,463],
[454,469,445,477,474,0,488,448,468],
[436,430,425,447,434,403,0,425,449],
[434,440,442,449,453,443,466,0,444],
[412,418,425,416,428,423,442,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,385,430,472,426,451,381,481,379],
[506,0,418,538,505,568,461,530,508],
[461,473,0,475,465,496,417,522,476],
[419,353,416,0,370,444,352,480,427],
[465,386,426,521,0,515,434,514,506],
[440,323,395,447,376,0,369,409,450],
[510,430,474,539,457,522,0,541,541],
[410,361,369,411,377,482,350,0,405],
[512,383,415,464,385,441,350,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,452,424,442,439,475,434,452],
[453,0,469,444,423,452,449,461,466],
[439,422,0,422,426,442,445,437,447],
[467,447,469,0,431,428,449,426,454],
[449,468,465,460,0,430,466,458,445],
[452,439,449,463,461,0,452,447,454],
[416,442,446,442,425,439,0,426,465],
[457,430,454,465,433,444,465,0,465],
[439,425,444,437,446,437,426,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,415,455,451,455,439,458,468],
[444,0,406,449,444,410,427,462,446],
[476,485,0,466,475,437,474,460,452],
[436,442,425,0,431,413,436,431,435],
[440,447,416,460,0,449,440,460,444],
[436,481,454,478,442,0,432,469,460],
[452,464,417,455,451,459,0,460,470],
[433,429,431,460,431,422,431,0,444],
[423,445,439,456,447,431,421,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,593,395,593,792,196,595,496,495],
[298,0,395,395,595,494,694,397,397],
[496,496,0,395,793,394,694,396,397],
[298,496,496,0,496,99,496,198,396],
[99,296,98,395,0,197,396,198,296],
[695,397,497,792,694,0,497,595,596],
[296,197,197,395,495,394,0,98,99],
[395,494,495,693,693,296,793,0,693],
[396,494,494,495,595,295,792,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,527,494,460,423,458,386,459,461],
[364,0,392,397,427,390,352,393,379],
[397,499,0,467,406,448,440,448,411],
[431,494,424,0,494,470,479,452,464],
[468,464,485,397,0,450,379,411,397],
[433,501,443,421,441,0,413,448,444],
[505,539,451,412,512,478,0,482,415],
[432,498,443,439,480,443,409,0,444],
[430,512,480,427,494,447,476,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,431,381,409,343,407,350,402],
[473,0,442,390,403,375,368,397,461],
[460,449,0,413,443,450,405,425,471],
[510,501,478,0,457,427,433,459,467],
[482,488,448,434,0,463,416,435,512],
[548,516,441,464,428,0,477,444,503],
[484,523,486,458,475,414,0,469,498],
[541,494,466,432,456,447,422,0,484],
[489,430,420,424,379,388,393,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,447,426,472,430,452,451,445],
[423,0,440,429,410,410,411,417,445],
[444,451,0,421,440,433,429,427,443],
[465,462,470,0,449,436,455,462,443],
[419,481,451,442,0,437,432,428,472],
[461,481,458,455,454,0,470,440,468],
[439,480,462,436,459,421,0,447,458],
[440,474,464,429,463,451,444,0,445],
[446,446,448,448,419,423,433,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,479,441,435,442,457,475,478],
[457,0,468,443,463,438,452,463,463],
[412,423,0,427,439,405,444,451,444],
[450,448,464,0,423,462,466,443,481],
[456,428,452,468,0,463,444,483,462],
[449,453,486,429,428,0,440,461,504],
[434,439,447,425,447,451,0,465,450],
[416,428,440,448,408,430,426,0,418],
[413,428,447,410,429,387,441,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,464,451,459,454,470,442,461],
[430,0,464,443,475,442,459,444,451],
[427,427,0,455,436,418,436,404,433],
[440,448,436,0,443,410,457,447,425],
[432,416,455,448,0,423,459,436,451],
[437,449,473,481,468,0,475,453,449],
[421,432,455,434,432,416,0,412,447],
[449,447,487,444,455,438,479,0,438],
[430,440,458,466,440,442,444,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,410,429,445,450,456,457,419,422],
[481,0,453,441,473,485,464,451,438],
[462,438,0,460,436,469,453,418,451],
[446,450,431,0,458,462,459,452,443],
[441,418,455,433,0,452,442,428,440],
[435,406,422,429,439,0,450,410,431],
[434,427,438,432,449,441,0,433,416],
[472,440,473,439,463,481,458,0,433],
[469,453,440,448,451,460,475,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,442,434,448,446,452,483,447],
[458,0,452,443,444,446,440,479,483],
[449,439,0,435,452,447,446,497,477],
[457,448,456,0,438,456,457,468,469],
[443,447,439,453,0,450,438,486,460],
[445,445,444,435,441,0,444,485,461],
[439,451,445,434,453,447,0,494,479],
[408,412,394,423,405,406,397,0,421],
[444,408,414,422,431,430,412,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,464,444,427,446,448,462,466],
[430,0,440,455,415,445,447,453,438],
[427,451,0,455,462,447,457,458,438],
[447,436,436,0,441,449,455,446,458],
[464,476,429,450,0,450,465,454,474],
[445,446,444,442,441,0,451,449,448],
[443,444,434,436,426,440,0,442,444],
[429,438,433,445,437,442,449,0,445],
[425,453,453,433,417,443,447,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,443,446,465,443,479,459,433],
[436,0,449,448,462,423,460,465,442],
[448,442,0,458,444,449,451,459,454],
[445,443,433,0,450,451,440,474,435],
[426,429,447,441,0,433,441,447,431],
[448,468,442,440,458,0,468,492,464],
[412,431,440,451,450,423,0,448,439],
[432,426,432,417,444,399,443,0,445],
[458,449,437,456,460,427,452,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,418,421,440,439,453,425,446],
[466,0,430,463,465,463,446,453,460],
[473,461,0,439,445,467,451,453,459],
[470,428,452,0,458,454,447,450,487],
[451,426,446,433,0,451,450,445,462],
[452,428,424,437,440,0,457,453,458],
[438,445,440,444,441,434,0,452,468],
[466,438,438,441,446,438,439,0,478],
[445,431,432,404,429,433,423,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,443,441,428,434,439,445,441],
[458,0,447,447,428,440,437,471,455],
[448,444,0,441,436,442,452,457,451],
[450,444,450,0,436,454,429,455,453],
[463,463,455,455,0,440,439,456,443],
[457,451,449,437,451,0,443,444,449],
[452,454,439,462,452,448,0,454,457],
[446,420,434,436,435,447,437,0,442],
[450,436,440,438,448,442,434,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,444,433,478,475,487,474,452],
[409,0,451,414,455,464,420,437,436],
[447,440,0,397,435,480,441,457,438],
[458,477,494,0,461,466,490,444,461],
[413,436,456,430,0,466,441,429,414],
[416,427,411,425,425,0,436,421,446],
[404,471,450,401,450,455,0,429,454],
[417,454,434,447,462,470,462,0,457],
[439,455,453,430,477,445,437,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,499,481,457,478,502,479,486,421],
[392,0,387,407,423,437,461,405,417],
[410,504,0,482,446,445,455,440,445],
[434,484,409,0,436,456,456,394,419],
[413,468,445,455,0,471,453,444,441],
[389,454,446,435,420,0,440,407,432],
[412,430,436,435,438,451,0,405,399],
[405,486,451,497,447,484,486,0,454],
[470,474,446,472,450,459,492,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,437,421,457,473,449,421,436],
[480,0,455,446,471,486,479,407,433],
[454,436,0,451,441,467,435,438,441],
[470,445,440,0,480,464,461,447,457],
[434,420,450,411,0,429,457,412,430],
[418,405,424,427,462,0,430,416,453],
[442,412,456,430,434,461,0,414,407],
[470,484,453,444,479,475,477,0,467],
[455,458,450,434,461,438,484,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,415,462,426,426,400,429,448],
[443,0,411,417,443,441,449,436,435],
[476,480,0,500,462,436,464,456,476],
[429,474,391,0,425,433,384,463,394],
[465,448,429,466,0,400,399,421,432],
[465,450,455,458,491,0,440,479,421],
[491,442,427,507,492,451,0,481,460],
[462,455,435,428,470,412,410,0,453],
[443,456,415,497,459,470,431,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,421,447,450,454,452,443,440],
[457,0,446,450,453,436,466,457,453],
[470,445,0,463,474,463,476,468,468],
[444,441,428,0,471,440,472,457,444],
[441,438,417,420,0,431,448,438,440],
[437,455,428,451,460,0,479,451,432],
[439,425,415,419,443,412,0,415,414],
[448,434,423,434,453,440,476,0,446],
[451,438,423,447,451,459,477,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,463,457,442,443,429,450,445],
[476,0,492,464,439,457,439,480,473],
[428,399,0,424,419,421,416,432,419],
[434,427,467,0,431,424,420,448,442],
[449,452,472,460,0,429,453,454,453],
[448,434,470,467,462,0,456,479,464],
[462,452,475,471,438,435,0,455,474],
[441,411,459,443,437,412,436,0,439],
[446,418,472,449,438,427,417,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,439,430,435,442,442,482,462],
[406,0,440,436,391,431,435,424,433],
[452,451,0,427,436,464,456,485,469],
[461,455,464,0,462,431,459,458,488],
[456,500,455,429,0,444,463,491,474],
[449,460,427,460,447,0,459,457,454],
[449,456,435,432,428,432,0,464,461],
[409,467,406,433,400,434,427,0,454],
[429,458,422,403,417,437,430,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,439,444,447,432,457,427,421],
[468,0,458,422,457,405,450,450,446],
[452,433,0,445,457,425,447,432,402],
[447,469,446,0,448,433,466,468,428],
[444,434,434,443,0,450,466,426,408],
[459,486,466,458,441,0,492,479,442],
[434,441,444,425,425,399,0,434,409],
[464,441,459,423,465,412,457,0,401],
[470,445,489,463,483,449,482,490,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,531,427,416,406,340,495,373,437],
[360,0,360,384,440,315,381,348,432],
[464,531,0,415,456,414,436,379,500],
[475,507,476,0,444,357,409,446,462],
[485,451,435,447,0,404,461,360,475],
[551,576,477,534,487,0,489,402,508],
[396,510,455,482,430,402,0,427,428],
[518,543,512,445,531,489,464,0,534],
[454,459,391,429,416,383,463,357,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,422,438,439,479,469,436,439],
[487,0,450,459,488,423,450,442,442],
[469,441,0,433,481,402,453,416,448],
[453,432,458,0,464,438,459,448,474],
[452,403,410,427,0,408,435,423,410],
[412,468,489,453,483,0,464,463,468],
[422,441,438,432,456,427,0,441,428],
[455,449,475,443,468,428,450,0,465],
[452,449,443,417,481,423,463,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,431,470,456,474,454,483,450],
[434,0,449,467,433,456,440,463,450],
[460,442,0,465,466,460,473,458,458],
[421,424,426,0,424,445,427,456,433],
[435,458,425,467,0,440,449,480,443],
[417,435,431,446,451,0,460,448,443],
[437,451,418,464,442,431,0,457,452],
[408,428,433,435,411,443,434,0,425],
[441,441,433,458,448,448,439,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,442,416,408,439,422,423,432],
[452,0,429,435,436,457,411,395,435],
[449,462,0,421,449,452,437,405,438],
[475,456,470,0,451,476,432,457,473],
[483,455,442,440,0,452,459,429,464],
[452,434,439,415,439,0,411,418,424],
[469,480,454,459,432,480,0,444,459],
[468,496,486,434,462,473,447,0,463],
[459,456,453,418,427,467,432,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,439,431,447,453,462,426,455],
[430,0,447,436,417,430,438,415,457],
[452,444,0,444,464,450,435,418,480],
[460,455,447,0,450,455,419,415,456],
[444,474,427,441,0,441,443,438,446],
[438,461,441,436,450,0,452,441,462],
[429,453,456,472,448,439,0,447,477],
[465,476,473,476,453,450,444,0,477],
[436,434,411,435,445,429,414,414,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,447,422,443,446,447,470,433],
[447,0,460,447,475,457,450,496,439],
[444,431,0,432,426,439,420,476,440],
[469,444,459,0,467,451,445,499,447],
[448,416,465,424,0,444,437,473,438],
[445,434,452,440,447,0,446,491,456],
[444,441,471,446,454,445,0,483,449],
[421,395,415,392,418,400,408,0,405],
[458,452,451,444,453,435,442,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,477,461,439,440,458,444,439],
[455,0,457,445,442,442,457,443,465],
[414,434,0,446,440,420,449,430,422],
[430,446,445,0,429,438,443,437,445],
[452,449,451,462,0,460,442,412,450],
[451,449,471,453,431,0,457,451,457],
[433,434,442,448,449,434,0,435,450],
[447,448,461,454,479,440,456,0,440],
[452,426,469,446,441,434,441,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,389,443,425,427,404,432,442],
[446,0,426,430,425,407,410,428,441],
[502,465,0,440,450,442,460,466,474],
[448,461,451,0,455,437,415,421,458],
[466,466,441,436,0,421,434,452,477],
[464,484,449,454,470,0,423,459,471],
[487,481,431,476,457,468,0,442,484],
[459,463,425,470,439,432,449,0,489],
[449,450,417,433,414,420,407,402,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,468,421,453,463,479,469,422],
[477,0,495,463,482,470,460,477,439],
[423,396,0,411,433,437,408,475,420],
[470,428,480,0,453,442,492,492,451],
[438,409,458,438,0,446,476,478,463],
[428,421,454,449,445,0,478,459,461],
[412,431,483,399,415,413,0,464,427],
[422,414,416,399,413,432,427,0,417],
[469,452,471,440,428,430,464,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,433,454,465,446,475,451,448],
[414,0,420,447,442,420,464,418,459],
[458,471,0,464,478,433,467,435,454],
[437,444,427,0,455,454,463,432,446],
[426,449,413,436,0,451,451,400,427],
[445,471,458,437,440,0,469,452,465],
[416,427,424,428,440,422,0,417,440],
[440,473,456,459,491,439,474,0,464],
[443,432,437,445,464,426,451,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,429,431,426,436,471,470,424],
[457,0,423,462,456,456,474,449,479],
[462,468,0,471,462,468,465,467,424],
[460,429,420,0,410,430,417,404,426],
[465,435,429,481,0,407,445,425,418],
[455,435,423,461,484,0,449,470,467],
[420,417,426,474,446,442,0,445,435],
[421,442,424,487,466,421,446,0,420],
[467,412,467,465,473,424,456,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,468,458,447,461,457,456,456],
[453,0,437,464,453,461,459,446,463],
[423,454,0,436,469,454,451,443,476],
[433,427,455,0,425,458,454,463,454],
[444,438,422,466,0,442,447,458,449],
[430,430,437,433,449,0,431,442,445],
[434,432,440,437,444,460,0,448,471],
[435,445,448,428,433,449,443,0,462],
[435,428,415,437,442,446,420,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,504,478,442,461,475,471,462],
[443,0,502,428,428,527,445,420,447],
[387,389,0,418,425,419,446,418,394],
[413,463,473,0,480,514,504,478,438],
[449,463,466,411,0,459,427,454,447],
[430,364,472,377,432,0,434,448,428],
[416,446,445,387,464,457,0,425,431],
[420,471,473,413,437,443,466,0,410],
[429,444,497,453,444,463,460,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,398,391,384,427,425,457,426],
[439,0,423,409,397,442,437,463,430],
[493,468,0,459,464,435,474,497,469],
[500,482,432,0,464,465,477,523,448],
[507,494,427,427,0,453,458,484,461],
[464,449,456,426,438,0,456,499,441],
[466,454,417,414,433,435,0,472,444],
[434,428,394,368,407,392,419,0,442],
[465,461,422,443,430,450,447,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,431,439,476,425,444,476,430],
[451,0,420,465,464,425,431,447,424],
[460,471,0,487,492,440,469,460,450],
[452,426,404,0,480,417,432,464,427],
[415,427,399,411,0,411,412,421,388],
[466,466,451,474,480,0,457,473,442],
[447,460,422,459,479,434,0,452,461],
[415,444,431,427,470,418,439,0,425],
[461,467,441,464,503,449,430,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,440,443,414,415,442,415,406],
[475,0,440,483,477,470,468,442,448],
[451,451,0,430,420,441,450,443,440],
[448,408,461,0,411,452,472,438,441],
[477,414,471,480,0,438,466,448,447],
[476,421,450,439,453,0,477,436,459],
[449,423,441,419,425,414,0,401,455],
[476,449,448,453,443,455,490,0,460],
[485,443,451,450,444,432,436,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,437,461,420,454,463,460,455],
[444,0,461,476,489,454,475,465,477],
[454,430,0,472,451,460,470,472,459],
[430,415,419,0,429,424,458,453,438],
[471,402,440,462,0,445,462,472,453],
[437,437,431,467,446,0,460,434,448],
[428,416,421,433,429,431,0,445,430],
[431,426,419,438,419,457,446,0,443],
[436,414,432,453,438,443,461,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,487,435,507,460,472,461,450],
[414,0,433,393,441,419,384,433,364],
[404,458,0,408,470,441,397,438,373],
[456,498,483,0,476,473,405,468,409],
[384,450,421,415,0,411,380,419,385],
[431,472,450,418,480,0,441,432,369],
[419,507,494,486,511,450,0,478,412],
[430,458,453,423,472,459,413,0,393],
[441,527,518,482,506,522,479,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,440,485,486,448,435,447,462],
[437,0,462,495,462,424,420,466,433],
[451,429,0,447,459,446,428,472,458],
[406,396,444,0,443,405,392,432,445],
[405,429,432,448,0,419,430,423,437],
[443,467,445,486,472,0,462,460,452],
[456,471,463,499,461,429,0,458,454],
[444,425,419,459,468,431,433,0,438],
[429,458,433,446,454,439,437,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,437,433,449,464,461,449,464],
[440,0,462,438,447,464,449,441,437],
[454,429,0,441,445,468,469,452,434],
[458,453,450,0,442,492,481,454,452],
[442,444,446,449,0,471,455,453,451],
[427,427,423,399,420,0,432,433,434],
[430,442,422,410,436,459,0,443,428],
[442,450,439,437,438,458,448,0,453],
[427,454,457,439,440,457,463,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,454,433,390,486,398,481,409],
[441,0,384,381,412,463,428,440,452],
[437,507,0,435,491,478,423,495,485],
[458,510,456,0,444,533,477,473,481],
[501,479,400,447,0,486,387,455,466],
[405,428,413,358,405,0,422,412,395],
[493,463,468,414,504,469,0,475,464],
[410,451,396,418,436,479,416,0,461],
[482,439,406,410,425,496,427,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,520,515,463,432,507,426,505,520],
[371,0,429,389,382,434,398,410,434],
[376,462,0,424,382,462,400,432,496],
[428,502,467,0,428,461,448,458,507],
[459,509,509,463,0,469,469,441,517],
[384,457,429,430,422,0,394,429,490],
[465,493,491,443,422,497,0,515,528],
[386,481,459,433,450,462,376,0,441],
[371,457,395,384,374,401,363,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,432,453,438,437,450,434,457],
[443,0,448,464,466,469,448,461,484],
[459,443,0,476,458,463,443,432,479],
[438,427,415,0,430,421,451,435,449],
[453,425,433,461,0,434,429,425,457],
[454,422,428,470,457,0,432,453,476],
[441,443,448,440,462,459,0,434,450],
[457,430,459,456,466,438,457,0,474],
[434,407,412,442,434,415,441,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,482,469,500,477,456,450,436],
[418,0,432,443,466,445,417,444,430],
[409,459,0,475,449,459,440,431,444],
[422,448,416,0,453,443,435,423,419],
[391,425,442,438,0,434,448,419,435],
[414,446,432,448,457,0,463,453,466],
[435,474,451,456,443,428,0,421,426],
[441,447,460,468,472,438,470,0,430],
[455,461,447,472,456,425,465,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,451,440,445,454,448,445,476],
[448,0,466,456,422,468,450,450,452],
[440,425,0,436,447,438,428,462,452],
[451,435,455,0,425,462,416,458,456],
[446,469,444,466,0,466,436,451,483],
[437,423,453,429,425,0,436,446,465],
[443,441,463,475,455,455,0,469,458],
[446,441,429,433,440,445,422,0,436],
[415,439,439,435,408,426,433,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,445,450,464,443,455,421,458],
[415,0,452,425,431,430,443,438,445],
[446,439,0,420,423,436,424,430,453],
[441,466,471,0,452,435,444,453,475],
[427,460,468,439,0,458,445,447,445],
[448,461,455,456,433,0,448,470,462],
[436,448,467,447,446,443,0,457,456],
[470,453,461,438,444,421,434,0,443],
[433,446,438,416,446,429,435,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,427,444,367,401,442,486,436],
[443,0,468,432,466,425,463,438,413],
[464,423,0,480,522,510,515,524,484],
[447,459,411,0,440,464,476,461,457],
[524,425,369,451,0,464,492,501,443],
[490,466,381,427,427,0,409,470,335],
[449,428,376,415,399,482,0,435,441],
[405,453,367,430,390,421,456,0,392],
[455,478,407,434,448,556,450,499,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,593,593,297,891,891,891,593,595],
[298,0,298,298,594,298,298,298,298],
[298,593,0,595,891,298,595,595,595],
[594,593,296,0,891,594,594,296,594],
[0,297,0,0,0,298,298,0,298],
[0,593,593,297,593,0,297,297,297],
[0,593,296,297,593,594,0,297,595],
[298,593,296,595,891,594,594,0,595],
[296,593,296,297,593,594,296,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,457,454,482,442,449,459,471],
[440,0,461,461,482,443,468,449,462],
[434,430,0,415,473,442,442,434,446],
[437,430,476,0,477,448,431,447,463],
[409,409,418,414,0,429,436,411,435],
[449,448,449,443,462,0,446,442,459],
[442,423,449,460,455,445,0,443,476],
[432,442,457,444,480,449,448,0,470],
[420,429,445,428,456,432,415,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,471,461,429,464,450,453,458],
[436,0,455,433,441,461,432,445,429],
[420,436,0,409,420,429,429,447,443],
[430,458,482,0,438,454,452,477,456],
[462,450,471,453,0,473,432,486,466],
[427,430,462,437,418,0,430,469,432],
[441,459,462,439,459,461,0,481,440],
[438,446,444,414,405,422,410,0,403],
[433,462,448,435,425,459,451,488,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,429,393,443,437,406,442,419],
[431,0,440,404,447,428,421,431,400],
[462,451,0,449,486,452,446,455,444],
[498,487,442,0,445,453,440,455,457],
[448,444,405,446,0,448,422,451,436],
[454,463,439,438,443,0,449,444,424],
[485,470,445,451,469,442,0,441,430],
[449,460,436,436,440,447,450,0,425],
[472,491,447,434,455,467,461,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,441,441,421,453,419,452,455],
[444,0,442,439,462,450,419,430,403],
[450,449,0,475,456,447,433,424,423],
[450,452,416,0,462,460,397,416,416],
[470,429,435,429,0,452,436,417,443],
[438,441,444,431,439,0,399,409,403],
[472,472,458,494,455,492,0,449,413],
[439,461,467,475,474,482,442,0,395],
[436,488,468,475,448,488,478,496,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,488,400,443,446,447,443,453,456],
[403,0,394,421,407,406,374,426,449],
[491,497,0,458,462,433,462,460,492],
[448,470,433,0,455,444,438,454,493],
[445,484,429,436,0,431,429,482,477],
[444,485,458,447,460,0,438,482,471],
[448,517,429,453,462,453,0,482,475],
[438,465,431,437,409,409,409,0,448],
[435,442,399,398,414,420,416,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,441,445,492,479,453,447,434],
[416,0,427,427,459,476,429,457,418],
[450,464,0,450,454,470,456,467,401],
[446,464,441,0,475,488,416,460,447],
[399,432,437,416,0,471,438,446,407],
[412,415,421,403,420,0,432,434,407],
[438,462,435,475,453,459,0,480,407],
[444,434,424,431,445,457,411,0,415],
[457,473,490,444,484,484,484,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,489,425,470,472,464,513,470],
[456,0,471,415,453,446,422,451,421],
[402,420,0,403,439,431,370,420,418],
[466,476,488,0,459,460,437,468,444],
[421,438,452,432,0,457,419,475,438],
[419,445,460,431,434,0,408,454,401],
[427,469,521,454,472,483,0,474,455],
[378,440,471,423,416,437,417,0,396],
[421,470,473,447,453,490,436,495,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,416,420,394,444,409,438,422,388],
[475,0,446,443,457,467,466,422,431],
[471,445,0,461,462,441,458,454,428],
[497,448,430,0,442,461,443,426,450],
[447,434,429,449,0,437,453,412,439],
[482,424,450,430,454,0,429,434,421],
[453,425,433,448,438,462,0,419,457],
[469,469,437,465,479,457,472,0,460],
[503,460,463,441,452,470,434,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,442,451,453,429,468,452,457],
[434,0,398,455,433,438,446,429,409],
[449,493,0,450,452,437,448,471,449],
[440,436,441,0,454,472,453,463,451],
[438,458,439,437,0,453,473,431,446],
[462,453,454,419,438,0,467,451,463],
[423,445,443,438,418,424,0,424,415],
[439,462,420,428,460,440,467,0,447],
[434,482,442,440,445,428,476,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,416,438,432,430,428,425,416],
[464,0,448,455,454,474,445,464,447],
[475,443,0,429,466,463,450,452,453],
[453,436,462,0,456,463,446,441,447],
[459,437,425,435,0,458,457,440,430],
[461,417,428,428,433,0,409,430,419],
[463,446,441,445,434,482,0,430,439],
[466,427,439,450,451,461,461,0,441],
[475,444,438,444,461,472,452,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,450,402,444,452,455,449,431],
[454,0,448,442,452,447,476,457,436],
[441,443,0,416,399,427,445,429,420],
[489,449,475,0,432,458,479,476,451],
[447,439,492,459,0,467,467,447,441],
[439,444,464,433,424,0,445,436,423],
[436,415,446,412,424,446,0,420,431],
[442,434,462,415,444,455,471,0,411],
[460,455,471,440,450,468,460,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,393,404,427,434,419,448,418],
[450,0,394,425,423,430,410,463,396],
[498,497,0,465,453,484,431,485,473],
[487,466,426,0,440,476,441,492,452],
[464,468,438,451,0,461,431,485,475],
[457,461,407,415,430,0,412,448,416],
[472,481,460,450,460,479,0,489,438],
[443,428,406,399,406,443,402,0,429],
[473,495,418,439,416,475,453,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,469,467,445,461,460,525,463],
[455,0,427,412,423,443,441,433,431],
[422,464,0,465,455,431,456,459,435],
[424,479,426,0,407,409,443,445,404],
[446,468,436,484,0,444,482,439,421],
[430,448,460,482,447,0,446,490,431],
[431,450,435,448,409,445,0,461,456],
[366,458,432,446,452,401,430,0,404],
[428,460,456,487,470,460,435,487,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,380,479,468,454,447,474,488,462],
[511,0,523,542,457,445,509,522,506],
[412,368,0,492,436,434,418,487,452],
[423,349,399,0,394,420,392,386,409],
[437,434,455,497,0,460,503,547,477],
[444,446,457,471,431,0,437,488,451],
[417,382,473,499,388,454,0,454,466],
[403,369,404,505,344,403,437,0,413],
[429,385,439,482,414,440,425,478,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,456,441,477,458,446,507,421],
[477,0,469,495,478,442,461,474,405],
[435,422,0,444,505,432,488,488,436],
[450,396,447,0,453,477,419,456,452],
[414,413,386,438,0,472,415,441,403],
[433,449,459,414,419,0,424,433,402],
[445,430,403,472,476,467,0,419,394],
[384,417,403,435,450,458,472,0,419],
[470,486,455,439,488,489,497,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,446,468,475,413,434,427,448],
[443,0,436,424,442,430,414,448,450],
[445,455,0,453,449,427,416,418,433],
[423,467,438,0,441,419,439,409,447],
[416,449,442,450,0,423,437,417,440],
[478,461,464,472,468,0,457,430,463],
[457,477,475,452,454,434,0,432,462],
[464,443,473,482,474,461,459,0,471],
[443,441,458,444,451,428,429,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,467,428,443,460,490,436,466,460],
[424,0,412,446,450,456,426,446,473],
[463,479,0,410,495,492,482,486,510],
[448,445,481,0,462,461,438,474,472],
[431,441,396,429,0,467,420,451,448],
[401,435,399,430,424,0,408,429,456],
[455,465,409,453,471,483,0,478,475],
[425,445,405,417,440,462,413,0,473],
[431,418,381,419,443,435,416,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,435,460,434,461,435,469,436],
[450,0,455,472,439,454,450,442,429],
[456,436,0,463,441,459,447,469,437],
[431,419,428,0,424,436,435,429,408],
[457,452,450,467,0,456,437,450,430],
[430,437,432,455,435,0,451,431,440],
[456,441,444,456,454,440,0,466,451],
[422,449,422,462,441,460,425,0,428],
[455,462,454,483,461,451,440,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,415,391,428,415,440,392,422],
[473,0,422,412,428,443,455,419,433],
[476,469,0,429,440,410,467,418,437],
[500,479,462,0,477,467,475,432,463],
[463,463,451,414,0,419,455,435,440],
[476,448,481,424,472,0,480,453,448],
[451,436,424,416,436,411,0,428,415],
[499,472,473,459,456,438,463,0,465],
[469,458,454,428,451,443,476,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,439,461,445,453,448,463,467],
[444,0,452,469,434,473,449,462,465],
[452,439,0,467,434,447,429,456,464],
[430,422,424,0,424,454,417,463,445],
[446,457,457,467,0,469,443,461,479],
[438,418,444,437,422,0,438,436,443],
[443,442,462,474,448,453,0,460,499],
[428,429,435,428,430,455,431,0,448],
[424,426,427,446,412,448,392,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,472,478,499,444,479,515,460],
[439,0,494,441,454,415,485,500,446],
[419,397,0,422,454,414,422,473,448],
[413,450,469,0,490,449,447,449,439],
[392,437,437,401,0,449,440,473,391],
[447,476,477,442,442,0,473,494,458],
[412,406,469,444,451,418,0,468,464],
[376,391,418,442,418,397,423,0,377],
[431,445,443,452,500,433,427,514,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,380,429,405,451,466,259,425,532],
[511,0,532,512,491,467,363,532,576],
[462,359,0,386,405,423,318,298,444],
[486,379,505,0,490,466,334,381,464],
[440,400,486,401,0,420,316,402,440],
[425,424,468,425,471,0,381,465,486],
[632,528,573,557,575,510,0,445,548],
[466,359,593,510,489,426,446,0,421],
[359,315,447,427,451,405,343,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,373,398,521,524,396,430,461],
[463,0,435,463,522,584,524,462,490],
[518,456,0,520,430,554,489,522,552],
[493,428,371,0,584,585,493,373,463],
[370,369,461,307,0,522,400,338,523],
[367,307,337,306,369,0,460,276,367],
[495,367,402,398,491,431,0,369,460],
[461,429,369,518,553,615,522,0,556],
[430,401,339,428,368,524,431,335,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,466,431,466,470,436,442,421],
[442,0,476,427,477,456,416,436,429],
[425,415,0,409,458,436,422,411,416],
[460,464,482,0,465,472,426,463,465],
[425,414,433,426,0,418,399,406,418],
[421,435,455,419,473,0,416,414,406],
[455,475,469,465,492,475,0,450,439],
[449,455,480,428,485,477,441,0,449],
[470,462,475,426,473,485,452,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,423,413,411,398,449,419,421],
[489,0,449,432,439,431,449,420,440],
[468,442,0,364,396,406,439,439,431],
[478,459,527,0,451,450,460,452,444],
[480,452,495,440,0,399,490,444,473],
[493,460,485,441,492,0,496,443,460],
[442,442,452,431,401,395,0,369,437],
[472,471,452,439,447,448,522,0,494],
[470,451,460,447,418,431,454,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,407,412,415,426,491,448,441],
[448,0,465,425,388,432,500,398,493],
[484,426,0,424,436,464,473,444,452],
[479,466,467,0,413,449,502,475,440],
[476,503,455,478,0,423,500,456,429],
[465,459,427,442,468,0,477,427,427],
[400,391,418,389,391,414,0,387,395],
[443,493,447,416,435,464,504,0,461],
[450,398,439,451,462,464,496,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,452,473,462,421,446,454,452],
[413,0,447,431,469,397,391,462,443],
[439,444,0,468,453,435,433,460,432],
[418,460,423,0,447,431,405,451,436],
[429,422,438,444,0,402,413,435,403],
[470,494,456,460,489,0,449,486,445],
[445,500,458,486,478,442,0,480,472],
[437,429,431,440,456,405,411,0,416],
[439,448,459,455,488,446,419,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,473,445,458,433,449,444,448],
[456,0,455,440,440,428,432,455,433],
[418,436,0,444,431,419,439,422,428],
[446,451,447,0,432,431,449,445,444],
[433,451,460,459,0,437,441,447,441],
[458,463,472,460,454,0,439,461,448],
[442,459,452,442,450,452,0,436,440],
[447,436,469,446,444,430,455,0,446],
[443,458,463,447,450,443,451,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,470,433,422,437,431,436,420],
[440,0,473,438,437,433,436,412,447],
[421,418,0,413,425,430,405,400,414],
[458,453,478,0,467,461,438,469,450],
[469,454,466,424,0,475,436,454,459],
[454,458,461,430,416,0,440,426,448],
[460,455,486,453,455,451,0,440,466],
[455,479,491,422,437,465,451,0,452],
[471,444,477,441,432,443,425,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,430,443,449,471,442,462,451],
[448,0,426,472,471,440,454,467,464],
[461,465,0,470,464,461,431,488,461],
[448,419,421,0,450,447,464,467,429],
[442,420,427,441,0,447,425,444,445],
[420,451,430,444,444,0,421,475,434],
[449,437,460,427,466,470,0,445,448],
[429,424,403,424,447,416,446,0,421],
[440,427,430,462,446,457,443,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,445,459,455,434,440,446,438],
[429,0,420,464,465,424,443,439,434],
[446,471,0,472,458,441,469,432,466],
[432,427,419,0,434,442,456,448,440],
[436,426,433,457,0,427,464,447,462],
[457,467,450,449,464,0,473,478,442],
[451,448,422,435,427,418,0,466,403],
[445,452,459,443,444,413,425,0,436],
[453,457,425,451,429,449,488,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,465,465,442,440,457,445,453],
[422,0,449,446,425,413,440,442,418],
[426,442,0,460,440,418,432,428,413],
[426,445,431,0,438,410,441,443,417],
[449,466,451,453,0,432,447,448,457],
[451,478,473,481,459,0,466,445,445],
[434,451,459,450,444,425,0,435,425],
[446,449,463,448,443,446,456,0,445],
[438,473,478,474,434,446,466,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,439,466,442,453,459,436,411],
[430,0,450,488,453,446,444,421,417],
[452,441,0,451,448,456,451,444,441],
[425,403,440,0,446,429,429,398,428],
[449,438,443,445,0,427,446,407,425],
[438,445,435,462,464,0,469,438,425],
[432,447,440,462,445,422,0,415,447],
[455,470,447,493,484,453,476,0,445],
[480,474,450,463,466,466,444,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,448,408,435,452,384,433,416],
[479,0,455,403,452,458,431,473,428],
[443,436,0,408,449,434,444,462,468],
[483,488,483,0,503,511,484,443,460],
[456,439,442,388,0,443,440,398,443],
[439,433,457,380,448,0,411,447,430],
[507,460,447,407,451,480,0,476,438],
[458,418,429,448,493,444,415,0,429],
[475,463,423,431,448,461,453,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,486,422,453,447,422,433,496],
[389,0,418,413,436,442,366,436,441],
[405,473,0,409,419,409,395,372,454],
[469,478,482,0,445,435,448,400,477],
[438,455,472,446,0,462,380,422,492],
[444,449,482,456,429,0,372,446,481],
[469,525,496,443,511,519,0,459,494],
[458,455,519,491,469,445,432,0,487],
[395,450,437,414,399,410,397,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,474,451,435,417,468,442,471],
[468,0,444,474,449,448,505,463,462],
[417,447,0,483,460,425,462,447,468],
[440,417,408,0,434,439,468,432,412],
[456,442,431,457,0,442,461,464,447],
[474,443,466,452,449,0,466,470,457],
[423,386,429,423,430,425,0,449,447],
[449,428,444,459,427,421,442,0,469],
[420,429,423,479,444,434,444,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,421,436,417,440,390,445,429],
[435,0,446,438,449,440,438,453,434],
[470,445,0,452,444,451,430,443,453],
[455,453,439,0,453,432,456,457,452],
[474,442,447,438,0,461,458,449,416],
[451,451,440,459,430,0,430,475,452],
[501,453,461,435,433,461,0,461,440],
[446,438,448,434,442,416,430,0,442],
[462,457,438,439,475,439,451,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,445,478,438,465,494,471,457],
[440,0,421,421,429,445,449,452,440],
[446,470,0,447,420,459,484,463,456],
[413,470,444,0,454,446,435,478,439],
[453,462,471,437,0,472,480,448,460],
[426,446,432,445,419,0,454,471,455],
[397,442,407,456,411,437,0,448,436],
[420,439,428,413,443,420,443,0,417],
[434,451,435,452,431,436,455,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,424,418,426,418,432,411,424],
[460,0,436,447,451,429,427,437,444],
[467,455,0,444,466,429,457,440,473],
[473,444,447,0,453,444,453,450,445],
[465,440,425,438,0,443,430,422,447],
[473,462,462,447,448,0,448,441,449],
[459,464,434,438,461,443,0,455,446],
[480,454,451,441,469,450,436,0,464],
[467,447,418,446,444,442,445,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,445,452,416,433,439,436,429],
[448,0,444,447,439,442,462,462,449],
[446,447,0,452,456,408,450,455,403],
[439,444,439,0,409,411,460,423,421],
[475,452,435,482,0,446,471,430,421],
[458,449,483,480,445,0,494,457,436],
[452,429,441,431,420,397,0,441,418],
[455,429,436,468,461,434,450,0,435],
[462,442,488,470,470,455,473,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,405,431,401,486,518,444,426],
[433,0,408,373,391,439,456,423,401],
[486,483,0,436,446,493,485,433,424],
[460,518,455,0,408,460,505,463,425],
[490,500,445,483,0,485,530,464,468],
[405,452,398,431,406,0,445,409,409],
[373,435,406,386,361,446,0,415,407],
[447,468,458,428,427,482,476,0,442],
[465,490,467,466,423,482,484,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,455,395,405,420,424,439,418],
[476,0,476,439,447,466,450,451,448],
[436,415,0,411,412,438,408,429,417],
[496,452,480,0,443,430,452,464,464],
[486,444,479,448,0,447,445,453,459],
[471,425,453,461,444,0,406,443,448],
[467,441,483,439,446,485,0,470,471],
[452,440,462,427,438,448,421,0,452],
[473,443,474,427,432,443,420,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,436,409,477,455,447,425,470],
[470,0,418,437,473,417,497,468,452],
[455,473,0,466,463,440,453,429,466],
[482,454,425,0,512,462,476,482,454],
[414,418,428,379,0,374,421,428,427],
[436,474,451,429,517,0,458,464,475],
[444,394,438,415,470,433,0,423,410],
[466,423,462,409,463,427,468,0,472],
[421,439,425,437,464,416,481,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,475,445,465,475,466,478,489],
[436,0,465,444,460,465,470,453,461],
[416,426,0,448,450,455,455,442,459],
[446,447,443,0,455,450,471,456,450],
[426,431,441,436,0,462,473,461,454],
[416,426,436,441,429,0,438,412,454],
[425,421,436,420,418,453,0,438,441],
[413,438,449,435,430,479,453,0,454],
[402,430,432,441,437,437,450,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,463,422,425,416,444,457,434],
[469,0,456,451,436,438,447,455,458],
[428,435,0,412,432,402,427,461,429],
[469,440,479,0,463,454,456,470,458],
[466,455,459,428,0,461,441,475,449],
[475,453,489,437,430,0,450,460,460],
[447,444,464,435,450,441,0,453,424],
[434,436,430,421,416,431,438,0,423],
[457,433,462,433,442,431,467,468,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,445,456,454,455,459,465,444],
[417,0,440,451,439,451,431,456,448],
[446,451,0,453,435,446,419,447,452],
[435,440,438,0,435,433,425,433,444],
[437,452,456,456,0,459,438,438,442],
[436,440,445,458,432,0,431,437,453],
[432,460,472,466,453,460,0,454,459],
[426,435,444,458,453,454,437,0,433],
[447,443,439,447,449,438,432,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,440,439,447,443,444,429,463],
[448,0,443,458,467,460,450,433,463],
[451,448,0,449,467,457,452,422,456],
[452,433,442,0,466,478,478,441,460],
[444,424,424,425,0,442,452,421,469],
[448,431,434,413,449,0,435,449,476],
[447,441,439,413,439,456,0,431,479],
[462,458,469,450,470,442,460,0,484],
[428,428,435,431,422,415,412,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,433,424,431,447,448,448,460],
[428,0,442,397,389,418,433,428,448],
[458,449,0,429,402,438,433,451,460],
[467,494,462,0,432,447,516,466,462],
[460,502,489,459,0,471,485,426,425],
[444,473,453,444,420,0,437,466,450],
[443,458,458,375,406,454,0,443,438],
[443,463,440,425,465,425,448,0,445],
[431,443,431,429,466,441,453,446,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,477,415,347,503,437,454,477],
[476,0,495,454,476,473,431,365,492],
[414,396,0,460,368,414,477,409,455],
[476,437,431,0,452,456,368,388,391],
[544,415,523,439,0,373,416,411,479],
[388,418,477,435,518,0,413,368,454],
[454,460,414,523,475,478,0,368,587],
[437,526,482,503,480,523,523,0,541],
[414,399,436,500,412,437,304,350,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,448,461,463,437,426,463,455],
[464,0,448,455,414,429,431,468,422],
[443,443,0,448,423,471,453,454,433],
[430,436,443,0,427,432,455,449,413],
[428,477,468,464,0,460,472,484,455],
[454,462,420,459,431,0,422,444,423],
[465,460,438,436,419,469,0,450,396],
[428,423,437,442,407,447,441,0,388],
[436,469,458,478,436,468,495,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,437,455,469,458,467,435,461],
[447,0,414,450,441,422,432,432,429],
[454,477,0,454,446,444,472,452,469],
[436,441,437,0,432,457,437,420,454],
[422,450,445,459,0,443,447,441,451],
[433,469,447,434,448,0,458,459,449],
[424,459,419,454,444,433,0,435,448],
[456,459,439,471,450,432,456,0,481],
[430,462,422,437,440,442,443,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,463,460,436,456,471,436,464],
[450,0,467,458,444,465,450,427,470],
[428,424,0,453,442,443,427,423,446],
[431,433,438,0,443,467,436,417,460],
[455,447,449,448,0,446,441,451,474],
[435,426,448,424,445,0,427,430,426],
[420,441,464,455,450,464,0,424,449],
[455,464,468,474,440,461,467,0,481],
[427,421,445,431,417,465,442,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,419,426,466,426,455,435,446],
[469,0,435,419,436,412,447,447,443],
[472,456,0,458,464,457,462,442,454],
[465,472,433,0,463,462,463,443,458],
[425,455,427,428,0,423,420,417,416],
[465,479,434,429,468,0,455,450,468],
[436,444,429,428,471,436,0,417,441],
[456,444,449,448,474,441,474,0,451],
[445,448,437,433,475,423,450,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,405,425,383,435,432,434,406],
[502,0,421,460,471,489,486,482,468],
[486,470,0,502,442,493,472,519,465],
[466,431,389,0,451,470,495,462,457],
[508,420,449,440,0,483,466,443,449],
[456,402,398,421,408,0,400,406,423],
[459,405,419,396,425,491,0,438,412],
[457,409,372,429,448,485,453,0,416],
[485,423,426,434,442,468,479,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,444,452,459,467,488,472,431],
[436,0,439,461,420,448,445,468,454],
[447,452,0,426,450,467,460,442,449],
[439,430,465,0,437,441,450,454,462],
[432,471,441,454,0,455,463,434,455],
[424,443,424,450,436,0,462,449,471],
[403,446,431,441,428,429,0,462,434],
[419,423,449,437,457,442,429,0,426],
[460,437,442,429,436,420,457,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,506,481,537,442,458,512,472],
[412,0,438,422,459,390,441,490,449],
[385,453,0,492,461,419,372,435,417],
[410,469,399,0,464,386,374,461,427],
[354,432,430,427,0,368,395,403,427],
[449,501,472,505,523,0,429,520,447],
[433,450,519,517,496,462,0,481,457],
[379,401,456,430,488,371,410,0,446],
[419,442,474,464,464,444,434,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,486,391,478,427,426,483,402,451],
[405,0,398,431,357,433,417,438,455],
[500,493,0,441,440,424,467,442,483],
[413,460,450,0,434,369,462,428,445],
[464,534,451,457,0,441,483,505,532],
[465,458,467,522,450,0,501,445,451],
[408,474,424,429,408,390,0,429,437],
[489,453,449,463,386,446,462,0,468],
[440,436,408,446,359,440,454,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,434,470,420,494,443,457,464],
[413,0,412,446,399,435,431,423,449],
[457,479,0,458,409,459,445,459,464],
[421,445,433,0,407,447,439,428,471],
[471,492,482,484,0,436,454,458,493],
[397,456,432,444,455,0,454,445,461],
[448,460,446,452,437,437,0,443,486],
[434,468,432,463,433,446,448,0,443],
[427,442,427,420,398,430,405,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,446,393,429,472,469,397,432],
[412,0,354,396,385,415,462,424,401],
[445,537,0,414,458,445,478,427,451],
[498,495,477,0,484,512,520,425,472],
[462,506,433,407,0,459,499,466,433],
[419,476,446,379,432,0,416,411,424],
[422,429,413,371,392,475,0,386,410],
[494,467,464,466,425,480,505,0,448],
[459,490,440,419,458,467,481,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,447,466,461,478,495,485,464],
[446,0,467,418,464,469,449,467,480],
[444,424,0,444,426,437,427,449,453],
[425,473,447,0,465,488,453,465,499],
[430,427,465,426,0,471,442,473,496],
[413,422,454,403,420,0,416,439,467],
[396,442,464,438,449,475,0,458,423],
[406,424,442,426,418,452,433,0,421],
[427,411,438,392,395,424,468,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,429,471,418,463,451,417,420],
[422,0,413,452,448,455,442,398,425],
[462,478,0,468,427,450,491,467,465],
[420,439,423,0,388,440,449,399,418],
[473,443,464,503,0,484,458,476,468],
[428,436,441,451,407,0,446,404,427],
[440,449,400,442,433,445,0,428,451],
[474,493,424,492,415,487,463,0,447],
[471,466,426,473,423,464,440,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,425,446,441,439,403,418,457],
[461,0,466,457,470,444,444,447,485],
[466,425,0,464,448,428,411,427,463],
[445,434,427,0,445,425,404,422,446],
[450,421,443,446,0,423,415,436,458],
[452,447,463,466,468,0,450,436,459],
[488,447,480,487,476,441,0,457,477],
[473,444,464,469,455,455,434,0,450],
[434,406,428,445,433,432,414,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,362,363,361,329,264,363,325,361],
[529,0,463,432,431,464,531,360,497],
[528,428,0,428,430,331,497,425,529],
[530,459,463,0,561,431,466,492,526],
[562,460,461,330,0,333,469,359,490],
[627,427,560,460,558,0,430,463,460],
[528,360,394,425,422,461,0,392,426],
[566,531,466,399,532,428,499,0,464],
[530,394,362,365,401,431,465,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,437,476,484,472,461,469,466],
[410,0,449,440,434,426,424,418,392],
[454,442,0,446,459,433,450,428,398],
[415,451,445,0,481,436,474,447,450],
[407,457,432,410,0,441,466,401,398],
[419,465,458,455,450,0,452,446,415],
[430,467,441,417,425,439,0,443,432],
[422,473,463,444,490,445,448,0,388],
[425,499,493,441,493,476,459,503,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,487,465,437,460,452,474,468],
[431,0,468,440,454,454,457,450,450],
[404,423,0,405,413,449,426,432,432],
[426,451,486,0,440,469,435,455,470],
[454,437,478,451,0,468,427,465,464],
[431,437,442,422,423,0,421,437,453],
[439,434,465,456,464,470,0,442,460],
[417,441,459,436,426,454,449,0,462],
[423,441,459,421,427,438,431,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,432,443,430,437,435,448,453],
[438,0,448,463,445,437,432,442,434],
[459,443,0,476,450,436,454,462,465],
[448,428,415,0,427,436,407,425,433],
[461,446,441,464,0,427,446,432,449],
[454,454,455,455,464,0,441,440,438],
[456,459,437,484,445,450,0,438,456],
[443,449,429,466,459,451,453,0,474],
[438,457,426,458,442,453,435,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,426,447,452,457,457,439,438],
[437,0,447,427,427,437,444,448,419],
[465,444,0,438,421,440,443,448,451],
[444,464,453,0,440,453,468,456,428],
[439,464,470,451,0,447,472,460,433],
[434,454,451,438,444,0,445,446,422],
[434,447,448,423,419,446,0,442,436],
[452,443,443,435,431,445,449,0,430],
[453,472,440,463,458,469,455,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,430,440,454,509,402,459,379],
[409,0,433,387,390,425,323,398,369],
[461,458,0,419,450,498,449,487,441],
[451,504,472,0,446,521,418,408,474],
[437,501,441,445,0,494,450,499,421],
[382,466,393,370,397,0,360,467,364],
[489,568,442,473,441,531,0,501,445],
[432,493,404,483,392,424,390,0,397],
[512,522,450,417,470,527,446,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,453,495,454,455,439,471,436],
[449,0,420,475,510,475,445,472,453],
[438,471,0,491,463,453,457,471,448],
[396,416,400,0,432,432,398,423,397],
[437,381,428,459,0,421,442,438,424],
[436,416,438,459,470,0,450,447,429],
[452,446,434,493,449,441,0,472,415],
[420,419,420,468,453,444,419,0,441],
[455,438,443,494,467,462,476,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,442,425,434,431,446,435,451],
[441,0,427,445,428,436,474,428,445],
[449,464,0,455,443,464,479,434,456],
[466,446,436,0,430,457,459,447,452],
[457,463,448,461,0,429,458,403,430],
[460,455,427,434,462,0,483,435,468],
[445,417,412,432,433,408,0,403,433],
[456,463,457,444,488,456,488,0,444],
[440,446,435,439,461,423,458,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,449,408,408,405,435,403,516],
[463,0,473,414,446,405,462,407,489],
[442,418,0,376,436,402,414,414,501],
[483,477,515,0,431,449,476,459,486],
[483,445,455,460,0,430,448,455,466],
[486,486,489,442,461,0,490,465,504],
[456,429,477,415,443,401,0,447,460],
[488,484,477,432,436,426,444,0,491],
[375,402,390,405,425,387,431,400,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,504,475,456,482,456,472,435,483],
[387,0,442,442,491,448,487,458,469],
[416,449,0,472,494,451,535,478,547],
[435,449,419,0,509,472,457,514,442],
[409,400,397,382,0,422,503,428,402],
[435,443,440,419,469,0,511,477,485],
[419,404,356,434,388,380,0,394,425],
[456,433,413,377,463,414,497,0,487],
[408,422,344,449,489,406,466,404,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,488,438,454,461,495,459,442],
[443,0,477,458,442,480,490,444,419],
[403,414,0,422,466,475,447,464,423],
[453,433,469,0,461,482,512,458,452],
[437,449,425,430,0,442,439,448,410],
[430,411,416,409,449,0,462,441,426],
[396,401,444,379,452,429,0,410,403],
[432,447,427,433,443,450,481,0,436],
[449,472,468,439,481,465,488,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,388,414,424,511,448,432,455],
[447,0,427,398,461,446,425,414,486],
[503,464,0,431,484,536,469,427,448],
[477,493,460,0,489,537,430,467,460],
[467,430,407,402,0,487,464,440,508],
[380,445,355,354,404,0,419,371,389],
[443,466,422,461,427,472,0,402,480],
[459,477,464,424,451,520,489,0,478],
[436,405,443,431,383,502,411,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,404,459,462,469,544,474,453],
[452,0,474,424,461,487,490,457,434],
[487,417,0,456,511,488,461,432,428],
[432,467,435,0,472,468,509,395,434],
[429,430,380,419,0,415,519,448,394],
[422,404,403,423,476,0,449,392,414],
[347,401,430,382,372,442,0,372,408],
[417,434,459,496,443,499,519,0,417],
[438,457,463,457,497,477,483,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,465,448,475,436,443,456,423],
[455,0,442,456,463,464,467,416,441],
[426,449,0,459,463,412,476,453,468],
[443,435,432,0,471,453,443,424,434],
[416,428,428,420,0,425,435,398,424],
[455,427,479,438,466,0,484,395,436],
[448,424,415,448,456,407,0,399,420],
[435,475,438,467,493,496,492,0,462],
[468,450,423,457,467,455,471,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,435,447,457,455,433,451,464],
[459,0,467,447,436,450,434,465,461],
[456,424,0,440,420,430,427,437,453],
[444,444,451,0,456,440,440,451,465],
[434,455,471,435,0,455,446,449,460],
[436,441,461,451,436,0,443,444,473],
[458,457,464,451,445,448,0,453,493],
[440,426,454,440,442,447,438,0,469],
[427,430,438,426,431,418,398,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,472,463,450,454,436,443,460,431],
[419,0,441,429,424,433,435,422,440],
[428,450,0,422,421,456,444,411,448],
[441,462,469,0,435,443,450,434,454],
[437,467,470,456,0,445,440,447,443],
[455,458,435,448,446,0,463,461,448],
[448,456,447,441,451,428,0,432,444],
[431,469,480,457,444,430,459,0,452],
[460,451,443,437,448,443,447,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,456,452,444,455,455,445,452],
[436,0,431,383,442,438,437,433,422],
[435,460,0,432,470,454,454,453,436],
[439,508,459,0,489,493,459,498,476],
[447,449,421,402,0,441,420,440,450],
[436,453,437,398,450,0,427,431,456],
[436,454,437,432,471,464,0,448,434],
[446,458,438,393,451,460,443,0,405],
[439,469,455,415,441,435,457,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,396,455,415,413,444,429,415],
[473,0,469,529,447,419,504,501,442],
[495,422,0,486,452,431,513,432,429],
[436,362,405,0,399,386,458,423,413],
[476,444,439,492,0,452,496,428,454],
[478,472,460,505,439,0,492,436,423],
[447,387,378,433,395,399,0,449,419],
[462,390,459,468,463,455,442,0,424],
[476,449,462,478,437,468,472,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,480,489,440,459,470,479,448,491],
[411,0,449,427,405,402,442,425,415],
[402,442,0,451,393,395,447,406,452],
[451,464,440,0,424,419,452,454,481],
[432,486,498,467,0,436,458,458,472],
[421,489,496,472,455,0,463,437,497],
[412,449,444,439,433,428,0,440,458],
[443,466,485,437,433,454,451,0,455],
[400,476,439,410,419,394,433,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,460,436,443,443,424,452,425],
[439,0,461,453,451,436,439,450,433],
[431,430,0,417,436,409,428,445,424],
[455,438,474,0,444,432,455,437,421],
[448,440,455,447,0,427,449,438,454],
[448,455,482,459,464,0,449,457,433],
[467,452,463,436,442,442,0,462,443],
[439,441,446,454,453,434,429,0,420],
[466,458,467,470,437,458,448,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,453,462,432,439,439,450,448],
[431,0,466,449,442,431,425,459,438],
[438,425,0,447,412,442,426,442,428],
[429,442,444,0,419,415,415,435,410],
[459,449,479,472,0,421,447,461,444],
[452,460,449,476,470,0,444,461,455],
[452,466,465,476,444,447,0,451,454],
[441,432,449,456,430,430,440,0,426],
[443,453,463,481,447,436,437,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,515,419,394,436,505,453,429],
[455,0,405,383,413,421,408,429,354],
[376,486,0,414,480,440,565,469,411],
[472,508,477,0,500,484,544,420,454],
[497,478,411,391,0,452,547,428,413],
[455,470,451,407,439,0,481,457,425],
[386,483,326,347,344,410,0,378,438],
[438,462,422,471,463,434,513,0,410],
[462,537,480,437,478,466,453,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,436,454,450,456,440,487,465],
[429,0,446,459,437,438,436,472,462],
[455,445,0,454,432,454,451,472,456],
[437,432,437,0,437,433,449,439,460],
[441,454,459,454,0,474,482,481,461],
[435,453,437,458,417,0,438,463,457],
[451,455,440,442,409,453,0,450,430],
[404,419,419,452,410,428,441,0,442],
[426,429,435,431,430,434,461,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,434,425,416,415,461,450,430],
[426,0,418,424,409,386,435,433,441],
[457,473,0,447,465,431,470,462,466],
[466,467,444,0,451,440,490,489,449],
[475,482,426,440,0,454,446,466,471],
[476,505,460,451,437,0,483,486,446],
[430,456,421,401,445,408,0,416,416],
[441,458,429,402,425,405,475,0,459],
[461,450,425,442,420,445,475,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,440,419,468,414,430,421,419],
[430,0,448,430,468,425,458,421,441],
[451,443,0,431,450,441,446,416,417],
[472,461,460,0,483,472,464,426,435],
[423,423,441,408,0,428,424,402,414],
[477,466,450,419,463,0,461,446,431],
[461,433,445,427,467,430,0,426,422],
[470,470,475,465,489,445,465,0,479],
[472,450,474,456,477,460,469,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,370,385,404,422,396,457,434],
[415,0,382,453,413,406,416,398,379],
[521,509,0,375,477,450,446,478,448],
[506,438,516,0,544,482,445,427,403],
[487,478,414,347,0,417,425,370,459],
[469,485,441,409,474,0,386,356,370],
[495,475,445,446,466,505,0,473,452],
[434,493,413,464,521,535,418,0,456],
[457,512,443,488,432,521,439,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,471,433,436,419,438,416,447],
[480,0,458,437,454,446,435,459,447],
[420,433,0,444,436,422,437,445,459],
[458,454,447,0,422,457,429,481,443],
[455,437,455,469,0,419,429,447,444],
[472,445,469,434,472,0,457,441,451],
[453,456,454,462,462,434,0,465,427],
[475,432,446,410,444,450,426,0,464],
[444,444,432,448,447,440,464,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,444,449,428,443,438,456,440],
[460,0,440,450,458,450,446,451,443],
[447,451,0,442,433,462,440,437,451],
[442,441,449,0,465,454,455,461,457],
[463,433,458,426,0,451,415,437,434],
[448,441,429,437,440,0,409,459,424],
[453,445,451,436,476,482,0,458,455],
[435,440,454,430,454,432,433,0,434],
[451,448,440,434,457,467,436,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,482,468,468,483,451,443,485,459],
[409,0,445,437,463,430,429,467,434],
[423,446,0,462,457,443,428,462,418],
[423,454,429,0,440,431,418,453,425],
[408,428,434,451,0,421,434,439,424],
[440,461,448,460,470,0,437,467,442],
[448,462,463,473,457,454,0,480,436],
[406,424,429,438,452,424,411,0,433],
[432,457,473,466,467,449,455,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,438,452,452,443,425,449,401],
[425,0,434,420,418,429,434,440,405],
[453,457,0,427,462,460,449,471,436],
[439,471,464,0,432,445,449,446,418],
[439,473,429,459,0,446,444,454,430],
[448,462,431,446,445,0,449,451,424],
[466,457,442,442,447,442,0,459,446],
[442,451,420,445,437,440,432,0,420],
[490,486,455,473,461,467,445,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,450,427,452,439,458,468,441],
[447,0,477,453,470,438,460,466,448],
[441,414,0,433,459,448,422,451,449],
[464,438,458,0,483,449,445,462,460],
[439,421,432,408,0,425,433,431,444],
[452,453,443,442,466,0,429,449,451],
[433,431,469,446,458,462,0,465,456],
[423,425,440,429,460,442,426,0,441],
[450,443,442,431,447,440,435,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,415,411,410,415,422,429,445,469],
[476,0,441,436,440,452,469,495,486],
[480,450,0,458,446,443,455,480,468],
[481,455,433,0,455,456,469,462,488],
[476,451,445,436,0,458,462,459,468],
[469,439,448,435,433,0,443,470,468],
[462,422,436,422,429,448,0,471,467],
[446,396,411,429,432,421,420,0,459],
[422,405,423,403,423,423,424,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,438,443,459,459,443,412,423],
[450,0,440,453,452,454,442,430,446],
[453,451,0,455,463,478,434,436,426],
[448,438,436,0,481,490,457,439,433],
[432,439,428,410,0,439,426,442,412],
[432,437,413,401,452,0,428,428,420],
[448,449,457,434,465,463,0,429,437],
[479,461,455,452,449,463,462,0,443],
[468,445,465,458,479,471,454,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,427,437,431,433,443,420,400],
[425,0,484,491,440,427,435,439,448],
[464,407,0,449,457,432,456,437,449],
[454,400,442,0,408,423,411,444,419],
[460,451,434,483,0,434,442,457,443],
[458,464,459,468,457,0,466,441,411],
[448,456,435,480,449,425,0,470,431],
[471,452,454,447,434,450,421,0,446],
[491,443,442,472,448,480,460,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,405,406,405,447,435,412,401],
[459,0,438,418,440,459,445,432,438],
[486,453,0,425,448,451,450,448,425],
[485,473,466,0,446,471,446,465,444],
[486,451,443,445,0,457,415,440,427],
[444,432,440,420,434,0,454,432,409],
[456,446,441,445,476,437,0,452,452],
[479,459,443,426,451,459,439,0,426],
[490,453,466,447,464,482,439,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,438,475,445,463,466,478,452],
[445,0,450,475,459,423,467,460,441],
[453,441,0,500,447,454,473,455,463],
[416,416,391,0,406,413,431,433,410],
[446,432,444,485,0,436,482,483,451],
[428,468,437,478,455,0,467,456,440],
[425,424,418,460,409,424,0,426,398],
[413,431,436,458,408,435,465,0,424],
[439,450,428,481,440,451,493,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,462,476,472,404,457,431,444],
[431,0,407,377,390,412,450,398,433],
[429,484,0,453,476,441,487,444,445],
[415,514,438,0,440,440,424,385,451],
[419,501,415,451,0,485,509,465,470],
[487,479,450,451,406,0,514,428,454],
[434,441,404,467,382,377,0,408,427],
[460,493,447,506,426,463,483,0,493],
[447,458,446,440,421,437,464,398,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,419,420,474,437,467,455,439],
[452,0,436,449,462,439,465,443,425],
[472,455,0,424,504,456,454,469,445],
[471,442,467,0,508,412,463,436,429],
[417,429,387,383,0,447,416,417,438],
[454,452,435,479,444,0,508,454,434],
[424,426,437,428,475,383,0,450,438],
[436,448,422,455,474,437,441,0,456],
[452,466,446,462,453,457,453,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,477,401,462,424,412,449,412],
[438,0,464,421,435,480,444,483,440],
[414,427,0,418,455,406,429,449,411],
[490,470,473,0,480,460,434,483,450],
[429,456,436,411,0,442,447,453,424],
[467,411,485,431,449,0,418,463,433],
[479,447,462,457,444,473,0,457,459],
[442,408,442,408,438,428,434,0,409],
[479,451,480,441,467,458,432,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,460,464,455,490,439,466,476],
[423,0,455,460,448,471,444,471,452],
[431,436,0,448,437,443,423,434,449],
[427,431,443,0,449,451,447,431,454],
[436,443,454,442,0,452,417,443,444],
[401,420,448,440,439,0,431,414,434],
[452,447,468,444,474,460,0,470,466],
[425,420,457,460,448,477,421,0,461],
[415,439,442,437,447,457,425,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,465,463,482,440,465,431,422],
[414,0,455,462,401,401,481,410,442],
[426,436,0,412,447,385,440,384,428],
[428,429,479,0,470,450,459,414,455],
[409,490,444,421,0,417,457,433,440],
[451,490,506,441,474,0,458,469,489],
[426,410,451,432,434,433,0,430,470],
[460,481,507,477,458,422,461,0,485],
[469,449,463,436,451,402,421,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,499,461,420,455,482,439,462],
[422,0,440,407,417,481,462,403,453],
[392,451,0,428,426,481,457,457,460],
[430,484,463,0,444,483,460,444,476],
[471,474,465,447,0,487,482,428,432],
[436,410,410,408,404,0,469,407,420],
[409,429,434,431,409,422,0,430,429],
[452,488,434,447,463,484,461,0,453],
[429,438,431,415,459,471,462,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,497,498,449,432,457,523,450,459],
[394,0,464,367,446,388,468,411,447],
[393,427,0,409,445,411,466,406,464],
[442,524,482,0,450,466,538,483,468],
[459,445,446,441,0,416,481,435,454],
[434,503,480,425,475,0,503,449,465],
[368,423,425,353,410,388,0,374,410],
[441,480,485,408,456,442,517,0,466],
[432,444,427,423,437,426,481,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,440,433,439,440,441,455,454],
[457,0,438,443,452,432,428,436,431],
[451,453,0,453,451,440,446,460,447],
[458,448,438,0,427,431,449,443,435],
[452,439,440,464,0,429,438,470,440],
[451,459,451,460,462,0,451,463,434],
[450,463,445,442,453,440,0,459,450],
[436,455,431,448,421,428,432,0,442],
[437,460,444,456,451,457,441,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,455,467,456,451,451,457,443],
[458,0,438,437,460,443,434,431,448],
[436,453,0,448,439,456,411,432,419],
[424,454,443,0,435,434,443,425,441],
[435,431,452,456,0,444,437,422,436],
[440,448,435,457,447,0,429,434,444],
[440,457,480,448,454,462,0,430,432],
[434,460,459,466,469,457,461,0,431],
[448,443,472,450,455,447,459,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,465,434,459,447,453,442,447],
[440,0,430,430,440,456,453,441,436],
[426,461,0,436,444,455,442,424,444],
[457,461,455,0,452,445,452,455,446],
[432,451,447,439,0,434,433,441,435],
[444,435,436,446,457,0,461,413,443],
[438,438,449,439,458,430,0,436,429],
[449,450,467,436,450,478,455,0,441],
[444,455,447,445,456,448,462,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,538,564,459,463,485,378,408,344],
[353,0,538,298,465,405,350,352,349],
[327,353,0,380,272,407,327,304,270],
[432,593,511,0,489,405,483,437,482],
[428,426,619,402,0,455,430,459,483],
[406,486,484,486,436,0,405,352,319],
[513,541,564,408,461,486,0,517,292],
[483,539,587,454,432,539,374,0,399],
[547,542,621,409,408,572,599,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,508,459,440,426,453,466,419],
[461,0,547,487,417,459,511,456,449],
[383,344,0,418,378,409,424,370,378],
[432,404,473,0,421,481,438,495,431],
[451,474,513,470,0,470,475,471,413],
[465,432,482,410,421,0,476,470,431],
[438,380,467,453,416,415,0,440,405],
[425,435,521,396,420,421,451,0,397],
[472,442,513,460,478,460,486,494,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,424,450,452,402,412,430,411],
[441,0,404,422,455,401,411,414,435],
[467,487,0,452,483,446,426,412,414],
[441,469,439,0,479,404,405,452,460],
[439,436,408,412,0,394,422,439,416],
[489,490,445,487,497,0,475,464,500],
[479,480,465,486,469,416,0,434,459],
[461,477,479,439,452,427,457,0,408],
[480,456,477,431,475,391,432,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,448,453,459,447,444,450,461],
[444,0,454,456,436,441,444,443,456],
[443,437,0,453,455,441,427,458,439],
[438,435,438,0,438,427,423,433,445],
[432,455,436,453,0,438,434,432,435],
[444,450,450,464,453,0,451,461,461],
[447,447,464,468,457,440,0,449,449],
[441,448,433,458,459,430,442,0,456],
[430,435,452,446,456,430,442,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,501,503,539,496,430,497,464,576],
[390,0,501,462,566,568,565,501,783],
[388,390,0,458,355,391,317,534,570],
[352,429,433,0,500,431,429,467,499],
[395,325,536,391,0,362,355,465,504],
[461,323,500,460,529,0,494,465,465],
[394,326,574,462,536,397,0,576,505],
[427,390,357,424,426,426,315,0,568],
[315,108,321,392,387,426,386,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,451,449,488,459,432,440,464],
[431,0,443,434,456,429,436,458,432],
[440,448,0,452,469,439,467,439,463],
[442,457,439,0,437,433,440,442,464],
[403,435,422,454,0,415,424,431,441],
[432,462,452,458,476,0,442,474,462],
[459,455,424,451,467,449,0,441,445],
[451,433,452,449,460,417,450,0,447],
[427,459,428,427,450,429,446,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,461,441,430,456,457,459,440],
[430,0,447,429,422,436,430,445,444],
[430,444,0,452,445,451,454,433,446],
[450,462,439,0,448,443,465,447,443],
[461,469,446,443,0,458,443,447,436],
[435,455,440,448,433,0,449,458,451],
[434,461,437,426,448,442,0,430,442],
[432,446,458,444,444,433,461,0,435],
[451,447,445,448,455,440,449,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,428,434,468,467,460,451,440],
[461,0,436,461,445,437,441,450,454],
[463,455,0,438,457,452,454,435,455],
[457,430,453,0,431,460,451,432,448],
[423,446,434,460,0,439,436,427,427],
[424,454,439,431,452,0,413,442,416],
[431,450,437,440,455,478,0,435,429],
[440,441,456,459,464,449,456,0,415],
[451,437,436,443,464,475,462,476,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,453,486,451,458,449,443,463],
[449,0,450,489,435,458,496,457,473],
[438,441,0,468,447,470,487,465,468],
[405,402,423,0,427,415,445,421,432],
[440,456,444,464,0,452,471,479,466],
[433,433,421,476,439,0,491,444,446],
[442,395,404,446,420,400,0,421,429],
[448,434,426,470,412,447,470,0,441],
[428,418,423,459,425,445,462,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,475,439,442,474,478,457,481],
[418,0,420,429,442,423,440,430,480],
[416,471,0,400,437,438,431,401,451],
[452,462,491,0,460,482,479,445,485],
[449,449,454,431,0,438,434,451,445],
[417,468,453,409,453,0,455,425,463],
[413,451,460,412,457,436,0,435,477],
[434,461,490,446,440,466,456,0,453],
[410,411,440,406,446,428,414,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,464,451,480,480,437,470,463],
[438,0,430,445,456,445,415,435,444],
[427,461,0,435,464,440,451,434,443],
[440,446,456,0,467,445,421,424,422],
[411,435,427,424,0,445,415,424,431],
[411,446,451,446,446,0,433,453,444],
[454,476,440,470,476,458,0,444,435],
[421,456,457,467,467,438,447,0,429],
[428,447,448,469,460,447,456,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,442,469,451,454,474,481,449],
[440,0,448,467,463,425,467,435,459],
[449,443,0,509,471,484,501,471,469],
[422,424,382,0,445,439,464,421,424],
[440,428,420,446,0,449,429,463,446],
[437,466,407,452,442,0,465,451,435],
[417,424,390,427,462,426,0,444,436],
[410,456,420,470,428,440,447,0,437],
[442,432,422,467,445,456,455,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,519,520,614,547,502,410,684,611],
[372,0,410,479,502,410,460,456,545],
[371,481,0,501,460,506,412,528,548],
[277,412,390,0,322,366,320,456,500],
[344,389,431,569,0,438,368,481,476],
[389,481,385,525,453,0,367,502,568],
[481,431,479,571,523,524,0,570,589],
[207,435,363,435,410,389,321,0,385],
[280,346,343,391,415,323,302,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,464,491,462,475,448,437,434],
[414,0,433,453,421,435,444,460,439],
[427,458,0,445,433,456,430,423,465],
[400,438,446,0,428,427,408,392,443],
[429,470,458,463,0,443,452,461,467],
[416,456,435,464,448,0,443,423,456],
[443,447,461,483,439,448,0,439,456],
[454,431,468,499,430,468,452,0,466],
[457,452,426,448,424,435,435,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,456,463,439,476,481,478,450],
[440,0,449,473,458,460,436,459,448],
[435,442,0,509,502,499,476,464,487],
[428,418,382,0,406,439,466,449,447],
[452,433,389,485,0,444,471,479,492],
[415,431,392,452,447,0,453,398,448],
[410,455,415,425,420,438,0,434,437],
[413,432,427,442,412,493,457,0,451],
[441,443,404,444,399,443,454,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,492,464,467,454,452,458,447,432],
[399,0,460,416,399,423,392,395,385],
[427,431,0,441,440,433,452,410,407],
[424,475,450,0,428,425,434,414,429],
[437,492,451,463,0,446,428,409,435],
[439,468,458,466,445,0,446,441,459],
[433,499,439,457,463,445,0,413,440],
[444,496,481,477,482,450,478,0,465],
[459,506,484,462,456,432,451,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,429,398,430,442,431,434,424],
[451,0,447,416,407,438,444,406,415],
[462,444,0,451,409,474,454,434,435],
[493,475,440,0,455,479,481,464,454],
[461,484,482,436,0,493,466,473,463],
[449,453,417,412,398,0,465,408,410],
[460,447,437,410,425,426,0,427,452],
[457,485,457,427,418,483,464,0,429],
[467,476,456,437,428,481,439,462,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,434,437,455,470,435,522,483],
[464,0,485,449,463,442,429,446,468],
[457,406,0,425,429,440,404,491,463],
[454,442,466,0,472,457,443,475,478],
[436,428,462,419,0,501,474,481,444],
[421,449,451,434,390,0,443,488,458],
[456,462,487,448,417,448,0,485,448],
[369,445,400,416,410,403,406,0,419],
[408,423,428,413,447,433,443,472,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,473,427,464,424,475,443,428,453],
[418,0,429,443,430,447,440,423,443],
[464,462,0,437,443,484,470,452,473],
[427,448,454,0,446,472,438,424,433],
[467,461,448,445,0,471,434,440,426],
[416,444,407,419,420,0,416,398,411],
[448,451,421,453,457,475,0,434,453],
[463,468,439,467,451,493,457,0,463],
[438,448,418,458,465,480,438,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,382,477,435,389,448,433,476],
[474,0,429,535,489,458,490,422,461],
[509,462,0,484,412,418,499,457,452],
[414,356,407,0,393,388,369,405,406],
[456,402,479,498,0,398,434,434,494],
[502,433,473,503,493,0,493,450,464],
[443,401,392,522,457,398,0,476,441],
[458,469,434,486,457,441,415,0,488],
[415,430,439,485,397,427,450,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,432,439,473,456,429,450,416],
[458,0,443,460,467,473,450,466,437],
[459,448,0,460,485,475,423,448,423],
[452,431,431,0,469,483,415,445,425],
[418,424,406,422,0,452,415,426,420],
[435,418,416,408,439,0,401,414,404],
[462,441,468,476,476,490,0,461,459],
[441,425,443,446,465,477,430,0,442],
[475,454,468,466,471,487,432,449,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,416,416,495,452,448,453,474],
[443,0,449,452,487,419,430,482,490],
[475,442,0,483,495,414,483,486,499],
[475,439,408,0,445,423,420,464,477],
[396,404,396,446,0,360,423,480,431],
[439,472,477,468,531,0,464,533,480],
[443,461,408,471,468,427,0,464,481],
[438,409,405,427,411,358,427,0,456],
[417,401,392,414,460,411,410,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,436,406,441,423,443,407,427],
[441,0,440,444,414,439,443,425,443],
[455,451,0,436,439,438,448,455,437],
[485,447,455,0,438,447,467,415,461],
[450,477,452,453,0,444,459,445,438],
[468,452,453,444,447,0,453,464,446],
[448,448,443,424,432,438,0,390,418],
[484,466,436,476,446,427,501,0,447],
[464,448,454,430,453,445,473,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,456,474,425,472,473,495,477],
[437,0,457,482,450,478,424,460,466],
[435,434,0,466,440,470,462,457,469],
[417,409,425,0,421,448,435,449,445],
[466,441,451,470,0,487,474,465,462],
[419,413,421,443,404,0,439,456,447],
[418,467,429,456,417,452,0,436,445],
[396,431,434,442,426,435,455,0,427],
[414,425,422,446,429,444,446,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,485,421,454,434,443,469,433,434],
[406,0,422,439,415,414,483,371,389],
[470,469,0,545,444,452,534,489,412],
[437,452,346,0,360,434,492,403,417],
[457,476,447,531,0,403,599,430,424],
[448,477,439,457,488,0,541,453,455],
[422,408,357,399,292,350,0,431,402],
[458,520,402,488,461,438,460,0,414],
[457,502,479,474,467,436,489,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,462,523,453,501,487,419,446,441],
[429,0,432,446,446,490,435,425,457],
[368,459,0,437,482,448,435,444,431],
[438,445,454,0,437,469,441,439,426],
[390,445,409,454,0,463,445,404,380],
[404,401,443,422,428,0,415,416,439],
[472,456,456,450,446,476,0,414,442],
[445,466,447,452,487,475,477,0,471],
[450,434,460,465,511,452,449,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,466,453,463,440,459,444,443],
[447,0,433,475,439,422,447,442,478],
[425,458,0,438,427,424,459,427,455],
[438,416,453,0,441,410,425,403,435],
[428,452,464,450,0,416,441,453,449],
[451,469,467,481,475,0,483,444,473],
[432,444,432,466,450,408,0,431,458],
[447,449,464,488,438,447,460,0,469],
[448,413,436,456,442,418,433,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,414,431,416,427,437,391,460],
[447,0,467,451,425,458,479,421,448],
[477,424,0,437,471,460,458,452,476],
[460,440,454,0,439,462,450,411,464],
[475,466,420,452,0,466,494,442,500],
[464,433,431,429,425,0,445,367,495],
[454,412,433,441,397,446,0,403,447],
[500,470,439,480,449,524,488,0,498],
[431,443,415,427,391,396,444,393,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,473,441,440,446,459,472,450],
[459,0,480,461,438,476,451,472,475],
[418,411,0,419,415,430,406,452,443],
[450,430,472,0,436,424,442,479,458],
[451,453,476,455,0,444,454,475,458],
[445,415,461,467,447,0,435,477,481],
[432,440,485,449,437,456,0,455,467],
[419,419,439,412,416,414,436,0,447],
[441,416,448,433,433,410,424,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,444,464,471,461,471,446,450],
[461,0,468,468,488,486,481,436,459],
[447,423,0,449,444,484,463,437,439],
[427,423,442,0,438,438,444,422,420],
[420,403,447,453,0,460,453,437,434],
[430,405,407,453,431,0,440,409,420],
[420,410,428,447,438,451,0,424,424],
[445,455,454,469,454,482,467,0,459],
[441,432,452,471,457,471,467,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,473,377,450,444,437,432,445],
[433,0,436,432,411,398,440,432,411],
[418,455,0,411,417,443,453,422,415],
[514,459,480,0,442,473,490,472,443],
[441,480,474,449,0,477,468,458,471],
[447,493,448,418,414,0,424,442,416],
[454,451,438,401,423,467,0,417,448],
[459,459,469,419,433,449,474,0,444],
[446,480,476,448,420,475,443,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,416,416,408,441,456,448,459],
[436,0,447,449,432,455,407,423,414],
[475,444,0,475,449,465,503,482,442],
[475,442,416,0,404,450,470,439,477],
[483,459,442,487,0,489,504,482,475],
[450,436,426,441,402,0,432,478,478],
[435,484,388,421,387,459,0,423,444],
[443,468,409,452,409,413,468,0,455],
[432,477,449,414,416,413,447,436,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,455,472,515,446,437,522,425,433],
[436,0,400,492,496,373,438,438,456],
[419,491,0,486,473,464,472,414,451],
[376,399,405,0,452,355,435,402,406],
[445,395,418,439,0,428,477,406,420],
[454,518,427,536,463,0,539,455,446],
[369,453,419,456,414,352,0,412,423],
[466,453,477,489,485,436,479,0,454],
[458,435,440,485,471,445,468,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,452,445,436,471,448,470,446],
[441,0,457,445,428,448,441,445,470],
[439,434,0,444,411,443,431,444,435],
[446,446,447,0,455,453,434,455,430],
[455,463,480,436,0,476,446,457,437],
[420,443,448,438,415,0,431,445,407],
[443,450,460,457,445,460,0,449,443],
[421,446,447,436,434,446,442,0,434],
[445,421,456,461,454,484,448,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,454,419,429,487,416,439,470],
[445,0,435,423,442,466,444,422,448],
[437,456,0,453,439,445,439,457,486],
[472,468,438,0,445,459,436,433,470],
[462,449,452,446,0,457,432,443,449],
[404,425,446,432,434,0,436,418,452],
[475,447,452,455,459,455,0,430,487],
[452,469,434,458,448,473,461,0,465],
[421,443,405,421,442,439,404,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,477,432,466,461,490,477,485],
[422,0,442,418,445,462,480,444,412],
[414,449,0,437,436,490,461,455,446],
[459,473,454,0,436,454,458,470,458],
[425,446,455,455,0,486,478,447,470],
[430,429,401,437,405,0,453,427,429],
[401,411,430,433,413,438,0,432,420],
[414,447,436,421,444,464,459,0,459],
[406,479,445,433,421,462,471,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,459,433,463,453,477,438,457],
[445,0,448,440,467,464,469,457,433],
[432,443,0,464,476,437,468,426,457],
[458,451,427,0,464,460,446,454,451],
[428,424,415,427,0,445,448,425,467],
[438,427,454,431,446,0,470,442,460],
[414,422,423,445,443,421,0,432,471],
[453,434,465,437,466,449,459,0,462],
[434,458,434,440,424,431,420,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,454,441,424,434,438,440,450],
[432,0,416,430,468,471,413,444,455],
[437,475,0,446,457,448,486,459,432],
[450,461,445,0,458,466,448,449,445],
[467,423,434,433,0,476,446,479,468],
[457,420,443,425,415,0,433,445,438],
[453,478,405,443,445,458,0,460,462],
[451,447,432,442,412,446,431,0,437],
[441,436,459,446,423,453,429,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,440,417,410,438,416,413,434],
[450,0,427,432,407,404,428,414,414],
[451,464,0,449,448,427,469,431,446],
[474,459,442,0,457,461,445,436,457],
[481,484,443,434,0,441,443,450,433],
[453,487,464,430,450,0,429,446,461],
[475,463,422,446,448,462,0,461,460],
[478,477,460,455,441,445,430,0,426],
[457,477,445,434,458,430,431,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,498,467,428,436,453,466,462],
[449,0,448,470,437,440,454,448,494],
[393,443,0,465,434,453,469,454,439],
[424,421,426,0,440,443,464,490,445],
[463,454,457,451,0,441,454,465,475],
[455,451,438,448,450,0,453,435,484],
[438,437,422,427,437,438,0,483,458],
[425,443,437,401,426,456,408,0,441],
[429,397,452,446,416,407,433,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,456,453,444,409,417,445,449],
[457,0,429,461,442,446,425,450,478],
[435,462,0,481,461,445,447,435,466],
[438,430,410,0,415,398,449,444,456],
[447,449,430,476,0,438,436,467,472],
[482,445,446,493,453,0,446,477,496],
[474,466,444,442,455,445,0,439,488],
[446,441,456,447,424,414,452,0,478],
[442,413,425,435,419,395,403,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,422,425,478,475,431,459,429],
[441,0,458,471,464,457,413,457,433],
[469,433,0,449,501,467,433,479,449],
[466,420,442,0,467,426,412,425,402],
[413,427,390,424,0,446,395,429,409],
[416,434,424,465,445,0,400,440,414],
[460,478,458,479,496,491,0,453,435],
[432,434,412,466,462,451,438,0,432],
[462,458,442,489,482,477,456,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,381,510,511,510,508,384,380,637],
[510,0,256,256,256,765,383,383,383],
[381,635,0,384,380,509,510,382,255],
[380,635,507,0,380,762,509,634,506],
[381,635,511,511,0,762,509,509,511],
[383,126,382,129,129,0,509,126,129],
[507,508,381,382,382,382,0,508,382],
[511,508,509,257,382,765,383,0,509],
[254,508,636,385,380,762,509,382,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,434,438,441,423,435,439,445],
[440,0,431,438,406,420,444,423,423],
[457,460,0,447,453,451,459,452,445],
[453,453,444,0,443,438,451,456,439],
[450,485,438,448,0,433,435,444,438],
[468,471,440,453,458,0,452,455,447],
[456,447,432,440,456,439,0,447,432],
[452,468,439,435,447,436,444,0,437],
[446,468,446,452,453,444,459,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,428,410,390,416,435,424,421],
[449,0,425,419,433,424,454,428,424],
[463,466,0,446,422,446,459,438,446],
[481,472,445,0,431,451,458,444,441],
[501,458,469,460,0,445,459,459,456],
[475,467,445,440,446,0,446,444,439],
[456,437,432,433,432,445,0,465,466],
[467,463,453,447,432,447,426,0,440],
[470,467,445,450,435,452,425,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,481,476,421,461,417,439,489,451],
[410,0,435,409,434,427,460,459,420],
[415,456,0,416,441,429,450,456,450],
[470,482,475,0,476,455,424,517,517],
[430,457,450,415,0,390,428,448,427],
[474,464,462,436,501,0,443,485,454],
[452,431,441,467,463,448,0,472,442],
[402,432,435,374,443,406,419,0,436],
[440,471,441,374,464,437,449,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,437,402,427,421,428,446,433],
[449,0,463,429,424,418,417,430,427],
[454,428,0,408,424,449,449,427,441],
[489,462,483,0,423,446,461,458,441],
[464,467,467,468,0,444,470,471,472],
[470,473,442,445,447,0,470,451,457],
[463,474,442,430,421,421,0,450,433],
[445,461,464,433,420,440,441,0,448],
[458,464,450,450,419,434,458,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,478,439,399,428,449,442,445,444],
[413,0,407,402,440,451,433,426,429],
[452,484,0,414,457,501,427,453,463],
[492,489,477,0,455,476,449,444,485],
[463,451,434,436,0,447,436,446,420],
[442,440,390,415,444,0,414,413,433],
[449,458,464,442,455,477,0,449,447],
[446,465,438,447,445,478,442,0,438],
[447,462,428,406,471,458,444,453,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,476,434,434,418,459,425,448],
[456,0,473,411,439,430,464,425,455],
[415,418,0,419,418,410,436,415,421],
[457,480,472,0,450,434,464,420,453],
[457,452,473,441,0,434,486,461,475],
[473,461,481,457,457,0,466,437,484],
[432,427,455,427,405,425,0,430,443],
[466,466,476,471,430,454,461,0,486],
[443,436,470,438,416,407,448,405,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,429,442,453,457,453,441,427],
[434,0,439,434,439,443,451,404,422],
[462,452,0,439,417,448,426,432,438],
[449,457,452,0,475,461,474,422,446],
[438,452,474,416,0,467,466,458,432],
[434,448,443,430,424,0,487,414,415],
[438,440,465,417,425,404,0,419,418],
[450,487,459,469,433,477,472,0,424],
[464,469,453,445,459,476,473,467,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,421,476,436,479,452,473,439,441],
[470,0,473,441,467,445,496,464,495],
[415,418,0,426,441,425,496,456,476],
[455,450,465,0,472,444,470,435,439],
[412,424,450,419,0,423,447,415,477],
[439,446,466,447,468,0,473,447,486],
[418,395,395,421,444,418,0,452,433],
[452,427,435,456,476,444,439,0,454],
[450,396,415,452,414,405,458,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,400,433,431,424,431,403,399],
[437,0,420,436,433,440,478,412,411],
[491,471,0,457,488,464,489,434,457],
[458,455,434,0,443,450,481,449,473],
[460,458,403,448,0,448,446,434,436],
[467,451,427,441,443,0,461,403,432],
[460,413,402,410,445,430,0,459,420],
[488,479,457,442,457,488,432,0,458],
[492,480,434,418,455,459,471,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,462,430,459,446,435,466,421],
[442,0,420,451,469,478,457,489,455],
[429,471,0,456,461,493,438,486,468],
[461,440,435,0,463,477,454,451,460],
[432,422,430,428,0,471,430,457,435],
[445,413,398,414,420,0,434,448,423],
[456,434,453,437,461,457,0,445,458],
[425,402,405,440,434,443,446,0,407],
[470,436,423,431,456,468,433,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,446,446,669,223,223,891,445],
[445,0,445,669,668,223,223,891,222],
[445,446,0,446,668,446,446,668,668],
[445,222,445,0,668,445,223,891,222],
[222,223,223,223,0,0,223,668,222],
[668,668,445,446,891,0,669,891,445],
[668,668,445,668,668,222,0,891,222],
[0,0,223,0,223,0,0,0,222],
[446,669,223,669,669,446,669,669,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,389,482,457,428,450,452,465],
[454,0,436,485,454,452,444,469,479],
[502,455,0,516,487,426,474,466,458],
[409,406,375,0,425,393,397,435,413],
[434,437,404,466,0,440,424,451,434],
[463,439,465,498,451,0,456,463,468],
[441,447,417,494,467,435,0,455,416],
[439,422,425,456,440,428,436,0,405],
[426,412,433,478,457,423,475,486,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,464,415,406,434,417,425,436],
[463,0,472,445,465,458,443,442,459],
[427,419,0,403,411,420,438,420,433],
[476,446,488,0,455,467,450,446,436],
[485,426,480,436,0,429,440,438,439],
[457,433,471,424,462,0,449,441,443],
[474,448,453,441,451,442,0,469,465],
[466,449,471,445,453,450,422,0,420],
[455,432,458,455,452,448,426,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,445,668,668,668,446,445,446],
[445,0,668,891,445,891,891,668,891],
[446,223,0,668,445,891,669,445,446],
[223,0,223,0,0,446,223,223,223],
[223,446,446,891,0,891,669,446,446],
[223,0,0,445,0,0,0,0,0],
[445,0,222,668,222,891,0,222,223],
[446,223,446,668,445,891,669,0,669],
[445,0,445,668,445,891,668,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,436,449,444,440,468,422,443],
[438,0,448,449,469,452,465,451,447],
[455,443,0,438,446,444,462,432,428],
[442,442,453,0,440,437,454,447,451],
[447,422,445,451,0,423,471,414,440],
[451,439,447,454,468,0,458,424,451],
[423,426,429,437,420,433,0,419,430],
[469,440,459,444,477,467,472,0,456],
[448,444,463,440,451,440,461,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,388,353,315,412,380,382,339,343],
[503,0,415,352,478,394,500,394,482],
[538,476,0,385,512,367,438,438,412],
[576,539,506,0,579,426,507,494,540],
[479,413,379,312,0,377,479,451,423],
[511,497,524,465,514,0,504,408,425],
[509,391,453,384,412,387,0,345,452],
[552,497,453,397,440,483,546,0,464],
[548,409,479,351,468,466,439,427,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,435,444,446,451,440,456,445],
[450,0,447,456,452,478,440,449,442],
[456,444,0,453,443,451,453,467,419],
[447,435,438,0,433,456,438,429,423],
[445,439,448,458,0,453,432,461,425],
[440,413,440,435,438,0,426,448,430],
[451,451,438,453,459,465,0,456,452],
[435,442,424,462,430,443,435,0,425],
[446,449,472,468,466,461,439,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,474,464,470,480,472,432,399],
[444,0,461,485,504,475,497,460,485],
[417,430,0,476,431,470,448,430,496],
[427,406,415,0,468,465,473,380,441],
[421,387,460,423,0,449,427,436,439],
[411,416,421,426,442,0,425,406,422],
[419,394,443,418,464,466,0,403,431],
[459,431,461,511,455,485,488,0,501],
[492,406,395,450,452,469,460,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,471,464,462,454,448,467,431],
[431,0,466,457,454,431,439,452,441],
[420,425,0,436,467,425,429,434,416],
[427,434,455,0,473,440,415,433,444],
[429,437,424,418,0,414,401,425,402],
[437,460,466,451,477,0,445,458,431],
[443,452,462,476,490,446,0,470,444],
[424,439,457,458,466,433,421,0,451],
[460,450,475,447,489,460,447,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,404,415,435,453,415,422,432],
[465,0,441,447,466,470,432,435,454],
[487,450,0,441,447,478,453,456,440],
[476,444,450,0,449,440,453,418,440],
[456,425,444,442,0,460,430,420,456],
[438,421,413,451,431,0,431,415,432],
[476,459,438,438,461,460,0,473,464],
[469,456,435,473,471,476,418,0,451],
[459,437,451,451,435,459,427,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,440,427,415,434,405,437,399],
[466,0,462,447,419,463,449,457,450],
[451,429,0,437,421,436,422,432,423],
[464,444,454,0,441,454,438,464,446],
[476,472,470,450,0,491,438,458,448],
[457,428,455,437,400,0,428,431,440],
[486,442,469,453,453,463,0,467,450],
[454,434,459,427,433,460,424,0,436],
[492,441,468,445,443,451,441,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,448,423,434,427,442,429,439],
[443,0,452,437,449,430,445,412,445],
[443,439,0,434,461,437,443,424,448],
[468,454,457,0,467,455,459,423,467],
[457,442,430,424,0,423,430,433,438],
[464,461,454,436,468,0,470,448,477],
[449,446,448,432,461,421,0,434,456],
[462,479,467,468,458,443,457,0,462],
[452,446,443,424,453,414,435,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,430,431,456,456,430,475,433],
[477,0,463,458,499,495,436,503,464],
[461,428,0,430,456,466,408,471,457],
[460,433,461,0,461,469,455,474,437],
[435,392,435,430,0,456,432,475,430],
[435,396,425,422,435,0,410,448,421],
[461,455,483,436,459,481,0,511,451],
[416,388,420,417,416,443,380,0,385],
[458,427,434,454,461,470,440,506,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,428,423,422,430,428,420,396],
[468,0,427,456,455,479,434,417,447],
[463,464,0,444,477,500,473,474,446],
[468,435,447,0,468,492,446,437,477],
[469,436,414,423,0,412,414,439,422],
[461,412,391,399,479,0,372,408,416],
[463,457,418,445,477,519,0,435,432],
[471,474,417,454,452,483,456,0,453],
[495,444,445,414,469,475,459,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,422,455,454,456,430,443,486],
[425,0,457,449,418,422,396,437,443],
[469,434,0,448,434,448,400,432,445],
[436,442,443,0,452,435,407,419,444],
[437,473,457,439,0,423,397,451,498],
[435,469,443,456,468,0,401,458,480],
[461,495,491,484,494,490,0,434,492],
[448,454,459,472,440,433,457,0,484],
[405,448,446,447,393,411,399,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,434,450,437,463,475,434,457],
[440,0,432,424,447,436,459,443,427],
[457,459,0,461,463,468,473,465,443],
[441,467,430,0,463,464,479,442,465],
[454,444,428,428,0,449,446,432,436],
[428,455,423,427,442,0,437,424,444],
[416,432,418,412,445,454,0,420,442],
[457,448,426,449,459,467,471,0,447],
[434,464,448,426,455,447,449,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,440,447,440,441,459,457,439],
[439,0,433,438,437,418,455,453,448],
[451,458,0,441,430,439,451,475,423],
[444,453,450,0,454,443,441,476,441],
[451,454,461,437,0,445,436,471,454],
[450,473,452,448,446,0,455,461,431],
[432,436,440,450,455,436,0,448,458],
[434,438,416,415,420,430,443,0,432],
[452,443,468,450,437,460,433,459,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,431,421,430,431,422,478,466],
[439,0,408,424,417,410,431,458,430],
[460,483,0,462,438,432,449,467,452],
[470,467,429,0,436,456,432,466,437],
[461,474,453,455,0,437,452,454,473],
[460,481,459,435,454,0,482,465,451],
[469,460,442,459,439,409,0,466,453],
[413,433,424,425,437,426,425,0,428],
[425,461,439,454,418,440,438,463,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,416,491,439,392,413,419,436],
[438,0,456,474,440,425,436,428,465],
[475,435,0,490,431,462,440,461,449],
[400,417,401,0,440,378,391,393,415],
[452,451,460,451,0,430,416,388,439],
[499,466,429,513,461,0,460,457,476],
[478,455,451,500,475,431,0,417,452],
[472,463,430,498,503,434,474,0,470],
[455,426,442,476,452,415,439,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,513,456,444,446,413,346,464],
[444,0,476,437,395,382,404,395,428],
[378,415,0,403,395,377,408,320,410],
[435,454,488,0,437,397,459,374,474],
[447,496,496,454,0,422,400,437,483],
[445,509,514,494,469,0,490,474,534],
[478,487,483,432,491,401,0,422,456],
[545,496,571,517,454,417,469,0,483],
[427,463,481,417,408,357,435,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,431,466,460,444,445,425,446],
[446,0,442,439,437,425,443,436,455],
[460,449,0,456,462,439,451,457,441],
[425,452,435,0,454,455,443,445,433],
[431,454,429,437,0,440,446,453,433],
[447,466,452,436,451,0,460,451,447],
[446,448,440,448,445,431,0,432,446],
[466,455,434,446,438,440,459,0,435],
[445,436,450,458,458,444,445,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,451,463,406,456,437,442,458],
[437,0,432,482,439,445,438,465,443],
[440,459,0,490,444,437,448,451,452],
[428,409,401,0,387,422,396,428,414],
[485,452,447,504,0,439,453,467,452],
[435,446,454,469,452,0,444,460,451],
[454,453,443,495,438,447,0,477,466],
[449,426,440,463,424,431,414,0,440],
[433,448,439,477,439,440,425,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,379,473,435,437,404,525,465],
[397,0,487,397,471,471,474,398,482],
[512,404,0,458,458,402,420,474,490],
[418,494,433,0,420,435,385,468,412],
[456,420,433,471,0,453,417,378,450],
[454,420,489,456,438,0,384,414,469],
[487,417,471,506,474,507,0,483,449],
[366,493,417,423,513,477,408,0,468],
[426,409,401,479,441,422,442,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,488,445,460,483,483,453,475],
[455,0,465,466,486,477,444,472,469],
[403,426,0,426,464,447,439,423,432],
[446,425,465,0,462,480,459,435,455],
[431,405,427,429,0,443,425,428,402],
[408,414,444,411,448,0,440,450,426],
[408,447,452,432,466,451,0,437,448],
[438,419,468,456,463,441,454,0,444],
[416,422,459,436,489,465,443,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,441,446,433,436,424,439,408],
[435,0,436,439,425,393,418,409,406],
[450,455,0,418,444,421,421,419,420],
[445,452,473,0,437,416,432,435,410],
[458,466,447,454,0,445,441,412,442],
[455,498,470,475,446,0,448,436,437],
[467,473,470,459,450,443,0,435,447],
[452,482,472,456,479,455,456,0,434],
[483,485,471,481,449,454,444,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,422,427,437,432,425,432,429,441],
[469,0,422,465,420,460,445,455,454],
[464,469,0,471,456,448,472,467,438],
[454,426,420,0,442,452,440,449,439],
[459,471,435,449,0,479,459,466,459],
[466,431,443,439,412,0,446,444,461],
[459,446,419,451,432,445,0,471,442],
[462,436,424,442,425,447,420,0,452],
[450,437,453,452,432,430,449,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,446,439,453,459,458,460,463],
[454,0,454,447,452,438,442,457,464],
[445,437,0,432,449,438,451,461,460],
[452,444,459,0,432,443,430,448,449],
[438,439,442,459,0,430,434,435,457],
[432,453,453,448,461,0,455,462,479],
[433,449,440,461,457,436,0,429,448],
[431,434,430,443,456,429,462,0,458],
[428,427,431,442,434,412,443,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,445,451,447,456,451,443,449],
[423,0,411,421,436,434,420,437,410],
[446,480,0,461,458,478,452,460,444],
[440,470,430,0,437,464,439,437,460],
[444,455,433,454,0,456,456,442,427],
[435,457,413,427,435,0,418,404,448],
[440,471,439,452,435,473,0,439,458],
[448,454,431,454,449,487,452,0,437],
[442,481,447,431,464,443,433,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,483,467,459,452,449,442,482],
[427,0,456,444,449,436,457,430,459],
[408,435,0,426,407,425,411,418,444],
[424,447,465,0,420,457,442,437,476],
[432,442,484,471,0,439,451,444,488],
[439,455,466,434,452,0,459,452,461],
[442,434,480,449,440,432,0,423,468],
[449,461,473,454,447,439,468,0,476],
[409,432,447,415,403,430,423,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,462,447,469,424,440,436,430],
[445,0,460,472,479,463,469,472,430],
[429,431,0,445,431,435,454,441,427],
[444,419,446,0,430,441,462,416,411],
[422,412,460,461,0,438,463,442,445],
[467,428,456,450,453,0,467,458,434],
[451,422,437,429,428,424,0,394,422],
[455,419,450,475,449,433,497,0,459],
[461,461,464,480,446,457,469,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,520,509,424,468,428,455,463],
[417,0,489,499,430,448,399,448,418],
[371,402,0,422,381,419,418,378,401],
[382,392,469,0,381,434,416,403,393],
[467,461,510,510,0,429,453,452,442],
[423,443,472,457,462,0,442,422,432],
[463,492,473,475,438,449,0,432,461],
[436,443,513,488,439,469,459,0,440],
[428,473,490,498,449,459,430,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,448,461,451,462,467,456,465],
[452,0,436,444,455,462,454,440,470],
[443,455,0,454,445,466,461,453,468],
[430,447,437,0,456,462,442,447,442],
[440,436,446,435,0,468,447,465,451],
[429,429,425,429,423,0,459,437,435],
[424,437,430,449,444,432,0,454,455],
[435,451,438,444,426,454,437,0,437],
[426,421,423,449,440,456,436,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,472,519,467,472,469,496,508],
[466,0,451,531,440,472,449,497,487],
[419,440,0,468,425,434,400,476,469],
[372,360,423,0,391,393,387,441,433],
[424,451,466,500,0,481,455,496,515],
[419,419,457,498,410,0,434,477,481],
[422,442,491,504,436,457,0,480,456],
[395,394,415,450,395,414,411,0,472],
[383,404,422,458,376,410,435,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,426,439,447,446,434,419,456],
[426,0,406,425,432,404,461,433,433],
[465,485,0,449,413,466,461,448,482],
[452,466,442,0,461,445,442,427,470],
[444,459,478,430,0,450,462,456,459],
[445,487,425,446,441,0,473,446,488],
[457,430,430,449,429,418,0,404,477],
[472,458,443,464,435,445,487,0,483],
[435,458,409,421,432,403,414,408,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,482,510,453,439,479,437,453],
[440,0,454,442,456,443,408,514,365],
[409,437,0,394,355,493,506,452,475],
[381,449,497,0,545,511,492,512,484],
[438,435,536,346,0,506,445,492,460],
[452,448,398,380,385,0,430,354,408],
[412,483,385,399,446,461,0,433,411],
[454,377,439,379,399,537,458,0,454],
[438,526,416,407,431,483,480,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,418,465,455,429,456,427,437],
[451,0,447,472,456,443,440,429,433],
[473,444,0,488,458,461,449,456,444],
[426,419,403,0,442,454,423,436,410],
[436,435,433,449,0,414,432,430,401],
[462,448,430,437,477,0,441,457,419],
[435,451,442,468,459,450,0,454,447],
[464,462,435,455,461,434,437,0,439],
[454,458,447,481,490,472,444,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,434,444,425,430,416,460,434],
[430,0,424,436,431,467,440,428,429],
[457,467,0,468,455,443,448,465,425],
[447,455,423,0,427,467,437,407,421],
[466,460,436,464,0,465,456,465,472],
[461,424,448,424,426,0,437,468,429],
[475,451,443,454,435,454,0,443,452],
[431,463,426,484,426,423,448,0,439],
[457,462,466,470,419,462,439,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,452,473,454,490,450,479,438],
[478,0,501,469,452,449,435,497,470],
[439,390,0,427,421,447,417,460,404],
[418,422,464,0,447,400,417,453,415],
[437,439,470,444,0,435,474,476,462],
[401,442,444,491,456,0,454,465,442],
[441,456,474,474,417,437,0,442,474],
[412,394,431,438,415,426,449,0,449],
[453,421,487,476,429,449,417,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,426,436,444,459,454,446,429],
[450,0,427,459,448,480,456,465,431],
[465,464,0,445,449,475,483,469,465],
[455,432,446,0,466,456,462,437,426],
[447,443,442,425,0,467,468,430,450],
[432,411,416,435,424,0,435,409,411],
[437,435,408,429,423,456,0,440,443],
[445,426,422,454,461,482,451,0,434],
[462,460,426,465,441,480,448,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,425,435,439,446,414,409,438],
[465,0,470,445,455,455,436,459,444],
[466,421,0,442,431,463,448,421,455],
[456,446,449,0,431,466,457,441,447],
[452,436,460,460,0,451,442,409,421],
[445,436,428,425,440,0,458,416,445],
[477,455,443,434,449,433,0,437,460],
[482,432,470,450,482,475,454,0,462],
[453,447,436,444,470,446,431,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,461,439,435,436,451,458,397],
[463,0,487,454,473,470,470,466,435],
[430,404,0,439,432,418,447,432,419],
[452,437,452,0,437,416,433,457,430],
[456,418,459,454,0,451,472,469,437],
[455,421,473,475,440,0,471,464,465],
[440,421,444,458,419,420,0,455,395],
[433,425,459,434,422,427,436,0,421],
[494,456,472,461,454,426,496,470,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,446,418,437,446,441,437,434],
[433,0,422,424,426,437,444,429,432],
[445,469,0,421,444,441,454,457,442],
[473,467,470,0,463,445,474,439,432],
[454,465,447,428,0,443,448,448,454],
[445,454,450,446,448,0,442,456,448],
[450,447,437,417,443,449,0,444,458],
[454,462,434,452,443,435,447,0,462],
[457,459,449,459,437,443,433,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,458,496,389,368,429,442,453],
[478,0,509,490,466,426,389,511,454],
[433,382,0,461,364,324,394,456,438],
[395,401,430,0,403,358,402,455,455],
[502,425,527,488,0,407,440,467,495],
[523,465,567,533,484,0,441,498,441],
[462,502,497,489,451,450,0,427,477],
[449,380,435,436,424,393,464,0,480],
[438,437,453,436,396,450,414,411,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,477,433,491,436,420,447,444],
[471,0,455,441,481,426,435,400,422],
[414,436,0,416,490,432,417,438,443],
[458,450,475,0,478,447,431,434,446],
[400,410,401,413,0,394,432,430,429],
[455,465,459,444,497,0,430,459,477],
[471,456,474,460,459,461,0,435,487],
[444,491,453,457,461,432,456,0,452],
[447,469,448,445,462,414,404,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,475,462,479,487,459,445,490,477],
[416,0,416,449,438,444,453,415,400],
[429,475,0,471,471,455,457,460,436],
[412,442,420,0,450,426,448,491,431],
[404,453,420,441,0,482,449,434,431],
[432,447,436,465,409,0,434,440,415],
[446,438,434,443,442,457,0,456,439],
[401,476,431,400,457,451,435,0,426],
[414,491,455,460,460,476,452,465,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,451,441,438,451,450,438,458,458],
[440,0,436,440,430,450,444,452,453],
[450,455,0,456,453,460,444,463,467],
[453,451,435,0,457,459,458,458,460],
[440,461,438,434,0,460,452,463,459],
[441,441,431,432,431,0,429,437,445],
[453,447,447,433,439,462,0,462,437],
[433,439,428,433,428,454,429,0,443],
[433,438,424,431,432,446,454,448,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,430,420,419,412,402,438,399],
[428,0,388,392,431,422,409,439,406],
[461,503,0,462,476,478,459,443,445],
[471,499,429,0,469,433,444,481,449],
[472,460,415,422,0,421,448,434,454],
[479,469,413,458,470,0,442,441,458],
[489,482,432,447,443,449,0,477,452],
[453,452,448,410,457,450,414,0,431],
[492,485,446,442,437,433,439,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,416,445,403,459,442,449,453],
[448,0,439,435,433,485,459,539,494],
[475,452,0,457,472,488,427,509,469],
[446,456,434,0,458,469,456,485,454],
[488,458,419,433,0,455,452,475,472],
[432,406,403,422,436,0,420,455,461],
[449,432,464,435,439,471,0,486,428],
[442,352,382,406,416,436,405,0,420],
[438,397,422,437,419,430,463,471,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,397,412,395,426,368,433,423,448],
[494,0,428,450,436,431,414,447,478],
[479,463,0,469,461,409,449,480,489],
[496,441,422,0,469,461,447,476,500],
[465,455,430,422,0,410,424,480,470],
[523,460,482,430,481,0,457,488,527],
[458,477,442,444,467,434,0,491,493],
[468,444,411,415,411,403,400,0,473],
[443,413,402,391,421,364,398,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,427,448,441,414,446,460,452,452],
[464,0,442,437,425,477,442,466,461],
[443,449,0,453,442,453,459,428,463],
[450,454,438,0,420,471,443,479,454],
[477,466,449,471,0,488,431,489,460],
[445,414,438,420,403,0,418,435,409],
[431,449,432,448,460,473,0,456,466],
[439,425,463,412,402,456,435,0,427],
[439,430,428,437,431,482,425,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,420,466,453,436,463,448,433],
[458,0,458,467,481,460,461,482,445],
[471,433,0,486,479,444,471,479,444],
[425,424,405,0,458,417,453,479,437],
[438,410,412,433,0,435,424,432,414],
[455,431,447,474,456,0,479,462,463],
[428,430,420,438,467,412,0,450,420],
[443,409,412,412,459,429,441,0,427],
[458,446,447,454,477,428,471,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,471,466,444,431,437,456,426],
[426,0,453,508,416,418,437,455,429],
[420,438,0,498,447,461,475,430,435],
[425,383,393,0,378,359,394,424,366],
[447,475,444,513,0,463,437,508,430],
[460,473,430,532,428,0,463,491,448],
[454,454,416,497,454,428,0,441,399],
[435,436,461,467,383,400,450,0,469],
[465,462,456,525,461,443,492,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,469,419,448,410,456,456,477],
[423,0,445,436,428,394,439,469,418],
[422,446,0,418,426,386,433,473,440],
[472,455,473,0,461,441,445,527,437],
[443,463,465,430,0,432,467,484,435],
[481,497,505,450,459,0,443,493,452],
[435,452,458,446,424,448,0,479,439],
[435,422,418,364,407,398,412,0,422],
[414,473,451,454,456,439,452,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,402,471,394,475,380,449,343,428],
[489,0,466,430,487,481,476,390,512],
[420,425,0,397,493,457,407,431,472],
[497,461,494,0,442,465,531,480,550],
[416,404,398,449,0,447,448,430,418],
[511,410,434,426,444,0,481,497,514],
[442,415,484,360,443,410,0,422,451],
[548,501,460,411,461,394,469,0,527],
[463,379,419,341,473,377,440,364,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,464,428,484,507,506,444,467,436],
[427,0,463,451,458,482,461,445,461],
[463,428,0,475,465,510,456,474,437],
[407,440,416,0,441,499,429,414,429],
[384,433,426,450,0,478,401,442,449],
[385,409,381,392,413,0,380,407,399],
[447,430,435,462,490,511,0,466,457],
[424,446,417,477,449,484,425,0,454],
[455,430,454,462,442,492,434,437,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,473,476,459,447,454,437,473],
[430,0,474,458,453,425,471,436,471],
[418,417,0,442,442,432,440,427,469],
[415,433,449,0,441,426,433,470,457],
[432,438,449,450,0,440,436,450,468],
[444,466,459,465,451,0,470,465,468],
[437,420,451,458,455,421,0,436,454],
[454,455,464,421,441,426,455,0,467],
[418,420,422,434,423,423,437,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,475,434,400,431,434,448,428],
[453,0,463,438,443,452,433,479,433],
[416,428,0,422,430,415,415,431,420],
[457,453,469,0,437,452,458,462,458],
[491,448,461,454,0,426,441,476,456],
[460,439,476,439,465,0,444,467,437],
[457,458,476,433,450,447,0,443,423],
[443,412,460,429,415,424,448,0,449],
[463,458,471,433,435,454,468,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,502,554,499,615,389,499,497,336],
[389,0,445,554,501,445,557,500,226],
[337,446,0,498,451,503,448,443,449],
[392,337,393,0,448,336,448,335,230],
[276,390,440,443,0,389,386,442,447],
[502,446,388,555,502,0,557,501,338],
[392,334,443,443,505,334,0,443,336],
[394,391,448,556,449,390,448,0,336],
[555,665,442,661,444,553,555,555,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,468,469,474,465,437,473,452,491],
[423,0,453,504,457,485,500,485,507],
[422,438,0,478,416,417,432,468,482],
[417,387,413,0,418,442,420,383,430],
[426,434,475,473,0,452,491,439,463],
[454,406,474,449,439,0,460,439,439],
[418,391,459,471,400,431,0,458,425],
[439,406,423,508,452,452,433,0,458],
[400,384,409,461,428,452,466,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,454,461,470,451,438,445,454],
[442,0,447,461,453,431,491,437,464],
[437,444,0,448,466,468,472,444,477],
[430,430,443,0,468,434,435,462,471],
[421,438,425,423,0,419,445,457,436],
[440,460,423,457,472,0,428,459,474],
[453,400,419,456,446,463,0,443,447],
[446,454,447,429,434,432,448,0,418],
[437,427,414,420,455,417,444,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,445,429,438,423,434,449,451],
[451,0,455,441,452,444,453,455,455],
[446,436,0,440,454,454,438,460,462],
[462,450,451,0,463,456,438,450,445],
[453,439,437,428,0,460,436,450,437],
[468,447,437,435,431,0,432,457,451],
[457,438,453,453,455,459,0,489,477],
[442,436,431,441,441,434,402,0,449],
[440,436,429,446,454,440,414,442,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,476,432,433,454,434,443,430,459],
[415,0,442,405,427,423,432,406,463],
[459,449,0,441,447,440,474,445,453],
[458,486,450,0,442,447,465,445,468],
[437,464,444,449,0,443,455,447,454],
[457,468,451,444,448,0,450,437,479],
[448,459,417,426,436,441,0,430,457],
[461,485,446,446,444,454,461,0,463],
[432,428,438,423,437,412,434,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,427,428,437,453,427,444,436],
[458,0,414,434,445,430,450,440,430],
[464,477,0,444,429,460,450,468,449],
[463,457,447,0,445,453,445,446,459],
[454,446,462,446,0,465,441,464,447],
[438,461,431,438,426,0,433,455,428],
[464,441,441,446,450,458,0,445,450],
[447,451,423,445,427,436,446,0,437],
[455,461,442,432,444,463,441,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,437,441,469,488,422,478,434],
[458,0,426,426,453,466,425,457,425],
[454,465,0,443,460,495,456,505,457],
[450,465,448,0,463,495,448,463,434],
[422,438,431,428,0,448,439,455,416],
[403,425,396,396,443,0,435,424,420],
[469,466,435,443,452,456,0,487,455],
[413,434,386,428,436,467,404,0,416],
[457,466,434,457,475,471,436,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,467,526,427,493,501,446,496],
[431,0,449,470,392,493,471,439,478],
[424,442,0,460,476,501,487,471,473],
[365,421,431,0,383,407,448,450,442],
[464,499,415,508,0,506,467,484,501],
[398,398,390,484,385,0,451,437,469],
[390,420,404,443,424,440,0,451,482],
[445,452,420,441,407,454,440,0,453],
[395,413,418,449,390,422,409,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,432,442,451,451,465,495,438],
[452,0,473,480,487,470,439,498,466],
[459,418,0,445,455,462,430,475,420],
[449,411,446,0,449,439,425,451,426],
[440,404,436,442,0,459,435,462,431],
[440,421,429,452,432,0,442,459,407],
[426,452,461,466,456,449,0,488,437],
[396,393,416,440,429,432,403,0,425],
[453,425,471,465,460,484,454,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,438,435,429,447,461,458,436,460],
[453,0,466,448,441,456,465,440,477],
[456,425,0,437,447,447,446,454,452],
[462,443,454,0,456,454,447,442,462],
[444,450,444,435,0,447,435,447,447],
[430,435,444,437,444,0,441,440,446],
[433,426,445,444,456,450,0,424,458],
[455,451,437,449,444,451,467,0,456],
[431,414,439,429,444,445,433,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,457,475,451,450,444,455,453,431],
[434,0,496,450,463,441,439,475,427],
[416,395,0,423,425,425,434,443,437],
[440,441,468,0,431,450,435,424,427],
[441,428,466,460,0,455,440,449,454],
[447,450,466,441,436,0,430,482,456],
[436,452,457,456,451,461,0,433,463],
[438,416,448,467,442,409,458,0,441],
[460,464,454,464,437,435,428,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,594,496,396,594,496,495,396],
[593,0,695,297,594,690,692,693,395],
[297,196,0,394,395,493,295,395,295],
[395,594,497,0,497,692,595,792,593],
[495,297,496,394,0,594,493,494,295],
[297,201,398,199,297,0,296,299,199],
[395,199,596,296,398,595,0,497,296],
[396,198,496,99,397,592,394,0,297],
[495,496,596,298,596,692,595,594,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,400,450,414,417,406,394,436,425],
[491,0,468,470,444,443,454,488,463],
[441,423,0,423,450,426,425,438,440],
[477,421,468,0,444,439,447,454,446],
[474,447,441,447,0,428,457,476,457],
[485,448,465,452,463,0,444,472,442],
[497,437,466,444,434,447,0,453,470],
[455,403,453,437,415,419,438,0,441],
[466,428,451,445,434,449,421,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,466,445,455,477,448,481,468,477],
[425,0,434,456,467,431,465,430,450],
[446,457,0,442,476,470,495,465,469],
[436,435,449,0,463,453,464,437,453],
[414,424,415,428,0,436,465,437,460],
[443,460,421,438,455,0,458,436,476],
[410,426,396,427,426,433,0,428,419],
[423,461,426,454,454,455,463,0,476],
[414,441,422,438,431,415,472,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,454,445,469,448,460,457,435],
[426,0,438,454,437,425,447,452,448],
[437,453,0,451,460,437,458,442,437],
[446,437,440,0,471,438,449,448,448],
[422,454,431,420,0,415,429,424,422],
[443,466,454,453,476,0,461,442,438],
[431,444,433,442,462,430,0,436,428],
[434,439,449,443,467,449,455,0,456],
[456,443,454,443,469,453,463,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,435,468,491,456,463,456,459],
[417,0,401,503,431,392,463,471,465],
[456,490,0,484,440,455,435,454,450],
[423,388,407,0,410,376,398,405,419],
[400,460,451,481,0,453,431,447,458],
[435,499,436,515,438,0,476,429,455],
[428,428,456,493,460,415,0,471,490],
[435,420,437,486,444,462,420,0,437],
[432,426,441,472,433,436,401,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,427,430,421,399,447,424,437],
[452,0,447,443,449,426,457,454,457],
[464,444,0,489,459,457,449,429,460],
[461,448,402,0,450,434,445,421,452],
[470,442,432,441,0,427,436,430,453],
[492,465,434,457,464,0,465,441,468],
[444,434,442,446,455,426,0,420,467],
[467,437,462,470,461,450,471,0,492],
[454,434,431,439,438,423,424,399,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,470,451,423,434,446,452,443],
[458,0,440,430,443,478,436,440,459],
[421,451,0,436,439,451,406,386,423],
[440,461,455,0,447,457,444,424,428],
[468,448,452,444,0,495,437,426,466],
[457,413,440,434,396,0,444,415,414],
[445,455,485,447,454,447,0,422,467],
[439,451,505,467,465,476,469,0,446],
[448,432,468,463,425,477,424,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,441,475,461,427,441,470,452],
[397,0,440,456,436,426,412,425,455],
[450,451,0,477,463,409,439,429,452],
[416,435,414,0,433,435,438,403,463],
[430,455,428,458,0,470,453,443,493],
[464,465,482,456,421,0,435,444,483],
[450,479,452,453,438,456,0,432,458],
[421,466,462,488,448,447,459,0,473],
[439,436,439,428,398,408,433,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,435,464,433,435,440,428,440,466],
[456,0,460,441,466,454,454,447,451],
[427,431,0,438,436,437,449,446,445],
[458,450,453,0,441,471,443,435,459],
[456,425,455,450,0,466,456,434,445],
[451,437,454,420,425,0,443,444,447],
[463,437,442,448,435,448,0,451,469],
[451,444,445,456,457,447,440,0,463],
[425,440,446,432,446,444,422,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,430,459,442,397,455,430,410],
[463,0,474,495,468,469,476,490,420],
[461,417,0,495,491,444,458,475,483],
[432,396,396,0,434,374,418,432,441],
[449,423,400,457,0,391,413,431,444],
[494,422,447,517,500,0,483,476,453],
[436,415,433,473,478,408,0,453,485],
[461,401,416,459,460,415,438,0,411],
[481,471,408,450,447,438,406,480,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,405,388,393,452,403,399,428,447],
[486,0,418,464,476,464,476,514,489],
[503,473,0,435,498,445,504,460,485],
[498,427,456,0,431,418,480,469,462],
[439,415,393,460,0,477,434,439,512],
[488,427,446,473,414,0,469,493,457],
[492,415,387,411,457,422,0,470,481],
[463,377,431,422,452,398,421,0,506],
[444,402,406,429,379,434,410,385,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,425,440,450,438,464,437,433],
[459,0,423,441,444,448,450,438,445],
[466,468,0,452,446,438,442,449,452],
[451,450,439,0,452,443,463,460,445],
[441,447,445,439,0,438,453,458,444],
[453,443,453,448,453,0,467,434,450],
[427,441,449,428,438,424,0,432,447],
[454,453,442,431,433,457,459,0,457],
[458,446,439,446,447,441,444,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,471,506,508,444,476,500,513],
[448,0,465,506,478,470,475,432,493],
[420,426,0,501,468,426,482,465,488],
[385,385,390,0,417,375,455,449,476],
[383,413,423,474,0,365,467,406,429],
[447,421,465,516,526,0,471,443,535],
[415,416,409,436,424,420,0,435,469],
[391,459,426,442,485,448,456,0,446],
[378,398,403,415,462,356,422,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,459,437,446,459,430,460,451],
[471,0,465,476,477,459,461,443,470],
[432,426,0,463,459,480,447,464,462],
[454,415,428,0,449,462,424,439,448],
[445,414,432,442,0,463,438,446,446],
[432,432,411,429,428,0,408,422,448],
[461,430,444,467,453,483,0,451,447],
[431,448,427,452,445,469,440,0,448],
[440,421,429,443,445,443,444,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,439,452,437,447,442,451,494],
[458,0,447,452,445,399,457,447,455],
[452,444,0,445,439,425,434,448,468],
[439,439,446,0,454,406,426,452,466],
[454,446,452,437,0,429,441,443,461],
[444,492,466,485,462,0,488,463,486],
[449,434,457,465,450,403,0,451,488],
[440,444,443,439,448,428,440,0,468],
[397,436,423,425,430,405,403,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,470,458,467,444,464,451,482,451],
[421,0,412,409,421,448,443,419,455],
[433,479,0,405,451,443,403,448,448],
[424,482,486,0,452,456,449,478,466],
[447,470,440,439,0,432,420,433,467],
[427,443,448,435,459,0,440,453,443],
[440,448,488,442,471,451,0,480,453],
[409,472,443,413,458,438,411,0,437],
[440,436,443,425,424,448,438,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,453,454,462,431,456,450,445],
[448,0,436,446,445,451,454,468,436],
[438,455,0,442,433,420,459,449,429],
[437,445,449,0,471,398,470,464,453],
[429,446,458,420,0,434,471,446,448],
[460,440,471,493,457,0,483,465,472],
[435,437,432,421,420,408,0,454,432],
[441,423,442,427,445,426,437,0,434],
[446,455,462,438,443,419,459,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,442,477,432,412,468,433,469],
[451,0,433,458,406,412,482,430,464],
[449,458,0,472,451,429,458,449,443],
[414,433,419,0,427,419,433,406,415],
[459,485,440,464,0,450,464,452,475],
[479,479,462,472,441,0,482,442,485],
[423,409,433,458,427,409,0,417,451],
[458,461,442,485,439,449,474,0,468],
[422,427,448,476,416,406,440,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,408,413,430,434,419,414,415],
[468,0,452,434,438,452,443,449,438],
[483,439,0,452,466,452,459,446,456],
[478,457,439,0,470,458,450,446,440],
[461,453,425,421,0,447,432,453,452],
[457,439,439,433,444,0,457,431,440],
[472,448,432,441,459,434,0,430,430],
[477,442,445,445,438,460,461,0,459],
[476,453,435,451,439,451,461,432,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,475,413,432,438,442,409,425],
[447,0,467,446,493,453,468,431,478],
[416,424,0,423,423,438,415,411,431],
[478,445,468,0,469,491,466,466,491],
[459,398,468,422,0,436,434,421,432],
[453,438,453,400,455,0,428,396,464],
[449,423,476,425,457,463,0,417,453],
[482,460,480,425,470,495,474,0,488],
[466,413,460,400,459,427,438,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,444,456,474,459,492,442,468,459],
[447,0,445,494,450,443,448,452,466],
[435,446,0,493,447,454,424,470,429],
[417,397,398,0,412,424,411,423,405],
[432,441,444,479,0,449,435,445,431],
[399,448,437,467,442,0,423,463,433],
[449,443,467,480,456,468,0,459,450],
[423,439,421,468,446,428,432,0,425],
[432,425,462,486,460,458,441,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,450,466,470,450,459,474,435,470],
[441,0,432,410,443,440,427,405,443],
[425,459,0,402,443,456,407,410,424],
[421,481,489,0,446,446,461,474,431],
[441,448,448,445,0,479,449,437,441],
[432,451,435,445,412,0,442,415,433],
[417,464,484,430,442,449,0,433,446],
[456,486,481,417,454,476,458,0,458],
[421,448,467,460,450,458,445,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,454,429,473,430,453,425,440],
[435,0,452,439,438,428,406,430,432],
[437,439,0,424,452,424,414,410,468],
[462,452,467,0,451,442,442,442,458],
[418,453,439,440,0,431,422,411,420],
[461,463,467,449,460,0,444,451,459],
[438,485,477,449,469,447,0,413,458],
[466,461,481,449,480,440,478,0,481],
[451,459,423,433,471,432,433,410,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,428,456,416,441,446,427,450],
[457,0,444,492,463,465,461,450,482],
[463,447,0,448,420,422,456,404,414],
[435,399,443,0,417,424,480,420,464],
[475,428,471,474,0,461,536,481,458],
[450,426,469,467,430,0,449,415,505],
[445,430,435,411,355,442,0,410,463],
[464,441,487,471,410,476,481,0,472],
[441,409,477,427,433,386,428,419,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,439,453,474,455,469,451,455,433],
[452,0,466,461,461,464,455,463,444],
[438,425,0,464,429,449,425,446,439],
[417,430,427,0,437,432,419,417,427],
[436,430,462,454,0,482,443,463,447],
[422,427,442,459,409,0,415,420,435],
[440,436,466,472,448,476,0,447,431],
[436,428,445,474,428,471,444,0,431],
[458,447,452,464,444,456,460,460,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,687,508,617,680,583,444,509,442],
[204,0,238,273,481,381,206,343,378],
[383,653,0,552,755,489,517,447,555],
[274,618,339,0,550,517,276,306,411],
[211,410,136,341,0,345,310,311,207],
[308,510,402,374,546,0,272,404,342],
[447,685,374,615,581,619,0,515,547],
[382,548,444,585,580,487,376,0,414],
[449,513,336,480,684,549,344,477,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,459,479,445,459,456,448,450,458],
[432,0,461,455,461,446,454,493,436],
[412,430,0,410,455,447,431,429,418],
[446,436,481,0,463,449,449,481,457],
[432,430,436,428,0,457,436,475,414],
[435,445,444,442,434,0,438,476,447],
[443,437,460,442,455,453,0,467,425],
[441,398,462,410,416,415,424,0,425],
[433,455,473,434,477,444,466,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,408,449,449,441,459,488,476,447],
[483,0,452,470,464,478,464,489,438],
[442,439,0,460,429,428,476,476,425],
[442,421,431,0,433,444,479,447,438],
[450,427,462,458,0,440,493,474,464],
[432,413,463,447,451,0,479,479,461],
[403,427,415,412,398,412,0,440,411],
[415,402,415,444,417,412,451,0,433],
[444,453,466,453,427,430,480,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,447,445,506,457,479,511,432],
[445,0,476,433,497,440,467,473,430],
[444,415,0,462,478,450,410,503,461],
[446,458,429,0,479,392,481,465,406],
[385,394,413,412,0,395,419,428,410],
[434,451,441,499,496,0,431,483,448],
[412,424,481,410,472,460,0,493,467],
[380,418,388,426,463,408,398,0,407],
[459,461,430,485,481,443,424,484,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,469,439,418,450,486,429,420,437],
[422,0,430,383,436,457,409,432,444],
[452,461,0,448,442,502,465,464,454],
[473,508,443,0,481,507,456,435,476],
[441,455,449,410,0,453,422,420,430],
[405,434,389,384,438,0,435,395,423],
[462,482,426,435,469,456,0,411,442],
[471,459,427,456,471,496,480,0,447],
[454,447,437,415,461,468,449,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,405,387,441,399,410,450,356],
[492,0,434,422,426,418,416,410,377],
[486,457,0,459,447,433,433,427,417],
[504,469,432,0,456,477,448,447,448],
[450,465,444,435,0,439,453,473,423],
[492,473,458,414,452,0,415,461,386],
[481,475,458,443,438,476,0,443,423],
[441,481,464,444,418,430,448,0,417],
[535,514,474,443,468,505,468,474,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,562,464,397,396,464,498,330],
[397,0,498,499,462,431,366,366,399],
[329,393,0,533,361,364,427,266,328],
[427,392,358,0,227,360,392,359,293],
[494,429,530,664,0,495,499,431,432],
[495,460,527,531,396,0,559,462,492],
[427,525,464,499,392,332,0,264,427],
[393,525,625,532,460,429,627,0,363],
[561,492,563,598,459,399,464,528,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,460,462,449,466,444,446,443,434],
[431,0,461,492,450,450,466,452,456],
[429,430,0,419,437,428,448,415,425],
[442,399,472,0,451,440,452,442,443],
[425,441,454,440,0,435,458,430,450],
[447,441,463,451,456,0,447,437,471],
[445,425,443,439,433,444,0,438,431],
[448,439,476,449,461,454,453,0,461],
[457,435,466,448,441,420,460,430,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,463,483,462,447,476,426,443,513],
[428,0,466,475,440,443,439,437,481],
[408,425,0,423,415,432,454,424,482],
[429,416,468,0,422,426,435,431,480],
[444,451,476,469,0,471,486,459,480],
[415,448,459,465,420,0,433,424,478],
[465,452,437,456,405,458,0,452,488],
[448,454,467,460,432,467,439,0,468],
[378,410,409,411,411,413,403,423,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,474,440,456,460,509,437,499,459],
[417,0,390,357,435,463,403,477,405],
[451,501,0,413,475,460,425,435,473],
[435,534,478,0,469,488,449,469,482],
[431,456,416,422,0,480,431,425,442],
[382,428,431,403,411,0,374,410,412],
[454,488,466,442,460,517,0,483,433],
[392,414,456,422,466,481,408,0,412],
[432,486,418,409,449,479,458,479,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,454,432,479,457,442,439,451,484],
[437,0,478,488,500,465,462,463,513],
[459,413,0,462,453,432,468,464,494],
[412,403,429,0,417,410,419,419,447],
[434,391,438,474,0,410,443,434,464],
[449,426,459,481,481,0,466,471,466],
[452,429,423,472,448,425,0,418,467],
[440,428,427,472,457,420,473,0,497],
[407,378,397,444,427,425,424,394,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,434,564,549,491,492,545,511,491],
[457,0,493,474,470,399,488,435,418],
[327,398,0,460,417,400,435,380,399],
[342,417,431,0,359,359,411,415,365],
[400,421,474,532,0,510,416,319,473],
[399,492,491,532,381,0,430,376,438],
[346,403,456,480,475,461,0,476,423],
[380,456,511,476,572,515,415,0,475],
[400,473,492,526,418,453,468,416,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,494,488,507,530,536,435,449,437],
[397,0,436,471,424,454,455,405,470],
[403,455,0,440,516,498,478,415,461],
[384,420,451,0,490,499,469,391,364],
[361,467,375,401,0,519,534,392,433],
[355,437,393,392,372,0,440,444,348],
[456,436,413,422,357,451,0,451,388],
[442,486,476,500,499,447,440,0,458],
[454,421,430,527,458,543,503,433,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,477,460,372,427,409,441,371,404],
[414,0,521,314,408,433,499,482,464],
[431,370,0,315,350,416,443,428,412],
[519,577,576,0,447,415,615,501,555],
[464,483,541,444,0,415,406,502,447],
[482,458,475,476,476,0,495,461,421],
[450,392,448,276,485,396,0,395,375],
[520,409,463,390,389,430,496,0,501],
[487,427,479,336,444,470,516,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,456,440,456,451,468,439,436,449],
[435,0,432,449,443,470,431,442,458],
[451,459,0,439,426,472,442,454,470],
[435,442,452,0,462,455,425,431,449],
[440,448,465,429,0,465,436,438,436],
[423,421,419,436,426,0,436,402,441],
[452,460,449,466,455,455,0,446,434],
[455,449,437,460,453,489,445,0,484],
[442,433,421,442,455,450,457,407,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,446,454,453,425,459,474,440,442],
[445,0,464,415,445,434,473,426,444],
[437,427,0,411,419,440,460,423,406],
[438,476,480,0,424,443,461,456,460],
[466,446,472,467,0,449,529,444,409],
[432,457,451,448,442,0,504,463,409],
[417,418,431,430,362,387,0,435,421],
[451,465,468,435,447,428,456,0,446],
[449,447,485,431,482,482,470,445,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,435,452,456,444,452,414,426],
[443,0,454,456,479,453,454,425,443],
[456,437,0,453,468,448,443,450,446],
[439,435,438,0,444,443,431,438,421],
[435,412,423,447,0,448,450,424,417],
[447,438,443,448,443,0,440,433,433],
[439,437,448,460,441,451,0,425,420],
[477,466,441,453,467,458,466,0,463],
[465,448,445,470,474,458,471,428,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,409,423,391,364,449,398,371,337],
[482,0,417,430,368,466,443,414,456],
[468,474,0,460,376,486,411,404,415],
[500,461,431,0,449,505,438,418,431],
[527,523,515,442,0,517,493,450,481],
[442,425,405,386,374,0,413,359,471],
[493,448,480,453,398,478,0,456,445],
[520,477,487,473,441,532,435,0,501],
[554,435,476,460,410,420,446,390,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,407,447,427,406,397,419,452,441],
[484,0,459,460,436,446,456,467,439],
[444,432,0,440,428,446,429,465,421],
[464,431,451,0,431,429,428,443,430],
[485,455,463,460,0,460,430,475,448],
[494,445,445,462,431,0,456,469,426],
[472,435,462,463,461,435,0,449,402],
[439,424,426,448,416,422,442,0,437],
[450,452,470,461,443,465,489,454,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,451,427,468,419,471,463,418],
[449,0,478,428,470,432,446,463,411],
[440,413,0,431,419,389,452,467,428],
[464,463,460,0,474,403,475,478,451],
[423,421,472,417,0,403,439,437,393],
[472,459,502,488,488,0,509,486,444],
[420,445,439,416,452,382,0,453,415],
[428,428,424,413,454,405,438,0,393],
[473,480,463,440,498,447,476,498,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,440,419,470,469,438,435,460],
[462,0,433,437,471,476,437,448,444],
[451,458,0,423,421,460,456,449,471],
[472,454,468,0,442,449,439,452,450],
[421,420,470,449,0,434,433,447,449],
[422,415,431,442,457,0,460,453,434],
[453,454,435,452,458,431,0,410,459],
[456,443,442,439,444,438,481,0,456],
[431,447,420,441,442,457,432,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,464,444,450,447,450,472,459],
[412,0,472,439,430,433,404,434,438],
[427,419,0,433,439,455,437,431,442],
[447,452,458,0,430,470,444,450,448],
[441,461,452,461,0,449,436,454,455],
[444,458,436,421,442,0,416,445,421],
[441,487,454,447,455,475,0,464,452],
[419,457,460,441,437,446,427,0,441],
[432,453,449,443,436,470,439,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,479,412,427,426,468,456,416,457],
[412,0,436,405,418,431,428,424,422],
[479,455,0,454,478,466,437,464,493],
[464,486,437,0,490,496,491,477,488],
[465,473,413,401,0,455,434,421,443],
[423,460,425,395,436,0,419,431,448],
[435,463,454,400,457,472,0,490,495],
[475,467,427,414,470,460,401,0,467],
[434,469,398,403,448,443,396,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,435,465,467,474,437,431,439],
[465,0,442,472,468,467,427,436,452],
[456,449,0,451,439,476,428,456,414],
[426,419,440,0,429,462,391,414,416],
[424,423,452,462,0,473,454,427,438],
[417,424,415,429,418,0,396,413,426],
[454,464,463,500,437,495,0,462,454],
[460,455,435,477,464,478,429,0,439],
[452,439,477,475,453,465,437,452,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,465,447,425,462,444,467,451,458],
[426,0,435,419,433,426,444,441,424],
[444,456,0,442,443,447,462,470,448],
[466,472,449,0,461,436,435,451,420],
[429,458,448,430,0,442,431,450,420],
[447,465,444,455,449,0,467,467,441],
[424,447,429,456,460,424,0,439,443],
[440,450,421,440,441,424,452,0,427],
[433,467,443,471,471,450,448,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,461,436,515,439,481,450,433,465],
[430,0,415,483,418,422,390,415,449],
[455,476,0,520,484,467,462,424,461],
[376,408,371,0,352,394,383,378,403],
[452,473,407,539,0,453,462,458,470],
[410,469,424,497,438,0,426,392,412],
[441,501,429,508,429,465,0,393,450],
[458,476,467,513,433,499,498,0,469],
[426,442,430,488,421,479,441,422,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,452,466,468,480,444,463,487],
[480,0,445,442,466,478,462,459,501],
[439,446,0,463,469,459,456,475,517],
[425,449,428,0,439,453,433,427,477],
[423,425,422,452,0,436,428,432,461],
[411,413,432,438,455,0,424,437,474],
[447,429,435,458,463,467,0,470,495],
[428,432,416,464,459,454,421,0,499],
[404,390,374,414,430,417,396,392,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,442,469,431,451,435,436,428],
[454,0,431,494,460,437,432,419,408],
[449,460,0,462,452,439,435,436,405],
[422,397,429,0,395,434,443,426,423],
[460,431,439,496,0,467,457,438,426],
[440,454,452,457,424,0,452,448,417],
[456,459,456,448,434,439,0,428,429],
[455,472,455,465,453,443,463,0,450],
[463,483,486,468,465,474,462,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,470,403,387,382,490,509,421],
[442,0,470,458,400,367,428,391,418],
[421,421,0,376,389,379,434,411,464],
[488,433,515,0,458,459,502,485,432],
[504,491,502,433,0,448,455,438,460],
[509,524,512,432,443,0,463,525,419],
[401,463,457,389,436,428,0,438,492],
[382,500,480,406,453,366,453,0,444],
[470,473,427,459,431,472,399,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,430,445,461,427,420,451,429,418],
[461,0,456,451,424,414,449,435,434],
[446,435,0,449,419,434,441,441,407],
[430,440,442,0,428,413,450,427,416],
[464,467,472,463,0,431,464,465,444],
[471,477,457,478,460,0,475,451,417],
[440,442,450,441,427,416,0,434,438],
[462,456,450,464,426,440,457,0,448],
[473,457,484,475,447,474,453,443,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,467,446,442,434,483,475,440],
[458,0,472,465,445,430,487,442,469],
[424,419,0,478,446,428,461,492,461],
[445,426,413,0,417,418,447,457,411],
[449,446,445,474,0,469,483,473,433],
[457,461,463,473,422,0,459,469,443],
[408,404,430,444,408,432,0,443,408],
[416,449,399,434,418,422,448,0,409],
[451,422,430,480,458,448,483,482,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,453,434,433,463,454,465,442,423],
[438,0,432,450,456,435,458,438,441],
[457,459,0,444,474,470,459,462,459],
[458,441,447,0,437,449,460,447,460],
[428,435,417,454,0,446,442,441,436],
[437,456,421,442,445,0,454,441,449],
[426,433,432,431,449,437,0,431,439],
[449,453,429,444,450,450,460,0,451],
[468,450,432,431,455,442,452,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,448,453,480,445,484,462,457],
[446,0,452,440,463,456,480,448,457],
[443,439,0,446,471,443,480,454,465],
[438,451,445,0,458,436,488,448,449],
[411,428,420,433,0,437,464,432,449],
[446,435,448,455,454,0,498,450,476],
[407,411,411,403,427,393,0,430,415],
[429,443,437,443,459,441,461,0,450],
[434,434,426,442,442,415,476,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,518,493,429,463,491,396,490,431],
[373,0,342,374,340,340,310,340,313],
[398,549,0,431,460,368,365,458,463],
[462,517,460,0,463,521,427,429,430],
[428,551,431,428,0,462,427,398,432],
[400,551,523,370,429,0,460,399,464],
[495,581,526,464,464,431,0,462,370],
[401,551,433,462,493,492,429,0,402],
[460,578,428,461,459,427,521,489,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,426,445,435,442,447,444,423,441],
[465,0,474,442,463,448,446,435,464],
[446,417,0,438,454,447,454,437,454],
[456,449,453,0,450,458,441,433,471],
[449,428,437,441,0,433,437,431,469],
[444,443,444,433,458,0,457,447,463],
[447,445,437,450,454,434,0,435,458],
[468,456,454,458,460,444,456,0,488],
[450,427,437,420,422,428,433,403,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,452,445,450,456,441,438,442,449],
[439,0,453,458,439,475,451,444,428],
[446,438,0,441,453,445,453,457,438],
[441,433,450,0,451,442,441,441,429],
[435,452,438,440,0,449,442,452,441],
[450,416,446,449,442,0,454,437,443],
[453,440,438,450,449,437,0,463,443],
[449,447,434,450,439,454,428,0,425],
[442,463,453,462,450,448,448,466,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,489,420,466,454,441,461,470,461],
[402,0,396,401,401,396,427,433,397],
[471,495,0,443,487,478,479,502,477],
[425,490,448,0,454,420,428,478,466],
[437,490,404,437,0,441,442,480,444],
[450,495,413,471,450,0,452,491,452],
[430,464,412,463,449,439,0,459,457],
[421,458,389,413,411,400,432,0,434],
[430,494,414,425,447,439,434,457,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,448,457,453,449,433,437,451,450],
[443,0,473,444,443,424,421,463,445],
[434,418,0,425,441,419,409,435,413],
[438,447,466,0,412,433,425,458,414],
[442,448,450,479,0,441,451,438,450],
[458,467,472,458,450,0,431,448,454],
[454,470,482,466,440,460,0,485,449],
[440,428,456,433,453,443,406,0,422],
[441,446,478,477,441,437,442,469,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,454,469,472,471,438,478,450],
[450,0,452,472,501,465,480,456,434],
[437,439,0,458,477,447,456,476,450],
[422,419,433,0,474,457,421,414,416],
[419,390,414,417,0,429,408,391,432],
[420,426,444,434,462,0,419,447,419],
[453,411,435,470,483,472,0,467,437],
[413,435,415,477,500,444,424,0,452],
[441,457,441,475,459,472,454,439,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,431,400,404,457,428,437,426,425],
[460,0,433,424,473,440,435,456,439],
[491,458,0,455,493,464,473,466,445],
[487,467,436,0,469,459,471,468,451],
[434,418,398,422,0,415,438,438,432],
[463,451,427,432,476,0,462,448,444],
[454,456,418,420,453,429,0,446,427],
[465,435,425,423,453,443,445,0,453],
[466,452,446,440,459,447,464,438,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,456,441,443,442,455,470,436],
[454,0,446,458,435,439,442,459,443],
[435,445,0,421,439,443,436,464,419],
[450,433,470,0,420,457,462,450,452],
[448,456,452,471,0,453,439,455,438],
[449,452,448,434,438,0,445,450,450],
[436,449,455,429,452,446,0,448,436],
[421,432,427,441,436,441,443,0,430],
[455,448,472,439,453,441,455,461,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,380,431,435,385,425,431,398,349],
[511,0,398,435,378,441,384,371,446],
[460,493,0,429,428,498,462,525,441],
[456,456,462,0,378,510,488,469,435],
[506,513,463,513,0,486,523,535,403],
[466,450,393,381,405,0,396,431,381],
[460,507,429,403,368,495,0,477,425],
[493,520,366,422,356,460,414,0,416],
[542,445,450,456,488,510,466,475,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,436,429,465,471,412,439,441,435],
[455,0,457,466,477,426,457,455,425],
[462,434,0,455,485,404,465,446,433],
[426,425,436,0,453,408,426,416,425],
[420,414,406,438,0,403,433,416,414],
[479,465,487,483,488,0,455,444,458],
[452,434,426,465,458,436,0,440,428],
[450,436,445,475,475,447,451,0,450],
[456,466,458,466,477,433,463,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,414,450,381,427,430,433,447,471],
[477,0,461,411,433,459,445,448,447],
[441,430,0,410,419,447,406,413,464],
[510,480,481,0,467,459,439,446,517],
[464,458,472,424,0,443,473,442,469],
[461,432,444,432,448,0,476,440,466],
[458,446,485,452,418,415,0,455,442],
[444,443,478,445,449,451,436,0,473],
[420,444,427,374,422,425,449,418,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,433,439,434,458,445,417,443,413],
[458,0,434,413,451,428,443,414,429],
[452,457,0,464,431,463,425,421,443],
[457,478,427,0,445,426,425,421,452],
[433,440,460,446,0,462,454,429,445],
[446,463,428,465,429,0,432,438,404],
[474,448,466,466,437,459,0,453,440],
[448,477,470,470,462,453,438,0,460],
[478,462,448,439,446,487,451,431,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,449,431,424,391,450,456,426,393],
[442,0,435,470,392,433,460,466,450],
[460,456,0,439,421,493,563,441,520],
[467,421,452,0,464,470,519,466,463],
[500,499,470,427,0,490,508,477,457],
[441,458,398,421,401,0,440,362,418],
[435,431,328,372,383,451,0,434,396],
[465,425,450,425,414,529,457,0,456],
[498,441,371,428,434,473,495,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,443,451,453,478,457,450,471,453],
[448,0,453,442,489,465,444,450,441],
[440,438,0,428,483,435,418,447,433],
[438,449,463,0,486,449,449,460,438],
[413,402,408,405,0,429,418,404,398],
[434,426,456,442,462,0,456,430,439],
[441,447,473,442,473,435,0,479,443],
[420,441,444,431,487,461,412,0,436],
[438,450,458,453,493,452,448,455,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,604,405,582,574,458,491,516,519],
[287,0,375,549,432,401,375,462,489],
[486,516,0,551,434,457,457,489,461],
[309,342,340,0,370,284,400,342,284],
[317,459,457,521,0,430,373,430,491],
[433,490,434,607,461,0,432,348,377],
[400,516,434,491,518,459,0,432,405],
[375,429,402,549,461,543,459,0,462],
[372,402,430,607,400,514,486,429,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,418,429,436,436,416,431,431],
[454,0,438,417,417,440,410,430,431],
[473,453,0,449,427,455,433,442,468],
[462,474,442,0,440,457,448,442,470],
[455,474,464,451,0,463,433,439,451],
[455,451,436,434,428,0,417,433,470],
[475,481,458,443,458,474,0,447,464],
[460,461,449,449,452,458,444,0,447],
[460,460,423,421,440,421,427,444,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,437,497,482,491,461,439,503,541],
[454,0,440,442,434,469,440,431,443],
[394,451,0,443,494,493,487,520,560],
[409,449,448,0,380,396,529,519,478],
[400,457,397,511,0,427,520,472,468],
[430,422,398,495,464,0,485,492,489],
[452,451,404,362,371,406,0,509,477],
[388,460,371,372,419,399,382,0,427],
[350,448,331,413,423,402,414,464,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,445,416,447,409,454,446,474,411],
[446,0,403,496,471,425,419,449,428],
[475,488,0,450,454,456,467,450,438],
[444,395,441,0,444,434,417,443,415],
[482,420,437,447,0,419,455,435,399],
[437,466,435,457,472,0,458,464,434],
[445,472,424,474,436,433,0,446,459],
[417,442,441,448,456,427,445,0,399],
[480,463,453,476,492,457,432,492,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,422,421,423,446,423,505,429],
[591,0,466,461,527,444,423,530,532],
[469,425,0,380,403,465,407,445,408],
[470,430,511,0,469,425,493,380,429],
[468,364,488,422,0,424,382,340,408],
[445,447,426,466,467,0,385,488,467],
[468,468,484,398,509,506,0,467,532],
[386,361,446,511,551,403,424,0,410],
[462,359,483,462,483,424,359,481,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 891, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_9_891.csv", index=False, header=False)
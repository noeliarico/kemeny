
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,185,182,176,181,169,185,165,166,174],
[155,0,175,151,171,143,159,159,174,165],
[158,165,0,148,162,149,147,152,156,172],
[164,189,192,0,168,173,168,175,176,170],
[159,169,178,172,0,147,156,173,166,167],
[171,197,191,167,193,0,175,180,170,198],
[155,181,193,172,184,165,0,166,173,195],
[175,181,188,165,167,160,174,0,168,178],
[174,166,184,164,174,170,167,172,0,172],
[166,175,168,170,173,142,145,162,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,167,179,174,182,161,181,173,189],
[149,0,141,164,150,175,151,164,144,166],
[173,199,0,190,187,185,165,192,192,200],
[161,176,150,0,170,183,173,178,167,185],
[166,190,153,170,0,175,173,187,173,182],
[158,165,155,157,165,0,153,171,170,172],
[179,189,175,167,167,187,0,181,180,197],
[159,176,148,162,153,169,159,0,160,180],
[167,196,148,173,167,170,160,180,0,172],
[151,174,140,155,158,168,143,160,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,161,163,170,162,179,153,163,162],
[169,0,167,168,164,149,166,157,175,177],
[179,173,0,178,180,157,176,166,177,180],
[177,172,162,0,183,179,188,171,165,176],
[170,176,160,157,0,173,182,169,166,187],
[178,191,183,161,167,0,194,163,175,188],
[161,174,164,152,158,146,0,149,167,174],
[187,183,174,169,171,177,191,0,172,182],
[177,165,163,175,174,165,173,168,0,185],
[178,163,160,164,153,152,166,158,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,189,149,155,164,175,163,171],
[172,0,161,180,153,140,167,168,166,151],
[172,179,0,196,153,164,173,195,186,164],
[151,160,144,0,143,138,156,164,157,156],
[191,187,187,197,0,170,190,208,170,183],
[185,200,176,202,170,0,174,195,184,184],
[176,173,167,184,150,166,0,178,172,160],
[165,172,145,176,132,145,162,0,160,147],
[177,174,154,183,170,156,168,180,0,171],
[169,189,176,184,157,156,180,193,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,138,169,169,196,168,153,177,160],
[117,0,139,151,121,150,133,157,170,129],
[202,201,0,195,155,198,185,147,207,164],
[171,189,145,0,171,187,192,187,173,162],
[171,219,185,169,0,198,173,165,166,182],
[144,190,142,153,142,0,179,138,187,151],
[172,207,155,148,167,161,0,157,178,150],
[187,183,193,153,175,202,183,0,182,164],
[163,170,133,167,174,153,162,158,0,162],
[180,211,176,178,158,189,190,176,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,154,150,164,181,155,166,154,175],
[192,0,164,190,178,181,184,178,174,200],
[186,176,0,177,185,168,181,179,170,193],
[190,150,163,0,162,177,179,184,171,201],
[176,162,155,178,0,177,168,180,157,191],
[159,159,172,163,163,0,157,148,171,193],
[185,156,159,161,172,183,0,175,163,199],
[174,162,161,156,160,192,165,0,158,189],
[186,166,170,169,183,169,177,182,0,195],
[165,140,147,139,149,147,141,151,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,179,194,183,190,161,194,189,177],
[149,0,168,157,163,169,154,183,176,153],
[161,172,0,166,162,178,157,171,170,161],
[146,183,174,0,170,164,160,188,172,153],
[157,177,178,170,0,188,159,191,191,163],
[150,171,162,176,152,0,158,179,169,160],
[179,186,183,180,181,182,0,200,180,160],
[146,157,169,152,149,161,140,0,165,146],
[151,164,170,168,149,171,160,175,0,163],
[163,187,179,187,177,180,180,194,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,155,162,163,154,151,155,159,165],
[180,0,156,184,156,164,173,195,185,196],
[185,184,0,190,183,169,175,184,176,178],
[178,156,150,0,152,174,143,162,175,152],
[177,184,157,188,0,143,155,162,183,182],
[186,176,171,166,197,0,172,162,206,185],
[189,167,165,197,185,168,0,180,184,195],
[185,145,156,178,178,178,160,0,145,175],
[181,155,164,165,157,134,156,195,0,140],
[175,144,162,188,158,155,145,165,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,170,162,182,184,170,167,173],
[172,0,160,159,168,176,191,183,167,169],
[166,180,0,155,172,174,180,164,168,172],
[170,181,185,0,154,181,195,181,176,178],
[178,172,168,186,0,165,179,171,170,185],
[158,164,166,159,175,0,185,163,171,174],
[156,149,160,145,161,155,0,152,148,158],
[170,157,176,159,169,177,188,0,162,168],
[173,173,172,164,170,169,192,178,0,178],
[167,171,168,162,155,166,182,172,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,198,162,172,158,169,147,154,200],
[173,0,180,163,151,152,169,156,180,205],
[142,160,0,143,123,138,154,116,143,166],
[178,177,197,0,176,184,181,160,189,211],
[168,189,217,164,0,145,191,174,180,191],
[182,188,202,156,195,0,188,155,207,182],
[171,171,186,159,149,152,0,143,168,205],
[193,184,224,180,166,185,197,0,196,194],
[186,160,197,151,160,133,172,144,0,190],
[140,135,174,129,149,158,135,146,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,190,193,170,174,179,174,167,197],
[152,0,181,171,175,158,159,169,151,173],
[150,159,0,176,161,159,159,159,155,173],
[147,169,164,0,151,182,175,175,156,180],
[170,165,179,189,0,171,174,181,164,177],
[166,182,181,158,169,0,181,172,188,180],
[161,181,181,165,166,159,0,170,169,181],
[166,171,181,165,159,168,170,0,152,180],
[173,189,185,184,176,152,171,188,0,182],
[143,167,167,160,163,160,159,160,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,137,148,172,167,166,193,153,168],
[183,0,161,153,171,185,165,162,180,177],
[203,179,0,184,219,187,170,182,202,169],
[192,187,156,0,207,192,201,185,193,189],
[168,169,121,133,0,140,155,138,154,154],
[173,155,153,148,200,0,160,174,170,169],
[174,175,170,139,185,180,0,173,166,164],
[147,178,158,155,202,166,167,0,190,170],
[187,160,138,147,186,170,174,150,0,199],
[172,163,171,151,186,171,176,170,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,145,155,158,160,155,155,150,161],
[184,0,176,171,168,182,163,173,165,167],
[195,164,0,164,165,185,166,186,170,188],
[185,169,176,0,169,173,176,183,176,188],
[182,172,175,171,0,200,171,193,170,185],
[180,158,155,167,140,0,154,169,156,167],
[185,177,174,164,169,186,0,176,169,168],
[185,167,154,157,147,171,164,0,163,160],
[190,175,170,164,170,184,171,177,0,187],
[179,173,152,152,155,173,172,180,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,167,164,179,190,169,170,193,143],
[168,0,189,176,167,201,168,166,194,151],
[173,151,0,162,169,189,157,175,178,164],
[176,164,178,0,177,195,163,172,192,144],
[161,173,171,163,0,192,182,188,189,174],
[150,139,151,145,148,0,147,146,170,132],
[171,172,183,177,158,193,0,154,176,160],
[170,174,165,168,152,194,186,0,193,156],
[147,146,162,148,151,170,164,147,0,150],
[197,189,176,196,166,208,180,184,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,167,167,164,165,160,161,168,167],
[183,0,178,176,178,173,172,159,172,162],
[173,162,0,163,180,162,162,155,150,172],
[173,164,177,0,152,155,160,167,165,154],
[176,162,160,188,0,167,173,162,168,168],
[175,167,178,185,173,0,163,153,172,172],
[180,168,178,180,167,177,0,175,169,175],
[179,181,185,173,178,187,165,0,168,168],
[172,168,190,175,172,168,171,172,0,158],
[173,178,168,186,172,168,165,172,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,212,128,136,166,215,205,122,194],
[121,0,174,110,130,110,214,223,116,188],
[128,166,0,134,136,134,246,180,129,221],
[212,230,206,0,174,181,249,242,159,168],
[204,210,204,166,0,192,240,255,217,171],
[174,230,206,159,148,0,303,250,141,192],
[125,126,94,91,100,37,0,118,78,165],
[135,117,160,98,85,90,222,0,124,154],
[218,224,211,181,123,199,262,216,0,212],
[146,152,119,172,169,148,175,186,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,165,161,158,186,196,177,160,153],
[188,0,158,168,154,160,191,186,158,175],
[175,182,0,155,159,174,207,166,169,192],
[179,172,185,0,164,170,170,171,158,164],
[182,186,181,176,0,180,178,200,170,166],
[154,180,166,170,160,0,170,181,156,170],
[144,149,133,170,162,170,0,178,144,159],
[163,154,174,169,140,159,162,0,159,165],
[180,182,171,182,170,184,196,181,0,183],
[187,165,148,176,174,170,181,175,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,162,183,181,172,183,164,166,156],
[165,0,163,179,176,166,173,160,180,141],
[178,177,0,174,173,159,157,162,172,154],
[157,161,166,0,148,143,172,156,149,143],
[159,164,167,192,0,170,188,173,175,153],
[168,174,181,197,170,0,168,171,165,158],
[157,167,183,168,152,172,0,166,159,142],
[176,180,178,184,167,169,174,0,181,176],
[174,160,168,191,165,175,181,159,0,166],
[184,199,186,197,187,182,198,164,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,186,174,175,165,176,184,178,174],
[169,0,171,177,174,159,164,165,172,177],
[154,169,0,172,175,156,165,173,172,178],
[166,163,168,0,154,163,169,165,174,175],
[165,166,165,186,0,168,171,169,164,167],
[175,181,184,177,172,0,163,192,180,173],
[164,176,175,171,169,177,0,180,168,174],
[156,175,167,175,171,148,160,0,162,163],
[162,168,168,166,176,160,172,178,0,161],
[166,163,162,165,173,167,166,177,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,177,158,180,179,154,167,171,156],
[177,0,137,167,178,149,167,159,158,155],
[163,203,0,177,162,170,212,166,197,170],
[182,173,163,0,194,194,205,165,176,165],
[160,162,178,146,0,167,178,160,154,139],
[161,191,170,146,173,0,175,166,171,166],
[186,173,128,135,162,165,0,132,145,131],
[173,181,174,175,180,174,208,0,194,166],
[169,182,143,164,186,169,195,146,0,141],
[184,185,170,175,201,174,209,174,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,163,160,178,170,164,162,159,159],
[186,0,170,172,175,179,176,171,171,175],
[177,170,0,166,179,168,174,176,178,179],
[180,168,174,0,179,173,166,176,162,178],
[162,165,161,161,0,164,155,167,164,156],
[170,161,172,167,176,0,161,157,144,166],
[176,164,166,174,185,179,0,163,166,172],
[178,169,164,164,173,183,177,0,161,166],
[181,169,162,178,176,196,174,179,0,161],
[181,165,161,162,184,174,168,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,215,202,183,168,165,224,165,191],
[119,0,160,179,137,172,152,198,154,151],
[125,180,0,132,155,145,127,133,155,105],
[138,161,208,0,178,180,193,181,209,183],
[157,203,185,162,0,210,219,200,207,176],
[172,168,195,160,130,0,158,181,181,146],
[175,188,213,147,121,182,0,193,174,198],
[116,142,207,159,140,159,147,0,142,153],
[175,186,185,131,133,159,166,198,0,156],
[149,189,235,157,164,194,142,187,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,170,182,170,207,191,185,204,192],
[178,0,141,177,176,194,199,159,176,150],
[170,199,0,180,205,192,177,179,198,195],
[158,163,160,0,165,182,154,131,162,182],
[170,164,135,175,0,155,151,130,164,152],
[133,146,148,158,185,0,170,128,210,179],
[149,141,163,186,189,170,0,143,191,174],
[155,181,161,209,210,212,197,0,192,174],
[136,164,142,178,176,130,149,148,0,172],
[148,190,145,158,188,161,166,166,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,162,185,187,188,167,193,198,175],
[176,0,136,156,143,186,144,191,164,190],
[178,204,0,166,173,193,161,164,167,187],
[155,184,174,0,153,188,151,173,172,189],
[153,197,167,187,0,148,161,180,192,184],
[152,154,147,152,192,0,125,149,155,172],
[173,196,179,189,179,215,0,167,160,197],
[147,149,176,167,160,191,173,0,196,184],
[142,176,173,168,148,185,180,144,0,197],
[165,150,153,151,156,168,143,156,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,177,180,160,165,169,181,183,171],
[165,0,181,170,161,178,168,194,163,168],
[163,159,0,182,157,171,161,178,162,151],
[160,170,158,0,146,167,152,180,157,147],
[180,179,183,194,0,178,176,203,180,170],
[175,162,169,173,162,0,168,191,170,158],
[171,172,179,188,164,172,0,180,183,174],
[159,146,162,160,137,149,160,0,160,150],
[157,177,178,183,160,170,157,180,0,168],
[169,172,189,193,170,182,166,190,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,214,171,167,176,171,158,174,179],
[175,0,198,181,186,162,179,180,177,185],
[126,142,0,166,141,139,156,142,166,157],
[169,159,174,0,205,175,192,161,173,192],
[173,154,199,135,0,159,190,136,164,193],
[164,178,201,165,181,0,165,174,180,198],
[169,161,184,148,150,175,0,151,167,169],
[182,160,198,179,204,166,189,0,185,202],
[166,163,174,167,176,160,173,155,0,165],
[161,155,183,148,147,142,171,138,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,173,191,160,195,163,180,178,164],
[174,0,166,187,172,162,184,176,166,159],
[167,174,0,191,177,182,169,185,178,173],
[149,153,149,0,163,167,150,167,160,152],
[180,168,163,177,0,178,198,186,169,185],
[145,178,158,173,162,0,159,166,157,169],
[177,156,171,190,142,181,0,170,159,175],
[160,164,155,173,154,174,170,0,177,150],
[162,174,162,180,171,183,181,163,0,181],
[176,181,167,188,155,171,165,190,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,186,163,165,168,146,137,187,141],
[140,0,181,183,124,142,151,145,199,143],
[154,159,0,193,132,169,143,144,188,175],
[177,157,147,0,159,180,181,195,200,153],
[175,216,208,181,0,163,161,176,221,187],
[172,198,171,160,177,0,173,168,178,159],
[194,189,197,159,179,167,0,151,203,146],
[203,195,196,145,164,172,189,0,231,174],
[153,141,152,140,119,162,137,109,0,125],
[199,197,165,187,153,181,194,166,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,176,150,146,169,176,147,163,162],
[187,0,180,154,166,175,176,166,159,155],
[164,160,0,152,148,156,175,156,156,148],
[190,186,188,0,176,174,193,169,184,172],
[194,174,192,164,0,179,194,171,188,175],
[171,165,184,166,161,0,192,158,151,169],
[164,164,165,147,146,148,0,152,149,154],
[193,174,184,171,169,182,188,0,167,157],
[177,181,184,156,152,189,191,173,0,175],
[178,185,192,168,165,171,186,183,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,192,174,165,163,177,155,168,188],
[169,0,194,168,165,168,179,163,172,169],
[148,146,0,136,152,131,156,139,151,117],
[166,172,204,0,178,165,176,163,180,184],
[175,175,188,162,0,161,183,134,168,166],
[177,172,209,175,179,0,178,145,190,154],
[163,161,184,164,157,162,0,173,158,175],
[185,177,201,177,206,195,167,0,193,174],
[172,168,189,160,172,150,182,147,0,152],
[152,171,223,156,174,186,165,166,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,100,189,200,240,266,274,240,300],
[106,0,40,129,243,66,89,63,129,123],
[240,300,0,129,266,240,206,214,246,240],
[151,211,211,0,177,217,117,191,251,217],
[140,97,74,163,0,123,123,97,97,123],
[100,274,100,123,217,0,83,123,123,300],
[74,251,134,223,217,257,0,97,157,280],
[66,277,126,149,243,217,243,0,189,240],
[100,211,94,89,243,217,183,151,0,217],
[40,217,100,123,217,40,60,100,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,185,165,145,186,147,149,175,162],
[187,0,193,159,153,208,198,187,167,200],
[155,147,0,187,140,204,182,166,119,213],
[175,181,153,0,125,163,146,206,165,177],
[195,187,200,215,0,197,155,208,196,190],
[154,132,136,177,143,0,163,143,141,173],
[193,142,158,194,185,177,0,176,169,207],
[191,153,174,134,132,197,164,0,175,174],
[165,173,221,175,144,199,171,165,0,199],
[178,140,127,163,150,167,133,166,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,175,186,171,173,154,163,170,164],
[179,0,162,173,181,176,168,163,178,167],
[165,178,0,174,162,177,161,150,165,166],
[154,167,166,0,150,167,140,145,165,136],
[169,159,178,190,0,163,172,163,192,169],
[167,164,163,173,177,0,171,164,179,171],
[186,172,179,200,168,169,0,173,207,181],
[177,177,190,195,177,176,167,0,179,165],
[170,162,175,175,148,161,133,161,0,158],
[176,173,174,204,171,169,159,175,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,193,174,161,183,176,170,187,161],
[167,0,164,164,150,159,155,147,167,137],
[147,176,0,151,164,168,156,154,160,159],
[166,176,189,0,170,146,151,138,166,144],
[179,190,176,170,0,165,163,159,191,173],
[157,181,172,194,175,0,152,174,173,167],
[164,185,184,189,177,188,0,158,180,178],
[170,193,186,202,181,166,182,0,190,178],
[153,173,180,174,149,167,160,150,0,153],
[179,203,181,196,167,173,162,162,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,175,155,165,148,158,153,181,182],
[183,0,196,141,178,132,174,171,198,195],
[165,144,0,137,181,112,162,160,157,173],
[185,199,203,0,217,158,193,193,198,195],
[175,162,159,123,0,170,169,153,153,160],
[192,208,228,182,170,0,186,193,190,184],
[182,166,178,147,171,154,0,155,181,199],
[187,169,180,147,187,147,185,0,162,193],
[159,142,183,142,187,150,159,178,0,178],
[158,145,167,145,180,156,141,147,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,158,175,175,169,161,159,170,188],
[178,0,160,183,178,177,187,161,175,179],
[182,180,0,208,177,146,159,180,176,173],
[165,157,132,0,158,142,153,153,155,148],
[165,162,163,182,0,147,149,155,157,163],
[171,163,194,198,193,0,182,191,166,165],
[179,153,181,187,191,158,0,163,147,161],
[181,179,160,187,185,149,177,0,177,173],
[170,165,164,185,183,174,193,163,0,180],
[152,161,167,192,177,175,179,167,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,123,139,105,97,67,67,226,160],
[173,0,89,229,121,120,94,173,90,200],
[217,251,0,219,238,163,150,216,146,243],
[201,111,121,0,98,121,134,200,131,178],
[235,219,102,242,0,155,102,103,235,146],
[243,220,177,219,185,0,170,80,236,174],
[273,246,190,206,238,170,0,153,180,246],
[273,167,124,140,237,260,187,0,183,94],
[114,250,194,209,105,104,160,157,0,243],
[180,140,97,162,194,166,94,246,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,191,170,174,169,186,186,183,178],
[144,0,159,156,154,167,168,164,159,160],
[149,181,0,169,171,174,182,177,174,178],
[170,184,171,0,164,172,192,178,185,183],
[166,186,169,176,0,188,187,188,169,176],
[171,173,166,168,152,0,183,183,169,185],
[154,172,158,148,153,157,0,160,161,157],
[154,176,163,162,152,157,180,0,155,166],
[157,181,166,155,171,171,179,185,0,182],
[162,180,162,157,164,155,183,174,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,187,164,194,182,174,134,148,168],
[162,0,188,153,166,157,128,144,140,162],
[153,152,0,163,177,163,170,130,143,177],
[176,187,177,0,158,172,153,173,157,172],
[146,174,163,182,0,181,135,125,153,174],
[158,183,177,168,159,0,147,152,155,152],
[166,212,170,187,205,193,0,144,175,197],
[206,196,210,167,215,188,196,0,183,207],
[192,200,197,183,187,185,165,157,0,210],
[172,178,163,168,166,188,143,133,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,197,164,194,200,163,183,164],
[167,0,185,204,171,190,172,163,158,173],
[169,155,0,203,155,179,188,156,152,167],
[143,136,137,0,141,176,175,163,156,153],
[176,169,185,199,0,197,180,191,186,181],
[146,150,161,164,143,0,167,141,168,159],
[140,168,152,165,160,173,0,178,157,147],
[177,177,184,177,149,199,162,0,160,178],
[157,182,188,184,154,172,183,180,0,157],
[176,167,173,187,159,181,193,162,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,169,175,199,170,177,177,198,175],
[179,0,172,173,184,157,179,198,194,175],
[171,168,0,171,186,164,169,160,185,167],
[165,167,169,0,181,165,166,167,171,167],
[141,156,154,159,0,157,166,156,178,161],
[170,183,176,175,183,0,200,167,189,178],
[163,161,171,174,174,140,0,160,192,159],
[163,142,180,173,184,173,180,0,182,167],
[142,146,155,169,162,151,148,158,0,156],
[165,165,173,173,179,162,181,173,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,184,170,176,199,128,175,153,171],
[192,0,181,227,191,186,183,165,163,217],
[156,159,0,238,230,171,211,199,183,184],
[170,113,102,0,182,111,104,165,135,106],
[164,149,110,158,0,109,135,156,145,122],
[141,154,169,229,231,0,200,190,145,160],
[212,157,129,236,205,140,0,149,177,156],
[165,175,141,175,184,150,191,0,151,135],
[187,177,157,205,195,195,163,189,0,230],
[169,123,156,234,218,180,184,205,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,175,168,170,207,182,192,184,187],
[155,0,150,155,142,158,166,158,173,157],
[165,190,0,172,166,197,192,172,180,178],
[172,185,168,0,143,184,177,162,165,181],
[170,198,174,197,0,190,205,174,184,184],
[133,182,143,156,150,0,188,176,170,164],
[158,174,148,163,135,152,0,181,175,160],
[148,182,168,178,166,164,159,0,170,193],
[156,167,160,175,156,170,165,170,0,186],
[153,183,162,159,156,176,180,147,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,161,162,159,183,159,154,161,169],
[187,0,155,176,148,173,167,146,156,154],
[179,185,0,177,168,173,166,136,159,166],
[178,164,163,0,159,161,152,125,151,152],
[181,192,172,181,0,170,176,170,152,174],
[157,167,167,179,170,0,174,156,169,171],
[181,173,174,188,164,166,0,145,161,167],
[186,194,204,215,170,184,195,0,163,173],
[179,184,181,189,188,171,179,177,0,165],
[171,186,174,188,166,169,173,167,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,158,152,150,177,159,171,152,154],
[180,0,169,173,142,177,168,163,170,164],
[182,171,0,174,162,187,160,171,172,174],
[188,167,166,0,156,179,167,177,159,160],
[190,198,178,184,0,191,165,171,184,174],
[163,163,153,161,149,0,154,157,171,162],
[181,172,180,173,175,186,0,183,181,163],
[169,177,169,163,169,183,157,0,170,155],
[188,170,168,181,156,169,159,170,0,168],
[186,176,166,180,166,178,177,185,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,176,174,164,274,158,210,113,197],
[179,0,252,139,192,269,135,187,104,174],
[164,88,0,102,106,187,124,164,102,71],
[166,201,238,0,112,272,186,222,147,162],
[176,148,234,228,0,243,220,217,183,181],
[66,71,153,68,97,0,109,100,38,126],
[182,205,216,154,120,231,0,163,128,234],
[130,153,176,118,123,240,177,0,67,193],
[227,236,238,193,157,302,212,273,0,264],
[143,166,269,178,159,214,106,147,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,174,214,174,182,175,182,193,202],
[175,0,135,191,180,154,172,187,161,185],
[166,205,0,155,178,132,157,187,183,188],
[126,149,185,0,152,156,123,165,184,205],
[166,160,162,188,0,149,150,159,169,181],
[158,186,208,184,191,0,162,186,195,164],
[165,168,183,217,190,178,0,194,192,175],
[158,153,153,175,181,154,146,0,191,155],
[147,179,157,156,171,145,148,149,0,167],
[138,155,152,135,159,176,165,185,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,173,170,171,173,184,175,175],
[177,0,171,163,179,170,157,176,162,172],
[168,169,0,172,174,178,154,172,167,172],
[167,177,168,0,173,174,169,174,179,186],
[170,161,166,167,0,169,160,175,165,170],
[169,170,162,166,171,0,158,176,173,168],
[167,183,186,171,180,182,0,176,174,190],
[156,164,168,166,165,164,164,0,168,173],
[165,178,173,161,175,167,166,172,0,177],
[165,168,168,154,170,172,150,167,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,141,157,183,151,176,176,177,176],
[184,0,190,177,173,183,175,186,167,179],
[199,150,0,174,175,168,173,191,162,169],
[183,163,166,0,189,162,184,194,172,187],
[157,167,165,151,0,141,157,157,179,150],
[189,157,172,178,199,0,179,168,155,177],
[164,165,167,156,183,161,0,177,166,169],
[164,154,149,146,183,172,163,0,158,179],
[163,173,178,168,161,185,174,182,0,177],
[164,161,171,153,190,163,171,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,199,191,184,174,184,209,197,212],
[180,0,187,171,173,165,190,201,179,203],
[141,153,0,159,164,144,165,155,159,166],
[149,169,181,0,171,169,168,177,142,163],
[156,167,176,169,0,175,160,171,158,161],
[166,175,196,171,165,0,165,188,157,177],
[156,150,175,172,180,175,0,171,166,171],
[131,139,185,163,169,152,169,0,160,184],
[143,161,181,198,182,183,174,180,0,199],
[128,137,174,177,179,163,169,156,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,154,158,167,235,289,208,148,236],
[199,0,222,209,167,232,285,194,178,261],
[186,118,0,67,171,185,200,224,209,254],
[182,131,273,0,205,244,298,219,181,280],
[173,173,169,135,0,286,287,214,187,286],
[105,108,155,96,54,0,223,53,79,193],
[51,55,140,42,53,117,0,87,103,205],
[132,146,116,121,126,287,253,0,106,285],
[192,162,131,159,153,261,237,234,0,234],
[104,79,86,60,54,147,135,55,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,173,170,162,182,170,177,175,141],
[165,0,176,158,155,186,165,181,179,160],
[167,164,0,165,158,168,158,159,165,169],
[170,182,175,0,161,167,176,181,186,166],
[178,185,182,179,0,195,194,180,196,169],
[158,154,172,173,145,0,176,146,168,154],
[170,175,182,164,146,164,0,172,179,153],
[163,159,181,159,160,194,168,0,193,175],
[165,161,175,154,144,172,161,147,0,146],
[199,180,171,174,171,186,187,165,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,188,189,193,192,171,166,172,218],
[178,0,180,186,178,155,177,155,188,214],
[152,160,0,186,174,150,163,145,177,192],
[151,154,154,0,150,140,159,155,147,201],
[147,162,166,190,0,136,191,189,180,194],
[148,185,190,200,204,0,192,184,201,187],
[169,163,177,181,149,148,0,152,189,175],
[174,185,195,185,151,156,188,0,167,217],
[168,152,163,193,160,139,151,173,0,204],
[122,126,148,139,146,153,165,123,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,161,175,159,158,171,171,170,169],
[169,0,164,163,170,159,164,164,166,169],
[179,176,0,161,160,161,177,173,174,174],
[165,177,179,0,161,170,164,157,166,168],
[181,170,180,179,0,175,183,172,187,164],
[182,181,179,170,165,0,174,174,180,179],
[169,176,163,176,157,166,0,164,170,166],
[169,176,167,183,168,166,176,0,173,184],
[170,174,166,174,153,160,170,167,0,168],
[171,171,166,172,176,161,174,156,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,174,196,186,169,170,190,176,166],
[170,0,172,190,174,168,178,193,180,163],
[166,168,0,184,181,163,168,174,182,161],
[144,150,156,0,156,140,158,172,155,156],
[154,166,159,184,0,149,159,161,157,152],
[171,172,177,200,191,0,177,178,179,164],
[170,162,172,182,181,163,0,185,166,174],
[150,147,166,168,179,162,155,0,173,162],
[164,160,158,185,183,161,174,167,0,171],
[174,177,179,184,188,176,166,178,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,155,197,114,141,138,152,152,163],
[167,0,164,209,168,183,166,159,188,167],
[185,176,0,190,130,152,165,152,182,198],
[143,131,150,0,166,167,160,133,150,173],
[226,172,210,174,0,204,152,173,195,142],
[199,157,188,173,136,0,177,149,200,151],
[202,174,175,180,188,163,0,163,146,207],
[188,181,188,207,167,191,177,0,162,205],
[188,152,158,190,145,140,194,178,0,190],
[177,173,142,167,198,189,133,135,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,148,190,164,180,144,184,182,165],
[166,0,156,158,186,137,146,184,211,184],
[192,184,0,181,187,185,188,166,212,189],
[150,182,159,0,177,173,171,196,209,177],
[176,154,153,163,0,155,165,173,191,174],
[160,203,155,167,185,0,181,176,216,189],
[196,194,152,169,175,159,0,167,222,195],
[156,156,174,144,167,164,173,0,213,159],
[158,129,128,131,149,124,118,127,0,125],
[175,156,151,163,166,151,145,181,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,179,184,189,185,158,182,171],
[169,0,163,177,192,204,183,160,181,171],
[171,177,0,168,192,194,179,167,172,175],
[161,163,172,0,187,183,172,172,184,167],
[156,148,148,153,0,175,163,151,173,155],
[151,136,146,157,165,0,158,138,158,138],
[155,157,161,168,177,182,0,166,179,171],
[182,180,173,168,189,202,174,0,184,171],
[158,159,168,156,167,182,161,156,0,167],
[169,169,165,173,185,202,169,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,193,153,151,172,163,177,186,170],
[170,0,180,156,174,181,174,188,159,176],
[147,160,0,167,157,167,159,166,151,151],
[187,184,173,0,158,174,182,187,180,182],
[189,166,183,182,0,190,176,176,179,156],
[168,159,173,166,150,0,163,170,165,158],
[177,166,181,158,164,177,0,181,163,161],
[163,152,174,153,164,170,159,0,164,157],
[154,181,189,160,161,175,177,176,0,163],
[170,164,189,158,184,182,179,183,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,152,158,170,154,153,159,158,147],
[175,0,172,179,180,190,167,160,160,177],
[188,168,0,167,179,168,176,173,154,169],
[182,161,173,0,174,172,168,180,154,166],
[170,160,161,166,0,157,158,150,148,154],
[186,150,172,168,183,0,158,162,159,156],
[187,173,164,172,182,182,0,182,165,174],
[181,180,167,160,190,178,158,0,160,168],
[182,180,186,186,192,181,175,180,0,159],
[193,163,171,174,186,184,166,172,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,168,171,178,148,171,174,180,164],
[165,0,160,176,165,160,159,183,180,174],
[172,180,0,170,174,173,162,184,189,166],
[169,164,170,0,175,157,163,187,179,176],
[162,175,166,165,0,163,166,179,175,156],
[192,180,167,183,177,0,172,193,193,179],
[169,181,178,177,174,168,0,181,177,169],
[166,157,156,153,161,147,159,0,165,166],
[160,160,151,161,165,147,163,175,0,156],
[176,166,174,164,184,161,171,174,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,182,172,169,172,167,158,168,170],
[155,0,165,161,163,157,162,163,158,166],
[158,175,0,164,168,169,155,168,157,168],
[168,179,176,0,166,159,172,160,170,164],
[171,177,172,174,0,169,161,162,162,174],
[168,183,171,181,171,0,169,173,160,183],
[173,178,185,168,179,171,0,164,164,178],
[182,177,172,180,178,167,176,0,159,179],
[172,182,183,170,178,180,176,181,0,179],
[170,174,172,176,166,157,162,161,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,183,162,166,137,133,122,166,186],
[161,0,170,164,176,158,170,176,178,183],
[157,170,0,167,119,141,149,148,157,172],
[178,176,173,0,157,151,125,119,169,183],
[174,164,221,183,0,159,165,164,178,172],
[203,182,199,189,181,0,168,166,170,206],
[207,170,191,215,175,172,0,172,204,212],
[218,164,192,221,176,174,168,0,200,196],
[174,162,183,171,162,170,136,140,0,182],
[154,157,168,157,168,134,128,144,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,166,178,170,180,161,170,182,164],
[172,0,165,176,166,167,161,164,175,168],
[174,175,0,179,169,182,160,173,185,169],
[162,164,161,0,167,175,155,160,161,164],
[170,174,171,173,0,186,168,164,172,157],
[160,173,158,165,154,0,150,167,162,164],
[179,179,180,185,172,190,0,168,179,180],
[170,176,167,180,176,173,172,0,185,165],
[158,165,155,179,168,178,161,155,0,167],
[176,172,171,176,183,176,160,175,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,171,151,146,169,178,177,173,199],
[179,0,173,158,167,167,166,183,169,168],
[169,167,0,152,136,148,175,157,170,174],
[189,182,188,0,187,156,158,167,159,175],
[194,173,204,153,0,167,188,195,186,188],
[171,173,192,184,173,0,226,169,176,198],
[162,174,165,182,152,114,0,169,179,159],
[163,157,183,173,145,171,171,0,156,173],
[167,171,170,181,154,164,161,184,0,173],
[141,172,166,165,152,142,181,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,179,230,230,158,207,159,161,139],
[182,0,164,202,191,154,139,216,209,178],
[161,176,0,223,215,156,170,164,183,166],
[110,138,117,0,153,115,101,149,126,142],
[110,149,125,187,0,120,111,115,148,141],
[182,186,184,225,220,0,179,228,179,166],
[133,201,170,239,229,161,0,132,182,167],
[181,124,176,191,225,112,208,0,169,144],
[179,131,157,214,192,161,158,171,0,166],
[201,162,174,198,199,174,173,196,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,183,193,163,189,174,186,182,185],
[163,0,203,189,173,196,166,172,192,152],
[157,137,0,157,145,188,180,161,182,145],
[147,151,183,0,171,190,154,167,180,166],
[177,167,195,169,0,192,197,193,193,152],
[151,144,152,150,148,0,136,156,170,138],
[166,174,160,186,143,204,0,179,182,170],
[154,168,179,173,147,184,161,0,173,147],
[158,148,158,160,147,170,158,167,0,144],
[155,188,195,174,188,202,170,193,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,174,162,162,167,149,158,150,152],
[187,0,191,183,187,162,161,169,163,181],
[166,149,0,158,160,146,141,167,150,153],
[178,157,182,0,161,164,156,166,171,165],
[178,153,180,179,0,170,153,170,162,159],
[173,178,194,176,170,0,161,167,175,161],
[191,179,199,184,187,179,0,172,166,175],
[182,171,173,174,170,173,168,0,174,162],
[190,177,190,169,178,165,174,166,0,171],
[188,159,187,175,181,179,165,178,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,191,184,189,170,177,158,176,177],
[174,0,174,168,193,164,175,176,180,186],
[149,166,0,172,183,162,156,168,177,174],
[156,172,168,0,183,160,165,162,171,176],
[151,147,157,157,0,149,162,150,170,157],
[170,176,178,180,191,0,164,172,192,177],
[163,165,184,175,178,176,0,161,174,170],
[182,164,172,178,190,168,179,0,194,189],
[164,160,163,169,170,148,166,146,0,167],
[163,154,166,164,183,163,170,151,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,187,155,178,168,163,172,149,134],
[148,0,142,114,110,123,91,90,114,85],
[153,198,0,232,165,196,168,129,168,153],
[185,226,108,0,216,185,224,164,172,97],
[162,230,175,124,0,127,139,153,155,154],
[172,217,144,155,213,0,184,166,203,124],
[177,249,172,116,201,156,0,176,141,120],
[168,250,211,176,187,174,164,0,139,145],
[191,226,172,168,185,137,199,201,0,181],
[206,255,187,243,186,216,220,195,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,184,151,182,145,161,197,176,183],
[176,0,180,162,154,176,147,169,198,185],
[156,160,0,143,166,146,148,161,175,161],
[189,178,197,0,190,183,160,199,195,198],
[158,186,174,150,0,156,146,170,170,166],
[195,164,194,157,184,0,183,191,211,189],
[179,193,192,180,194,157,0,217,197,205],
[143,171,179,141,170,149,123,0,170,175],
[164,142,165,145,170,129,143,170,0,153],
[157,155,179,142,174,151,135,165,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,153,214,203,208,166,167,173,176],
[193,0,150,211,162,218,192,129,107,150],
[187,190,0,212,161,196,176,181,187,172],
[126,129,128,0,157,203,166,138,148,129],
[137,178,179,183,0,227,193,150,167,137],
[132,122,144,137,113,0,130,105,106,135],
[174,148,164,174,147,210,0,145,164,150],
[173,211,159,202,190,235,195,0,195,148],
[167,233,153,192,173,234,176,145,0,177],
[164,190,168,211,203,205,190,192,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,169,163,175,179,179,167,179,190],
[181,0,185,173,190,169,179,174,186,190],
[171,155,0,152,170,162,163,161,171,181],
[177,167,188,0,158,169,171,176,176,187],
[165,150,170,182,0,171,184,167,175,189],
[161,171,178,171,169,0,179,174,185,186],
[161,161,177,169,156,161,0,162,179,180],
[173,166,179,164,173,166,178,0,187,190],
[161,154,169,164,165,155,161,153,0,175],
[150,150,159,153,151,154,160,150,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,173,174,177,176,176,176,188,170],
[157,0,160,160,160,164,165,178,172,166],
[167,180,0,162,176,155,179,193,177,189],
[166,180,178,0,177,173,181,184,188,178],
[163,180,164,163,0,163,171,175,167,180],
[164,176,185,167,177,0,169,181,179,168],
[164,175,161,159,169,171,0,178,174,168],
[164,162,147,156,165,159,162,0,164,166],
[152,168,163,152,173,161,166,176,0,168],
[170,174,151,162,160,172,172,174,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,152,142,152,175,163,148,149,191],
[191,0,169,160,152,195,167,171,162,207],
[188,171,0,179,164,192,164,169,188,192],
[198,180,161,0,188,200,186,203,164,214],
[188,188,176,152,0,200,180,160,177,180],
[165,145,148,140,140,0,149,155,156,182],
[177,173,176,154,160,191,0,182,160,200],
[192,169,171,137,180,185,158,0,175,189],
[191,178,152,176,163,184,180,165,0,200],
[149,133,148,126,160,158,140,151,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,174,159,165,178,168,160,169,164],
[176,0,181,179,170,180,172,176,156,187],
[166,159,0,151,160,166,162,162,167,176],
[181,161,189,0,163,179,177,163,171,190],
[175,170,180,177,0,183,164,177,160,171],
[162,160,174,161,157,0,161,173,160,164],
[172,168,178,163,176,179,0,168,158,176],
[180,164,178,177,163,167,172,0,167,172],
[171,184,173,169,180,180,182,173,0,185],
[176,153,164,150,169,176,164,168,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,162,178,190,173,177,178,178,172],
[156,0,142,170,161,169,155,166,165,151],
[178,198,0,188,192,169,180,186,185,189],
[162,170,152,0,179,167,159,192,155,151],
[150,179,148,161,0,165,154,179,160,149],
[167,171,171,173,175,0,164,184,171,180],
[163,185,160,181,186,176,0,186,165,169],
[162,174,154,148,161,156,154,0,159,158],
[162,175,155,185,180,169,175,181,0,163],
[168,189,151,189,191,160,171,182,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,170,157,166,159,162,164,165],
[172,0,148,154,164,161,158,157,160,172],
[172,192,0,166,180,174,182,175,181,173],
[170,186,174,0,179,177,174,176,176,178],
[183,176,160,161,0,168,163,174,169,175],
[174,179,166,163,172,0,169,166,157,166],
[181,182,158,166,177,171,0,168,173,174],
[178,183,165,164,166,174,172,0,165,171],
[176,180,159,164,171,183,167,175,0,169],
[175,168,167,162,165,174,166,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,147,131,155,174,156,96,156,142],
[182,0,213,160,177,209,194,171,192,167],
[193,127,0,134,138,161,156,127,169,127],
[209,180,206,0,175,192,164,150,191,154],
[185,163,202,165,0,173,172,114,196,143],
[166,131,179,148,167,0,143,145,170,143],
[184,146,184,176,168,197,0,135,164,170],
[244,169,213,190,226,195,205,0,216,185],
[184,148,171,149,144,170,176,124,0,151],
[198,173,213,186,197,197,170,155,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,156,165,182,138,150,176,174,179],
[193,0,184,168,187,178,186,196,186,177],
[184,156,0,170,179,144,178,183,160,170],
[175,172,170,0,160,163,185,155,190,187],
[158,153,161,180,0,144,148,161,177,171],
[202,162,196,177,196,0,194,199,210,192],
[190,154,162,155,192,146,0,168,186,165],
[164,144,157,185,179,141,172,0,181,186],
[166,154,180,150,163,130,154,159,0,169],
[161,163,170,153,169,148,175,154,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,153,161,167,162,174,178,173],
[162,0,165,169,164,156,158,177,172,165],
[162,175,0,170,161,166,161,170,167,170],
[187,171,170,0,170,163,178,170,172,163],
[179,176,179,170,0,175,166,193,181,180],
[173,184,174,177,165,0,167,193,170,181],
[178,182,179,162,174,173,0,188,171,174],
[166,163,170,170,147,147,152,0,168,166],
[162,168,173,168,159,170,169,172,0,166],
[167,175,170,177,160,159,166,174,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,178,191,190,160,193,171,164,171],
[123,0,150,124,122,153,154,157,138,136],
[162,190,0,160,140,141,149,183,163,157],
[149,216,180,0,137,166,180,191,168,174],
[150,218,200,203,0,171,208,187,127,179],
[180,187,199,174,169,0,196,224,181,183],
[147,186,191,160,132,144,0,176,125,190],
[169,183,157,149,153,116,164,0,141,129],
[176,202,177,172,213,159,215,199,0,158],
[169,204,183,166,161,157,150,211,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,175,132,155,174,166,173,180,187],
[193,0,185,175,167,190,190,170,195,196],
[165,155,0,159,171,191,174,179,179,190],
[208,165,181,0,182,187,157,173,202,178],
[185,173,169,158,0,189,193,179,182,178],
[166,150,149,153,151,0,161,150,192,178],
[174,150,166,183,147,179,0,168,169,177],
[167,170,161,167,161,190,172,0,183,180],
[160,145,161,138,158,148,171,157,0,176],
[153,144,150,162,162,162,163,160,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,184,177,175,197,169,171,205,175],
[162,0,182,162,171,189,174,168,177,178],
[156,158,0,178,151,181,177,179,169,182],
[163,178,162,0,166,181,169,159,171,186],
[165,169,189,174,0,183,160,187,176,178],
[143,151,159,159,157,0,166,158,163,180],
[171,166,163,171,180,174,0,166,180,171],
[169,172,161,181,153,182,174,0,167,181],
[135,163,171,169,164,177,160,173,0,157],
[165,162,158,154,162,160,169,159,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,168,196,159,171,183,171,174,180],
[180,0,166,164,176,147,189,166,161,180],
[172,174,0,164,177,159,175,160,194,188],
[144,176,176,0,174,174,176,159,176,183],
[181,164,163,166,0,159,171,156,164,179],
[169,193,181,166,181,0,180,168,190,188],
[157,151,165,164,169,160,0,158,187,180],
[169,174,180,181,184,172,182,0,167,179],
[166,179,146,164,176,150,153,173,0,180],
[160,160,152,157,161,152,160,161,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,170,178,173,159,195,188,164,167],
[159,0,169,154,171,160,168,168,149,179],
[170,171,0,181,175,191,211,181,192,159],
[162,186,159,0,160,150,189,142,174,171],
[167,169,165,180,0,161,200,148,167,171],
[181,180,149,190,179,0,191,170,150,169],
[145,172,129,151,140,149,0,143,135,166],
[152,172,159,198,192,170,197,0,141,169],
[176,191,148,166,173,190,205,199,0,174],
[173,161,181,169,169,171,174,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,178,164,184,166,201,205,183,179],
[164,0,180,155,154,186,179,204,175,174],
[162,160,0,153,153,168,152,177,156,166],
[176,185,187,0,177,174,169,204,161,158],
[156,186,187,163,0,193,161,190,149,184],
[174,154,172,166,147,0,171,188,145,176],
[139,161,188,171,179,169,0,178,162,165],
[135,136,163,136,150,152,162,0,125,145],
[157,165,184,179,191,195,178,215,0,199],
[161,166,174,182,156,164,175,195,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,145,160,159,170,149,180,162,174],
[155,0,153,154,144,148,140,157,165,178],
[195,187,0,183,182,182,168,184,174,194],
[180,186,157,0,169,174,171,188,179,184],
[181,196,158,171,0,163,175,192,187,205],
[170,192,158,166,177,0,151,181,162,189],
[191,200,172,169,165,189,0,180,179,192],
[160,183,156,152,148,159,160,0,179,174],
[178,175,166,161,153,178,161,161,0,189],
[166,162,146,156,135,151,148,166,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,135,168,201,184,177,201,206,180],
[158,0,183,154,195,181,200,186,192,180],
[205,157,0,157,182,176,178,169,193,144],
[172,186,183,0,180,172,164,186,167,158],
[139,145,158,160,0,146,187,151,171,165],
[156,159,164,168,194,0,164,187,198,168],
[163,140,162,176,153,176,0,186,173,118],
[139,154,171,154,189,153,154,0,174,146],
[134,148,147,173,169,142,167,166,0,130],
[160,160,196,182,175,172,222,194,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,157,131,154,158,130,145,208,159],
[183,0,178,158,198,190,169,195,262,144],
[183,162,0,187,214,200,147,151,180,162],
[209,182,153,0,201,209,170,209,225,171],
[186,142,126,139,0,184,104,166,185,144],
[182,150,140,131,156,0,132,163,165,137],
[210,171,193,170,236,208,0,189,196,160],
[195,145,189,131,174,177,151,0,196,132],
[132,78,160,115,155,175,144,144,0,68],
[181,196,178,169,196,203,180,208,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,200,171,186,189,191,188,212,194],
[179,0,166,171,196,188,182,199,169,186],
[140,174,0,154,174,182,188,166,195,170],
[169,169,186,0,184,204,171,185,182,205],
[154,144,166,156,0,166,155,145,170,185],
[151,152,158,136,174,0,185,151,170,155],
[149,158,152,169,185,155,0,186,161,176],
[152,141,174,155,195,189,154,0,197,166],
[128,171,145,158,170,170,179,143,0,174],
[146,154,170,135,155,185,164,174,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,233,100,134,252,185,190,169,246],
[259,0,239,111,175,271,144,190,246,226],
[107,101,0,60,101,227,76,53,181,266],
[240,229,280,0,168,225,165,193,274,255],
[206,165,239,172,0,277,245,110,279,272],
[88,69,113,115,63,0,142,139,83,134],
[155,196,264,175,95,198,0,148,240,312],
[150,150,287,147,230,201,192,0,242,260],
[171,94,159,66,61,257,100,98,0,191],
[94,114,74,85,68,206,28,80,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,172,170,180,170,174,170,171,193],
[180,0,191,162,174,180,172,177,179,200],
[168,149,0,164,172,157,161,152,156,172],
[170,178,176,0,171,168,176,169,170,176],
[160,166,168,169,0,174,174,169,169,187],
[170,160,183,172,166,0,170,157,175,169],
[166,168,179,164,166,170,0,163,170,177],
[170,163,188,171,171,183,177,0,172,197],
[169,161,184,170,171,165,170,168,0,179],
[147,140,168,164,153,171,163,143,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,162,173,151,143,166,131,156,166],
[197,0,189,173,194,156,163,168,175,189],
[178,151,0,163,151,161,167,151,158,166],
[167,167,177,0,167,155,178,170,167,160],
[189,146,189,173,0,168,180,153,173,170],
[197,184,179,185,172,0,187,157,161,192],
[174,177,173,162,160,153,0,152,164,159],
[209,172,189,170,187,183,188,0,177,184],
[184,165,182,173,167,179,176,163,0,172],
[174,151,174,180,170,148,181,156,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,177,160,199,156,171,146,150,158],
[206,0,169,165,202,169,169,132,167,194],
[163,171,0,126,177,175,139,143,143,150],
[180,175,214,0,161,183,206,166,185,202],
[141,138,163,179,0,186,132,126,148,156],
[184,171,165,157,154,0,152,129,141,128],
[169,171,201,134,208,188,0,109,152,178],
[194,208,197,174,214,211,231,0,146,217],
[190,173,197,155,192,199,188,194,0,191],
[182,146,190,138,184,212,162,123,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,200,158,174,166,166,159,182,154],
[154,0,167,133,157,128,153,140,154,171],
[140,173,0,139,147,143,126,136,170,144],
[182,207,201,0,180,178,167,172,202,175],
[166,183,193,160,0,161,150,182,181,184],
[174,212,197,162,179,0,172,158,185,163],
[174,187,214,173,190,168,0,186,176,187],
[181,200,204,168,158,182,154,0,180,177],
[158,186,170,138,159,155,164,160,0,170],
[186,169,196,165,156,177,153,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,156,169,145,161,148,158,172,163],
[174,0,165,201,182,174,173,171,173,195],
[184,175,0,170,158,179,170,177,170,173],
[171,139,170,0,148,151,151,153,189,167],
[195,158,182,192,0,201,175,196,185,176],
[179,166,161,189,139,0,181,169,185,169],
[192,167,170,189,165,159,0,179,179,181],
[182,169,163,187,144,171,161,0,182,181],
[168,167,170,151,155,155,161,158,0,166],
[177,145,167,173,164,171,159,159,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,201,205,173,194,196,172,192,194],
[177,0,184,170,148,199,176,188,176,173],
[139,156,0,172,162,155,172,152,179,184],
[135,170,168,0,137,173,193,136,164,176],
[167,192,178,203,0,187,190,183,170,205],
[146,141,185,167,153,0,177,137,171,187],
[144,164,168,147,150,163,0,145,189,173],
[168,152,188,204,157,203,195,0,200,204],
[148,164,161,176,170,169,151,140,0,161],
[146,167,156,164,135,153,167,136,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,172,170,182,194,172,174,176,187],
[144,0,161,155,137,175,170,147,147,153],
[168,179,0,175,154,170,177,160,156,169],
[170,185,165,0,148,158,188,157,166,159],
[158,203,186,192,0,187,193,167,173,172],
[146,165,170,182,153,0,166,164,169,167],
[168,170,163,152,147,174,0,165,166,167],
[166,193,180,183,173,176,175,0,162,176],
[164,193,184,174,167,171,174,178,0,179],
[153,187,171,181,168,173,173,164,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,173,186,177,184,174,182,163,190],
[172,0,160,153,172,174,173,168,154,172],
[167,180,0,162,178,171,166,170,165,183],
[154,187,178,0,180,167,167,157,155,175],
[163,168,162,160,0,178,159,178,175,170],
[156,166,169,173,162,0,165,177,164,166],
[166,167,174,173,181,175,0,175,155,178],
[158,172,170,183,162,163,165,0,168,172],
[177,186,175,185,165,176,185,172,0,178],
[150,168,157,165,170,174,162,168,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,157,148,180,176,156,171,165,162],
[168,0,166,162,165,179,159,174,164,158],
[183,174,0,158,175,191,159,184,185,181],
[192,178,182,0,199,180,155,191,188,170],
[160,175,165,141,0,174,154,178,165,158],
[164,161,149,160,166,0,146,159,170,170],
[184,181,181,185,186,194,0,184,179,163],
[169,166,156,149,162,181,156,0,166,147],
[175,176,155,152,175,170,161,174,0,155],
[178,182,159,170,182,170,177,193,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,170,238,201,173,173,208,197,226],
[137,0,156,163,159,117,132,185,150,190],
[170,184,0,182,153,177,125,183,203,208],
[102,177,158,0,200,175,108,172,182,180],
[139,181,187,140,0,185,154,109,124,190],
[167,223,163,165,155,0,138,154,182,196],
[167,208,215,232,186,202,0,142,210,221],
[132,155,157,168,231,186,198,0,209,175],
[143,190,137,158,216,158,130,131,0,200],
[114,150,132,160,150,144,119,165,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,158,199,159,166,257,181,152,198],
[167,0,172,186,174,141,199,156,147,174],
[182,168,0,219,155,175,204,179,162,169],
[141,154,121,0,119,132,176,156,137,152],
[181,166,185,221,0,159,234,201,197,209],
[174,199,165,208,181,0,224,158,165,180],
[83,141,136,164,106,116,0,110,128,140],
[159,184,161,184,139,182,230,0,154,179],
[188,193,178,203,143,175,212,186,0,195],
[142,166,171,188,131,160,200,161,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,186,167,181,189,172,168,177,168],
[159,0,165,151,174,176,171,156,156,158],
[154,175,0,152,171,171,159,149,160,158],
[173,189,188,0,195,193,177,193,176,170],
[159,166,169,145,0,173,154,172,154,160],
[151,164,169,147,167,0,159,172,156,171],
[168,169,181,163,186,181,0,185,185,177],
[172,184,191,147,168,168,155,0,183,169],
[163,184,180,164,186,184,155,157,0,161],
[172,182,182,170,180,169,163,171,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,169,176,164,165,167,173,156],
[170,0,159,171,176,173,157,177,148,161],
[178,181,0,177,189,176,189,176,167,172],
[171,169,163,0,163,160,164,160,166,160],
[164,164,151,177,0,153,169,165,149,165],
[176,167,164,180,187,0,169,173,160,168],
[175,183,151,176,171,171,0,168,145,182],
[173,163,164,180,175,167,172,0,159,158],
[167,192,173,174,191,180,195,181,0,167],
[184,179,168,180,175,172,158,182,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,180,172,159,176,186,175,177,183],
[178,0,175,166,165,159,178,174,166,186],
[160,165,0,170,161,157,185,187,175,173],
[168,174,170,0,168,155,207,185,167,177],
[181,175,179,172,0,161,194,188,196,192],
[164,181,183,185,179,0,211,186,177,177],
[154,162,155,133,146,129,0,177,141,163],
[165,166,153,155,152,154,163,0,172,164],
[163,174,165,173,144,163,199,168,0,183],
[157,154,167,163,148,163,177,176,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,143,193,120,185,159,132,177,183],
[158,0,126,151,168,191,141,112,172,164],
[197,214,0,184,188,224,211,183,175,167],
[147,189,156,0,128,197,179,161,183,169],
[220,172,152,212,0,198,181,185,175,190],
[155,149,116,143,142,0,133,143,151,171],
[181,199,129,161,159,207,0,157,165,163],
[208,228,157,179,155,197,183,0,163,196],
[163,168,165,157,165,189,175,177,0,177],
[157,176,173,171,150,169,177,144,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,198,175,188,180,176,178,192,183],
[170,0,182,167,170,182,166,162,181,181],
[142,158,0,169,172,153,163,162,177,174],
[165,173,171,0,177,169,166,171,178,170],
[152,170,168,163,0,167,146,155,168,170],
[160,158,187,171,173,0,165,164,185,191],
[164,174,177,174,194,175,0,174,183,192],
[162,178,178,169,185,176,166,0,192,188],
[148,159,163,162,172,155,157,148,0,173],
[157,159,166,170,170,149,148,152,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,173,181,158,158,147,148,173,157],
[186,0,170,167,181,171,163,172,164,158],
[167,170,0,163,163,159,162,161,184,166],
[159,173,177,0,173,179,160,177,170,171],
[182,159,177,167,0,155,154,164,164,160],
[182,169,181,161,185,0,154,180,168,185],
[193,177,178,180,186,186,0,164,192,173],
[192,168,179,163,176,160,176,0,170,171],
[167,176,156,170,176,172,148,170,0,191],
[183,182,174,169,180,155,167,169,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,183,134,179,119,122,124,155,128],
[226,0,183,147,196,171,150,143,204,179],
[157,157,0,167,191,134,166,114,190,144],
[206,193,173,0,184,141,173,145,182,142],
[161,144,149,156,0,129,131,122,172,129],
[221,169,206,199,211,0,182,185,204,164],
[218,190,174,167,209,158,0,163,216,158],
[216,197,226,195,218,155,177,0,204,178],
[185,136,150,158,168,136,124,136,0,159],
[212,161,196,198,211,176,182,162,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,150,179,168,174,176,185,179],
[167,0,177,168,184,161,174,178,195,170],
[167,163,0,143,173,161,153,174,175,160],
[190,172,197,0,190,171,167,189,199,196],
[161,156,167,150,0,156,157,169,178,164],
[172,179,179,169,184,0,166,194,196,171],
[166,166,187,173,183,174,0,185,175,179],
[164,162,166,151,171,146,155,0,177,170],
[155,145,165,141,162,144,165,163,0,162],
[161,170,180,144,176,169,161,170,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,176,172,195,179,174,176,160,175],
[169,0,166,164,162,161,146,156,157,158],
[164,174,0,177,200,183,174,156,177,177],
[168,176,163,0,217,185,165,165,166,181],
[145,178,140,123,0,148,127,148,143,145],
[161,179,157,155,192,0,162,171,140,176],
[166,194,166,175,213,178,0,174,161,181],
[164,184,184,175,192,169,166,0,162,179],
[180,183,163,174,197,200,179,178,0,173],
[165,182,163,159,195,164,159,161,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,159,171,167,150,172,150,159,161],
[168,0,164,184,165,167,174,162,167,177],
[181,176,0,172,178,172,179,174,157,182],
[169,156,168,0,144,153,165,154,163,173],
[173,175,162,196,0,163,178,149,164,169],
[190,173,168,187,177,0,173,167,178,175],
[168,166,161,175,162,167,0,176,173,166],
[190,178,166,186,191,173,164,0,167,179],
[181,173,183,177,176,162,167,173,0,186],
[179,163,158,167,171,165,174,161,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,184,175,169,160,204,171,192,172],
[170,0,175,168,165,171,188,163,175,153],
[156,165,0,166,165,169,211,172,185,156],
[165,172,174,0,152,169,188,165,183,147],
[171,175,175,188,0,151,188,170,201,162],
[180,169,171,171,189,0,194,178,185,167],
[136,152,129,152,152,146,0,162,145,135],
[169,177,168,175,170,162,178,0,196,146],
[148,165,155,157,139,155,195,144,0,150],
[168,187,184,193,178,173,205,194,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,205,142,177,179,173,183,234,216],
[176,0,181,134,138,184,173,199,186,211],
[135,159,0,116,112,145,136,160,182,155],
[198,206,224,0,165,211,172,208,248,236],
[163,202,228,175,0,191,172,203,219,242],
[161,156,195,129,149,0,162,179,194,184],
[167,167,204,168,168,178,0,195,248,228],
[157,141,180,132,137,161,145,0,213,202],
[106,154,158,92,121,146,92,127,0,149],
[124,129,185,104,98,156,112,138,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,184,172,169,180,181,174,171,171],
[147,0,147,158,143,155,157,160,142,154],
[156,193,0,174,170,175,177,163,165,168],
[168,182,166,0,176,174,184,170,175,166],
[171,197,170,164,0,163,184,173,168,160],
[160,185,165,166,177,0,177,166,176,156],
[159,183,163,156,156,163,0,170,157,161],
[166,180,177,170,167,174,170,0,172,171],
[169,198,175,165,172,164,183,168,0,174],
[169,186,172,174,180,184,179,169,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,185,163,156,173,161,161,173,160],
[189,0,212,174,161,193,179,151,191,160],
[155,128,0,141,166,172,145,148,161,154],
[177,166,199,0,186,179,161,161,193,189],
[184,179,174,154,0,163,167,141,192,165],
[167,147,168,161,177,0,143,155,160,158],
[179,161,195,179,173,197,0,180,179,165],
[179,189,192,179,199,185,160,0,172,167],
[167,149,179,147,148,180,161,168,0,155],
[180,180,186,151,175,182,175,173,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,164,149,174,178,178,161,177,166],
[163,0,196,170,177,191,181,157,160,171],
[176,144,0,144,169,175,163,134,152,167],
[191,170,196,0,187,186,150,158,162,182],
[166,163,171,153,0,166,163,156,155,170],
[162,149,165,154,174,0,153,144,162,169],
[162,159,177,190,177,187,0,152,161,146],
[179,183,206,182,184,196,188,0,170,185],
[163,180,188,178,185,178,179,170,0,191],
[174,169,173,158,170,171,194,155,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,201,168,203,185,155,189,184,195],
[155,0,204,167,224,217,159,206,178,201],
[139,136,0,134,183,152,149,158,144,156],
[172,173,206,0,194,169,134,203,152,177],
[137,116,157,146,0,181,146,137,148,146],
[155,123,188,171,159,0,162,165,158,172],
[185,181,191,206,194,178,0,183,169,180],
[151,134,182,137,203,175,157,0,180,157],
[156,162,196,188,192,182,171,160,0,186],
[145,139,184,163,194,168,160,183,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,183,165,166,180,164,174,159,174],
[161,0,177,173,157,178,170,183,163,170],
[157,163,0,162,158,172,154,161,154,157],
[175,167,178,0,163,178,164,177,172,169],
[174,183,182,177,0,181,167,180,173,168],
[160,162,168,162,159,0,157,175,163,154],
[176,170,186,176,173,183,0,176,179,177],
[166,157,179,163,160,165,164,0,152,161],
[181,177,186,168,167,177,161,188,0,167],
[166,170,183,171,172,186,163,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,169,182,183,164,193,167,176,168],
[143,0,167,159,161,154,167,169,163,159],
[171,173,0,166,168,164,176,187,173,164],
[158,181,174,0,172,154,192,160,161,157],
[157,179,172,168,0,155,175,163,164,160],
[176,186,176,186,185,0,177,190,170,168],
[147,173,164,148,165,163,0,167,169,158],
[173,171,153,180,177,150,173,0,173,164],
[164,177,167,179,176,170,171,167,0,175],
[172,181,176,183,180,172,182,176,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,169,173,229,169,199,201,164,144],
[114,0,161,169,176,105,152,162,140,165],
[171,179,0,167,167,142,170,155,149,141],
[167,171,173,0,186,149,176,205,182,163],
[111,164,173,154,0,176,168,142,198,152],
[171,235,198,191,164,0,183,213,181,148],
[141,188,170,164,172,157,0,147,149,153],
[139,178,185,135,198,127,193,0,167,140],
[176,200,191,158,142,159,191,173,0,182],
[196,175,199,177,188,192,187,200,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,161,151,158,171,166,145,164,137],
[185,0,140,150,165,172,173,149,136,157],
[179,200,0,174,200,198,193,197,168,181],
[189,190,166,0,171,187,187,169,172,186],
[182,175,140,169,0,165,168,143,154,136],
[169,168,142,153,175,0,183,154,152,158],
[174,167,147,153,172,157,0,147,152,145],
[195,191,143,171,197,186,193,0,169,168],
[176,204,172,168,186,188,188,171,0,170],
[203,183,159,154,204,182,195,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,197,180,193,157,180,170,192,165],
[152,0,180,163,172,167,166,160,159,152],
[143,160,0,173,144,161,157,158,172,163],
[160,177,167,0,161,155,160,159,158,150],
[147,168,196,179,0,166,188,173,174,161],
[183,173,179,185,174,0,185,160,196,169],
[160,174,183,180,152,155,0,175,175,171],
[170,180,182,181,167,180,165,0,176,167],
[148,181,168,182,166,144,165,164,0,162],
[175,188,177,190,179,171,169,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,195,253,175,90,126,167,157,208],
[206,0,247,274,189,156,195,183,192,162],
[145,93,0,210,149,63,174,146,124,167],
[87,66,130,0,122,109,124,103,127,79],
[165,151,191,218,0,89,124,207,181,194],
[250,184,277,231,251,0,194,180,225,144],
[214,145,166,216,216,146,0,163,131,178],
[173,157,194,237,133,160,177,0,115,134],
[183,148,216,213,159,115,209,225,0,109],
[132,178,173,261,146,196,162,206,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,152,192,195,204,172,175,192,158],
[174,0,166,169,189,173,159,183,174,178],
[188,174,0,178,203,215,164,206,196,168],
[148,171,162,0,183,184,146,197,197,182],
[145,151,137,157,0,185,154,173,172,151],
[136,167,125,156,155,0,158,165,181,135],
[168,181,176,194,186,182,0,166,207,209],
[165,157,134,143,167,175,174,0,193,158],
[148,166,144,143,168,159,133,147,0,152],
[182,162,172,158,189,205,131,182,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,171,198,170,215,173,193,141],
[172,0,162,132,144,181,189,143,152,150],
[164,178,0,141,126,174,196,137,144,156],
[169,208,199,0,199,209,206,149,193,189],
[142,196,214,141,0,187,186,144,168,164],
[170,159,166,131,153,0,168,153,157,131],
[125,151,144,134,154,172,0,136,156,169],
[167,197,203,191,196,187,204,0,166,156],
[147,188,196,147,172,183,184,174,0,171],
[199,190,184,151,176,209,171,184,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,162,146,165,161,156,174,175,128],
[197,0,164,180,185,161,176,177,207,176],
[178,176,0,171,168,171,199,171,176,166],
[194,160,169,0,168,174,166,202,194,202],
[175,155,172,172,0,150,156,175,197,154],
[179,179,169,166,190,0,189,191,159,173],
[184,164,141,174,184,151,0,152,165,166],
[166,163,169,138,165,149,188,0,176,131],
[165,133,164,146,143,181,175,164,0,140],
[212,164,174,138,186,167,174,209,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,175,172,165,169,175,178,182,195],
[152,0,171,150,149,175,154,167,170,151],
[165,169,0,171,175,183,184,172,185,178],
[168,190,169,0,161,185,185,194,209,185],
[175,191,165,179,0,177,187,185,183,177],
[171,165,157,155,163,0,164,167,174,164],
[165,186,156,155,153,176,0,185,179,175],
[162,173,168,146,155,173,155,0,178,169],
[158,170,155,131,157,166,161,162,0,153],
[145,189,162,155,163,176,165,171,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,181,164,159,151,148,147,178,159],
[169,0,189,163,161,163,157,147,169,166],
[159,151,0,156,145,158,146,147,170,158],
[176,177,184,0,163,154,148,164,203,176],
[181,179,195,177,0,170,148,154,188,152],
[189,177,182,186,170,0,156,162,192,183],
[192,183,194,192,192,184,0,170,195,186],
[193,193,193,176,186,178,170,0,205,191],
[162,171,170,137,152,148,145,135,0,160],
[181,174,182,164,188,157,154,149,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,175,177,171,178,180,152,171,190],
[178,0,167,184,177,169,180,162,173,165],
[165,173,0,164,155,171,184,151,162,170],
[163,156,176,0,150,157,164,152,162,162],
[169,163,185,190,0,169,191,172,170,185],
[162,171,169,183,171,0,178,167,169,163],
[160,160,156,176,149,162,0,146,159,160],
[188,178,189,188,168,173,194,0,169,187],
[169,167,178,178,170,171,181,171,0,169],
[150,175,170,178,155,177,180,153,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,172,177,174,180,175,187,163,191],
[178,0,167,186,199,208,172,189,167,191],
[168,173,0,185,189,194,171,191,174,193],
[163,154,155,0,177,173,153,181,156,181],
[166,141,151,163,0,177,146,155,144,159],
[160,132,146,167,163,0,166,174,159,180],
[165,168,169,187,194,174,0,177,159,172],
[153,151,149,159,185,166,163,0,149,175],
[177,173,166,184,196,181,181,191,0,180],
[149,149,147,159,181,160,168,165,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,191,163,171,174,177,164,183,173],
[150,0,156,133,152,137,160,145,167,162],
[149,184,0,171,150,162,158,160,180,166],
[177,207,169,0,165,162,173,157,169,173],
[169,188,190,175,0,177,182,171,165,185],
[166,203,178,178,163,0,181,179,178,185],
[163,180,182,167,158,159,0,164,167,166],
[176,195,180,183,169,161,176,0,186,176],
[157,173,160,171,175,162,173,154,0,181],
[167,178,174,167,155,155,174,164,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,183,164,171,190,172,183,166,181],
[158,0,173,157,161,172,172,180,154,164],
[157,167,0,165,161,166,165,168,157,180],
[176,183,175,0,167,178,182,177,177,186],
[169,179,179,173,0,189,176,182,177,173],
[150,168,174,162,151,0,173,158,160,182],
[168,168,175,158,164,167,0,170,155,184],
[157,160,172,163,158,182,170,0,157,177],
[174,186,183,163,163,180,185,183,0,183],
[159,176,160,154,167,158,156,163,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,133,150,121,148,130,135,144,160],
[212,0,183,181,178,164,163,176,162,169],
[207,157,0,166,143,142,133,160,155,165],
[190,159,174,0,143,142,171,160,153,150],
[219,162,197,197,0,192,176,172,185,168],
[192,176,198,198,148,0,148,163,151,161],
[210,177,207,169,164,192,0,184,177,170],
[205,164,180,180,168,177,156,0,187,175],
[196,178,185,187,155,189,163,153,0,178],
[180,171,175,190,172,179,170,165,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,176,186,177,187,173,190,170,183],
[159,0,163,165,162,154,165,172,158,165],
[164,177,0,170,162,193,178,169,171,172],
[154,175,170,0,166,166,168,174,170,173],
[163,178,178,174,0,185,173,179,184,185],
[153,186,147,174,155,0,169,174,174,175],
[167,175,162,172,167,171,0,174,169,162],
[150,168,171,166,161,166,166,0,163,163],
[170,182,169,170,156,166,171,177,0,158],
[157,175,168,167,155,165,178,177,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,175,173,171,169,175,163,161],
[171,0,171,165,177,172,183,187,158,179],
[178,169,0,168,156,166,157,165,160,166],
[165,175,172,0,163,173,166,170,167,160],
[167,163,184,177,0,164,175,164,163,162],
[169,168,174,167,176,0,159,163,167,162],
[171,157,183,174,165,181,0,161,159,165],
[165,153,175,170,176,177,179,0,172,166],
[177,182,180,173,177,173,181,168,0,171],
[179,161,174,180,178,178,175,174,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,235,210,245,169,241,181,299,236],
[128,0,132,202,155,140,188,103,269,169],
[105,208,0,222,142,209,178,133,249,181],
[130,138,118,0,153,123,164,102,306,182],
[95,185,198,187,0,196,210,162,274,235],
[171,200,131,217,144,0,183,104,254,146],
[99,152,162,176,130,157,0,114,268,159],
[159,237,207,238,178,236,226,0,236,158],
[41,71,91,34,66,86,72,104,0,109],
[104,171,159,158,105,194,181,182,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,178,174,177,172,176,162,157,165],
[173,0,182,175,170,171,183,169,173,171],
[162,158,0,176,174,171,169,156,163,159],
[166,165,164,0,167,167,179,164,159,169],
[163,170,166,173,0,171,182,159,153,166],
[168,169,169,173,169,0,173,166,149,174],
[164,157,171,161,158,167,0,161,157,170],
[178,171,184,176,181,174,179,0,169,173],
[183,167,177,181,187,191,183,171,0,165],
[175,169,181,171,174,166,170,167,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,182,184,189,168,194,168,185,183],
[179,0,168,169,184,172,189,168,193,188],
[158,172,0,182,178,156,193,172,185,186],
[156,171,158,0,172,171,193,154,181,170],
[151,156,162,168,0,158,175,156,149,170],
[172,168,184,169,182,0,186,163,157,166],
[146,151,147,147,165,154,0,157,159,169],
[172,172,168,186,184,177,183,0,173,161],
[155,147,155,159,191,183,181,167,0,180],
[157,152,154,170,170,174,171,179,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,184,193,172,159,186,183,173,178],
[152,0,164,167,162,157,170,173,161,180],
[156,176,0,178,182,178,198,202,190,176],
[147,173,162,0,159,159,180,191,170,166],
[168,178,158,181,0,182,186,202,181,182],
[181,183,162,181,158,0,195,201,176,184],
[154,170,142,160,154,145,0,179,164,159],
[157,167,138,149,138,139,161,0,170,167],
[167,179,150,170,159,164,176,170,0,185],
[162,160,164,174,158,156,181,173,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,147,173,197,160,139,181,197,177],
[167,0,159,169,174,173,155,138,178,164],
[193,181,0,183,164,166,179,202,196,182],
[167,171,157,0,198,207,159,188,209,204],
[143,166,176,142,0,159,160,184,178,206],
[180,167,174,133,181,0,148,163,200,193],
[201,185,161,181,180,192,0,178,195,201],
[159,202,138,152,156,177,162,0,199,164],
[143,162,144,131,162,140,145,141,0,140],
[163,176,158,136,134,147,139,176,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,167,174,176,189,198,198,176,175],
[184,0,204,191,172,197,208,186,160,183],
[173,136,0,181,173,172,191,153,135,166],
[166,149,159,0,172,169,165,182,152,163],
[164,168,167,168,0,192,166,159,175,180],
[151,143,168,171,148,0,168,147,135,157],
[142,132,149,175,174,172,0,190,146,162],
[142,154,187,158,181,193,150,0,163,166],
[164,180,205,188,165,205,194,177,0,209],
[165,157,174,177,160,183,178,174,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,182,174,167,179,184,172,181,202],
[158,0,169,167,163,176,165,170,162,183],
[158,171,0,171,154,177,172,172,180,177],
[166,173,169,0,175,171,179,161,183,178],
[173,177,186,165,0,164,170,182,177,187],
[161,164,163,169,176,0,172,172,183,175],
[156,175,168,161,170,168,0,185,196,179],
[168,170,168,179,158,168,155,0,183,173],
[159,178,160,157,163,157,144,157,0,176],
[138,157,163,162,153,165,161,167,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,179,165,183,166,169,167,167,175],
[179,0,179,162,184,172,168,173,168,168],
[161,161,0,168,175,166,162,160,155,160],
[175,178,172,0,182,166,169,172,163,165],
[157,156,165,158,0,152,152,166,159,159],
[174,168,174,174,188,0,177,175,165,176],
[171,172,178,171,188,163,0,173,166,171],
[173,167,180,168,174,165,167,0,166,161],
[173,172,185,177,181,175,174,174,0,165],
[165,172,180,175,181,164,169,179,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,231,158,145,173,162,157,160,163],
[192,0,207,198,184,166,166,198,186,195],
[109,133,0,119,125,130,122,138,143,151],
[182,142,221,0,164,166,151,146,152,158],
[195,156,215,176,0,173,205,172,162,180],
[167,174,210,174,167,0,139,168,154,173],
[178,174,218,189,135,201,0,171,188,171],
[183,142,202,194,168,172,169,0,149,146],
[180,154,197,188,178,186,152,191,0,176],
[177,145,189,182,160,167,169,194,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,134,161,156,165,181,154,144,172],
[152,0,131,136,137,157,147,157,151,164],
[206,209,0,170,177,174,184,190,176,197],
[179,204,170,0,174,165,179,170,163,159],
[184,203,163,166,0,192,167,189,170,191],
[175,183,166,175,148,0,143,182,154,163],
[159,193,156,161,173,197,0,167,190,169],
[186,183,150,170,151,158,173,0,165,156],
[196,189,164,177,170,186,150,175,0,175],
[168,176,143,181,149,177,171,184,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,178,163,172,160,168,164,149,182],
[159,0,170,156,160,145,164,155,146,151],
[162,170,0,156,151,150,151,162,140,172],
[177,184,184,0,179,159,160,164,163,183],
[168,180,189,161,0,159,171,175,170,165],
[180,195,190,181,181,0,187,179,175,167],
[172,176,189,180,169,153,0,162,158,164],
[176,185,178,176,165,161,178,0,161,170],
[191,194,200,177,170,165,182,179,0,187],
[158,189,168,157,175,173,176,170,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,190,181,205,224,213,175,186,172],
[190,0,166,219,190,191,226,227,163,159],
[150,174,0,199,135,195,193,154,154,130],
[159,121,141,0,144,194,155,146,146,122],
[135,150,205,196,0,232,177,187,150,164],
[116,149,145,146,108,0,173,139,149,165],
[127,114,147,185,163,167,0,155,107,127],
[165,113,186,194,153,201,185,0,136,150],
[154,177,186,194,190,191,233,204,0,187],
[168,181,210,218,176,175,213,190,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,193,165,172,145,167,167,169,198],
[159,0,165,156,136,137,136,161,123,137],
[147,175,0,161,144,151,167,116,140,141],
[175,184,179,0,167,158,178,155,164,190],
[168,204,196,173,0,146,208,176,164,171],
[195,203,189,182,194,0,175,177,169,173],
[173,204,173,162,132,165,0,161,126,171],
[173,179,224,185,164,163,179,0,170,193],
[171,217,200,176,176,171,214,170,0,175],
[142,203,199,150,169,167,169,147,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,130,152,113,149,148,127,141,139],
[163,0,146,150,140,162,143,143,145,179],
[210,194,0,210,167,154,177,189,174,181],
[188,190,130,0,135,153,160,162,139,125],
[227,200,173,205,0,213,163,197,168,175],
[191,178,186,187,127,0,165,170,162,163],
[192,197,163,180,177,175,0,169,152,141],
[213,197,151,178,143,170,171,0,164,155],
[199,195,166,201,172,178,188,176,0,175],
[201,161,159,215,165,177,199,185,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,170,170,168,167,180,174,171,179],
[189,0,173,167,177,173,180,177,177,166],
[170,167,0,172,161,168,159,166,169,169],
[170,173,168,0,182,172,180,174,185,176],
[172,163,179,158,0,162,177,170,175,178],
[173,167,172,168,178,0,174,168,195,170],
[160,160,181,160,163,166,0,174,167,163],
[166,163,174,166,170,172,166,0,167,175],
[169,163,171,155,165,145,173,173,0,180],
[161,174,171,164,162,170,177,165,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,169,165,167,179,176,190,178,171],
[163,0,180,153,179,168,165,175,164,166],
[171,160,0,149,170,175,172,179,171,161],
[175,187,191,0,187,179,178,196,177,162],
[173,161,170,153,0,163,173,165,173,161],
[161,172,165,161,177,0,154,177,174,159],
[164,175,168,162,167,186,0,178,164,166],
[150,165,161,144,175,163,162,0,174,160],
[162,176,169,163,167,166,176,166,0,166],
[169,174,179,178,179,181,174,180,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,167,174,174,171,163,177,191,178],
[163,0,168,170,170,166,173,163,183,165],
[173,172,0,169,175,168,171,181,183,174],
[166,170,171,0,176,165,174,176,186,182],
[166,170,165,164,0,169,161,182,180,168],
[169,174,172,175,171,0,167,185,175,168],
[177,167,169,166,179,173,0,181,178,169],
[163,177,159,164,158,155,159,0,167,160],
[149,157,157,154,160,165,162,173,0,162],
[162,175,166,158,172,172,171,180,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,173,164,164,162,169,172,166],
[173,0,163,166,175,170,159,175,164,169],
[172,177,0,163,161,170,165,169,176,160],
[167,174,177,0,176,172,171,182,183,170],
[176,165,179,164,0,177,160,179,177,170],
[176,170,170,168,163,0,159,173,168,163],
[178,181,175,169,180,181,0,184,177,176],
[171,165,171,158,161,167,156,0,158,162],
[168,176,164,157,163,172,163,182,0,162],
[174,171,180,170,170,177,164,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,147,142,168,129,150,132,160,167],
[192,0,158,174,173,165,151,171,178,179],
[193,182,0,163,211,154,180,144,178,195],
[198,166,177,0,181,160,153,169,174,192],
[172,167,129,159,0,141,140,126,159,178],
[211,175,186,180,199,0,178,168,178,217],
[190,189,160,187,200,162,0,160,199,189],
[208,169,196,171,214,172,180,0,169,189],
[180,162,162,166,181,162,141,171,0,159],
[173,161,145,148,162,123,151,151,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,160,154,167,147,160,160,151,192],
[145,0,132,166,150,153,165,155,157,177],
[180,208,0,192,214,206,196,186,156,190],
[186,174,148,0,166,189,170,167,140,179],
[173,190,126,174,0,169,179,192,171,199],
[193,187,134,151,171,0,198,167,193,194],
[180,175,144,170,161,142,0,151,168,207],
[180,185,154,173,148,173,189,0,174,205],
[189,183,184,200,169,147,172,166,0,221],
[148,163,150,161,141,146,133,135,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,165,151,159,160,167,161,154],
[171,0,169,183,166,180,160,167,183,161],
[178,171,0,176,170,188,164,177,166,168],
[175,157,164,0,154,172,164,176,159,159],
[189,174,170,186,0,178,174,171,188,158],
[181,160,152,168,162,0,160,154,154,153],
[180,180,176,176,166,180,0,170,171,167],
[173,173,163,164,169,186,170,0,172,170],
[179,157,174,181,152,186,169,168,0,162],
[186,179,172,181,182,187,173,170,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,159,169,168,142,133,127,141,160],
[198,0,205,178,173,164,152,146,135,159],
[181,135,0,145,174,179,154,130,146,154],
[171,162,195,0,195,154,141,173,161,169],
[172,167,166,145,0,135,167,154,165,172],
[198,176,161,186,205,0,177,183,200,187],
[207,188,186,199,173,163,0,174,173,182],
[213,194,210,167,186,157,166,0,196,198],
[199,205,194,179,175,140,167,144,0,167],
[180,181,186,171,168,153,158,142,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,198,167,186,177,205,166,236,192],
[171,0,233,207,226,198,245,166,204,216],
[142,107,0,143,161,176,152,155,162,157],
[173,133,197,0,184,194,227,204,202,178],
[154,114,179,156,0,181,161,141,164,195],
[163,142,164,146,159,0,152,153,196,175],
[135,95,188,113,179,188,0,98,187,161],
[174,174,185,136,199,187,242,0,205,172],
[104,136,178,138,176,144,153,135,0,170],
[148,124,183,162,145,165,179,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,177,163,162,147,134,130,141,175],
[211,0,187,162,183,179,148,192,177,199],
[163,153,0,128,149,153,143,155,129,186],
[177,178,212,0,162,186,181,190,160,191],
[178,157,191,178,0,188,154,178,173,197],
[193,161,187,154,152,0,154,176,171,179],
[206,192,197,159,186,186,0,162,190,208],
[210,148,185,150,162,164,178,0,168,182],
[199,163,211,180,167,169,150,172,0,182],
[165,141,154,149,143,161,132,158,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,169,176,160,167,173,166,160,172],
[172,0,180,164,176,173,172,170,181,170],
[171,160,0,166,166,158,153,173,174,170],
[164,176,174,0,178,173,164,182,168,167],
[180,164,174,162,0,170,165,173,159,168],
[173,167,182,167,170,0,150,163,161,169],
[167,168,187,176,175,190,0,180,175,169],
[174,170,167,158,167,177,160,0,170,174],
[180,159,166,172,181,179,165,170,0,175],
[168,170,170,173,172,171,171,166,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,148,207,171,205,190,170,158,181],
[156,0,166,163,161,165,175,148,125,180],
[192,174,0,163,175,170,170,143,154,158],
[133,177,177,0,172,204,194,164,139,165],
[169,179,165,168,0,191,154,171,167,182],
[135,175,170,136,149,0,158,128,170,114],
[150,165,170,146,186,182,0,137,163,148],
[170,192,197,176,169,212,203,0,178,189],
[182,215,186,201,173,170,177,162,0,163],
[159,160,182,175,158,226,192,151,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,183,191,160,168,171,183,172,161],
[160,0,166,172,162,153,167,184,174,151],
[157,174,0,182,160,153,158,167,181,164],
[149,168,158,0,160,151,169,170,169,151],
[180,178,180,180,0,157,165,159,173,172],
[172,187,187,189,183,0,176,182,182,168],
[169,173,182,171,175,164,0,184,186,174],
[157,156,173,170,181,158,156,0,179,162],
[168,166,159,171,167,158,154,161,0,141],
[179,189,176,189,168,172,166,178,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,207,155,143,163,146,138,177,194],
[117,0,166,128,117,158,135,133,163,155],
[133,174,0,107,95,147,132,90,123,142],
[185,212,233,0,158,171,181,159,178,168],
[197,223,245,182,0,190,166,176,214,197],
[177,182,193,169,150,0,154,103,195,153],
[194,205,208,159,174,186,0,170,159,150],
[202,207,250,181,164,237,170,0,200,198],
[163,177,217,162,126,145,181,140,0,156],
[146,185,198,172,143,187,190,142,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,177,175,160,208,193,166,192,167],
[169,0,164,191,177,220,207,184,196,175],
[163,176,0,172,148,193,171,171,217,169],
[165,149,168,0,161,193,172,162,173,163],
[180,163,192,179,0,216,204,180,174,196],
[132,120,147,147,124,0,152,128,165,142],
[147,133,169,168,136,188,0,172,201,171],
[174,156,169,178,160,212,168,0,177,163],
[148,144,123,167,166,175,139,163,0,157],
[173,165,171,177,144,198,169,177,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,181,172,168,166,166,168,173],
[170,0,181,173,167,185,161,165,163,169],
[164,159,0,167,169,177,165,158,182,174],
[159,167,173,0,180,183,155,165,176,168],
[168,173,171,160,0,176,171,152,170,172],
[172,155,163,157,164,0,150,137,156,174],
[174,179,175,185,169,190,0,178,177,179],
[174,175,182,175,188,203,162,0,172,193],
[172,177,158,164,170,184,163,168,0,190],
[167,171,166,172,168,166,161,147,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,194,181,171,186,204,164,176],
[168,0,197,185,188,163,192,205,166,156],
[164,143,0,175,169,141,174,167,128,136],
[146,155,165,0,178,150,154,171,138,143],
[159,152,171,162,0,137,152,167,139,143],
[169,177,199,190,203,0,179,192,162,181],
[154,148,166,186,188,161,0,162,147,166],
[136,135,173,169,173,148,178,0,152,143],
[176,174,212,202,201,178,193,188,0,168],
[164,184,204,197,197,159,174,197,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,175,209,160,166,179,167,158],
[170,0,163,178,195,184,173,181,176,177],
[170,177,0,182,196,177,171,178,184,171],
[165,162,158,0,188,183,155,172,169,171],
[131,145,144,152,0,143,129,146,147,147],
[180,156,163,157,197,0,169,169,164,165],
[174,167,169,185,211,171,0,173,185,174],
[161,159,162,168,194,171,167,0,163,168],
[173,164,156,171,193,176,155,177,0,164],
[182,163,169,169,193,175,166,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,150,143,185,171,192,169,169,168],
[183,0,178,184,191,167,169,175,164,185],
[190,162,0,165,174,182,183,175,169,173],
[197,156,175,0,194,184,199,183,178,157],
[155,149,166,146,0,170,166,150,184,163],
[169,173,158,156,170,0,173,183,140,169],
[148,171,157,141,174,167,0,184,179,183],
[171,165,165,157,190,157,156,0,160,172],
[171,176,171,162,156,200,161,180,0,169],
[172,155,167,183,177,171,157,168,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,178,160,172,180,178,174,167,191],
[146,0,161,137,149,161,160,158,167,173],
[162,179,0,163,160,156,165,157,163,174],
[180,203,177,0,164,178,194,178,192,194],
[168,191,180,176,0,160,176,171,167,201],
[160,179,184,162,180,0,189,167,166,187],
[162,180,175,146,164,151,0,155,165,185],
[166,182,183,162,169,173,185,0,175,185],
[173,173,177,148,173,174,175,165,0,181],
[149,167,166,146,139,153,155,155,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,162,177,181,170,174,181,183,199],
[166,0,175,167,175,157,195,181,182,188],
[178,165,0,158,195,159,152,187,185,186],
[163,173,182,0,160,182,188,170,184,189],
[159,165,145,180,0,159,174,180,183,179],
[170,183,181,158,181,0,174,171,186,192],
[166,145,188,152,166,166,0,174,167,181],
[159,159,153,170,160,169,166,0,180,187],
[157,158,155,156,157,154,173,160,0,179],
[141,152,154,151,161,148,159,153,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,181,168,161,178,150,164,156,147],
[175,0,179,164,169,176,171,187,166,154],
[159,161,0,147,160,158,158,165,162,150],
[172,176,193,0,152,183,165,174,159,158],
[179,171,180,188,0,179,153,177,144,170],
[162,164,182,157,161,0,141,175,143,150],
[190,169,182,175,187,199,0,197,185,164],
[176,153,175,166,163,165,143,0,167,150],
[184,174,178,181,196,197,155,173,0,169],
[193,186,190,182,170,190,176,190,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,164,167,170,166,160,152,196,131],
[142,0,144,141,154,136,128,139,157,143],
[176,196,0,167,189,173,154,186,181,187],
[173,199,173,0,176,161,167,173,185,161],
[170,186,151,164,0,152,171,182,175,186],
[174,204,167,179,188,0,177,195,205,179],
[180,212,186,173,169,163,0,173,171,161],
[188,201,154,167,158,145,167,0,177,122],
[144,183,159,155,165,135,169,163,0,149],
[209,197,153,179,154,161,179,218,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,168,217,264,175,223,175,217,248],
[122,0,91,155,188,130,148,120,113,127],
[172,249,0,242,274,148,226,154,185,226],
[123,185,98,0,176,158,198,112,142,199],
[76,152,66,164,0,107,180,86,94,135],
[165,210,192,182,233,0,194,182,175,180],
[117,192,114,142,160,146,0,166,113,138],
[165,220,186,228,254,158,174,0,168,178],
[123,227,155,198,246,165,227,172,0,160],
[92,213,114,141,205,160,202,162,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,171,165,140,144,138,171,108,162],
[177,0,193,165,147,157,180,163,144,147],
[169,147,0,148,136,143,149,160,117,179],
[175,175,192,0,161,170,183,177,171,185],
[200,193,204,179,0,141,158,196,157,172],
[196,183,197,170,199,0,153,193,177,188],
[202,160,191,157,182,187,0,179,155,178],
[169,177,180,163,144,147,161,0,152,164],
[232,196,223,169,183,163,185,188,0,196],
[178,193,161,155,168,152,162,176,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,170,148,155,174,134,154,151,153],
[188,0,177,181,180,185,159,189,163,171],
[170,163,0,162,169,181,157,192,158,159],
[192,159,178,0,193,178,160,169,166,167],
[185,160,171,147,0,172,162,166,147,158],
[166,155,159,162,168,0,144,167,173,168],
[206,181,183,180,178,196,0,180,195,168],
[186,151,148,171,174,173,160,0,169,165],
[189,177,182,174,193,167,145,171,0,171],
[187,169,181,173,182,172,172,175,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,204,175,177,194,182,194,157,174],
[167,0,211,185,206,207,195,188,181,183],
[136,129,0,166,158,154,133,141,140,131],
[165,155,174,0,149,187,148,178,161,163],
[163,134,182,191,0,180,180,156,159,154],
[146,133,186,153,160,0,152,164,154,123],
[158,145,207,192,160,188,0,156,167,165],
[146,152,199,162,184,176,184,0,180,167],
[183,159,200,179,181,186,173,160,0,165],
[166,157,209,177,186,217,175,173,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,155,158,155,160,138,147,156,129],
[182,0,166,180,169,174,146,155,167,177],
[185,174,0,188,167,192,184,165,174,177],
[182,160,152,0,159,170,178,169,163,148],
[185,171,173,181,0,177,169,169,170,155],
[180,166,148,170,163,0,162,147,162,164],
[202,194,156,162,171,178,0,183,183,171],
[193,185,175,171,171,193,157,0,183,171],
[184,173,166,177,170,178,157,157,0,183],
[211,163,163,192,185,176,169,169,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,155,176,167,175,154,206,207,165],
[184,0,168,183,187,190,189,200,187,179],
[185,172,0,195,188,206,195,196,196,160],
[164,157,145,0,160,175,185,196,188,147],
[173,153,152,180,0,191,181,179,194,144],
[165,150,134,165,149,0,169,179,175,152],
[186,151,145,155,159,171,0,192,165,178],
[134,140,144,144,161,161,148,0,168,158],
[133,153,144,152,146,165,175,172,0,144],
[175,161,180,193,196,188,162,182,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,172,151,176,164,164,176,176,166],
[164,0,176,156,121,166,150,155,162,134],
[168,164,0,141,159,170,168,164,165,157],
[189,184,199,0,156,174,187,202,162,191],
[164,219,181,184,0,170,182,188,156,176],
[176,174,170,166,170,0,196,171,144,164],
[176,190,172,153,158,144,0,190,161,179],
[164,185,176,138,152,169,150,0,153,145],
[164,178,175,178,184,196,179,187,0,168],
[174,206,183,149,164,176,161,195,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,160,166,159,179,164,154,152,172],
[183,0,172,172,157,179,172,164,146,165],
[180,168,0,166,160,178,163,169,169,179],
[174,168,174,0,158,175,172,165,163,162],
[181,183,180,182,0,185,177,178,168,177],
[161,161,162,165,155,0,166,158,164,163],
[176,168,177,168,163,174,0,164,163,182],
[186,176,171,175,162,182,176,0,171,179],
[188,194,171,177,172,176,177,169,0,192],
[168,175,161,178,163,177,158,161,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,177,185,175,175,174,167,171,196],
[171,0,183,172,187,181,173,177,170,183],
[163,157,0,180,179,155,161,143,163,151],
[155,168,160,0,170,149,158,149,159,159],
[165,153,161,170,0,155,172,161,139,143],
[165,159,185,191,185,0,169,153,171,152],
[166,167,179,182,168,171,0,163,166,168],
[173,163,197,191,179,187,177,0,172,166],
[169,170,177,181,201,169,174,168,0,164],
[144,157,189,181,197,188,172,174,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,163,160,157,178,160,162,159,137],
[188,0,154,158,159,169,175,175,177,161],
[177,186,0,160,141,180,165,152,168,167],
[180,182,180,0,162,184,171,177,167,160],
[183,181,199,178,0,164,178,170,178,152],
[162,171,160,156,176,0,176,160,142,154],
[180,165,175,169,162,164,0,166,163,149],
[178,165,188,163,170,180,174,0,166,152],
[181,163,172,173,162,198,177,174,0,171],
[203,179,173,180,188,186,191,188,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,185,162,172,194,182,170,177,176],
[157,0,170,154,170,181,159,171,159,163],
[155,170,0,159,153,182,180,171,163,164],
[178,186,181,0,185,204,188,181,176,170],
[168,170,187,155,0,186,187,179,178,166],
[146,159,158,136,154,0,151,161,150,130],
[158,181,160,152,153,189,0,185,179,178],
[170,169,169,159,161,179,155,0,162,150],
[163,181,177,164,162,190,161,178,0,172],
[164,177,176,170,174,210,162,190,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,172,179,141,162,184,195,174,153],
[157,0,168,162,121,159,156,198,156,168],
[168,172,0,112,128,183,140,160,170,189],
[161,178,228,0,174,198,162,190,138,169],
[199,219,212,166,0,200,198,199,184,198],
[178,181,157,142,140,0,182,180,168,158],
[156,184,200,178,142,158,0,177,154,170],
[145,142,180,150,141,160,163,0,152,170],
[166,184,170,202,156,172,186,188,0,188],
[187,172,151,171,142,182,170,170,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,168,172,167,151,155,144,160],
[169,0,152,181,166,170,160,164,149,156],
[166,188,0,186,170,193,169,170,170,172],
[172,159,154,0,155,170,148,163,152,155],
[168,174,170,185,0,171,149,158,150,152],
[173,170,147,170,169,0,157,152,145,155],
[189,180,171,192,191,183,0,177,169,176],
[185,176,170,177,182,188,163,0,172,176],
[196,191,170,188,190,195,171,168,0,176],
[180,184,168,185,188,185,164,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,154,157,181,168,178,155,140],
[172,0,189,186,198,166,185,176,184,179],
[166,151,0,173,188,176,160,173,162,153],
[186,154,167,0,170,187,179,188,181,165],
[183,142,152,170,0,175,163,149,143,141],
[159,174,164,153,165,0,185,159,153,146],
[172,155,180,161,177,155,0,175,188,161],
[162,164,167,152,191,181,165,0,151,159],
[185,156,178,159,197,187,152,189,0,148],
[200,161,187,175,199,194,179,181,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,149,138,156,167,186,155,136,175],
[187,0,165,166,167,163,164,180,168,158],
[191,175,0,164,185,181,193,155,156,189],
[202,174,176,0,171,191,192,173,165,177],
[184,173,155,169,0,173,166,173,163,151],
[173,177,159,149,167,0,175,148,157,159],
[154,176,147,148,174,165,0,157,161,155],
[185,160,185,167,167,192,183,0,170,182],
[204,172,184,175,177,183,179,170,0,181],
[165,182,151,163,189,181,185,158,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,171,172,175,161,166,173,180],
[173,0,187,159,169,182,160,179,172,174],
[172,153,0,160,173,150,154,159,159,161],
[169,181,180,0,167,160,148,174,178,176],
[168,171,167,173,0,155,157,181,159,168],
[165,158,190,180,185,0,174,176,186,176],
[179,180,186,192,183,166,0,185,171,196],
[174,161,181,166,159,164,155,0,182,162],
[167,168,181,162,181,154,169,158,0,168],
[160,166,179,164,172,164,144,178,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,163,163,149,141,178,143,116,148],
[187,0,195,184,177,153,192,191,160,176],
[177,145,0,179,159,156,178,161,156,152],
[177,156,161,0,170,163,181,164,145,132],
[191,163,181,170,0,147,170,166,150,137],
[199,187,184,177,193,0,204,167,177,178],
[162,148,162,159,170,136,0,131,127,139],
[197,149,179,176,174,173,209,0,159,156],
[224,180,184,195,190,163,213,181,0,157],
[192,164,188,208,203,162,201,184,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,154,171,158,170,183,159,173,166],
[177,0,170,175,179,182,195,151,174,174],
[186,170,0,176,163,174,190,166,191,179],
[169,165,164,0,170,172,183,154,189,173],
[182,161,177,170,0,185,194,171,180,171],
[170,158,166,168,155,0,178,140,175,159],
[157,145,150,157,146,162,0,152,158,150],
[181,189,174,186,169,200,188,0,181,174],
[167,166,149,151,160,165,182,159,0,177],
[174,166,161,167,169,181,190,166,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,108,160,134,172,139,145,180,102],
[252,0,148,188,181,217,193,196,202,177],
[232,192,0,228,136,213,153,188,207,214],
[180,152,112,0,120,143,91,125,125,190],
[206,159,204,220,0,198,190,151,155,220],
[168,123,127,197,142,0,132,130,120,159],
[201,147,187,249,150,208,0,138,172,177],
[195,144,152,215,189,210,202,0,163,185],
[160,138,133,215,185,220,168,177,0,180],
[238,163,126,150,120,181,163,155,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,158,146,199,187,112,238,159,139],
[139,0,143,176,180,164,112,239,154,142],
[182,197,0,179,195,222,141,246,181,181],
[194,164,161,0,169,162,148,235,159,162],
[141,160,145,171,0,198,99,191,122,130],
[153,176,118,178,142,0,109,214,131,134],
[228,228,199,192,241,231,0,288,229,169],
[102,101,94,105,149,126,52,0,107,100],
[181,186,159,181,218,209,111,233,0,155],
[201,198,159,178,210,206,171,240,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,189,173,165,181,182,172,183,178],
[147,0,165,156,169,158,167,154,166,168],
[151,175,0,157,161,168,173,158,164,176],
[167,184,183,0,182,164,179,163,190,180],
[175,171,179,158,0,159,166,160,167,178],
[159,182,172,176,181,0,181,170,166,184],
[158,173,167,161,174,159,0,163,158,159],
[168,186,182,177,180,170,177,0,186,192],
[157,174,176,150,173,174,182,154,0,176],
[162,172,164,160,162,156,181,148,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,180,168,157,170,181,166,186,171],
[150,0,147,154,149,156,166,168,148,158],
[160,193,0,171,170,188,179,178,184,188],
[172,186,169,0,180,164,180,172,170,166],
[183,191,170,160,0,175,182,165,172,170],
[170,184,152,176,165,0,147,182,162,154],
[159,174,161,160,158,193,0,163,147,155],
[174,172,162,168,175,158,177,0,177,174],
[154,192,156,170,168,178,193,163,0,163],
[169,182,152,174,170,186,185,166,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,161,190,204,174,148,181,143,177],
[162,0,149,174,192,181,167,171,138,176],
[179,191,0,200,198,185,170,201,171,183],
[150,166,140,0,135,147,136,160,111,159],
[136,148,142,205,0,162,138,153,139,182],
[166,159,155,193,178,0,142,172,134,180],
[192,173,170,204,202,198,0,194,171,192],
[159,169,139,180,187,168,146,0,139,175],
[197,202,169,229,201,206,169,201,0,192],
[163,164,157,181,158,160,148,165,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,144,162,175,166,169,160,174,211],
[186,0,173,175,188,172,196,181,165,192],
[196,167,0,176,192,169,204,187,165,205],
[178,165,164,0,182,178,174,166,175,183],
[165,152,148,158,0,179,168,173,161,192],
[174,168,171,162,161,0,185,179,179,209],
[171,144,136,166,172,155,0,164,171,182],
[180,159,153,174,167,161,176,0,153,193],
[166,175,175,165,179,161,169,187,0,190],
[129,148,135,157,148,131,158,147,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,163,169,169,177,159,168,166,186],
[164,0,159,177,172,168,164,176,155,176],
[177,181,0,182,163,178,159,185,174,205],
[171,163,158,0,165,154,144,167,155,172],
[171,168,177,175,0,160,155,180,166,182],
[163,172,162,186,180,0,153,169,165,179],
[181,176,181,196,185,187,0,189,164,199],
[172,164,155,173,160,171,151,0,158,175],
[174,185,166,185,174,175,176,182,0,188],
[154,164,135,168,158,161,141,165,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,149,186,178,152,176,149,166,176],
[181,0,161,174,158,165,170,185,174,177],
[191,179,0,195,159,166,154,174,156,181],
[154,166,145,0,154,158,145,152,141,166],
[162,182,181,186,0,156,169,160,183,180],
[188,175,174,182,184,0,160,168,157,174],
[164,170,186,195,171,180,0,171,173,193],
[191,155,166,188,180,172,169,0,172,157],
[174,166,184,199,157,183,167,168,0,172],
[164,163,159,174,160,166,147,183,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,180,160,180,164,175,176,188],
[165,0,172,176,156,168,158,169,159,171],
[162,168,0,178,142,170,158,166,153,166],
[160,164,162,0,154,170,154,160,154,170],
[180,184,198,186,0,192,170,176,164,180],
[160,172,170,170,148,0,157,176,166,167],
[176,182,182,186,170,183,0,173,174,171],
[165,171,174,180,164,164,167,0,175,169],
[164,181,187,186,176,174,166,165,0,189],
[152,169,174,170,160,173,169,171,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,98,239,165,98,215,239,165,24],
[101,0,74,266,266,24,316,266,141,101],
[242,266,0,266,266,165,316,266,141,266],
[101,74,74,0,242,74,316,340,141,101],
[175,74,74,98,0,74,215,199,0,175],
[242,316,175,266,266,0,316,340,242,101],
[125,24,24,24,125,24,0,125,24,125],
[101,74,74,0,141,0,215,0,141,101],
[175,199,199,199,340,98,316,199,0,199],
[316,239,74,239,165,239,215,239,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,173,167,168,184,180,161,172,166],
[156,0,169,179,158,163,154,173,170,171],
[167,171,0,178,161,168,165,162,166,167],
[173,161,162,0,153,163,150,155,161,161],
[172,182,179,187,0,188,162,186,183,187],
[156,177,172,177,152,0,147,159,154,178],
[160,186,175,190,178,193,0,176,165,182],
[179,167,178,185,154,181,164,0,172,164],
[168,170,174,179,157,186,175,168,0,179],
[174,169,173,179,153,162,158,176,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,183,184,177,183,166,168,195,182],
[148,0,147,170,151,178,172,165,174,166],
[157,193,0,160,168,168,150,154,182,158],
[156,170,180,0,158,171,184,165,184,159],
[163,189,172,182,0,182,175,168,179,156],
[157,162,172,169,158,0,161,137,163,159],
[174,168,190,156,165,179,0,162,159,150],
[172,175,186,175,172,203,178,0,170,173],
[145,166,158,156,161,177,181,170,0,155],
[158,174,182,181,184,181,190,167,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,160,173,171,169,179,194,172],
[169,0,175,171,181,159,161,185,209,172],
[167,165,0,173,183,160,165,183,206,192],
[180,169,167,0,184,162,161,175,201,185],
[167,159,157,156,0,145,175,182,191,177],
[169,181,180,178,195,0,177,168,217,182],
[171,179,175,179,165,163,0,179,202,177],
[161,155,157,165,158,172,161,0,186,163],
[146,131,134,139,149,123,138,154,0,151],
[168,168,148,155,163,158,163,177,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,188,164,173,171,166,161,159,165],
[191,0,200,166,181,180,163,175,166,168],
[152,140,0,146,161,161,153,147,142,138],
[176,174,194,0,188,185,157,167,164,163],
[167,159,179,152,0,175,156,144,159,164],
[169,160,179,155,165,0,157,152,159,156],
[174,177,187,183,184,183,0,161,161,159],
[179,165,193,173,196,188,179,0,165,178],
[181,174,198,176,181,181,179,175,0,170],
[175,172,202,177,176,184,181,162,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,173,180,186,170,167,173,169,163],
[165,0,164,170,183,168,176,171,178,168],
[167,176,0,169,173,167,163,169,168,164],
[160,170,171,0,167,166,179,163,156,174],
[154,157,167,173,0,172,162,168,169,160],
[170,172,173,174,168,0,169,163,165,171],
[173,164,177,161,178,171,0,168,169,183],
[167,169,171,177,172,177,172,0,168,171],
[171,162,172,184,171,175,171,172,0,168],
[177,172,176,166,180,169,157,169,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,164,154,169,171,173,164,168],
[181,0,168,188,185,179,184,167,187,184],
[179,172,0,172,179,163,187,170,168,174],
[176,152,168,0,172,173,164,171,166,172],
[186,155,161,168,0,176,179,180,179,174],
[171,161,177,167,164,0,178,165,164,155],
[169,156,153,176,161,162,0,165,164,164],
[167,173,170,169,160,175,175,0,174,169],
[176,153,172,174,161,176,176,166,0,164],
[172,156,166,168,166,185,176,171,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,158,189,158,171,156,151,171,162],
[170,0,174,192,166,172,167,176,180,171],
[182,166,0,177,176,171,165,168,170,162],
[151,148,163,0,154,158,158,162,162,154],
[182,174,164,186,0,168,160,179,176,175],
[169,168,169,182,172,0,160,153,173,173],
[184,173,175,182,180,180,0,179,186,170],
[189,164,172,178,161,187,161,0,181,182],
[169,160,170,178,164,167,154,159,0,159],
[178,169,178,186,165,167,170,158,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,165,184,170,159,168,156,163,178],
[177,0,174,184,160,173,162,165,163,179],
[175,166,0,195,182,170,173,170,163,171],
[156,156,145,0,151,144,166,159,158,168],
[170,180,158,189,0,157,168,172,176,164],
[181,167,170,196,183,0,189,170,187,180],
[172,178,167,174,172,151,0,158,155,175],
[184,175,170,181,168,170,182,0,173,181],
[177,177,177,182,164,153,185,167,0,180],
[162,161,169,172,176,160,165,159,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,188,161,176,163,161,169,173,191],
[169,0,165,155,173,145,154,167,156,159],
[152,175,0,163,176,156,168,168,167,180],
[179,185,177,0,184,160,166,169,182,174],
[164,167,164,156,0,173,170,165,163,164],
[177,195,184,180,167,0,173,178,167,175],
[179,186,172,174,170,167,0,169,173,181],
[171,173,172,171,175,162,171,0,172,182],
[167,184,173,158,177,173,167,168,0,168],
[149,181,160,166,176,165,159,158,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,185,171,163,173,162,180,184],
[170,0,178,179,166,166,162,167,174,165],
[164,162,0,187,174,155,166,146,172,161],
[155,161,153,0,158,145,156,143,163,159],
[169,174,166,182,0,166,172,166,166,168],
[177,174,185,195,174,0,177,165,179,180],
[167,178,174,184,168,163,0,174,163,163],
[178,173,194,197,174,175,166,0,188,181],
[160,166,168,177,174,161,177,152,0,174],
[156,175,179,181,172,160,177,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,183,183,245,144,232,196,239,182],
[220,0,160,256,181,160,226,187,170,193],
[157,180,0,157,161,138,217,241,174,208],
[157,84,183,0,185,114,202,247,204,187],
[95,159,179,155,0,233,232,224,105,182],
[196,180,202,226,107,0,187,217,196,202],
[108,114,123,138,108,153,0,173,158,131],
[144,153,99,93,116,123,167,0,125,156],
[101,170,166,136,235,144,182,215,0,169],
[158,147,132,153,158,138,209,184,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,188,158,190,176,176,181,190,170],
[158,0,174,141,166,172,168,171,173,160],
[152,166,0,151,172,174,170,186,175,175],
[182,199,189,0,195,199,194,177,187,164],
[150,174,168,145,0,165,174,178,167,158],
[164,168,166,141,175,0,168,177,174,166],
[164,172,170,146,166,172,0,177,178,163],
[159,169,154,163,162,163,163,0,176,172],
[150,167,165,153,173,166,162,164,0,166],
[170,180,165,176,182,174,177,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,142,151,134,136,123,132,134,129],
[227,0,166,193,165,120,149,216,178,188],
[198,174,0,162,155,184,158,164,129,180],
[189,147,178,0,193,152,138,186,193,228],
[206,175,185,147,0,163,199,212,191,200],
[204,220,156,188,177,0,167,197,207,198],
[217,191,182,202,141,173,0,192,180,203],
[208,124,176,154,128,143,148,0,112,180],
[206,162,211,147,149,133,160,228,0,199],
[211,152,160,112,140,142,137,160,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,162,165,167,166,173,154,162,151],
[181,0,167,182,172,166,159,174,168,161],
[178,173,0,161,174,169,170,160,163,153],
[175,158,179,0,164,167,163,173,167,156],
[173,168,166,176,0,178,179,167,158,165],
[174,174,171,173,162,0,184,180,171,171],
[167,181,170,177,161,156,0,172,164,168],
[186,166,180,167,173,160,168,0,151,161],
[178,172,177,173,182,169,176,189,0,168],
[189,179,187,184,175,169,172,179,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,182,179,135,162,149,155,120],
[176,0,156,136,158,137,188,176,181,169],
[175,184,0,144,176,187,162,150,174,144],
[158,204,196,0,172,181,155,186,170,147],
[161,182,164,168,0,171,160,119,202,172],
[205,203,153,159,169,0,178,151,144,131],
[178,152,178,185,180,162,0,142,161,136],
[191,164,190,154,221,189,198,0,203,206],
[185,159,166,170,138,196,179,137,0,165],
[220,171,196,193,168,209,204,134,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,176,159,160,155,145,186,147,184],
[182,0,174,179,163,155,178,203,173,169],
[164,166,0,158,147,148,161,172,152,170],
[181,161,182,0,152,162,148,162,165,173],
[180,177,193,188,0,170,185,203,166,199],
[185,185,192,178,170,0,173,180,191,198],
[195,162,179,192,155,167,0,182,155,177],
[154,137,168,178,137,160,158,0,175,175],
[193,167,188,175,174,149,185,165,0,197],
[156,171,170,167,141,142,163,165,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,169,173,167,159,169,173,168,173],
[164,0,165,164,169,140,163,153,166,162],
[171,175,0,171,179,146,164,155,167,165],
[167,176,169,0,179,163,159,164,178,173],
[173,171,161,161,0,160,161,169,170,164],
[181,200,194,177,180,0,170,174,177,177],
[171,177,176,181,179,170,0,167,184,177],
[167,187,185,176,171,166,173,0,169,182],
[172,174,173,162,170,163,156,171,0,173],
[167,178,175,167,176,163,163,158,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,159,167,163,170,141,172,175,163],
[174,0,176,160,176,176,163,176,180,171],
[181,164,0,150,176,143,174,167,174,154],
[173,180,190,0,168,176,169,186,187,163],
[177,164,164,172,0,166,179,167,173,172],
[170,164,197,164,174,0,166,175,180,186],
[199,177,166,171,161,174,0,182,183,175],
[168,164,173,154,173,165,158,0,183,174],
[165,160,166,153,167,160,157,157,0,158],
[177,169,186,177,168,154,165,166,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,177,237,179,214,243,171,200,155],
[175,0,65,97,70,167,141,126,87,83],
[163,275,0,180,180,193,203,177,156,159],
[103,243,160,0,208,141,139,216,205,229],
[161,270,160,132,0,156,140,140,189,176],
[126,173,147,199,184,0,221,179,230,135],
[97,199,137,201,200,119,0,130,128,101],
[169,214,163,124,200,161,210,0,137,173],
[140,253,184,135,151,110,212,203,0,153],
[185,257,181,111,164,205,239,167,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,182,107,182,107,67,115,222,67],
[158,0,51,107,0,158,107,51,273,51],
[158,289,0,107,67,158,107,158,273,51],
[233,233,233,0,233,225,67,233,340,233],
[158,340,273,107,0,158,107,158,273,158],
[233,182,182,115,182,0,182,182,233,233],
[273,233,233,273,233,158,0,166,273,233],
[225,289,182,107,182,158,174,0,340,118],
[118,67,67,0,67,107,67,0,0,67],
[273,289,289,107,182,107,107,222,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,149,173,159,151,166,170,167,166],
[177,0,165,176,175,181,181,171,172,177],
[191,175,0,183,164,195,193,180,195,176],
[167,164,157,0,166,176,179,168,182,164],
[181,165,176,174,0,171,188,172,203,179],
[189,159,145,164,169,0,160,168,180,164],
[174,159,147,161,152,180,0,162,184,167],
[170,169,160,172,168,172,178,0,184,173],
[173,168,145,158,137,160,156,156,0,157],
[174,163,164,176,161,176,173,167,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,168,190,172,150,168,184,166,156],
[179,0,175,167,164,162,173,168,167,148],
[172,165,0,170,163,177,172,179,156,166],
[150,173,170,0,164,163,171,171,151,171],
[168,176,177,176,0,161,165,174,179,171],
[190,178,163,177,179,0,162,175,173,145],
[172,167,168,169,175,178,0,189,191,168],
[156,172,161,169,166,165,151,0,182,161],
[174,173,184,189,161,167,149,158,0,156],
[184,192,174,169,169,195,172,179,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,158,144,134,153,158,165,156,154],
[199,0,181,153,168,177,176,192,199,144],
[182,159,0,147,133,166,167,166,178,156],
[196,187,193,0,175,177,168,176,170,168],
[206,172,207,165,0,165,192,185,165,176],
[187,163,174,163,175,0,158,179,187,157],
[182,164,173,172,148,182,0,189,178,184],
[175,148,174,164,155,161,151,0,177,158],
[184,141,162,170,175,153,162,163,0,176],
[186,196,184,172,164,183,156,182,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,162,162,155,156,178,157,150,159],
[155,0,161,157,157,150,177,150,161,167],
[178,179,0,175,172,169,188,173,173,175],
[178,183,165,0,162,168,177,178,174,172],
[185,183,168,178,0,172,173,173,164,175],
[184,190,171,172,168,0,189,176,177,177],
[162,163,152,163,167,151,0,166,160,163],
[183,190,167,162,167,164,174,0,168,186],
[190,179,167,166,176,163,180,172,0,168],
[181,173,165,168,165,163,177,154,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,184,164,179,174,184,173,179,181],
[164,0,172,152,174,171,180,187,181,174],
[156,168,0,175,177,165,160,188,179,168],
[176,188,165,0,177,176,189,173,185,172],
[161,166,163,163,0,176,175,171,173,161],
[166,169,175,164,164,0,174,169,185,175],
[156,160,180,151,165,166,0,191,171,173],
[167,153,152,167,169,171,149,0,171,181],
[161,159,161,155,167,155,169,169,0,169],
[159,166,172,168,179,165,167,159,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,189,187,218,150,176,151,160,170],
[172,0,194,152,206,176,190,199,160,157],
[151,146,0,149,176,156,150,158,155,168],
[153,188,191,0,208,144,177,183,161,168],
[122,134,164,132,0,136,143,141,118,119],
[190,164,184,196,204,0,176,166,152,178],
[164,150,190,163,197,164,0,165,145,125],
[189,141,182,157,199,174,175,0,145,154],
[180,180,185,179,222,188,195,195,0,157],
[170,183,172,172,221,162,215,186,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,162,176,154,158,149,157,154],
[166,0,170,157,176,150,174,164,160,184],
[165,170,0,146,156,152,167,156,157,177],
[178,183,194,0,179,177,176,167,155,175],
[164,164,184,161,0,161,147,174,147,159],
[186,190,188,163,179,0,170,182,173,173],
[182,166,173,164,193,170,0,164,161,178],
[191,176,184,173,166,158,176,0,162,178],
[183,180,183,185,193,167,179,178,0,157],
[186,156,163,165,181,167,162,162,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,170,163,166,158,179,177,171],
[173,0,176,163,181,160,169,167,180,168],
[169,164,0,163,170,172,162,180,174,170],
[170,177,177,0,162,179,174,171,171,180],
[177,159,170,178,0,178,173,171,189,179],
[174,180,168,161,162,0,168,169,167,171],
[182,171,178,166,167,172,0,176,172,184],
[161,173,160,169,169,171,164,0,152,160],
[163,160,166,169,151,173,168,188,0,163],
[169,172,170,160,161,169,156,180,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,173,164,161,157,159,172,172,153],
[157,0,190,165,181,171,166,169,171,177],
[167,150,0,150,164,160,155,139,154,148],
[176,175,190,0,176,182,162,167,171,160],
[179,159,176,164,0,159,163,178,175,164],
[183,169,180,158,181,0,171,158,176,170],
[181,174,185,178,177,169,0,167,164,181],
[168,171,201,173,162,182,173,0,186,179],
[168,169,186,169,165,164,176,154,0,171],
[187,163,192,180,176,170,159,161,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,151,177,157,180,156,167,168,187],
[186,0,162,176,179,175,160,185,165,176],
[189,178,0,178,166,191,170,176,181,194],
[163,164,162,0,168,167,158,165,176,176],
[183,161,174,172,0,183,154,159,180,191],
[160,165,149,173,157,0,159,157,165,175],
[184,180,170,182,186,181,0,182,184,192],
[173,155,164,175,181,183,158,0,164,192],
[172,175,159,164,160,175,156,176,0,170],
[153,164,146,164,149,165,148,148,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,189,187,160,173,165,158,173,207],
[179,0,158,191,155,179,175,179,156,196],
[151,182,0,186,178,178,160,160,142,159],
[153,149,154,0,156,150,140,136,152,127],
[180,185,162,184,0,161,165,181,151,161],
[167,161,162,190,179,0,159,117,171,182],
[175,165,180,200,175,181,0,169,154,177],
[182,161,180,204,159,223,171,0,157,182],
[167,184,198,188,189,169,186,183,0,211],
[133,144,181,213,179,158,163,158,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,178,179,179,176,166,170,170],
[164,0,172,175,174,178,162,170,168,165],
[169,168,0,163,172,181,164,164,160,165],
[162,165,177,0,177,180,167,169,164,167],
[161,166,168,163,0,168,165,163,164,171],
[161,162,159,160,172,0,162,154,155,158],
[164,178,176,173,175,178,0,166,164,181],
[174,170,176,171,177,186,174,0,166,178],
[170,172,180,176,176,185,176,174,0,169],
[170,175,175,173,169,182,159,162,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,162,169,175,159,165,159,164,163],
[171,0,173,155,179,150,172,163,162,168],
[178,167,0,150,163,150,170,158,153,152],
[171,185,190,0,183,182,164,167,180,183],
[165,161,177,157,0,173,165,163,159,164],
[181,190,190,158,167,0,171,170,169,172],
[175,168,170,176,175,169,0,162,160,178],
[181,177,182,173,177,170,178,0,162,168],
[176,178,187,160,181,171,180,178,0,169],
[177,172,188,157,176,168,162,172,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,157,173,164,164,165,171,162],
[166,0,154,164,165,157,157,162,171,172],
[175,186,0,180,167,171,175,170,172,176],
[183,176,160,0,162,162,167,166,183,160],
[167,175,173,178,0,160,163,163,177,157],
[176,183,169,178,180,0,177,174,174,173],
[176,183,165,173,177,163,0,186,174,165],
[175,178,170,174,177,166,154,0,176,168],
[169,169,168,157,163,166,166,164,0,163],
[178,168,164,180,183,167,175,172,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,164,171,184,170,159,148,175],
[167,0,174,197,174,156,167,155,159,179],
[167,166,0,153,193,147,177,142,188,167],
[176,143,187,0,226,146,174,172,187,199],
[169,166,147,114,0,138,210,171,126,179],
[156,184,193,194,202,0,210,163,176,174],
[170,173,163,166,130,130,0,155,137,181],
[181,185,198,168,169,177,185,0,145,188],
[192,181,152,153,214,164,203,195,0,183],
[165,161,173,141,161,166,159,152,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,182,177,177,188,172,191,169,174],
[161,0,162,149,159,162,163,169,153,155],
[158,178,0,171,179,176,160,188,157,186],
[163,191,169,0,187,180,177,184,174,192],
[163,181,161,153,0,166,131,178,150,158],
[152,178,164,160,174,0,154,161,142,165],
[168,177,180,163,209,186,0,195,170,199],
[149,171,152,156,162,179,145,0,147,167],
[171,187,183,166,190,198,170,193,0,182],
[166,185,154,148,182,175,141,173,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,172,157,185,175,156,178,174],
[159,0,157,179,128,189,159,152,139,156],
[172,183,0,189,178,188,185,166,176,171],
[168,161,151,0,122,161,163,160,148,176],
[183,212,162,218,0,196,179,176,158,187],
[155,151,152,179,144,0,164,128,149,155],
[165,181,155,177,161,176,0,138,155,166],
[184,188,174,180,164,212,202,0,163,179],
[162,201,164,192,182,191,185,177,0,173],
[166,184,169,164,153,185,174,161,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,161,149,184,183,171,148,147,149],
[182,0,216,137,205,195,162,169,202,131],
[179,124,0,180,139,162,162,140,153,136],
[191,203,160,0,179,174,189,179,198,163],
[156,135,201,161,0,143,176,171,169,169],
[157,145,178,166,197,0,188,169,197,185],
[169,178,178,151,164,152,0,182,176,179],
[192,171,200,161,169,171,158,0,187,192],
[193,138,187,142,171,143,164,153,0,157],
[191,209,204,177,171,155,161,148,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,176,144,163,166,175,162,187,157],
[184,0,168,154,176,181,177,174,177,158],
[164,172,0,154,191,170,170,163,197,174],
[196,186,186,0,171,164,187,172,182,189],
[177,164,149,169,0,167,172,163,190,179],
[174,159,170,176,173,0,183,173,184,159],
[165,163,170,153,168,157,0,159,183,179],
[178,166,177,168,177,167,181,0,186,160],
[153,163,143,158,150,156,157,154,0,148],
[183,182,166,151,161,181,161,180,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,165,154,161,184,169,176,161,164],
[173,0,163,169,165,175,171,158,149,168],
[175,177,0,198,171,182,195,156,187,188],
[186,171,142,0,179,180,178,149,158,181],
[179,175,169,161,0,173,182,139,147,161],
[156,165,158,160,167,0,182,148,146,188],
[171,169,145,162,158,158,0,158,157,156],
[164,182,184,191,201,192,182,0,178,181],
[179,191,153,182,193,194,183,162,0,169],
[176,172,152,159,179,152,184,159,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,185,154,178,195,137,152,156,179],
[158,0,156,138,170,191,140,161,159,170],
[155,184,0,154,144,174,146,133,124,180],
[186,202,186,0,176,230,159,144,174,178],
[162,170,196,164,0,206,158,168,161,161],
[145,149,166,110,134,0,118,123,119,153],
[203,200,194,181,182,222,0,178,141,190],
[188,179,207,196,172,217,162,0,144,196],
[184,181,216,166,179,221,199,196,0,200],
[161,170,160,162,179,187,150,144,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,162,164,163,168,168,167,155,161],
[176,0,174,161,170,170,182,177,171,182],
[178,166,0,161,161,164,176,174,158,163],
[176,179,179,0,161,177,195,184,173,181],
[177,170,179,179,0,161,176,186,169,168],
[172,170,176,163,179,0,172,174,163,167],
[172,158,164,145,164,168,0,165,154,161],
[173,163,166,156,154,166,175,0,156,172],
[185,169,182,167,171,177,186,184,0,175],
[179,158,177,159,172,173,179,168,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,188,169,172,192,190,193,158,193],
[156,0,153,144,171,184,160,177,151,201],
[152,187,0,178,166,224,198,196,161,179],
[171,196,162,0,174,187,177,213,158,209],
[168,169,174,166,0,184,170,199,151,185],
[148,156,116,153,156,0,135,138,135,157],
[150,180,142,163,170,205,0,171,179,186],
[147,163,144,127,141,202,169,0,152,177],
[182,189,179,182,189,205,161,188,0,212],
[147,139,161,131,155,183,154,163,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,191,151,173,176,174,172,156,158],
[165,0,177,169,162,154,172,192,151,170],
[149,163,0,150,164,159,150,162,151,158],
[189,171,190,0,175,171,180,171,168,168],
[167,178,176,165,0,172,174,179,171,173],
[164,186,181,169,168,0,169,172,174,170],
[166,168,190,160,166,171,0,170,173,166],
[168,148,178,169,161,168,170,0,164,172],
[184,189,189,172,169,166,167,176,0,174],
[182,170,182,172,167,170,174,168,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,162,185,164,167,173,161,167,186],
[177,0,170,207,195,157,185,208,190,181],
[178,170,0,209,204,175,189,193,197,186],
[155,133,131,0,160,130,152,160,129,165],
[176,145,136,180,0,172,151,156,166,173],
[173,183,165,210,168,0,169,190,195,174],
[167,155,151,188,189,171,0,196,192,180],
[179,132,147,180,184,150,144,0,180,184],
[173,150,143,211,174,145,148,160,0,174],
[154,159,154,175,167,166,160,156,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,160,164,186,164,190,181,183,176],
[165,0,187,170,178,169,196,171,181,179],
[180,153,0,177,181,166,183,170,179,169],
[176,170,163,0,176,163,196,175,180,174],
[154,162,159,164,0,170,173,162,163,174],
[176,171,174,177,170,0,184,182,171,192],
[150,144,157,144,167,156,0,160,150,158],
[159,169,170,165,178,158,180,0,166,175],
[157,159,161,160,177,169,190,174,0,169],
[164,161,171,166,166,148,182,165,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,64,142,83,131,149,17,209,121],
[251,0,124,161,205,210,128,201,247,182],
[276,216,0,267,233,259,276,191,292,162],
[198,179,73,0,114,195,197,81,276,157],
[257,135,107,226,0,185,177,104,289,166],
[209,130,81,145,155,0,131,62,274,147],
[191,212,64,143,163,209,0,167,260,125],
[323,139,149,259,236,278,173,0,272,192],
[131,93,48,64,51,66,80,68,0,45],
[219,158,178,183,174,193,215,148,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,163,140,158,174,156,198,185,175],
[174,0,145,130,139,178,167,170,164,147],
[177,195,0,165,153,169,162,192,182,174],
[200,210,175,0,177,184,204,222,185,169],
[182,201,187,163,0,171,173,196,172,168],
[166,162,171,156,169,0,138,206,167,176],
[184,173,178,136,167,202,0,207,169,190],
[142,170,148,118,144,134,133,0,144,174],
[155,176,158,155,168,173,171,196,0,167],
[165,193,166,171,172,164,150,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,161,144,154,168,136,165,169],
[162,0,153,151,144,146,171,156,137,153],
[174,187,0,177,145,160,161,160,160,148],
[179,189,163,0,175,194,172,183,141,190],
[196,196,195,165,0,205,180,180,159,207],
[186,194,180,146,135,0,164,143,121,163],
[172,169,179,168,160,176,0,175,155,147],
[204,184,180,157,160,197,165,0,176,191],
[175,203,180,199,181,219,185,164,0,201],
[171,187,192,150,133,177,193,149,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,165,178,142,174,166,170,166,167],
[162,0,160,174,164,161,165,156,169,149],
[175,180,0,175,150,184,174,154,179,158],
[162,166,165,0,156,169,164,165,178,182],
[198,176,190,184,0,188,182,165,180,178],
[166,179,156,171,152,0,148,157,165,155],
[174,175,166,176,158,192,0,179,170,168],
[170,184,186,175,175,183,161,0,174,170],
[174,171,161,162,160,175,170,166,0,172],
[173,191,182,158,162,185,172,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,162,176,167,182,142,133,162],
[166,0,160,144,169,168,186,128,157,166],
[165,180,0,150,179,132,161,138,151,149],
[178,196,190,0,218,164,170,146,154,188],
[164,171,161,122,0,133,182,130,121,136],
[173,172,208,176,207,0,180,143,202,181],
[158,154,179,170,158,160,0,164,163,176],
[198,212,202,194,210,197,176,0,165,161],
[207,183,189,186,219,138,177,175,0,192],
[178,174,191,152,204,159,164,179,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,155,168,171,171,166,153,168,162],
[175,0,160,162,163,153,165,163,154,162],
[185,180,0,178,179,166,174,176,172,177],
[172,178,162,0,164,159,165,176,172,162],
[169,177,161,176,0,173,171,160,164,168],
[169,187,174,181,167,0,176,163,171,180],
[174,175,166,175,169,164,0,168,181,173],
[187,177,164,164,180,177,172,0,175,169],
[172,186,168,168,176,169,159,165,0,174],
[178,178,163,178,172,160,167,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,170,161,161,166,166,147,172,172],
[172,0,177,163,173,170,187,163,165,167],
[170,163,0,150,165,173,171,163,191,151],
[179,177,190,0,186,186,181,163,186,166],
[179,167,175,154,0,164,190,156,167,164],
[174,170,167,154,176,0,169,185,164,159],
[174,153,169,159,150,171,0,167,158,162],
[193,177,177,177,184,155,173,0,185,178],
[168,175,149,154,173,176,182,155,0,163],
[168,173,189,174,176,181,178,162,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,150,147,151,209,190,177,190,195],
[162,0,171,157,153,211,216,163,172,210],
[190,169,0,139,121,198,201,108,153,165],
[193,183,201,0,191,201,194,139,172,154],
[189,187,219,149,0,191,212,210,211,221],
[131,129,142,139,149,0,164,140,137,185],
[150,124,139,146,128,176,0,137,156,131],
[163,177,232,201,130,200,203,0,175,209],
[150,168,187,168,129,203,184,165,0,190],
[145,130,175,186,119,155,209,131,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,159,164,165,165,154,155,163,155],
[173,0,175,170,171,181,147,169,161,176],
[181,165,0,180,176,170,181,165,180,184],
[176,170,160,0,173,173,163,180,184,174],
[175,169,164,167,0,180,163,166,156,164],
[175,159,170,167,160,0,157,159,165,163],
[186,193,159,177,177,183,0,173,182,171],
[185,171,175,160,174,181,167,0,174,169],
[177,179,160,156,184,175,158,166,0,171],
[185,164,156,166,176,177,169,171,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,188,178,170,159,197,124,150,153],
[199,0,216,189,216,202,203,210,154,206],
[152,124,0,192,141,150,191,138,164,158],
[162,151,148,0,200,165,206,159,128,150],
[170,124,199,140,0,175,151,128,149,148],
[181,138,190,175,165,0,221,129,144,176],
[143,137,149,134,189,119,0,110,133,151],
[216,130,202,181,212,211,230,0,205,207],
[190,186,176,212,191,196,207,135,0,191],
[187,134,182,190,192,164,189,133,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,153,162,143,117,169,134,183,178],
[187,0,166,165,175,161,162,145,188,163],
[187,174,0,201,180,168,173,145,166,189],
[178,175,139,0,154,146,162,133,175,165],
[197,165,160,186,0,182,168,158,194,175],
[223,179,172,194,158,0,176,173,192,197],
[171,178,167,178,172,164,0,152,157,161],
[206,195,195,207,182,167,188,0,173,210],
[157,152,174,165,146,148,183,167,0,158],
[162,177,151,175,165,143,179,130,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,165,178,173,160,167,177,171],
[166,0,166,160,191,176,164,172,168,168],
[170,174,0,166,184,180,164,163,164,159],
[175,180,174,0,187,185,171,167,173,177],
[162,149,156,153,0,162,166,166,163,154],
[167,164,160,155,178,0,169,163,165,155],
[180,176,176,169,174,171,0,170,183,180],
[173,168,177,173,174,177,170,0,171,181],
[163,172,176,167,177,175,157,169,0,174],
[169,172,181,163,186,185,160,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,177,175,179,186,180,175,174,154],
[175,0,189,166,174,171,159,163,163,155],
[163,151,0,164,173,186,164,155,150,168],
[165,174,176,0,172,172,172,160,167,150],
[161,166,167,168,0,175,162,140,143,165],
[154,169,154,168,165,0,149,150,145,141],
[160,181,176,168,178,191,0,173,154,160],
[165,177,185,180,200,190,167,0,160,158],
[166,177,190,173,197,195,186,180,0,187],
[186,185,172,190,175,199,180,182,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,160,174,186,165,177,144,178,170],
[166,0,176,152,200,164,149,177,170,174],
[180,164,0,166,175,195,170,150,205,163],
[166,188,174,0,188,200,155,161,182,178],
[154,140,165,152,0,142,150,150,143,157],
[175,176,145,140,198,0,170,161,169,167],
[163,191,170,185,190,170,0,174,194,175],
[196,163,190,179,190,179,166,0,173,191],
[162,170,135,158,197,171,146,167,0,163],
[170,166,177,162,183,173,165,149,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,179,178,176,176,152,158,146,179],
[155,0,206,185,175,186,162,170,169,201],
[161,134,0,178,188,180,144,169,153,165],
[162,155,162,0,178,162,160,182,150,158],
[164,165,152,162,0,175,165,158,174,158],
[164,154,160,178,165,0,171,156,155,165],
[188,178,196,180,175,169,0,152,182,183],
[182,170,171,158,182,184,188,0,199,184],
[194,171,187,190,166,185,158,141,0,173],
[161,139,175,182,182,175,157,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,191,175,159,150,165,166,175],
[166,0,181,167,166,160,162,152,172,158],
[161,159,0,167,181,142,146,163,173,176],
[149,173,173,0,157,137,139,145,155,171],
[165,174,159,183,0,156,146,153,178,187],
[181,180,198,203,184,0,161,160,167,189],
[190,178,194,201,194,179,0,168,177,185],
[175,188,177,195,187,180,172,0,168,187],
[174,168,167,185,162,173,163,172,0,184],
[165,182,164,169,153,151,155,153,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,171,178,185,169,159,182,185,164],
[154,0,160,170,170,157,164,176,160,138],
[169,180,0,186,170,173,172,198,184,168],
[162,170,154,0,186,172,172,194,172,156],
[155,170,170,154,0,153,160,169,186,150],
[171,183,167,168,187,0,182,185,178,157],
[181,176,168,168,180,158,0,189,174,180],
[158,164,142,146,171,155,151,0,159,142],
[155,180,156,168,154,162,166,181,0,143],
[176,202,172,184,190,183,160,198,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,157,152,152,152,156,152,152,159],
[200,0,187,166,161,161,163,165,156,190],
[183,153,0,154,173,155,162,164,151,165],
[188,174,186,0,169,169,161,172,162,189],
[188,179,167,171,0,171,163,186,169,185],
[188,179,185,171,169,0,172,154,160,184],
[184,177,178,179,177,168,0,169,172,204],
[188,175,176,168,154,186,171,0,180,176],
[188,184,189,178,171,180,168,160,0,183],
[181,150,175,151,155,156,136,164,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,158,170,159,151,183,175,158,165],
[174,0,162,167,167,158,173,162,166,167],
[182,178,0,189,178,163,196,186,171,176],
[170,173,151,0,173,168,176,175,165,161],
[181,173,162,167,0,155,169,162,157,165],
[189,182,177,172,185,0,183,182,170,178],
[157,167,144,164,171,157,0,156,156,148],
[165,178,154,165,178,158,184,0,170,175],
[182,174,169,175,183,170,184,170,0,175],
[175,173,164,179,175,162,192,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,178,149,159,187,168,180,173,202],
[172,0,185,141,143,171,185,180,187,156],
[162,155,0,179,149,196,173,171,181,174],
[191,199,161,0,190,180,180,188,175,192],
[181,197,191,150,0,194,192,197,203,174],
[153,169,144,160,146,0,188,193,154,175],
[172,155,167,160,148,152,0,182,163,160],
[160,160,169,152,143,147,158,0,145,169],
[167,153,159,165,137,186,177,195,0,185],
[138,184,166,148,166,165,180,171,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,174,178,155,167,177,154,186],
[177,0,176,175,189,165,174,198,165,163],
[168,164,0,172,170,164,154,172,162,161],
[166,165,168,0,180,166,173,178,163,175],
[162,151,170,160,0,166,151,183,159,159],
[185,175,176,174,174,0,178,179,160,166],
[173,166,186,167,189,162,0,181,170,174],
[163,142,168,162,157,161,159,0,158,157],
[186,175,178,177,181,180,170,182,0,174],
[154,177,179,165,181,174,166,183,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,158,161,165,152,162,148,170,177],
[194,0,160,165,192,188,197,151,171,216],
[182,180,0,176,187,187,168,173,178,215],
[179,175,164,0,179,154,158,154,161,202],
[175,148,153,161,0,157,160,137,170,196],
[188,152,153,186,183,0,168,143,167,176],
[178,143,172,182,180,172,0,137,165,185],
[192,189,167,186,203,197,203,0,193,203],
[170,169,162,179,170,173,175,147,0,188],
[163,124,125,138,144,164,155,137,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,193,184,161,167,175,155,201,179],
[179,0,183,186,169,176,172,172,177,165],
[147,157,0,185,183,168,182,156,203,189],
[156,154,155,0,155,161,149,163,168,136],
[179,171,157,185,0,180,180,167,188,186],
[173,164,172,179,160,0,184,174,182,173],
[165,168,158,191,160,156,0,164,195,172],
[185,168,184,177,173,166,176,0,197,186],
[139,163,137,172,152,158,145,143,0,156],
[161,175,151,204,154,167,168,154,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,176,166,200,164,167,186,174,165],
[157,0,161,159,178,181,162,172,165,153],
[164,179,0,153,182,166,160,163,163,154],
[174,181,187,0,185,186,181,180,176,150],
[140,162,158,155,0,164,155,166,173,153],
[176,159,174,154,176,0,164,168,169,156],
[173,178,180,159,185,176,0,184,176,166],
[154,168,177,160,174,172,156,0,186,155],
[166,175,177,164,167,171,164,154,0,171],
[175,187,186,190,187,184,174,185,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,162,170,173,177,177,159,168],
[179,0,189,171,183,184,174,176,172,167],
[170,151,0,162,170,182,161,173,169,161],
[178,169,178,0,177,178,169,178,173,168],
[170,157,170,163,0,183,171,170,161,164],
[167,156,158,162,157,0,152,172,154,159],
[163,166,179,171,169,188,0,181,168,176],
[163,164,167,162,170,168,159,0,156,161],
[181,168,171,167,179,186,172,184,0,179],
[172,173,179,172,176,181,164,179,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,156,159,159,169,166,187,162,180],
[172,0,167,153,159,176,164,189,164,177],
[184,173,0,168,179,171,170,175,165,189],
[181,187,172,0,164,177,170,187,177,183],
[181,181,161,176,0,172,161,196,165,180],
[171,164,169,163,168,0,156,192,159,171],
[174,176,170,170,179,184,0,190,163,171],
[153,151,165,153,144,148,150,0,159,162],
[178,176,175,163,175,181,177,181,0,172],
[160,163,151,157,160,169,169,178,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,185,229,184,197,195,144,151,210],
[150,0,145,209,175,176,185,130,127,157],
[155,195,0,219,164,173,182,159,174,186],
[111,131,121,0,138,100,150,124,137,146],
[156,165,176,202,0,175,187,164,156,153],
[143,164,167,240,165,0,197,193,168,209],
[145,155,158,190,153,143,0,166,130,185],
[196,210,181,216,176,147,174,0,161,173],
[189,213,166,203,184,172,210,179,0,192],
[130,183,154,194,187,131,155,167,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,102,65,49,33,33,78,46,123],
[253,0,173,92,127,120,128,111,169,181],
[238,167,0,88,151,143,173,159,165,223],
[275,248,252,0,224,208,205,153,238,241],
[291,213,189,116,0,199,218,133,228,238],
[307,220,197,132,141,0,144,171,197,183],
[307,212,167,135,122,196,0,169,211,211],
[262,229,181,187,207,169,171,0,209,182],
[294,171,175,102,112,143,129,131,0,208],
[217,159,117,99,102,157,129,158,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,179,172,154,180,169,133,184,165],
[178,0,195,152,167,195,193,156,176,171],
[161,145,0,150,174,174,167,178,197,194],
[168,188,190,0,172,194,177,163,202,186],
[186,173,166,168,0,216,187,173,194,198],
[160,145,166,146,124,0,157,163,156,166],
[171,147,173,163,153,183,0,159,193,157],
[207,184,162,177,167,177,181,0,189,190],
[156,164,143,138,146,184,147,151,0,154],
[175,169,146,154,142,174,183,150,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,124,159,148,143,154,170,173,189],
[175,0,174,160,163,160,170,179,169,192],
[216,166,0,187,167,169,177,168,189,207],
[181,180,153,0,157,157,152,184,155,172],
[192,177,173,183,0,171,155,166,170,172],
[197,180,171,183,169,0,195,167,178,186],
[186,170,163,188,185,145,0,184,166,195],
[170,161,172,156,174,173,156,0,180,183],
[167,171,151,185,170,162,174,160,0,179],
[151,148,133,168,168,154,145,157,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,160,165,167,147,137,148,168,152],
[192,0,157,179,187,162,147,160,178,148],
[180,183,0,186,176,166,149,179,177,172],
[175,161,154,0,178,151,137,163,171,140],
[173,153,164,162,0,161,181,160,173,167],
[193,178,174,189,179,0,183,161,172,145],
[203,193,191,203,159,157,0,170,187,135],
[192,180,161,177,180,179,170,0,188,155],
[172,162,163,169,167,168,153,152,0,133],
[188,192,168,200,173,195,205,185,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,157,159,163,153,165,153,156,152],
[192,0,164,173,159,175,177,176,182,171],
[183,176,0,154,160,153,166,174,170,178],
[181,167,186,0,179,162,178,161,165,177],
[177,181,180,161,0,168,171,168,171,177],
[187,165,187,178,172,0,177,181,165,166],
[175,163,174,162,169,163,0,171,176,173],
[187,164,166,179,172,159,169,0,149,164],
[184,158,170,175,169,175,164,191,0,170],
[188,169,162,163,163,174,167,176,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,160,158,155,155,151,166,150,173],
[187,0,167,184,171,179,174,194,179,188],
[180,173,0,182,187,171,169,184,176,186],
[182,156,158,0,164,168,156,171,167,165],
[185,169,153,176,0,167,175,176,177,173],
[185,161,169,172,173,0,177,169,166,172],
[189,166,171,184,165,163,0,177,176,172],
[174,146,156,169,164,171,163,0,167,167],
[190,161,164,173,163,174,164,173,0,169],
[167,152,154,175,167,168,168,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,166,150,172,157,170,174,193,169],
[154,0,157,154,160,161,159,170,178,164],
[174,183,0,174,173,177,167,183,179,179],
[190,186,166,0,167,169,160,182,201,195],
[168,180,167,173,0,155,173,173,178,165],
[183,179,163,171,185,0,157,186,186,177],
[170,181,173,180,167,183,0,189,190,177],
[166,170,157,158,167,154,151,0,180,163],
[147,162,161,139,162,154,150,160,0,171],
[171,176,161,145,175,163,163,177,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,157,173,162,177,174,168,178,189],
[151,0,156,159,161,170,159,157,156,158],
[183,184,0,186,160,185,167,171,184,167],
[167,181,154,0,162,169,154,157,175,157],
[178,179,180,178,0,176,175,168,174,182],
[163,170,155,171,164,0,163,169,163,160],
[166,181,173,186,165,177,0,174,178,184],
[172,183,169,183,172,171,166,0,187,161],
[162,184,156,165,166,177,162,153,0,169],
[151,182,173,183,158,180,156,179,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,152,175,171,170,164,183,155,165],
[171,0,163,170,154,162,160,174,147,159],
[188,177,0,185,167,171,162,172,183,180],
[165,170,155,0,181,177,168,196,194,150],
[169,186,173,159,0,183,172,194,180,150],
[170,178,169,163,157,0,147,160,174,141],
[176,180,178,172,168,193,0,190,182,158],
[157,166,168,144,146,180,150,0,153,153],
[185,193,157,146,160,166,158,187,0,165],
[175,181,160,190,190,199,182,187,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,172,166,173,182,170,185,170,200],
[163,0,186,178,169,184,175,187,162,167],
[168,154,0,170,168,178,174,178,158,170],
[174,162,170,0,172,183,186,182,158,169],
[167,171,172,168,0,180,163,182,157,171],
[158,156,162,157,160,0,151,154,147,169],
[170,165,166,154,177,189,0,183,167,172],
[155,153,162,158,158,186,157,0,161,165],
[170,178,182,182,183,193,173,179,0,180],
[140,173,170,171,169,171,168,175,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,163,172,174,159,179,180,173,171],
[163,0,159,167,167,165,175,166,174,161],
[177,181,0,157,164,173,175,174,176,166],
[168,173,183,0,176,179,171,165,186,171],
[166,173,176,164,0,168,161,160,181,156],
[181,175,167,161,172,0,178,174,170,166],
[161,165,165,169,179,162,0,151,173,165],
[160,174,166,175,180,166,189,0,187,170],
[167,166,164,154,159,170,167,153,0,160],
[169,179,174,169,184,174,175,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,169,132,186,134,157,164,130,154],
[222,0,216,164,182,166,186,194,193,165],
[171,124,0,154,166,146,132,153,151,153],
[208,176,186,0,194,168,163,190,181,185],
[154,158,174,146,0,130,120,159,141,142],
[206,174,194,172,210,0,155,170,181,172],
[183,154,208,177,220,185,0,174,189,162],
[176,146,187,150,181,170,166,0,175,157],
[210,147,189,159,199,159,151,165,0,166],
[186,175,187,155,198,168,178,183,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,184,179,173,173,172,191,183,184],
[176,0,166,153,163,152,149,167,157,160],
[156,174,0,168,183,173,156,179,176,173],
[161,187,172,0,175,187,153,173,169,163],
[167,177,157,165,0,156,145,165,171,181],
[167,188,167,153,184,0,159,178,152,158],
[168,191,184,187,195,181,0,189,164,189],
[149,173,161,167,175,162,151,0,147,173],
[157,183,164,171,169,188,176,193,0,161],
[156,180,167,177,159,182,151,167,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,183,163,157,178,181,147,163,173],
[175,0,181,178,154,196,167,170,178,167],
[157,159,0,146,149,181,160,159,154,159],
[177,162,194,0,181,195,180,169,180,170],
[183,186,191,159,0,187,177,193,173,172],
[162,144,159,145,153,0,161,161,141,161],
[159,173,180,160,163,179,0,193,162,157],
[193,170,181,171,147,179,147,0,164,163],
[177,162,186,160,167,199,178,176,0,172],
[167,173,181,170,168,179,183,177,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,186,172,172,192,159,184,202,184],
[163,0,178,164,160,165,181,181,192,181],
[154,162,0,182,167,170,171,178,188,166],
[168,176,158,0,151,173,171,177,174,166],
[168,180,173,189,0,173,183,175,192,169],
[148,175,170,167,167,0,178,193,185,173],
[181,159,169,169,157,162,0,170,195,170],
[156,159,162,163,165,147,170,0,179,176],
[138,148,152,166,148,155,145,161,0,159],
[156,159,174,174,171,167,170,164,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,166,152,158,165,168,155,158,161],
[188,0,180,165,176,177,184,176,174,179],
[174,160,0,172,157,174,178,170,167,180],
[188,175,168,0,169,181,177,164,187,181],
[182,164,183,171,0,162,168,164,170,181],
[175,163,166,159,178,0,179,162,175,176],
[172,156,162,163,172,161,0,165,156,166],
[185,164,170,176,176,178,175,0,165,182],
[182,166,173,153,170,165,184,175,0,175],
[179,161,160,159,159,164,174,158,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,175,180,165,178,159,186,173,172],
[189,0,172,179,166,179,165,189,190,171],
[165,168,0,185,171,185,154,178,176,173],
[160,161,155,0,153,165,153,180,175,168],
[175,174,169,187,0,180,174,195,178,166],
[162,161,155,175,160,0,156,180,175,161],
[181,175,186,187,166,184,0,182,180,180],
[154,151,162,160,145,160,158,0,171,163],
[167,150,164,165,162,165,160,169,0,162],
[168,169,167,172,174,179,160,177,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,143,126,156,159,160,158,168,155],
[181,0,163,167,160,183,173,155,157,171],
[197,177,0,165,189,178,177,175,180,175],
[214,173,175,0,174,164,171,171,184,180],
[184,180,151,166,0,168,173,169,158,161],
[181,157,162,176,172,0,183,156,179,173],
[180,167,163,169,167,157,0,160,175,179],
[182,185,165,169,171,184,180,0,186,171],
[172,183,160,156,182,161,165,154,0,181],
[185,169,165,160,179,167,161,169,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,167,166,168,166,165,164,161,153],
[164,0,144,160,156,145,163,157,165,153],
[173,196,0,171,189,168,176,174,171,163],
[174,180,169,0,171,175,176,160,185,162],
[172,184,151,169,0,171,176,165,166,164],
[174,195,172,165,169,0,170,177,166,164],
[175,177,164,164,164,170,0,176,162,172],
[176,183,166,180,175,163,164,0,177,177],
[179,175,169,155,174,174,178,163,0,160],
[187,187,177,178,176,176,168,163,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,159,167,183,167,179,149,170,179],
[182,0,173,168,175,174,174,179,171,185],
[181,167,0,172,164,199,194,184,183,189],
[173,172,168,0,174,167,177,179,187,179],
[157,165,176,166,0,164,164,165,170,163],
[173,166,141,173,176,0,183,176,183,188],
[161,166,146,163,176,157,0,161,160,167],
[191,161,156,161,175,164,179,0,183,180],
[170,169,157,153,170,157,180,157,0,167],
[161,155,151,161,177,152,173,160,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,179,178,163,177,160,167,172,173],
[162,0,181,168,169,175,166,156,170,168],
[161,159,0,153,160,169,158,157,163,150],
[162,172,187,0,175,172,165,159,174,172],
[177,171,180,165,0,165,165,181,174,158],
[163,165,171,168,175,0,162,164,169,166],
[180,174,182,175,175,178,0,175,167,180],
[173,184,183,181,159,176,165,0,168,162],
[168,170,177,166,166,171,173,172,0,162],
[167,172,190,168,182,174,160,178,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,158,162,172,170,164,158,160,156],
[163,0,161,155,158,160,164,159,168,178],
[182,179,0,163,150,168,159,141,175,148],
[178,185,177,0,186,184,178,162,175,156],
[168,182,190,154,0,179,162,133,172,137],
[170,180,172,156,161,0,177,137,170,155],
[176,176,181,162,178,163,0,142,170,160],
[182,181,199,178,207,203,198,0,183,159],
[180,172,165,165,168,170,170,157,0,156],
[184,162,192,184,203,185,180,181,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,164,141,155,164,158,146,157,139],
[145,0,127,130,137,160,109,113,93,98],
[176,213,0,192,164,173,185,188,132,149],
[199,210,148,0,200,191,209,148,165,161],
[185,203,176,140,0,141,187,158,161,150],
[176,180,167,149,199,0,174,159,180,102],
[182,231,155,131,153,166,0,165,141,145],
[194,227,152,192,182,181,175,0,156,172],
[183,247,208,175,179,160,199,184,0,136],
[201,242,191,179,190,238,195,168,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,115,149,181,169,185,181,144,158],
[206,0,189,168,172,186,173,222,202,191],
[225,151,0,206,177,168,201,202,215,175],
[191,172,134,0,195,176,213,200,167,169],
[159,168,163,145,0,142,163,170,168,151],
[171,154,172,164,198,0,173,216,170,136],
[155,167,139,127,177,167,0,164,195,173],
[159,118,138,140,170,124,176,0,191,185],
[196,138,125,173,172,170,145,149,0,184],
[182,149,165,171,189,204,167,155,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,184,172,197,186,165,172,189,168],
[146,0,159,156,171,166,150,160,165,159],
[156,181,0,165,189,184,156,163,161,177],
[168,184,175,0,185,187,157,177,189,176],
[143,169,151,155,0,162,156,177,166,161],
[154,174,156,153,178,0,161,153,155,150],
[175,190,184,183,184,179,0,180,165,173],
[168,180,177,163,163,187,160,0,173,170],
[151,175,179,151,174,185,175,167,0,173],
[172,181,163,164,179,190,167,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,182,180,170,168,174,180,168,173],
[168,0,175,175,182,166,171,181,179,177],
[158,165,0,166,164,157,168,165,153,170],
[160,165,174,0,164,172,159,174,155,177],
[170,158,176,176,0,159,160,169,172,167],
[172,174,183,168,181,0,178,173,167,169],
[166,169,172,181,180,162,0,173,163,174],
[160,159,175,166,171,167,167,0,162,175],
[172,161,187,185,168,173,177,178,0,172],
[167,163,170,163,173,171,166,165,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,183,177,165,178,181,173,190,175],
[172,0,169,164,146,169,158,180,172,172],
[157,171,0,161,151,156,139,162,178,154],
[163,176,179,0,172,172,159,182,184,168],
[175,194,189,168,0,167,178,186,188,169],
[162,171,184,168,173,0,162,174,177,181],
[159,182,201,181,162,178,0,196,191,187],
[167,160,178,158,154,166,144,0,188,159],
[150,168,162,156,152,163,149,152,0,151],
[165,168,186,172,171,159,153,181,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,162,174,175,172,163,176,171,150],
[174,0,169,169,160,175,177,185,177,160],
[178,171,0,185,165,180,170,194,175,161],
[166,171,155,0,142,178,164,180,166,175],
[165,180,175,198,0,199,170,175,193,172],
[168,165,160,162,141,0,152,164,160,167],
[177,163,170,176,170,188,0,173,186,168],
[164,155,146,160,165,176,167,0,167,166],
[169,163,165,174,147,180,154,173,0,151],
[190,180,179,165,168,173,172,174,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,173,179,173,172,150,163,186,166],
[151,0,185,157,156,159,154,175,186,159],
[167,155,0,171,178,172,171,155,185,161],
[161,183,169,0,176,175,155,166,188,161],
[167,184,162,164,0,176,159,142,184,152],
[168,181,168,165,164,0,171,163,162,177],
[190,186,169,185,181,169,0,199,193,173],
[177,165,185,174,198,177,141,0,182,184],
[154,154,155,152,156,178,147,158,0,176],
[174,181,179,179,188,163,167,156,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,168,160,165,165,159,163,158,153],
[176,0,176,165,179,167,172,176,180,171],
[172,164,0,153,160,171,144,170,157,154],
[180,175,187,0,210,187,166,188,201,178],
[175,161,180,130,0,158,155,154,178,150],
[175,173,169,153,182,0,145,168,185,175],
[181,168,196,174,185,195,0,176,185,184],
[177,164,170,152,186,172,164,0,178,161],
[182,160,183,139,162,155,155,162,0,145],
[187,169,186,162,190,165,156,179,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,178,164,183,166,184,192,176,196],
[151,0,159,160,164,151,164,173,162,185],
[162,181,0,161,171,157,178,180,173,158],
[176,180,179,0,182,178,168,189,177,173],
[157,176,169,158,0,150,178,169,170,177],
[174,189,183,162,190,0,190,188,182,198],
[156,176,162,172,162,150,0,176,158,175],
[148,167,160,151,171,152,164,0,156,166],
[164,178,167,163,170,158,182,184,0,184],
[144,155,182,167,163,142,165,174,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,160,202,244,173,118,145,127,113],
[186,0,195,222,266,196,221,166,159,205],
[180,145,0,206,235,175,155,145,178,175],
[138,118,134,0,229,175,106,153,157,138],
[96,74,105,111,0,147,68,130,123,70],
[167,144,165,165,193,0,122,154,163,128],
[222,119,185,234,272,218,0,201,234,184],
[195,174,195,187,210,186,139,0,196,192],
[213,181,162,183,217,177,106,144,0,154],
[227,135,165,202,270,212,156,148,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,190,54,244,191,191,137,191,54],
[181,0,190,95,244,95,191,41,191,181],
[150,150,0,54,277,191,191,191,191,150],
[286,245,286,0,340,200,254,137,200,245],
[96,96,63,0,0,137,191,137,137,0],
[149,245,149,140,203,0,236,182,182,140],
[149,149,149,86,149,104,0,127,286,149],
[203,299,149,203,203,158,213,0,340,203],
[149,149,149,140,203,158,54,0,0,203],
[286,159,190,95,340,200,191,137,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,178,192,174,182,177,185,158,195],
[137,0,144,142,139,167,148,161,139,175],
[162,196,0,169,158,216,177,173,169,181],
[148,198,171,0,141,160,169,171,153,171],
[166,201,182,199,0,193,181,190,175,185],
[158,173,124,180,147,0,163,191,151,142],
[163,192,163,171,159,177,0,186,152,180],
[155,179,167,169,150,149,154,0,157,164],
[182,201,171,187,165,189,188,183,0,198],
[145,165,159,169,155,198,160,176,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,180,184,163,183,178,188,172,188],
[158,0,163,176,156,179,179,169,168,164],
[160,177,0,189,176,179,171,173,166,182],
[156,164,151,0,157,162,159,160,156,168],
[177,184,164,183,0,187,180,182,165,171],
[157,161,161,178,153,0,167,180,158,163],
[162,161,169,181,160,173,0,183,178,172],
[152,171,167,180,158,160,157,0,153,175],
[168,172,174,184,175,182,162,187,0,184],
[152,176,158,172,169,177,168,165,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,197,192,159,180,185,194,202,164],
[171,0,201,162,193,169,238,212,172,154],
[143,139,0,158,157,148,180,181,187,178],
[148,178,182,0,201,150,206,219,189,208],
[181,147,183,139,0,161,229,200,183,168],
[160,171,192,190,179,0,202,191,172,167],
[155,102,160,134,111,138,0,173,183,153],
[146,128,159,121,140,149,167,0,172,159],
[138,168,153,151,157,168,157,168,0,162],
[176,186,162,132,172,173,187,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,128,137,163,181,135,136,165,150],
[196,0,165,175,201,176,171,173,177,183],
[212,175,0,187,197,199,164,179,183,192],
[203,165,153,0,187,196,152,162,171,187],
[177,139,143,153,0,170,129,146,164,147],
[159,164,141,144,170,0,125,137,154,177],
[205,169,176,188,211,215,0,177,196,183],
[204,167,161,178,194,203,163,0,174,192],
[175,163,157,169,176,186,144,166,0,172],
[190,157,148,153,193,163,157,148,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,164,174,157,170,135,144,173,159],
[180,0,188,200,193,183,157,182,174,209],
[176,152,0,179,158,156,153,143,166,205],
[166,140,161,0,152,163,128,140,139,186],
[183,147,182,188,0,168,156,172,173,213],
[170,157,184,177,172,0,142,143,184,199],
[205,183,187,212,184,198,0,189,165,194],
[196,158,197,200,168,197,151,0,178,180],
[167,166,174,201,167,156,175,162,0,197],
[181,131,135,154,127,141,146,160,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,194,175,151,156,182,234,178,175],
[147,0,192,159,171,143,201,204,116,159],
[146,148,0,166,171,135,146,192,149,157],
[165,181,174,0,160,126,173,203,116,155],
[189,169,169,180,0,184,171,197,143,197],
[184,197,205,214,156,0,191,218,169,180],
[158,139,194,167,169,149,0,213,109,158],
[106,136,148,137,143,122,127,0,92,129],
[162,224,191,224,197,171,231,248,0,193],
[165,181,183,185,143,160,182,211,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,186,188,140,196,209,184,183,164],
[139,0,168,164,156,155,176,189,180,149],
[154,172,0,177,156,179,197,187,189,156],
[152,176,163,0,191,196,200,187,196,176],
[200,184,184,149,0,201,202,204,212,167],
[144,185,161,144,139,0,166,169,172,157],
[131,164,143,140,138,174,0,157,145,146],
[156,151,153,153,136,171,183,0,166,155],
[157,160,151,144,128,168,195,174,0,146],
[176,191,184,164,173,183,194,185,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,174,178,223,191,194,164,138,186],
[173,0,152,200,199,177,161,134,185,187],
[166,188,0,176,207,166,183,154,156,158],
[162,140,164,0,202,154,143,155,118,155],
[117,141,133,138,0,128,130,115,73,150],
[149,163,174,186,212,0,177,161,145,167],
[146,179,157,197,210,163,0,178,180,138],
[176,206,186,185,225,179,162,0,154,169],
[202,155,184,222,267,195,160,186,0,181],
[154,153,182,185,190,173,202,171,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,172,157,168,172,169,156,167,159],
[160,0,158,152,147,154,174,155,160,165],
[168,182,0,188,164,185,180,181,173,160],
[183,188,152,0,169,180,175,179,160,162],
[172,193,176,171,0,176,172,186,170,155],
[168,186,155,160,164,0,159,179,154,155],
[171,166,160,165,168,181,0,167,173,165],
[184,185,159,161,154,161,173,0,168,154],
[173,180,167,180,170,186,167,172,0,194],
[181,175,180,178,185,185,175,186,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,173,161,188,179,172,173,177,179],
[157,0,169,161,174,175,165,170,175,181],
[167,171,0,156,176,174,166,173,170,177],
[179,179,184,0,179,178,174,181,170,181],
[152,166,164,161,0,154,153,178,158,173],
[161,165,166,162,186,0,167,180,156,175],
[168,175,174,166,187,173,0,174,162,189],
[167,170,167,159,162,160,166,0,160,190],
[163,165,170,170,182,184,178,180,0,179],
[161,159,163,159,167,165,151,150,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,181,177,188,197,186,157,177,171],
[162,0,171,176,183,211,180,175,173,174],
[159,169,0,173,197,214,174,161,171,157],
[163,164,167,0,188,222,196,170,179,164],
[152,157,143,152,0,212,171,153,162,160],
[143,129,126,118,128,0,128,135,158,130],
[154,160,166,144,169,212,0,135,174,136],
[183,165,179,170,187,205,205,0,178,170],
[163,167,169,161,178,182,166,162,0,145],
[169,166,183,176,180,210,204,170,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,145,150,136,154,143,158,154,130],
[179,0,174,170,141,202,178,192,184,170],
[195,166,0,194,164,195,197,170,196,151],
[190,170,146,0,152,177,154,159,202,132],
[204,199,176,188,0,188,182,166,200,164],
[186,138,145,163,152,0,158,178,172,134],
[197,162,143,186,158,182,0,196,173,176],
[182,148,170,181,174,162,144,0,175,157],
[186,156,144,138,140,168,167,165,0,159],
[210,170,189,208,176,206,164,183,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,166,178,184,171,181,202,180,181],
[160,0,170,174,193,176,172,177,166,173],
[174,170,0,176,171,177,172,174,169,167],
[162,166,164,0,177,174,170,169,167,165],
[156,147,169,163,0,157,146,157,163,160],
[169,164,163,166,183,0,167,173,176,158],
[159,168,168,170,194,173,0,173,173,158],
[138,163,166,171,183,167,167,0,161,158],
[160,174,171,173,177,164,167,179,0,174],
[159,167,173,175,180,182,182,182,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,179,183,176,171,169,164,175,181],
[159,0,171,181,156,152,162,158,172,171],
[161,169,0,167,160,165,159,148,162,178],
[157,159,173,0,164,163,163,149,166,163],
[164,184,180,176,0,171,171,167,176,174],
[169,188,175,177,169,0,177,171,170,181],
[171,178,181,177,169,163,0,157,177,186],
[176,182,192,191,173,169,183,0,179,185],
[165,168,178,174,164,170,163,161,0,173],
[159,169,162,177,166,159,154,155,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,162,181,160,146,170,170,171,173],
[162,0,144,176,163,155,179,159,179,177],
[178,196,0,168,177,157,171,184,191,181],
[159,164,172,0,181,173,183,170,203,177],
[180,177,163,159,0,158,160,156,172,182],
[194,185,183,167,182,0,196,180,191,183],
[170,161,169,157,180,144,0,189,169,171],
[170,181,156,170,184,160,151,0,198,171],
[169,161,149,137,168,149,171,142,0,167],
[167,163,159,163,158,157,169,169,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,182,202,151,181,171,198,170,173],
[181,0,175,182,178,213,164,213,177,165],
[158,165,0,189,131,174,152,172,154,168],
[138,158,151,0,159,165,142,194,136,189],
[189,162,209,181,0,181,167,192,152,191],
[159,127,166,175,159,0,154,179,149,166],
[169,176,188,198,173,186,0,167,192,187],
[142,127,168,146,148,161,173,0,141,154],
[170,163,186,204,188,191,148,199,0,192],
[167,175,172,151,149,174,153,186,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,175,158,165,168,174,156,160,154],
[175,0,178,159,171,191,177,166,176,186],
[165,162,0,151,163,159,171,154,168,160],
[182,181,189,0,179,181,193,168,177,177],
[175,169,177,161,0,181,175,174,170,165],
[172,149,181,159,159,0,176,166,165,160],
[166,163,169,147,165,164,0,167,165,155],
[184,174,186,172,166,174,173,0,180,178],
[180,164,172,163,170,175,175,160,0,159],
[186,154,180,163,175,180,185,162,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,132,182,186,180,230,175,160,151],
[163,0,129,208,206,200,196,167,180,180],
[208,211,0,241,174,203,266,192,146,204],
[158,132,99,0,172,136,160,127,96,171],
[154,134,166,168,0,184,205,131,146,134],
[160,140,137,204,156,0,227,162,148,152],
[110,144,74,180,135,113,0,154,118,133],
[165,173,148,213,209,178,186,0,142,184],
[180,160,194,244,194,192,222,198,0,194],
[189,160,136,169,206,188,207,156,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,171,183,190,174,168,193,176,179],
[160,0,154,166,187,162,162,183,166,161],
[169,186,0,188,203,177,189,185,192,184],
[157,174,152,0,177,171,168,173,164,170],
[150,153,137,163,0,163,156,148,150,161],
[166,178,163,169,177,0,165,175,165,172],
[172,178,151,172,184,175,0,168,167,159],
[147,157,155,167,192,165,172,0,167,162],
[164,174,148,176,190,175,173,173,0,151],
[161,179,156,170,179,168,181,178,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,174,190,189,184,170,160,168,171],
[173,0,165,189,182,178,177,165,152,168],
[166,175,0,181,177,175,157,170,170,162],
[150,151,159,0,164,157,139,161,129,139],
[151,158,163,176,0,154,157,158,157,144],
[156,162,165,183,186,0,158,163,155,154],
[170,163,183,201,183,182,0,173,156,155],
[180,175,170,179,182,177,167,0,174,156],
[172,188,170,211,183,185,184,166,0,167],
[169,172,178,201,196,186,185,184,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,201,148,111,158,167,181,170,155],
[160,0,195,174,179,150,157,145,172,121],
[139,145,0,101,136,103,127,100,178,106],
[192,166,239,0,194,205,200,123,183,202],
[229,161,204,146,0,131,181,168,174,165],
[182,190,237,135,209,0,185,173,184,184],
[173,183,213,140,159,155,0,188,164,164],
[159,195,240,217,172,167,152,0,153,220],
[170,168,162,157,166,156,176,187,0,197],
[185,219,234,138,175,156,176,120,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,162,163,169,160,160,165,160],
[176,0,174,161,173,171,163,165,163,167],
[161,166,0,167,169,170,161,157,166,177],
[178,179,173,0,169,172,177,174,172,186],
[177,167,171,171,0,174,169,167,164,172],
[171,169,170,168,166,0,163,166,163,180],
[180,177,179,163,171,177,0,181,167,176],
[180,175,183,166,173,174,159,0,168,174],
[175,177,174,168,176,177,173,172,0,171],
[180,173,163,154,168,160,164,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,186,190,161,165,174,162,167,152],
[175,0,163,185,167,173,175,170,173,178],
[154,177,0,179,154,156,173,169,175,163],
[150,155,161,0,151,164,169,162,178,155],
[179,173,186,189,0,185,181,193,186,164],
[175,167,184,176,155,0,184,188,196,160],
[166,165,167,171,159,156,0,169,183,149],
[178,170,171,178,147,152,171,0,184,152],
[173,167,165,162,154,144,157,156,0,158],
[188,162,177,185,176,180,191,188,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,150,149,159,155,146,150,161,173],
[170,0,165,155,146,165,167,171,149,189],
[190,175,0,170,162,176,171,180,165,191],
[191,185,170,0,169,178,177,180,181,204],
[181,194,178,171,0,177,177,168,184,219],
[185,175,164,162,163,0,174,160,173,190],
[194,173,169,163,163,166,0,162,167,197],
[190,169,160,160,172,180,178,0,170,187],
[179,191,175,159,156,167,173,170,0,195],
[167,151,149,136,121,150,143,153,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,199,199,180,187,173,163,172,162],
[143,0,176,152,161,147,138,147,143,162],
[141,164,0,144,128,161,141,144,139,148],
[141,188,196,0,165,187,149,185,176,177],
[160,179,212,175,0,177,179,174,145,194],
[153,193,179,153,163,0,165,150,135,143],
[167,202,199,191,161,175,0,181,179,172],
[177,193,196,155,166,190,159,0,175,177],
[168,197,201,164,195,205,161,165,0,182],
[178,178,192,163,146,197,168,163,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,157,154,157,152,159,157,148,165],
[169,0,159,162,152,149,163,156,157,157],
[183,181,0,184,160,164,179,178,174,165],
[186,178,156,0,166,157,176,167,166,167],
[183,188,180,174,0,162,177,186,173,170],
[188,191,176,183,178,0,181,186,167,176],
[181,177,161,164,163,159,0,176,150,162],
[183,184,162,173,154,154,164,0,168,164],
[192,183,166,174,167,173,190,172,0,177],
[175,183,175,173,170,164,178,176,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,170,154,155,148,187,147,178,148],
[178,0,169,168,157,161,185,160,192,178],
[170,171,0,149,140,153,189,169,176,171],
[186,172,191,0,155,161,193,175,166,177],
[185,183,200,185,0,170,202,183,190,186],
[192,179,187,179,170,0,219,182,203,187],
[153,155,151,147,138,121,0,146,178,161],
[193,180,171,165,157,158,194,0,196,178],
[162,148,164,174,150,137,162,144,0,155],
[192,162,169,163,154,153,179,162,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,150,168,159,179,156,172,172,167],
[179,0,167,182,170,181,165,183,170,166],
[190,173,0,179,164,178,182,189,180,161],
[172,158,161,0,160,163,153,170,174,164],
[181,170,176,180,0,177,163,186,178,173],
[161,159,162,177,163,0,147,161,172,154],
[184,175,158,187,177,193,0,187,181,177],
[168,157,151,170,154,179,153,0,158,156],
[168,170,160,166,162,168,159,182,0,160],
[173,174,179,176,167,186,163,184,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,111,206,170,147,141,153,186,135],
[255,0,212,255,233,118,150,199,194,132],
[229,128,0,227,271,185,191,218,248,160],
[134,85,113,0,85,89,121,128,163,55],
[170,107,69,255,0,114,140,226,156,139],
[193,222,155,251,226,0,195,256,156,210],
[199,190,149,219,200,145,0,204,147,71],
[187,141,122,212,114,84,136,0,142,142],
[154,146,92,177,184,184,193,198,0,145],
[205,208,180,285,201,130,269,198,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,153,206,182,188,172,167,210,167],
[149,0,174,215,222,166,105,181,193,185],
[187,166,0,153,215,175,143,147,228,139],
[134,125,187,0,172,174,111,150,198,159],
[158,118,125,168,0,135,86,134,151,125],
[152,174,165,166,205,0,139,183,165,163],
[168,235,197,229,254,201,0,240,233,169],
[173,159,193,190,206,157,100,0,186,185],
[130,147,112,142,189,175,107,154,0,130],
[173,155,201,181,215,177,171,155,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,182,166,189,155,166,210,202,151],
[166,0,158,176,213,190,173,210,188,183],
[158,182,0,117,178,145,172,160,143,141],
[174,164,223,0,206,207,189,232,198,143],
[151,127,162,134,0,154,187,190,200,118],
[185,150,195,133,186,0,177,183,182,131],
[174,167,168,151,153,163,0,189,185,148],
[130,130,180,108,150,157,151,0,136,149],
[138,152,197,142,140,158,155,204,0,113],
[189,157,199,197,222,209,192,191,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,194,170,190,175,180,191,192,193],
[137,0,151,152,162,142,153,142,153,156],
[146,189,0,158,163,162,183,167,163,171],
[170,188,182,0,183,179,173,163,179,178],
[150,178,177,157,0,167,161,156,168,164],
[165,198,178,161,173,0,178,168,180,184],
[160,187,157,167,179,162,0,165,167,161],
[149,198,173,177,184,172,175,0,179,176],
[148,187,177,161,172,160,173,161,0,162],
[147,184,169,162,176,156,179,164,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,185,200,162,145,182,163,196,167],
[162,0,185,195,179,171,166,171,172,175],
[155,155,0,179,156,142,161,158,180,159],
[140,145,161,0,138,146,153,151,182,161],
[178,161,184,202,0,158,154,142,187,170],
[195,169,198,194,182,0,188,178,200,198],
[158,174,179,187,186,152,0,172,185,200],
[177,169,182,189,198,162,168,0,202,158],
[144,168,160,158,153,140,155,138,0,172],
[173,165,181,179,170,142,140,182,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,162,152,168,161,165,152,167,174],
[164,0,155,169,161,158,183,170,168,172],
[178,185,0,170,171,175,192,172,173,175],
[188,171,170,0,158,173,192,160,187,171],
[172,179,169,182,0,174,189,175,167,183],
[179,182,165,167,166,0,196,156,166,169],
[175,157,148,148,151,144,0,147,154,158],
[188,170,168,180,165,184,193,0,174,176],
[173,172,167,153,173,174,186,166,0,182],
[166,168,165,169,157,171,182,164,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,152,160,178,165,186,177,178,161],
[163,0,165,169,177,158,184,165,176,160],
[188,175,0,167,184,164,193,160,191,149],
[180,171,173,0,191,194,182,164,184,168],
[162,163,156,149,0,160,170,170,159,133],
[175,182,176,146,180,0,175,147,175,160],
[154,156,147,158,170,165,0,188,161,176],
[163,175,180,176,170,193,152,0,179,166],
[162,164,149,156,181,165,179,161,0,149],
[179,180,191,172,207,180,164,174,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,170,166,184,162,187,173,182,180],
[181,0,167,186,206,170,177,172,184,183],
[170,173,0,189,183,168,164,165,180,172],
[174,154,151,0,183,168,177,174,167,176],
[156,134,157,157,0,146,157,152,156,163],
[178,170,172,172,194,0,180,168,171,177],
[153,163,176,163,183,160,0,173,156,171],
[167,168,175,166,188,172,167,0,173,185],
[158,156,160,173,184,169,184,167,0,188],
[160,157,168,164,177,163,169,155,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,103,166,208,186,185,166,186,163],
[167,0,119,202,148,170,206,145,170,174],
[237,221,0,224,202,202,198,215,240,161],
[174,138,116,0,130,182,154,105,107,144],
[132,192,138,210,0,155,180,187,177,177],
[154,170,138,158,185,0,138,143,151,151],
[155,134,142,186,160,202,0,153,190,134],
[174,195,125,235,153,197,187,0,161,204],
[154,170,100,233,163,189,150,179,0,166],
[177,166,179,196,163,189,206,136,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,185,181,172,190,168,173,183],
[170,0,167,177,164,173,178,177,174,184],
[178,173,0,185,161,163,184,165,169,179],
[155,163,155,0,159,158,171,152,178,154],
[159,176,179,181,0,164,182,174,165,176],
[168,167,177,182,176,0,174,157,173,180],
[150,162,156,169,158,166,0,157,168,169],
[172,163,175,188,166,183,183,0,164,181],
[167,166,171,162,175,167,172,176,0,164],
[157,156,161,186,164,160,171,159,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,176,160,176,163,177,165,169,178],
[174,0,177,173,181,177,187,184,162,169],
[164,163,0,154,180,164,169,172,173,177],
[180,167,186,0,185,175,164,174,173,194],
[164,159,160,155,0,165,176,170,174,157],
[177,163,176,165,175,0,176,167,178,178],
[163,153,171,176,164,164,0,185,164,164],
[175,156,168,166,170,173,155,0,163,173],
[171,178,167,167,166,162,176,177,0,173],
[162,171,163,146,183,162,176,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,170,171,180,160,167,170,186,171],
[155,0,170,161,162,168,161,150,166,153],
[170,170,0,149,161,178,165,153,176,161],
[169,179,191,0,174,164,164,156,189,182],
[160,178,179,166,0,179,174,165,179,168],
[180,172,162,176,161,0,165,157,185,174],
[173,179,175,176,166,175,0,148,177,169],
[170,190,187,184,175,183,192,0,191,176],
[154,174,164,151,161,155,163,149,0,151],
[169,187,179,158,172,166,171,164,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,145,174,157,161,150,164,171,159],
[196,0,171,190,168,180,159,192,166,181],
[195,169,0,171,166,172,170,180,176,166],
[166,150,169,0,173,172,160,187,157,176],
[183,172,174,167,0,167,167,178,179,175],
[179,160,168,168,173,0,160,181,172,170],
[190,181,170,180,173,180,0,195,178,179],
[176,148,160,153,162,159,145,0,155,148],
[169,174,164,183,161,168,162,185,0,168],
[181,159,174,164,165,170,161,192,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,182,168,170,189,164,186,184,159],
[180,0,206,168,177,180,170,190,164,173],
[158,134,0,161,146,175,143,163,151,153],
[172,172,179,0,166,179,161,172,179,166],
[170,163,194,174,0,178,176,190,167,177],
[151,160,165,161,162,0,146,166,176,152],
[176,170,197,179,164,194,0,164,180,175],
[154,150,177,168,150,174,176,0,172,172],
[156,176,189,161,173,164,160,168,0,164],
[181,167,187,174,163,188,165,168,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,170,173,189,177,179,188,181],
[166,0,170,168,163,176,178,180,162,162],
[161,170,0,174,163,170,166,172,185,171],
[170,172,166,0,168,169,161,175,184,167],
[167,177,177,172,0,173,167,181,175,184],
[151,164,170,171,167,0,158,174,172,160],
[163,162,174,179,173,182,0,176,184,177],
[161,160,168,165,159,166,164,0,152,170],
[152,178,155,156,165,168,156,188,0,160],
[159,178,169,173,156,180,163,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,180,180,170,168,175,203,189,163],
[178,0,175,163,175,175,165,175,194,165],
[160,165,0,159,156,173,165,185,186,164],
[160,177,181,0,159,177,174,189,208,156],
[170,165,184,181,0,177,166,194,179,153],
[172,165,167,163,163,0,187,179,183,157],
[165,175,175,166,174,153,0,186,201,181],
[137,165,155,151,146,161,154,0,166,139],
[151,146,154,132,161,157,139,174,0,144],
[177,175,176,184,187,183,159,201,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,147,147,143,164,150,115,167,167],
[193,0,179,206,157,171,192,174,179,217],
[193,161,0,175,146,177,170,152,156,185],
[193,134,165,0,146,160,147,148,144,166],
[197,183,194,194,0,156,178,171,163,183],
[176,169,163,180,184,0,173,133,178,207],
[190,148,170,193,162,167,0,159,168,176],
[225,166,188,192,169,207,181,0,200,195],
[173,161,184,196,177,162,172,140,0,176],
[173,123,155,174,157,133,164,145,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,144,158,160,143,174,167,164,168],
[164,0,158,148,159,163,180,167,164,189],
[196,182,0,165,180,180,195,190,189,194],
[182,192,175,0,172,175,187,181,168,190],
[180,181,160,168,0,161,196,189,170,201],
[197,177,160,165,179,0,162,167,158,185],
[166,160,145,153,144,178,0,167,168,176],
[173,173,150,159,151,173,173,0,160,173],
[176,176,151,172,170,182,172,180,0,185],
[172,151,146,150,139,155,164,167,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,169,174,171,165,151,184,168,190],
[188,0,176,181,177,172,166,175,155,182],
[171,164,0,187,182,177,154,183,158,180],
[166,159,153,0,158,163,155,171,174,163],
[169,163,158,182,0,174,158,166,161,176],
[175,168,163,177,166,0,159,179,167,180],
[189,174,186,185,182,181,0,178,165,181],
[156,165,157,169,174,161,162,0,156,170],
[172,185,182,166,179,173,175,184,0,177],
[150,158,160,177,164,160,159,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,162,158,160,160,167,177,160,157],
[184,0,168,168,167,157,194,197,189,161],
[178,172,0,179,165,148,182,161,170,139],
[182,172,161,0,163,170,166,186,187,152],
[180,173,175,177,0,149,168,160,186,178],
[180,183,192,170,191,0,176,177,188,169],
[173,146,158,174,172,164,0,177,168,163],
[163,143,179,154,180,163,163,0,170,154],
[180,151,170,153,154,152,172,170,0,135],
[183,179,201,188,162,171,177,186,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,183,169,171,192,174,183,173,169],
[170,0,191,190,163,177,183,177,173,168],
[157,149,0,168,149,161,169,167,180,160],
[171,150,172,0,154,168,179,168,174,153],
[169,177,191,186,0,189,181,195,187,173],
[148,163,179,172,151,0,182,168,169,158],
[166,157,171,161,159,158,0,176,160,163],
[157,163,173,172,145,172,164,0,154,155],
[167,167,160,166,153,171,180,186,0,165],
[171,172,180,187,167,182,177,185,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,225,243,274,225,128,243,340,225],
[115,0,115,115,115,115,177,115,274,115],
[115,225,0,128,159,159,128,18,225,225],
[97,225,212,0,97,212,225,18,159,181],
[66,225,181,243,0,225,128,84,225,181],
[115,225,181,128,115,0,225,18,225,181],
[212,163,212,115,212,115,0,115,212,163],
[97,225,322,322,256,322,225,0,225,225],
[0,66,115,181,115,115,128,115,0,84],
[115,225,115,159,159,159,177,115,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,160,159,155,153,143,163,162,152],
[169,0,167,165,168,167,166,176,158,168],
[180,173,0,181,170,175,171,182,169,163],
[181,175,159,0,170,172,162,159,171,167],
[185,172,170,170,0,172,164,171,163,174],
[187,173,165,168,168,0,168,179,167,164],
[197,174,169,178,176,172,0,173,174,181],
[177,164,158,181,169,161,167,0,176,172],
[178,182,171,169,177,173,166,164,0,167],
[188,172,177,173,166,176,159,168,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,161,168,154,166,166,166,172,155],
[182,0,170,174,180,192,180,174,168,160],
[179,170,0,175,175,183,175,166,173,164],
[172,166,165,0,171,182,179,151,172,167],
[186,160,165,169,0,174,170,158,170,170],
[174,148,157,158,166,0,173,173,153,155],
[174,160,165,161,170,167,0,158,180,156],
[174,166,174,189,182,167,182,0,176,165],
[168,172,167,168,170,187,160,164,0,188],
[185,180,176,173,170,185,184,175,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,188,205,211,172,169,202,198,189],
[141,0,146,168,165,150,147,180,160,141],
[152,194,0,190,188,164,170,202,173,149],
[135,172,150,0,186,152,157,171,167,157],
[129,175,152,154,0,149,142,154,144,137],
[168,190,176,188,191,0,173,198,183,147],
[171,193,170,183,198,167,0,190,179,175],
[138,160,138,169,186,142,150,0,148,125],
[142,180,167,173,196,157,161,192,0,167],
[151,199,191,183,203,193,165,215,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,153,141,182,134,123,123,141,176],
[127,0,147,176,162,125,141,132,120,176],
[187,193,0,183,195,113,147,164,180,161],
[199,164,157,0,214,159,126,167,157,189],
[158,178,145,126,0,111,143,132,138,171],
[206,215,227,181,229,0,164,191,198,225],
[217,199,193,214,197,176,0,159,184,209],
[217,208,176,173,208,149,181,0,206,205],
[199,220,160,183,202,142,156,134,0,195],
[164,164,179,151,169,115,131,135,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,189,167,205,176,194,172,163,186],
[168,0,193,151,181,149,175,129,171,164],
[151,147,0,159,168,142,154,146,131,169],
[173,189,181,0,183,153,171,171,141,195],
[135,159,172,157,0,143,162,133,118,164],
[164,191,198,187,197,0,171,176,146,209],
[146,165,186,169,178,169,0,140,151,181],
[168,211,194,169,207,164,200,0,172,199],
[177,169,209,199,222,194,189,168,0,197],
[154,176,171,145,176,131,159,141,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,190,183,168,185,164,184,190,167],
[170,0,190,190,181,190,174,195,187,178],
[150,150,0,170,171,169,155,179,161,162],
[157,150,170,0,174,176,147,168,178,169],
[172,159,169,166,0,175,145,167,178,165],
[155,150,171,164,165,0,148,171,180,163],
[176,166,185,193,195,192,0,204,188,187],
[156,145,161,172,173,169,136,0,170,158],
[150,153,179,162,162,160,152,170,0,162],
[173,162,178,171,175,177,153,182,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,196,162,176,205,167,177,172,167],
[144,0,120,118,137,152,118,142,148,108],
[144,220,0,169,141,141,162,154,146,167],
[178,222,171,0,163,185,142,151,139,146],
[164,203,199,177,0,213,172,194,181,194],
[135,188,199,155,127,0,156,180,156,204],
[173,222,178,198,168,184,0,166,144,154],
[163,198,186,189,146,160,174,0,162,174],
[168,192,194,201,159,184,196,178,0,193],
[173,232,173,194,146,136,186,166,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,161,218,134,239,196,208,190,200],
[144,0,171,245,180,279,222,243,242,213],
[179,169,0,194,136,219,192,184,202,213],
[122,95,146,0,77,194,118,155,168,153],
[206,160,204,263,0,277,236,242,248,216],
[101,61,121,146,63,0,124,167,152,145],
[144,118,148,222,104,216,0,169,208,180],
[132,97,156,185,98,173,171,0,137,167],
[150,98,138,172,92,188,132,203,0,172],
[140,127,127,187,124,195,160,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,190,199,231,162,187,178,202,201],
[154,0,181,185,202,159,199,171,185,200],
[150,159,0,175,194,134,163,153,162,175],
[141,155,165,0,206,145,174,177,177,195],
[109,138,146,134,0,133,135,116,152,149],
[178,181,206,195,207,0,153,143,193,194],
[153,141,177,166,205,187,0,173,187,185],
[162,169,187,163,224,197,167,0,175,204],
[138,155,178,163,188,147,153,165,0,181],
[139,140,165,145,191,146,155,136,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,165,133,148,144,171,134,144,162],
[184,0,171,174,169,153,197,163,170,160],
[175,169,0,177,143,145,182,151,165,171],
[207,166,163,0,146,152,191,166,149,178],
[192,171,197,194,0,166,190,187,185,206],
[196,187,195,188,174,0,199,184,169,184],
[169,143,158,149,150,141,0,167,144,149],
[206,177,189,174,153,156,173,0,181,175],
[196,170,175,191,155,171,196,159,0,175],
[178,180,169,162,134,156,191,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,167,194,175,197,203,195,181,218],
[147,0,159,152,161,145,171,164,160,180],
[173,181,0,156,186,193,171,200,186,190],
[146,188,184,0,168,181,181,170,183,203],
[165,179,154,172,0,200,178,196,176,202],
[143,195,147,159,140,0,169,178,184,188],
[137,169,169,159,162,171,0,159,176,183],
[145,176,140,170,144,162,181,0,155,164],
[159,180,154,157,164,156,164,185,0,179],
[122,160,150,137,138,152,157,176,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,152,176,156,147,154,173,175,171],
[195,0,140,180,164,168,173,160,194,167],
[188,200,0,209,183,194,179,180,224,170],
[164,160,131,0,158,136,140,144,167,174],
[184,176,157,182,0,177,183,201,206,199],
[193,172,146,204,163,0,188,196,196,181],
[186,167,161,200,157,152,0,162,215,159],
[167,180,160,196,139,144,178,0,194,163],
[165,146,116,173,134,144,125,146,0,134],
[169,173,170,166,141,159,181,177,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,161,160,166,177,155,160,153,151],
[166,0,184,173,162,166,163,161,171,156],
[179,156,0,166,169,167,164,161,168,149],
[180,167,174,0,177,188,170,171,176,168],
[174,178,171,163,0,179,168,175,161,157],
[163,174,173,152,161,0,162,164,159,143],
[185,177,176,170,172,178,0,163,166,146],
[180,179,179,169,165,176,177,0,172,170],
[187,169,172,164,179,181,174,168,0,165],
[189,184,191,172,183,197,194,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,188,167,164,179,165,188,165,181],
[153,0,152,119,150,171,163,168,161,146],
[152,188,0,162,169,179,169,182,152,183],
[173,221,178,0,185,201,169,176,176,181],
[176,190,171,155,0,184,171,191,175,183],
[161,169,161,139,156,0,149,159,143,147],
[175,177,171,171,169,191,0,193,194,196],
[152,172,158,164,149,181,147,0,148,158],
[175,179,188,164,165,197,146,192,0,187],
[159,194,157,159,157,193,144,182,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,174,151,161,179,175,169,168,167],
[140,0,153,143,168,171,158,148,145,165],
[166,187,0,172,167,178,151,142,168,165],
[189,197,168,0,171,177,161,155,165,185],
[179,172,173,169,0,167,174,161,160,179],
[161,169,162,163,173,0,165,168,156,184],
[165,182,189,179,166,175,0,154,172,195],
[171,192,198,185,179,172,186,0,170,202],
[172,195,172,175,180,184,168,170,0,179],
[173,175,175,155,161,156,145,138,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,173,221,107,129,150,202,103,59],
[260,0,205,241,229,299,280,205,115,249],
[167,135,0,115,185,185,166,192,250,206],
[119,99,225,0,78,78,99,97,143,111],
[233,111,155,262,0,247,280,226,144,222],
[211,41,155,262,93,0,170,226,148,160],
[190,60,174,241,60,170,0,183,163,138],
[138,135,148,243,114,114,157,0,229,114],
[237,225,90,197,196,192,177,111,0,204],
[281,91,134,229,118,180,202,226,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,177,180,176,184,183,162,154,168],
[160,0,160,197,174,192,151,167,165,176],
[163,180,0,185,180,183,184,165,178,170],
[160,143,155,0,162,155,159,138,145,138],
[164,166,160,178,0,169,162,144,159,146],
[156,148,157,185,171,0,148,139,152,165],
[157,189,156,181,178,192,0,178,166,181],
[178,173,175,202,196,201,162,0,173,174],
[186,175,162,195,181,188,174,167,0,163],
[172,164,170,202,194,175,159,166,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,196,182,174,166,151,167,220,168],
[168,0,197,163,145,156,152,184,220,213],
[144,143,0,166,139,145,130,165,200,177],
[158,177,174,0,177,167,173,195,226,197],
[166,195,201,163,0,192,147,182,193,202],
[174,184,195,173,148,0,144,187,197,210],
[189,188,210,167,193,196,0,196,225,229],
[173,156,175,145,158,153,144,0,202,166],
[120,120,140,114,147,143,115,138,0,138],
[172,127,163,143,138,130,111,174,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,200,175,211,177,182,221,180,170],
[172,0,194,156,177,225,232,214,152,131],
[140,146,0,147,159,199,148,175,157,164],
[165,184,193,0,180,229,186,177,163,175],
[129,163,181,160,0,216,175,162,147,165],
[163,115,141,111,124,0,150,173,87,111],
[158,108,192,154,165,190,0,154,152,147],
[119,126,165,163,178,167,186,0,131,140],
[160,188,183,177,193,253,188,209,0,196],
[170,209,176,165,175,229,193,200,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,169,163,149,154,160,165,171,142],
[164,0,170,171,147,161,167,176,167,150],
[171,170,0,164,157,158,163,170,174,155],
[177,169,176,0,172,160,178,184,184,166],
[191,193,183,168,0,166,186,168,196,162],
[186,179,182,180,174,0,181,172,195,170],
[180,173,177,162,154,159,0,164,175,163],
[175,164,170,156,172,168,176,0,192,158],
[169,173,166,156,144,145,165,148,0,158],
[198,190,185,174,178,170,177,182,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,163,165,161,163,177,172,154],
[162,0,163,161,165,151,158,167,164,160],
[167,177,0,171,161,155,159,173,167,158],
[177,179,169,0,162,170,158,171,167,170],
[175,175,179,178,0,177,157,177,181,171],
[179,189,185,170,163,0,169,175,180,166],
[177,182,181,182,183,171,0,181,182,165],
[163,173,167,169,163,165,159,0,173,157],
[168,176,173,173,159,160,158,167,0,166],
[186,180,182,170,169,174,175,183,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,179,180,171,177,174,188,176,168],
[156,0,163,173,172,168,160,176,181,161],
[161,177,0,180,171,184,165,176,178,153],
[160,167,160,0,159,167,162,185,174,159],
[169,168,169,181,0,165,161,186,181,173],
[163,172,156,173,175,0,165,185,168,169],
[166,180,175,178,179,175,0,181,173,159],
[152,164,164,155,154,155,159,0,153,150],
[164,159,162,166,159,172,167,187,0,157],
[172,179,187,181,167,171,181,190,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,171,171,175,186,189,197,161,164],
[181,0,154,176,176,184,218,182,148,144],
[169,186,0,174,151,158,185,200,177,180],
[169,164,166,0,188,179,193,191,145,160],
[165,164,189,152,0,158,180,191,179,192],
[154,156,182,161,182,0,214,175,161,173],
[151,122,155,147,160,126,0,165,154,165],
[143,158,140,149,149,165,175,0,171,143],
[179,192,163,195,161,179,186,169,0,166],
[176,196,160,180,148,167,175,197,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,153,181,185,180,168,184,145,241],
[185,0,167,123,155,173,179,147,168,175],
[187,173,0,156,156,149,161,161,142,171],
[159,217,184,0,207,159,128,178,190,170],
[155,185,184,133,0,177,148,169,178,158],
[160,167,191,181,163,0,147,143,122,180],
[172,161,179,212,192,193,0,152,178,207],
[156,193,179,162,171,197,188,0,110,181],
[195,172,198,150,162,218,162,230,0,160],
[99,165,169,170,182,160,133,159,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,177,207,199,191,167,181,178,173],
[134,0,180,181,164,191,160,158,173,156],
[163,160,0,189,147,184,163,162,153,160],
[133,159,151,0,131,172,171,153,133,140],
[141,176,193,209,0,186,183,193,156,193],
[149,149,156,168,154,0,161,159,150,159],
[173,180,177,169,157,179,0,182,145,168],
[159,182,178,187,147,181,158,0,146,147],
[162,167,187,207,184,190,195,194,0,169],
[167,184,180,200,147,181,172,193,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,172,175,170,170,179,178,178,161],
[158,0,158,166,166,158,172,152,159,161],
[168,182,0,177,179,177,173,169,180,167],
[165,174,163,0,169,155,165,161,173,144],
[170,174,161,171,0,153,169,148,170,146],
[170,182,163,185,187,0,174,161,171,169],
[161,168,167,175,171,166,0,157,165,155],
[162,188,171,179,192,179,183,0,188,155],
[162,181,160,167,170,169,175,152,0,173],
[179,179,173,196,194,171,185,185,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,153,162,177,174,185,164,185,177],
[167,0,164,154,175,180,170,175,176,172],
[187,176,0,170,177,187,192,190,193,186],
[178,186,170,0,168,157,184,180,188,181],
[163,165,163,172,0,173,158,178,184,183],
[166,160,153,183,167,0,168,174,169,177],
[155,170,148,156,182,172,0,172,174,159],
[176,165,150,160,162,166,168,0,175,166],
[155,164,147,152,156,171,166,165,0,166],
[163,168,154,159,157,163,181,174,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,186,173,145,147,126,147,155,131],
[165,0,169,206,202,145,231,207,148,187],
[154,171,0,198,150,143,148,185,101,151],
[167,134,142,0,84,104,114,179,102,140],
[195,138,190,256,0,148,138,182,209,161],
[193,195,197,236,192,0,169,174,168,191],
[214,109,192,226,202,171,0,176,159,200],
[193,133,155,161,158,166,164,0,132,232],
[185,192,239,238,131,172,181,208,0,203],
[209,153,189,200,179,149,140,108,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,179,186,221,203,166,184,161,163],
[163,0,188,170,211,198,210,186,138,172],
[161,152,0,130,195,180,183,187,134,130],
[154,170,210,0,216,193,183,204,164,142],
[119,129,145,124,0,147,143,152,136,114],
[137,142,160,147,193,0,156,184,136,125],
[174,130,157,157,197,184,0,163,162,131],
[156,154,153,136,188,156,177,0,144,120],
[179,202,206,176,204,204,178,196,0,149],
[177,168,210,198,226,215,209,220,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,172,156,165,162,175,171,174,158],
[189,0,180,182,164,175,176,170,179,168],
[168,160,0,148,152,153,163,163,153,150],
[184,158,192,0,170,177,166,169,172,163],
[175,176,188,170,0,163,185,181,166,177],
[178,165,187,163,177,0,174,157,170,152],
[165,164,177,174,155,166,0,167,173,162],
[169,170,177,171,159,183,173,0,173,171],
[166,161,187,168,174,170,167,167,0,169],
[182,172,190,177,163,188,178,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,179,183,173,181,177,185,188,166],
[160,0,169,182,170,158,156,166,178,174],
[161,171,0,196,183,179,163,166,161,153],
[157,158,144,0,162,157,153,166,167,142],
[167,170,157,178,0,170,170,162,160,135],
[159,182,161,183,170,0,161,175,167,156],
[163,184,177,187,170,179,0,179,184,174],
[155,174,174,174,178,165,161,0,183,152],
[152,162,179,173,180,173,156,157,0,143],
[174,166,187,198,205,184,166,188,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,160,164,175,172,164,158,174,158],
[184,0,171,166,177,168,172,174,172,157],
[180,169,0,170,179,175,178,169,172,174],
[176,174,170,0,183,178,163,161,165,154],
[165,163,161,157,0,168,185,169,176,159],
[168,172,165,162,172,0,145,165,178,162],
[176,168,162,177,155,195,0,158,169,175],
[182,166,171,179,171,175,182,0,177,166],
[166,168,168,175,164,162,171,163,0,169],
[182,183,166,186,181,178,165,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,178,176,184,187,171,168,160,178],
[156,0,160,175,159,180,175,164,146,160],
[162,180,0,168,171,172,173,165,169,172],
[164,165,172,0,184,185,175,173,154,161],
[156,181,169,156,0,168,162,156,153,166],
[153,160,168,155,172,0,171,162,144,136],
[169,165,167,165,178,169,0,163,165,164],
[172,176,175,167,184,178,177,0,164,176],
[180,194,171,186,187,196,175,176,0,156],
[162,180,168,179,174,204,176,164,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,170,173,150,162,158,170,162,169],
[180,0,172,162,176,170,173,168,170,172],
[170,168,0,167,162,166,160,188,152,183],
[167,178,173,0,165,161,170,182,177,175],
[190,164,178,175,0,182,172,178,181,177],
[178,170,174,179,158,0,172,183,171,185],
[182,167,180,170,168,168,0,191,165,175],
[170,172,152,158,162,157,149,0,165,167],
[178,170,188,163,159,169,175,175,0,177],
[171,168,157,165,163,155,165,173,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,166,162,176,157,169,171,176,170],
[163,0,164,170,163,170,180,162,183,155],
[174,176,0,185,174,161,189,176,185,168],
[178,170,155,0,180,161,178,161,180,167],
[164,177,166,160,0,151,193,168,177,163],
[183,170,179,179,189,0,187,174,190,177],
[171,160,151,162,147,153,0,164,181,171],
[169,178,164,179,172,166,176,0,173,163],
[164,157,155,160,163,150,159,167,0,150],
[170,185,172,173,177,163,169,177,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,178,181,206,165,184,176,171,181],
[153,0,159,166,193,157,189,188,156,181],
[162,181,0,161,177,167,181,177,170,167],
[159,174,179,0,195,175,186,190,159,184],
[134,147,163,145,0,159,167,160,150,166],
[175,183,173,165,181,0,180,194,148,178],
[156,151,159,154,173,160,0,163,141,168],
[164,152,163,150,180,146,177,0,155,170],
[169,184,170,181,190,192,199,185,0,191],
[159,159,173,156,174,162,172,170,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,173,170,174,189,169,168,186,171],
[180,0,183,170,171,193,169,164,148,171],
[167,157,0,170,169,180,166,155,155,160],
[170,170,170,0,165,183,171,164,171,166],
[166,169,171,175,0,193,169,173,165,162],
[151,147,160,157,147,0,149,145,139,142],
[171,171,174,169,171,191,0,169,175,175],
[172,176,185,176,167,195,171,0,170,173],
[154,192,185,169,175,201,165,170,0,156],
[169,169,180,174,178,198,165,167,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,171,165,187,183,166,144,181,172],
[187,0,157,152,160,173,158,156,169,178],
[169,183,0,182,181,180,164,171,181,173],
[175,188,158,0,171,202,159,147,194,164],
[153,180,159,169,0,193,157,139,184,156],
[157,167,160,138,147,0,127,122,168,164],
[174,182,176,181,183,213,0,154,194,174],
[196,184,169,193,201,218,186,0,204,172],
[159,171,159,146,156,172,146,136,0,178],
[168,162,167,176,184,176,166,168,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,159,190,233,226,226,203,202,185],
[92,0,99,156,91,161,132,81,109,115],
[181,241,0,257,166,240,237,135,207,188],
[150,184,83,0,130,200,140,76,140,78],
[107,249,174,210,0,208,246,91,201,173],
[114,179,100,140,132,0,192,95,120,110],
[114,208,103,200,94,148,0,50,179,132],
[137,259,205,264,249,245,290,0,219,207],
[138,231,133,200,139,220,161,121,0,160],
[155,225,152,262,167,230,208,133,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,191,209,167,232,226,188,223,126],
[153,0,183,216,275,241,218,211,197,207],
[149,157,0,154,176,189,192,159,160,108],
[131,124,186,0,207,210,191,197,203,150],
[173,65,164,133,0,189,138,142,193,123],
[108,99,151,130,151,0,128,135,123,115],
[114,122,148,149,202,212,0,186,215,147],
[152,129,181,143,198,205,154,0,180,132],
[117,143,180,137,147,217,125,160,0,125],
[214,133,232,190,217,225,193,208,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,173,158,175,184,176,161,152,169],
[167,0,147,160,171,166,163,167,153,160],
[167,193,0,174,179,175,180,171,158,165],
[182,180,166,0,170,180,178,174,170,174],
[165,169,161,170,0,176,173,154,169,154],
[156,174,165,160,164,0,162,161,151,155],
[164,177,160,162,167,178,0,168,168,161],
[179,173,169,166,186,179,172,0,155,160],
[188,187,182,170,171,189,172,185,0,161],
[171,180,175,166,186,185,179,180,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,204,190,181,189,184,220,150,185],
[172,0,192,205,168,167,203,194,160,222],
[136,148,0,199,121,186,173,180,134,150],
[150,135,141,0,120,148,162,171,140,173],
[159,172,219,220,0,198,180,173,177,206],
[151,173,154,192,142,0,189,202,138,176],
[156,137,167,178,160,151,0,165,147,185],
[120,146,160,169,167,138,175,0,148,183],
[190,180,206,200,163,202,193,192,0,183],
[155,118,190,167,134,164,155,157,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,144,168,176,169,172,169,174,182],
[166,0,163,151,188,178,174,169,173,165],
[196,177,0,170,210,201,180,181,193,177],
[172,189,170,0,205,191,185,186,183,182],
[164,152,130,135,0,166,151,162,171,164],
[171,162,139,149,174,0,163,163,174,159],
[168,166,160,155,189,177,0,172,176,157],
[171,171,159,154,178,177,168,0,171,166],
[166,167,147,157,169,166,164,169,0,158],
[158,175,163,158,176,181,183,174,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,161,170,187,175,155,166,158,172],
[153,0,167,169,169,186,190,188,155,185],
[179,173,0,166,184,179,190,177,157,185],
[170,171,174,0,179,184,159,190,174,184],
[153,171,156,161,0,147,161,188,169,174],
[165,154,161,156,193,0,165,163,157,178],
[185,150,150,181,179,175,0,171,166,187],
[174,152,163,150,152,177,169,0,166,179],
[182,185,183,166,171,183,174,174,0,194],
[168,155,155,156,166,162,153,161,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,163,176,152,149,169,167,178,157],
[184,0,171,190,165,168,193,190,188,174],
[177,169,0,182,170,168,175,197,185,179],
[164,150,158,0,145,152,164,150,161,155],
[188,175,170,195,0,176,184,177,190,182],
[191,172,172,188,164,0,177,178,183,165],
[171,147,165,176,156,163,0,178,170,161],
[173,150,143,190,163,162,162,0,161,164],
[162,152,155,179,150,157,170,179,0,166],
[183,166,161,185,158,175,179,176,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,158,157,182,173,179,173,207,173],
[166,0,161,149,167,158,187,161,168,161],
[182,179,0,143,175,177,189,192,199,167],
[183,191,197,0,177,170,211,189,226,190],
[158,173,165,163,0,162,186,161,192,162],
[167,182,163,170,178,0,183,163,179,165],
[161,153,151,129,154,157,0,148,163,150],
[167,179,148,151,179,177,192,0,198,160],
[133,172,141,114,148,161,177,142,0,149],
[167,179,173,150,178,175,190,180,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,166,171,176,174,176,165,167,181],
[176,0,180,172,177,174,183,167,165,178],
[174,160,0,162,168,173,174,183,172,179],
[169,168,178,0,172,184,159,185,168,191],
[164,163,172,168,0,163,165,176,169,169],
[166,166,167,156,177,0,174,172,170,177],
[164,157,166,181,175,166,0,183,183,181],
[175,173,157,155,164,168,157,0,169,168],
[173,175,168,172,171,170,157,171,0,174],
[159,162,161,149,171,163,159,172,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,182,176,180,162,170,173,175,165],
[165,0,183,189,165,182,194,187,160,180],
[158,157,0,158,170,155,155,144,149,152],
[164,151,182,0,168,169,175,161,159,174],
[160,175,170,172,0,164,169,158,163,176],
[178,158,185,171,176,0,160,167,173,175],
[170,146,185,165,171,180,0,163,143,158],
[167,153,196,179,182,173,177,0,180,185],
[165,180,191,181,177,167,197,160,0,170],
[175,160,188,166,164,165,182,155,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,170,162,153,172,146,156,186,163],
[184,0,154,172,176,167,163,175,200,168],
[170,186,0,162,144,161,153,176,178,169],
[178,168,178,0,146,179,156,153,173,177],
[187,164,196,194,0,169,175,176,193,166],
[168,173,179,161,171,0,173,177,186,178],
[194,177,187,184,165,167,0,158,195,189],
[184,165,164,187,164,163,182,0,203,175],
[154,140,162,167,147,154,145,137,0,131],
[177,172,171,163,174,162,151,165,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,191,158,165,150,146,172,176,179],
[203,0,190,183,158,181,182,171,183,175],
[149,150,0,131,145,145,151,163,160,162],
[182,157,209,0,171,174,167,194,172,173],
[175,182,195,169,0,145,169,191,179,200],
[190,159,195,166,195,0,176,185,173,207],
[194,158,189,173,171,164,0,190,187,171],
[168,169,177,146,149,155,150,0,178,173],
[164,157,180,168,161,167,153,162,0,160],
[161,165,178,167,140,133,169,167,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,162,195,76,149,241,112,162,70],
[179,0,297,256,255,211,175,179,150,179],
[178,43,0,294,197,107,213,122,143,43],
[145,84,46,0,49,84,220,50,46,88],
[264,85,143,291,0,189,260,130,151,146],
[191,129,233,256,151,0,176,84,97,141],
[99,165,127,120,80,164,0,51,123,43],
[228,161,218,290,210,256,289,0,199,110],
[178,190,197,294,189,243,217,141,0,178],
[270,161,297,252,194,199,297,230,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,171,164,165,176,180,168,172],
[174,0,169,164,156,177,165,178,166,181],
[174,171,0,172,164,169,167,170,164,176],
[169,176,168,0,157,174,182,175,172,169],
[176,184,176,183,0,164,171,183,180,191],
[175,163,171,166,176,0,181,185,175,178],
[164,175,173,158,169,159,0,175,164,176],
[160,162,170,165,157,155,165,0,167,160],
[172,174,176,168,160,165,176,173,0,183],
[168,159,164,171,149,162,164,180,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,184,185,175,196,160,177,165],
[174,0,180,164,192,151,170,152,160,162],
[171,160,0,152,179,156,175,151,165,153],
[156,176,188,0,188,166,182,159,174,168],
[155,148,161,152,0,154,156,141,159,144],
[165,189,184,174,186,0,203,164,169,189],
[144,170,165,158,184,137,0,159,160,153],
[180,188,189,181,199,176,181,0,192,163],
[163,180,175,166,181,171,180,148,0,170],
[175,178,187,172,196,151,187,177,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,167,159,169,169,185,166,169,163],
[172,0,165,173,165,174,177,160,184,157],
[173,175,0,173,178,166,191,180,167,168],
[181,167,167,0,177,165,176,174,184,175],
[171,175,162,163,0,165,175,164,186,159],
[171,166,174,175,175,0,181,162,169,173],
[155,163,149,164,165,159,0,156,164,161],
[174,180,160,166,176,178,184,0,181,167],
[171,156,173,156,154,171,176,159,0,159],
[177,183,172,165,181,167,179,173,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,165,161,156,179,161,161,177,165],
[173,0,156,175,170,193,167,161,179,173],
[175,184,0,163,182,182,173,169,180,176],
[179,165,177,0,169,182,168,166,179,158],
[184,170,158,171,0,195,174,169,185,176],
[161,147,158,158,145,0,157,140,158,161],
[179,173,167,172,166,183,0,158,180,163],
[179,179,171,174,171,200,182,0,178,168],
[163,161,160,161,155,182,160,162,0,164],
[175,167,164,182,164,179,177,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,158,137,175,146,157,179,167,171],
[191,0,177,157,175,140,167,190,171,190],
[182,163,0,127,143,139,127,149,163,167],
[203,183,213,0,196,181,170,191,171,202],
[165,165,197,144,0,169,156,178,159,187],
[194,200,201,159,171,0,183,183,179,192],
[183,173,213,170,184,157,0,174,183,188],
[161,150,191,149,162,157,166,0,159,181],
[173,169,177,169,181,161,157,181,0,156],
[169,150,173,138,153,148,152,159,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,174,179,165,178,177,154,161,155],
[180,0,179,171,165,183,167,174,175,191],
[166,161,0,176,151,163,158,133,146,174],
[161,169,164,0,166,166,169,131,156,165],
[175,175,189,174,0,187,175,162,168,162],
[162,157,177,174,153,0,167,133,156,163],
[163,173,182,171,165,173,0,161,184,172],
[186,166,207,209,178,207,179,0,176,190],
[179,165,194,184,172,184,156,164,0,169],
[185,149,166,175,178,177,168,150,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,179,146,152,132,168,152,145,144],
[179,0,181,188,183,139,191,164,174,174],
[161,159,0,156,161,146,197,160,148,169],
[194,152,184,0,189,170,174,161,162,152],
[188,157,179,151,0,158,191,146,144,139],
[208,201,194,170,182,0,219,166,210,177],
[172,149,143,166,149,121,0,157,141,126],
[188,176,180,179,194,174,183,0,180,150],
[195,166,192,178,196,130,199,160,0,162],
[196,166,171,188,201,163,214,190,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,160,162,184,146,168,178,239,245],
[117,0,59,145,113,161,148,112,131,183],
[180,281,0,227,257,169,208,175,225,242],
[178,195,113,0,123,176,155,118,184,215],
[156,227,83,217,0,140,198,168,219,210],
[194,179,171,164,200,0,147,150,205,272],
[172,192,132,185,142,193,0,177,222,244],
[162,228,165,222,172,190,163,0,223,219],
[101,209,115,156,121,135,118,117,0,173],
[95,157,98,125,130,68,96,121,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,156,143,144,158,187,154,184,152],
[160,0,147,121,134,157,164,149,192,126],
[184,193,0,164,145,171,176,181,202,163],
[197,219,176,0,181,169,200,172,216,188],
[196,206,195,159,0,178,193,183,208,180],
[182,183,169,171,162,0,167,152,212,176],
[153,176,164,140,147,173,0,168,196,148],
[186,191,159,168,157,188,172,0,198,161],
[156,148,138,124,132,128,144,142,0,141],
[188,214,177,152,160,164,192,179,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,160,173,164,159,173,174,150,169],
[176,0,179,168,157,176,155,171,175,167],
[180,161,0,182,169,167,176,171,148,181],
[167,172,158,0,169,169,162,175,161,179],
[176,183,171,171,0,161,158,178,170,187],
[181,164,173,171,179,0,160,182,160,177],
[167,185,164,178,182,180,0,161,167,165],
[166,169,169,165,162,158,179,0,147,165],
[190,165,192,179,170,180,173,193,0,186],
[171,173,159,161,153,163,175,175,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,173,173,176,185,187,165,185,175],
[163,0,168,176,180,168,170,165,186,161],
[167,172,0,161,167,168,167,161,176,164],
[167,164,179,0,175,174,173,164,178,158],
[164,160,173,165,0,166,166,162,167,160],
[155,172,172,166,174,0,175,163,166,168],
[153,170,173,167,174,165,0,160,175,159],
[175,175,179,176,178,177,180,0,177,170],
[155,154,164,162,173,174,165,163,0,157],
[165,179,176,182,180,172,181,170,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,166,146,160,168,174,150,139,174],
[192,0,159,159,197,184,149,186,167,177],
[174,181,0,153,194,182,178,189,186,193],
[194,181,187,0,171,172,188,148,180,182],
[180,143,146,169,0,149,169,170,167,161],
[172,156,158,168,191,0,172,163,179,192],
[166,191,162,152,171,168,0,146,177,149],
[190,154,151,192,170,177,194,0,165,211],
[201,173,154,160,173,161,163,175,0,225],
[166,163,147,158,179,148,191,129,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,174,175,174,178,182,177,174,200],
[174,0,178,176,160,182,174,178,172,175],
[166,162,0,177,171,186,178,181,168,167],
[165,164,163,0,167,179,167,187,157,177],
[166,180,169,173,0,183,174,167,169,163],
[162,158,154,161,157,0,168,173,150,155],
[158,166,162,173,166,172,0,173,160,164],
[163,162,159,153,173,167,167,0,163,164],
[166,168,172,183,171,190,180,177,0,168],
[140,165,173,163,177,185,176,176,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,178,180,169,173,177,178,171,177],
[167,0,171,172,176,171,177,164,171,167],
[162,169,0,172,166,165,167,164,154,168],
[160,168,168,0,162,155,173,165,164,159],
[171,164,174,178,0,174,177,170,166,164],
[167,169,175,185,166,0,166,172,159,174],
[163,163,173,167,163,174,0,170,161,173],
[162,176,176,175,170,168,170,0,164,179],
[169,169,186,176,174,181,179,176,0,162],
[163,173,172,181,176,166,167,161,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,165,159,187,159,169,182,183,173],
[164,0,169,158,168,173,169,180,163,165],
[175,171,0,164,178,170,158,196,154,180],
[181,182,176,0,173,170,157,187,170,171],
[153,172,162,167,0,168,166,176,146,155],
[181,167,170,170,172,0,147,193,168,158],
[171,171,182,183,174,193,0,186,169,186],
[158,160,144,153,164,147,154,0,145,157],
[157,177,186,170,194,172,171,195,0,165],
[167,175,160,169,185,182,154,183,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,165,186,158,179,204,176,129,192],
[177,0,165,191,138,150,147,131,119,132],
[175,175,0,159,149,141,182,151,170,180],
[154,149,181,0,155,124,195,170,169,206],
[182,202,191,185,0,109,193,140,149,154],
[161,190,199,216,231,0,192,176,157,191],
[136,193,158,145,147,148,0,107,149,174],
[164,209,189,170,200,164,233,0,164,184],
[211,221,170,171,191,183,191,176,0,173],
[148,208,160,134,186,149,166,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,158,166,168,175,137,162,175,150],
[189,0,160,176,154,177,162,173,189,167],
[182,180,0,190,175,150,152,178,208,167],
[174,164,150,0,143,154,133,155,176,151],
[172,186,165,197,0,179,180,174,196,188],
[165,163,190,186,161,0,156,168,183,161],
[203,178,188,207,160,184,0,181,206,185],
[178,167,162,185,166,172,159,0,181,163],
[165,151,132,164,144,157,134,159,0,151],
[190,173,173,189,152,179,155,177,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,173,159,181,180,176,175,169,172],
[147,0,167,155,160,161,155,155,154,150],
[167,173,0,170,169,163,170,163,168,160],
[181,185,170,0,177,179,188,172,174,167],
[159,180,171,163,0,168,178,163,157,164],
[160,179,177,161,172,0,152,154,147,163],
[164,185,170,152,162,188,0,170,167,166],
[165,185,177,168,177,186,170,0,158,172],
[171,186,172,166,183,193,173,182,0,176],
[168,190,180,173,176,177,174,168,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,157,182,162,166,167,175,182,199],
[169,0,144,171,154,165,147,147,159,169],
[183,196,0,189,183,174,174,169,180,170],
[158,169,151,0,162,164,156,164,166,168],
[178,186,157,178,0,154,175,172,182,187],
[174,175,166,176,186,0,179,164,183,187],
[173,193,166,184,165,161,0,167,186,184],
[165,193,171,176,168,176,173,0,188,190],
[158,181,160,174,158,157,154,152,0,179],
[141,171,170,172,153,153,156,150,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,157,163,166,175,159,173,153,162],
[161,0,162,169,160,187,175,167,170,169],
[183,178,0,165,170,176,177,173,174,183],
[177,171,175,0,159,174,170,161,181,159],
[174,180,170,181,0,192,189,170,172,180],
[165,153,164,166,148,0,167,171,161,154],
[181,165,163,170,151,173,0,167,158,173],
[167,173,167,179,170,169,173,0,165,177],
[187,170,166,159,168,179,182,175,0,181],
[178,171,157,181,160,186,167,163,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,118,114,182,145,125,134,115,148],
[227,0,177,176,206,180,191,175,175,168],
[222,163,0,160,187,165,177,172,179,179],
[226,164,180,0,205,186,195,155,182,171],
[158,134,153,135,0,143,145,144,147,161],
[195,160,175,154,197,0,171,178,158,176],
[215,149,163,145,195,169,0,167,169,173],
[206,165,168,185,196,162,173,0,151,200],
[225,165,161,158,193,182,171,189,0,181],
[192,172,161,169,179,164,167,140,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,152,146,163,190,165,202,175,178],
[153,0,155,161,170,169,166,146,195,145],
[188,185,0,199,121,191,159,168,175,158],
[194,179,141,0,156,154,146,158,177,170],
[177,170,219,184,0,219,169,178,173,167],
[150,171,149,186,121,0,172,141,159,156],
[175,174,181,194,171,168,0,181,171,174],
[138,194,172,182,162,199,159,0,198,171],
[165,145,165,163,167,181,169,142,0,146],
[162,195,182,170,173,184,166,169,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,141,156,170,149,136,160,179,167],
[195,0,167,171,189,164,151,174,186,170],
[199,173,0,177,198,169,176,157,172,196],
[184,169,163,0,181,173,148,186,158,180],
[170,151,142,159,0,165,140,151,148,161],
[191,176,171,167,175,0,165,186,169,175],
[204,189,164,192,200,175,0,201,191,199],
[180,166,183,154,189,154,139,0,162,174],
[161,154,168,182,192,171,149,178,0,183],
[173,170,144,160,179,165,141,166,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,129,121,171,125,186,148,150,165],
[191,0,132,151,188,165,254,205,180,240],
[211,208,0,116,173,171,210,210,191,191],
[219,189,224,0,179,206,183,205,167,181],
[169,152,167,161,0,204,219,196,139,238],
[215,175,169,134,136,0,170,201,155,187],
[154,86,130,157,121,170,0,167,94,156],
[192,135,130,135,144,139,173,0,145,188],
[190,160,149,173,201,185,246,195,0,181],
[175,100,149,159,102,153,184,152,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,171,191,168,163,190,154,178],
[169,0,174,176,187,176,180,172,160,193],
[166,166,0,179,189,175,176,167,155,177],
[169,164,161,0,172,158,149,172,167,167],
[149,153,151,168,0,161,172,161,170,171],
[172,164,165,182,179,0,165,191,168,189],
[177,160,164,191,168,175,0,195,174,176],
[150,168,173,168,179,149,145,0,167,166],
[186,180,185,173,170,172,166,173,0,184],
[162,147,163,173,169,151,164,174,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,210,183,187,190,201,202,159,188],
[116,0,156,152,146,139,128,158,125,141],
[130,184,0,162,177,152,171,192,160,170],
[157,188,178,0,177,149,175,188,153,177],
[153,194,163,163,0,157,169,170,128,170],
[150,201,188,191,183,0,188,215,171,192],
[139,212,169,165,171,152,0,175,152,156],
[138,182,148,152,170,125,165,0,132,156],
[181,215,180,187,212,169,188,208,0,205],
[152,199,170,163,170,148,184,184,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,170,152,174,168,173,183,160,166],
[159,0,158,147,165,167,160,160,167,157],
[170,182,0,159,155,157,171,170,161,170],
[188,193,181,0,165,184,184,188,184,184],
[166,175,185,175,0,173,182,183,182,186],
[172,173,183,156,167,0,185,171,166,182],
[167,180,169,156,158,155,0,163,166,176],
[157,180,170,152,157,169,177,0,163,175],
[180,173,179,156,158,174,174,177,0,170],
[174,183,170,156,154,158,164,165,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,195,161,174,188,183,164,187,177],
[136,0,167,160,174,161,154,155,186,131],
[145,173,0,155,192,182,160,159,180,159],
[179,180,185,0,187,181,190,169,174,170],
[166,166,148,153,0,165,145,134,158,142],
[152,179,158,159,175,0,163,134,149,142],
[157,186,180,150,195,177,0,149,189,150],
[176,185,181,171,206,206,191,0,198,168],
[153,154,160,166,182,191,151,142,0,146],
[163,209,181,170,198,198,190,172,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,180,178,176,182,170,160,173,167],
[174,0,181,184,186,172,179,172,158,175],
[160,159,0,171,167,191,163,170,163,173],
[162,156,169,0,167,179,170,172,161,177],
[164,154,173,173,0,177,170,179,161,165],
[158,168,149,161,163,0,164,170,156,168],
[170,161,177,170,170,176,0,174,168,158],
[180,168,170,168,161,170,166,0,158,174],
[167,182,177,179,179,184,172,182,0,180],
[173,165,167,163,175,172,182,166,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,162,160,152,167,174,160,156,169],
[173,0,162,168,159,169,175,153,163,169],
[178,178,0,176,167,171,174,160,162,174],
[180,172,164,0,170,162,165,161,162,175],
[188,181,173,170,0,177,172,160,167,177],
[173,171,169,178,163,0,162,154,160,176],
[166,165,166,175,168,178,0,168,164,188],
[180,187,180,179,180,186,172,0,170,183],
[184,177,178,178,173,180,176,170,0,174],
[171,171,166,165,163,164,152,157,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,183,168,185,171,158,149,153,174],
[179,0,201,158,182,163,177,167,160,165],
[157,139,0,148,155,141,164,137,157,154],
[172,182,192,0,184,181,175,150,175,173],
[155,158,185,156,0,178,162,150,161,162],
[169,177,199,159,162,0,160,151,175,171],
[182,163,176,165,178,180,0,161,154,171],
[191,173,203,190,190,189,179,0,167,198],
[187,180,183,165,179,165,186,173,0,183],
[166,175,186,167,178,169,169,142,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,182,175,155,163,187,164,177,189],
[183,0,205,209,177,171,175,166,162,198],
[158,135,0,164,155,170,158,138,157,179],
[165,131,176,0,177,163,166,160,171,195],
[185,163,185,163,0,194,187,183,173,204],
[177,169,170,177,146,0,187,149,131,172],
[153,165,182,174,153,153,0,133,131,176],
[176,174,202,180,157,191,207,0,173,184],
[163,178,183,169,167,209,209,167,0,205],
[151,142,161,145,136,168,164,156,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,161,177,176,164,139,202,162,175],
[177,0,150,147,167,185,167,175,155,170],
[179,190,0,160,196,168,174,197,177,174],
[163,193,180,0,174,183,160,180,167,168],
[164,173,144,166,0,178,142,167,177,159],
[176,155,172,157,162,0,158,164,152,186],
[201,173,166,180,198,182,0,193,192,198],
[138,165,143,160,173,176,147,0,138,149],
[178,185,163,173,163,188,148,202,0,172],
[165,170,166,172,181,154,142,191,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,165,175,164,167,172,177,181,178],
[162,0,170,173,162,161,175,176,169,184],
[175,170,0,172,175,174,177,181,178,171],
[165,167,168,0,172,159,169,172,164,172],
[176,178,165,168,0,173,184,172,168,176],
[173,179,166,181,167,0,182,180,176,180],
[168,165,163,171,156,158,0,181,171,169],
[163,164,159,168,168,160,159,0,168,172],
[159,171,162,176,172,164,169,172,0,167],
[162,156,169,168,164,160,171,168,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,193,193,134,144,145,185,170,213],
[176,0,133,181,233,257,137,191,169,155],
[147,207,0,225,216,174,98,228,212,152],
[147,159,115,0,169,210,191,215,159,184],
[206,107,124,171,0,233,57,247,220,130],
[196,83,166,130,107,0,98,189,89,152],
[195,203,242,149,283,242,0,280,185,171],
[155,149,112,125,93,151,60,0,155,96],
[170,171,128,181,120,251,155,185,0,138],
[127,185,188,156,210,188,169,244,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,172,167,167,162,165,181,182,166],
[190,0,173,169,156,175,195,179,194,183],
[168,167,0,169,153,182,184,187,188,174],
[173,171,171,0,166,164,158,174,182,156],
[173,184,187,174,0,176,166,180,192,175],
[178,165,158,176,164,0,188,174,182,174],
[175,145,156,182,174,152,0,165,179,169],
[159,161,153,166,160,166,175,0,180,172],
[158,146,152,158,148,158,161,160,0,168],
[174,157,166,184,165,166,171,168,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,179,170,168,168,173,175,175,167],
[157,0,169,156,165,156,155,174,171,157],
[161,171,0,154,158,139,166,163,151,166],
[170,184,186,0,172,165,166,185,174,166],
[172,175,182,168,0,154,171,180,168,163],
[172,184,201,175,186,0,167,188,177,175],
[167,185,174,174,169,173,0,179,161,173],
[165,166,177,155,160,152,161,0,167,159],
[165,169,189,166,172,163,179,173,0,156],
[173,183,174,174,177,165,167,181,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,177,187,192,187,158,188,184,169],
[152,0,154,168,189,161,168,191,161,164],
[163,186,0,171,193,167,180,163,175,159],
[153,172,169,0,178,156,159,175,174,174],
[148,151,147,162,0,158,153,153,167,162],
[153,179,173,184,182,0,163,159,157,157],
[182,172,160,181,187,177,0,194,189,171],
[152,149,177,165,187,181,146,0,169,153],
[156,179,165,166,173,183,151,171,0,152],
[171,176,181,166,178,183,169,187,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,150,156,179,162,161,181,157,143],
[185,0,195,173,210,176,190,164,168,166],
[190,145,0,186,209,183,186,178,159,152],
[184,167,154,0,189,167,173,178,163,148],
[161,130,131,151,0,163,152,160,158,122],
[178,164,157,173,177,0,183,180,182,173],
[179,150,154,167,188,157,0,156,140,148],
[159,176,162,162,180,160,184,0,162,159],
[183,172,181,177,182,158,200,178,0,162],
[197,174,188,192,218,167,192,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,165,165,141,152,165,172,171,161],
[179,0,154,179,157,169,163,173,179,170],
[175,186,0,193,180,172,187,172,187,170],
[175,161,147,0,157,148,152,151,143,158],
[199,183,160,183,0,178,179,183,169,169],
[188,171,168,192,162,0,156,167,158,179],
[175,177,153,188,161,184,0,173,150,185],
[168,167,168,189,157,173,167,0,170,177],
[169,161,153,197,171,182,190,170,0,186],
[179,170,170,182,171,161,155,163,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,159,164,172,178,189,181,175,165],
[169,0,170,174,168,186,186,180,182,188],
[181,170,0,165,173,169,176,175,180,164],
[176,166,175,0,169,164,184,168,183,173],
[168,172,167,171,0,175,183,168,176,178],
[162,154,171,176,165,0,177,156,182,166],
[151,154,164,156,157,163,0,167,176,160],
[159,160,165,172,172,184,173,0,170,176],
[165,158,160,157,164,158,164,170,0,171],
[175,152,176,167,162,174,180,164,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,148,203,170,155,180,149,153,188],
[206,0,160,221,174,173,213,185,156,207],
[192,180,0,195,161,172,186,173,164,195],
[137,119,145,0,155,159,157,150,146,174],
[170,166,179,185,0,173,174,146,138,171],
[185,167,168,181,167,0,145,141,154,172],
[160,127,154,183,166,195,0,155,170,203],
[191,155,167,190,194,199,185,0,195,188],
[187,184,176,194,202,186,170,145,0,207],
[152,133,145,166,169,168,137,152,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,185,180,197,179,159,174,195,164],
[185,0,181,209,215,201,183,166,210,183],
[155,159,0,190,170,178,154,158,183,152],
[160,131,150,0,179,183,153,154,193,176],
[143,125,170,161,0,161,131,150,198,144],
[161,139,162,157,179,0,139,147,185,154],
[181,157,186,187,209,201,0,171,200,174],
[166,174,182,186,190,193,169,0,209,176],
[145,130,157,147,142,155,140,131,0,156],
[176,157,188,164,196,186,166,164,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,97,154,153,140,143,117,154,128],
[199,0,134,186,177,138,148,156,158,167],
[243,206,0,195,193,177,164,172,163,209],
[186,154,145,0,166,155,180,153,167,170],
[187,163,147,174,0,153,172,174,149,204],
[200,202,163,185,187,0,164,168,180,211],
[197,192,176,160,168,176,0,149,164,194],
[223,184,168,187,166,172,191,0,175,178],
[186,182,177,173,191,160,176,165,0,199],
[212,173,131,170,136,129,146,162,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,137,145,127,157,148,166,180,127],
[166,0,143,146,135,178,160,185,171,134],
[203,197,0,154,172,198,196,178,178,156],
[195,194,186,0,154,208,170,182,205,188],
[213,205,168,186,0,186,204,199,211,164],
[183,162,142,132,154,0,133,178,193,147],
[192,180,144,170,136,207,0,170,197,152],
[174,155,162,158,141,162,170,0,198,170],
[160,169,162,135,129,147,143,142,0,150],
[213,206,184,152,176,193,188,170,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,185,174,164,183,172,181,188,164],
[164,0,177,177,167,173,165,169,185,168],
[155,163,0,159,153,162,163,152,170,153],
[166,163,181,0,148,178,179,174,184,165],
[176,173,187,192,0,170,175,172,180,165],
[157,167,178,162,170,0,172,162,180,173],
[168,175,177,161,165,168,0,173,180,159],
[159,171,188,166,168,178,167,0,186,162],
[152,155,170,156,160,160,160,154,0,161],
[176,172,187,175,175,167,181,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,180,170,190,144,157,154,182,158],
[142,0,178,165,168,169,172,159,149,170],
[160,162,0,178,181,161,165,156,174,153],
[170,175,162,0,174,165,166,174,170,184],
[150,172,159,166,0,147,165,161,159,174],
[196,171,179,175,193,0,180,165,179,181],
[183,168,175,174,175,160,0,175,172,188],
[186,181,184,166,179,175,165,0,189,189],
[158,191,166,170,181,161,168,151,0,162],
[182,170,187,156,166,159,152,151,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,174,180,201,186,198,187,165,175],
[157,0,162,158,182,149,162,164,158,148],
[166,178,0,169,208,170,171,165,160,160],
[160,182,171,0,196,168,180,181,171,168],
[139,158,132,144,0,145,141,157,139,140],
[154,191,170,172,195,0,161,154,154,163],
[142,178,169,160,199,179,0,168,165,148],
[153,176,175,159,183,186,172,0,149,151],
[175,182,180,169,201,186,175,191,0,186],
[165,192,180,172,200,177,192,189,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,149,169,158,136,149,172,153,149],
[175,0,176,170,180,163,168,175,159,154],
[191,164,0,178,178,171,169,178,150,160],
[171,170,162,0,147,138,155,159,160,161],
[182,160,162,193,0,164,155,161,158,162],
[204,177,169,202,176,0,179,186,181,165],
[191,172,171,185,185,161,0,165,169,169],
[168,165,162,181,179,154,175,0,159,154],
[187,181,190,180,182,159,171,181,0,173],
[191,186,180,179,178,175,171,186,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,175,162,161,167,167,187,165,186],
[177,0,180,175,177,182,171,170,168,182],
[165,160,0,156,155,160,163,156,172,167],
[178,165,184,0,169,171,171,174,178,187],
[179,163,185,171,0,170,183,162,163,180],
[173,158,180,169,170,0,167,145,178,167],
[173,169,177,169,157,173,0,175,166,187],
[153,170,184,166,178,195,165,0,171,181],
[175,172,168,162,177,162,174,169,0,187],
[154,158,173,153,160,173,153,159,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,170,168,172,166,166,170,161,164],
[165,0,162,163,166,161,160,178,164,167],
[170,178,0,182,173,176,180,181,180,183],
[172,177,158,0,157,169,167,174,173,169],
[168,174,167,183,0,179,175,190,176,174],
[174,179,164,171,161,0,176,176,158,174],
[174,180,160,173,165,164,0,171,164,181],
[170,162,159,166,150,164,169,0,160,167],
[179,176,160,167,164,182,176,180,0,181],
[176,173,157,171,166,166,159,173,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,160,190,195,180,193,189,202],
[166,0,183,170,174,163,166,197,192,177],
[165,157,0,138,145,147,137,153,153,176],
[180,170,202,0,158,174,162,200,188,183],
[150,166,195,182,0,182,173,192,169,164],
[145,177,193,166,158,0,148,171,181,181],
[160,174,203,178,167,192,0,205,181,200],
[147,143,187,140,148,169,135,0,177,168],
[151,148,187,152,171,159,159,163,0,168],
[138,163,164,157,176,159,140,172,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,151,157,167,153,176,178,158],
[162,0,162,165,158,166,183,166,153,167],
[167,178,0,170,174,169,169,176,178,177],
[189,175,170,0,156,172,172,177,178,170],
[183,182,166,184,0,179,172,168,166,173],
[173,174,171,168,161,0,170,189,154,172],
[187,157,171,168,168,170,0,183,178,164],
[164,174,164,163,172,151,157,0,161,163],
[162,187,162,162,174,186,162,179,0,178],
[182,173,163,170,167,168,176,177,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,161,198,173,177,192,151,182,173],
[168,0,176,186,151,164,175,153,176,136],
[179,164,0,206,169,174,173,170,194,163],
[142,154,134,0,154,156,144,162,156,153],
[167,189,171,186,0,178,166,186,195,181],
[163,176,166,184,162,0,149,174,183,159],
[148,165,167,196,174,191,0,154,188,153],
[189,187,170,178,154,166,186,0,188,181],
[158,164,146,184,145,157,152,152,0,142],
[167,204,177,187,159,181,187,159,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,216,86,96,86,191,102,116,185],
[184,0,249,138,136,168,200,199,109,174],
[124,91,0,56,45,57,96,109,57,124],
[254,202,284,0,158,153,210,173,149,208],
[244,204,295,182,0,165,257,193,170,245],
[254,172,283,187,175,0,200,175,177,164],
[149,140,244,130,83,140,0,125,84,183],
[238,141,231,167,147,165,215,0,159,208],
[224,231,283,191,170,163,256,181,0,227],
[155,166,216,132,95,176,157,132,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,171,170,171,188,168,168,181,173],
[179,0,175,177,188,179,177,176,193,167],
[169,165,0,180,177,174,165,176,187,171],
[170,163,160,0,174,182,163,170,177,162],
[169,152,163,166,0,164,153,156,176,171],
[152,161,166,158,176,0,158,152,183,171],
[172,163,175,177,187,182,0,164,181,164],
[172,164,164,170,184,188,176,0,195,168],
[159,147,153,163,164,157,159,145,0,165],
[167,173,169,178,169,169,176,172,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,149,139,195,124,155,147,124,153],
[155,0,159,197,222,109,142,107,175,143],
[191,181,0,174,250,81,167,186,158,150],
[201,143,166,0,187,173,155,130,151,219],
[145,118,90,153,0,97,23,73,92,94],
[216,231,259,167,243,0,173,156,129,156],
[185,198,173,185,317,167,0,177,174,163],
[193,233,154,210,267,184,163,0,165,184],
[216,165,182,189,248,211,166,175,0,158],
[187,197,190,121,246,184,177,156,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,118,163,139,183,153,185,114,190],
[170,0,133,115,122,184,174,125,138,172],
[222,207,0,172,181,209,169,216,183,179],
[177,225,168,0,165,192,179,225,167,180],
[201,218,159,175,0,155,175,173,174,191],
[157,156,131,148,185,0,146,141,169,203],
[187,166,171,161,165,194,0,185,189,194],
[155,215,124,115,167,199,155,0,167,202],
[226,202,157,173,166,171,151,173,0,164],
[150,168,161,160,149,137,146,138,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,190,166,159,166,175,183,186,141],
[189,0,199,152,160,158,169,136,168,166],
[150,141,0,163,130,117,144,164,140,146],
[174,188,177,0,155,162,171,148,153,149],
[181,180,210,185,0,180,190,162,167,154],
[174,182,223,178,160,0,171,154,161,181],
[165,171,196,169,150,169,0,144,171,148],
[157,204,176,192,178,186,196,0,171,162],
[154,172,200,187,173,179,169,169,0,160],
[199,174,194,191,186,159,192,178,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,179,168,174,164,162,151,169],
[169,0,176,179,176,181,180,181,166,172],
[171,164,0,180,180,170,189,183,171,171],
[161,161,160,0,173,167,169,161,161,167],
[172,164,160,167,0,158,179,167,152,160],
[166,159,170,173,182,0,178,174,164,167],
[176,160,151,171,161,162,0,166,155,168],
[178,159,157,179,173,166,174,0,151,164],
[189,174,169,179,188,176,185,189,0,173],
[171,168,169,173,180,173,172,176,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,128,154,145,135,137,189,173,132],
[194,0,150,172,137,132,175,210,161,178],
[212,190,0,164,179,142,141,192,170,193],
[186,168,176,0,158,157,175,233,236,181],
[195,203,161,182,0,148,177,217,172,218],
[205,208,198,183,192,0,160,195,214,209],
[203,165,199,165,163,180,0,233,226,237],
[151,130,148,107,123,145,107,0,162,153],
[167,179,170,104,168,126,114,178,0,183],
[208,162,147,159,122,131,103,187,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,179,153,184,167,168,168,152,158],
[182,0,189,178,194,169,170,167,171,159],
[161,151,0,155,193,152,148,160,154,147],
[187,162,185,0,183,159,178,183,174,171],
[156,146,147,157,0,156,144,158,150,151],
[173,171,188,181,184,0,168,176,182,159],
[172,170,192,162,196,172,0,184,163,162],
[172,173,180,157,182,164,156,0,165,162],
[188,169,186,166,190,158,177,175,0,170],
[182,181,193,169,189,181,178,178,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,216,199,198,192,208,188,198,155],
[167,0,179,160,182,193,193,176,172,147],
[124,161,0,155,188,146,198,157,160,147],
[141,180,185,0,199,168,189,188,182,183],
[142,158,152,141,0,168,193,155,187,166],
[148,147,194,172,172,0,181,169,194,135],
[132,147,142,151,147,159,0,135,160,145],
[152,164,183,152,185,171,205,0,221,164],
[142,168,180,158,153,146,180,119,0,130],
[185,193,193,157,174,205,195,176,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,180,184,185,172,169,163,167],
[164,0,178,170,154,161,175,163,162,158],
[169,162,0,147,154,159,178,170,162,152],
[160,170,193,0,165,181,188,165,172,177],
[156,186,186,175,0,180,192,161,174,189],
[155,179,181,159,160,0,180,149,169,155],
[168,165,162,152,148,160,0,160,155,150],
[171,177,170,175,179,191,180,0,172,161],
[177,178,178,168,166,171,185,168,0,178],
[173,182,188,163,151,185,190,179,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,176,171,164,164,185,186,197],
[162,0,185,196,155,172,192,171,163,184],
[162,155,0,168,149,155,181,165,162,171],
[164,144,172,0,160,152,170,167,148,171],
[169,185,191,180,0,169,186,170,175,191],
[176,168,185,188,171,0,167,155,169,175],
[176,148,159,170,154,173,0,166,154,161],
[155,169,175,173,170,185,174,0,162,177],
[154,177,178,192,165,171,186,178,0,180],
[143,156,169,169,149,165,179,163,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,145,164,157,158,196,162,147],
[170,0,192,186,194,160,173,177,171,153],
[168,148,0,157,175,165,166,181,154,161],
[195,154,183,0,168,168,163,194,176,159],
[176,146,165,172,0,169,166,195,157,145],
[183,180,175,172,171,0,169,198,178,178],
[182,167,174,177,174,171,0,184,171,160],
[144,163,159,146,145,142,156,0,158,143],
[178,169,186,164,183,162,169,182,0,167],
[193,187,179,181,195,162,180,197,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,162,129,171,152,145,146,152,147],
[172,0,144,180,179,190,140,168,173,136],
[178,196,0,158,187,179,182,155,168,163],
[211,160,182,0,180,206,178,167,160,163],
[169,161,153,160,0,170,153,129,146,131],
[188,150,161,134,170,0,146,143,151,129],
[195,200,158,162,187,194,0,177,157,152],
[194,172,185,173,211,197,163,0,187,181],
[188,167,172,180,194,189,183,153,0,156],
[193,204,177,177,209,211,188,159,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,132,201,124,61,108,108,52,135],
[218,0,162,256,263,116,167,157,110,203],
[208,178,0,241,257,229,185,176,136,212],
[139,84,99,0,81,71,70,37,42,66],
[216,77,83,259,0,97,101,78,63,191],
[279,224,111,269,243,0,156,141,90,155],
[232,173,155,270,239,184,0,144,108,204],
[232,183,164,303,262,199,196,0,188,208],
[288,230,204,298,277,250,232,152,0,252],
[205,137,128,274,149,185,136,132,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,176,163,165,178,186,168,168,164],
[177,0,187,167,163,188,172,166,169,162],
[164,153,0,155,167,151,168,163,160,165],
[177,173,185,0,172,180,190,162,179,174],
[175,177,173,168,0,180,162,173,179,158],
[162,152,189,160,160,0,154,151,168,154],
[154,168,172,150,178,186,0,145,167,148],
[172,174,177,178,167,189,195,0,178,171],
[172,171,180,161,161,172,173,162,0,161],
[176,178,175,166,182,186,192,169,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,167,171,175,171,182,197,160,165],
[175,0,161,182,174,179,184,189,163,165],
[173,179,0,195,174,180,180,197,164,162],
[169,158,145,0,157,147,166,176,148,165],
[165,166,166,183,0,173,181,179,165,178],
[169,161,160,193,167,0,179,190,150,160],
[158,156,160,174,159,161,0,176,159,152],
[143,151,143,164,161,150,164,0,150,142],
[180,177,176,192,175,190,181,190,0,163],
[175,175,178,175,162,180,188,198,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,165,216,182,170,188,183,193,197],
[180,0,193,207,223,199,180,165,198,181],
[175,147,0,212,175,167,179,185,167,207],
[124,133,128,0,148,145,120,137,161,137],
[158,117,165,192,0,139,159,156,175,214],
[170,141,173,195,201,0,140,161,181,189],
[152,160,161,220,181,200,0,199,187,218],
[157,175,155,203,184,179,141,0,185,209],
[147,142,173,179,165,159,153,155,0,181],
[143,159,133,203,126,151,122,131,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,172,184,160,182,180,171,167],
[170,0,163,197,188,173,182,196,163,185],
[168,177,0,180,168,174,174,189,157,161],
[168,143,160,0,160,143,171,170,150,158],
[156,152,172,180,0,162,173,181,161,163],
[180,167,166,197,178,0,165,173,169,167],
[158,158,166,169,167,175,0,179,164,170],
[160,144,151,170,159,167,161,0,149,167],
[169,177,183,190,179,171,176,191,0,170],
[173,155,179,182,177,173,170,173,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,176,179,164,157,156,180,171,167],
[174,0,166,166,140,147,165,145,175,154],
[164,174,0,173,158,162,146,151,172,155],
[161,174,167,0,155,176,178,149,182,154],
[176,200,182,185,0,178,178,161,181,198],
[183,193,178,164,162,0,172,170,179,193],
[184,175,194,162,162,168,0,161,188,183],
[160,195,189,191,179,170,179,0,183,179],
[169,165,168,158,159,161,152,157,0,178],
[173,186,185,186,142,147,157,161,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,149,145,146,152,168,187,153,171],
[188,0,164,186,170,172,154,215,163,185],
[191,176,0,177,146,128,176,186,145,186],
[195,154,163,0,154,149,178,193,141,181],
[194,170,194,186,0,135,191,189,154,191],
[188,168,212,191,205,0,217,227,157,207],
[172,186,164,162,149,123,0,180,184,170],
[153,125,154,147,151,113,160,0,154,139],
[187,177,195,199,186,183,156,186,0,158],
[169,155,154,159,149,133,170,201,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,162,161,168,173,177,171,172,161],
[181,0,172,164,171,177,162,176,176,171],
[178,168,0,168,169,174,170,183,173,176],
[179,176,172,0,171,160,163,178,169,161],
[172,169,171,169,0,180,163,184,170,167],
[167,163,166,180,160,0,173,194,159,175],
[163,178,170,177,177,167,0,172,179,172],
[169,164,157,162,156,146,168,0,170,154],
[168,164,167,171,170,181,161,170,0,176],
[179,169,164,179,173,165,168,186,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,156,148,156,175,162,162,187,162],
[163,0,129,156,151,178,165,165,161,156],
[184,211,0,182,164,203,188,176,191,189],
[192,184,158,0,164,189,172,176,178,166],
[184,189,176,176,0,192,185,188,170,181],
[165,162,137,151,148,0,160,159,160,162],
[178,175,152,168,155,180,0,171,175,170],
[178,175,164,164,152,181,169,0,172,184],
[153,179,149,162,170,180,165,168,0,177],
[178,184,151,174,159,178,170,156,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,153,161,158,182,162,163,153,143],
[190,0,147,140,176,162,171,120,137,128],
[187,193,0,181,204,211,193,164,184,175],
[179,200,159,0,198,212,196,203,175,161],
[182,164,136,142,0,168,172,140,136,153],
[158,178,129,128,172,0,159,160,167,154],
[178,169,147,144,168,181,0,164,137,142],
[177,220,176,137,200,180,176,0,160,159],
[187,203,156,165,204,173,203,180,0,166],
[197,212,165,179,187,186,198,181,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,221,200,203,177,193,169,191,199],
[180,0,245,176,180,239,133,160,193,176],
[119,95,0,117,180,169,95,166,125,159],
[140,164,223,0,183,174,104,154,117,202],
[137,160,160,157,0,187,115,163,166,137],
[163,101,171,166,153,0,104,132,122,176],
[147,207,245,236,225,236,0,199,240,216],
[171,180,174,186,177,208,141,0,169,157],
[149,147,215,223,174,218,100,171,0,173],
[141,164,181,138,203,164,124,183,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,188,165,165,185,202,169,153,174],
[189,0,178,180,168,188,203,189,175,195],
[152,162,0,173,149,180,198,145,162,173],
[175,160,167,0,169,190,206,156,164,195],
[175,172,191,171,0,193,201,163,177,174],
[155,152,160,150,147,0,192,147,144,165],
[138,137,142,134,139,148,0,147,125,142],
[171,151,195,184,177,193,193,0,155,193],
[187,165,178,176,163,196,215,185,0,199],
[166,145,167,145,166,175,198,147,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,176,186,166,180,159,164,170,172],
[168,0,176,173,162,161,146,150,170,164],
[164,164,0,183,153,173,160,146,156,170],
[154,167,157,0,157,175,172,152,172,156],
[174,178,187,183,0,186,173,163,165,169],
[160,179,167,165,154,0,152,168,148,165],
[181,194,180,168,167,188,0,162,172,163],
[176,190,194,188,177,172,178,0,167,162],
[170,170,184,168,175,192,168,173,0,177],
[168,176,170,184,171,175,177,178,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,153,160,153,153,166,182,159,155],
[176,0,159,184,153,165,179,163,160,162],
[187,181,0,169,165,159,171,173,183,164],
[180,156,171,0,162,162,193,148,161,174],
[187,187,175,178,0,173,180,170,186,168],
[187,175,181,178,167,0,184,180,174,166],
[174,161,169,147,160,156,0,149,147,176],
[158,177,167,192,170,160,191,0,192,171],
[181,180,157,179,154,166,193,148,0,170],
[185,178,176,166,172,174,164,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,195,192,179,192,200,189,192,216],
[181,0,183,194,168,181,223,180,185,234],
[145,157,0,187,145,154,179,169,145,199],
[148,146,153,0,147,155,198,163,156,179],
[161,172,195,193,0,166,166,180,180,206],
[148,159,186,185,174,0,180,194,181,201],
[140,117,161,142,174,160,0,165,149,189],
[151,160,171,177,160,146,175,0,149,174],
[148,155,195,184,160,159,191,191,0,206],
[124,106,141,161,134,139,151,166,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,227,175,227,164,237,203,196,140],
[180,0,202,177,188,187,221,210,187,137],
[113,138,0,215,212,161,209,218,193,156],
[165,163,125,0,179,213,199,195,186,146],
[113,152,128,161,0,156,218,198,168,114],
[176,153,179,127,184,0,192,226,181,146],
[103,119,131,141,122,148,0,112,155,115],
[137,130,122,145,142,114,228,0,144,140],
[144,153,147,154,172,159,185,196,0,182],
[200,203,184,194,226,194,225,200,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,166,180,172,180,175,166,164,153],
[166,0,175,177,172,171,164,165,156,164],
[174,165,0,186,156,168,175,174,161,167],
[160,163,154,0,141,164,159,167,148,158],
[168,168,184,199,0,171,182,178,168,179],
[160,169,172,176,169,0,178,174,167,167],
[165,176,165,181,158,162,0,161,159,173],
[174,175,166,173,162,166,179,0,186,170],
[176,184,179,192,172,173,181,154,0,176],
[187,176,173,182,161,173,167,170,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,196,161,196,292,327,174,54,54],
[131,0,238,292,185,185,238,292,185,185],
[144,102,0,185,220,198,233,174,198,54],
[179,48,155,0,179,179,179,174,198,54],
[144,155,120,161,0,144,286,174,198,54],
[48,155,142,161,196,0,286,174,54,54],
[13,102,107,161,54,54,0,174,54,54],
[166,48,166,166,166,166,166,0,220,54],
[286,155,142,142,142,286,286,120,0,0],
[286,155,286,286,286,286,286,286,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,161,170,161,159,152,171,181,169],
[141,0,156,162,146,147,142,145,163,155],
[179,184,0,187,161,180,164,170,192,172],
[170,178,153,0,173,161,159,169,185,174],
[179,194,179,167,0,153,156,157,185,176],
[181,193,160,179,187,0,178,168,195,175],
[188,198,176,181,184,162,0,167,201,173],
[169,195,170,171,183,172,173,0,192,182],
[159,177,148,155,155,145,139,148,0,152],
[171,185,168,166,164,165,167,158,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,156,159,160,152,163,150,155,160],
[173,0,172,155,177,170,169,159,168,183],
[184,168,0,172,174,185,185,160,184,180],
[181,185,168,0,169,177,179,173,175,192],
[180,163,166,171,0,164,159,171,171,175],
[188,170,155,163,176,0,162,161,160,170],
[177,171,155,161,181,178,0,160,160,163],
[190,181,180,167,169,179,180,0,186,180],
[185,172,156,165,169,180,180,154,0,166],
[180,157,160,148,165,170,177,160,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,157,121,136,145,117,127,151,133],
[179,0,179,150,161,145,143,143,165,160],
[183,161,0,146,142,160,148,150,158,156],
[219,190,194,0,182,179,164,181,170,186],
[204,179,198,158,0,167,153,158,170,167],
[195,195,180,161,173,0,158,156,170,164],
[223,197,192,176,187,182,0,163,165,174],
[213,197,190,159,182,184,177,0,156,171],
[189,175,182,170,170,170,175,184,0,184],
[207,180,184,154,173,176,166,169,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,142,180,148,155,168,175,173,149],
[153,0,124,175,124,146,169,175,158,147],
[198,216,0,220,158,201,195,213,186,170],
[160,165,120,0,103,142,137,179,146,172],
[192,216,182,237,0,165,225,198,184,180],
[185,194,139,198,175,0,215,181,180,159],
[172,171,145,203,115,125,0,190,150,157],
[165,165,127,161,142,159,150,0,168,148],
[167,182,154,194,156,160,190,172,0,162],
[191,193,170,168,160,181,183,192,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,176,179,176,189,164,160,171,162],
[151,0,148,159,154,195,169,155,177,174],
[164,192,0,155,162,194,187,182,177,144],
[161,181,185,0,161,207,155,171,182,157],
[164,186,178,179,0,200,174,175,177,160],
[151,145,146,133,140,0,156,140,142,140],
[176,171,153,185,166,184,0,184,164,154],
[180,185,158,169,165,200,156,0,168,154],
[169,163,163,158,163,198,176,172,0,164],
[178,166,196,183,180,200,186,186,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,160,155,158,170,165,176,173,165],
[168,0,167,162,161,168,155,176,167,168],
[180,173,0,164,161,167,157,167,175,181],
[185,178,176,0,164,168,172,179,183,181],
[182,179,179,176,0,184,178,176,168,171],
[170,172,173,172,156,0,160,172,164,175],
[175,185,183,168,162,180,0,184,170,177],
[164,164,173,161,164,168,156,0,171,173],
[167,173,165,157,172,176,170,169,0,164],
[175,172,159,159,169,165,163,167,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,181,170,174,167,167,175,168,178],
[161,0,173,176,161,175,160,156,156,171],
[159,167,0,164,162,144,162,159,164,152],
[170,164,176,0,161,169,167,170,174,171],
[166,179,178,179,0,172,158,159,161,169],
[173,165,196,171,168,0,173,163,170,160],
[173,180,178,173,182,167,0,180,172,169],
[165,184,181,170,181,177,160,0,168,172],
[172,184,176,166,179,170,168,172,0,177],
[162,169,188,169,171,180,171,168,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,192,201,164,181,197,179,206,191],
[159,0,196,192,180,182,187,157,184,170],
[148,144,0,184,158,151,179,158,176,159],
[139,148,156,0,150,168,167,131,182,153],
[176,160,182,190,0,176,181,145,202,209],
[159,158,189,172,164,0,170,159,179,157],
[143,153,161,173,159,170,0,134,158,154],
[161,183,182,209,195,181,206,0,201,192],
[134,156,164,158,138,161,182,139,0,147],
[149,170,181,187,131,183,186,148,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,160,159,168,172,180,153,175,162],
[181,0,172,174,175,190,205,181,158,173],
[180,168,0,160,165,153,202,159,164,167],
[181,166,180,0,179,178,201,165,164,177],
[172,165,175,161,0,193,188,175,158,175],
[168,150,187,162,147,0,155,155,149,162],
[160,135,138,139,152,185,0,156,153,162],
[187,159,181,175,165,185,184,0,161,176],
[165,182,176,176,182,191,187,179,0,165],
[178,167,173,163,165,178,178,164,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,142,143,184,129,153,191,163,155],
[193,0,164,168,193,180,201,206,169,216],
[198,176,0,191,192,163,211,213,176,193],
[197,172,149,0,175,158,205,195,172,179],
[156,147,148,165,0,139,142,161,135,167],
[211,160,177,182,201,0,168,185,183,215],
[187,139,129,135,198,172,0,173,166,173],
[149,134,127,145,179,155,167,0,140,160],
[177,171,164,168,205,157,174,200,0,195],
[185,124,147,161,173,125,167,180,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,179,196,202,203,243,243,184,154],
[167,0,155,121,224,215,179,228,120,166],
[161,185,0,203,235,203,185,222,148,214],
[144,219,137,0,190,180,152,272,187,146],
[138,116,105,150,0,160,137,222,150,135],
[137,125,137,160,180,0,124,267,118,176],
[97,161,155,188,203,216,0,268,137,164],
[97,112,118,68,118,73,72,0,113,112],
[156,220,192,153,190,222,203,227,0,220],
[186,174,126,194,205,164,176,228,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,200,188,135,195,307,145,146,218],
[100,0,228,118,120,148,162,139,189,226],
[140,112,0,90,129,162,129,124,53,115],
[152,222,250,0,142,164,271,102,112,136],
[205,220,211,198,0,203,228,195,126,153],
[145,192,178,176,137,0,169,127,139,112],
[33,178,211,69,112,171,0,69,82,89],
[195,201,216,238,145,213,271,0,142,136],
[194,151,287,228,214,201,258,198,0,290],
[122,114,225,204,187,228,251,204,50,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,175,168,186,177,177,170,172,175],
[148,0,166,150,176,164,146,156,150,152],
[165,174,0,174,186,162,169,152,166,151],
[172,190,166,0,188,177,176,172,175,176],
[154,164,154,152,0,155,163,162,157,155],
[163,176,178,163,185,0,167,166,165,163],
[163,194,171,164,177,173,0,167,173,163],
[170,184,188,168,178,174,173,0,178,178],
[168,190,174,165,183,175,167,162,0,159],
[165,188,189,164,185,177,177,162,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,172,153,159,167,169,162,157,164],
[190,0,165,172,166,163,185,166,164,172],
[168,175,0,173,184,154,177,179,161,169],
[187,168,167,0,175,171,180,157,159,172],
[181,174,156,165,0,159,168,162,165,169],
[173,177,186,169,181,0,184,161,177,171],
[171,155,163,160,172,156,0,168,154,169],
[178,174,161,183,178,179,172,0,162,179],
[183,176,179,181,175,163,186,178,0,177],
[176,168,171,168,171,169,171,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,193,157,179,161,184,159,155],
[166,0,161,178,154,163,158,168,195,152],
[175,179,0,198,150,171,179,176,192,168],
[147,162,142,0,146,179,170,175,190,174],
[183,186,190,194,0,190,169,185,180,155],
[161,177,169,161,150,0,161,166,171,163],
[179,182,161,170,171,179,0,191,183,172],
[156,172,164,165,155,174,149,0,165,145],
[181,145,148,150,160,169,157,175,0,161],
[185,188,172,166,185,177,168,195,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,170,174,171,169,181,170,184,177],
[166,0,173,174,152,159,155,164,165,165],
[170,167,0,178,164,171,169,161,171,174],
[166,166,162,0,157,170,168,163,159,160],
[169,188,176,183,0,172,182,176,193,172],
[171,181,169,170,168,0,181,182,181,165],
[159,185,171,172,158,159,0,164,187,161],
[170,176,179,177,164,158,176,0,173,163],
[156,175,169,181,147,159,153,167,0,177],
[163,175,166,180,168,175,179,177,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,162,174,152,198,180,193,175,164],
[175,0,157,158,160,181,161,184,157,162],
[178,183,0,182,167,197,197,197,171,173],
[166,182,158,0,165,190,189,190,154,151],
[188,180,173,175,0,193,182,187,170,166],
[142,159,143,150,147,0,159,159,143,149],
[160,179,143,151,158,181,0,174,166,157],
[147,156,143,150,153,181,166,0,151,143],
[165,183,169,186,170,197,174,189,0,169],
[176,178,167,189,174,191,183,197,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,180,187,180,176,180,163,178,188],
[166,0,161,179,158,171,149,160,151,171],
[160,179,0,178,158,168,168,148,126,163],
[153,161,162,0,160,150,161,152,139,171],
[160,182,182,180,0,169,172,158,154,165],
[164,169,172,190,171,0,163,164,155,180],
[160,191,172,179,168,177,0,177,164,168],
[177,180,192,188,182,176,163,0,156,184],
[162,189,214,201,186,185,176,184,0,189],
[152,169,177,169,175,160,172,156,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,159,183,168,150,159,149,151,169],
[177,0,177,173,158,173,169,163,166,170],
[181,163,0,191,161,163,176,169,163,175],
[157,167,149,0,144,150,150,150,147,164],
[172,182,179,196,0,171,177,186,175,164],
[190,167,177,190,169,0,173,170,162,180],
[181,171,164,190,163,167,0,179,170,181],
[191,177,171,190,154,170,161,0,168,179],
[189,174,177,193,165,178,170,172,0,179],
[171,170,165,176,176,160,159,161,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,140,116,128,105,121,159,89,99],
[162,0,118,91,126,80,106,150,141,121],
[200,222,0,109,147,123,151,133,142,148],
[224,249,231,0,171,164,182,157,164,166],
[212,214,193,169,0,176,191,185,171,131],
[235,260,217,176,164,0,184,170,147,173],
[219,234,189,158,149,156,0,170,141,198],
[181,190,207,183,155,170,170,0,168,205],
[251,199,198,176,169,193,199,172,0,212],
[241,219,192,174,209,167,142,135,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,177,178,167,182,170,163,176],
[167,0,180,165,182,184,198,185,178,171],
[174,160,0,178,163,178,173,170,171,156],
[163,175,162,0,165,168,184,158,161,161],
[162,158,177,175,0,170,193,188,179,169],
[173,156,162,172,170,0,199,173,160,178],
[158,142,167,156,147,141,0,144,141,155],
[170,155,170,182,152,167,196,0,174,180],
[177,162,169,179,161,180,199,166,0,177],
[164,169,184,179,171,162,185,160,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,141,167,158,137,145,161,185],
[169,0,169,155,150,153,166,173,181,187],
[169,171,0,144,149,161,165,166,149,182],
[199,185,196,0,189,167,182,181,186,200],
[173,190,191,151,0,172,164,154,171,206],
[182,187,179,173,168,0,177,191,176,188],
[203,174,175,158,176,163,0,176,185,193],
[195,167,174,159,186,149,164,0,163,163],
[179,159,191,154,169,164,155,177,0,205],
[155,153,158,140,134,152,147,177,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,171,182,169,200,173,184,162,176],
[156,0,184,187,179,174,176,173,164,168],
[169,156,0,181,180,189,171,176,171,182],
[158,153,159,0,161,176,141,164,171,158],
[171,161,160,179,0,200,162,187,149,180],
[140,166,151,164,140,0,143,152,120,143],
[167,164,169,199,178,197,0,172,171,178],
[156,167,164,176,153,188,168,0,141,183],
[178,176,169,169,191,220,169,199,0,203],
[164,172,158,182,160,197,162,157,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,171,164,171,161,175,177,179,176],
[168,0,179,171,167,162,178,173,179,172],
[169,161,0,168,172,165,174,160,159,166],
[176,169,172,0,160,163,171,176,167,163],
[169,173,168,180,0,167,177,170,170,172],
[179,178,175,177,173,0,170,172,184,173],
[165,162,166,169,163,170,0,168,182,173],
[163,167,180,164,170,168,172,0,175,167],
[161,161,181,173,170,156,158,165,0,169],
[164,168,174,177,168,167,167,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,188,162,181,186,152,151,170,175],
[168,0,166,165,157,176,148,142,155,174],
[152,174,0,166,154,166,161,161,149,145],
[178,175,174,0,189,185,167,165,162,172],
[159,183,186,151,0,174,156,154,174,172],
[154,164,174,155,166,0,170,170,156,148],
[188,192,179,173,184,170,0,173,167,168],
[189,198,179,175,186,170,167,0,157,173],
[170,185,191,178,166,184,173,183,0,174],
[165,166,195,168,168,192,172,167,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,184,183,187,181,208,188,161,181],
[153,0,166,166,182,156,173,181,144,172],
[156,174,0,169,165,163,170,167,158,152],
[157,174,171,0,180,156,206,161,155,167],
[153,158,175,160,0,149,185,181,161,166],
[159,184,177,184,191,0,197,186,163,174],
[132,167,170,134,155,143,0,156,137,159],
[152,159,173,179,159,154,184,0,152,158],
[179,196,182,185,179,177,203,188,0,169],
[159,168,188,173,174,166,181,182,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,161,201,198,184,169,192,181],
[158,0,177,148,195,172,181,156,218,168],
[170,163,0,170,183,169,172,159,193,166],
[179,192,170,0,205,168,190,176,184,163],
[139,145,157,135,0,154,163,129,153,167],
[142,168,171,172,186,0,173,142,216,154],
[156,159,168,150,177,167,0,137,212,159],
[171,184,181,164,211,198,203,0,219,195],
[148,122,147,156,187,124,128,121,0,145],
[159,172,174,177,173,186,181,145,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,33,208,91,55,153,230,60,55],
[266,0,184,321,184,266,266,211,192,170],
[307,156,0,307,211,285,285,230,192,189],
[132,19,33,0,36,55,115,189,19,55],
[249,156,129,304,0,285,249,230,156,189],
[285,74,55,285,55,0,290,194,60,194],
[187,74,55,225,91,50,0,225,110,77],
[110,129,110,151,110,146,115,0,129,19],
[280,148,148,321,184,280,230,211,0,170],
[285,170,151,285,151,146,263,321,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,194,191,184,196,192,190,167,187],
[149,0,164,166,156,156,144,159,147,144],
[146,176,0,157,173,157,162,197,145,162],
[149,174,183,0,181,171,166,177,150,182],
[156,184,167,159,0,162,163,174,152,169],
[144,184,183,169,178,0,163,176,166,166],
[148,196,178,174,177,177,0,178,171,149],
[150,181,143,163,166,164,162,0,146,160],
[173,193,195,190,188,174,169,194,0,177],
[153,196,178,158,171,174,191,180,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,163,161,160,168,154,179,163],
[176,0,190,173,171,164,169,167,179,168],
[161,150,0,156,163,154,162,162,168,165],
[177,167,184,0,167,167,173,174,175,167],
[179,169,177,173,0,164,171,167,174,172],
[180,176,186,173,176,0,170,164,173,173],
[172,171,178,167,169,170,0,162,169,174],
[186,173,178,166,173,176,178,0,177,179],
[161,161,172,165,166,167,171,163,0,166],
[177,172,175,173,168,167,166,161,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,170,175,174,179,159,181,163,158],
[179,0,151,200,153,176,167,192,185,151],
[170,189,0,191,189,183,187,201,188,177],
[165,140,149,0,129,160,166,161,174,134],
[166,187,151,211,0,172,180,192,187,169],
[161,164,157,180,168,0,156,168,180,139],
[181,173,153,174,160,184,0,169,169,153],
[159,148,139,179,148,172,171,0,168,146],
[177,155,152,166,153,160,171,172,0,145],
[182,189,163,206,171,201,187,194,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,172,165,168,177,170,154,159,157],
[166,0,173,155,156,168,160,162,164,165],
[168,167,0,169,165,152,166,154,160,180],
[175,185,171,0,162,179,169,170,155,168],
[172,184,175,178,0,174,175,148,162,169],
[163,172,188,161,166,0,194,169,153,191],
[170,180,174,171,165,146,0,169,153,172],
[186,178,186,170,192,171,171,0,175,164],
[181,176,180,185,178,187,187,165,0,185],
[183,175,160,172,171,149,168,176,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,157,154,164,167,169,165,168,156],
[168,0,149,146,168,170,170,182,174,156],
[183,191,0,170,166,175,173,172,168,163],
[186,194,170,0,184,179,194,188,189,184],
[176,172,174,156,0,171,177,192,173,156],
[173,170,165,161,169,0,169,170,183,164],
[171,170,167,146,163,171,0,181,173,150],
[175,158,168,152,148,170,159,0,160,156],
[172,166,172,151,167,157,167,180,0,152],
[184,184,177,156,184,176,190,184,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,175,174,161,168,173,169,176,169],
[176,0,172,170,152,158,175,162,163,170],
[165,168,0,154,153,161,161,162,164,171],
[166,170,186,0,169,163,172,172,157,173],
[179,188,187,171,0,171,177,168,173,175],
[172,182,179,177,169,0,171,177,165,175],
[167,165,179,168,163,169,0,167,156,168],
[171,178,178,168,172,163,173,0,160,173],
[164,177,176,183,167,175,184,180,0,168],
[171,170,169,167,165,165,172,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,165,171,176,180,175,167,161],
[163,0,168,154,176,172,174,174,158,168],
[170,172,0,158,176,162,171,165,149,172],
[175,186,182,0,166,189,199,185,171,163],
[169,164,164,174,0,169,167,168,156,163],
[164,168,178,151,171,0,188,181,173,166],
[160,166,169,141,173,152,0,166,150,164],
[165,166,175,155,172,159,174,0,168,166],
[173,182,191,169,184,167,190,172,0,158],
[179,172,168,177,177,174,176,174,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,131,187,223,175,91,213,153,173],
[135,0,180,175,158,108,157,178,200,107],
[209,160,0,186,159,178,170,212,203,119],
[153,165,154,0,141,132,135,186,189,107],
[117,182,181,199,0,169,157,198,177,129],
[165,232,162,208,171,0,163,161,173,136],
[249,183,170,205,183,177,0,218,162,160],
[127,162,128,154,142,179,122,0,122,84],
[187,140,137,151,163,167,178,218,0,158],
[167,233,221,233,211,204,180,256,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,172,152,171,184,174,166,177,179],
[184,0,170,183,170,195,200,182,172,174],
[168,170,0,175,171,195,173,172,168,148],
[188,157,165,0,156,180,178,179,183,173],
[169,170,169,184,0,174,178,179,180,175],
[156,145,145,160,166,0,158,148,162,167],
[166,140,167,162,162,182,0,172,171,172],
[174,158,168,161,161,192,168,0,165,154],
[163,168,172,157,160,178,169,175,0,161],
[161,166,192,167,165,173,168,186,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,183,175,161,181,166,176,198],
[176,0,177,188,160,182,181,189,180,200],
[171,163,0,181,164,164,177,187,177,192],
[157,152,159,0,170,154,187,180,182,188],
[165,180,176,170,0,180,191,165,177,190],
[179,158,176,186,160,0,183,185,194,212],
[159,159,163,153,149,157,0,174,155,193],
[174,151,153,160,175,155,166,0,158,171],
[164,160,163,158,163,146,185,182,0,181],
[142,140,148,152,150,128,147,169,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,177,163,162,187,164,171,163,161],
[168,0,154,161,165,173,171,169,161,154],
[163,186,0,174,176,181,166,182,173,167],
[177,179,166,0,168,187,170,180,166,166],
[178,175,164,172,0,170,170,174,168,164],
[153,167,159,153,170,0,168,175,162,168],
[176,169,174,170,170,172,0,174,168,171],
[169,171,158,160,166,165,166,0,173,153],
[177,179,167,174,172,178,172,167,0,184],
[179,186,173,174,176,172,169,187,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,183,157,159,163,183,140,152,164],
[178,0,165,172,169,182,180,168,177,188],
[157,175,0,157,163,170,176,147,162,168],
[183,168,183,0,173,185,198,166,181,197],
[181,171,177,167,0,181,177,174,158,170],
[177,158,170,155,159,0,179,164,167,170],
[157,160,164,142,163,161,0,162,163,162],
[200,172,193,174,166,176,178,0,167,180],
[188,163,178,159,182,173,177,173,0,165],
[176,152,172,143,170,170,178,160,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,170,155,175,181,147,173,161,175],
[188,0,170,175,160,169,156,176,156,171],
[170,170,0,176,161,171,183,186,170,183],
[185,165,164,0,167,165,164,162,164,171],
[165,180,179,173,0,178,178,191,172,188],
[159,171,169,175,162,0,151,180,176,188],
[193,184,157,176,162,189,0,197,182,173],
[167,164,154,178,149,160,143,0,163,169],
[179,184,170,176,168,164,158,177,0,176],
[165,169,157,169,152,152,167,171,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,158,162,173,164,176,156,170,177],
[188,0,178,173,180,167,175,177,183,183],
[182,162,0,159,163,167,171,154,179,183],
[178,167,181,0,169,171,177,165,184,183],
[167,160,177,171,0,165,171,154,173,171],
[176,173,173,169,175,0,174,164,171,180],
[164,165,169,163,169,166,0,156,163,176],
[184,163,186,175,186,176,184,0,183,185],
[170,157,161,156,167,169,177,157,0,172],
[163,157,157,157,169,160,164,155,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,202,179,179,161,166,175,201,180],
[169,0,206,149,154,152,165,169,169,168],
[138,134,0,143,147,119,123,168,141,154],
[161,191,197,0,147,176,155,164,188,179],
[161,186,193,193,0,156,179,185,163,178],
[179,188,221,164,184,0,162,186,187,176],
[174,175,217,185,161,178,0,222,185,210],
[165,171,172,176,155,154,118,0,184,162],
[139,171,199,152,177,153,155,156,0,158],
[160,172,186,161,162,164,130,178,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,175,178,204,176,124,197,165,170],
[167,0,162,190,209,149,145,182,183,173],
[165,178,0,135,212,135,131,151,168,139],
[162,150,205,0,220,187,153,196,185,164],
[136,131,128,120,0,129,110,127,108,126],
[164,191,205,153,211,0,179,203,213,178],
[216,195,209,187,230,161,0,190,190,183],
[143,158,189,144,213,137,150,0,174,182],
[175,157,172,155,232,127,150,166,0,136],
[170,167,201,176,214,162,157,158,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,166,156,148,181,168,156,162],
[165,0,152,158,149,152,156,152,163,158],
[173,188,0,155,157,166,170,178,158,184],
[174,182,185,0,172,158,178,171,181,171],
[184,191,183,168,0,171,191,165,181,183],
[192,188,174,182,169,0,182,181,165,171],
[159,184,170,162,149,158,0,163,160,164],
[172,188,162,169,175,159,177,0,167,174],
[184,177,182,159,159,175,180,173,0,173],
[178,182,156,169,157,169,176,166,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,142,149,162,149,140,192,155,154],
[176,0,152,171,178,166,159,188,175,176],
[198,188,0,169,185,190,184,200,183,204],
[191,169,171,0,177,158,160,165,170,195],
[178,162,155,163,0,139,160,174,170,180],
[191,174,150,182,201,0,161,185,166,173],
[200,181,156,180,180,179,0,191,175,169],
[148,152,140,175,166,155,149,0,170,159],
[185,165,157,170,170,174,165,170,0,167],
[186,164,136,145,160,167,171,181,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,178,151,162,190,190,135,175,153],
[146,0,145,154,159,175,165,129,160,132],
[162,195,0,198,178,180,227,199,174,189],
[189,186,142,0,146,174,131,143,151,121],
[178,181,162,194,0,203,160,123,160,183],
[150,165,160,166,137,0,182,147,171,164],
[150,175,113,209,180,158,0,160,138,168],
[205,211,141,197,217,193,180,0,207,204],
[165,180,166,189,180,169,202,133,0,167],
[187,208,151,219,157,176,172,136,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,184,174,171,174,175,176,167,167],
[170,0,163,168,174,169,176,188,180,167],
[156,177,0,166,160,175,183,177,160,174],
[166,172,174,0,163,165,169,171,168,175],
[169,166,180,177,0,174,177,175,161,169],
[166,171,165,175,166,0,168,168,162,168],
[165,164,157,171,163,172,0,164,153,166],
[164,152,163,169,165,172,176,0,167,170],
[173,160,180,172,179,178,187,173,0,173],
[173,173,166,165,171,172,174,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,156,173,186,145,166,169,192,175],
[153,0,164,140,121,123,157,142,123,144],
[184,176,0,149,191,160,149,134,115,170],
[167,200,191,0,202,175,154,189,172,169],
[154,219,149,138,0,173,142,167,162,186],
[195,217,180,165,167,0,173,199,175,152],
[174,183,191,186,198,167,0,174,179,188],
[171,198,206,151,173,141,166,0,191,156],
[148,217,225,168,178,165,161,149,0,169],
[165,196,170,171,154,188,152,184,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,176,159,187,172,177,189,151,139],
[152,0,153,155,171,177,171,200,154,165],
[164,187,0,137,186,166,162,189,161,147],
[181,185,203,0,168,177,177,157,178,203],
[153,169,154,172,0,157,137,172,178,165],
[168,163,174,163,183,0,214,189,150,190],
[163,169,178,163,203,126,0,189,163,178],
[151,140,151,183,168,151,151,0,175,157],
[189,186,179,162,162,190,177,165,0,169],
[201,175,193,137,175,150,162,183,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,98,148,179,178,155,177,141,171],
[130,0,55,93,157,127,162,130,135,145],
[242,285,0,228,195,223,259,154,194,200],
[192,247,112,0,148,184,170,156,161,143],
[161,183,145,192,0,177,184,142,137,155],
[162,213,117,156,163,0,173,218,190,223],
[185,178,81,170,156,167,0,148,172,156],
[163,210,186,184,198,122,192,0,150,198],
[199,205,146,179,203,150,168,190,0,139],
[169,195,140,197,185,117,184,142,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,174,137,160,184,191,191,164,152],
[193,0,182,173,183,196,190,180,147,205],
[166,158,0,158,170,167,191,212,153,154],
[203,167,182,0,177,185,172,219,154,155],
[180,157,170,163,0,175,177,199,173,171],
[156,144,173,155,165,0,180,197,128,173],
[149,150,149,168,163,160,0,195,151,183],
[149,160,128,121,141,143,145,0,113,127],
[176,193,187,186,167,212,189,227,0,148],
[188,135,186,185,169,167,157,213,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,171,165,167,171,170,160,177,173],
[159,0,177,150,155,166,173,158,177,163],
[169,163,0,163,171,171,170,144,177,170],
[175,190,177,0,173,170,182,165,181,181],
[173,185,169,167,0,180,183,160,184,175],
[169,174,169,170,160,0,182,162,172,160],
[170,167,170,158,157,158,0,150,167,160],
[180,182,196,175,180,178,190,0,199,168],
[163,163,163,159,156,168,173,141,0,158],
[167,177,170,159,165,180,180,172,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,173,155,172,156,151,169,162,153],
[181,0,164,187,168,164,174,176,167,178],
[167,176,0,176,183,170,163,167,170,177],
[185,153,164,0,162,147,158,162,150,167],
[168,172,157,178,0,155,167,189,157,172],
[184,176,170,193,185,0,169,171,175,163],
[189,166,177,182,173,171,0,163,153,162],
[171,164,173,178,151,169,177,0,168,161],
[178,173,170,190,183,165,187,172,0,170],
[187,162,163,173,168,177,178,179,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,178,174,189,173,153,159,171,160],
[159,0,144,164,187,170,155,153,164,172],
[162,196,0,175,185,173,161,163,175,178],
[166,176,165,0,180,172,152,159,167,160],
[151,153,155,160,0,161,142,143,165,151],
[167,170,167,168,179,0,150,152,164,156],
[187,185,179,188,198,190,0,166,184,180],
[181,187,177,181,197,188,174,0,186,169],
[169,176,165,173,175,176,156,154,0,165],
[180,168,162,180,189,184,160,171,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,171,164,193,165,158,177,165,166],
[165,0,165,157,177,166,165,144,152,144],
[169,175,0,173,186,166,158,176,181,145],
[176,183,167,0,196,137,158,161,190,136],
[147,163,154,144,0,136,161,147,141,123],
[175,174,174,203,204,0,158,160,168,174],
[182,175,182,182,179,182,0,160,188,167],
[163,196,164,179,193,180,180,0,187,180],
[175,188,159,150,199,172,152,153,0,155],
[174,196,195,204,217,166,173,160,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,275,225,215,274,176,154,229,194],
[111,0,174,190,225,185,186,173,204,204],
[65,166,0,190,140,185,101,88,154,119],
[115,150,150,0,189,189,202,88,255,181],
[125,115,200,151,0,125,226,173,119,240],
[66,155,155,151,215,0,141,154,119,155],
[164,154,239,138,114,199,0,88,145,145],
[186,167,252,252,167,186,252,0,181,252],
[111,136,186,85,221,221,195,159,0,186],
[146,136,221,159,100,185,195,88,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,187,167,182,189,172,172,160,158],
[176,0,182,142,182,172,166,185,157,184],
[153,158,0,156,158,172,176,164,157,141],
[173,198,184,0,174,194,179,182,155,163],
[158,158,182,166,0,174,184,186,154,175],
[151,168,168,146,166,0,189,176,160,149],
[168,174,164,161,156,151,0,169,156,144],
[168,155,176,158,154,164,171,0,161,143],
[180,183,183,185,186,180,184,179,0,165],
[182,156,199,177,165,191,196,197,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,179,167,166,160,160,177,168],
[166,0,170,179,169,172,161,176,179,178],
[172,170,0,178,166,174,162,161,175,174],
[161,161,162,0,165,161,171,174,161,161],
[173,171,174,175,0,162,156,159,162,170],
[174,168,166,179,178,0,168,172,185,179],
[180,179,178,169,184,172,0,182,180,182],
[180,164,179,166,181,168,158,0,179,177],
[163,161,165,179,178,155,160,161,0,175],
[172,162,166,179,170,161,158,163,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,175,183,175,179,167,169,201,190],
[148,0,148,167,177,156,180,156,173,171],
[165,192,0,202,188,186,162,179,183,214],
[157,173,138,0,155,166,147,145,176,175],
[165,163,152,185,0,173,160,164,184,180],
[161,184,154,174,167,0,179,165,187,198],
[173,160,178,193,180,161,0,166,180,190],
[171,184,161,195,176,175,174,0,181,188],
[139,167,157,164,156,153,160,159,0,193],
[150,169,126,165,160,142,150,152,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,178,166,154,182,152,162,148,167],
[172,0,174,178,166,179,177,161,161,188],
[162,166,0,157,169,163,174,161,165,169],
[174,162,183,0,164,183,178,164,173,184],
[186,174,171,176,0,187,166,173,174,182],
[158,161,177,157,153,0,159,159,156,173],
[188,163,166,162,174,181,0,170,167,164],
[178,179,179,176,167,181,170,0,167,175],
[192,179,175,167,166,184,173,173,0,174],
[173,152,171,156,158,167,176,165,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,163,169,183,163,170,174,171,181],
[168,0,167,169,178,173,181,173,169,174],
[177,173,0,170,182,161,183,171,172,155],
[171,171,170,0,186,181,165,168,177,173],
[157,162,158,154,0,175,164,187,165,163],
[177,167,179,159,165,0,168,175,160,170],
[170,159,157,175,176,172,0,160,155,177],
[166,167,169,172,153,165,180,0,181,184],
[169,171,168,163,175,180,185,159,0,178],
[159,166,185,167,177,170,163,156,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,138,151,135,150,168,129,169,126],
[193,0,162,197,172,177,174,162,206,135],
[202,178,0,196,164,172,189,154,203,161],
[189,143,144,0,137,157,160,158,183,165],
[205,168,176,203,0,189,176,181,225,182],
[190,163,168,183,151,0,159,159,194,142],
[172,166,151,180,164,181,0,159,189,151],
[211,178,186,182,159,181,181,0,213,148],
[171,134,137,157,115,146,151,127,0,147],
[214,205,179,175,158,198,189,192,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,176,166,183,182,174,185,173,167],
[155,0,159,162,165,163,159,174,159,172],
[164,181,0,164,170,176,187,178,173,183],
[174,178,176,0,176,179,183,178,162,167],
[157,175,170,164,0,165,166,169,158,164],
[158,177,164,161,175,0,175,174,169,174],
[166,181,153,157,174,165,0,178,158,170],
[155,166,162,162,171,166,162,0,157,173],
[167,181,167,178,182,171,182,183,0,184],
[173,168,157,173,176,166,170,167,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,178,167,163,226,193,192,180,192],
[180,0,181,178,164,207,167,171,169,187],
[162,159,0,155,161,209,136,187,165,199],
[173,162,185,0,162,206,154,203,175,160],
[177,176,179,178,0,198,169,190,184,206],
[114,133,131,134,142,0,139,170,124,137],
[147,173,204,186,171,201,0,183,161,201],
[148,169,153,137,150,170,157,0,160,163],
[160,171,175,165,156,216,179,180,0,187],
[148,153,141,180,134,203,139,177,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,158,175,160,151,173,164,173,161],
[168,0,174,169,167,161,171,167,167,175],
[182,166,0,188,169,171,189,175,167,174],
[165,171,152,0,175,157,175,180,155,177],
[180,173,171,165,0,155,187,184,163,185],
[189,179,169,183,185,0,187,189,194,186],
[167,169,151,165,153,153,0,169,178,176],
[176,173,165,160,156,151,171,0,158,170],
[167,173,173,185,177,146,162,182,0,173],
[179,165,166,163,155,154,164,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,175,138,123,117,166,166,194,130],
[189,0,143,230,116,165,141,233,168,124],
[165,197,0,224,203,144,201,225,183,156],
[202,110,116,0,135,187,124,185,152,108],
[217,224,137,205,0,161,199,224,190,155],
[223,175,196,153,179,0,163,189,160,183],
[174,199,139,216,141,177,0,227,148,145],
[174,107,115,155,116,151,113,0,177,90],
[146,172,157,188,150,180,192,163,0,141],
[210,216,184,232,185,157,195,250,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,165,173,164,172,161,188,174,171],
[164,0,147,177,175,165,168,186,176,169],
[175,193,0,169,183,173,165,187,167,174],
[167,163,171,0,176,175,158,171,168,173],
[176,165,157,164,0,168,166,164,169,171],
[168,175,167,165,172,0,164,179,181,176],
[179,172,175,182,174,176,0,183,166,179],
[152,154,153,169,176,161,157,0,167,164],
[166,164,173,172,171,159,174,173,0,169],
[169,171,166,167,169,164,161,176,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,176,171,176,178,172,180,191,169],
[159,0,175,166,170,173,169,171,185,156],
[164,165,0,183,177,165,172,162,164,171],
[169,174,157,0,163,163,186,173,175,162],
[164,170,163,177,0,188,164,173,192,169],
[162,167,175,177,152,0,148,172,194,180],
[168,171,168,154,176,192,0,166,184,184],
[160,169,178,167,167,168,174,0,188,191],
[149,155,176,165,148,146,156,152,0,150],
[171,184,169,178,171,160,156,149,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,164,150,192,181,192,190,155,170],
[165,0,163,144,192,189,215,182,173,166],
[176,177,0,178,191,196,203,174,175,170],
[190,196,162,0,198,207,201,193,198,183],
[148,148,149,142,0,187,184,185,149,148],
[159,151,144,133,153,0,195,142,137,140],
[148,125,137,139,156,145,0,148,144,130],
[150,158,166,147,155,198,192,0,154,168],
[185,167,165,142,191,203,196,186,0,164],
[170,174,170,157,192,200,210,172,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,155,173,164,171,163,165,173,174],
[179,0,151,183,175,167,173,173,178,165],
[185,189,0,179,174,185,170,191,191,195],
[167,157,161,0,178,175,155,182,171,177],
[176,165,166,162,0,167,159,188,169,169],
[169,173,155,165,173,0,160,176,162,168],
[177,167,170,185,181,180,0,186,172,192],
[175,167,149,158,152,164,154,0,157,159],
[167,162,149,169,171,178,168,183,0,170],
[166,175,145,163,171,172,148,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,226,127,156,91,172,128,151,163],
[234,0,231,208,170,112,216,212,189,174],
[114,109,0,124,93,96,127,121,173,123],
[213,132,216,0,138,122,231,141,177,211],
[184,170,247,202,0,137,180,177,210,191],
[249,228,244,218,203,0,242,154,209,231],
[168,124,213,109,160,98,0,124,175,172],
[212,128,219,199,163,186,216,0,168,208],
[189,151,167,163,130,131,165,172,0,142],
[177,166,217,129,149,109,168,132,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,140,161,165,172,163,158,169,183],
[198,0,179,197,194,201,156,208,188,164],
[200,161,0,188,183,203,186,215,221,198],
[179,143,152,0,169,165,168,189,170,172],
[175,146,157,171,0,182,160,161,181,177],
[168,139,137,175,158,0,166,170,181,154],
[177,184,154,172,180,174,0,229,183,185],
[182,132,125,151,179,170,111,0,167,149],
[171,152,119,170,159,159,157,173,0,172],
[157,176,142,168,163,186,155,191,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,186,177,178,191,171,174,180,162],
[152,0,170,172,179,176,173,177,166,169],
[154,170,0,170,173,167,154,180,177,164],
[163,168,170,0,183,184,167,172,173,168],
[162,161,167,157,0,169,182,173,159,175],
[149,164,173,156,171,0,175,163,169,145],
[169,167,186,173,158,165,0,175,168,163],
[166,163,160,168,167,177,165,0,165,163],
[160,174,163,167,181,171,172,175,0,156],
[178,171,176,172,165,195,177,177,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,174,168,171,162,170,176,172,163],
[181,0,160,181,164,174,186,184,178,179],
[166,180,0,170,183,169,165,176,179,180],
[172,159,170,0,169,163,172,177,162,175],
[169,176,157,171,0,160,175,175,173,178],
[178,166,171,177,180,0,178,171,191,180],
[170,154,175,168,165,162,0,178,176,173],
[164,156,164,163,165,169,162,0,171,172],
[168,162,161,178,167,149,164,169,0,167],
[177,161,160,165,162,160,167,168,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,174,170,154,168,160,147,140,150],
[192,0,165,175,166,180,179,166,170,170],
[166,175,0,155,171,178,164,178,176,166],
[170,165,185,0,167,178,171,161,169,166],
[186,174,169,173,0,182,170,181,169,163],
[172,160,162,162,158,0,168,169,152,161],
[180,161,176,169,170,172,0,166,165,164],
[193,174,162,179,159,171,174,0,159,168],
[200,170,164,171,171,188,175,181,0,171],
[190,170,174,174,177,179,176,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,188,162,146,165,164,169,166,179],
[188,0,180,162,166,158,175,177,165,192],
[152,160,0,153,134,148,142,157,158,164],
[178,178,187,0,157,170,164,177,174,194],
[194,174,206,183,0,188,151,201,185,182],
[175,182,192,170,152,0,172,182,178,185],
[176,165,198,176,189,168,0,184,176,186],
[171,163,183,163,139,158,156,0,178,175],
[174,175,182,166,155,162,164,162,0,180],
[161,148,176,146,158,155,154,165,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,146,169,179,169,186,119,190,135],
[210,0,156,169,162,201,212,175,243,193],
[194,184,0,229,165,154,204,211,210,180],
[171,171,111,0,149,122,200,178,202,103],
[161,178,175,191,0,152,218,179,226,137],
[171,139,186,218,188,0,245,175,225,173],
[154,128,136,140,122,95,0,152,172,188],
[221,165,129,162,161,165,188,0,187,176],
[150,97,130,138,114,115,168,153,0,111],
[205,147,160,237,203,167,152,164,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,151,158,172,186,163,164,184,175],
[181,0,165,174,172,175,177,155,192,176],
[189,175,0,169,194,191,186,172,187,196],
[182,166,171,0,172,177,175,172,176,176],
[168,168,146,168,0,175,166,151,177,164],
[154,165,149,163,165,0,178,159,171,185],
[177,163,154,165,174,162,0,148,169,162],
[176,185,168,168,189,181,192,0,193,192],
[156,148,153,164,163,169,171,147,0,171],
[165,164,144,164,176,155,178,148,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,169,177,185,179,169,171,179,174],
[162,0,163,160,166,175,158,164,162,168],
[171,177,0,168,173,176,173,174,177,176],
[163,180,172,0,183,177,186,172,165,176],
[155,174,167,157,0,165,152,155,160,169],
[161,165,164,163,175,0,157,168,166,160],
[171,182,167,154,188,183,0,173,182,164],
[169,176,166,168,185,172,167,0,162,170],
[161,178,163,175,180,174,158,178,0,159],
[166,172,164,164,171,180,176,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,189,162,180,159,134,157,214,233],
[103,0,156,154,127,148,109,132,139,178],
[151,184,0,148,145,151,143,138,205,176],
[178,186,192,0,205,171,170,159,245,202],
[160,213,195,135,0,180,155,174,217,220],
[181,192,189,169,160,0,157,193,189,202],
[206,231,197,170,185,183,0,189,211,236],
[183,208,202,181,166,147,151,0,259,224],
[126,201,135,95,123,151,129,81,0,191],
[107,162,164,138,120,138,104,116,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,162,182,186,173,185,153,169,182],
[180,0,163,175,176,167,174,177,171,177],
[178,177,0,177,178,180,168,181,189,196],
[158,165,163,0,175,163,157,174,154,173],
[154,164,162,165,0,166,161,164,178,185],
[167,173,160,177,174,0,176,155,183,161],
[155,166,172,183,179,164,0,181,172,191],
[187,163,159,166,176,185,159,0,176,187],
[171,169,151,186,162,157,168,164,0,179],
[158,163,144,167,155,179,149,153,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,164,171,162,162,162,152,145,163],
[211,0,164,195,192,178,187,180,177,188],
[176,176,0,190,185,195,171,171,161,187],
[169,145,150,0,182,166,167,158,150,160],
[178,148,155,158,0,154,180,165,161,176],
[178,162,145,174,186,0,173,161,166,170],
[178,153,169,173,160,167,0,148,156,162],
[188,160,169,182,175,179,192,0,172,168],
[195,163,179,190,179,174,184,168,0,195],
[177,152,153,180,164,170,178,172,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,176,180,184,162,179,178,179,179],
[164,0,158,152,190,150,192,164,183,192],
[164,182,0,143,178,168,184,166,184,164],
[160,188,197,0,214,173,194,190,212,178],
[156,150,162,126,0,132,172,151,159,163],
[178,190,172,167,208,0,194,172,181,186],
[161,148,156,146,168,146,0,126,160,154],
[162,176,174,150,189,168,214,0,188,176],
[161,157,156,128,181,159,180,152,0,162],
[161,148,176,162,177,154,186,164,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,151,167,166,162,152,178,164,149],
[179,0,171,159,148,149,155,169,163,151],
[189,169,0,164,170,161,165,178,171,157],
[173,181,176,0,176,159,164,191,167,149],
[174,192,170,164,0,172,184,175,179,159],
[178,191,179,181,168,0,172,170,175,159],
[188,185,175,176,156,168,0,179,173,172],
[162,171,162,149,165,170,161,0,166,147],
[176,177,169,173,161,165,167,174,0,171],
[191,189,183,191,181,181,168,193,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,211,161,183,186,187,165,161,182],
[182,0,212,186,140,166,180,172,184,198],
[129,128,0,146,144,155,163,126,137,150],
[179,154,194,0,176,179,188,184,162,156],
[157,200,196,164,0,184,189,197,167,186],
[154,174,185,161,156,0,172,171,184,172],
[153,160,177,152,151,168,0,171,155,159],
[175,168,214,156,143,169,169,0,141,175],
[179,156,203,178,173,156,185,199,0,214],
[158,142,190,184,154,168,181,165,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,199,171,192,195,188,223,138,203],
[166,0,170,153,173,168,177,201,170,165],
[141,170,0,122,179,177,165,183,140,175],
[169,187,218,0,198,192,182,202,157,193],
[148,167,161,142,0,151,191,175,126,162],
[145,172,163,148,189,0,173,198,142,159],
[152,163,175,158,149,167,0,187,140,130],
[117,139,157,138,165,142,153,0,134,127],
[202,170,200,183,214,198,200,206,0,180],
[137,175,165,147,178,181,210,213,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,161,169,166,167,173,160,174,158],
[167,0,176,184,169,172,167,165,177,176],
[179,164,0,177,167,171,173,167,177,176],
[171,156,163,0,166,173,159,166,159,174],
[174,171,173,174,0,167,170,168,172,169],
[173,168,169,167,173,0,161,162,167,162],
[167,173,167,181,170,179,0,171,180,173],
[180,175,173,174,172,178,169,0,169,163],
[166,163,163,181,168,173,160,171,0,165],
[182,164,164,166,171,178,167,177,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,187,242,124,305,227,233,167,194],
[74,0,99,120,64,180,95,186,90,110],
[153,241,0,235,133,256,213,188,205,174],
[98,220,105,0,182,248,195,159,210,128],
[216,276,207,158,0,222,184,209,191,214],
[35,160,84,92,118,0,121,92,94,84],
[113,245,127,145,156,219,0,158,176,194],
[107,154,152,181,131,248,182,0,164,170],
[173,250,135,130,149,246,164,176,0,178],
[146,230,166,212,126,256,146,170,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,168,182,161,165,176,187,172,176],
[179,0,180,176,176,163,174,191,168,167],
[172,160,0,172,165,168,164,197,166,169],
[158,164,168,0,160,163,170,181,168,157],
[179,164,175,180,0,175,159,179,178,167],
[175,177,172,177,165,0,168,194,178,175],
[164,166,176,170,181,172,0,199,174,178],
[153,149,143,159,161,146,141,0,160,149],
[168,172,174,172,162,162,166,180,0,171],
[164,173,171,183,173,165,162,191,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,178,186,178,179,170,190,184,175],
[150,0,177,163,170,171,174,176,189,176],
[162,163,0,153,172,156,159,186,172,164],
[154,177,187,0,175,159,178,196,191,183],
[162,170,168,165,0,154,171,184,179,171],
[161,169,184,181,186,0,172,189,179,162],
[170,166,181,162,169,168,0,182,189,164],
[150,164,154,144,156,151,158,0,157,171],
[156,151,168,149,161,161,151,183,0,160],
[165,164,176,157,169,178,176,169,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,173,181,170,138,159,173,181,183],
[160,0,175,159,171,157,174,167,188,174],
[167,165,0,168,183,156,156,171,163,183],
[159,181,172,0,173,153,161,154,177,171],
[170,169,157,167,0,154,159,169,167,155],
[202,183,184,187,186,0,170,192,182,192],
[181,166,184,179,181,170,0,182,181,172],
[167,173,169,186,171,148,158,0,174,165],
[159,152,177,163,173,158,159,166,0,155],
[157,166,157,169,185,148,168,175,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,198,192,181,203,144,167,166,193],
[147,0,157,190,150,147,159,135,164,152],
[142,183,0,155,100,145,147,152,131,153],
[148,150,185,0,157,159,139,149,125,167],
[159,190,240,183,0,194,192,181,178,216],
[137,193,195,181,146,0,143,181,173,158],
[196,181,193,201,148,197,0,175,210,198],
[173,205,188,191,159,159,165,0,176,183],
[174,176,209,215,162,167,130,164,0,172],
[147,188,187,173,124,182,142,157,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,170,147,151,168,165,174,139,172],
[154,0,170,155,139,162,175,194,139,156],
[170,170,0,145,152,158,153,165,122,159],
[193,185,195,0,166,166,184,185,167,178],
[189,201,188,174,0,182,174,198,155,176],
[172,178,182,174,158,0,174,177,170,178],
[175,165,187,156,166,166,0,183,161,176],
[166,146,175,155,142,163,157,0,150,160],
[201,201,218,173,185,170,179,190,0,190],
[168,184,181,162,164,162,164,180,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,160,184,186,166,157,171,169,184],
[205,0,176,202,177,178,174,155,145,187],
[180,164,0,158,151,145,141,153,153,173],
[156,138,182,0,163,158,188,143,172,190],
[154,163,189,177,0,144,150,174,158,181],
[174,162,195,182,196,0,163,155,187,189],
[183,166,199,152,190,177,0,168,138,193],
[169,185,187,197,166,185,172,0,164,173],
[171,195,187,168,182,153,202,176,0,172],
[156,153,167,150,159,151,147,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,190,155,183,162,174,161,161,160],
[177,0,192,178,185,180,167,179,167,162],
[150,148,0,152,171,164,165,165,145,168],
[185,162,188,0,203,173,177,186,161,177],
[157,155,169,137,0,145,165,173,137,165],
[178,160,176,167,195,0,182,167,184,188],
[166,173,175,163,175,158,0,175,162,168],
[179,161,175,154,167,173,165,0,163,176],
[179,173,195,179,203,156,178,177,0,178],
[180,178,172,163,175,152,172,164,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,217,200,195,187,191,252,167,147],
[137,0,284,244,212,175,190,255,198,187],
[123,56,0,120,159,137,137,174,107,122],
[140,96,220,0,140,138,97,216,135,108],
[145,128,181,200,0,131,156,219,139,155],
[153,165,203,202,209,0,150,245,143,202],
[149,150,203,243,184,190,0,220,189,158],
[88,85,166,124,121,95,120,0,84,103],
[173,142,233,205,201,197,151,256,0,165],
[193,153,218,232,185,138,182,237,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,173,166,170,165,173,180,178,175],
[180,0,178,172,176,169,181,180,184,168],
[167,162,0,167,169,182,173,168,180,177],
[174,168,173,0,164,161,171,182,183,172],
[170,164,171,176,0,179,172,177,179,173],
[175,171,158,179,161,0,168,171,186,178],
[167,159,167,169,168,172,0,172,173,168],
[160,160,172,158,163,169,168,0,167,165],
[162,156,160,157,161,154,167,173,0,156],
[165,172,163,168,167,162,172,175,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,139,205,161,174,141,192,163,162],
[183,0,139,206,172,174,142,192,178,140],
[201,201,0,220,171,179,163,204,192,185],
[135,134,120,0,128,131,126,137,149,147],
[179,168,169,212,0,184,152,212,184,168],
[166,166,161,209,156,0,137,176,183,154],
[199,198,177,214,188,203,0,190,186,169],
[148,148,136,203,128,164,150,0,182,165],
[177,162,148,191,156,157,154,158,0,154],
[178,200,155,193,172,186,171,175,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,197,159,179,161,145,159,163,157],
[163,0,181,185,172,172,193,172,205,169],
[143,159,0,191,177,158,150,140,189,171],
[181,155,149,0,138,167,152,148,192,155],
[161,168,163,202,0,167,177,167,166,169],
[179,168,182,173,173,0,197,169,191,178],
[195,147,190,188,163,143,0,135,192,171],
[181,168,200,192,173,171,205,0,194,154],
[177,135,151,148,174,149,148,146,0,170],
[183,171,169,185,171,162,169,186,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,170,161,147,166,149,152,155,197],
[181,0,158,160,161,173,159,183,156,187],
[170,182,0,184,149,166,179,177,185,198],
[179,180,156,0,152,172,161,185,172,181],
[193,179,191,188,0,152,178,167,186,187],
[174,167,174,168,188,0,151,187,173,182],
[191,181,161,179,162,189,0,182,185,209],
[188,157,163,155,173,153,158,0,164,167],
[185,184,155,168,154,167,155,176,0,183],
[143,153,142,159,153,158,131,173,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,152,155,178,239,229,215,172,155],
[151,0,144,170,155,241,199,217,200,190],
[188,196,0,136,173,237,184,216,162,138],
[185,170,204,0,197,194,185,172,178,154],
[162,185,167,143,0,214,196,192,189,148],
[101,99,103,146,126,0,132,114,164,114],
[111,141,156,155,144,208,0,160,166,116],
[125,123,124,168,148,226,180,0,187,139],
[168,140,178,162,151,176,174,153,0,142],
[185,150,202,186,192,226,224,201,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,154,184,167,185,175,194,174,152],
[155,0,146,163,153,170,177,177,165,160],
[186,194,0,184,168,178,186,191,174,161],
[156,177,156,0,168,153,179,177,186,152],
[173,187,172,172,0,161,192,201,156,151],
[155,170,162,187,179,0,174,190,165,148],
[165,163,154,161,148,166,0,172,160,148],
[146,163,149,163,139,150,168,0,148,152],
[166,175,166,154,184,175,180,192,0,175],
[188,180,179,188,189,192,192,188,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,152,158,143,152,136,161,176,182],
[190,0,181,167,170,176,181,183,198,196],
[188,159,0,145,150,161,141,151,153,175],
[182,173,195,0,162,158,166,180,173,178],
[197,170,190,178,0,161,179,180,181,184],
[188,164,179,182,179,0,171,180,198,186],
[204,159,199,174,161,169,0,180,166,177],
[179,157,189,160,160,160,160,0,168,181],
[164,142,187,167,159,142,174,172,0,176],
[158,144,165,162,156,154,163,159,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,163,181,185,182,188,175,165,190],
[162,0,166,168,163,170,169,172,151,180],
[177,174,0,167,159,171,177,159,160,171],
[159,172,173,0,146,168,168,180,154,159],
[155,177,181,194,0,158,155,186,162,171],
[158,170,169,172,182,0,180,177,174,184],
[152,171,163,172,185,160,0,158,161,180],
[165,168,181,160,154,163,182,0,162,153],
[175,189,180,186,178,166,179,178,0,183],
[150,160,169,181,169,156,160,187,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,173,174,172,164,184,172,178,151],
[154,0,163,163,169,165,172,158,167,152],
[167,177,0,191,180,174,180,188,185,168],
[166,177,149,0,164,168,160,171,175,153],
[168,171,160,176,0,157,164,164,165,160],
[176,175,166,172,183,0,178,180,173,174],
[156,168,160,180,176,162,0,163,175,161],
[168,182,152,169,176,160,177,0,172,159],
[162,173,155,165,175,167,165,168,0,151],
[189,188,172,187,180,166,179,181,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,192,198,180,183,167,187,176,207],
[158,0,174,195,165,164,168,168,167,202],
[148,166,0,189,171,153,148,168,173,193],
[142,145,151,0,160,136,136,150,164,173],
[160,175,169,180,0,167,160,156,160,188],
[157,176,187,204,173,0,163,172,160,188],
[173,172,192,204,180,177,0,180,162,196],
[153,172,172,190,184,168,160,0,165,181],
[164,173,167,176,180,180,178,175,0,196],
[133,138,147,167,152,152,144,159,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,158,156,144,167,144,154,152,158],
[194,0,174,168,153,176,165,170,163,177],
[182,166,0,172,166,182,175,153,164,167],
[184,172,168,0,167,176,175,164,160,187],
[196,187,174,173,0,190,161,152,172,184],
[173,164,158,164,150,0,158,152,150,172],
[196,175,165,165,179,182,0,157,179,178],
[186,170,187,176,188,188,183,0,179,175],
[188,177,176,180,168,190,161,161,0,178],
[182,163,173,153,156,168,162,165,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,165,160,176,170,172,195,188,190],
[154,0,156,153,169,156,158,160,175,162],
[175,184,0,192,162,153,170,180,187,154],
[180,187,148,0,176,158,172,181,183,168],
[164,171,178,164,0,156,158,158,177,155],
[170,184,187,182,184,0,168,183,171,184],
[168,182,170,168,182,172,0,173,193,168],
[145,180,160,159,182,157,167,0,196,174],
[152,165,153,157,163,169,147,144,0,163],
[150,178,186,172,185,156,172,166,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,157,165,188,150,164,169,154,156],
[184,0,166,180,189,186,189,196,178,180],
[183,174,0,185,186,159,184,184,154,188],
[175,160,155,0,184,162,160,165,152,158],
[152,151,154,156,0,152,157,158,151,149],
[190,154,181,178,188,0,185,186,176,179],
[176,151,156,180,183,155,0,163,166,153],
[171,144,156,175,182,154,177,0,164,160],
[186,162,186,188,189,164,174,176,0,178],
[184,160,152,182,191,161,187,180,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,208,143,192,150,152,151,180,162],
[197,0,207,173,197,157,184,176,184,174],
[132,133,0,141,160,134,134,134,158,170],
[197,167,199,0,191,168,153,144,185,174],
[148,143,180,149,0,140,146,122,166,167],
[190,183,206,172,200,0,166,150,193,186],
[188,156,206,187,194,174,0,176,203,201],
[189,164,206,196,218,190,164,0,196,194],
[160,156,182,155,174,147,137,144,0,149],
[178,166,170,166,173,154,139,146,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,190,187,203,151,194,199,220,178],
[144,0,150,162,168,175,177,167,185,172],
[150,190,0,153,200,167,204,190,182,183],
[153,178,187,0,195,143,165,177,169,168],
[137,172,140,145,0,150,168,149,146,154],
[189,165,173,197,190,0,181,179,193,176],
[146,163,136,175,172,159,0,148,145,162],
[141,173,150,163,191,161,192,0,168,170],
[120,155,158,171,194,147,195,172,0,153],
[162,168,157,172,186,164,178,170,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,157,151,160,152,183,151,168,173],
[181,0,171,174,157,171,174,161,180,183],
[183,169,0,179,163,172,180,158,178,173],
[189,166,161,0,155,150,176,153,175,177],
[180,183,177,185,0,159,179,175,166,185],
[188,169,168,190,181,0,195,178,180,198],
[157,166,160,164,161,145,0,148,168,175],
[189,179,182,187,165,162,192,0,169,189],
[172,160,162,165,174,160,172,171,0,191],
[167,157,167,163,155,142,165,151,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,185,182,175,168,167,174,172,157],
[132,0,161,127,143,143,126,128,160,130],
[155,179,0,147,162,157,140,167,150,162],
[158,213,193,0,200,171,171,168,188,161],
[165,197,178,140,0,160,159,151,182,153],
[172,197,183,169,180,0,175,190,208,174],
[173,214,200,169,181,165,0,172,204,175],
[166,212,173,172,189,150,168,0,186,165],
[168,180,190,152,158,132,136,154,0,155],
[183,210,178,179,187,166,165,175,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,174,171,158,171,181,174,161,168],
[161,0,180,176,161,165,176,172,156,172],
[166,160,0,165,155,167,170,175,151,166],
[169,164,175,0,163,171,182,179,170,170],
[182,179,185,177,0,163,183,177,173,173],
[169,175,173,169,177,0,177,190,160,177],
[159,164,170,158,157,163,0,164,146,163],
[166,168,165,161,163,150,176,0,157,155],
[179,184,189,170,167,180,194,183,0,173],
[172,168,174,170,167,163,177,185,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,169,161,156,160,160,164,173,164],
[190,0,167,175,175,174,173,184,185,177],
[171,173,0,153,153,163,166,158,172,163],
[179,165,187,0,168,171,157,166,183,191],
[184,165,187,172,0,157,179,176,170,183],
[180,166,177,169,183,0,187,186,186,181],
[180,167,174,183,161,153,0,178,188,184],
[176,156,182,174,164,154,162,0,173,171],
[167,155,168,157,170,154,152,167,0,164],
[176,163,177,149,157,159,156,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,175,184,183,153,173,174,160,167],
[171,0,183,184,179,174,161,171,174,156],
[165,157,0,178,163,164,171,170,143,148],
[156,156,162,0,174,158,165,170,161,163],
[157,161,177,166,0,164,157,165,154,143],
[187,166,176,182,176,0,175,179,177,193],
[167,179,169,175,183,165,0,159,168,174],
[166,169,170,170,175,161,181,0,152,158],
[180,166,197,179,186,163,172,188,0,164],
[173,184,192,177,197,147,166,182,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,202,170,176,158,167,165,180],
[171,0,175,185,152,172,170,162,176,172],
[172,165,0,201,158,164,174,170,174,174],
[138,155,139,0,151,159,154,148,144,160],
[170,188,182,189,0,182,175,160,162,179],
[164,168,176,181,158,0,174,159,164,180],
[182,170,166,186,165,166,0,177,162,172],
[173,178,170,192,180,181,163,0,161,187],
[175,164,166,196,178,176,178,179,0,174],
[160,168,166,180,161,160,168,153,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,179,152,141,171,145,157,146,170],
[178,0,176,146,145,173,146,155,160,147],
[161,164,0,171,169,152,174,173,166,153],
[188,194,169,0,171,182,160,177,186,175],
[199,195,171,169,0,186,173,161,161,178],
[169,167,188,158,154,0,160,172,176,163],
[195,194,166,180,167,180,0,182,168,160],
[183,185,167,163,179,168,158,0,183,192],
[194,180,174,154,179,164,172,157,0,163],
[170,193,187,165,162,177,180,148,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,131,213,155,182,164,186,153,144],
[191,0,181,215,182,184,194,210,162,168],
[209,159,0,234,166,177,207,204,180,171],
[127,125,106,0,140,156,138,179,136,142],
[185,158,174,200,0,173,177,188,139,165],
[158,156,163,184,167,0,197,183,148,144],
[176,146,133,202,163,143,0,198,165,140],
[154,130,136,161,152,157,142,0,146,146],
[187,178,160,204,201,192,175,194,0,179],
[196,172,169,198,175,196,200,194,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,172,168,167,166,164,169,155,168],
[191,0,160,189,162,191,166,169,156,183],
[168,180,0,174,163,177,189,172,157,167],
[172,151,166,0,181,166,174,175,165,174],
[173,178,177,159,0,160,177,177,181,183],
[174,149,163,174,180,0,163,159,165,163],
[176,174,151,166,163,177,0,160,158,169],
[171,171,168,165,163,181,180,0,170,173],
[185,184,183,175,159,175,182,170,0,180],
[172,157,173,166,157,177,171,167,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,154,160,155,155,168,164,161,182],
[166,0,162,170,171,148,149,173,162,170],
[186,178,0,177,160,162,173,184,173,175],
[180,170,163,0,164,157,162,171,168,182],
[185,169,180,176,0,169,178,172,182,185],
[185,192,178,183,171,0,173,184,166,184],
[172,191,167,178,162,167,0,171,166,176],
[176,167,156,169,168,156,169,0,171,165],
[179,178,167,172,158,174,174,169,0,180],
[158,170,165,158,155,156,164,175,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,155,174,166,176,184,168,166,169],
[173,0,171,166,183,169,180,175,171,176],
[185,169,0,181,184,167,190,172,179,185],
[166,174,159,0,173,164,180,173,169,171],
[174,157,156,167,0,165,177,174,170,169],
[164,171,173,176,175,0,175,164,171,172],
[156,160,150,160,163,165,0,156,169,172],
[172,165,168,167,166,176,184,0,186,174],
[174,169,161,171,170,169,171,154,0,185],
[171,164,155,169,171,168,168,166,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,161,178,175,181,175,166,172,167],
[158,0,172,164,144,170,179,155,148,159],
[179,168,0,165,161,178,181,167,167,170],
[162,176,175,0,162,174,194,166,175,166],
[165,196,179,178,0,178,177,161,170,176],
[159,170,162,166,162,0,172,170,172,169],
[165,161,159,146,163,168,0,149,137,171],
[174,185,173,174,179,170,191,0,163,176],
[168,192,173,165,170,168,203,177,0,185],
[173,181,170,174,164,171,169,164,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,167,152,167,162,171,172,159,154],
[167,0,171,158,163,168,174,169,164,161],
[173,169,0,164,167,175,180,166,171,163],
[188,182,176,0,179,177,173,170,177,173],
[173,177,173,161,0,176,165,182,180,165],
[178,172,165,163,164,0,168,171,167,164],
[169,166,160,167,175,172,0,175,172,172],
[168,171,174,170,158,169,165,0,168,166],
[181,176,169,163,160,173,168,172,0,166],
[186,179,177,167,175,176,168,174,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,193,193,187,206,197,208,180,154],
[130,0,167,182,139,149,150,173,146,168],
[147,173,0,177,160,168,148,194,181,175],
[147,158,163,0,176,190,171,181,143,124],
[153,201,180,164,0,176,166,191,166,161],
[134,191,172,150,164,0,164,193,155,138],
[143,190,192,169,174,176,0,192,163,164],
[132,167,146,159,149,147,148,0,111,122],
[160,194,159,197,174,185,177,229,0,154],
[186,172,165,216,179,202,176,218,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,188,181,163,195,183,187,191,181],
[161,0,177,179,161,181,152,187,169,167],
[152,163,0,165,160,195,171,182,172,182],
[159,161,175,0,165,190,171,193,185,163],
[177,179,180,175,0,196,162,196,175,167],
[145,159,145,150,144,0,162,180,167,157],
[157,188,169,169,178,178,0,214,169,173],
[153,153,158,147,144,160,126,0,144,149],
[149,171,168,155,165,173,171,196,0,184],
[159,173,158,177,173,183,167,191,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,217,110,216,60,110,110,129,110],
[183,0,233,196,166,183,183,183,146,110],
[123,107,0,60,166,37,0,0,86,0],
[230,144,280,0,230,230,230,230,193,157],
[124,174,174,110,0,124,174,174,210,174],
[280,157,303,110,216,0,179,196,179,93],
[230,157,340,110,166,161,0,253,236,200],
[230,157,340,110,166,144,87,0,86,50],
[211,194,254,147,130,161,104,254,0,174],
[230,230,340,183,166,247,140,290,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,182,194,166,164,153,156,151,160],
[171,0,186,168,175,181,162,171,162,160],
[158,154,0,160,154,152,159,161,145,158],
[146,172,180,0,165,168,142,155,146,157],
[174,165,186,175,0,183,167,187,171,171],
[176,159,188,172,157,0,154,191,168,169],
[187,178,181,198,173,186,0,189,174,166],
[184,169,179,185,153,149,151,0,154,158],
[189,178,195,194,169,172,166,186,0,177],
[180,180,182,183,169,171,174,182,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,167,218,222,218,218,165,301,289],
[145,0,93,206,206,93,93,204,258,145],
[173,247,0,216,286,173,103,165,247,301],
[122,134,124,0,122,124,70,165,134,176],
[118,134,54,218,0,66,66,165,231,106],
[122,247,167,216,274,0,64,165,247,289],
[122,247,237,270,274,276,0,165,301,289],
[175,136,175,175,175,175,175,0,227,175],
[39,82,93,206,109,93,39,113,0,163],
[51,195,39,164,234,51,51,165,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,174,192,191,167,182,177,163],
[164,0,143,162,164,161,170,175,173,159],
[170,197,0,174,179,185,180,189,194,179],
[166,178,166,0,195,190,171,181,192,159],
[148,176,161,145,0,172,161,177,168,158],
[149,179,155,150,168,0,167,172,160,151],
[173,170,160,169,179,173,0,181,187,171],
[158,165,151,159,163,168,159,0,169,164],
[163,167,146,148,172,180,153,171,0,159],
[177,181,161,181,182,189,169,176,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,167,152,136,121,126,161,101,125],
[227,0,222,194,198,195,180,191,162,177],
[173,118,0,150,122,143,154,150,117,133],
[188,146,190,0,135,160,142,159,103,131],
[204,142,218,205,0,181,186,168,150,145],
[219,145,197,180,159,0,166,165,172,162],
[214,160,186,198,154,174,0,175,178,161],
[179,149,190,181,172,175,165,0,151,142],
[239,178,223,237,190,168,162,189,0,178],
[215,163,207,209,195,178,179,198,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,169,141,141,169,138,167,138,158],
[157,0,185,181,166,172,138,139,137,158],
[171,155,0,181,143,137,154,162,131,146],
[199,159,159,0,152,180,165,178,126,174],
[199,174,197,188,0,183,152,173,169,169],
[171,168,203,160,157,0,180,165,153,155],
[202,202,186,175,188,160,0,198,180,170],
[173,201,178,162,167,175,142,0,152,167],
[202,203,209,214,171,187,160,188,0,169],
[182,182,194,166,171,185,170,173,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,177,157,187,162,157,157,165,149],
[165,0,166,183,194,181,190,183,173,161],
[163,174,0,166,192,158,180,165,169,148],
[183,157,174,0,176,148,174,179,166,166],
[153,146,148,164,0,161,155,161,156,154],
[178,159,182,192,179,0,193,193,182,176],
[183,150,160,166,185,147,0,178,174,159],
[183,157,175,161,179,147,162,0,176,154],
[175,167,171,174,184,158,166,164,0,159],
[191,179,192,174,186,164,181,186,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,196,128,180,178,157,209,190,169],
[134,0,140,84,127,157,99,105,106,112],
[144,200,0,142,170,190,194,188,168,168],
[212,256,198,0,190,193,187,165,206,127],
[160,213,170,150,0,219,213,162,148,119],
[162,183,150,147,121,0,168,137,223,208],
[183,241,146,153,127,172,0,154,177,143],
[131,235,152,175,178,203,186,0,169,115],
[150,234,172,134,192,117,163,171,0,134],
[171,228,172,213,221,132,197,225,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,155,177,151,176,167,174,207,185],
[153,0,136,128,142,153,155,169,151,157],
[185,204,0,187,155,170,165,170,202,195],
[163,212,153,0,169,149,172,175,192,183],
[189,198,185,171,0,162,159,166,176,190],
[164,187,170,191,178,0,170,177,186,206],
[173,185,175,168,181,170,0,185,189,185],
[166,171,170,165,174,163,155,0,166,183],
[133,189,138,148,164,154,151,174,0,172],
[155,183,145,157,150,134,155,157,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,188,165,186,176,176,176,179,176],
[155,0,165,166,168,163,166,177,184,173],
[152,175,0,175,180,171,168,172,183,189],
[175,174,165,0,178,168,154,175,186,171],
[154,172,160,162,0,168,157,166,175,167],
[164,177,169,172,172,0,153,175,169,169],
[164,174,172,186,183,187,0,180,192,188],
[164,163,168,165,174,165,160,0,188,165],
[161,156,157,154,165,171,148,152,0,163],
[164,167,151,169,173,171,152,175,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,162,172,165,150,170,160,166,156],
[179,0,163,167,152,161,158,162,175,163],
[178,177,0,174,177,163,173,184,177,177],
[168,173,166,0,164,166,171,166,166,168],
[175,188,163,176,0,168,165,167,184,174],
[190,179,177,174,172,0,177,185,185,166],
[170,182,167,169,175,163,0,159,168,169],
[180,178,156,174,173,155,181,0,175,179],
[174,165,163,174,156,155,172,165,0,169],
[184,177,163,172,166,174,171,161,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,151,174,160,137,172,143,166,161],
[173,0,158,176,180,160,195,159,170,149],
[189,182,0,193,181,186,182,165,179,177],
[166,164,147,0,189,156,173,156,159,148],
[180,160,159,151,0,147,172,146,159,157],
[203,180,154,184,193,0,180,180,185,158],
[168,145,158,167,168,160,0,165,154,141],
[197,181,175,184,194,160,175,0,162,178],
[174,170,161,181,181,155,186,178,0,156],
[179,191,163,192,183,182,199,162,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,193,171,183,155,172,176,136,162],
[154,0,176,154,163,157,152,150,128,157],
[147,164,0,167,164,141,164,162,151,147],
[169,186,173,0,176,173,160,159,149,158],
[157,177,176,164,0,167,169,161,135,158],
[185,183,199,167,173,0,161,176,174,178],
[168,188,176,180,171,179,0,193,163,160],
[164,190,178,181,179,164,147,0,148,169],
[204,212,189,191,205,166,177,192,0,190],
[178,183,193,182,182,162,180,171,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,160,178,184,176,165,182,168,162],
[147,0,160,156,162,160,151,162,157,170],
[180,180,0,163,182,144,146,160,163,146],
[162,184,177,0,191,172,190,193,182,172],
[156,178,158,149,0,160,155,158,149,146],
[164,180,196,168,180,0,173,168,161,162],
[175,189,194,150,185,167,0,176,173,160],
[158,178,180,147,182,172,164,0,169,159],
[172,183,177,158,191,179,167,171,0,169],
[178,170,194,168,194,178,180,181,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,171,181,189,171,179,165,169,162],
[153,0,151,153,161,158,168,151,148,152],
[169,189,0,179,186,165,165,165,169,175],
[159,187,161,0,184,174,166,162,162,165],
[151,179,154,156,0,164,155,160,155,146],
[169,182,175,166,176,0,180,166,162,177],
[161,172,175,174,185,160,0,170,175,169],
[175,189,175,178,180,174,170,0,164,175],
[171,192,171,178,185,178,165,176,0,161],
[178,188,165,175,194,163,171,165,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,165,174,166,176,160,180,162,160],
[162,0,186,179,181,175,164,167,172,169],
[175,154,0,192,184,180,175,172,142,172],
[166,161,148,0,157,169,169,186,173,175],
[174,159,156,183,0,177,160,173,149,173],
[164,165,160,171,163,0,161,185,140,147],
[180,176,165,171,180,179,0,168,155,164],
[160,173,168,154,167,155,172,0,153,150],
[178,168,198,167,191,200,185,187,0,193],
[180,171,168,165,167,193,176,190,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,156,153,156,154,161,159,168,155],
[183,0,180,173,170,183,180,175,174,184],
[184,160,0,169,167,177,189,173,179,175],
[187,167,171,0,178,168,180,174,181,177],
[184,170,173,162,0,160,171,162,173,179],
[186,157,163,172,180,0,184,177,182,178],
[179,160,151,160,169,156,0,157,175,173],
[181,165,167,166,178,163,183,0,175,177],
[172,166,161,159,167,158,165,165,0,164],
[185,156,165,163,161,162,167,163,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,156,173,196,182,182,188,172],
[162,0,179,153,178,193,169,190,166,175],
[174,161,0,163,169,179,182,186,181,164],
[184,187,177,0,158,201,186,184,197,190],
[167,162,171,182,0,207,168,175,170,185],
[144,147,161,139,133,0,148,166,178,155],
[158,171,158,154,172,192,0,189,179,175],
[158,150,154,156,165,174,151,0,177,158],
[152,174,159,143,170,162,161,163,0,177],
[168,165,176,150,155,185,165,182,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,165,166,172,163,172,165,157,160],
[168,0,154,167,169,173,170,165,158,170],
[175,186,0,175,178,181,179,171,159,177],
[174,173,165,0,174,173,171,160,155,159],
[168,171,162,166,0,168,170,156,169,163],
[177,167,159,167,172,0,171,168,159,170],
[168,170,161,169,170,169,0,165,164,179],
[175,175,169,180,184,172,175,0,163,164],
[183,182,181,185,171,181,176,177,0,168],
[180,170,163,181,177,170,161,176,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,153,156,135,144,129,146,169,140],
[204,0,167,139,182,173,161,173,184,163],
[187,173,0,171,192,157,156,176,195,187],
[184,201,169,0,216,180,170,178,223,175],
[205,158,148,124,0,158,171,189,180,141],
[196,167,183,160,182,0,179,215,190,161],
[211,179,184,170,169,161,0,203,189,145],
[194,167,164,162,151,125,137,0,181,170],
[171,156,145,117,160,150,151,159,0,146],
[200,177,153,165,199,179,195,170,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,165,177,172,197,185,186,173,163],
[159,0,150,156,151,179,167,158,143,159],
[175,190,0,192,180,174,178,177,159,177],
[163,184,148,0,149,186,175,162,151,168],
[168,189,160,191,0,187,182,171,163,176],
[143,161,166,154,153,0,166,150,149,165],
[155,173,162,165,158,174,0,159,160,166],
[154,182,163,178,169,190,181,0,146,167],
[167,197,181,189,177,191,180,194,0,184],
[177,181,163,172,164,175,174,173,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,193,171,169,140,179,167,176,172],
[149,0,158,151,134,154,175,150,158,195],
[147,182,0,147,132,145,176,157,174,156],
[169,189,193,0,181,181,174,169,172,183],
[171,206,208,159,0,145,188,186,208,151],
[200,186,195,159,195,0,206,210,220,195],
[161,165,164,166,152,134,0,186,173,187],
[173,190,183,171,154,130,154,0,178,153],
[164,182,166,168,132,120,167,162,0,155],
[168,145,184,157,189,145,153,187,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,187,165,181,188,173,180,168,187],
[178,0,166,177,177,181,175,175,157,181],
[153,174,0,163,189,178,156,177,146,165],
[175,163,177,0,175,180,159,188,167,171],
[159,163,151,165,0,171,159,170,162,164],
[152,159,162,160,169,0,168,163,173,153],
[167,165,184,181,181,172,0,178,172,181],
[160,165,163,152,170,177,162,0,156,174],
[172,183,194,173,178,167,168,184,0,171],
[153,159,175,169,176,187,159,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,167,168,182,174,171,179,168,180],
[168,0,162,170,170,164,170,169,169,176],
[173,178,0,170,180,181,185,168,180,176],
[172,170,170,0,167,165,165,165,170,175],
[158,170,160,173,0,168,168,162,171,166],
[166,176,159,175,172,0,177,166,167,177],
[169,170,155,175,172,163,0,177,165,163],
[161,171,172,175,178,174,163,0,166,166],
[172,171,160,170,169,173,175,174,0,183],
[160,164,164,165,174,163,177,174,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,155,158,166,165,154,167,163],
[181,0,169,163,166,172,152,168,158,174],
[177,171,0,179,167,173,170,163,166,183],
[185,177,161,0,161,175,166,162,159,172],
[182,174,173,179,0,173,170,162,162,176],
[174,168,167,165,167,0,161,163,159,171],
[175,188,170,174,170,179,0,171,176,171],
[186,172,177,178,178,177,169,0,175,176],
[173,182,174,181,178,181,164,165,0,174],
[177,166,157,168,164,169,169,164,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,204,157,201,167,174,191,192,183],
[154,0,176,154,156,147,154,172,180,145],
[136,164,0,169,163,173,150,174,163,161],
[183,186,171,0,184,153,185,183,185,188],
[139,184,177,156,0,152,148,160,170,171],
[173,193,167,187,188,0,162,194,187,177],
[166,186,190,155,192,178,0,171,180,175],
[149,168,166,157,180,146,169,0,188,159],
[148,160,177,155,170,153,160,152,0,162],
[157,195,179,152,169,163,165,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,160,166,153,182,155,170,155,159],
[203,0,201,192,166,210,201,208,202,189],
[180,139,0,169,175,197,186,188,174,168],
[174,148,171,0,139,164,160,159,152,155],
[187,174,165,201,0,198,184,209,174,176],
[158,130,143,176,142,0,157,159,148,144],
[185,139,154,180,156,183,0,176,164,159],
[170,132,152,181,131,181,164,0,154,148],
[185,138,166,188,166,192,176,186,0,159],
[181,151,172,185,164,196,181,192,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,188,168,175,183,161,168,174,171],
[161,0,164,159,167,185,166,160,171,173],
[152,176,0,174,178,188,179,171,165,174],
[172,181,166,0,181,185,173,177,172,178],
[165,173,162,159,0,173,155,157,170,168],
[157,155,152,155,167,0,144,167,158,161],
[179,174,161,167,185,196,0,182,167,180],
[172,180,169,163,183,173,158,0,167,196],
[166,169,175,168,170,182,173,173,0,188],
[169,167,166,162,172,179,160,144,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,162,153,152,152,158,148,163,168],
[177,0,144,168,154,163,172,171,176,168],
[178,196,0,177,177,180,171,184,168,160],
[187,172,163,0,162,168,178,170,169,171],
[188,186,163,178,0,177,188,170,181,181],
[188,177,160,172,163,0,176,182,167,171],
[182,168,169,162,152,164,0,168,160,161],
[192,169,156,170,170,158,172,0,165,164],
[177,164,172,171,159,173,180,175,0,159],
[172,172,180,169,159,169,179,176,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,188,152,157,183,174,143,174],
[169,0,174,175,184,214,167,170,140,120],
[171,166,0,178,171,163,175,158,133,140],
[152,165,162,0,156,167,154,161,156,123],
[188,156,169,184,0,198,162,134,157,144],
[183,126,177,173,142,0,171,170,108,108],
[157,173,165,186,178,169,0,180,150,143],
[166,170,182,179,206,170,160,0,162,142],
[197,200,207,184,183,232,190,178,0,161],
[166,220,200,217,196,232,197,198,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,167,192,179,187,169,166,187,180],
[139,0,153,160,146,171,150,163,170,149],
[173,187,0,180,185,183,176,169,181,174],
[148,180,160,0,167,171,165,172,175,172],
[161,194,155,173,0,175,173,175,178,167],
[153,169,157,169,165,0,165,166,169,162],
[171,190,164,175,167,175,0,175,185,171],
[174,177,171,168,165,174,165,0,181,164],
[153,170,159,165,162,171,155,159,0,171],
[160,191,166,168,173,178,169,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,205,146,158,133,249,159,178,160],
[202,0,174,170,173,224,220,186,210,127],
[135,166,0,109,163,140,156,145,163,157],
[194,170,231,0,168,143,203,143,194,178],
[182,167,177,172,0,175,171,157,157,146],
[207,116,200,197,165,0,166,142,157,147],
[91,120,184,137,169,174,0,150,225,180],
[181,154,195,197,183,198,190,0,163,177],
[162,130,177,146,183,183,115,177,0,138],
[180,213,183,162,194,193,160,163,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,46,97,158,112,67,170,87,109],
[190,0,158,103,242,159,73,93,61,105],
[294,182,0,182,197,124,165,216,126,197],
[243,237,158,0,294,159,230,119,126,105],
[182,98,143,46,0,112,58,78,46,58],
[228,181,216,181,228,0,164,177,126,163],
[273,267,175,110,282,176,0,151,177,122],
[170,247,124,221,262,163,189,0,150,136],
[253,279,214,214,294,214,163,190,0,246],
[231,235,143,235,282,177,218,204,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,178,186,186,189,178,180,164,183],
[158,0,172,164,149,167,169,149,167,165],
[162,168,0,155,157,166,169,186,163,163],
[154,176,185,0,181,169,175,166,173,171],
[154,191,183,159,0,186,176,173,163,191],
[151,173,174,171,154,0,177,167,171,163],
[162,171,171,165,164,163,0,151,160,165],
[160,191,154,174,167,173,189,0,162,174],
[176,173,177,167,177,169,180,178,0,170],
[157,175,177,169,149,177,175,166,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,172,166,173,170,165,177,176,171],
[159,0,169,162,165,173,163,172,156,167],
[168,171,0,150,156,166,163,172,163,161],
[174,178,190,0,176,171,176,181,168,177],
[167,175,184,164,0,183,167,175,158,171],
[170,167,174,169,157,0,160,162,164,166],
[175,177,177,164,173,180,0,172,169,165],
[163,168,168,159,165,178,168,0,159,165],
[164,184,177,172,182,176,171,181,0,172],
[169,173,179,163,169,174,175,175,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,183,167,170,182,170,177,174,154],
[180,0,203,148,184,202,171,173,186,192],
[157,137,0,160,153,160,146,157,168,135],
[173,192,180,0,179,195,168,176,196,183],
[170,156,187,161,0,183,170,170,174,176],
[158,138,180,145,157,0,165,162,171,186],
[170,169,194,172,170,175,0,158,164,187],
[163,167,183,164,170,178,182,0,183,151],
[166,154,172,144,166,169,176,157,0,169],
[186,148,205,157,164,154,153,189,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,178,164,171,171,151,160,165,156],
[175,0,172,164,172,176,153,162,170,169],
[162,168,0,163,176,162,148,160,162,159],
[176,176,177,0,173,172,146,161,174,162],
[169,168,164,167,0,166,147,166,176,150],
[169,164,178,168,174,0,170,166,171,172],
[189,187,192,194,193,170,0,186,175,175],
[180,178,180,179,174,174,154,0,180,166],
[175,170,178,166,164,169,165,160,0,173],
[184,171,181,178,190,168,165,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,169,173,169,174,182,170,179,185],
[159,0,180,167,160,169,188,174,175,171],
[171,160,0,171,179,162,173,170,179,161],
[167,173,169,0,171,168,181,172,175,172],
[171,180,161,169,0,174,174,170,183,172],
[166,171,178,172,166,0,176,169,178,160],
[158,152,167,159,166,164,0,147,165,163],
[170,166,170,168,170,171,193,0,185,178],
[161,165,161,165,157,162,175,155,0,166],
[155,169,179,168,168,180,177,162,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,187,178,175,187,186,190,170,165],
[162,0,162,164,159,178,178,182,158,168],
[153,178,0,171,163,182,180,197,173,166],
[162,176,169,0,166,185,184,192,174,178],
[165,181,177,174,0,195,183,176,188,164],
[153,162,158,155,145,0,162,158,150,162],
[154,162,160,156,157,178,0,167,162,154],
[150,158,143,148,164,182,173,0,149,147],
[170,182,167,166,152,190,178,191,0,149],
[175,172,174,162,176,178,186,193,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,191,169,161,197,149,169,169,166],
[184,0,179,178,164,205,154,173,160,169],
[149,161,0,154,161,199,177,156,148,175],
[171,162,186,0,170,201,178,158,138,150],
[179,176,179,170,0,177,180,169,140,152],
[143,135,141,139,163,0,132,143,105,125],
[191,186,163,162,160,208,0,163,160,141],
[171,167,184,182,171,197,177,0,171,185],
[171,180,192,202,200,235,180,169,0,176],
[174,171,165,190,188,215,199,155,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,202,199,192,188,207,188,210,148],
[163,0,182,161,163,181,169,174,207,165],
[138,158,0,172,155,170,183,158,186,141],
[141,179,168,0,184,203,192,159,176,141],
[148,177,185,156,0,145,186,171,202,150],
[152,159,170,137,195,0,183,164,184,163],
[133,171,157,148,154,157,0,128,171,161],
[152,166,182,181,169,176,212,0,195,187],
[130,133,154,164,138,156,169,145,0,158],
[192,175,199,199,190,177,179,153,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,181,207,170,183,171,189,182,184],
[160,0,169,163,154,157,144,180,174,160],
[159,171,0,174,161,157,158,178,162,163],
[133,177,166,0,125,156,159,176,148,156],
[170,186,179,215,0,184,163,199,150,173],
[157,183,183,184,156,0,158,168,162,164],
[169,196,182,181,177,182,0,193,175,174],
[151,160,162,164,141,172,147,0,160,159],
[158,166,178,192,190,178,165,180,0,178],
[156,180,177,184,167,176,166,181,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,221,125,135,171,207,97,157,184],
[170,0,224,95,128,142,103,164,159,158],
[119,116,0,91,161,181,77,82,116,193],
[215,245,249,0,245,245,167,245,222,212],
[205,212,179,95,0,142,157,113,169,205],
[169,198,159,95,198,0,177,160,131,262],
[133,237,263,173,183,163,0,201,224,234],
[243,176,258,95,227,180,139,0,174,184],
[183,181,224,118,171,209,116,166,0,222],
[156,182,147,128,135,78,106,156,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,160,165,179,182,189,188,178,185],
[173,0,173,176,169,178,184,178,172,188],
[180,167,0,182,185,199,193,187,180,187],
[175,164,158,0,166,179,177,185,168,195],
[161,171,155,174,0,177,175,177,181,177],
[158,162,141,161,163,0,163,159,170,162],
[151,156,147,163,165,177,0,166,163,162],
[152,162,153,155,163,181,174,0,169,171],
[162,168,160,172,159,170,177,171,0,162],
[155,152,153,145,163,178,178,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,158,109,165,124,123,135,150,171],
[236,0,212,170,203,201,165,189,187,200],
[182,128,0,129,202,164,150,166,161,175],
[231,170,211,0,198,164,210,204,199,251],
[175,137,138,142,0,142,163,142,160,165],
[216,139,176,176,198,0,144,186,134,170],
[217,175,190,130,177,196,0,152,142,174],
[205,151,174,136,198,154,188,0,169,209],
[190,153,179,141,180,206,198,171,0,201],
[169,140,165,89,175,170,166,131,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,172,175,159,172,179,172,181],
[168,0,153,185,153,153,157,167,155,163],
[168,187,0,172,147,161,160,179,159,171],
[168,155,168,0,153,144,162,163,158,170],
[165,187,193,187,0,162,182,176,153,177],
[181,187,179,196,178,0,183,187,165,187],
[168,183,180,178,158,157,0,177,148,173],
[161,173,161,177,164,153,163,0,143,168],
[168,185,181,182,187,175,192,197,0,181],
[159,177,169,170,163,153,167,172,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,168,172,182,200,171,186,175,160],
[151,0,149,154,150,169,159,163,149,142],
[172,191,0,177,170,199,174,184,172,171],
[168,186,163,0,171,194,159,179,159,164],
[158,190,170,169,0,190,164,176,172,152],
[140,171,141,146,150,0,151,164,144,139],
[169,181,166,181,176,189,0,185,174,154],
[154,177,156,161,164,176,155,0,162,146],
[165,191,168,181,168,196,166,178,0,168],
[180,198,169,176,188,201,186,194,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,121,178,184,160,89,218,175,166],
[202,0,119,201,232,194,157,194,187,162],
[219,221,0,186,205,167,145,193,138,185],
[162,139,154,0,176,160,177,221,237,172],
[156,108,135,164,0,121,147,178,168,176],
[180,146,173,180,219,0,190,217,191,155],
[251,183,195,163,193,150,0,184,172,190],
[122,146,147,119,162,123,156,0,100,142],
[165,153,202,103,172,149,168,240,0,212],
[174,178,155,168,164,185,150,198,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,176,167,188,178,178,171,173,189],
[165,0,161,164,187,165,171,166,174,176],
[164,179,0,178,182,179,185,165,177,191],
[173,176,162,0,183,177,177,178,176,188],
[152,153,158,157,0,167,166,158,157,166],
[162,175,161,163,173,0,178,160,163,177],
[162,169,155,163,174,162,0,152,164,176],
[169,174,175,162,182,180,188,0,178,198],
[167,166,163,164,183,177,176,162,0,183],
[151,164,149,152,174,163,164,142,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,177,172,151,150,152,188,158,155],
[179,0,177,154,172,140,163,168,176,176],
[163,163,0,147,157,126,154,178,168,152],
[168,186,193,0,185,173,162,180,173,175],
[189,168,183,155,0,171,161,190,169,168],
[190,200,214,167,169,0,171,191,170,167],
[188,177,186,178,179,169,0,188,183,178],
[152,172,162,160,150,149,152,0,174,176],
[182,164,172,167,171,170,157,166,0,164],
[185,164,188,165,172,173,162,164,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,152,150,175,159,157,172,154,160],
[176,0,140,168,164,159,149,154,141,150],
[188,200,0,176,197,195,172,185,180,169],
[190,172,164,0,192,178,154,177,174,162],
[165,176,143,148,0,152,147,147,152,137],
[181,181,145,162,188,0,175,180,166,160],
[183,191,168,186,193,165,0,159,166,173],
[168,186,155,163,193,160,181,0,158,146],
[186,199,160,166,188,174,174,182,0,171],
[180,190,171,178,203,180,167,194,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,172,183,170,162,174,181,179,159],
[188,0,172,180,139,164,187,173,176,178],
[168,168,0,158,159,179,154,160,164,193],
[157,160,182,0,147,164,172,200,175,199],
[170,201,181,193,0,193,158,187,205,215],
[178,176,161,176,147,0,174,181,179,203],
[166,153,186,168,182,166,0,169,182,177],
[159,167,180,140,153,159,171,0,166,189],
[161,164,176,165,135,161,158,174,0,190],
[181,162,147,141,125,137,163,151,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,259,144,172,188,216,204,170,176],
[134,0,220,105,137,118,180,167,164,187],
[81,120,0,119,94,126,142,131,101,137],
[196,235,221,0,161,170,231,226,194,202],
[168,203,246,179,0,161,221,229,201,186],
[152,222,214,170,179,0,233,263,223,208],
[124,160,198,109,119,107,0,178,175,141],
[136,173,209,114,111,77,162,0,148,139],
[170,176,239,146,139,117,165,192,0,179],
[164,153,203,138,154,132,199,201,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,151,165,168,160,173,166,178,152],
[184,0,190,187,180,168,176,176,180,172],
[189,150,0,171,181,161,178,166,163,165],
[175,153,169,0,154,166,173,173,168,159],
[172,160,159,186,0,163,168,175,177,168],
[180,172,179,174,177,0,179,182,169,179],
[167,164,162,167,172,161,0,167,160,158],
[174,164,174,167,165,158,173,0,165,167],
[162,160,177,172,163,171,180,175,0,152],
[188,168,175,181,172,161,182,173,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,154,158,212,179,195,155,206,188],
[153,0,160,129,178,184,176,183,160,173],
[186,180,0,177,198,234,178,171,201,169],
[182,211,163,0,195,241,198,201,206,173],
[128,162,142,145,0,194,187,204,163,150],
[161,156,106,99,146,0,168,126,146,156],
[145,164,162,142,153,172,0,173,122,160],
[185,157,169,139,136,214,167,0,157,174],
[134,180,139,134,177,194,218,183,0,134],
[152,167,171,167,190,184,180,166,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,162,150,174,172,182,178,156,178],
[192,0,189,188,196,162,182,181,180,206],
[178,151,0,190,154,181,188,180,177,169],
[190,152,150,0,163,161,171,164,179,168],
[166,144,186,177,0,205,168,175,169,183],
[168,178,159,179,135,0,169,171,162,172],
[158,158,152,169,172,171,0,186,156,172],
[162,159,160,176,165,169,154,0,166,181],
[184,160,163,161,171,178,184,174,0,204],
[162,134,171,172,157,168,168,159,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,132,94,93,145,122,125,182,200],
[199,0,173,172,188,209,158,196,202,202],
[208,167,0,178,156,228,196,194,224,267],
[246,168,162,0,211,177,219,85,220,236],
[247,152,184,129,0,239,145,123,183,191],
[195,131,112,163,101,0,133,162,128,131],
[218,182,144,121,195,207,0,152,180,216],
[215,144,146,255,217,178,188,0,195,192],
[158,138,116,120,157,212,160,145,0,136],
[140,138,73,104,149,209,124,148,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,163,154,161,145,172,170,162,168],
[184,0,164,182,183,138,152,164,182,172],
[177,176,0,163,190,166,172,160,148,174],
[186,158,177,0,172,164,167,153,163,176],
[179,157,150,168,0,129,160,152,137,153],
[195,202,174,176,211,0,162,169,181,178],
[168,188,168,173,180,178,0,152,164,164],
[170,176,180,187,188,171,188,0,166,180],
[178,158,192,177,203,159,176,174,0,173],
[172,168,166,164,187,162,176,160,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,154,168,166,144,156,161,167],
[173,0,161,150,178,174,153,158,153,167],
[173,179,0,163,180,178,158,161,178,170],
[186,190,177,0,188,190,179,161,181,186],
[172,162,160,152,0,186,151,152,163,165],
[174,166,162,150,154,0,157,142,158,168],
[196,187,182,161,189,183,0,180,182,185],
[184,182,179,179,188,198,160,0,168,183],
[179,187,162,159,177,182,158,172,0,172],
[173,173,170,154,175,172,155,157,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,176,175,176,183,187,174,173,166],
[166,0,174,161,175,157,188,154,175,169],
[164,166,0,169,180,181,173,170,170,168],
[165,179,171,0,174,179,177,164,166,171],
[164,165,160,166,0,172,167,166,164,174],
[157,183,159,161,168,0,177,156,164,172],
[153,152,167,163,173,163,0,163,161,164],
[166,186,170,176,174,184,177,0,171,178],
[167,165,170,174,176,176,179,169,0,177],
[174,171,172,169,166,168,176,162,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,167,155,167,163,150,158,170,143],
[196,0,190,170,184,193,180,177,192,172],
[173,150,0,158,165,164,165,154,167,170],
[185,170,182,0,180,161,178,173,176,185],
[173,156,175,160,0,161,160,161,163,150],
[177,147,176,179,179,0,164,167,180,160],
[190,160,175,162,180,176,0,179,171,169],
[182,163,186,167,179,173,161,0,190,166],
[170,148,173,164,177,160,169,150,0,154],
[197,168,170,155,190,180,171,174,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,133,135,126,143,164,145,117,155],
[189,0,158,158,150,136,157,146,136,151],
[207,182,0,168,152,156,193,182,145,191],
[205,182,172,0,175,171,185,193,149,195],
[214,190,188,165,0,177,189,178,165,163],
[197,204,184,169,163,0,195,174,163,186],
[176,183,147,155,151,145,0,159,173,168],
[195,194,158,147,162,166,181,0,149,164],
[223,204,195,191,175,177,167,191,0,214],
[185,189,149,145,177,154,172,176,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,69,184,122,75,126,65,108,128],
[226,0,253,297,215,155,205,236,226,208],
[271,87,0,220,198,138,165,168,139,215],
[156,43,120,0,115,75,122,142,126,116],
[218,125,142,225,0,131,176,183,214,204],
[265,185,202,265,209,0,201,168,252,221],
[214,135,175,218,164,139,0,168,200,204],
[275,104,172,198,157,172,172,0,185,155],
[232,114,201,214,126,88,140,155,0,167],
[212,132,125,224,136,119,136,185,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,161,180,166,170,161,171,159,176],
[175,0,165,182,173,182,165,183,172,174],
[179,175,0,191,182,187,169,185,168,176],
[160,158,149,0,158,165,156,154,153,163],
[174,167,158,182,0,167,174,173,175,170],
[170,158,153,175,173,0,168,173,162,180],
[179,175,171,184,166,172,0,180,176,175],
[169,157,155,186,167,167,160,0,172,174],
[181,168,172,187,165,178,164,168,0,168],
[164,166,164,177,170,160,165,166,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,169,170,135,170,181,182,149,166],
[183,0,154,202,180,191,180,193,156,181],
[171,186,0,204,161,175,176,194,169,179],
[170,138,136,0,150,156,151,164,152,153],
[205,160,179,190,0,175,190,176,162,187],
[170,149,165,184,165,0,148,173,157,175],
[159,160,164,189,150,192,0,185,176,180],
[158,147,146,176,164,167,155,0,150,173],
[191,184,171,188,178,183,164,190,0,188],
[174,159,161,187,153,165,160,167,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,196,179,174,166,200,186,190,176],
[165,0,178,182,154,156,170,186,174,168],
[144,162,0,166,164,147,180,171,186,161],
[161,158,174,0,161,151,172,173,171,167],
[166,186,176,179,0,158,186,199,188,183],
[174,184,193,189,182,0,188,183,187,170],
[140,170,160,168,154,152,0,166,163,154],
[154,154,169,167,141,157,174,0,167,158],
[150,166,154,169,152,153,177,173,0,170],
[164,172,179,173,157,170,186,182,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,151,169,165,170,160,173,164,157],
[189,0,170,189,168,169,178,164,171,172],
[189,170,0,179,179,181,167,173,169,179],
[171,151,161,0,164,147,161,159,157,171],
[175,172,161,176,0,182,169,169,162,167],
[170,171,159,193,158,0,176,175,165,172],
[180,162,173,179,171,164,0,163,174,179],
[167,176,167,181,171,165,177,0,160,163],
[176,169,171,183,178,175,166,180,0,174],
[183,168,161,169,173,168,161,177,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,160,161,154,162,164,146,153,153],
[192,0,180,166,164,210,179,178,179,175],
[180,160,0,188,177,182,184,178,190,146],
[179,174,152,0,165,173,188,195,172,167],
[186,176,163,175,0,190,185,166,177,176],
[178,130,158,167,150,0,172,144,160,153],
[176,161,156,152,155,168,0,161,167,148],
[194,162,162,145,174,196,179,0,178,161],
[187,161,150,168,163,180,173,162,0,161],
[187,165,194,173,164,187,192,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,138,176,204,175,224,164,129,177],
[150,0,142,171,168,126,187,150,119,162],
[202,198,0,180,199,159,220,177,183,201],
[164,169,160,0,168,160,169,137,130,170],
[136,172,141,172,0,134,196,142,133,174],
[165,214,181,180,206,0,245,178,161,198],
[116,153,120,171,144,95,0,112,100,147],
[176,190,163,203,198,162,228,0,170,171],
[211,221,157,210,207,179,240,170,0,206],
[163,178,139,170,166,142,193,169,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,175,157,157,180,158,166,175,173],
[164,0,172,195,183,180,170,198,189,187],
[165,168,0,197,151,184,141,185,165,197],
[183,145,143,0,167,176,133,179,161,182],
[183,157,189,173,0,163,150,198,182,190],
[160,160,156,164,177,0,147,171,160,175],
[182,170,199,207,190,193,0,208,199,203],
[174,142,155,161,142,169,132,0,175,156],
[165,151,175,179,158,180,141,165,0,176],
[167,153,143,158,150,165,137,184,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,169,169,164,145,170,146,163,182],
[177,0,192,180,158,167,175,197,172,181],
[171,148,0,168,138,161,170,160,157,143],
[171,160,172,0,153,171,173,173,177,184],
[176,182,202,187,0,170,199,194,200,165],
[195,173,179,169,170,0,184,182,175,174],
[170,165,170,167,141,156,0,160,172,180],
[194,143,180,167,146,158,180,0,169,147],
[177,168,183,163,140,165,168,171,0,160],
[158,159,197,156,175,166,160,193,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,194,171,143,164,213,157,170,168],
[170,0,173,163,188,148,210,149,156,168],
[146,167,0,174,147,184,202,155,160,161],
[169,177,166,0,186,172,238,165,174,193],
[197,152,193,154,0,132,218,167,185,171],
[176,192,156,168,208,0,208,169,169,168],
[127,130,138,102,122,132,0,118,152,134],
[183,191,185,175,173,171,222,0,147,201],
[170,184,180,166,155,171,188,193,0,170],
[172,172,179,147,169,172,206,139,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,179,161,157,161,145,155,169,158],
[180,0,175,168,170,180,163,182,181,175],
[161,165,0,155,172,168,159,155,169,161],
[179,172,185,0,184,177,171,177,176,164],
[183,170,168,156,0,181,164,167,177,167],
[179,160,172,163,159,0,159,163,166,169],
[195,177,181,169,176,181,0,182,177,174],
[185,158,185,163,173,177,158,0,173,160],
[171,159,171,164,163,174,163,167,0,172],
[182,165,179,176,173,171,166,180,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,171,147,167,175,196,176,183,167],
[163,0,191,182,160,170,176,169,182,180],
[169,149,0,131,157,179,157,184,189,187],
[193,158,209,0,178,201,185,209,206,205],
[173,180,183,162,0,178,169,158,178,190],
[165,170,161,139,162,0,157,152,175,159],
[144,164,183,155,171,183,0,156,202,182],
[164,171,156,131,182,188,184,0,199,190],
[157,158,151,134,162,165,138,141,0,167],
[173,160,153,135,150,181,158,150,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,191,169,157,183,176,170,169,176],
[176,0,171,168,164,184,183,175,169,175],
[149,169,0,162,150,166,172,168,160,164],
[171,172,178,0,175,179,183,165,181,181],
[183,176,190,165,0,178,178,166,180,170],
[157,156,174,161,162,0,161,161,149,154],
[164,157,168,157,162,179,0,188,160,167],
[170,165,172,175,174,179,152,0,167,161],
[171,171,180,159,160,191,180,173,0,178],
[164,165,176,159,170,186,173,179,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,162,191,195,163,200,185,196,182],
[142,0,142,170,169,160,188,172,172,186],
[178,198,0,190,160,178,193,185,198,188],
[149,170,150,0,183,160,179,167,176,198],
[145,171,180,157,0,168,166,176,175,180],
[177,180,162,180,172,0,182,190,192,191],
[140,152,147,161,174,158,0,167,163,166],
[155,168,155,173,164,150,173,0,183,174],
[144,168,142,164,165,148,177,157,0,156],
[158,154,152,142,160,149,174,166,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,169,188,189,189,188,182,200,193],
[133,0,156,182,149,156,180,157,161,168],
[171,184,0,183,193,154,156,137,159,142],
[152,158,157,0,170,167,140,134,171,143],
[151,191,147,170,0,170,161,135,155,162],
[151,184,186,173,170,0,171,143,185,164],
[152,160,184,200,179,169,0,143,180,163],
[158,183,203,206,205,197,197,0,173,154],
[140,179,181,169,185,155,160,167,0,187],
[147,172,198,197,178,176,177,186,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,190,184,189,237,180,150,169,157],
[162,0,172,179,148,233,167,208,137,165],
[150,168,0,157,197,197,193,148,147,165],
[156,161,183,0,166,247,191,141,171,163],
[151,192,143,174,0,212,152,179,194,169],
[103,107,143,93,128,0,105,114,102,112],
[160,173,147,149,188,235,0,173,150,170],
[190,132,192,199,161,226,167,0,155,187],
[171,203,193,169,146,238,190,185,0,197],
[183,175,175,177,171,228,170,153,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,145,166,171,162,163,165,164,179],
[183,0,182,167,175,177,178,172,180,176],
[195,158,0,192,182,179,176,172,177,185],
[174,173,148,0,156,172,166,160,170,163],
[169,165,158,184,0,170,154,174,171,171],
[178,163,161,168,170,0,157,164,173,166],
[177,162,164,174,186,183,0,175,163,170],
[175,168,168,180,166,176,165,0,174,172],
[176,160,163,170,169,167,177,166,0,175],
[161,164,155,177,169,174,170,168,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,161,174,169,171,162,160,183,173],
[182,0,179,169,176,178,165,178,189,168],
[179,161,0,184,175,178,180,183,180,178],
[166,171,156,0,178,179,179,176,203,169],
[171,164,165,162,0,176,180,178,175,168],
[169,162,162,161,164,0,172,162,169,160],
[178,175,160,161,160,168,0,182,192,167],
[180,162,157,164,162,178,158,0,179,175],
[157,151,160,137,165,171,148,161,0,155],
[167,172,162,171,172,180,173,165,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,179,169,176,179,179,186,180,176],
[161,0,172,163,166,173,164,174,187,160],
[161,168,0,163,160,157,160,169,171,163],
[171,177,177,0,170,182,170,192,172,170],
[164,174,180,170,0,164,166,177,162,182],
[161,167,183,158,176,0,176,171,175,166],
[161,176,180,170,174,164,0,183,169,170],
[154,166,171,148,163,169,157,0,167,156],
[160,153,169,168,178,165,171,173,0,164],
[164,180,177,170,158,174,170,184,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,173,170,163,170,181,157,171,174],
[157,0,173,160,166,171,172,168,151,171],
[167,167,0,162,164,180,169,163,159,175],
[170,180,178,0,176,171,157,167,184,174],
[177,174,176,164,0,171,168,170,154,180],
[170,169,160,169,169,0,166,182,158,178],
[159,168,171,183,172,174,0,151,162,178],
[183,172,177,173,170,158,189,0,167,161],
[169,189,181,156,186,182,178,173,0,171],
[166,169,165,166,160,162,162,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,176,173,192,167,175,179,170,207],
[174,0,174,172,170,170,170,184,169,182],
[164,166,0,172,169,165,167,172,163,179],
[167,168,168,0,165,165,176,176,160,182],
[148,170,171,175,0,158,170,169,167,171],
[173,170,175,175,182,0,175,171,177,182],
[165,170,173,164,170,165,0,175,176,181],
[161,156,168,164,171,169,165,0,174,180],
[170,171,177,180,173,163,164,166,0,172],
[133,158,161,158,169,158,159,160,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,185,177,182,182,180,168,177,172],
[158,0,174,159,173,178,160,156,161,174],
[155,166,0,166,163,173,159,159,160,159],
[163,181,174,0,170,181,156,172,176,173],
[158,167,177,170,0,177,174,174,165,165],
[158,162,167,159,163,0,163,155,156,162],
[160,180,181,184,166,177,0,167,170,169],
[172,184,181,168,166,185,173,0,163,175],
[163,179,180,164,175,184,170,177,0,165],
[168,166,181,167,175,178,171,165,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,188,157,172,185,202,173,185,192],
[182,0,186,162,193,183,209,175,173,203],
[152,154,0,105,162,151,172,151,149,159],
[183,178,235,0,195,209,232,171,160,207],
[168,147,178,145,0,180,195,140,173,177],
[155,157,189,131,160,0,225,153,147,170],
[138,131,168,108,145,115,0,149,118,143],
[167,165,189,169,200,187,191,0,179,181],
[155,167,191,180,167,193,222,161,0,193],
[148,137,181,133,163,170,197,159,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,194,160,181,188,172,171,191,171],
[153,0,176,165,177,171,174,157,174,168],
[146,164,0,156,177,164,164,151,168,171],
[180,175,184,0,186,177,180,167,184,180],
[159,163,163,154,0,159,156,161,164,160],
[152,169,176,163,181,0,160,184,179,173],
[168,166,176,160,184,180,0,179,182,177],
[169,183,189,173,179,156,161,0,169,183],
[149,166,172,156,176,161,158,171,0,154],
[169,172,169,160,180,167,163,157,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,172,168,179,193,162,181,170,174],
[169,0,168,180,165,191,171,188,181,165],
[168,172,0,164,158,209,168,175,190,180],
[172,160,176,0,159,184,159,173,193,177],
[161,175,182,181,0,201,165,177,173,179],
[147,149,131,156,139,0,145,147,159,159],
[178,169,172,181,175,195,0,186,194,185],
[159,152,165,167,163,193,154,0,171,187],
[170,159,150,147,167,181,146,169,0,168],
[166,175,160,163,161,181,155,153,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,183,180,170,174,167,183,176,178],
[156,0,157,170,157,149,149,162,162,165],
[157,183,0,174,159,167,170,181,164,166],
[160,170,166,0,162,152,171,171,157,167],
[170,183,181,178,0,158,165,174,164,183],
[166,191,173,188,182,0,167,183,160,184],
[173,191,170,169,175,173,0,163,169,189],
[157,178,159,169,166,157,177,0,167,180],
[164,178,176,183,176,180,171,173,0,192],
[162,175,174,173,157,156,151,160,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,173,166,185,169,172,166,196,184],
[147,0,172,162,167,156,170,152,176,162],
[167,168,0,169,157,154,159,152,170,162],
[174,178,171,0,184,178,180,161,188,184],
[155,173,183,156,0,165,171,163,179,153],
[171,184,186,162,175,0,172,174,186,164],
[168,170,181,160,169,168,0,173,181,185],
[174,188,188,179,177,166,167,0,193,179],
[144,164,170,152,161,154,159,147,0,147],
[156,178,178,156,187,176,155,161,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,164,171,159,169,177,176,180,172],
[163,0,159,164,151,161,157,179,174,185],
[176,181,0,162,175,174,183,179,172,174],
[169,176,178,0,175,178,182,198,184,182],
[181,189,165,165,0,183,170,188,189,183],
[171,179,166,162,157,0,172,185,180,176],
[163,183,157,158,170,168,0,170,179,169],
[164,161,161,142,152,155,170,0,159,170],
[160,166,168,156,151,160,161,181,0,162],
[168,155,166,158,157,164,171,170,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,175,162,151,144,159,161,151,147],
[170,0,162,147,166,141,159,146,168,157],
[165,178,0,143,163,154,162,155,159,160],
[178,193,197,0,187,171,178,172,170,184],
[189,174,177,153,0,141,167,167,165,159],
[196,199,186,169,199,0,180,187,179,186],
[181,181,178,162,173,160,0,170,174,170],
[179,194,185,168,173,153,170,0,179,181],
[189,172,181,170,175,161,166,161,0,177],
[193,183,180,156,181,154,170,159,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,146,172,171,159,150,168,174,152],
[172,0,155,174,169,162,181,163,177,174],
[194,185,0,183,184,175,165,164,191,166],
[168,166,157,0,171,164,147,163,175,166],
[169,171,156,169,0,171,150,161,175,149],
[181,178,165,176,169,0,159,185,177,179],
[190,159,175,193,190,181,0,182,187,203],
[172,177,176,177,179,155,158,0,189,172],
[166,163,149,165,165,163,153,151,0,137],
[188,166,174,174,191,161,137,168,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,165,135,151,184,148,201,138,148],
[156,0,154,156,152,166,187,194,165,148],
[175,186,0,168,171,182,177,217,140,173],
[205,184,172,0,177,181,181,218,166,189],
[189,188,169,163,0,165,159,205,139,156],
[156,174,158,159,175,0,138,221,148,168],
[192,153,163,159,181,202,0,207,154,167],
[139,146,123,122,135,119,133,0,132,116],
[202,175,200,174,201,192,186,208,0,167],
[192,192,167,151,184,172,173,224,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,159,190,173,177,164,184,195,185],
[167,0,164,164,174,162,176,163,164,171],
[181,176,0,184,174,189,180,170,182,176],
[150,176,156,0,192,169,171,156,171,182],
[167,166,166,148,0,179,163,177,172,175],
[163,178,151,171,161,0,158,170,176,169],
[176,164,160,169,177,182,0,178,166,180],
[156,177,170,184,163,170,162,0,160,182],
[145,176,158,169,168,164,174,180,0,172],
[155,169,164,158,165,171,160,158,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,156,159,171,172,170,154,164,162],
[160,0,147,154,160,161,158,147,161,156],
[184,193,0,167,174,179,168,160,192,163],
[181,186,173,0,179,174,184,159,173,170],
[169,180,166,161,0,187,183,171,168,156],
[168,179,161,166,153,0,149,157,169,159],
[170,182,172,156,157,191,0,164,167,161],
[186,193,180,181,169,183,176,0,179,181],
[176,179,148,167,172,171,173,161,0,167],
[178,184,177,170,184,181,179,159,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,194,171,184,180,179,162,194,193],
[155,0,152,163,177,175,165,168,175,169],
[146,188,0,158,166,157,171,149,180,173],
[169,177,182,0,172,167,179,167,175,186],
[156,163,174,168,0,150,175,165,173,171],
[160,165,183,173,190,0,172,164,184,177],
[161,175,169,161,165,168,0,172,195,194],
[178,172,191,173,175,176,168,0,187,185],
[146,165,160,165,167,156,145,153,0,179],
[147,171,167,154,169,163,146,155,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,174,158,176,173,174,191,177,150],
[168,0,166,161,167,161,155,183,164,159],
[166,174,0,167,165,178,161,184,159,159],
[182,179,173,0,164,178,171,188,171,169],
[164,173,175,176,0,170,171,186,170,170],
[167,179,162,162,170,0,163,177,163,160],
[166,185,179,169,169,177,0,190,171,167],
[149,157,156,152,154,163,150,0,164,142],
[163,176,181,169,170,177,169,176,0,163],
[190,181,181,171,170,180,173,198,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,152,160,163,165,181,183,170,173],
[171,0,175,161,180,175,175,182,162,179],
[188,165,0,180,184,180,183,180,166,173],
[180,179,160,0,175,167,171,185,173,172],
[177,160,156,165,0,160,182,192,171,175],
[175,165,160,173,180,0,175,177,170,169],
[159,165,157,169,158,165,0,182,164,165],
[157,158,160,155,148,163,158,0,167,163],
[170,178,174,167,169,170,176,173,0,166],
[167,161,167,168,165,171,175,177,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,180,179,166,181,170,176,174,175],
[159,0,169,175,157,177,175,167,172,159],
[160,171,0,179,163,168,169,167,177,171],
[161,165,161,0,160,174,166,167,168,168],
[174,183,177,180,0,170,173,183,183,182],
[159,163,172,166,170,0,169,173,163,171],
[170,165,171,174,167,171,0,176,169,174],
[164,173,173,173,157,167,164,0,172,177],
[166,168,163,172,157,177,171,168,0,168],
[165,181,169,172,158,169,166,163,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,158,154,147,158,151,173,155,153],
[184,0,174,183,177,178,172,195,178,164],
[182,166,0,176,182,166,149,181,167,150],
[186,157,164,0,157,179,163,171,164,159],
[193,163,158,183,0,176,168,188,169,166],
[182,162,174,161,164,0,168,171,159,157],
[189,168,191,177,172,172,0,190,178,171],
[167,145,159,169,152,169,150,0,159,152],
[185,162,173,176,171,181,162,181,0,168],
[187,176,190,181,174,183,169,188,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,162,164,168,165,174,166,194,151],
[170,0,169,166,166,167,169,158,185,166],
[178,171,0,179,182,175,180,179,183,169],
[176,174,161,0,172,181,176,178,177,168],
[172,174,158,168,0,162,170,164,186,170],
[175,173,165,159,178,0,174,175,187,157],
[166,171,160,164,170,166,0,169,178,159],
[174,182,161,162,176,165,171,0,184,159],
[146,155,157,163,154,153,162,156,0,158],
[189,174,171,172,170,183,181,181,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,123,169,171,128,205,153,137,141],
[194,0,190,168,178,191,170,172,155,168],
[217,150,0,217,173,181,196,196,217,152],
[171,172,123,0,194,140,144,178,162,154],
[169,162,167,146,0,89,165,204,159,145],
[212,149,159,200,251,0,198,206,186,176],
[135,170,144,196,175,142,0,199,174,176],
[187,168,144,162,136,134,141,0,119,163],
[203,185,123,178,181,154,166,221,0,144],
[199,172,188,186,195,164,164,177,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,175,177,157,177,176,175,176,171],
[178,0,174,182,167,171,187,178,182,179],
[165,166,0,162,167,166,167,170,171,161],
[163,158,178,0,169,165,172,172,182,167],
[183,173,173,171,0,167,182,182,184,178],
[163,169,174,175,173,0,178,179,183,175],
[164,153,173,168,158,162,0,158,176,155],
[165,162,170,168,158,161,182,0,171,168],
[164,158,169,158,156,157,164,169,0,153],
[169,161,179,173,162,165,185,172,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,180,144,129,144,155,160,135,159],
[186,0,184,145,151,177,180,182,166,170],
[160,156,0,162,149,151,181,185,155,171],
[196,195,178,0,155,168,178,152,142,147],
[211,189,191,185,0,169,177,171,174,199],
[196,163,189,172,171,0,157,161,164,156],
[185,160,159,162,163,183,0,163,167,153],
[180,158,155,188,169,179,177,0,174,168],
[205,174,185,198,166,176,173,166,0,145],
[181,170,169,193,141,184,187,172,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,181,158,189,183,185,175,198,164],
[158,0,183,186,169,180,173,170,190,183],
[159,157,0,168,191,166,194,178,196,192],
[182,154,172,0,198,170,183,156,189,185],
[151,171,149,142,0,161,188,165,168,144],
[157,160,174,170,179,0,184,164,173,166],
[155,167,146,157,152,156,0,169,180,168],
[165,170,162,184,175,176,171,0,185,188],
[142,150,144,151,172,167,160,155,0,169],
[176,157,148,155,196,174,172,152,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,196,196,168,194,174,193,165,181],
[163,0,196,190,185,195,185,163,197,184],
[144,144,0,138,184,160,162,179,178,148],
[144,150,202,0,167,191,192,179,176,182],
[172,155,156,173,0,187,152,168,182,138],
[146,145,180,149,153,0,168,171,186,162],
[166,155,178,148,188,172,0,161,174,134],
[147,177,161,161,172,169,179,0,193,156],
[175,143,162,164,158,154,166,147,0,139],
[159,156,192,158,202,178,206,184,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,151,169,151,165,155,172,161,151],
[168,0,171,174,157,166,159,160,167,172],
[189,169,0,175,171,180,165,173,183,168],
[171,166,165,0,161,175,149,170,154,156],
[189,183,169,179,0,187,170,171,164,174],
[175,174,160,165,153,0,152,166,158,164],
[185,181,175,191,170,188,0,184,184,175],
[168,180,167,170,169,174,156,0,172,162],
[179,173,157,186,176,182,156,168,0,170],
[189,168,172,184,166,176,165,178,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,175,169,174,169,169,170,158,159],
[177,0,178,168,180,175,172,181,176,164],
[165,162,0,167,177,185,176,177,163,176],
[171,172,173,0,183,186,175,168,173,171],
[166,160,163,157,0,177,164,168,159,165],
[171,165,155,154,163,0,180,162,166,161],
[171,168,164,165,176,160,0,167,158,162],
[170,159,163,172,172,178,173,0,162,164],
[182,164,177,167,181,174,182,178,0,169],
[181,176,164,169,175,179,178,176,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,169,181,168,175,164,177,178,163],
[172,0,166,187,169,171,174,187,164,183],
[171,174,0,171,163,167,171,182,175,160],
[159,153,169,0,161,168,160,167,177,149],
[172,171,177,179,0,171,176,174,183,156],
[165,169,173,172,169,0,177,174,174,163],
[176,166,169,180,164,163,0,175,182,168],
[163,153,158,173,166,166,165,0,175,156],
[162,176,165,163,157,166,158,165,0,168],
[177,157,180,191,184,177,172,184,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,157,180,167,161,179,186,181,172],
[150,0,146,179,160,170,163,180,180,171],
[183,194,0,167,178,192,169,198,185,187],
[160,161,173,0,164,184,165,173,205,181],
[173,180,162,176,0,181,174,192,191,155],
[179,170,148,156,159,0,171,179,173,163],
[161,177,171,175,166,169,0,166,193,162],
[154,160,142,167,148,161,174,0,171,177],
[159,160,155,135,149,167,147,169,0,182],
[168,169,153,159,185,177,178,163,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,176,188,170,164,177,168,175,174],
[163,0,161,169,165,152,163,171,152,162],
[164,179,0,179,169,165,174,186,174,188],
[152,171,161,0,166,173,169,167,172,169],
[170,175,171,174,0,157,163,172,171,176],
[176,188,175,167,183,0,181,176,185,186],
[163,177,166,171,177,159,0,169,160,174],
[172,169,154,173,168,164,171,0,168,175],
[165,188,166,168,169,155,180,172,0,184],
[166,178,152,171,164,154,166,165,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,173,165,172,164,142,180,179,160],
[163,0,179,176,171,159,173,209,187,187],
[167,161,0,161,178,145,161,180,178,156],
[175,164,179,0,180,154,153,182,184,175],
[168,169,162,160,0,155,157,184,168,181],
[176,181,195,186,185,0,168,207,172,212],
[198,167,179,187,183,172,0,199,204,203],
[160,131,160,158,156,133,141,0,149,175],
[161,153,162,156,172,168,136,191,0,176],
[180,153,184,165,159,128,137,165,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,185,215,159,192,186,170,213,201],
[160,0,155,191,153,179,165,167,189,182],
[155,185,0,196,148,179,154,169,181,193],
[125,149,144,0,149,168,138,159,163,170],
[181,187,192,191,0,193,163,167,197,204],
[148,161,161,172,147,0,161,141,174,178],
[154,175,186,202,177,179,0,163,194,213],
[170,173,171,181,173,199,177,0,187,199],
[127,151,159,177,143,166,146,153,0,181],
[139,158,147,170,136,162,127,141,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,180,160,185,187,155,179,171,163],
[166,0,170,176,182,166,156,174,174,161],
[160,170,0,168,175,188,173,143,172,147],
[180,164,172,0,178,169,172,174,187,149],
[155,158,165,162,0,166,161,165,165,161],
[153,174,152,171,174,0,151,154,172,142],
[185,184,167,168,179,189,0,160,183,181],
[161,166,197,166,175,186,180,0,176,165],
[169,166,168,153,175,168,157,164,0,154],
[177,179,193,191,179,198,159,175,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,167,188,153,137,167,139,179,179],
[171,0,176,197,170,150,157,149,188,179],
[173,164,0,174,164,157,171,155,185,165],
[152,143,166,0,141,142,137,148,162,158],
[187,170,176,199,0,173,185,174,196,190],
[203,190,183,198,167,0,177,169,216,199],
[173,183,169,203,155,163,0,164,195,161],
[201,191,185,192,166,171,176,0,215,181],
[161,152,155,178,144,124,145,125,0,168],
[161,161,175,182,150,141,179,159,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,130,140,166,157,170,142,138,132],
[212,0,196,181,178,200,228,185,183,152],
[210,144,0,173,167,155,192,168,179,158],
[200,159,167,0,174,183,180,155,161,175],
[174,162,173,166,0,157,205,152,161,147],
[183,140,185,157,183,0,182,159,160,143],
[170,112,148,160,135,158,0,172,149,174],
[198,155,172,185,188,181,168,0,183,171],
[202,157,161,179,179,180,191,157,0,147],
[208,188,182,165,193,197,166,169,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,186,163,174,166,181,170,172,186],
[158,0,187,175,164,161,176,157,176,163],
[154,153,0,171,165,161,169,150,167,171],
[177,165,169,0,164,155,160,158,156,177],
[166,176,175,176,0,170,162,160,166,175],
[174,179,179,185,170,0,174,177,179,176],
[159,164,171,180,178,166,0,166,161,169],
[170,183,190,182,180,163,174,0,181,177],
[168,164,173,184,174,161,179,159,0,181],
[154,177,169,163,165,164,171,163,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,178,181,158,171,163,165,192,153],
[183,0,191,188,165,169,169,185,188,176],
[162,149,0,180,147,142,170,159,168,145],
[159,152,160,0,133,149,161,145,164,126],
[182,175,193,207,0,154,197,168,198,175],
[169,171,198,191,186,0,173,184,181,155],
[177,171,170,179,143,167,0,177,182,153],
[175,155,181,195,172,156,163,0,182,163],
[148,152,172,176,142,159,158,158,0,151],
[187,164,195,214,165,185,187,177,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,166,191,170,189,174,200,169,146],
[187,0,183,209,178,189,144,187,186,188],
[174,157,0,159,144,151,105,122,136,145],
[149,131,181,0,147,200,117,111,81,170],
[170,162,196,193,0,170,138,166,181,170],
[151,151,189,140,170,0,135,148,149,152],
[166,196,235,223,202,205,0,148,179,227],
[140,153,218,229,174,192,192,0,173,207],
[171,154,204,259,159,191,161,167,0,212],
[194,152,195,170,170,188,113,133,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,167,196,175,178,171,182,180,189],
[153,0,152,184,175,178,166,174,166,161],
[173,188,0,177,185,184,181,161,162,186],
[144,156,163,0,146,161,156,143,154,144],
[165,165,155,194,0,169,154,186,167,180],
[162,162,156,179,171,0,172,166,147,164],
[169,174,159,184,186,168,0,181,176,158],
[158,166,179,197,154,174,159,0,166,170],
[160,174,178,186,173,193,164,174,0,185],
[151,179,154,196,160,176,182,170,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,159,156,160,158,166,163,156,168],
[184,0,183,181,183,171,198,165,189,185],
[181,157,0,172,174,156,184,156,176,170],
[184,159,168,0,157,156,174,162,163,171],
[180,157,166,183,0,164,172,171,170,176],
[182,169,184,184,176,0,203,175,174,177],
[174,142,156,166,168,137,0,150,162,151],
[177,175,184,178,169,165,190,0,181,178],
[184,151,164,177,170,166,178,159,0,164],
[172,155,170,169,164,163,189,162,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,133,149,165,207,128,172,178,183],
[150,0,157,126,152,176,143,152,173,205],
[207,183,0,130,147,175,165,207,159,201],
[191,214,210,0,161,211,173,201,183,207],
[175,188,193,179,0,173,166,182,182,190],
[133,164,165,129,167,0,136,193,177,196],
[212,197,175,167,174,204,0,181,200,215],
[168,188,133,139,158,147,159,0,172,167],
[162,167,181,157,158,163,140,168,0,197],
[157,135,139,133,150,144,125,173,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,170,159,177,161,145,176,175,160],
[175,0,178,162,179,178,163,185,164,156],
[170,162,0,173,173,156,158,171,151,153],
[181,178,167,0,181,183,170,182,177,171],
[163,161,167,159,0,160,152,166,148,152],
[179,162,184,157,180,0,178,169,172,170],
[195,177,182,170,188,162,0,171,167,175],
[164,155,169,158,174,171,169,0,167,158],
[165,176,189,163,192,168,173,173,0,178],
[180,184,187,169,188,170,165,182,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,130,134,171,159,159,139,206,159],
[199,0,175,159,191,205,159,181,224,235],
[210,165,0,140,181,185,192,150,233,215],
[206,181,200,0,161,208,205,136,213,224],
[169,149,159,179,0,178,151,120,202,166],
[181,135,155,132,162,0,136,127,218,193],
[181,181,148,135,189,204,0,128,211,208],
[201,159,190,204,220,213,212,0,244,243],
[134,116,107,127,138,122,129,96,0,126],
[181,105,125,116,174,147,132,97,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,240,167,201,219,177,196,179,175],
[154,0,183,171,146,183,175,214,134,170],
[100,157,0,143,94,131,155,148,125,100],
[173,169,197,0,159,211,220,229,183,167],
[139,194,246,181,0,182,212,212,175,185],
[121,157,209,129,158,0,167,152,140,160],
[163,165,185,120,128,173,0,129,143,125],
[144,126,192,111,128,188,211,0,130,150],
[161,206,215,157,165,200,197,210,0,171],
[165,170,240,173,155,180,215,190,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,192,178,177,206,181,178,199,170],
[160,0,160,179,164,164,149,149,144,175],
[148,180,0,154,154,178,172,155,163,156],
[162,161,186,0,164,183,164,150,153,161],
[163,176,186,176,0,178,158,154,150,146],
[134,176,162,157,162,0,148,145,147,159],
[159,191,168,176,182,192,0,176,160,161],
[162,191,185,190,186,195,164,0,186,176],
[141,196,177,187,190,193,180,154,0,170],
[170,165,184,179,194,181,179,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,173,154,158,159,172,162,155,152],
[182,0,187,161,153,159,170,165,174,164],
[167,153,0,155,153,151,152,144,161,160],
[186,179,185,0,171,171,171,160,192,177],
[182,187,187,169,0,183,165,171,170,171],
[181,181,189,169,157,0,166,169,167,175],
[168,170,188,169,175,174,0,168,171,173],
[178,175,196,180,169,171,172,0,164,156],
[185,166,179,148,170,173,169,176,0,164],
[188,176,180,163,169,165,167,184,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,201,261,290,201,136,237,296,136],
[234,0,234,299,293,190,89,234,293,174],
[139,106,0,305,189,255,136,130,255,145],
[79,41,35,0,89,35,76,130,231,174],
[50,47,151,251,0,142,47,91,148,91],
[139,150,85,305,198,0,180,180,340,180],
[204,251,204,264,293,160,0,299,258,299],
[103,106,210,210,249,160,41,0,166,145],
[44,47,85,109,192,0,82,174,0,180],
[204,166,195,166,249,160,41,195,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,157,146,165,167,129,145,166],
[174,0,180,157,157,148,197,179,153,176],
[174,160,0,147,164,134,185,163,121,187],
[183,183,193,0,160,185,189,180,168,207],
[194,183,176,180,0,175,219,159,158,200],
[175,192,206,155,165,0,198,186,176,167],
[173,143,155,151,121,142,0,172,158,161],
[211,161,177,160,181,154,168,0,157,153],
[195,187,219,172,182,164,182,183,0,187],
[174,164,153,133,140,173,179,187,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,160,165,172,177,184,183,175,195],
[176,0,153,146,145,166,155,150,180,148],
[180,187,0,170,168,167,185,159,181,185],
[175,194,170,0,157,160,146,157,184,148],
[168,195,172,183,0,195,188,182,181,180],
[163,174,173,180,145,0,170,166,185,184],
[156,185,155,194,152,170,0,161,177,170],
[157,190,181,183,158,174,179,0,177,177],
[165,160,159,156,159,155,163,163,0,168],
[145,192,155,192,160,156,170,163,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,210,158,192,226,211,208,152,175],
[126,0,172,129,160,185,154,157,125,87],
[130,168,0,111,146,131,171,118,120,130],
[182,211,229,0,188,189,227,171,175,147],
[148,180,194,152,0,184,174,164,129,152],
[114,155,209,151,156,0,167,140,106,121],
[129,186,169,113,166,173,0,142,108,126],
[132,183,222,169,176,200,198,0,175,102],
[188,215,220,165,211,234,232,165,0,159],
[165,253,210,193,188,219,214,238,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,159,182,153,182,144,175,162,178],
[205,0,163,218,197,201,164,179,176,225],
[181,177,0,204,187,192,142,163,165,230],
[158,122,136,0,173,198,134,162,131,199],
[187,143,153,167,0,166,121,148,143,199],
[158,139,148,142,174,0,155,170,142,194],
[196,176,198,206,219,185,0,184,162,228],
[165,161,177,178,192,170,156,0,153,215],
[178,164,175,209,197,198,178,187,0,232],
[162,115,110,141,141,146,112,125,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,184,200,194,197,182,180,197,176],
[175,0,181,120,177,182,171,169,175,166],
[156,159,0,165,190,169,176,149,170,111],
[140,220,175,0,168,176,152,157,147,179],
[146,163,150,172,0,168,156,170,199,170],
[143,158,171,164,172,0,178,132,184,162],
[158,169,164,188,184,162,0,156,190,167],
[160,171,191,183,170,208,184,0,194,162],
[143,165,170,193,141,156,150,146,0,171],
[164,174,229,161,170,178,173,178,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,170,160,160,175,162,179,181,172],
[148,0,146,121,149,157,159,150,146,166],
[170,194,0,143,167,182,179,171,174,166],
[180,219,197,0,192,171,175,176,167,170],
[180,191,173,148,0,166,160,187,163,164],
[165,183,158,169,174,0,175,182,170,153],
[178,181,161,165,180,165,0,176,156,160],
[161,190,169,164,153,158,164,0,175,170],
[159,194,166,173,177,170,184,165,0,158],
[168,174,174,170,176,187,180,170,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,158,159,179,185,182,200,172,189],
[162,0,150,154,158,172,157,184,159,166],
[182,190,0,168,178,177,184,202,185,175],
[181,186,172,0,185,196,186,214,164,183],
[161,182,162,155,0,176,165,177,163,175],
[155,168,163,144,164,0,161,177,173,157],
[158,183,156,154,175,179,0,181,175,171],
[140,156,138,126,163,163,159,0,164,146],
[168,181,155,176,177,167,165,176,0,182],
[151,174,165,157,165,183,169,194,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,167,173,172,176,172,162,173,177],
[178,0,160,186,188,169,186,175,175,183],
[173,180,0,186,171,161,166,163,175,169],
[167,154,154,0,169,158,165,154,167,174],
[168,152,169,171,0,151,171,171,177,165],
[164,171,179,182,189,0,176,155,169,161],
[168,154,174,175,169,164,0,159,156,170],
[178,165,177,186,169,185,181,0,163,177],
[167,165,165,173,163,171,184,177,0,167],
[163,157,171,166,175,179,170,163,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,177,180,188,189,149,212,193,170],
[159,0,176,189,170,201,170,179,186,165],
[163,164,0,167,166,173,166,172,175,151],
[160,151,173,0,175,185,175,189,185,160],
[152,170,174,165,0,177,161,173,185,164],
[151,139,167,155,163,0,150,172,173,153],
[191,170,174,165,179,190,0,215,198,158],
[128,161,168,151,167,168,125,0,167,141],
[147,154,165,155,155,167,142,173,0,148],
[170,175,189,180,176,187,182,199,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,184,176,227,182,172,184,205,166],
[160,0,142,162,196,128,173,181,209,180],
[156,198,0,191,208,168,202,218,206,203],
[164,178,149,0,220,155,166,176,205,200],
[113,144,132,120,0,122,127,172,172,174],
[158,212,172,185,218,0,187,209,210,191],
[168,167,138,174,213,153,0,150,194,187],
[156,159,122,164,168,131,190,0,187,158],
[135,131,134,135,168,130,146,153,0,170],
[174,160,137,140,166,149,153,182,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,173,187,167,175,178,173,163,170],
[150,0,160,177,164,150,159,158,156,163],
[167,180,0,178,172,160,172,156,153,174],
[153,163,162,0,183,156,173,144,157,165],
[173,176,168,157,0,156,163,148,153,164],
[165,190,180,184,184,0,172,173,166,176],
[162,181,168,167,177,168,0,158,162,169],
[167,182,184,196,192,167,182,0,174,171],
[177,184,187,183,187,174,178,166,0,185],
[170,177,166,175,176,164,171,169,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,159,147,153,168,159,180,165,165],
[187,0,168,163,184,188,180,183,184,185],
[181,172,0,171,184,191,179,179,170,191],
[193,177,169,0,169,193,181,195,171,185],
[187,156,156,171,0,182,173,170,171,159],
[172,152,149,147,158,0,180,177,180,182],
[181,160,161,159,167,160,0,180,173,168],
[160,157,161,145,170,163,160,0,155,171],
[175,156,170,169,169,160,167,185,0,166],
[175,155,149,155,181,158,172,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,176,151,172,159,173,165,151,169],
[190,0,176,163,187,187,179,181,166,186],
[164,164,0,170,186,187,165,173,180,178],
[189,177,170,0,187,184,163,183,187,194],
[168,153,154,153,0,176,156,166,174,172],
[181,153,153,156,164,0,155,157,167,157],
[167,161,175,177,184,185,0,195,183,180],
[175,159,167,157,174,183,145,0,155,170],
[189,174,160,153,166,173,157,185,0,174],
[171,154,162,146,168,183,160,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,184,164,149,160,168,178,163,156],
[153,0,186,167,151,167,167,161,166,154],
[156,154,0,171,158,161,166,161,167,151],
[176,173,169,0,174,179,172,155,170,160],
[191,189,182,166,0,177,162,169,172,158],
[180,173,179,161,163,0,166,174,163,159],
[172,173,174,168,178,174,0,170,172,158],
[162,179,179,185,171,166,170,0,168,161],
[177,174,173,170,168,177,168,172,0,171],
[184,186,189,180,182,181,182,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,184,178,182,169,184,177,174],
[167,0,167,181,176,175,174,182,158,180],
[172,173,0,170,177,170,159,177,160,182],
[156,159,170,0,170,170,163,190,167,164],
[162,164,163,170,0,154,153,172,170,165],
[158,165,170,170,186,0,160,182,166,175],
[171,166,181,177,187,180,0,186,178,181],
[156,158,163,150,168,158,154,0,162,160],
[163,182,180,173,170,174,162,178,0,169],
[166,160,158,176,175,165,159,180,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,150,162,161,175,155,172,145],
[177,0,159,146,182,146,178,165,170,163],
[168,181,0,169,180,155,182,160,180,180],
[190,194,171,0,188,180,189,154,177,179],
[178,158,160,152,0,153,171,163,158,154],
[179,194,185,160,187,0,191,182,195,185],
[165,162,158,151,169,149,0,164,165,155],
[185,175,180,186,177,158,176,0,190,175],
[168,170,160,163,182,145,175,150,0,153],
[195,177,160,161,186,155,185,165,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,198,163,167,200,224,199,221,185],
[185,0,153,222,219,177,208,205,187,139],
[142,187,0,168,169,128,172,130,144,91],
[177,118,172,0,188,176,170,148,165,174],
[173,121,171,152,0,155,183,137,202,175],
[140,163,212,164,185,0,161,135,187,144],
[116,132,168,170,157,179,0,116,158,152],
[141,135,210,192,203,205,224,0,181,169],
[119,153,196,175,138,153,182,159,0,136],
[155,201,249,166,165,196,188,171,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,160,165,161,152,176,147,169,150],
[184,0,177,175,165,165,185,153,178,163],
[180,163,0,178,171,161,166,148,190,165],
[175,165,162,0,155,156,163,152,176,155],
[179,175,169,185,0,172,173,168,193,164],
[188,175,179,184,168,0,183,155,176,174],
[164,155,174,177,167,157,0,171,178,164],
[193,187,192,188,172,185,169,0,199,176],
[171,162,150,164,147,164,162,141,0,156],
[190,177,175,185,176,166,176,164,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,153,164,130,115,141,175,164,167],
[173,0,167,189,160,135,178,183,176,180],
[187,173,0,161,154,159,169,170,140,202],
[176,151,179,0,145,135,168,182,171,201],
[210,180,186,195,0,175,170,172,183,197],
[225,205,181,205,165,0,194,197,167,219],
[199,162,171,172,170,146,0,167,183,208],
[165,157,170,158,168,143,173,0,147,197],
[176,164,200,169,157,173,157,193,0,187],
[173,160,138,139,143,121,132,143,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,151,126,186,131,151,150,140,137],
[182,0,161,130,158,150,153,117,164,132],
[189,179,0,151,169,151,165,140,140,156],
[214,210,189,0,216,140,200,167,181,166],
[154,182,171,124,0,138,146,134,161,147],
[209,190,189,200,202,0,177,175,169,175],
[189,187,175,140,194,163,0,147,161,174],
[190,223,200,173,206,165,193,0,151,164],
[200,176,200,159,179,171,179,189,0,153],
[203,208,184,174,193,165,166,176,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,151,188,150,175,181,166,178,158],
[158,0,132,167,159,172,170,159,145,144],
[189,208,0,213,177,208,186,200,170,179],
[152,173,127,0,146,209,173,150,169,141],
[190,181,163,194,0,181,209,188,191,170],
[165,168,132,131,159,0,175,168,158,153],
[159,170,154,167,131,165,0,134,141,168],
[174,181,140,190,152,172,206,0,175,169],
[162,195,170,171,149,182,199,165,0,168],
[182,196,161,199,170,187,172,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,177,177,175,182,185,186,167,168],
[170,0,168,178,177,187,156,185,169,158],
[163,172,0,169,164,179,170,184,172,169],
[163,162,171,0,162,188,186,181,166,161],
[165,163,176,178,0,185,187,183,176,175],
[158,153,161,152,155,0,168,173,160,155],
[155,184,170,154,153,172,0,178,169,171],
[154,155,156,159,157,167,162,0,166,158],
[173,171,168,174,164,180,171,174,0,178],
[172,182,171,179,165,185,169,182,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,204,205,187,167,170,198,159,189],
[158,0,157,171,191,173,177,166,134,164],
[136,183,0,175,162,159,160,194,154,184],
[135,169,165,0,182,142,141,177,145,178],
[153,149,178,158,0,143,153,175,148,150],
[173,167,181,198,197,0,197,194,171,175],
[170,163,180,199,187,143,0,181,141,181],
[142,174,146,163,165,146,159,0,132,169],
[181,206,186,195,192,169,199,208,0,189],
[151,176,156,162,190,165,159,171,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,177,175,182,152,173,179,184,173],
[161,0,171,185,184,170,176,169,165,160],
[163,169,0,179,176,169,170,175,176,167],
[165,155,161,0,170,163,157,164,164,156],
[158,156,164,170,0,162,157,166,155,160],
[188,170,171,177,178,0,175,182,168,159],
[167,164,170,183,183,165,0,158,175,164],
[161,171,165,176,174,158,182,0,171,168],
[156,175,164,176,185,172,165,169,0,163],
[167,180,173,184,180,181,176,172,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,161,156,159,179,171,154,164,170],
[189,0,174,163,181,177,170,161,179,186],
[179,166,0,176,183,181,176,170,176,189],
[184,177,164,0,191,187,188,162,183,192],
[181,159,157,149,0,166,166,158,174,174],
[161,163,159,153,174,0,172,155,164,175],
[169,170,164,152,174,168,0,156,165,176],
[186,179,170,178,182,185,184,0,179,200],
[176,161,164,157,166,176,175,161,0,184],
[170,154,151,148,166,165,164,140,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,144,186,190,136,145,170,165,156],
[167,0,175,185,141,167,153,133,155,165],
[196,165,0,202,162,201,175,174,169,147],
[154,155,138,0,140,174,118,122,179,140],
[150,199,178,200,0,154,162,124,190,203],
[204,173,139,166,186,0,213,186,159,117],
[195,187,165,222,178,127,0,132,159,137],
[170,207,166,218,216,154,208,0,221,165],
[175,185,171,161,150,181,181,119,0,154],
[184,175,193,200,137,223,203,175,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,159,162,149,169,169,177,158,158],
[175,0,168,163,165,158,173,167,182,176],
[181,172,0,159,168,156,177,172,174,180],
[178,177,181,0,177,166,189,175,171,175],
[191,175,172,163,0,169,172,173,168,175],
[171,182,184,174,171,0,184,182,169,178],
[171,167,163,151,168,156,0,173,162,164],
[163,173,168,165,167,158,167,0,167,169],
[182,158,166,169,172,171,178,173,0,172],
[182,164,160,165,165,162,176,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,158,209,185,218,122,137,185,163],
[141,0,174,169,194,208,152,175,164,152],
[182,166,0,188,169,207,134,173,155,144],
[131,171,152,0,137,234,153,150,151,168],
[155,146,171,203,0,200,98,136,171,172],
[122,132,133,106,140,0,117,123,127,133],
[218,188,206,187,242,223,0,201,203,156],
[203,165,167,190,204,217,139,0,165,169],
[155,176,185,189,169,213,137,175,0,178],
[177,188,196,172,168,207,184,171,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,195,165,181,146,211,191,166,202],
[155,0,183,158,162,188,154,181,182,130],
[145,157,0,113,137,130,161,193,168,106],
[175,182,227,0,229,136,226,210,207,146],
[159,178,203,111,0,120,184,204,175,134],
[194,152,210,204,220,0,173,218,197,162],
[129,186,179,114,156,167,0,159,146,142],
[149,159,147,130,136,122,181,0,122,132],
[174,158,172,133,165,143,194,218,0,182],
[138,210,234,194,206,178,198,208,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,165,139,198,180,186,175,182,165],
[145,0,173,107,142,128,180,168,152,134],
[175,167,0,171,128,145,215,147,170,176],
[201,233,169,0,171,168,167,171,151,170],
[142,198,212,169,0,129,196,169,151,154],
[160,212,195,172,211,0,187,236,206,217],
[154,160,125,173,144,153,0,165,124,151],
[165,172,193,169,171,104,175,0,167,155],
[158,188,170,189,189,134,216,173,0,172],
[175,206,164,170,186,123,189,185,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,211,199,162,195,165,180,200,169],
[146,0,165,164,148,162,145,158,165,147],
[129,175,0,166,132,145,146,166,174,141],
[141,176,174,0,131,161,136,152,180,131],
[178,192,208,209,0,194,188,189,214,167],
[145,178,195,179,146,0,155,156,172,160],
[175,195,194,204,152,185,0,205,187,177],
[160,182,174,188,151,184,135,0,194,141],
[140,175,166,160,126,168,153,146,0,144],
[171,193,199,209,173,180,163,199,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,177,153,207,171,179,186,185,178],
[144,0,141,149,152,148,167,160,148,166],
[163,199,0,167,145,186,209,173,196,179],
[187,191,173,0,171,179,206,166,195,213],
[133,188,195,169,0,152,194,127,207,171],
[169,192,154,161,188,0,165,179,172,185],
[161,173,131,134,146,175,0,163,162,169],
[154,180,167,174,213,161,177,0,169,204],
[155,192,144,145,133,168,178,171,0,176],
[162,174,161,127,169,155,171,136,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,139,158,124,155,190,212,71,165],
[170,0,172,102,259,118,109,165,130,161],
[201,168,0,145,234,201,129,168,112,180],
[182,238,195,0,190,162,210,218,93,195],
[216,81,106,150,0,171,122,116,174,152],
[185,222,139,178,169,0,189,211,138,155],
[150,231,211,130,218,151,0,231,132,129],
[128,175,172,122,224,129,109,0,86,132],
[269,210,228,247,166,202,208,254,0,159],
[175,179,160,145,188,185,211,208,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,188,182,171,161,176,185,167],
[167,0,155,176,169,161,157,147,163,158],
[172,185,0,209,170,180,174,172,178,167],
[152,164,131,0,152,155,164,158,167,152],
[158,171,170,188,0,164,170,172,155,160],
[169,179,160,185,176,0,183,151,165,174],
[179,183,166,176,170,157,0,176,183,169],
[164,193,168,182,168,189,164,0,167,172],
[155,177,162,173,185,175,157,173,0,172],
[173,182,173,188,180,166,171,168,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,218,156,174,176,188,188,178,182],
[177,0,212,175,172,192,193,165,168,180],
[122,128,0,137,130,139,135,107,137,155],
[184,165,203,0,154,150,183,161,152,162],
[166,168,210,186,0,173,189,187,153,161],
[164,148,201,190,167,0,157,168,160,167],
[152,147,205,157,151,183,0,139,169,177],
[152,175,233,179,153,172,201,0,166,192],
[162,172,203,188,187,180,171,174,0,157],
[158,160,185,178,179,173,163,148,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,177,169,158,138,162,165,164,152],
[174,0,176,188,203,152,179,158,184,201],
[163,164,0,156,208,192,169,153,165,175],
[171,152,184,0,203,154,174,168,175,189],
[182,137,132,137,0,140,164,152,176,174],
[202,188,148,186,200,0,200,209,163,199],
[178,161,171,166,176,140,0,159,157,167],
[175,182,187,172,188,131,181,0,164,161],
[176,156,175,165,164,177,183,176,0,167],
[188,139,165,151,166,141,173,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,171,146,129,163,150,167,146,188],
[201,0,170,176,169,214,172,182,202,209],
[169,170,0,185,160,163,164,188,176,185],
[194,164,155,0,153,181,153,177,179,184],
[211,171,180,187,0,187,150,181,191,202],
[177,126,177,159,153,0,125,174,169,175],
[190,168,176,187,190,215,0,185,193,172],
[173,158,152,163,159,166,155,0,168,168],
[194,138,164,161,149,171,147,172,0,186],
[152,131,155,156,138,165,168,172,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,170,205,166,165,180,150,155,192],
[198,0,189,195,171,177,208,151,176,191],
[170,151,0,171,143,165,184,167,155,164],
[135,145,169,0,140,181,175,154,155,162],
[174,169,197,200,0,197,223,177,205,208],
[175,163,175,159,143,0,201,154,172,183],
[160,132,156,165,117,139,0,164,129,157],
[190,189,173,186,163,186,176,0,167,169],
[185,164,185,185,135,168,211,173,0,189],
[148,149,176,178,132,157,183,171,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,204,104,128,209,184,144,168,233],
[156,0,189,130,195,168,124,126,128,197],
[136,151,0,167,122,151,142,109,147,204],
[236,210,173,0,172,221,201,135,217,263],
[212,145,218,168,0,157,121,77,154,236],
[131,172,189,119,183,0,137,109,153,250],
[156,216,198,139,219,203,0,185,169,250],
[196,214,231,205,263,231,155,0,173,240],
[172,212,193,123,186,187,171,167,0,268],
[107,143,136,77,104,90,90,100,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,164,179,175,191,168,181,163,159],
[167,0,191,181,181,165,179,179,168,176],
[176,149,0,169,169,160,157,156,172,173],
[161,159,171,0,167,191,145,164,166,168],
[165,159,171,173,0,166,157,161,152,169],
[149,175,180,149,174,0,167,157,171,147],
[172,161,183,195,183,173,0,167,173,171],
[159,161,184,176,179,183,173,0,159,158],
[177,172,168,174,188,169,167,181,0,172],
[181,164,167,172,171,193,169,182,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,136,136,136,136,136,136,136,136],
[204,0,145,281,281,340,59,195,281,281],
[204,195,0,281,340,340,59,195,281,281],
[204,59,59,0,340,195,59,195,145,136],
[204,59,0,0,0,59,59,59,0,136],
[204,0,0,145,281,0,0,136,145,136],
[204,281,281,281,281,340,0,136,281,281],
[204,145,145,145,281,204,204,0,145,281],
[204,59,59,195,340,195,59,195,0,136],
[204,59,59,204,204,204,59,59,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,170,173,177,166,175,193,170],
[159,0,156,160,161,164,162,164,183,173],
[172,184,0,171,176,181,172,178,175,169],
[170,180,169,0,173,171,164,172,191,170],
[167,179,164,167,0,172,145,175,178,173],
[163,176,159,169,168,0,170,180,184,170],
[174,178,168,176,195,170,0,178,191,174],
[165,176,162,168,165,160,162,0,174,154],
[147,157,165,149,162,156,149,166,0,150],
[170,167,171,170,167,170,166,186,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,163,179,155,186,185,183,163,173],
[159,0,160,168,153,159,171,163,156,183],
[177,180,0,164,148,163,171,179,170,181],
[161,172,176,0,155,162,165,162,160,173],
[185,187,192,185,0,184,182,182,165,184],
[154,181,177,178,156,0,174,174,162,169],
[155,169,169,175,158,166,0,171,162,163],
[157,177,161,178,158,166,169,0,180,173],
[177,184,170,180,175,178,178,160,0,183],
[167,157,159,167,156,171,177,167,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,187,160,167,181,210,190,174,176],
[181,0,198,196,163,195,191,209,189,185],
[153,142,0,146,134,150,163,163,144,158],
[180,144,194,0,187,193,198,207,171,183],
[173,177,206,153,0,190,208,199,176,198],
[159,145,190,147,150,0,183,181,143,179],
[130,149,177,142,132,157,0,172,161,179],
[150,131,177,133,141,159,168,0,161,173],
[166,151,196,169,164,197,179,179,0,180],
[164,155,182,157,142,161,161,167,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,179,198,161,171,202,187,177,145],
[137,0,173,175,153,167,135,173,137,172],
[161,167,0,182,163,200,184,201,176,167],
[142,165,158,0,154,166,176,148,149,132],
[179,187,177,186,0,182,156,179,158,185],
[169,173,140,174,158,0,150,154,134,156],
[138,205,156,164,184,190,0,177,145,150],
[153,167,139,192,161,186,163,0,151,128],
[163,203,164,191,182,206,195,189,0,174],
[195,168,173,208,155,184,190,212,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,160,160,138,147,155,174,163,154],
[158,0,158,172,176,171,173,189,180,159],
[180,182,0,171,167,164,173,181,172,172],
[180,168,169,0,144,152,147,187,164,146],
[202,164,173,196,0,192,189,196,186,190],
[193,169,176,188,148,0,177,200,179,166],
[185,167,167,193,151,163,0,188,192,176],
[166,151,159,153,144,140,152,0,162,144],
[177,160,168,176,154,161,148,178,0,156],
[186,181,168,194,150,174,164,196,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,190,151,165,150,168,180,188,184],
[140,0,149,159,151,156,123,126,143,128],
[150,191,0,176,172,150,129,164,155,154],
[189,181,164,0,172,155,164,178,194,169],
[175,189,168,168,0,154,170,153,163,139],
[190,184,190,185,186,0,172,174,163,165],
[172,217,211,176,170,168,0,227,165,175],
[160,214,176,162,187,166,113,0,157,161],
[152,197,185,146,177,177,175,183,0,156],
[156,212,186,171,201,175,165,179,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,178,164,180,159,172,151,176,180],
[179,0,191,161,178,177,174,168,174,176],
[162,149,0,143,156,165,154,159,164,157],
[176,179,197,0,175,197,170,176,182,174],
[160,162,184,165,0,168,162,168,163,157],
[181,163,175,143,172,0,160,168,176,164],
[168,166,186,170,178,180,0,176,181,184],
[189,172,181,164,172,172,164,0,180,174],
[164,166,176,158,177,164,159,160,0,161],
[160,164,183,166,183,176,156,166,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,180,157,186,185,222,176,188,128],
[190,0,208,183,167,156,214,202,174,228],
[160,132,0,152,171,161,214,164,134,140],
[183,157,188,0,204,203,169,226,168,228],
[154,173,169,136,0,220,143,163,171,154],
[155,184,179,137,120,0,175,183,143,128],
[118,126,126,171,197,165,0,189,103,170],
[164,138,176,114,177,157,151,0,160,117],
[152,166,206,172,169,197,237,180,0,168],
[212,112,200,112,186,212,170,223,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,233,180,157,208,209,177,164,196],
[124,0,166,124,132,136,167,118,125,133],
[107,174,0,146,147,148,141,142,116,119],
[160,216,194,0,146,184,166,141,170,170],
[183,208,193,194,0,193,183,164,163,182],
[132,204,192,156,147,0,173,142,157,172],
[131,173,199,174,157,167,0,164,161,145],
[163,222,198,199,176,198,176,0,181,178],
[176,215,224,170,177,183,179,159,0,161],
[144,207,221,170,158,168,195,162,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,150,183,183,173,165,203,170,167],
[175,0,157,170,167,151,171,187,153,178],
[190,183,0,175,176,169,179,214,170,195],
[157,170,165,0,139,159,166,178,176,161],
[157,173,164,201,0,162,157,202,180,162],
[167,189,171,181,178,0,186,221,183,206],
[175,169,161,174,183,154,0,187,190,170],
[137,153,126,162,138,119,153,0,145,180],
[170,187,170,164,160,157,150,195,0,190],
[173,162,145,179,178,134,170,160,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,197,154,187,174,167,173,170,191],
[197,0,189,182,185,195,163,144,177,210],
[143,151,0,143,179,164,152,147,163,153],
[186,158,197,0,164,181,167,166,194,170],
[153,155,161,176,0,175,161,157,190,177],
[166,145,176,159,165,0,159,152,161,146],
[173,177,188,173,179,181,0,143,154,184],
[167,196,193,174,183,188,197,0,200,184],
[170,163,177,146,150,179,186,140,0,198],
[149,130,187,170,163,194,156,156,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,213,166,197,175,198,168,188,166],
[174,0,194,179,172,150,174,177,169,160],
[127,146,0,135,180,137,168,157,159,152],
[174,161,205,0,175,156,203,171,190,167],
[143,168,160,165,0,139,166,156,174,159],
[165,190,203,184,201,0,200,200,200,187],
[142,166,172,137,174,140,0,158,162,155],
[172,163,183,169,184,140,182,0,177,154],
[152,171,181,150,166,140,178,163,0,150],
[174,180,188,173,181,153,185,186,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,159,159,176,158,161,179,166,182],
[152,0,147,146,162,155,159,159,167,162],
[181,193,0,161,179,168,190,182,175,184],
[181,194,179,0,182,159,181,178,168,180],
[164,178,161,158,0,176,173,165,165,175],
[182,185,172,181,164,0,185,165,154,187],
[179,181,150,159,167,155,0,173,156,172],
[161,181,158,162,175,175,167,0,162,188],
[174,173,165,172,175,186,184,178,0,179],
[158,178,156,160,165,153,168,152,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,150,165,161,172,188,185,187,176],
[164,0,180,164,149,163,151,166,165,156],
[190,160,0,183,175,160,157,192,180,180],
[175,176,157,0,149,145,121,163,166,146],
[179,191,165,191,0,145,157,202,157,174],
[168,177,180,195,195,0,170,199,202,168],
[152,189,183,219,183,170,0,176,163,160],
[155,174,148,177,138,141,164,0,169,171],
[153,175,160,174,183,138,177,171,0,151],
[164,184,160,194,166,172,180,169,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,175,178,180,182,165,165,172,175],
[154,0,170,165,171,165,145,152,156,159],
[165,170,0,166,170,156,164,166,162,163],
[162,175,174,0,170,165,166,170,160,170],
[160,169,170,170,0,160,154,160,161,151],
[158,175,184,175,180,0,166,168,164,164],
[175,195,176,174,186,174,0,181,163,175],
[175,188,174,170,180,172,159,0,159,170],
[168,184,178,180,179,176,177,181,0,172],
[165,181,177,170,189,176,165,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,163,105,224,136,193,129,164,166],
[128,0,179,123,115,137,264,198,285,118],
[177,161,0,123,109,89,180,78,110,123],
[235,217,217,0,247,173,193,162,196,171],
[116,225,231,93,0,205,179,172,259,149],
[204,203,251,167,135,0,282,136,228,140],
[147,76,160,147,161,58,0,76,144,32],
[211,142,262,178,168,204,264,0,210,131],
[176,55,230,144,81,112,196,130,0,171],
[174,222,217,169,191,200,308,209,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,180,171,171,172,174,167,161,159],
[163,0,167,167,160,172,180,166,164,168],
[160,173,0,171,152,170,178,163,169,161],
[169,173,169,0,148,175,175,160,167,158],
[169,180,188,192,0,196,176,172,170,163],
[168,168,170,165,144,0,166,158,163,140],
[166,160,162,165,164,174,0,156,158,154],
[173,174,177,180,168,182,184,0,183,176],
[179,176,171,173,170,177,182,157,0,169],
[181,172,179,182,177,200,186,164,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,163,205,160,159,152,170,173,199],
[165,0,152,182,174,178,197,178,153,171],
[177,188,0,158,165,141,170,144,172,207],
[135,158,182,0,155,198,226,205,153,158],
[180,166,175,185,0,157,156,131,180,182],
[181,162,199,142,183,0,189,185,161,194],
[188,143,170,114,184,151,0,163,146,178],
[170,162,196,135,209,155,177,0,181,204],
[167,187,168,187,160,179,194,159,0,220],
[141,169,133,182,158,146,162,136,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,160,183,178,155,179,168,156,155],
[181,0,177,179,178,164,187,180,162,173],
[180,163,0,166,173,154,168,161,151,160],
[157,161,174,0,165,159,178,174,155,154],
[162,162,167,175,0,173,177,170,150,164],
[185,176,186,181,167,0,180,186,163,173],
[161,153,172,162,163,160,0,162,156,144],
[172,160,179,166,170,154,178,0,160,154],
[184,178,189,185,190,177,184,180,0,156],
[185,167,180,186,176,167,196,186,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,168,151,159,184,208,167,173],
[162,0,189,175,158,170,164,197,180,175],
[162,151,0,166,161,154,169,170,164,179],
[172,165,174,0,173,191,177,183,185,181],
[189,182,179,167,0,194,176,199,155,206],
[181,170,186,149,146,0,156,199,172,161],
[156,176,171,163,164,184,0,199,163,155],
[132,143,170,157,141,141,141,0,142,163],
[173,160,176,155,185,168,177,198,0,183],
[167,165,161,159,134,179,185,177,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,157,153,166,147,176,155,162,157],
[182,0,163,172,175,167,188,176,155,164],
[183,177,0,185,186,158,179,179,163,179],
[187,168,155,0,190,164,185,175,160,176],
[174,165,154,150,0,148,168,158,163,168],
[193,173,182,176,192,0,177,172,170,164],
[164,152,161,155,172,163,0,165,145,156],
[185,164,161,165,182,168,175,0,161,170],
[178,185,177,180,177,170,195,179,0,172],
[183,176,161,164,172,176,184,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,216,202,149,165,157,197,185,205],
[142,0,155,136,139,144,147,157,138,165],
[124,185,0,139,160,135,157,157,156,192],
[138,204,201,0,180,168,158,179,185,204],
[191,201,180,160,0,168,180,165,159,209],
[175,196,205,172,172,0,167,164,171,202],
[183,193,183,182,160,173,0,169,145,206],
[143,183,183,161,175,176,171,0,152,205],
[155,202,184,155,181,169,195,188,0,198],
[135,175,148,136,131,138,134,135,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,112,109,152,87,168,122,129,141],
[201,0,151,154,199,158,172,160,172,176],
[228,189,0,189,202,168,194,165,200,168],
[231,186,151,0,187,127,200,179,144,152],
[188,141,138,153,0,136,181,150,131,124],
[253,182,172,213,204,0,211,177,165,171],
[172,168,146,140,159,129,0,148,154,135],
[218,180,175,161,190,163,192,0,182,180],
[211,168,140,196,209,175,186,158,0,157],
[199,164,172,188,216,169,205,160,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,182,164,177,172,172,143,159,163],
[156,0,180,164,184,169,168,147,186,173],
[158,160,0,170,185,173,169,168,180,171],
[176,176,170,0,193,179,174,170,173,170],
[163,156,155,147,0,147,167,156,169,153],
[168,171,167,161,193,0,171,153,173,192],
[168,172,171,166,173,169,0,157,167,169],
[197,193,172,170,184,187,183,0,179,183],
[181,154,160,167,171,167,173,161,0,166],
[177,167,169,170,187,148,171,157,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,175,160,164,167,173,174,170,141],
[145,0,154,131,158,191,188,160,161,133],
[165,186,0,169,176,187,170,178,177,164],
[180,209,171,0,183,202,174,186,226,148],
[176,182,164,157,0,155,201,176,190,164],
[173,149,153,138,185,0,149,165,152,141],
[167,152,170,166,139,191,0,179,166,121],
[166,180,162,154,164,175,161,0,167,183],
[170,179,163,114,150,188,174,173,0,146],
[199,207,176,192,176,199,219,157,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,168,189,182,168,187,184,189,184],
[173,0,166,182,187,160,166,174,171,173],
[172,174,0,178,187,167,182,177,167,189],
[151,158,162,0,163,153,172,176,161,172],
[158,153,153,177,0,157,173,170,151,164],
[172,180,173,187,183,0,180,181,165,189],
[153,174,158,168,167,160,0,168,152,171],
[156,166,163,164,170,159,172,0,167,182],
[151,169,173,179,189,175,188,173,0,186],
[156,167,151,168,176,151,169,158,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,185,133,160,137,152,136,169,179],
[194,0,176,128,130,163,220,141,164,150],
[155,164,0,103,129,149,177,61,134,138],
[207,212,237,0,253,195,218,218,194,160],
[180,210,211,87,0,162,231,205,208,176],
[203,177,191,145,178,0,205,158,181,145],
[188,120,163,122,109,135,0,115,140,154],
[204,199,279,122,135,182,225,0,210,151],
[171,176,206,146,132,159,200,130,0,213],
[161,190,202,180,164,195,186,189,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,159,183,195,187,199,160,171,180],
[143,0,148,147,191,145,180,136,151,151],
[181,192,0,190,225,175,214,165,183,200],
[157,193,150,0,188,166,177,170,161,161],
[145,149,115,152,0,144,153,118,122,125],
[153,195,165,174,196,0,199,155,183,165],
[141,160,126,163,187,141,0,146,172,166],
[180,204,175,170,222,185,194,0,188,184],
[169,189,157,179,218,157,168,152,0,144],
[160,189,140,179,215,175,174,156,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,180,187,171,169,181,169,189,194],
[165,0,183,186,169,175,180,186,192,169],
[160,157,0,168,163,156,167,170,174,164],
[153,154,172,0,157,161,162,174,168,168],
[169,171,177,183,0,169,178,173,187,180],
[171,165,184,179,171,0,174,176,183,162],
[159,160,173,178,162,166,0,176,188,172],
[171,154,170,166,167,164,164,0,177,171],
[151,148,166,172,153,157,152,163,0,156],
[146,171,176,172,160,178,168,169,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,176,171,177,180,156,186,175,190],
[156,0,160,155,175,172,152,167,165,163],
[164,180,0,161,190,179,185,180,184,181],
[169,185,179,0,174,175,146,152,168,177],
[163,165,150,166,0,166,160,181,155,183],
[160,168,161,165,174,0,161,170,164,180],
[184,188,155,194,180,179,0,179,185,195],
[154,173,160,188,159,170,161,0,171,170],
[165,175,156,172,185,176,155,169,0,181],
[150,177,159,163,157,160,145,170,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,184,149,173,183,179,179,178],
[168,0,165,176,170,173,178,177,176,174],
[168,175,0,193,166,191,195,182,196,191],
[156,164,147,0,153,169,172,180,170,164],
[191,170,174,187,0,190,178,175,167,176],
[167,167,149,171,150,0,173,162,173,173],
[157,162,145,168,162,167,0,165,167,156],
[161,163,158,160,165,178,175,0,170,184],
[161,164,144,170,173,167,173,170,0,173],
[162,166,149,176,164,167,184,156,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,192,191,154,195,168,185,170,164],
[174,0,200,166,162,188,180,174,170,168],
[148,140,0,168,138,171,142,167,129,139],
[149,174,172,0,144,163,150,168,146,168],
[186,178,202,196,0,226,175,192,165,174],
[145,152,169,177,114,0,144,160,134,150],
[172,160,198,190,165,196,0,184,163,175],
[155,166,173,172,148,180,156,0,150,134],
[170,170,211,194,175,206,177,190,0,174],
[176,172,201,172,166,190,165,206,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,211,194,200,189,150,174,173,195],
[175,0,175,184,183,195,182,146,194,155],
[129,165,0,154,186,163,153,171,171,181],
[146,156,186,0,173,168,173,189,183,161],
[140,157,154,167,0,172,133,178,175,156],
[151,145,177,172,168,0,136,176,179,186],
[190,158,187,167,207,204,0,170,190,189],
[166,194,169,151,162,164,170,0,200,181],
[167,146,169,157,165,161,150,140,0,139],
[145,185,159,179,184,154,151,159,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,171,181,136,184,159,165,169,158],
[174,0,165,159,152,184,162,170,182,172],
[169,175,0,164,158,161,170,183,171,164],
[159,181,176,0,153,169,163,188,154,171],
[204,188,182,187,0,186,191,179,177,165],
[156,156,179,171,154,0,170,169,168,135],
[181,178,170,177,149,170,0,177,171,147],
[175,170,157,152,161,171,163,0,172,133],
[171,158,169,186,163,172,169,168,0,159],
[182,168,176,169,175,205,193,207,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,153,166,168,159,155,189,157,184],
[193,0,186,164,169,167,173,178,176,169],
[187,154,0,166,163,185,170,198,156,175],
[174,176,174,0,164,173,169,183,175,176],
[172,171,177,176,0,164,155,191,158,162],
[181,173,155,167,176,0,158,191,163,187],
[185,167,170,171,185,182,0,180,160,179],
[151,162,142,157,149,149,160,0,133,169],
[183,164,184,165,182,177,180,207,0,185],
[156,171,165,164,178,153,161,171,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,154,152,124,139,140,152,130,173],
[174,0,174,153,164,150,165,153,170,165],
[186,166,0,148,144,156,161,163,147,193],
[188,187,192,0,177,209,160,179,193,208],
[216,176,196,163,0,167,188,154,182,199],
[201,190,184,131,173,0,161,160,148,179],
[200,175,179,180,152,179,0,169,168,175],
[188,187,177,161,186,180,171,0,176,201],
[210,170,193,147,158,192,172,164,0,175],
[167,175,147,132,141,161,165,139,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,174,171,156,174,179,170,192,171],
[159,0,177,162,170,175,168,177,178,171],
[166,163,0,159,175,172,160,170,178,165],
[169,178,181,0,160,179,173,171,178,180],
[184,170,165,180,0,181,187,173,185,172],
[166,165,168,161,159,0,167,157,179,165],
[161,172,180,167,153,173,0,174,176,187],
[170,163,170,169,167,183,166,0,178,164],
[148,162,162,162,155,161,164,162,0,163],
[169,169,175,160,168,175,153,176,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,128,148,151,151,132,144,141,132],
[137,0,144,139,129,154,130,107,114,111],
[212,196,0,189,211,185,156,158,163,188],
[192,201,151,0,137,183,189,175,212,187],
[189,211,129,203,0,186,162,182,181,169],
[189,186,155,157,154,0,132,132,188,167],
[208,210,184,151,178,208,0,186,173,182],
[196,233,182,165,158,208,154,0,180,158],
[199,226,177,128,159,152,167,160,0,171],
[208,229,152,153,171,173,158,182,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,174,182,197,190,196,181,166,176],
[161,0,157,144,167,185,172,161,155,146],
[166,183,0,156,184,180,171,162,158,169],
[158,196,184,0,188,210,188,184,178,162],
[143,173,156,152,0,174,172,154,146,154],
[150,155,160,130,166,0,157,148,136,142],
[144,168,169,152,168,183,0,158,150,150],
[159,179,178,156,186,192,182,0,175,170],
[174,185,182,162,194,204,190,165,0,172],
[164,194,171,178,186,198,190,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,172,205,161,173,206,191,183,186],
[160,0,178,194,182,161,189,180,167,180],
[168,162,0,194,168,154,191,185,164,194],
[135,146,146,0,156,135,171,143,162,162],
[179,158,172,184,0,167,200,189,180,183],
[167,179,186,205,173,0,178,196,179,197],
[134,151,149,169,140,162,0,159,140,171],
[149,160,155,197,151,144,181,0,174,186],
[157,173,176,178,160,161,200,166,0,191],
[154,160,146,178,157,143,169,154,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,150,163,146,156,156,169,176,168],
[180,0,161,173,161,165,187,169,174,168],
[190,179,0,170,177,178,180,190,185,177],
[177,167,170,0,180,163,160,180,174,171],
[194,179,163,160,0,170,174,170,178,176],
[184,175,162,177,170,0,179,176,179,178],
[184,153,160,180,166,161,0,166,175,166],
[171,171,150,160,170,164,174,0,167,166],
[164,166,155,166,162,161,165,173,0,170],
[172,172,163,169,164,162,174,174,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,124,166,172,146,178,142,180,161],
[163,0,170,178,194,181,208,192,194,183],
[216,170,0,201,203,185,235,186,198,185],
[174,162,139,0,168,158,162,152,189,165],
[168,146,137,172,0,166,180,166,176,162],
[194,159,155,182,174,0,207,173,182,158],
[162,132,105,178,160,133,0,141,171,162],
[198,148,154,188,174,167,199,0,199,163],
[160,146,142,151,164,158,169,141,0,161],
[179,157,155,175,178,182,178,177,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,153,172,185,150,152,168,189],
[165,0,175,168,167,178,142,163,177,175],
[165,165,0,164,163,179,157,155,175,161],
[187,172,176,0,161,205,175,167,185,178],
[168,173,177,179,0,199,159,176,173,174],
[155,162,161,135,141,0,139,156,152,176],
[190,198,183,165,181,201,0,184,186,200],
[188,177,185,173,164,184,156,0,188,177],
[172,163,165,155,167,188,154,152,0,171],
[151,165,179,162,166,164,140,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,228,142,161,217,257,183,173,142],
[112,0,47,112,75,151,97,62,86,136],
[112,293,0,173,122,151,97,112,136,110],
[198,228,167,0,161,237,175,187,141,212],
[179,265,218,179,0,163,163,194,179,218],
[123,189,189,103,177,0,71,165,60,194],
[83,243,243,165,177,269,0,204,122,209],
[157,278,228,153,146,175,136,0,86,244],
[167,254,204,199,161,280,218,254,0,238],
[198,204,230,128,122,146,131,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,161,155,166,180,170,171,189,180],
[179,0,167,183,166,188,188,182,173,180],
[179,173,0,165,172,185,165,173,176,174],
[185,157,175,0,167,187,195,182,185,169],
[174,174,168,173,0,178,169,175,192,186],
[160,152,155,153,162,0,167,167,167,158],
[170,152,175,145,171,173,0,170,163,165],
[169,158,167,158,165,173,170,0,179,169],
[151,167,164,155,148,173,177,161,0,162],
[160,160,166,171,154,182,175,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,148,186,139,176,170,182,137,165],
[148,0,144,185,152,172,154,169,176,163],
[192,196,0,186,163,165,190,198,175,187],
[154,155,154,0,142,144,170,150,169,145],
[201,188,177,198,0,168,191,195,194,180],
[164,168,175,196,172,0,190,192,162,171],
[170,186,150,170,149,150,0,161,142,155],
[158,171,142,190,145,148,179,0,160,172],
[203,164,165,171,146,178,198,180,0,174],
[175,177,153,195,160,169,185,168,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,177,171,161,158,173,181,176,157],
[163,0,156,158,158,155,154,164,169,149],
[163,184,0,177,157,172,158,186,167,150],
[169,182,163,0,167,158,141,163,146,171],
[179,182,183,173,0,136,159,173,162,165],
[182,185,168,182,204,0,182,181,172,165],
[167,186,182,199,181,158,0,182,189,144],
[159,176,154,177,167,159,158,0,169,157],
[164,171,173,194,178,168,151,171,0,131],
[183,191,190,169,175,175,196,183,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,190,184,182,169,175,176,174,191],
[140,0,153,168,142,167,175,154,162,161],
[150,187,0,182,172,173,160,156,173,154],
[156,172,158,0,175,166,164,150,164,168],
[158,198,168,165,0,149,161,145,163,169],
[171,173,167,174,191,0,169,159,170,190],
[165,165,180,176,179,171,0,160,163,175],
[164,186,184,190,195,181,180,0,172,176],
[166,178,167,176,177,170,177,168,0,171],
[149,179,186,172,171,150,165,164,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,157,186,157,176,178,167,154,201],
[170,0,175,174,159,165,149,169,162,193],
[183,165,0,187,158,168,163,165,171,174],
[154,166,153,0,149,158,163,171,165,163],
[183,181,182,191,0,179,172,152,180,189],
[164,175,172,182,161,0,168,163,165,196],
[162,191,177,177,168,172,0,162,156,174],
[173,171,175,169,188,177,178,0,181,176],
[186,178,169,175,160,175,184,159,0,186],
[139,147,166,177,151,144,166,164,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,168,163,164,164,163,155,153,165],
[178,0,180,179,171,177,180,168,172,179],
[172,160,0,167,163,178,162,166,151,171],
[177,161,173,0,149,175,165,156,161,173],
[176,169,177,191,0,174,162,161,172,189],
[176,163,162,165,166,0,173,163,166,159],
[177,160,178,175,178,167,0,169,169,186],
[185,172,174,184,179,177,171,0,167,172],
[187,168,189,179,168,174,171,173,0,181],
[175,161,169,167,151,181,154,168,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,158,162,178,152,157,161,139,162],
[170,0,154,166,187,151,161,163,152,180],
[182,186,0,183,210,163,177,181,165,186],
[178,174,157,0,183,140,158,154,148,167],
[162,153,130,157,0,140,142,161,148,143],
[188,189,177,200,200,0,182,197,164,192],
[183,179,163,182,198,158,0,173,173,176],
[179,177,159,186,179,143,167,0,165,184],
[201,188,175,192,192,176,167,175,0,183],
[178,160,154,173,197,148,164,156,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,190,190,181,164,181,165,177,159],
[166,0,170,179,180,170,171,154,153,171],
[150,170,0,165,181,164,154,150,159,167],
[150,161,175,0,178,154,173,158,174,145],
[159,160,159,162,0,156,174,167,170,170],
[176,170,176,186,184,0,182,171,174,181],
[159,169,186,167,166,158,0,156,159,176],
[175,186,190,182,173,169,184,0,195,192],
[163,187,181,166,170,166,181,145,0,165],
[181,169,173,195,170,159,164,148,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,177,166,187,186,164,187,174,167],
[169,0,161,164,167,190,162,164,174,153],
[163,179,0,174,167,199,172,175,172,152],
[174,176,166,0,172,181,178,188,169,167],
[153,173,173,168,0,167,155,158,173,162],
[154,150,141,159,173,0,153,162,152,144],
[176,178,168,162,185,187,0,178,181,173],
[153,176,165,152,182,178,162,0,166,155],
[166,166,168,171,167,188,159,174,0,156],
[173,187,188,173,178,196,167,185,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,143,176,196,176,188,194,189,183],
[137,0,158,154,191,167,177,159,151,164],
[197,182,0,201,208,181,168,175,172,202],
[164,186,139,0,201,161,165,178,187,171],
[144,149,132,139,0,152,165,159,144,159],
[164,173,159,179,188,0,179,171,179,192],
[152,163,172,175,175,161,0,182,155,181],
[146,181,165,162,181,169,158,0,165,172],
[151,189,168,153,196,161,185,175,0,161],
[157,176,138,169,181,148,159,168,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,158,174,197,221,188,197,196,217],
[162,0,171,175,196,198,172,177,177,213],
[182,169,0,202,183,205,171,186,202,212],
[166,165,138,0,171,181,175,178,167,195],
[143,144,157,169,0,183,160,153,174,190],
[119,142,135,159,157,0,172,149,148,147],
[152,168,169,165,180,168,0,155,186,178],
[143,163,154,162,187,191,185,0,195,198],
[144,163,138,173,166,192,154,145,0,189],
[123,127,128,145,150,193,162,142,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,164,166,167,160,153,155,159,158],
[170,0,172,172,164,154,169,163,167,170],
[176,168,0,172,178,163,168,165,169,178],
[174,168,168,0,175,175,169,160,164,171],
[173,176,162,165,0,165,164,170,164,164],
[180,186,177,165,175,0,169,164,165,179],
[187,171,172,171,176,171,0,165,175,171],
[185,177,175,180,170,176,175,0,172,173],
[181,173,171,176,176,175,165,168,0,178],
[182,170,162,169,176,161,169,167,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,170,172,173,184,174,175,171,147],
[187,0,156,165,181,169,183,179,158,173],
[170,184,0,189,184,190,186,187,204,187],
[168,175,151,0,169,179,165,176,158,162],
[167,159,156,171,0,160,164,164,168,172],
[156,171,150,161,180,0,175,161,179,143],
[166,157,154,175,176,165,0,169,169,162],
[165,161,153,164,176,179,171,0,174,154],
[169,182,136,182,172,161,171,166,0,167],
[193,167,153,178,168,197,178,186,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,152,180,175,178,173,179,180,166],
[164,0,175,178,172,167,173,176,178,169],
[188,165,0,198,191,192,165,188,184,186],
[160,162,142,0,163,163,155,162,165,152],
[165,168,149,177,0,170,160,174,172,166],
[162,173,148,177,170,0,161,186,171,176],
[167,167,175,185,180,179,0,180,173,164],
[161,164,152,178,166,154,160,0,166,166],
[160,162,156,175,168,169,167,174,0,164],
[174,171,154,188,174,164,176,174,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,180,167,181,162,153,166,156,167],
[150,0,176,150,178,158,153,170,155,156],
[160,164,0,153,153,152,140,158,160,144],
[173,190,187,0,192,164,163,180,169,177],
[159,162,187,148,0,144,146,155,138,152],
[178,182,188,176,196,0,167,178,167,165],
[187,187,200,177,194,173,0,169,165,168],
[174,170,182,160,185,162,171,0,160,159],
[184,185,180,171,202,173,175,180,0,162],
[173,184,196,163,188,175,172,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,144,153,144,143,137,156,143,141],
[204,0,162,175,170,166,158,178,166,183],
[196,178,0,180,185,199,177,165,169,173],
[187,165,160,0,198,191,144,163,154,150],
[196,170,155,142,0,173,167,182,159,183],
[197,174,141,149,167,0,136,190,178,175],
[203,182,163,196,173,204,0,184,162,213],
[184,162,175,177,158,150,156,0,160,166],
[197,174,171,186,181,162,178,180,0,177],
[199,157,167,190,157,165,127,174,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,160,175,144,155,180,177,182],
[172,0,175,168,177,148,172,174,181,172],
[168,165,0,158,178,156,159,171,191,175],
[180,172,182,0,182,166,151,172,166,190],
[165,163,162,158,0,161,145,175,186,197],
[196,192,184,174,179,0,168,188,185,190],
[185,168,181,189,195,172,0,190,188,194],
[160,166,169,168,165,152,150,0,156,173],
[163,159,149,174,154,155,152,184,0,165],
[158,168,165,150,143,150,146,167,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,163,167,164,153,160,171,170,170],
[178,0,161,174,166,149,154,156,171,167],
[177,179,0,176,165,162,172,168,177,170],
[173,166,164,0,174,172,179,175,170,171],
[176,174,175,166,0,163,179,168,174,167],
[187,191,178,168,177,0,172,181,187,174],
[180,186,168,161,161,168,0,167,162,173],
[169,184,172,165,172,159,173,0,173,175],
[170,169,163,170,166,153,178,167,0,170],
[170,173,170,169,173,166,167,165,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,189,237,204,233,179,231,232,189],
[223,0,177,177,152,194,160,190,220,189],
[151,163,0,142,109,272,141,167,167,162],
[103,163,198,0,177,226,124,151,89,120],
[136,188,231,163,0,246,146,185,136,220],
[107,146,68,114,94,0,178,152,170,135],
[161,180,199,216,194,162,0,188,253,216],
[109,150,173,189,155,188,152,0,150,199],
[108,120,173,251,204,170,87,190,0,175],
[151,151,178,220,120,205,124,141,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,174,175,166,177,172,187,172,190],
[173,0,169,168,188,167,184,188,173,203],
[166,171,0,170,179,170,155,190,187,183],
[165,172,170,0,178,159,169,182,181,191],
[174,152,161,162,0,156,183,180,174,179],
[163,173,170,181,184,0,185,183,177,197],
[168,156,185,171,157,155,0,200,173,193],
[153,152,150,158,160,157,140,0,170,187],
[168,167,153,159,166,163,167,170,0,185],
[150,137,157,149,161,143,147,153,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,159,152,168,171,207,172,191,187],
[168,0,170,153,166,200,184,177,164,171],
[181,170,0,191,170,179,190,186,188,181],
[188,187,149,0,178,169,186,180,186,162],
[172,174,170,162,0,208,170,172,170,148],
[169,140,161,171,132,0,165,152,152,151],
[133,156,150,154,170,175,0,165,155,146],
[168,163,154,160,168,188,175,0,161,162],
[149,176,152,154,170,188,185,179,0,176],
[153,169,159,178,192,189,194,178,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,182,172,173,169,174,150,152,169],
[176,0,171,171,173,172,174,166,167,167],
[158,169,0,158,147,170,175,168,155,177],
[168,169,182,0,168,170,162,170,177,177],
[167,167,193,172,0,180,196,178,184,186],
[171,168,170,170,160,0,179,178,162,184],
[166,166,165,178,144,161,0,171,164,182],
[190,174,172,170,162,162,169,0,158,177],
[188,173,185,163,156,178,176,182,0,173],
[171,173,163,163,154,156,158,163,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,184,177,165,168,180,170,191,172],
[176,0,185,180,172,170,185,182,190,182],
[156,155,0,167,153,163,165,175,171,173],
[163,160,173,0,173,162,177,175,171,186],
[175,168,187,167,0,176,184,182,174,181],
[172,170,177,178,164,0,176,176,180,172],
[160,155,175,163,156,164,0,163,171,171],
[170,158,165,165,158,164,177,0,180,181],
[149,150,169,169,166,160,169,160,0,180],
[168,158,167,154,159,168,169,159,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,181,162,189,157,175,172,163,181],
[168,0,170,161,181,158,165,173,178,184],
[159,170,0,158,185,171,170,178,183,178],
[178,179,182,0,188,161,180,165,171,168],
[151,159,155,152,0,156,157,163,168,159],
[183,182,169,179,184,0,172,175,191,189],
[165,175,170,160,183,168,0,159,172,170],
[168,167,162,175,177,165,181,0,182,178],
[177,162,157,169,172,149,168,158,0,179],
[159,156,162,172,181,151,170,162,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,213,208,190,200,177,193,175,169],
[144,0,168,175,166,186,149,180,161,165],
[127,172,0,187,177,179,154,179,143,161],
[132,165,153,0,174,180,144,163,165,178],
[150,174,163,166,0,195,165,175,178,176],
[140,154,161,160,145,0,151,132,159,143],
[163,191,186,196,175,189,0,177,166,174],
[147,160,161,177,165,208,163,0,175,174],
[165,179,197,175,162,181,174,165,0,171],
[171,175,179,162,164,197,166,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,181,161,169,169,179,188,171],
[167,0,171,174,161,176,172,165,184,178],
[159,169,0,179,159,172,173,171,183,164],
[159,166,161,0,158,178,160,165,161,171],
[179,179,181,182,0,189,177,171,171,170],
[171,164,168,162,151,0,160,172,171,161],
[171,168,167,180,163,180,0,181,171,173],
[161,175,169,175,169,168,159,0,170,172],
[152,156,157,179,169,169,169,170,0,176],
[169,162,176,169,170,179,167,168,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,176,160,188,271,181,210,339,172],
[106,0,144,180,176,246,147,230,230,172],
[164,196,0,204,205,271,144,247,340,229],
[180,160,136,0,185,250,148,223,324,139],
[152,164,135,155,0,197,193,149,184,168],
[69,94,69,90,143,0,111,193,192,168],
[159,193,196,192,147,229,0,193,286,177],
[130,110,93,117,191,147,147,0,200,138],
[1,110,0,16,156,148,54,140,0,49],
[168,168,111,201,172,172,163,202,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,181,179,162,186,182,169,181,171],
[171,0,181,165,175,177,169,159,182,173],
[159,159,0,158,157,167,154,144,167,149],
[161,175,182,0,168,169,166,147,165,148],
[178,165,183,172,0,177,181,170,170,167],
[154,163,173,171,163,0,169,151,162,148],
[158,171,186,174,159,171,0,168,178,158],
[171,181,196,193,170,189,172,0,182,179],
[159,158,173,175,170,178,162,158,0,158],
[169,167,191,192,173,192,182,161,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,176,172,167,150,166,161,158,163],
[173,0,174,171,169,185,192,158,157,157],
[164,166,0,164,170,172,198,163,173,156],
[168,169,176,0,190,156,176,171,179,162],
[173,171,170,150,0,160,185,150,156,164],
[190,155,168,184,180,0,195,177,169,156],
[174,148,142,164,155,145,0,145,165,151],
[179,182,177,169,190,163,195,0,182,176],
[182,183,167,161,184,171,175,158,0,157],
[177,183,184,178,176,184,189,164,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,190,174,171,166,185,171,173],
[171,0,170,164,167,179,160,183,161,171],
[172,170,0,165,166,186,163,176,167,164],
[150,176,175,0,173,175,170,167,181,165],
[166,173,174,167,0,176,161,180,167,168],
[169,161,154,165,164,0,146,178,164,172],
[174,180,177,170,179,194,0,181,174,183],
[155,157,164,173,160,162,159,0,164,161],
[169,179,173,159,173,176,166,176,0,177],
[167,169,176,175,172,168,157,179,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,195,177,167,162,185,179,175,173],
[164,0,180,183,164,166,175,178,179,164],
[145,160,0,159,152,137,165,164,158,136],
[163,157,181,0,172,166,158,172,167,159],
[173,176,188,168,0,160,182,175,175,172],
[178,174,203,174,180,0,186,180,182,169],
[155,165,175,182,158,154,0,176,164,161],
[161,162,176,168,165,160,164,0,167,156],
[165,161,182,173,165,158,176,173,0,167],
[167,176,204,181,168,171,179,184,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,183,180,191,162,174,180,163,188],
[166,0,168,176,174,164,164,171,168,191],
[157,172,0,173,179,172,175,189,167,181],
[160,164,167,0,185,167,164,168,166,183],
[149,166,161,155,0,157,156,170,158,175],
[178,176,168,173,183,0,175,180,177,189],
[166,176,165,176,184,165,0,178,171,178],
[160,169,151,172,170,160,162,0,160,174],
[177,172,173,174,182,163,169,180,0,185],
[152,149,159,157,165,151,162,166,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,156,196,202,185,167,157,183,183],
[164,0,156,165,160,155,158,148,168,171],
[184,184,0,196,190,167,176,176,180,201],
[144,175,144,0,175,151,160,145,170,161],
[138,180,150,165,0,165,162,149,170,171],
[155,185,173,189,175,0,177,160,177,184],
[173,182,164,180,178,163,0,152,183,183],
[183,192,164,195,191,180,188,0,188,177],
[157,172,160,170,170,163,157,152,0,166],
[157,169,139,179,169,156,157,163,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,155,186,165,149,178,153,159,168],
[164,0,181,177,170,174,197,143,160,167],
[185,159,0,186,181,173,210,159,175,153],
[154,163,154,0,182,163,191,146,134,141],
[175,170,159,158,0,166,168,145,141,157],
[191,166,167,177,174,0,199,135,170,166],
[162,143,130,149,172,141,0,147,138,152],
[187,197,181,194,195,205,193,0,172,170],
[181,180,165,206,199,170,202,168,0,174],
[172,173,187,199,183,174,188,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,170,169,153,172,165,165,165],
[170,0,185,174,202,173,186,188,179,182],
[160,155,0,144,146,144,165,151,162,159],
[170,166,196,0,168,170,175,172,162,172],
[171,138,194,172,0,170,189,159,157,175],
[187,167,196,170,170,0,189,178,169,174],
[168,154,175,165,151,151,0,176,164,164],
[175,152,189,168,181,162,164,0,157,172],
[175,161,178,178,183,171,176,183,0,187],
[175,158,181,168,165,166,176,168,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,184,186,167,169,171,163,149,175],
[156,0,195,143,212,164,194,182,165,177],
[156,145,0,144,175,158,170,159,157,148],
[154,197,196,0,190,192,193,178,147,194],
[173,128,165,150,0,163,164,168,137,142],
[171,176,182,148,177,0,181,184,170,190],
[169,146,170,147,176,159,0,172,133,177],
[177,158,181,162,172,156,168,0,147,177],
[191,175,183,193,203,170,207,193,0,217],
[165,163,192,146,198,150,163,163,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,156,164,160,174,150,163,174,158],
[182,0,191,181,172,193,174,189,171,162],
[184,149,0,162,151,166,166,169,170,180],
[176,159,178,0,166,177,174,173,171,176],
[180,168,189,174,0,186,169,170,180,171],
[166,147,174,163,154,0,166,161,156,161],
[190,166,174,166,171,174,0,173,178,171],
[177,151,171,167,170,179,167,0,163,167],
[166,169,170,169,160,184,162,177,0,168],
[182,178,160,164,169,179,169,173,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,189,154,145,176,172,143,142,209],
[126,0,134,129,132,110,111,131,151,180],
[151,206,0,198,199,152,161,173,205,202],
[186,211,142,0,130,146,119,133,120,201],
[195,208,141,210,0,189,170,162,156,198],
[164,230,188,194,151,0,142,152,182,223],
[168,229,179,221,170,198,0,171,200,236],
[197,209,167,207,178,188,169,0,204,209],
[198,189,135,220,184,158,140,136,0,176],
[131,160,138,139,142,117,104,131,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,179,192,179,163,183,183,161,182],
[164,0,175,171,167,169,163,177,178,170],
[161,165,0,186,180,176,173,167,169,183],
[148,169,154,0,170,160,149,161,159,174],
[161,173,160,170,0,150,163,164,166,170],
[177,171,164,180,190,0,173,174,171,176],
[157,177,167,191,177,167,0,166,164,182],
[157,163,173,179,176,166,174,0,165,179],
[179,162,171,181,174,169,176,175,0,180],
[158,170,157,166,170,164,158,161,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,147,176,170,160,168,176,164,163],
[181,0,173,185,168,187,170,174,164,173],
[193,167,0,183,179,167,177,180,170,157],
[164,155,157,0,173,163,171,184,155,173],
[170,172,161,167,0,167,156,167,146,164],
[180,153,173,177,173,0,187,179,169,181],
[172,170,163,169,184,153,0,176,172,160],
[164,166,160,156,173,161,164,0,156,159],
[176,176,170,185,194,171,168,184,0,170],
[177,167,183,167,176,159,180,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,176,189,180,186,182,159,190,159],
[176,0,193,200,193,169,157,172,207,204],
[164,147,0,184,194,165,170,171,155,170],
[151,140,156,0,194,166,155,163,173,165],
[160,147,146,146,0,150,143,159,172,159],
[154,171,175,174,190,0,146,179,156,165],
[158,183,170,185,197,194,0,189,197,198],
[181,168,169,177,181,161,151,0,189,189],
[150,133,185,167,168,184,143,151,0,171],
[181,136,170,175,181,175,142,151,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,135,142,181,162,157,145,180,150],
[214,0,185,163,202,189,179,173,208,183],
[205,155,0,174,174,184,180,155,209,168],
[198,177,166,0,193,193,189,165,197,171],
[159,138,166,147,0,171,160,154,172,159],
[178,151,156,147,169,0,162,146,177,163],
[183,161,160,151,180,178,0,146,197,153],
[195,167,185,175,186,194,194,0,197,164],
[160,132,131,143,168,163,143,143,0,140],
[190,157,172,169,181,177,187,176,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,175,164,170,183,147,180,143,174],
[176,0,187,181,180,188,163,179,169,188],
[165,153,0,158,146,171,136,158,149,169],
[176,159,182,0,174,162,170,188,175,198],
[170,160,194,166,0,173,152,151,149,181],
[157,152,169,178,167,0,169,163,142,170],
[193,177,204,170,188,171,0,176,161,194],
[160,161,182,152,189,177,164,0,165,186],
[197,171,191,165,191,198,179,175,0,203],
[166,152,171,142,159,170,146,154,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,165,155,153,156,149,150,171,149],
[170,0,165,155,171,152,154,142,166,167],
[175,175,0,168,177,178,169,163,171,179],
[185,185,172,0,176,169,175,155,175,192],
[187,169,163,164,0,162,154,158,173,175],
[184,188,162,171,178,0,171,177,183,180],
[191,186,171,165,186,169,0,164,174,178],
[190,198,177,185,182,163,176,0,188,180],
[169,174,169,165,167,157,166,152,0,169],
[191,173,161,148,165,160,162,160,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,180,183,191,180,188,190,185,177],
[170,0,205,178,189,179,196,184,174,177],
[160,135,0,166,152,168,182,163,171,158],
[157,162,174,0,180,177,165,163,155,169],
[149,151,188,160,0,175,175,164,156,168],
[160,161,172,163,165,0,176,170,163,163],
[152,144,158,175,165,164,0,177,163,166],
[150,156,177,177,176,170,163,0,169,155],
[155,166,169,185,184,177,177,171,0,169],
[163,163,182,171,172,177,174,185,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,179,172,168,168,168,173,160,172],
[164,0,165,179,169,150,155,172,154,166],
[161,175,0,169,169,167,164,163,160,175],
[168,161,171,0,161,170,166,168,170,162],
[172,171,171,179,0,148,161,174,147,158],
[172,190,173,170,192,0,173,175,169,167],
[172,185,176,174,179,167,0,172,160,168],
[167,168,177,172,166,165,168,0,168,151],
[180,186,180,170,193,171,180,172,0,165],
[168,174,165,178,182,173,172,189,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,157,162,187,157,131,170,129,173],
[183,0,170,163,183,160,165,191,174,195],
[183,170,0,176,216,145,168,193,164,201],
[178,177,164,0,186,172,173,202,158,189],
[153,157,124,154,0,141,128,155,144,170],
[183,180,195,168,199,0,185,197,169,208],
[209,175,172,167,212,155,0,191,179,211],
[170,149,147,138,185,143,149,0,137,183],
[211,166,176,182,196,171,161,203,0,180],
[167,145,139,151,170,132,129,157,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,161,140,130,163,144,135,124,154],
[204,0,200,205,186,228,196,197,161,168],
[179,140,0,140,161,147,187,159,126,155],
[200,135,200,0,165,187,164,149,171,169],
[210,154,179,175,0,167,175,174,135,180],
[177,112,193,153,173,0,133,141,133,144],
[196,144,153,176,165,207,0,166,153,155],
[205,143,181,191,166,199,174,0,153,162],
[216,179,214,169,205,207,187,187,0,180],
[186,172,185,171,160,196,185,178,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,169,171,184,166,171,165,174,182],
[163,0,161,154,171,160,160,165,158,163],
[171,179,0,168,164,162,169,180,160,182],
[169,186,172,0,181,181,170,171,163,191],
[156,169,176,159,0,164,162,163,153,180],
[174,180,178,159,176,0,175,159,149,173],
[169,180,171,170,178,165,0,169,159,182],
[175,175,160,169,177,181,171,0,167,182],
[166,182,180,177,187,191,181,173,0,189],
[158,177,158,149,160,167,158,158,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,160,214,172,164,158,207,184,198],
[146,0,189,221,132,206,157,181,148,189],
[180,151,0,206,162,226,195,189,206,202],
[126,119,134,0,145,165,132,196,162,168],
[168,208,178,195,0,208,196,204,201,205],
[176,134,114,175,132,0,159,177,170,169],
[182,183,145,208,144,181,0,195,161,196],
[133,159,151,144,136,163,145,0,139,193],
[156,192,134,178,139,170,179,201,0,186],
[142,151,138,172,135,171,144,147,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,170,150,169,178,161,163,181,165],
[182,0,168,160,161,180,180,172,189,171],
[170,172,0,157,165,170,171,179,182,152],
[190,180,183,0,173,187,185,169,191,173],
[171,179,175,167,0,183,180,165,184,169],
[162,160,170,153,157,0,163,156,179,157],
[179,160,169,155,160,177,0,164,172,167],
[177,168,161,171,175,184,176,0,190,178],
[159,151,158,149,156,161,168,150,0,144],
[175,169,188,167,171,183,173,162,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,205,200,153,206,194,217,229,224],
[129,0,168,182,120,163,133,190,169,184],
[135,172,0,102,132,104,130,115,155,104],
[140,158,238,0,197,184,204,208,198,176],
[187,220,208,143,0,187,173,185,186,179],
[134,177,236,156,153,0,154,172,154,103],
[146,207,210,136,167,186,0,208,195,133],
[123,150,225,132,155,168,132,0,233,153],
[111,171,185,142,154,186,145,107,0,156],
[116,156,236,164,161,237,207,187,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,165,173,170,149,187,168,191,155],
[159,0,169,166,145,153,168,163,189,145],
[175,171,0,174,161,155,194,175,199,175],
[167,174,166,0,167,203,177,187,181,183],
[170,195,179,173,0,160,191,169,194,172],
[191,187,185,137,180,0,174,171,170,171],
[153,172,146,163,149,166,0,148,186,155],
[172,177,165,153,171,169,192,0,189,184],
[149,151,141,159,146,170,154,151,0,126],
[185,195,165,157,168,169,185,156,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,162,158,136,141,178,174,151,167],
[200,0,188,169,188,181,220,177,165,174],
[178,152,0,156,159,184,175,145,121,197],
[182,171,184,0,183,144,180,185,150,181],
[204,152,181,157,0,139,167,171,129,154],
[199,159,156,196,201,0,174,180,143,209],
[162,120,165,160,173,166,0,147,153,165],
[166,163,195,155,169,160,193,0,122,175],
[189,175,219,190,211,197,187,218,0,163],
[173,166,143,159,186,131,175,165,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,128,125,160,179,162,149,151,167],
[167,0,143,139,154,162,166,156,156,163],
[212,197,0,173,192,169,189,178,152,150],
[215,201,167,0,198,147,171,170,157,166],
[180,186,148,142,0,175,137,169,149,148],
[161,178,171,193,165,0,172,171,147,156],
[178,174,151,169,203,168,0,188,159,170],
[191,184,162,170,171,169,152,0,148,169],
[189,184,188,183,191,193,181,192,0,170],
[173,177,190,174,192,184,170,171,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,163,173,182,152,168,190,154,167],
[183,0,161,176,189,158,178,181,166,169],
[177,179,0,191,196,164,183,201,178,186],
[167,164,149,0,162,152,181,195,154,146],
[158,151,144,178,0,159,158,178,161,160],
[188,182,176,188,181,0,178,183,172,166],
[172,162,157,159,182,162,0,181,168,168],
[150,159,139,145,162,157,159,0,142,169],
[186,174,162,186,179,168,172,198,0,167],
[173,171,154,194,180,174,172,171,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,177,167,176,164,171,168,167,163],
[167,0,168,165,160,158,159,143,145,147],
[163,172,0,156,173,154,162,149,156,163],
[173,175,184,0,176,162,148,147,150,156],
[164,180,167,164,0,166,169,144,151,164],
[176,182,186,178,174,0,170,175,164,177],
[169,181,178,192,171,170,0,148,163,166],
[172,197,191,193,196,165,192,0,182,182],
[173,195,184,190,189,176,177,158,0,183],
[177,193,177,184,176,163,174,158,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,165,190,164,163,165,176,173,166],
[170,0,174,185,171,178,174,187,177,166],
[175,166,0,171,153,151,168,165,169,164],
[150,155,169,0,158,143,146,154,168,151],
[176,169,187,182,0,154,166,183,174,170],
[177,162,189,197,186,0,190,182,186,189],
[175,166,172,194,174,150,0,156,179,170],
[164,153,175,186,157,158,184,0,169,172],
[167,163,171,172,166,154,161,171,0,180],
[174,174,176,189,170,151,170,168,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,146,166,160,164,178,169,135,186],
[186,0,150,175,156,194,179,171,169,183],
[194,190,0,193,156,194,199,174,174,185],
[174,165,147,0,142,174,165,170,151,170],
[180,184,184,198,0,195,157,181,164,191],
[176,146,146,166,145,0,179,149,185,166],
[162,161,141,175,183,161,0,180,148,172],
[171,169,166,170,159,191,160,0,159,195],
[205,171,166,189,176,155,192,181,0,172],
[154,157,155,170,149,174,168,145,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,174,167,144,173,156,143,162,187],
[182,0,166,195,156,189,178,180,201,203],
[166,174,0,165,171,193,152,149,172,177],
[173,145,175,0,150,199,212,168,195,216],
[196,184,169,190,0,167,190,160,193,203],
[167,151,147,141,173,0,146,136,156,184],
[184,162,188,128,150,194,0,173,182,192],
[197,160,191,172,180,204,167,0,175,203],
[178,139,168,145,147,184,158,165,0,178],
[153,137,163,124,137,156,148,137,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,188,165,178,185,154,182,153],
[173,0,167,178,151,161,188,153,178,156],
[174,173,0,195,190,186,165,187,200,179],
[152,162,145,0,152,173,160,155,168,157],
[175,189,150,188,0,184,160,174,177,168],
[162,179,154,167,156,0,175,163,183,165],
[155,152,175,180,180,165,0,149,187,158],
[186,187,153,185,166,177,191,0,172,177],
[158,162,140,172,163,157,153,168,0,150],
[187,184,161,183,172,175,182,163,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,155,157,162,164,174,162,167,174],
[170,0,168,158,151,171,174,153,165,166],
[185,172,0,170,176,170,184,165,188,189],
[183,182,170,0,171,178,201,154,186,180],
[178,189,164,169,0,175,194,172,188,177],
[176,169,170,162,165,0,181,164,174,175],
[166,166,156,139,146,159,0,149,163,164],
[178,187,175,186,168,176,191,0,194,187],
[173,175,152,154,152,166,177,146,0,172],
[166,174,151,160,163,165,176,153,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,170,164,171,167,160,172,161,165],
[174,0,170,163,161,153,163,184,168,164],
[170,170,0,168,162,174,176,182,159,165],
[176,177,172,0,175,170,168,178,168,164],
[169,179,178,165,0,155,166,169,169,162],
[173,187,166,170,185,0,169,175,161,169],
[180,177,164,172,174,171,0,176,169,170],
[168,156,158,162,171,165,164,0,160,157],
[179,172,181,172,171,179,171,180,0,166],
[175,176,175,176,178,171,170,183,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,151,154,153,163,150,164,177,169],
[163,0,164,143,142,137,153,149,173,154],
[189,176,0,174,146,163,173,158,180,189],
[186,197,166,0,169,166,161,182,173,173],
[187,198,194,171,0,193,166,164,202,180],
[177,203,177,174,147,0,168,181,181,166],
[190,187,167,179,174,172,0,176,192,181],
[176,191,182,158,176,159,164,0,194,175],
[163,167,160,167,138,159,148,146,0,169],
[171,186,151,167,160,174,159,165,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,156,159,164,160,166,171,172],
[165,0,175,158,161,162,171,153,176,170],
[162,165,0,153,156,161,160,164,158,163],
[184,182,187,0,167,183,171,179,187,176],
[181,179,184,173,0,169,177,168,182,174],
[176,178,179,157,171,0,156,164,175,168],
[180,169,180,169,163,184,0,170,179,179],
[174,187,176,161,172,176,170,0,171,180],
[169,164,182,153,158,165,161,169,0,167],
[168,170,177,164,166,172,161,160,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,179,163,182,164,188,190,193],
[177,0,171,178,160,187,170,196,187,187],
[168,169,0,174,162,196,167,183,185,191],
[161,162,166,0,170,195,168,186,175,187],
[177,180,178,170,0,193,178,187,178,183],
[158,153,144,145,147,0,149,169,166,161],
[176,170,173,172,162,191,0,192,174,183],
[152,144,157,154,153,171,148,0,164,175],
[150,153,155,165,162,174,166,176,0,176],
[147,153,149,153,157,179,157,165,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,197,132,178,162,187,171,163,165],
[182,0,210,129,170,198,179,196,200,155],
[143,130,0,137,147,124,171,134,156,167],
[208,211,203,0,207,204,206,183,205,161],
[162,170,193,133,0,171,182,164,187,147],
[178,142,216,136,169,0,183,153,165,156],
[153,161,169,134,158,157,0,171,177,162],
[169,144,206,157,176,187,169,0,178,172],
[177,140,184,135,153,175,163,162,0,169],
[175,185,173,179,193,184,178,168,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,164,148,163,167,169,154,150,179],
[178,0,163,160,172,159,178,128,160,161],
[176,177,0,174,185,178,188,151,146,190],
[192,180,166,0,187,188,210,170,175,200],
[177,168,155,153,0,159,174,164,154,169],
[173,181,162,152,181,0,188,159,150,203],
[171,162,152,130,166,152,0,151,142,183],
[186,212,189,170,176,181,189,0,191,176],
[190,180,194,165,186,190,198,149,0,210],
[161,179,150,140,171,137,157,164,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,119,192,183,176,187,199,196,173],
[142,0,125,173,147,189,134,174,193,154],
[221,215,0,211,178,189,168,199,218,200],
[148,167,129,0,165,161,120,185,207,180],
[157,193,162,175,0,184,176,155,203,200],
[164,151,151,179,156,0,147,151,200,184],
[153,206,172,220,164,193,0,180,212,195],
[141,166,141,155,185,189,160,0,182,185],
[144,147,122,133,137,140,128,158,0,181],
[167,186,140,160,140,156,145,155,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,152,156,158,151,162,154,157,163],
[178,0,170,185,175,168,167,171,178,173],
[188,170,0,175,174,185,179,166,169,166],
[184,155,165,0,177,189,168,160,156,179],
[182,165,166,163,0,175,175,166,172,174],
[189,172,155,151,165,0,160,146,174,169],
[178,173,161,172,165,180,0,155,157,171],
[186,169,174,180,174,194,185,0,172,180],
[183,162,171,184,168,166,183,168,0,160],
[177,167,174,161,166,171,169,160,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,177,168,176,194,146,181,165,154],
[191,0,202,202,192,218,193,213,166,202],
[163,138,0,150,166,194,138,158,155,162],
[172,138,190,0,186,199,152,184,170,150],
[164,148,174,154,0,171,141,181,164,162],
[146,122,146,141,169,0,154,164,134,158],
[194,147,202,188,199,186,0,189,156,193],
[159,127,182,156,159,176,151,0,142,137],
[175,174,185,170,176,206,184,198,0,185],
[186,138,178,190,178,182,147,203,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,158,160,202,185,174,169,123,150],
[163,0,166,187,212,169,172,174,175,160],
[182,174,0,165,201,170,188,175,168,155],
[180,153,175,0,201,163,174,172,172,127],
[138,128,139,139,0,126,163,133,136,132],
[155,171,170,177,214,0,197,140,139,140],
[166,168,152,166,177,143,0,154,144,139],
[171,166,165,168,207,200,186,0,146,150],
[217,165,172,168,204,201,196,194,0,172],
[190,180,185,213,208,200,201,190,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,178,181,155,155,194,171,183,174],
[156,0,156,181,166,176,205,153,176,180],
[162,184,0,169,177,200,205,180,172,186],
[159,159,171,0,150,157,180,136,129,151],
[185,174,163,190,0,186,189,188,172,188],
[185,164,140,183,154,0,178,180,144,159],
[146,135,135,160,151,162,0,164,138,160],
[169,187,160,204,152,160,176,0,182,187],
[157,164,168,211,168,196,202,158,0,178],
[166,160,154,189,152,181,180,153,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,164,156,169,152,149,160,164],
[171,0,165,178,160,170,159,172,171,162],
[174,175,0,172,165,178,168,148,163,172],
[176,162,168,0,165,169,169,160,154,162],
[184,180,175,175,0,172,172,170,160,167],
[171,170,162,171,168,0,154,157,152,155],
[188,181,172,171,168,186,0,166,181,171],
[191,168,192,180,170,183,174,0,177,178],
[180,169,177,186,180,188,159,163,0,168],
[176,178,168,178,173,185,169,162,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,176,168,170,183,167,172,167,165],
[177,0,183,173,167,183,175,161,173,178],
[164,157,0,157,160,170,165,155,155,156],
[172,167,183,0,173,181,160,159,166,168],
[170,173,180,167,0,179,181,172,164,169],
[157,157,170,159,161,0,163,158,166,158],
[173,165,175,180,159,177,0,166,172,169],
[168,179,185,181,168,182,174,0,173,165],
[173,167,185,174,176,174,168,167,0,175],
[175,162,184,172,171,182,171,175,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,169,169,161,165,149,173,166,166],
[171,0,168,180,170,170,166,163,164,177],
[171,172,0,186,172,171,155,157,168,167],
[171,160,154,0,166,156,156,164,154,167],
[179,170,168,174,0,173,176,189,167,189],
[175,170,169,184,167,0,169,169,174,182],
[191,174,185,184,164,171,0,181,160,168],
[167,177,183,176,151,171,159,0,173,176],
[174,176,172,186,173,166,180,167,0,174],
[174,163,173,173,151,158,172,164,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,184,158,186,197,167,167,175,164],
[134,0,151,145,146,149,152,143,130,145],
[156,189,0,169,172,168,163,172,147,158],
[182,195,171,0,194,167,170,170,165,166],
[154,194,168,146,0,173,159,159,150,155],
[143,191,172,173,167,0,173,167,156,164],
[173,188,177,170,181,167,0,165,164,160],
[173,197,168,170,181,173,175,0,158,187],
[165,210,193,175,190,184,176,182,0,186],
[176,195,182,174,185,176,180,153,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,164,175,148,182,175,166,158,180],
[204,0,171,206,185,195,201,198,161,208],
[176,169,0,193,192,201,211,184,177,190],
[165,134,147,0,176,174,199,171,146,180],
[192,155,148,164,0,181,182,177,169,183],
[158,145,139,166,159,0,190,175,141,175],
[165,139,129,141,158,150,0,162,129,168],
[174,142,156,169,163,165,178,0,155,182],
[182,179,163,194,171,199,211,185,0,197],
[160,132,150,160,157,165,172,158,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,157,173,166,188,170,161,169,182],
[175,0,153,174,184,182,176,182,173,182],
[183,187,0,171,171,186,165,163,177,180],
[167,166,169,0,178,184,166,168,174,184],
[174,156,169,162,0,170,164,173,171,165],
[152,158,154,156,170,0,170,157,169,162],
[170,164,175,174,176,170,0,163,185,174],
[179,158,177,172,167,183,177,0,178,173],
[171,167,163,166,169,171,155,162,0,168],
[158,158,160,156,175,178,166,167,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,183,169,172,165,155,167,176,168],
[171,0,174,169,172,162,166,164,179,171],
[157,166,0,158,166,161,154,158,164,166],
[171,171,182,0,172,168,166,173,170,176],
[168,168,174,168,0,166,162,165,175,176],
[175,178,179,172,174,0,173,167,187,187],
[185,174,186,174,178,167,0,171,184,189],
[173,176,182,167,175,173,169,0,173,171],
[164,161,176,170,165,153,156,167,0,171],
[172,169,174,164,164,153,151,169,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,172,175,166,181,180,187,172],
[174,0,164,167,170,168,178,175,183,173],
[174,176,0,191,182,170,178,177,177,168],
[168,173,149,0,174,168,169,160,185,166],
[165,170,158,166,0,162,167,177,176,167],
[174,172,170,172,178,0,179,169,180,167],
[159,162,162,171,173,161,0,166,178,170],
[160,165,163,180,163,171,174,0,181,165],
[153,157,163,155,164,160,162,159,0,149],
[168,167,172,174,173,173,170,175,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,187,172,158,169,166,185,194,141],
[175,0,194,167,159,174,186,162,192,164],
[153,146,0,159,144,143,153,153,162,141],
[168,173,181,0,165,186,177,168,188,171],
[182,181,196,175,0,181,190,164,195,184],
[171,166,197,154,159,0,158,161,181,145],
[174,154,187,163,150,182,0,154,179,169],
[155,178,187,172,176,179,186,0,190,158],
[146,148,178,152,145,159,161,150,0,153],
[199,176,199,169,156,195,171,182,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,163,157,158,157,173,161,167,166],
[165,0,174,172,161,163,156,160,160,182],
[177,166,0,178,169,157,172,159,165,179],
[183,168,162,0,170,174,186,170,189,187],
[182,179,171,170,0,168,164,160,177,168],
[183,177,183,166,172,0,175,165,161,181],
[167,184,168,154,176,165,0,169,166,172],
[179,180,181,170,180,175,171,0,181,171],
[173,180,175,151,163,179,174,159,0,177],
[174,158,161,153,172,159,168,169,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,175,169,196,172,186,186,192,188],
[159,0,162,155,172,164,166,172,158,174],
[165,178,0,177,182,172,175,184,175,186],
[171,185,163,0,190,179,186,174,179,179],
[144,168,158,150,0,148,172,167,156,172],
[168,176,168,161,192,0,183,190,169,191],
[154,174,165,154,168,157,0,174,160,170],
[154,168,156,166,173,150,166,0,152,176],
[148,182,165,161,184,171,180,188,0,186],
[152,166,154,161,168,149,170,164,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,166,169,170,150,167,165,176,180],
[172,0,172,168,177,174,171,161,174,180],
[174,168,0,166,177,175,163,181,172,181],
[171,172,174,0,173,170,176,158,168,172],
[170,163,163,167,0,171,170,164,174,174],
[190,166,165,170,169,0,170,172,183,177],
[173,169,177,164,170,170,0,167,160,181],
[175,179,159,182,176,168,173,0,173,180],
[164,166,168,172,166,157,180,167,0,176],
[160,160,159,168,166,163,159,160,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,187,179,172,173,199,181,163,190],
[137,0,154,163,130,149,169,148,152,157],
[153,186,0,168,139,159,167,167,158,170],
[161,177,172,0,153,163,164,179,163,173],
[168,210,201,187,0,192,187,178,177,171],
[167,191,181,177,148,0,180,162,154,178],
[141,171,173,176,153,160,0,157,153,154],
[159,192,173,161,162,178,183,0,173,181],
[177,188,182,177,163,186,187,167,0,178],
[150,183,170,167,169,162,186,159,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,194,198,170,176,171,177,170,180],
[153,0,164,184,155,169,155,161,164,177],
[146,176,0,174,152,164,159,161,145,171],
[142,156,166,0,134,157,152,160,141,166],
[170,185,188,206,0,177,177,178,174,187],
[164,171,176,183,163,0,163,165,166,178],
[169,185,181,188,163,177,0,181,158,182],
[163,179,179,180,162,175,159,0,163,163],
[170,176,195,199,166,174,182,177,0,193],
[160,163,169,174,153,162,158,177,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,173,171,160,162,147,150,167,153],
[186,0,168,172,165,165,168,160,173,163],
[167,172,0,159,182,176,155,169,162,176],
[169,168,181,0,167,154,141,159,164,158],
[180,175,158,173,0,196,160,162,178,172],
[178,175,164,186,144,0,152,150,177,159],
[193,172,185,199,180,188,0,186,173,167],
[190,180,171,181,178,190,154,0,190,184],
[173,167,178,176,162,163,167,150,0,153],
[187,177,164,182,168,181,173,156,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,159,159,175,153,180,166,177,175],
[170,0,160,166,166,178,168,165,172,167],
[181,180,0,178,188,169,180,185,178,190],
[181,174,162,0,172,173,182,169,175,182],
[165,174,152,168,0,164,165,158,171,167],
[187,162,171,167,176,0,171,179,174,179],
[160,172,160,158,175,169,0,169,163,179],
[174,175,155,171,182,161,171,0,167,175],
[163,168,162,165,169,166,177,173,0,171],
[165,173,150,158,173,161,161,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,193,204,188,187,211,169,236,221],
[108,0,192,166,190,144,193,131,190,178],
[147,148,0,167,135,129,171,124,198,163],
[136,174,173,0,173,171,188,136,179,178],
[152,150,205,167,0,186,168,183,195,240],
[153,196,211,169,154,0,207,166,194,224],
[129,147,169,152,172,133,0,105,198,168],
[171,209,216,204,157,174,235,0,208,175],
[104,150,142,161,145,146,142,132,0,138],
[119,162,177,162,100,116,172,165,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,161,187,176,170,148,185,165,167],
[176,0,185,182,181,186,154,181,181,177],
[179,155,0,141,148,153,158,176,156,162],
[153,158,199,0,170,169,172,189,159,187],
[164,159,192,170,0,196,173,181,179,166],
[170,154,187,171,144,0,165,168,172,167],
[192,186,182,168,167,175,0,183,172,162],
[155,159,164,151,159,172,157,0,173,167],
[175,159,184,181,161,168,168,167,0,159],
[173,163,178,153,174,173,178,173,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,192,170,163,167,173,169,189,162],
[174,0,183,171,177,180,150,174,188,169],
[148,157,0,158,164,164,156,160,171,142],
[170,169,182,0,167,191,164,163,175,149],
[177,163,176,173,0,149,152,162,156,129],
[173,160,176,149,191,0,137,148,158,149],
[167,190,184,176,188,203,0,183,185,178],
[171,166,180,177,178,192,157,0,179,155],
[151,152,169,165,184,182,155,161,0,146],
[178,171,198,191,211,191,162,185,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,175,183,168,153,169,161,179,161],
[155,0,156,171,152,136,170,150,173,157],
[165,184,0,186,156,154,180,152,176,161],
[157,169,154,0,145,152,166,156,169,140],
[172,188,184,195,0,171,181,172,167,167],
[187,204,186,188,169,0,177,180,198,169],
[171,170,160,174,159,163,0,161,177,154],
[179,190,188,184,168,160,179,0,177,172],
[161,167,164,171,173,142,163,163,0,159],
[179,183,179,200,173,171,186,168,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,146,147,172,149,143,135,144,154],
[177,0,194,177,195,170,161,180,170,154],
[194,146,0,168,175,163,149,167,165,169],
[193,163,172,0,175,172,163,169,158,163],
[168,145,165,165,0,165,178,167,164,169],
[191,170,177,168,175,0,164,163,182,162],
[197,179,191,177,162,176,0,171,184,181],
[205,160,173,171,173,177,169,0,167,173],
[196,170,175,182,176,158,156,173,0,151],
[186,186,171,177,171,178,159,167,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,180,170,166,178,177,175,170,177],
[166,0,167,157,159,170,167,161,169,164],
[160,173,0,151,155,167,170,158,154,157],
[170,183,189,0,170,181,185,178,167,170],
[174,181,185,170,0,188,179,185,167,182],
[162,170,173,159,152,0,171,164,151,160],
[163,173,170,155,161,169,0,160,161,175],
[165,179,182,162,155,176,180,0,157,170],
[170,171,186,173,173,189,179,183,0,180],
[163,176,183,170,158,180,165,170,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,172,165,191,158,171,191,150,155],
[147,0,157,158,170,180,170,157,168,155],
[168,183,0,172,185,190,195,187,181,170],
[175,182,168,0,182,163,171,175,164,154],
[149,170,155,158,0,183,165,175,148,157],
[182,160,150,177,157,0,170,195,161,154],
[169,170,145,169,175,170,0,171,165,163],
[149,183,153,165,165,145,169,0,143,156],
[190,172,159,176,192,179,175,197,0,178],
[185,185,170,186,183,186,177,184,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,166,154,159,156,147,148,168,154],
[189,0,189,170,192,172,178,170,174,179],
[174,151,0,163,186,173,171,168,174,149],
[186,170,177,0,165,158,159,172,163,146],
[181,148,154,175,0,163,147,157,156,153],
[184,168,167,182,177,0,180,189,190,192],
[193,162,169,181,193,160,0,185,173,173],
[192,170,172,168,183,151,155,0,168,155],
[172,166,166,177,184,150,167,172,0,171],
[186,161,191,194,187,148,167,185,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,170,155,175,173,160,165,161,164],
[185,0,179,182,185,180,167,157,170,163],
[170,161,0,162,165,173,163,157,172,163],
[185,158,178,0,165,179,157,174,181,156],
[165,155,175,175,0,168,166,165,163,142],
[167,160,167,161,172,0,155,148,167,164],
[180,173,177,183,174,185,0,166,171,163],
[175,183,183,166,175,192,174,0,172,172],
[179,170,168,159,177,173,169,168,0,152],
[176,177,177,184,198,176,177,168,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,171,161,175,171,167,165,167],
[172,0,176,174,182,187,188,186,177,150],
[164,164,0,181,161,162,167,151,162,165],
[169,166,159,0,169,187,176,175,158,174],
[179,158,179,171,0,183,177,157,176,158],
[165,153,178,153,157,0,156,150,159,152],
[169,152,173,164,163,184,0,157,162,145],
[173,154,189,165,183,190,183,0,167,174],
[175,163,178,182,164,181,178,173,0,156],
[173,190,175,166,182,188,195,166,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,159,173,176,165,152,175,164,169],
[169,0,170,176,173,177,147,168,179,157],
[181,170,0,192,192,186,172,199,171,174],
[167,164,148,0,182,172,158,182,169,168],
[164,167,148,158,0,176,146,170,176,169],
[175,163,154,168,164,0,154,175,172,165],
[188,193,168,182,194,186,0,198,180,188],
[165,172,141,158,170,165,142,0,157,169],
[176,161,169,171,164,168,160,183,0,167],
[171,183,166,172,171,175,152,171,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,162,180,181,184,173,161,184,174],
[159,0,159,174,187,166,168,166,185,170],
[178,181,0,170,185,177,191,180,169,174],
[160,166,170,0,182,183,174,168,170,178],
[159,153,155,158,0,167,176,147,154,165],
[156,174,163,157,173,0,151,146,166,166],
[167,172,149,166,164,189,0,166,152,154],
[179,174,160,172,193,194,174,0,173,164],
[156,155,171,170,186,174,188,167,0,160],
[166,170,166,162,175,174,186,176,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,174,179,191,171,167,172,174,180],
[157,0,175,157,173,169,148,153,161,150],
[166,165,0,164,187,179,169,168,164,157],
[161,183,176,0,187,176,167,163,171,166],
[149,167,153,153,0,156,144,157,160,154],
[169,171,161,164,184,0,184,166,157,162],
[173,192,171,173,196,156,0,179,187,173],
[168,187,172,177,183,174,161,0,170,190],
[166,179,176,169,180,183,153,170,0,171],
[160,190,183,174,186,178,167,150,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,165,162,167,173,166,180,175,168],
[173,0,163,163,163,162,148,176,165,166],
[175,177,0,178,163,170,145,176,173,168],
[178,177,162,0,166,182,146,183,163,169],
[173,177,177,174,0,173,173,171,169,176],
[167,178,170,158,167,0,157,173,159,167],
[174,192,195,194,167,183,0,193,179,185],
[160,164,164,157,169,167,147,0,159,155],
[165,175,167,177,171,181,161,181,0,169],
[172,174,172,171,164,173,155,185,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,163,171,164,151,166,138,122,174],
[171,0,211,190,212,187,200,166,154,188],
[177,129,0,187,177,149,161,144,131,167],
[169,150,153,0,193,163,154,131,158,144],
[176,128,163,147,0,140,176,126,148,182],
[189,153,191,177,200,0,205,206,147,220],
[174,140,179,186,164,135,0,122,127,145],
[202,174,196,209,214,134,218,0,170,233],
[218,186,209,182,192,193,213,170,0,214],
[166,152,173,196,158,120,195,107,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,178,180,177,174,183,180,170,200],
[175,0,153,178,185,173,176,176,171,201],
[162,187,0,174,192,209,187,192,165,191],
[160,162,166,0,187,188,177,177,169,192],
[163,155,148,153,0,170,172,171,166,186],
[166,167,131,152,170,0,153,156,162,184],
[157,164,153,163,168,187,0,186,165,185],
[160,164,148,163,169,184,154,0,146,181],
[170,169,175,171,174,178,175,194,0,203],
[140,139,149,148,154,156,155,159,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,151,168,147,186,180,172,152,164],
[153,0,137,150,146,155,185,156,139,158],
[189,203,0,199,176,184,202,180,165,174],
[172,190,141,0,171,158,179,174,157,170],
[193,194,164,169,0,217,161,174,142,195],
[154,185,156,182,123,0,179,171,159,183],
[160,155,138,161,179,161,0,160,145,186],
[168,184,160,166,166,169,180,0,174,192],
[188,201,175,183,198,181,195,166,0,181],
[176,182,166,170,145,157,154,148,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,183,183,184,194,161,192,178,173],
[150,0,159,170,155,140,152,171,157,163],
[157,181,0,167,160,173,166,184,176,168],
[157,170,173,0,162,177,171,185,189,184],
[156,185,180,178,0,183,171,200,188,171],
[146,200,167,163,157,0,150,174,173,167],
[179,188,174,169,169,190,0,206,186,195],
[148,169,156,155,140,166,134,0,154,162],
[162,183,164,151,152,167,154,186,0,163],
[167,177,172,156,169,173,145,178,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,171,190,179,175,185,161,179],
[159,0,162,165,171,165,198,183,172,186],
[172,178,0,173,181,194,187,173,169,175],
[169,175,167,0,182,179,173,175,182,197],
[150,169,159,158,0,176,177,162,178,166],
[161,175,146,161,164,0,168,192,168,169],
[165,142,153,167,163,172,0,150,147,155],
[155,157,167,165,178,148,190,0,147,168],
[179,168,171,158,162,172,193,193,0,190],
[161,154,165,143,174,171,185,172,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,173,176,166,165,165,159,178,168],
[172,0,173,192,167,170,151,149,173,170],
[167,167,0,164,161,170,155,179,155,168],
[164,148,176,0,164,163,152,148,156,147],
[174,173,179,176,0,179,167,158,208,174],
[175,170,170,177,161,0,139,161,170,167],
[175,189,185,188,173,201,0,176,189,164],
[181,191,161,192,182,179,164,0,200,181],
[162,167,185,184,132,170,151,140,0,156],
[172,170,172,193,166,173,176,159,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,177,144,160,150,118,176,150,170],
[180,0,175,162,191,195,156,181,209,211],
[163,165,0,174,158,169,127,194,187,171],
[196,178,166,0,183,207,173,202,193,187],
[180,149,182,157,0,198,128,185,164,183],
[190,145,171,133,142,0,116,167,135,148],
[222,184,213,167,212,224,0,197,184,201],
[164,159,146,138,155,173,143,0,165,153],
[190,131,153,147,176,205,156,175,0,159],
[170,129,169,153,157,192,139,187,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,82,109,170,95,109,137,99,153],
[189,0,79,125,184,126,137,140,158,143],
[258,261,0,191,239,193,178,206,152,171],
[231,215,149,0,237,165,221,163,176,228],
[170,156,101,103,0,120,110,129,131,171],
[245,214,147,175,220,0,206,209,211,208],
[231,203,162,119,230,134,0,129,131,203],
[203,200,134,177,211,131,211,0,153,208],
[241,182,188,164,209,129,209,187,0,227],
[187,197,169,112,169,132,137,132,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,148,148,158,161,156,152,171,163],
[189,0,175,177,177,187,171,163,191,201],
[192,165,0,183,185,177,166,169,181,183],
[192,163,157,0,175,167,144,145,178,185],
[182,163,155,165,0,169,156,157,186,176],
[179,153,163,173,171,0,167,172,176,191],
[184,169,174,196,184,173,0,165,183,199],
[188,177,171,195,183,168,175,0,189,186],
[169,149,159,162,154,164,157,151,0,179],
[177,139,157,155,164,149,141,154,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,161,171,169,168,161,167,169,167],
[161,0,167,170,162,150,157,157,161,162],
[179,173,0,177,176,157,178,158,157,149],
[169,170,163,0,165,147,156,162,158,156],
[171,178,164,175,0,165,167,171,175,161],
[172,190,183,193,175,0,167,180,160,159],
[179,183,162,184,173,173,0,160,160,167],
[173,183,182,178,169,160,180,0,166,167],
[171,179,183,182,165,180,180,174,0,181],
[173,178,191,184,179,181,173,173,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,159,162,168,160,158,161,169,168],
[179,0,177,175,175,177,166,171,177,175],
[181,163,0,167,171,186,170,179,180,173],
[178,165,173,0,174,165,152,160,173,175],
[172,165,169,166,0,171,155,164,161,170],
[180,163,154,175,169,0,162,164,177,163],
[182,174,170,188,185,178,0,176,180,182],
[179,169,161,180,176,176,164,0,165,161],
[171,163,160,167,179,163,160,175,0,168],
[172,165,167,165,170,177,158,179,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,172,171,171,186,172,169,171,178],
[176,0,169,177,171,170,175,166,166,179],
[168,171,0,182,171,179,185,162,172,177],
[169,163,158,0,160,172,167,174,171,177],
[169,169,169,180,0,179,172,173,179,178],
[154,170,161,168,161,0,168,170,164,174],
[168,165,155,173,168,172,0,162,166,165],
[171,174,178,166,167,170,178,0,172,182],
[169,174,168,169,161,176,174,168,0,183],
[162,161,163,163,162,166,175,158,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,182,153,170,174,175,185,146,150],
[177,0,197,165,196,176,173,192,176,173],
[158,143,0,161,173,172,178,186,151,163],
[187,175,179,0,196,195,206,204,164,176],
[170,144,167,144,0,170,172,178,148,176],
[166,164,168,145,170,0,142,160,134,161],
[165,167,162,134,168,198,0,175,161,174],
[155,148,154,136,162,180,165,0,167,158],
[194,164,189,176,192,206,179,173,0,198],
[190,167,177,164,164,179,166,182,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,201,187,162,196,178,192,165,177],
[173,0,183,200,188,174,167,192,178,166],
[139,157,0,170,156,168,161,167,156,159],
[153,140,170,0,147,160,157,187,159,158],
[178,152,184,193,0,168,179,206,158,177],
[144,166,172,180,172,0,167,187,143,154],
[162,173,179,183,161,173,0,188,177,175],
[148,148,173,153,134,153,152,0,136,155],
[175,162,184,181,182,197,163,204,0,174],
[163,174,181,182,163,186,165,185,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,218,181,217,169,222,184,192,206],
[200,0,231,164,236,183,215,167,198,227],
[122,109,0,145,152,124,176,153,137,131],
[159,176,195,0,186,183,211,150,194,158],
[123,104,188,154,0,148,179,99,123,157],
[171,157,216,157,192,0,207,156,194,154],
[118,125,164,129,161,133,0,122,175,151],
[156,173,187,190,241,184,218,0,220,186],
[148,142,203,146,217,146,165,120,0,149],
[134,113,209,182,183,186,189,154,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,157,177,171,171,171,182,164,172],
[169,0,172,183,173,178,175,189,166,177],
[183,168,0,176,170,176,176,183,165,182],
[163,157,164,0,172,185,157,161,158,164],
[169,167,170,168,0,186,168,172,166,175],
[169,162,164,155,154,0,163,171,170,167],
[169,165,164,183,172,177,0,185,169,194],
[158,151,157,179,168,169,155,0,170,167],
[176,174,175,182,174,170,171,170,0,176],
[168,163,158,176,165,173,146,173,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,178,174,172,160,173,166,168,184],
[173,0,180,175,181,178,152,171,172,174],
[162,160,0,160,180,150,155,165,154,183],
[166,165,180,0,180,161,162,171,155,184],
[168,159,160,160,0,156,145,164,152,176],
[180,162,190,179,184,0,173,170,164,177],
[167,188,185,178,195,167,0,186,169,185],
[174,169,175,169,176,170,154,0,169,195],
[172,168,186,185,188,176,171,171,0,190],
[156,166,157,156,164,163,155,145,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,196,178,195,205,184,189,137,181],
[142,0,188,165,144,155,136,155,121,109],
[144,152,0,141,151,149,174,140,120,132],
[162,175,199,0,171,169,187,160,137,154],
[145,196,189,169,0,119,155,153,112,135],
[135,185,191,171,221,0,178,183,152,179],
[156,204,166,153,185,162,0,156,137,122],
[151,185,200,180,187,157,184,0,130,134],
[203,219,220,203,228,188,203,210,0,163],
[159,231,208,186,205,161,218,206,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,183,164,170,166,159,158,171,167],
[159,0,175,170,151,181,147,161,161,157],
[157,165,0,172,153,185,151,157,155,162],
[176,170,168,0,156,185,169,172,160,160],
[170,189,187,184,0,184,172,168,178,178],
[174,159,155,155,156,0,162,160,160,158],
[181,193,189,171,168,178,0,165,172,166],
[182,179,183,168,172,180,175,0,168,155],
[169,179,185,180,162,180,168,172,0,172],
[173,183,178,180,162,182,174,185,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,173,169,177,153,178,147,154,141],
[179,0,174,182,168,155,169,152,162,140],
[167,166,0,177,160,147,168,134,141,159],
[171,158,163,0,160,149,169,158,149,160],
[163,172,180,180,0,159,175,152,156,170],
[187,185,193,191,181,0,188,178,163,167],
[162,171,172,171,165,152,0,154,153,166],
[193,188,206,182,188,162,186,0,184,176],
[186,178,199,191,184,177,187,156,0,157],
[199,200,181,180,170,173,174,164,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,170,148,194,163,153,152,179,163],
[196,0,183,133,189,185,176,184,198,180],
[170,157,0,153,178,173,178,190,191,165],
[192,207,187,0,201,182,168,172,203,194],
[146,151,162,139,0,156,137,172,182,153],
[177,155,167,158,184,0,176,154,188,183],
[187,164,162,172,203,164,0,190,198,172],
[188,156,150,168,168,186,150,0,193,168],
[161,142,149,137,158,152,142,147,0,141],
[177,160,175,146,187,157,168,172,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,161,164,166,173,185,181,173,162],
[152,0,164,165,166,165,174,176,172,152],
[179,176,0,157,163,178,181,169,180,174],
[176,175,183,0,188,191,185,201,198,168],
[174,174,177,152,0,174,175,176,165,175],
[167,175,162,149,166,0,173,164,181,167],
[155,166,159,155,165,167,0,174,183,155],
[159,164,171,139,164,176,166,0,163,155],
[167,168,160,142,175,159,157,177,0,174],
[178,188,166,172,165,173,185,185,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,157,145,150,187,168,156,151,175],
[179,0,177,157,164,199,179,165,197,174],
[183,163,0,176,173,180,180,180,186,171],
[195,183,164,0,184,187,192,184,196,186],
[190,176,167,156,0,198,194,183,191,188],
[153,141,160,153,142,0,172,137,154,146],
[172,161,160,148,146,168,0,154,177,155],
[184,175,160,156,157,203,186,0,195,162],
[189,143,154,144,149,186,163,145,0,168],
[165,166,169,154,152,194,185,178,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,167,133,124,117,145,153,148,181],
[167,0,175,157,175,185,150,180,182,192],
[173,165,0,162,129,116,156,175,172,161],
[207,183,178,0,192,124,180,185,214,145],
[216,165,211,148,0,165,139,188,169,190],
[223,155,224,216,175,0,219,206,201,197],
[195,190,184,160,201,121,0,215,196,199],
[187,160,165,155,152,134,125,0,181,182],
[192,158,168,126,171,139,144,159,0,169],
[159,148,179,195,150,143,141,158,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,186,180,169,169,168,166,190,176],
[166,0,178,179,166,173,179,156,170,186],
[154,162,0,157,149,179,171,150,153,154],
[160,161,183,0,173,190,192,169,192,196],
[171,174,191,167,0,162,175,158,194,177],
[171,167,161,150,178,0,160,155,183,188],
[172,161,169,148,165,180,0,177,176,174],
[174,184,190,171,182,185,163,0,190,191],
[150,170,187,148,146,157,164,150,0,184],
[164,154,186,144,163,152,166,149,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,158,155,154,151,187,174,145,167],
[173,0,141,163,161,162,156,176,158,163],
[182,199,0,181,165,199,179,187,170,201],
[185,177,159,0,165,156,192,180,162,174],
[186,179,175,175,0,196,189,190,158,170],
[189,178,141,184,144,0,195,168,145,170],
[153,184,161,148,151,145,0,163,148,162],
[166,164,153,160,150,172,177,0,160,183],
[195,182,170,178,182,195,192,180,0,194],
[173,177,139,166,170,170,178,157,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,182,201,177,174,182,174,178,168],
[144,0,182,175,171,162,162,171,178,149],
[158,158,0,178,148,172,161,172,172,158],
[139,165,162,0,163,185,166,167,172,176],
[163,169,192,177,0,170,177,167,175,166],
[166,178,168,155,170,0,171,178,181,183],
[158,178,179,174,163,169,0,159,164,162],
[166,169,168,173,173,162,181,0,180,176],
[162,162,168,168,165,159,176,160,0,148],
[172,191,182,164,174,157,178,164,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,184,169,157,173,164,177,206,204],
[183,0,202,184,185,171,159,190,204,200],
[156,138,0,155,146,162,156,175,177,153],
[171,156,185,0,164,196,180,195,179,171],
[183,155,194,176,0,170,173,203,179,162],
[167,169,178,144,170,0,159,161,179,181],
[176,181,184,160,167,181,0,165,174,204],
[163,150,165,145,137,179,175,0,176,163],
[134,136,163,161,161,161,166,164,0,174],
[136,140,187,169,178,159,136,177,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,171,205,159,169,166,168,162,165],
[149,0,166,182,153,171,161,159,158,158],
[169,174,0,194,151,166,155,178,168,173],
[135,158,146,0,146,152,152,156,148,157],
[181,187,189,194,0,187,182,193,169,182],
[171,169,174,188,153,0,160,163,156,177],
[174,179,185,188,158,180,0,182,173,175],
[172,181,162,184,147,177,158,0,160,156],
[178,182,172,192,171,184,167,180,0,176],
[175,182,167,183,158,163,165,184,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,175,164,176,178,186,192,176,182],
[171,0,178,148,161,157,157,172,165,167],
[165,162,0,156,160,189,178,211,191,176],
[176,192,184,0,166,171,181,204,204,182],
[164,179,180,174,0,175,145,206,171,185],
[162,183,151,169,165,0,160,173,152,164],
[154,183,162,159,195,180,0,201,170,178],
[148,168,129,136,134,167,139,0,181,150],
[164,175,149,136,169,188,170,159,0,165],
[158,173,164,158,155,176,162,190,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,175,175,174,185,165,178,180,181],
[161,0,161,167,175,185,168,166,168,166],
[165,179,0,174,171,172,172,173,183,156],
[165,173,166,0,168,169,151,167,167,160],
[166,165,169,172,0,175,160,165,170,163],
[155,155,168,171,165,0,151,163,175,160],
[175,172,168,189,180,189,0,161,181,175],
[162,174,167,173,175,177,179,0,172,162],
[160,172,157,173,170,165,159,168,0,160],
[159,174,184,180,177,180,165,178,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,158,162,166,176,161,181,184,159],
[176,0,160,166,178,155,162,159,176,145],
[182,180,0,191,175,144,168,164,170,158],
[178,174,149,0,170,132,150,143,163,180],
[174,162,165,170,0,158,155,176,183,175],
[164,185,196,208,182,0,192,183,192,182],
[179,178,172,190,185,148,0,173,188,178],
[159,181,176,197,164,157,167,0,167,176],
[156,164,170,177,157,148,152,173,0,174],
[181,195,182,160,165,158,162,164,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,91,130,116,124,95,169,114,176],
[227,0,212,138,167,151,93,188,176,202],
[249,128,0,173,145,155,152,184,143,208],
[210,202,167,0,173,149,157,204,203,196],
[224,173,195,167,0,177,120,195,156,213],
[216,189,185,191,163,0,129,218,172,203],
[245,247,188,183,220,211,0,198,170,189],
[171,152,156,136,145,122,142,0,145,177],
[226,164,197,137,184,168,170,195,0,198],
[164,138,132,144,127,137,151,163,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,164,160,168,168,160,147,174,174],
[174,0,171,164,187,169,165,169,178,171],
[176,169,0,167,182,167,160,159,176,187],
[180,176,173,0,167,164,166,160,187,180],
[172,153,158,173,0,162,176,159,166,176],
[172,171,173,176,178,0,155,151,175,181],
[180,175,180,174,164,185,0,168,181,192],
[193,171,181,180,181,189,172,0,169,191],
[166,162,164,153,174,165,159,171,0,174],
[166,169,153,160,164,159,148,149,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,192,207,187,168,219,176,198,216],
[144,0,171,171,165,136,181,169,181,170],
[148,169,0,178,165,141,172,172,190,165],
[133,169,162,0,141,133,163,145,148,161],
[153,175,175,199,0,145,185,152,186,159],
[172,204,199,207,195,0,223,165,193,208],
[121,159,168,177,155,117,0,153,151,147],
[164,171,168,195,188,175,187,0,154,191],
[142,159,150,192,154,147,189,186,0,213],
[124,170,175,179,181,132,193,149,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,189,192,157,181,175,152,166,180],
[172,0,187,183,171,164,166,173,169,166],
[151,153,0,149,129,146,130,151,120,145],
[148,157,191,0,170,192,157,170,153,178],
[183,169,211,170,0,177,173,188,167,167],
[159,176,194,148,163,0,167,145,139,173],
[165,174,210,183,167,173,0,178,162,174],
[188,167,189,170,152,195,162,0,170,173],
[174,171,220,187,173,201,178,170,0,178],
[160,174,195,162,173,167,166,167,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,206,164,194,162,168,168,172,198],
[176,0,199,203,208,193,169,183,200,216],
[134,141,0,161,195,153,143,133,157,192],
[176,137,179,0,191,144,130,140,137,194],
[146,132,145,149,0,128,109,109,139,158],
[178,147,187,196,212,0,132,172,202,201],
[172,171,197,210,231,208,0,165,211,173],
[172,157,207,200,231,168,175,0,177,202],
[168,140,183,203,201,138,129,163,0,190],
[142,124,148,146,182,139,167,138,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,159,172,174,174,187,174,172,165],
[189,0,174,192,167,194,194,185,184,176],
[181,166,0,207,182,200,199,198,192,197],
[168,148,133,0,142,173,176,170,146,151],
[166,173,158,198,0,184,182,183,170,185],
[166,146,140,167,156,0,164,170,171,170],
[153,146,141,164,158,176,0,165,148,152],
[166,155,142,170,157,170,175,0,175,157],
[168,156,148,194,170,169,192,165,0,167],
[175,164,143,189,155,170,188,183,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,170,158,162,163,177,171,176,167],
[177,0,178,176,170,169,185,178,181,168],
[170,162,0,152,166,157,164,161,167,157],
[182,164,188,0,180,163,181,171,174,167],
[178,170,174,160,0,159,178,170,178,171],
[177,171,183,177,181,0,178,167,171,179],
[163,155,176,159,162,162,0,160,170,158],
[169,162,179,169,170,173,180,0,178,170],
[164,159,173,166,162,169,170,162,0,160],
[173,172,183,173,169,161,182,170,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,148,191,181,168,203,186,150],
[171,0,119,156,178,158,177,177,178,158],
[174,221,0,195,213,200,181,228,210,170],
[192,184,145,0,185,152,173,171,167,163],
[149,162,127,155,0,117,150,191,173,146],
[159,182,140,188,223,0,164,212,169,174],
[172,163,159,167,190,176,0,208,199,168],
[137,163,112,169,149,128,132,0,149,130],
[154,162,130,173,167,171,141,191,0,159],
[190,182,170,177,194,166,172,210,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,185,169,167,163,161,165,183,166],
[167,0,161,161,166,163,160,148,167,182],
[155,179,0,168,158,164,167,158,177,167],
[171,179,172,0,172,167,168,157,156,175],
[173,174,182,168,0,179,160,159,178,158],
[177,177,176,173,161,0,169,167,165,164],
[179,180,173,172,180,171,0,168,168,182],
[175,192,182,183,181,173,172,0,181,165],
[157,173,163,184,162,175,172,159,0,168],
[174,158,173,165,182,176,158,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,153,202,174,237,151,146,100,125],
[145,0,76,193,196,195,157,80,135,76],
[187,264,0,277,246,274,144,225,200,228],
[138,147,63,0,154,172,77,67,77,83],
[166,144,94,186,0,195,79,76,89,141],
[103,145,66,168,145,0,105,86,28,96],
[189,183,196,263,261,235,0,227,152,206],
[194,260,115,273,264,254,113,0,170,137],
[240,205,140,263,251,312,188,170,0,146],
[215,264,112,257,199,244,134,203,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,214,181,184,163,177,209,161,176],
[139,0,162,139,159,157,147,178,141,165],
[126,178,0,159,157,157,164,182,126,165],
[159,201,181,0,155,153,135,215,153,158],
[156,181,183,185,0,168,167,182,167,158],
[177,183,183,187,172,0,148,209,187,181],
[163,193,176,205,173,192,0,206,156,206],
[131,162,158,125,158,131,134,0,132,146],
[179,199,214,187,173,153,184,208,0,189],
[164,175,175,182,182,159,134,194,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,199,177,197,177,178,159,178,181],
[173,0,182,158,171,170,149,162,189,166],
[141,158,0,132,178,172,153,143,173,151],
[163,182,208,0,206,189,190,193,206,179],
[143,169,162,134,0,150,151,148,174,151],
[163,170,168,151,190,0,150,155,168,141],
[162,191,187,150,189,190,0,177,184,140],
[181,178,197,147,192,185,163,0,187,173],
[162,151,167,134,166,172,156,153,0,134],
[159,174,189,161,189,199,200,167,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,208,167,169,180,194,185,165,94],
[141,0,181,155,203,171,192,132,200,184],
[132,159,0,170,132,136,100,146,112,101],
[173,185,170,0,130,252,192,140,200,157],
[171,137,208,210,0,154,196,192,188,76],
[160,169,204,88,186,0,184,114,180,146],
[146,148,240,148,144,156,0,157,176,76],
[155,208,194,200,148,226,183,0,189,141],
[175,140,228,140,152,160,164,151,0,124],
[246,156,239,183,264,194,264,199,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,142,178,193,175,169,148,174,170],
[177,0,144,147,183,142,172,165,183,168],
[198,196,0,176,214,202,202,195,165,177],
[162,193,164,0,216,163,175,154,184,170],
[147,157,126,124,0,153,163,146,146,155],
[165,198,138,177,187,0,171,146,183,164],
[171,168,138,165,177,169,0,171,143,182],
[192,175,145,186,194,194,169,0,182,149],
[166,157,175,156,194,157,197,158,0,161],
[170,172,163,170,185,176,158,191,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,152,159,180,175,174,164,159,161],
[181,0,172,174,176,180,183,164,176,178],
[188,168,0,177,179,189,181,170,172,186],
[181,166,163,0,179,187,165,168,167,174],
[160,164,161,161,0,163,168,158,160,164],
[165,160,151,153,177,0,167,144,157,179],
[166,157,159,175,172,173,0,160,184,185],
[176,176,170,172,182,196,180,0,177,191],
[181,164,168,173,180,183,156,163,0,151],
[179,162,154,166,176,161,155,149,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,170,167,175,172,163,182,184,179],
[157,0,162,168,155,157,154,163,182,167],
[170,178,0,182,185,179,166,176,197,169],
[173,172,158,0,178,162,162,174,194,179],
[165,185,155,162,0,165,158,180,171,171],
[168,183,161,178,175,0,159,166,184,172],
[177,186,174,178,182,181,0,169,187,183],
[158,177,164,166,160,174,171,0,179,173],
[156,158,143,146,169,156,153,161,0,154],
[161,173,171,161,169,168,157,167,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,162,168,157,154,154,175,152,157],
[199,0,175,164,174,171,179,166,177,179],
[178,165,0,190,185,195,187,190,169,177],
[172,176,150,0,169,173,165,168,177,172],
[183,166,155,171,0,191,163,167,169,170],
[186,169,145,167,149,0,185,183,151,173],
[186,161,153,175,177,155,0,154,158,181],
[165,174,150,172,173,157,186,0,159,154],
[188,163,171,163,171,189,182,181,0,185],
[183,161,163,168,170,167,159,186,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,177,173,184,181,159,170,186,177],
[163,0,172,165,176,178,149,158,182,167],
[163,168,0,167,174,180,152,156,178,167],
[167,175,173,0,173,170,163,166,176,162],
[156,164,166,167,0,174,149,155,160,169],
[159,162,160,170,166,0,152,159,179,155],
[181,191,188,177,191,188,0,167,183,175],
[170,182,184,174,185,181,173,0,196,177],
[154,158,162,164,180,161,157,144,0,156],
[163,173,173,178,171,185,165,163,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,197,155,134,89,168,112,191,172],
[207,0,242,222,199,206,150,195,215,236],
[143,98,0,93,170,124,119,126,190,167],
[185,118,247,0,228,136,217,185,209,208],
[206,141,170,112,0,121,126,196,147,188],
[251,134,216,204,219,0,161,200,209,276],
[172,190,221,123,214,179,0,183,231,233],
[228,145,214,155,144,140,157,0,205,161],
[149,125,150,131,193,131,109,135,0,108],
[168,104,173,132,152,64,107,179,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,175,165,166,169,159,167,184,159],
[194,0,157,148,194,164,169,174,173,163],
[165,183,0,179,177,172,180,192,176,179],
[175,192,161,0,168,165,170,179,181,165],
[174,146,163,172,0,167,172,166,162,159],
[171,176,168,175,173,0,174,169,172,154],
[181,171,160,170,168,166,0,171,182,171],
[173,166,148,161,174,171,169,0,161,157],
[156,167,164,159,178,168,158,179,0,174],
[181,177,161,175,181,186,169,183,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,182,161,169,172,185,167,179,155],
[156,0,175,164,153,160,175,153,168,163],
[158,165,0,155,164,164,168,162,168,155],
[179,176,185,0,170,173,172,193,182,172],
[171,187,176,170,0,176,182,176,187,165],
[168,180,176,167,164,0,163,177,187,170],
[155,165,172,168,158,177,0,167,179,155],
[173,187,178,147,164,163,173,0,171,149],
[161,172,172,158,153,153,161,169,0,146],
[185,177,185,168,175,170,185,191,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,171,195,173,179,170,178,178,182],
[134,0,123,140,120,139,151,135,111,143],
[169,217,0,183,166,177,176,185,169,184],
[145,200,157,0,156,157,167,163,149,158],
[167,220,174,184,0,181,197,195,185,191],
[161,201,163,183,159,0,165,188,167,178],
[170,189,164,173,143,175,0,161,165,186],
[162,205,155,177,145,152,179,0,163,166],
[162,229,171,191,155,173,175,177,0,182],
[158,197,156,182,149,162,154,174,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,175,166,168,166,162,178,167,166],
[168,0,160,167,174,177,153,175,160,164],
[165,180,0,168,180,176,160,187,174,179],
[174,173,172,0,159,177,152,173,167,167],
[172,166,160,181,0,174,176,188,165,183],
[174,163,164,163,166,0,162,184,167,174],
[178,187,180,188,164,178,0,191,164,194],
[162,165,153,167,152,156,149,0,162,166],
[173,180,166,173,175,173,176,178,0,180],
[174,176,161,173,157,166,146,174,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,175,176,165,168,175,177,178,178],
[174,0,164,172,159,157,163,150,167,176],
[165,176,0,162,173,171,172,165,171,176],
[164,168,178,0,165,166,171,158,188,206],
[175,181,167,175,0,165,166,164,167,174],
[172,183,169,174,175,0,182,191,179,179],
[165,177,168,169,174,158,0,173,172,178],
[163,190,175,182,176,149,167,0,167,180],
[162,173,169,152,173,161,168,173,0,180],
[162,164,164,134,166,161,162,160,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,63,268,122,69,227,81,250,169],
[164,0,124,211,124,99,168,107,228,154],
[277,216,0,311,192,180,227,164,293,282],
[72,129,29,0,76,64,88,72,245,76],
[218,216,148,264,0,104,180,159,276,173],
[271,241,160,276,236,0,276,176,288,231],
[113,172,113,252,160,64,0,72,288,160],
[259,233,176,268,181,164,268,0,238,223],
[90,112,47,95,64,52,52,102,0,102],
[171,186,58,264,167,109,180,117,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,171,157,165,169,166,162,170,172],
[178,0,171,158,175,151,162,159,176,171],
[169,169,0,151,170,151,161,154,174,159],
[183,182,189,0,195,165,174,184,190,169],
[175,165,170,145,0,170,184,142,169,159],
[171,189,189,175,170,0,200,178,181,175],
[174,178,179,166,156,140,0,177,175,168],
[178,181,186,156,198,162,163,0,176,186],
[170,164,166,150,171,159,165,164,0,159],
[168,169,181,171,181,165,172,154,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,175,119,148,182,182,137,217,166],
[196,0,212,160,136,188,179,160,212,213],
[165,128,0,148,154,188,201,138,163,184],
[221,180,192,0,198,189,220,168,208,193],
[192,204,186,142,0,203,215,191,195,198],
[158,152,152,151,137,0,182,146,163,158],
[158,161,139,120,125,158,0,136,161,181],
[203,180,202,172,149,194,204,0,222,193],
[123,128,177,132,145,177,179,118,0,149],
[174,127,156,147,142,182,159,147,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,164,156,166,149,170,170,175],
[166,0,169,154,153,166,163,157,179,157],
[172,171,0,166,161,182,167,179,190,171],
[176,186,174,0,181,191,173,175,178,161],
[184,187,179,159,0,168,170,173,185,159],
[174,174,158,149,172,0,157,174,170,167],
[191,177,173,167,170,183,0,181,180,183],
[170,183,161,165,167,166,159,0,171,156],
[170,161,150,162,155,170,160,169,0,170],
[165,183,169,179,181,173,157,184,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,155,159,156,154,180,187,186,182],
[175,0,180,211,177,159,196,242,211,198],
[185,160,0,205,198,149,176,216,174,152],
[181,129,135,0,120,127,130,174,163,125],
[184,163,142,220,0,127,162,171,162,169],
[186,181,191,213,213,0,162,223,218,176],
[160,144,164,210,178,178,0,236,193,175],
[153,98,124,166,169,117,104,0,155,155],
[154,129,166,177,178,122,147,185,0,149],
[158,142,188,215,171,164,165,185,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,158,164,151,161,159,150,172,151],
[190,0,162,172,172,188,176,197,185,178],
[182,178,0,161,171,187,183,188,182,152],
[176,168,179,0,182,173,169,155,182,164],
[189,168,169,158,0,164,163,163,174,168],
[179,152,153,167,176,0,167,164,166,159],
[181,164,157,171,177,173,0,168,192,159],
[190,143,152,185,177,176,172,0,186,159],
[168,155,158,158,166,174,148,154,0,156],
[189,162,188,176,172,181,181,181,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,165,171,176,166,157,165,151,155],
[170,0,174,184,182,157,151,181,161,172],
[175,166,0,173,184,157,152,158,161,172],
[169,156,167,0,170,154,162,163,170,163],
[164,158,156,170,0,147,155,158,159,158],
[174,183,183,186,193,0,174,181,169,182],
[183,189,188,178,185,166,0,188,181,180],
[175,159,182,177,182,159,152,0,161,161],
[189,179,179,170,181,171,159,179,0,171],
[185,168,168,177,182,158,160,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,169,147,167,164,163,160,157,167],
[156,0,158,155,170,157,159,149,181,152],
[171,182,0,156,172,168,180,170,182,173],
[193,185,184,0,197,184,169,176,196,173],
[173,170,168,143,0,164,158,151,162,156],
[176,183,172,156,176,0,168,162,179,176],
[177,181,160,171,182,172,0,160,187,182],
[180,191,170,164,189,178,180,0,186,182],
[183,159,158,144,178,161,153,154,0,153],
[173,188,167,167,184,164,158,158,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,185,148,168,156,188,167,153,138],
[178,0,190,170,181,179,196,202,166,176],
[155,150,0,136,161,166,167,180,148,154],
[192,170,204,0,190,185,203,182,182,180],
[172,159,179,150,0,157,175,152,159,137],
[184,161,174,155,183,0,195,189,151,153],
[152,144,173,137,165,145,0,150,133,133],
[173,138,160,158,188,151,190,0,170,139],
[187,174,192,158,181,189,207,170,0,169],
[202,164,186,160,203,187,207,201,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,184,201,186,206,170,168,187,186],
[165,0,174,204,165,171,129,194,178,174],
[156,166,0,209,157,169,188,166,171,190],
[139,136,131,0,132,134,106,129,150,115],
[154,175,183,208,0,192,170,142,187,159],
[134,169,171,206,148,0,166,146,160,164],
[170,211,152,234,170,174,0,139,180,180],
[172,146,174,211,198,194,201,0,171,181],
[153,162,169,190,153,180,160,169,0,184],
[154,166,150,225,181,176,160,159,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,170,173,160,158,170,167,171,185],
[161,0,161,163,170,166,170,155,175,185],
[170,179,0,171,163,172,175,140,157,177],
[167,177,169,0,150,164,171,158,172,182],
[180,170,177,190,0,168,159,173,181,174],
[182,174,168,176,172,0,178,167,180,182],
[170,170,165,169,181,162,0,160,176,183],
[173,185,200,182,167,173,180,0,170,181],
[169,165,183,168,159,160,164,170,0,180],
[155,155,163,158,166,158,157,159,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,165,177,176,168,169,171,163,199],
[167,0,164,154,154,155,157,155,158,174],
[175,176,0,169,176,162,156,167,161,196],
[163,186,171,0,182,172,174,164,170,187],
[164,186,164,158,0,182,169,169,179,204],
[172,185,178,168,158,0,155,173,176,190],
[171,183,184,166,171,185,0,178,183,205],
[169,185,173,176,171,167,162,0,163,206],
[177,182,179,170,161,164,157,177,0,198],
[141,166,144,153,136,150,135,134,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,253,177,197,149,161,192,138,204],
[199,0,210,189,217,179,159,231,203,194],
[87,130,0,130,152,130,136,159,151,173],
[163,151,210,0,214,157,153,210,171,169],
[143,123,188,126,0,146,114,156,98,133],
[191,161,210,183,194,0,151,207,163,153],
[179,181,204,187,226,189,0,215,167,177],
[148,109,181,130,184,133,125,0,152,170],
[202,137,189,169,242,177,173,188,0,158],
[136,146,167,171,207,187,163,170,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,161,194,145,150,158,190,163,185],
[158,0,155,175,144,148,162,158,161,165],
[179,185,0,210,151,137,180,163,191,180],
[146,165,130,0,136,140,159,169,152,160],
[195,196,189,204,0,164,196,178,188,194],
[190,192,203,200,176,0,170,193,187,182],
[182,178,160,181,144,170,0,144,155,162],
[150,182,177,171,162,147,196,0,170,167],
[177,179,149,188,152,153,185,170,0,182],
[155,175,160,180,146,158,178,173,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,184,176,180,186,163,187,180,182],
[168,0,186,186,187,185,171,174,177,182],
[156,154,0,159,175,178,149,170,161,167],
[164,154,181,0,169,175,155,177,167,184],
[160,153,165,171,0,169,156,162,167,169],
[154,155,162,165,171,0,145,166,170,169],
[177,169,191,185,184,195,0,176,183,181],
[153,166,170,163,178,174,164,0,163,169],
[160,163,179,173,173,170,157,177,0,182],
[158,158,173,156,171,171,159,171,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,137,153,161,155,131,158,158,171],
[199,0,178,160,189,189,141,175,191,187],
[203,162,0,163,184,182,171,177,172,173],
[187,180,177,0,191,174,156,178,186,194],
[179,151,156,149,0,176,137,153,174,157],
[185,151,158,166,164,0,176,168,180,180],
[209,199,169,184,203,164,0,207,193,188],
[182,165,163,162,187,172,133,0,167,185],
[182,149,168,154,166,160,147,173,0,158],
[169,153,167,146,183,160,152,155,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,180,171,186,179,186,168,174],
[173,0,164,165,160,172,184,178,170,177],
[169,176,0,165,169,179,178,169,176,187],
[160,175,175,0,176,177,187,178,186,175],
[169,180,171,164,0,173,180,173,171,180],
[154,168,161,163,167,0,175,169,162,179],
[161,156,162,153,160,165,0,162,159,166],
[154,162,171,162,167,171,178,0,178,177],
[172,170,164,154,169,178,181,162,0,176],
[166,163,153,165,160,161,174,163,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,174,174,181,182,179,174,165,172],
[165,0,172,161,181,168,174,163,153,171],
[166,168,0,151,170,169,167,149,150,154],
[166,179,189,0,183,174,176,165,168,181],
[159,159,170,157,0,158,160,147,146,157],
[158,172,171,166,182,0,181,151,166,162],
[161,166,173,164,180,159,0,158,166,159],
[166,177,191,175,193,189,182,0,181,176],
[175,187,190,172,194,174,174,159,0,174],
[168,169,186,159,183,178,181,164,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,126,151,148,148,154,154,166,154],
[182,0,178,194,175,186,196,191,149,178],
[214,162,0,190,172,184,182,182,177,194],
[189,146,150,0,173,188,182,191,145,129],
[192,165,168,167,0,146,171,161,171,155],
[192,154,156,152,194,0,169,151,177,186],
[186,144,158,158,169,171,0,180,154,159],
[186,149,158,149,179,189,160,0,129,183],
[174,191,163,195,169,163,186,211,0,176],
[186,162,146,211,185,154,181,157,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,134,205,167,134,203,135,170,204],
[205,0,171,206,203,240,136,171,171,138],
[206,169,0,239,271,205,137,205,240,136],
[135,134,101,0,169,135,171,135,170,136],
[173,137,69,171,0,172,139,104,173,136],
[206,100,135,205,168,0,103,103,206,102],
[137,204,203,169,201,237,0,171,171,204],
[205,169,135,205,236,237,169,0,169,136],
[170,169,100,170,167,134,169,171,0,101],
[136,202,204,204,204,238,136,204,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,212,222,213,164,185,182,174,193],
[131,0,132,141,153,123,153,144,193,163],
[128,208,0,200,189,170,193,192,193,189],
[118,199,140,0,176,144,203,159,183,161],
[127,187,151,164,0,144,192,169,173,171],
[176,217,170,196,196,0,212,229,204,183],
[155,187,147,137,148,128,0,168,139,148],
[158,196,148,181,171,111,172,0,159,170],
[166,147,147,157,167,136,201,181,0,173],
[147,177,151,179,169,157,192,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,147,192,170,196,168,172,173,168],
[172,0,171,185,165,186,153,163,169,168],
[193,169,0,195,173,208,167,182,186,205],
[148,155,145,0,158,180,147,147,156,155],
[170,175,167,182,0,203,174,168,165,180],
[144,154,132,160,137,0,158,135,140,147],
[172,187,173,193,166,182,0,165,175,173],
[168,177,158,193,172,205,175,0,176,180],
[167,171,154,184,175,200,165,164,0,170],
[172,172,135,185,160,193,167,160,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,176,181,175,190,165,170,174,178],
[194,0,168,183,181,198,183,181,163,187],
[164,172,0,177,164,192,173,173,165,173],
[159,157,163,0,179,179,167,166,172,179],
[165,159,176,161,0,181,174,159,152,186],
[150,142,148,161,159,0,153,162,142,169],
[175,157,167,173,166,187,0,156,151,167],
[170,159,167,174,181,178,184,0,166,186],
[166,177,175,168,188,198,189,174,0,194],
[162,153,167,161,154,171,173,154,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,166,174,176,174,169,182,183,185],
[165,0,160,163,166,172,178,172,173,179],
[174,180,0,177,167,177,172,173,182,184],
[166,177,163,0,169,170,181,187,180,165],
[164,174,173,171,0,177,175,187,187,191],
[166,168,163,170,163,0,175,176,186,179],
[171,162,168,159,165,165,0,170,172,175],
[158,168,167,153,153,164,170,0,174,170],
[157,167,158,160,153,154,168,166,0,172],
[155,161,156,175,149,161,165,170,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,164,178,157,150,160,181,218,192],
[206,0,182,210,165,174,196,205,211,179],
[176,158,0,199,157,187,182,190,199,181],
[162,130,141,0,170,148,191,172,197,163],
[183,175,183,170,0,160,182,170,175,162],
[190,166,153,192,180,0,186,207,201,197],
[180,144,158,149,158,154,0,162,166,180],
[159,135,150,168,170,133,178,0,176,204],
[122,129,141,143,165,139,174,164,0,191],
[148,161,159,177,178,143,160,136,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,178,169,175,171,151,157,150,161],
[177,0,181,159,182,169,179,159,165,175],
[162,159,0,164,171,154,158,156,166,151],
[171,181,176,0,176,166,170,166,184,183],
[165,158,169,164,0,164,161,155,172,188],
[169,171,186,174,176,0,162,159,157,171],
[189,161,182,170,179,178,0,182,182,172],
[183,181,184,174,185,181,158,0,191,175],
[190,175,174,156,168,183,158,149,0,174],
[179,165,189,157,152,169,168,165,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,182,191,164,182,167,165,184,170],
[182,0,173,181,166,167,181,163,178,142],
[158,167,0,163,153,173,151,170,191,142],
[149,159,177,0,164,148,174,162,184,148],
[176,174,187,176,0,168,185,174,190,188],
[158,173,167,192,172,0,185,172,188,170],
[173,159,189,166,155,155,0,169,180,146],
[175,177,170,178,166,168,171,0,181,156],
[156,162,149,156,150,152,160,159,0,149],
[170,198,198,192,152,170,194,184,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,154,143,162,165,154,197,186,166],
[187,0,184,141,177,183,172,215,173,168],
[186,156,0,170,146,163,174,187,181,177],
[197,199,170,0,170,174,205,201,188,184],
[178,163,194,170,0,160,179,198,186,155],
[175,157,177,166,180,0,181,181,184,128],
[186,168,166,135,161,159,0,187,158,136],
[143,125,153,139,142,159,153,0,155,151],
[154,167,159,152,154,156,182,185,0,158],
[174,172,163,156,185,212,204,189,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,171,187,160,160,155,160,138,164],
[157,0,167,153,153,172,158,131,139,166],
[169,173,0,167,161,175,156,145,141,163],
[153,187,173,0,176,151,165,155,161,159],
[180,187,179,164,0,175,163,163,161,163],
[180,168,165,189,165,0,174,150,154,175],
[185,182,184,175,177,166,0,156,148,121],
[180,209,195,185,177,190,184,0,165,168],
[202,201,199,179,179,186,192,175,0,159],
[176,174,177,181,177,165,219,172,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,168,182,163,160,154,166,168,186],
[180,0,169,183,176,162,155,156,157,176],
[172,171,0,182,176,178,170,159,169,178],
[158,157,158,0,166,163,161,161,149,181],
[177,164,164,174,0,179,165,162,176,179],
[180,178,162,177,161,0,148,169,160,184],
[186,185,170,179,175,192,0,186,170,198],
[174,184,181,179,178,171,154,0,151,184],
[172,183,171,191,164,180,170,189,0,188],
[154,164,162,159,161,156,142,156,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,189,170,166,162,172,178,164,150],
[177,0,177,169,171,167,188,174,157,164],
[151,163,0,170,172,167,169,181,156,168],
[170,171,170,0,165,172,175,167,150,166],
[174,169,168,175,0,160,167,179,168,171],
[178,173,173,168,180,0,181,188,163,179],
[168,152,171,165,173,159,0,148,126,166],
[162,166,159,173,161,152,192,0,153,164],
[176,183,184,190,172,177,214,187,0,167],
[190,176,172,174,169,161,174,176,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,169,174,175,169,193,183,196,179],
[172,0,173,170,183,161,184,180,187,162],
[171,167,0,165,176,176,187,170,198,174],
[166,170,175,0,166,172,180,170,174,174],
[165,157,164,174,0,173,173,180,182,177],
[171,179,164,168,167,0,186,170,186,171],
[147,156,153,160,167,154,0,162,177,160],
[157,160,170,170,160,170,178,0,190,164],
[144,153,142,166,158,154,163,150,0,159],
[161,178,166,166,163,169,180,176,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,169,164,167,170,149,155,199,176],
[189,0,194,171,177,184,177,170,193,195],
[171,146,0,147,157,153,186,134,164,149],
[176,169,193,0,179,178,197,162,180,177],
[173,163,183,161,0,188,162,158,192,180],
[170,156,187,162,152,0,172,134,172,150],
[191,163,154,143,178,168,0,162,184,173],
[185,170,206,178,182,206,178,0,193,198],
[141,147,176,160,148,168,156,147,0,150],
[164,145,191,163,160,190,167,142,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,167,187,173,183,175,162,187,176],
[124,0,148,173,129,148,131,151,143,178],
[173,192,0,158,172,166,170,151,152,182],
[153,167,182,0,169,155,144,169,154,166],
[167,211,168,171,0,180,144,170,183,175],
[157,192,174,185,160,0,161,183,182,178],
[165,209,170,196,196,179,0,185,175,176],
[178,189,189,171,170,157,155,0,185,193],
[153,197,188,186,157,158,165,155,0,176],
[164,162,158,174,165,162,164,147,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,188,191,173,167,169,181,149,177],
[173,0,185,190,190,158,178,174,183,167],
[152,155,0,173,160,174,169,150,158,154],
[149,150,167,0,177,149,166,162,169,174],
[167,150,180,163,0,159,183,147,157,171],
[173,182,166,191,181,0,173,177,168,181],
[171,162,171,174,157,167,0,171,173,163],
[159,166,190,178,193,163,169,0,175,176],
[191,157,182,171,183,172,167,165,0,179],
[163,173,186,166,169,159,177,164,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,177,168,175,179,149,175,172,176],
[176,0,182,174,187,179,165,162,192,167],
[163,158,0,167,176,157,154,147,163,152],
[172,166,173,0,183,168,171,170,183,169],
[165,153,164,157,0,158,155,156,156,175],
[161,161,183,172,182,0,169,171,177,172],
[191,175,186,169,185,171,0,181,193,171],
[165,178,193,170,184,169,159,0,173,178],
[168,148,177,157,184,163,147,167,0,158],
[164,173,188,171,165,168,169,162,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,170,174,174,183,183,180,175,187],
[158,0,171,162,165,170,156,172,166,166],
[170,169,0,178,179,168,162,174,158,166],
[166,178,162,0,169,169,145,152,171,174],
[166,175,161,171,0,176,142,169,165,170],
[157,170,172,171,164,0,155,180,160,171],
[157,184,178,195,198,185,0,181,175,190],
[160,168,166,188,171,160,159,0,160,179],
[165,174,182,169,175,180,165,180,0,177],
[153,174,174,166,170,169,150,161,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,162,159,153,169,162,160,156,164],
[181,0,159,159,165,169,146,157,160,171],
[178,181,0,169,164,163,168,172,175,151],
[181,181,171,0,176,172,169,166,172,169],
[187,175,176,164,0,185,170,170,171,183],
[171,171,177,168,155,0,168,178,164,162],
[178,194,172,171,170,172,0,172,172,173],
[180,183,168,174,170,162,168,0,174,168],
[184,180,165,168,169,176,168,166,0,161],
[176,169,189,171,157,178,167,172,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,175,170,185,188,186,190,188],
[164,0,163,153,149,162,186,161,190,192],
[169,177,0,157,160,183,181,174,200,183],
[165,187,183,0,159,183,186,183,208,183],
[170,191,180,181,0,166,187,189,191,198],
[155,178,157,157,174,0,162,174,188,183],
[152,154,159,154,153,178,0,171,179,184],
[154,179,166,157,151,166,169,0,171,178],
[150,150,140,132,149,152,161,169,0,177],
[152,148,157,157,142,157,156,162,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,138,148,173,151,159,162,169,172],
[187,0,170,172,179,154,155,176,150,146],
[202,170,0,167,197,158,193,183,168,162],
[192,168,173,0,199,184,160,186,175,165],
[167,161,143,141,0,148,148,151,133,141],
[189,186,182,156,192,0,178,205,164,173],
[181,185,147,180,192,162,0,175,158,147],
[178,164,157,154,189,135,165,0,141,124],
[171,190,172,165,207,176,182,199,0,158],
[168,194,178,175,199,167,193,216,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,149,170,165,169,161,161,164,169],
[157,0,151,170,160,154,170,147,160,173],
[191,189,0,179,171,168,203,188,185,201],
[170,170,161,0,162,165,161,182,153,179],
[175,180,169,178,0,170,190,170,171,172],
[171,186,172,175,170,0,193,166,179,191],
[179,170,137,179,150,147,0,165,182,163],
[179,193,152,158,170,174,175,0,171,173],
[176,180,155,187,169,161,158,169,0,172],
[171,167,139,161,168,149,177,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,168,153,183,187,159,191,182,167],
[164,0,165,161,177,183,158,193,190,173],
[172,175,0,159,191,162,174,193,192,167],
[187,179,181,0,194,180,168,204,184,184],
[157,163,149,146,0,172,150,196,152,170],
[153,157,178,160,168,0,158,187,167,185],
[181,182,166,172,190,182,0,202,165,184],
[149,147,147,136,144,153,138,0,153,157],
[158,150,148,156,188,173,175,187,0,165],
[173,167,173,156,170,155,156,183,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,172,148,178,185,177,167,182,171],
[175,0,169,171,176,198,175,177,192,161],
[168,171,0,177,180,197,174,177,186,163],
[192,169,163,0,177,189,184,165,188,170],
[162,164,160,163,0,187,178,153,175,165],
[155,142,143,151,153,0,162,152,163,148],
[163,165,166,156,162,178,0,148,168,145],
[173,163,163,175,187,188,192,0,183,165],
[158,148,154,152,165,177,172,157,0,152],
[169,179,177,170,175,192,195,175,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,173,134,146,179,153,156,172,153],
[175,0,166,127,157,165,147,148,160,161],
[167,174,0,153,159,148,160,175,163,126],
[206,213,187,0,181,192,198,174,196,160],
[194,183,181,159,0,195,187,188,177,160],
[161,175,192,148,145,0,150,159,167,125],
[187,193,180,142,153,190,0,178,203,155],
[184,192,165,166,152,181,162,0,202,176],
[168,180,177,144,163,173,137,138,0,166],
[187,179,214,180,180,215,185,164,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,179,167,194,165,201,192,176,215],
[151,0,158,162,171,150,170,188,170,177],
[161,182,0,175,181,156,192,181,195,189],
[173,178,165,0,199,155,198,177,176,194],
[146,169,159,141,0,137,180,167,178,175],
[175,190,184,185,203,0,191,161,174,203],
[139,170,148,142,160,149,0,183,158,170],
[148,152,159,163,173,179,157,0,165,158],
[164,170,145,164,162,166,182,175,0,187],
[125,163,151,146,165,137,170,182,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,158,160,199,168,172,227,175],
[168,0,195,168,191,170,165,169,205,158],
[168,145,0,157,112,126,179,156,136,159],
[182,172,183,0,183,152,193,160,179,138],
[180,149,228,157,0,148,176,171,180,152],
[141,170,214,188,192,0,187,205,189,182],
[172,175,161,147,164,153,0,166,173,131],
[168,171,184,180,169,135,174,0,170,126],
[113,135,204,161,160,151,167,170,0,159],
[165,182,181,202,188,158,209,214,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,160,156,162,153,164,153,154,165],
[184,0,173,162,156,162,165,161,159,170],
[180,167,0,165,158,178,172,173,169,163],
[184,178,175,0,168,174,170,183,167,171],
[178,184,182,172,0,180,175,162,182,162],
[187,178,162,166,160,0,165,163,163,166],
[176,175,168,170,165,175,0,169,172,152],
[187,179,167,157,178,177,171,0,169,160],
[186,181,171,173,158,177,168,171,0,160],
[175,170,177,169,178,174,188,180,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,189,177,172,165,172,183,169,174],
[157,0,177,190,184,171,169,162,181,169],
[151,163,0,164,147,166,153,159,157,169],
[163,150,176,0,158,160,151,162,148,161],
[168,156,193,182,0,165,167,161,170,178],
[175,169,174,180,175,0,164,176,172,164],
[168,171,187,189,173,176,0,160,156,185],
[157,178,181,178,179,164,180,0,165,182],
[171,159,183,192,170,168,184,175,0,176],
[166,171,171,179,162,176,155,158,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,153,159,170,175,164,179,179,168],
[190,0,158,172,180,189,168,180,180,170],
[187,182,0,183,203,198,170,200,196,167],
[181,168,157,0,191,202,177,197,180,176],
[170,160,137,149,0,167,169,174,188,170],
[165,151,142,138,173,0,149,154,160,147],
[176,172,170,163,171,191,0,177,180,177],
[161,160,140,143,166,186,163,0,180,175],
[161,160,144,160,152,180,160,160,0,163],
[172,170,173,164,170,193,163,165,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,188,177,175,174,200,168,179,181],
[154,0,178,176,164,160,204,176,176,179],
[152,162,0,165,164,161,186,171,162,162],
[163,164,175,0,161,150,193,159,160,178],
[165,176,176,179,0,173,192,142,167,159],
[166,180,179,190,167,0,196,162,186,166],
[140,136,154,147,148,144,0,133,148,142],
[172,164,169,181,198,178,207,0,184,190],
[161,164,178,180,173,154,192,156,0,183],
[159,161,178,162,181,174,198,150,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,195,195,191,176,173,164,168,189],
[166,0,175,161,170,166,155,169,166,175],
[145,165,0,160,176,167,154,154,160,177],
[145,179,180,0,190,173,160,154,166,169],
[149,170,164,150,0,163,148,146,150,164],
[164,174,173,167,177,0,169,175,181,174],
[167,185,186,180,192,171,0,178,189,192],
[176,171,186,186,194,165,162,0,180,180],
[172,174,180,174,190,159,151,160,0,206],
[151,165,163,171,176,166,148,160,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,182,198,173,192,180,164,195,164],
[175,0,172,200,172,178,163,179,204,167],
[158,168,0,178,165,165,164,155,187,163],
[142,140,162,0,144,160,143,139,163,171],
[167,168,175,196,0,209,193,186,192,180],
[148,162,175,180,131,0,162,163,166,165],
[160,177,176,197,147,178,0,162,188,159],
[176,161,185,201,154,177,178,0,187,176],
[145,136,153,177,148,174,152,153,0,153],
[176,173,177,169,160,175,181,164,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,151,160,159,154,169,168,171,165],
[172,0,172,161,174,170,158,169,159,167],
[189,168,0,174,175,167,177,167,181,176],
[180,179,166,0,172,186,176,170,179,176],
[181,166,165,168,0,171,182,174,175,177],
[186,170,173,154,169,0,173,162,184,165],
[171,182,163,164,158,167,0,177,177,160],
[172,171,173,170,166,178,163,0,170,166],
[169,181,159,161,165,156,163,170,0,169],
[175,173,164,164,163,175,180,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,174,177,170,179,177,173,181,191],
[157,0,157,156,158,176,173,147,180,176],
[166,183,0,176,164,168,178,165,166,182],
[163,184,164,0,161,168,163,162,154,182],
[170,182,176,179,0,192,165,177,178,179],
[161,164,172,172,148,0,157,148,158,179],
[163,167,162,177,175,183,0,178,173,177],
[167,193,175,178,163,192,162,0,185,174],
[159,160,174,186,162,182,167,155,0,185],
[149,164,158,158,161,161,163,166,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,185,201,181,187,183,166,186,177],
[134,0,164,150,135,146,139,148,128,146],
[155,176,0,167,158,157,139,148,145,151],
[139,190,173,0,184,145,173,142,149,166],
[159,205,182,156,0,176,175,172,135,187],
[153,194,183,195,164,0,194,152,160,172],
[157,201,201,167,165,146,0,168,154,145],
[174,192,192,198,168,188,172,0,154,171],
[154,212,195,191,205,180,186,186,0,180],
[163,194,189,174,153,168,195,169,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,180,143,165,147,166,178,146,185],
[176,0,169,163,165,159,168,180,145,187],
[160,171,0,175,167,161,176,175,152,166],
[197,177,165,0,199,183,188,191,171,199],
[175,175,173,141,0,166,187,191,163,189],
[193,181,179,157,174,0,209,207,181,202],
[174,172,164,152,153,131,0,186,145,168],
[162,160,165,149,149,133,154,0,134,164],
[194,195,188,169,177,159,195,206,0,180],
[155,153,174,141,151,138,172,176,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,189,173,192,191,195,182,192,145],
[154,0,170,123,191,186,176,161,182,158],
[151,170,0,155,178,166,168,170,162,151],
[167,217,185,0,202,182,195,182,179,185],
[148,149,162,138,0,163,145,149,150,118],
[149,154,174,158,177,0,179,143,168,155],
[145,164,172,145,195,161,0,174,159,137],
[158,179,170,158,191,197,166,0,174,166],
[148,158,178,161,190,172,181,166,0,174],
[195,182,189,155,222,185,203,174,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,191,92,195,214,122,195,116,119],
[197,0,220,75,123,145,72,147,123,96],
[149,120,0,48,147,144,119,122,124,72],
[248,265,292,0,292,240,220,195,223,143],
[145,217,193,48,0,143,147,100,119,98],
[126,195,196,100,197,0,96,169,172,123],
[218,268,221,120,193,244,0,169,218,191],
[145,193,218,145,240,171,171,0,190,144],
[224,217,216,117,221,168,122,150,0,121],
[221,244,268,197,242,217,149,196,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,171,185,148,165,155,157,155,149],
[175,0,175,179,159,181,182,162,161,159],
[169,165,0,184,145,164,162,151,152,154],
[155,161,156,0,134,149,139,165,136,166],
[192,181,195,206,0,176,179,182,168,173],
[175,159,176,191,164,0,176,164,156,164],
[185,158,178,201,161,164,0,170,175,159],
[183,178,189,175,158,176,170,0,179,152],
[185,179,188,204,172,184,165,161,0,170],
[191,181,186,174,167,176,181,188,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,197,164,173,180,166,200,176,185],
[172,0,187,155,177,179,173,195,153,178],
[143,153,0,148,180,156,169,173,158,161],
[176,185,192,0,184,169,174,186,173,181],
[167,163,160,156,0,151,162,190,155,157],
[160,161,184,171,189,0,181,193,166,186],
[174,167,171,166,178,159,0,203,174,189],
[140,145,167,154,150,147,137,0,147,171],
[164,187,182,167,185,174,166,193,0,188],
[155,162,179,159,183,154,151,169,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,183,179,167,177,172,179,161,182],
[162,0,168,166,160,169,154,157,167,181],
[157,172,0,168,158,174,153,176,176,180],
[161,174,172,0,163,174,163,170,161,185],
[173,180,182,177,0,183,171,183,166,176],
[163,171,166,166,157,0,162,168,150,173],
[168,186,187,177,169,178,0,175,180,191],
[161,183,164,170,157,172,165,0,169,179],
[179,173,164,179,174,190,160,171,0,180],
[158,159,160,155,164,167,149,161,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,167,162,161,150,165,170,165,160],
[171,0,185,173,174,164,166,169,167,181],
[173,155,0,165,179,168,162,170,166,171],
[178,167,175,0,169,179,173,176,171,177],
[179,166,161,171,0,173,171,170,153,185],
[190,176,172,161,167,0,185,173,172,180],
[175,174,178,167,169,155,0,178,169,167],
[170,171,170,164,170,167,162,0,163,166],
[175,173,174,169,187,168,171,177,0,165],
[180,159,169,163,155,160,173,174,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,177,175,165,157,184,189,169,189],
[161,0,180,158,156,177,166,189,183,164],
[163,160,0,171,175,167,155,176,170,192],
[165,182,169,0,182,177,177,188,181,184],
[175,184,165,158,0,166,166,179,164,182],
[183,163,173,163,174,0,160,194,165,179],
[156,174,185,163,174,180,0,173,171,191],
[151,151,164,152,161,146,167,0,159,184],
[171,157,170,159,176,175,169,181,0,179],
[151,176,148,156,158,161,149,156,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,156,181,174,154,172,179,179,182],
[188,0,160,186,167,159,160,155,172,160],
[184,180,0,181,169,152,175,194,164,174],
[159,154,159,0,174,153,164,158,155,179],
[166,173,171,166,0,172,178,170,176,184],
[186,181,188,187,168,0,175,187,183,190],
[168,180,165,176,162,165,0,167,167,183],
[161,185,146,182,170,153,173,0,177,193],
[161,168,176,185,164,157,173,163,0,182],
[158,180,166,161,156,150,157,147,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,177,180,161,188,161,181,169],
[169,0,175,172,160,168,166,166,177,164],
[162,165,0,172,168,163,167,160,183,167],
[163,168,168,0,155,157,167,153,179,164],
[160,180,172,185,0,178,179,170,191,174],
[179,172,177,183,162,0,174,171,178,172],
[152,174,173,173,161,166,0,162,171,174],
[179,174,180,187,170,169,178,0,194,173],
[159,163,157,161,149,162,169,146,0,153],
[171,176,173,176,166,168,166,167,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,177,169,171,145,184,171,175,156],
[166,0,184,168,163,178,166,166,158,166],
[163,156,0,160,161,147,172,171,177,150],
[171,172,180,0,162,167,183,163,189,166],
[169,177,179,178,0,170,163,159,187,164],
[195,162,193,173,170,0,176,176,174,173],
[156,174,168,157,177,164,0,175,173,159],
[169,174,169,177,181,164,165,0,179,158],
[165,182,163,151,153,166,167,161,0,144],
[184,174,190,174,176,167,181,182,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,172,176,188,188,195,170,177,158],
[168,0,155,164,182,162,168,159,163,145],
[168,185,0,165,165,174,186,165,163,173],
[164,176,175,0,186,166,193,161,164,152],
[152,158,175,154,0,169,173,165,169,157],
[152,178,166,174,171,0,185,159,159,161],
[145,172,154,147,167,155,0,150,166,155],
[170,181,175,179,175,181,190,0,168,160],
[163,177,177,176,171,181,174,172,0,169],
[182,195,167,188,183,179,185,180,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,143,143,146,144,199,124,147,127],
[145,0,107,159,112,109,148,124,167,93],
[197,233,0,141,217,127,201,142,127,144],
[197,181,199,0,145,125,201,161,146,199],
[194,228,123,195,0,142,178,177,195,195],
[196,231,213,215,198,0,199,142,144,177],
[141,192,139,139,162,141,0,123,124,107],
[216,216,198,179,163,198,217,0,164,196],
[193,173,213,194,145,196,216,176,0,177],
[213,247,196,141,145,163,233,144,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,161,179,168,167,187,165,180],
[167,0,159,164,172,190,166,180,171,187],
[169,181,0,168,169,163,176,186,169,194],
[179,176,172,0,178,193,188,189,168,196],
[161,168,171,162,0,166,164,163,152,179],
[172,150,177,147,174,0,174,172,163,200],
[173,174,164,152,176,166,0,177,155,182],
[153,160,154,151,177,168,163,0,156,184],
[175,169,171,172,188,177,185,184,0,188],
[160,153,146,144,161,140,158,156,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,171,163,179,174,178,174,168,179],
[172,0,175,177,201,174,181,176,167,184],
[169,165,0,166,186,169,182,183,182,183],
[177,163,174,0,206,176,177,173,163,172],
[161,139,154,134,0,173,130,146,157,151],
[166,166,171,164,167,0,165,173,155,176],
[162,159,158,163,210,175,0,171,160,169],
[166,164,157,167,194,167,169,0,158,161],
[172,173,158,177,183,185,180,182,0,175],
[161,156,157,168,189,164,171,179,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,158,140,171,155,169,177,147,152],
[169,0,187,165,177,170,163,171,167,176],
[182,153,0,158,164,157,167,168,166,169],
[200,175,182,0,194,171,180,178,167,184],
[169,163,176,146,0,174,168,181,168,171],
[185,170,183,169,166,0,161,161,160,174],
[171,177,173,160,172,179,0,170,170,184],
[163,169,172,162,159,179,170,0,164,166],
[193,173,174,173,172,180,170,176,0,192],
[188,164,171,156,169,166,156,174,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,177,148,162,162,170,160,172,157],
[180,0,188,155,168,176,189,151,173,161],
[163,152,0,155,159,160,175,161,159,160],
[192,185,185,0,195,165,188,167,168,166],
[178,172,181,145,0,181,173,172,172,166],
[178,164,180,175,159,0,191,167,165,160],
[170,151,165,152,167,149,0,145,149,144],
[180,189,179,173,168,173,195,0,166,148],
[168,167,181,172,168,175,191,174,0,170],
[183,179,180,174,174,180,196,192,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,173,180,151,161,150,191,170,198],
[172,0,141,170,168,149,130,175,154,210],
[167,199,0,176,160,123,136,161,155,173],
[160,170,164,0,164,164,155,166,147,172],
[189,172,180,176,0,197,177,207,165,213],
[179,191,217,176,143,0,173,198,141,202],
[190,210,204,185,163,167,0,197,154,217],
[149,165,179,174,133,142,143,0,119,202],
[170,186,185,193,175,199,186,221,0,230],
[142,130,167,168,127,138,123,138,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,170,154,174,171,151,182,176],
[166,0,163,168,159,170,176,159,180,169],
[175,177,0,174,171,181,174,166,194,173],
[170,172,166,0,168,167,167,160,176,169],
[186,181,169,172,0,186,180,172,196,185],
[166,170,159,173,154,0,162,180,185,162],
[169,164,166,173,160,178,0,172,170,164],
[189,181,174,180,168,160,168,0,186,181],
[158,160,146,164,144,155,170,154,0,161],
[164,171,167,171,155,178,176,159,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,166,171,161,174,174,162,171,169],
[168,0,167,184,168,180,181,158,181,172],
[174,173,0,167,156,182,180,178,182,183],
[169,156,173,0,171,177,181,158,174,173],
[179,172,184,169,0,179,188,172,162,180],
[166,160,158,163,161,0,170,155,163,170],
[166,159,160,159,152,170,0,155,164,167],
[178,182,162,182,168,185,185,0,189,176],
[169,159,158,166,178,177,176,151,0,165],
[171,168,157,167,160,170,173,164,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,177,179,166,196,191,169,184],
[170,0,176,178,155,173,187,180,157,157],
[164,164,0,168,171,176,181,183,151,156],
[163,162,172,0,155,178,180,170,164,166],
[161,185,169,185,0,175,176,182,161,180],
[174,167,164,162,165,0,199,175,164,160],
[144,153,159,160,164,141,0,152,143,147],
[149,160,157,170,158,165,188,0,155,155],
[171,183,189,176,179,176,197,185,0,169],
[156,183,184,174,160,180,193,185,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,201,176,167,176,191,201,209,182],
[136,0,163,140,143,151,185,157,175,160],
[139,177,0,144,144,151,173,168,167,144],
[164,200,196,0,166,166,179,190,176,162],
[173,197,196,174,0,157,185,171,174,179],
[164,189,189,174,183,0,208,189,200,189],
[149,155,167,161,155,132,0,148,163,151],
[139,183,172,150,169,151,192,0,180,160],
[131,165,173,164,166,140,177,160,0,147],
[158,180,196,178,161,151,189,180,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,172,170,177,157,168,166,172,174],
[158,0,156,175,167,167,167,156,160,158],
[168,184,0,181,165,176,175,150,170,167],
[170,165,159,0,174,150,161,149,159,166],
[163,173,175,166,0,173,174,164,168,171],
[183,173,164,190,167,0,184,176,167,183],
[172,173,165,179,166,156,0,173,174,170],
[174,184,190,191,176,164,167,0,182,182],
[168,180,170,181,172,173,166,158,0,177],
[166,182,173,174,169,157,170,158,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,171,192,183,176,167,180,167],
[167,0,163,168,188,170,172,157,171,175],
[174,177,0,164,192,174,183,170,175,172],
[169,172,176,0,188,186,169,180,179,164],
[148,152,148,152,0,162,157,153,158,162],
[157,170,166,154,178,0,164,165,167,165],
[164,168,157,171,183,176,0,178,177,173],
[173,183,170,160,187,175,162,0,180,177],
[160,169,165,161,182,173,163,160,0,171],
[173,165,168,176,178,175,167,163,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,178,169,169,165,168,170,179,161],
[181,0,175,170,179,179,178,172,184,171],
[162,165,0,150,171,171,173,172,169,172],
[171,170,190,0,190,184,166,174,181,186],
[171,161,169,150,0,173,160,162,171,160],
[175,161,169,156,167,0,155,154,179,159],
[172,162,167,174,180,185,0,188,185,161],
[170,168,168,166,178,186,152,0,185,162],
[161,156,171,159,169,161,155,155,0,161],
[179,169,168,154,180,181,179,178,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,177,183,179,178,171,188,177,169],
[162,0,181,169,156,162,156,171,168,162],
[163,159,0,163,170,163,163,168,170,172],
[157,171,177,0,162,155,149,178,172,170],
[161,184,170,178,0,164,170,185,176,168],
[162,178,177,185,176,0,175,193,171,178],
[169,184,177,191,170,165,0,175,174,178],
[152,169,172,162,155,147,165,0,162,153],
[163,172,170,168,164,169,166,178,0,170],
[171,178,168,170,172,162,162,187,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,132,143,143,157,150,154,140,141],
[182,0,160,177,165,161,163,200,173,157],
[208,180,0,177,167,173,165,182,170,184],
[197,163,163,0,164,162,175,183,179,149],
[197,175,173,176,0,188,163,189,168,167],
[183,179,167,178,152,0,150,190,158,144],
[190,177,175,165,177,190,0,198,152,161],
[186,140,158,157,151,150,142,0,155,140],
[200,167,170,161,172,182,188,185,0,179],
[199,183,156,191,173,196,179,200,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,85,0,170,255,170,170,255,0],
[255,0,340,170,255,255,170,85,340,255],
[255,0,0,85,85,255,170,85,255,85],
[340,170,255,0,170,255,255,255,255,340],
[170,85,255,170,0,170,170,85,170,170],
[85,85,85,85,170,0,170,85,255,85],
[170,170,170,85,170,170,0,170,170,85],
[170,255,255,85,255,255,170,0,255,170],
[85,0,85,85,170,85,170,85,0,85],
[340,85,255,0,170,255,255,170,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,173,173,183,175,157,165,173,185],
[182,0,189,169,184,180,170,181,183,194],
[167,151,0,154,163,173,153,174,165,181],
[167,171,186,0,181,179,157,179,179,187],
[157,156,177,159,0,161,157,164,167,176],
[165,160,167,161,179,0,160,165,179,177],
[183,170,187,183,183,180,0,188,166,196],
[175,159,166,161,176,175,152,0,160,180],
[167,157,175,161,173,161,174,180,0,190],
[155,146,159,153,164,163,144,160,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,185,171,170,168,179,172,182,178],
[164,0,184,160,172,163,166,168,162,182],
[155,156,0,151,165,143,166,163,162,169],
[169,180,189,0,183,171,168,179,183,201],
[170,168,175,157,0,149,166,164,177,182],
[172,177,197,169,191,0,185,180,192,191],
[161,174,174,172,174,155,0,167,173,170],
[168,172,177,161,176,160,173,0,180,176],
[158,178,178,157,163,148,167,160,0,175],
[162,158,171,139,158,149,170,164,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,165,160,188,173,183,184,177,174],
[165,0,168,171,176,167,176,175,167,176],
[175,172,0,164,184,168,177,164,177,179],
[180,169,176,0,177,170,169,171,169,168],
[152,164,156,163,0,158,164,159,169,163],
[167,173,172,170,182,0,179,172,165,182],
[157,164,163,171,176,161,0,159,168,165],
[156,165,176,169,181,168,181,0,170,169],
[163,173,163,171,171,175,172,170,0,172],
[166,164,161,172,177,158,175,171,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,161,158,168,173,168,160,166,175],
[173,0,160,163,160,163,163,161,159,171],
[179,180,0,178,174,175,174,168,172,191],
[182,177,162,0,160,180,163,164,170,174],
[172,180,166,180,0,183,171,171,181,177],
[167,177,165,160,157,0,163,172,163,171],
[172,177,166,177,169,177,0,169,181,191],
[180,179,172,176,169,168,171,0,188,179],
[174,181,168,170,159,177,159,152,0,166],
[165,169,149,166,163,169,149,161,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,169,179,177,161,163,182,162,174],
[155,0,158,164,183,133,156,173,146,153],
[171,182,0,178,173,158,160,186,158,167],
[161,176,162,0,183,166,164,165,155,167],
[163,157,167,157,0,159,156,173,152,159],
[179,207,182,174,181,0,162,197,174,182],
[177,184,180,176,184,178,0,178,167,173],
[158,167,154,175,167,143,162,0,160,155],
[178,194,182,185,188,166,173,180,0,179],
[166,187,173,173,181,158,167,185,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,181,171,166,175,164,178,168,177],
[167,0,171,174,179,174,171,168,181,158],
[159,169,0,165,157,169,164,163,172,159],
[169,166,175,0,182,169,176,169,178,156],
[174,161,183,158,0,169,153,170,170,184],
[165,166,171,171,171,0,180,186,177,157],
[176,169,176,164,187,160,0,175,172,158],
[162,172,177,171,170,154,165,0,168,169],
[172,159,168,162,170,163,168,172,0,161],
[163,182,181,184,156,183,182,171,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,163,164,151,162,152,161,130,130],
[181,0,176,185,167,173,178,179,168,161],
[177,164,0,152,140,166,158,155,155,160],
[176,155,188,0,159,178,182,177,170,154],
[189,173,200,181,0,187,179,166,194,175],
[178,167,174,162,153,0,179,158,167,171],
[188,162,182,158,161,161,0,159,162,183],
[179,161,185,163,174,182,181,0,164,170],
[210,172,185,170,146,173,178,176,0,163],
[210,179,180,186,165,169,157,170,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,160,192,147,171,170,188,165,182],
[168,0,173,181,169,163,165,184,182,175],
[180,167,0,194,171,171,178,170,181,181],
[148,159,146,0,137,145,156,155,145,154],
[193,171,169,203,0,192,170,187,177,174],
[169,177,169,195,148,0,161,187,160,171],
[170,175,162,184,170,179,0,186,163,173],
[152,156,170,185,153,153,154,0,142,162],
[175,158,159,195,163,180,177,198,0,170],
[158,165,159,186,166,169,167,178,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,163,167,172,176,168,168,170,169],
[182,0,171,168,195,185,172,188,168,172],
[177,169,0,172,182,178,191,180,187,171],
[173,172,168,0,171,168,174,176,170,159],
[168,145,158,169,0,154,148,177,158,164],
[164,155,162,172,186,0,144,180,163,183],
[172,168,149,166,192,196,0,192,169,163],
[172,152,160,164,163,160,148,0,155,152],
[170,172,153,170,182,177,171,185,0,182],
[171,168,169,181,176,157,177,188,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,176,166,181,167,172,175,186,164],
[171,0,168,167,172,166,164,179,171,162],
[164,172,0,160,172,159,158,163,172,161],
[174,173,180,0,172,175,167,170,176,175],
[159,168,168,168,0,158,171,158,166,170],
[173,174,181,165,182,0,158,179,174,177],
[168,176,182,173,169,182,0,172,191,182],
[165,161,177,170,182,161,168,0,181,178],
[154,169,168,164,174,166,149,159,0,164],
[176,178,179,165,170,163,158,162,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,188,303,153,228,150,266,189,189],
[76,0,188,303,152,189,150,188,188,188],
[152,152,0,267,193,191,150,228,153,154],
[37,37,73,0,76,152,150,188,114,115],
[187,188,147,264,0,187,223,225,189,187],
[112,151,149,188,153,0,112,114,153,76],
[190,190,190,190,117,228,0,191,151,190],
[74,152,112,152,115,226,149,0,188,76],
[151,152,187,226,151,187,189,152,0,151],
[151,152,186,225,153,264,150,264,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,186,155,181,162,179,160,166,157],
[169,0,210,161,162,161,181,192,158,172],
[154,130,0,152,145,142,163,144,161,154],
[185,179,188,0,171,171,199,178,156,157],
[159,178,195,169,0,162,190,199,166,164],
[178,179,198,169,178,0,168,166,173,167],
[161,159,177,141,150,172,0,212,142,152],
[180,148,196,162,141,174,128,0,170,150],
[174,182,179,184,174,167,198,170,0,140],
[183,168,186,183,176,173,188,190,200,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,182,169,144,171,176,173,163,172],
[179,0,195,190,168,158,155,189,184,197],
[158,145,0,173,136,136,147,166,157,192],
[171,150,167,0,148,151,165,170,164,157],
[196,172,204,192,0,138,173,196,176,178],
[169,182,204,189,202,0,166,188,196,165],
[164,185,193,175,167,174,0,187,168,178],
[167,151,174,170,144,152,153,0,164,160],
[177,156,183,176,164,144,172,176,0,161],
[168,143,148,183,162,175,162,180,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,179,185,172,193,173,185,178,201],
[176,0,177,166,169,181,166,188,194,183],
[161,163,0,167,168,180,160,172,161,187],
[155,174,173,0,186,195,167,181,190,185],
[168,171,172,154,0,173,158,161,157,175],
[147,159,160,145,167,0,152,173,163,172],
[167,174,180,173,182,188,0,194,197,180],
[155,152,168,159,179,167,146,0,166,169],
[162,146,179,150,183,177,143,174,0,162],
[139,157,153,155,165,168,160,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,168,157,197,195,170,175,160,163],
[174,0,187,182,189,180,165,180,160,175],
[172,153,0,174,165,197,156,148,155,157],
[183,158,166,0,175,185,172,154,157,173],
[143,151,175,165,0,182,180,159,157,153],
[145,160,143,155,158,0,154,150,149,147],
[170,175,184,168,160,186,0,178,169,176],
[165,160,192,186,181,190,162,0,170,157],
[180,180,185,183,183,191,171,170,0,167],
[177,165,183,167,187,193,164,183,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,173,183,177,191,180,178,169,179],
[158,0,158,175,172,181,175,177,162,181],
[167,182,0,183,177,171,187,167,174,182],
[157,165,157,0,172,174,170,181,170,171],
[163,168,163,168,0,185,167,167,174,159],
[149,159,169,166,155,0,166,164,161,166],
[160,165,153,170,173,174,0,173,168,157],
[162,163,173,159,173,176,167,0,167,154],
[171,178,166,170,166,179,172,173,0,158],
[161,159,158,169,181,174,183,186,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,176,171,176,162,170,183,182,168],
[158,0,159,164,157,159,158,152,161,161],
[164,181,0,155,162,159,174,164,168,169],
[169,176,185,0,166,162,164,162,177,169],
[164,183,178,174,0,166,164,174,180,177],
[178,181,181,178,174,0,164,171,167,176],
[170,182,166,176,176,176,0,171,180,158],
[157,188,176,178,166,169,169,0,180,175],
[158,179,172,163,160,173,160,160,0,166],
[172,179,171,171,163,164,182,165,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,181,150,153,148,161,151,167,156],
[189,0,171,154,166,146,168,169,165,170],
[159,169,0,172,174,170,191,166,151,169],
[190,186,168,0,187,166,183,169,174,188],
[187,174,166,153,0,162,159,177,158,186],
[192,194,170,174,178,0,182,163,180,198],
[179,172,149,157,181,158,0,181,165,183],
[189,171,174,171,163,177,159,0,171,152],
[173,175,189,166,182,160,175,169,0,167],
[184,170,171,152,154,142,157,188,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,118,158,138,219,179,118,97,140],
[178,0,140,137,196,220,179,138,176,140],
[222,200,0,159,260,180,160,160,138,161],
[182,203,181,0,241,239,221,139,159,180],
[202,144,80,99,0,161,161,98,119,161],
[121,120,160,101,179,0,82,139,140,181],
[161,161,180,119,179,258,0,118,119,179],
[222,202,180,201,242,201,222,0,160,222],
[243,164,202,181,221,200,221,180,0,202],
[200,200,179,160,179,159,161,118,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,163,186,170,183,172,189,184,188],
[175,0,191,199,176,189,166,189,172,185],
[177,149,0,187,166,177,162,174,156,161],
[154,141,153,0,144,167,140,173,142,141],
[170,164,174,196,0,174,157,184,184,160],
[157,151,163,173,166,0,158,176,149,148],
[168,174,178,200,183,182,0,201,171,182],
[151,151,166,167,156,164,139,0,153,168],
[156,168,184,198,156,191,169,187,0,171],
[152,155,179,199,180,192,158,172,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,178,173,164,170,168,177,170,173],
[163,0,169,178,169,169,175,175,170,160],
[162,171,0,164,163,175,168,175,161,161],
[167,162,176,0,161,169,164,177,172,169],
[176,171,177,179,0,182,179,178,175,169],
[170,171,165,171,158,0,167,176,169,161],
[172,165,172,176,161,173,0,178,163,158],
[163,165,165,163,162,164,162,0,161,159],
[170,170,179,168,165,171,177,179,0,163],
[167,180,179,171,171,179,182,181,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,154,171,173,188,192,161,174,170],
[161,0,162,186,158,180,183,176,186,205],
[186,178,0,163,165,182,188,171,184,183],
[169,154,177,0,163,175,194,169,174,175],
[167,182,175,177,0,185,183,176,180,203],
[152,160,158,165,155,0,177,160,184,189],
[148,157,152,146,157,163,0,153,158,164],
[179,164,169,171,164,180,187,0,159,169],
[166,154,156,166,160,156,182,181,0,180],
[170,135,157,165,137,151,176,171,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,178,171,169,173,183,175,169,164],
[176,0,180,171,166,163,173,167,177,176],
[162,160,0,169,163,157,167,163,163,163],
[169,169,171,0,172,180,177,167,190,156],
[171,174,177,168,0,165,177,159,177,164],
[167,177,183,160,175,0,187,176,193,161],
[157,167,173,163,163,153,0,161,165,156],
[165,173,177,173,181,164,179,0,199,167],
[171,163,177,150,163,147,175,141,0,153],
[176,164,177,184,176,179,184,173,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,162,168,189,164,172,173,155,167],
[172,0,167,173,172,170,163,168,160,179],
[178,173,0,180,184,178,169,177,170,170],
[172,167,160,0,181,170,166,176,161,180],
[151,168,156,159,0,156,165,152,146,171],
[176,170,162,170,184,0,168,161,165,177],
[168,177,171,174,175,172,0,182,157,186],
[167,172,163,164,188,179,158,0,166,172],
[185,180,170,179,194,175,183,174,0,183],
[173,161,170,160,169,163,154,168,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,167,188,150,182,163,161,190,187],
[154,0,167,152,167,143,145,163,177,167],
[173,173,0,167,179,176,192,178,193,213],
[152,188,173,0,162,171,168,152,176,173],
[190,173,161,178,0,169,188,177,206,188],
[158,197,164,169,171,0,175,173,200,198],
[177,195,148,172,152,165,0,149,184,174],
[179,177,162,188,163,167,191,0,192,182],
[150,163,147,164,134,140,156,148,0,175],
[153,173,127,167,152,142,166,158,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,182,176,188,164,162,167,180,158],
[159,0,142,167,165,164,148,154,175,155],
[158,198,0,181,167,159,156,160,184,160],
[164,173,159,0,170,166,153,138,186,165],
[152,175,173,170,0,163,151,160,171,164],
[176,176,181,174,177,0,160,165,173,177],
[178,192,184,187,189,180,0,178,192,170],
[173,186,180,202,180,175,162,0,189,188],
[160,165,156,154,169,167,148,151,0,168],
[182,185,180,175,176,163,170,152,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,162,188,177,184,174,189,184,193],
[144,0,152,160,157,153,169,152,168,169],
[178,188,0,181,178,176,169,178,190,186],
[152,180,159,0,177,174,159,178,170,190],
[163,183,162,163,0,156,154,168,180,173],
[156,187,164,166,184,0,171,178,168,184],
[166,171,171,181,186,169,0,186,172,182],
[151,188,162,162,172,162,154,0,172,179],
[156,172,150,170,160,172,168,168,0,170],
[147,171,154,150,167,156,158,161,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,145,156,170,173,149,165,183,154],
[182,0,167,163,182,168,181,179,195,157],
[195,173,0,166,186,168,165,176,195,172],
[184,177,174,0,175,188,169,158,189,165],
[170,158,154,165,0,166,164,165,185,149],
[167,172,172,152,174,0,180,160,190,175],
[191,159,175,171,176,160,0,168,192,155],
[175,161,164,182,175,180,172,0,183,150],
[157,145,145,151,155,150,148,157,0,158],
[186,183,168,175,191,165,185,190,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,185,165,168,187,169,158,170,175],
[174,0,174,167,169,175,162,144,175,180],
[155,166,0,162,161,171,170,140,166,151],
[175,173,178,0,168,177,185,171,171,173],
[172,171,179,172,0,177,182,162,180,163],
[153,165,169,163,163,0,167,163,169,162],
[171,178,170,155,158,173,0,160,171,162],
[182,196,200,169,178,177,180,0,159,184],
[170,165,174,169,160,171,169,181,0,162],
[165,160,189,167,177,178,178,156,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,173,160,154,154,160,156,169,176],
[190,0,198,173,178,179,160,167,185,189],
[167,142,0,155,164,158,151,154,175,169],
[180,167,185,0,165,159,151,165,179,177],
[186,162,176,175,0,166,155,172,197,174],
[186,161,182,181,174,0,173,154,193,188],
[180,180,189,189,185,167,0,173,182,182],
[184,173,186,175,168,186,167,0,177,188],
[171,155,165,161,143,147,158,163,0,169],
[164,151,171,163,166,152,158,152,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,164,157,146,149,169,153,156,156],
[176,0,153,159,157,146,140,147,157,154],
[176,187,0,178,169,164,174,171,153,158],
[183,181,162,0,163,176,184,167,170,166],
[194,183,171,177,0,180,164,156,164,168],
[191,194,176,164,160,0,172,156,171,161],
[171,200,166,156,176,168,0,165,155,173],
[187,193,169,173,184,184,175,0,159,162],
[184,183,187,170,176,169,185,181,0,174],
[184,186,182,174,172,179,167,178,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,171,179,163,164,177,179,169],
[167,0,167,155,165,159,162,166,162,164],
[168,173,0,172,174,151,173,184,173,170],
[169,185,168,0,177,162,169,158,185,159],
[161,175,166,163,0,169,149,169,182,154],
[177,181,189,178,171,0,167,188,177,172],
[176,178,167,171,191,173,0,181,191,172],
[163,174,156,182,171,152,159,0,169,155],
[161,178,167,155,158,163,149,171,0,150],
[171,176,170,181,186,168,168,185,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,195,240,291,246,240,193,240,143],
[147,0,196,191,196,148,147,94,291,143],
[145,144,0,191,291,197,191,144,191,143],
[100,149,149,0,197,197,197,149,245,243],
[49,144,49,143,0,97,49,144,192,46],
[94,192,143,143,243,0,94,143,143,143],
[100,193,149,143,291,246,0,95,243,95],
[147,246,196,191,196,197,245,0,291,191],
[100,49,149,95,148,197,97,49,0,94],
[197,197,197,97,294,197,245,149,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,172,177,174,177,177,187,156,160],
[180,0,173,163,172,175,175,188,154,166],
[168,167,0,170,164,164,170,182,147,156],
[163,177,170,0,176,166,181,181,173,166],
[166,168,176,164,0,169,168,189,169,166],
[163,165,176,174,171,0,183,187,172,162],
[163,165,170,159,172,157,0,181,167,170],
[153,152,158,159,151,153,159,0,147,152],
[184,186,193,167,171,168,173,193,0,174],
[180,174,184,174,174,178,170,188,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,340,85,340,170,255,255,170,255],
[0,0,85,0,170,0,0,85,0,85],
[0,255,0,85,170,170,0,85,85,0],
[255,340,255,0,340,340,255,255,170,255],
[0,170,170,0,0,170,0,85,85,85],
[170,340,170,0,170,0,170,170,170,170],
[85,340,340,85,340,170,0,340,170,255],
[85,255,255,85,255,170,0,0,170,85],
[170,340,255,170,255,170,170,170,0,170],
[85,255,340,85,255,170,85,255,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,198,209,166,167,173,173,189,183],
[147,0,166,160,169,159,147,149,168,160],
[142,174,0,166,171,153,182,148,175,175],
[131,180,174,0,169,149,173,149,169,166],
[174,171,169,171,0,170,177,156,176,168],
[173,181,187,191,170,0,177,169,169,164],
[167,193,158,167,163,163,0,154,172,176],
[167,191,192,191,184,171,186,0,182,191],
[151,172,165,171,164,171,168,158,0,168],
[157,180,165,174,172,176,164,149,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,156,144,190,198,178,161,193,201],
[157,0,197,167,180,137,194,154,174,167],
[184,143,0,143,134,136,149,165,147,144],
[196,173,197,0,163,176,211,175,168,177],
[150,160,206,177,0,171,182,202,161,164],
[142,203,204,164,169,0,203,177,185,192],
[162,146,191,129,158,137,0,172,146,141],
[179,186,175,165,138,163,168,0,173,128],
[147,166,193,172,179,155,194,167,0,185],
[139,173,196,163,176,148,199,212,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,161,164,159,173,156,165,166,161],
[176,0,178,184,174,184,161,188,176,168],
[179,162,0,174,175,180,174,189,185,175],
[176,156,166,0,183,164,165,183,173,153],
[181,166,165,157,0,170,172,174,171,156],
[167,156,160,176,170,0,171,188,173,175],
[184,179,166,175,168,169,0,183,173,154],
[175,152,151,157,166,152,157,0,169,156],
[174,164,155,167,169,167,167,171,0,153],
[179,172,165,187,184,165,186,184,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,174,171,170,171,154,155,145,170],
[193,0,153,149,181,161,138,157,148,165],
[166,187,0,193,175,189,152,178,144,177],
[169,191,147,0,173,160,168,169,151,186],
[170,159,165,167,0,177,149,181,143,173],
[169,179,151,180,163,0,154,151,177,204],
[186,202,188,172,191,186,0,193,145,181],
[185,183,162,171,159,189,147,0,164,178],
[195,192,196,189,197,163,195,176,0,184],
[170,175,163,154,167,136,159,162,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,223,168,188,182,190,185,243,215],
[131,0,157,100,166,152,141,153,196,165],
[117,183,0,118,164,148,133,161,184,172],
[172,240,222,0,164,206,197,187,217,211],
[152,174,176,176,0,218,188,208,229,200],
[158,188,192,134,122,0,167,134,208,181],
[150,199,207,143,152,173,0,188,183,222],
[155,187,179,153,132,206,152,0,172,197],
[97,144,156,123,111,132,157,168,0,180],
[125,175,168,129,140,159,118,143,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,182,172,163,174,168,179,176,185],
[167,0,173,178,146,166,164,174,170,187],
[158,167,0,173,163,179,159,162,168,187],
[168,162,167,0,159,163,165,165,164,172],
[177,194,177,181,0,166,166,178,170,176],
[166,174,161,177,174,0,176,182,188,191],
[172,176,181,175,174,164,0,190,165,187],
[161,166,178,175,162,158,150,0,156,162],
[164,170,172,176,170,152,175,184,0,178],
[155,153,153,168,164,149,153,178,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,168,167,162,163,159,167,165,156],
[183,0,161,184,180,170,167,176,175,161],
[172,179,0,187,179,173,177,170,182,166],
[173,156,153,0,176,172,160,158,163,155],
[178,160,161,164,0,174,172,159,177,155],
[177,170,167,168,166,0,172,169,172,163],
[181,173,163,180,168,168,0,176,185,171],
[173,164,170,182,181,171,164,0,172,161],
[175,165,158,177,163,168,155,168,0,167],
[184,179,174,185,185,177,169,179,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,148,179,173,172,186,158,178,142],
[167,0,156,130,151,164,169,137,160,170],
[192,184,0,182,162,169,189,147,183,175],
[161,210,158,0,185,186,174,181,189,180],
[167,189,178,155,0,161,158,155,185,171],
[168,176,171,154,179,0,155,160,187,184],
[154,171,151,166,182,185,0,170,166,152],
[182,203,193,159,185,180,170,0,197,187],
[162,180,157,151,155,153,174,143,0,149],
[198,170,165,160,169,156,188,153,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,206,167,205,171,153,168,198,199],
[154,0,175,151,178,144,159,150,164,176],
[134,165,0,183,150,146,170,167,152,160],
[173,189,157,0,164,190,157,153,159,166],
[135,162,190,176,0,173,166,156,163,174],
[169,196,194,150,167,0,168,161,174,189],
[187,181,170,183,174,172,0,192,166,175],
[172,190,173,187,184,179,148,0,181,200],
[142,176,188,181,177,166,174,159,0,191],
[141,164,180,174,166,151,165,140,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,184,178,175,176,169,164,176,192],
[174,0,170,166,175,182,186,177,164,178],
[156,170,0,142,164,171,161,181,160,172],
[162,174,198,0,170,186,176,173,161,189],
[165,165,176,170,0,182,175,170,191,179],
[164,158,169,154,158,0,176,162,148,169],
[171,154,179,164,165,164,0,157,164,175],
[176,163,159,167,170,178,183,0,182,167],
[164,176,180,179,149,192,176,158,0,166],
[148,162,168,151,161,171,165,173,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,152,156,158,183,181,196,177,166],
[171,0,149,170,152,168,173,190,188,159],
[188,191,0,172,156,178,186,187,195,172],
[184,170,168,0,175,175,204,200,178,176],
[182,188,184,165,0,170,184,182,178,173],
[157,172,162,165,170,0,190,193,181,168],
[159,167,154,136,156,150,0,171,166,149],
[144,150,153,140,158,147,169,0,165,152],
[163,152,145,162,162,159,174,175,0,163],
[174,181,168,164,167,172,191,188,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,186,166,164,193,179,154,145,186],
[184,0,155,180,173,195,191,162,157,183],
[154,185,0,182,166,181,159,163,156,175],
[174,160,158,0,175,193,167,178,166,186],
[176,167,174,165,0,183,184,180,187,171],
[147,145,159,147,157,0,164,137,132,160],
[161,149,181,173,156,176,0,156,162,158],
[186,178,177,162,160,203,184,0,163,180],
[195,183,184,174,153,208,178,177,0,181],
[154,157,165,154,169,180,182,160,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,168,166,168,170,157,163,162,159],
[175,0,167,166,164,170,160,160,165,155],
[172,173,0,166,173,179,167,160,177,160],
[174,174,174,0,170,180,175,167,171,183],
[172,176,167,170,0,161,159,169,158,155],
[170,170,161,160,179,0,161,167,168,162],
[183,180,173,165,181,179,0,170,175,166],
[177,180,180,173,171,173,170,0,165,185],
[178,175,163,169,182,172,165,175,0,151],
[181,185,180,157,185,178,174,155,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,178,169,169,189,174,181,179,187],
[170,0,168,172,177,182,184,189,170,176],
[162,172,0,165,166,178,167,183,170,178],
[171,168,175,0,174,187,175,180,177,187],
[171,163,174,166,0,188,168,187,173,184],
[151,158,162,153,152,0,165,186,160,176],
[166,156,173,165,172,175,0,188,170,163],
[159,151,157,160,153,154,152,0,165,171],
[161,170,170,163,167,180,170,175,0,172],
[153,164,162,153,156,164,177,169,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,146,167,169,169,219,171,148,192],
[75,0,123,72,146,73,97,171,147,144],
[194,217,0,167,146,170,170,198,143,169],
[173,268,173,0,194,169,171,172,197,217],
[171,194,194,146,0,169,171,194,219,193],
[171,267,170,171,171,0,195,196,173,193],
[121,243,170,169,169,145,0,171,168,167],
[169,169,142,168,146,144,169,0,143,217],
[192,193,197,143,121,167,172,197,0,167],
[148,196,171,123,147,147,173,123,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,168,170,181,176,157,169,179,172],
[171,0,161,172,175,167,172,174,183,164],
[172,179,0,162,171,170,170,176,166,169],
[170,168,178,0,166,169,152,170,173,155],
[159,165,169,174,0,162,156,174,167,154],
[164,173,170,171,178,0,163,165,167,165],
[183,168,170,188,184,177,0,163,187,171],
[171,166,164,170,166,175,177,0,175,166],
[161,157,174,167,173,173,153,165,0,172],
[168,176,171,185,186,175,169,174,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,171,163,145,148,141,174,170,150],
[180,0,169,164,163,163,168,184,168,171],
[169,171,0,162,154,162,146,185,160,145],
[177,176,178,0,172,158,164,180,161,181],
[195,177,186,168,0,167,161,184,171,188],
[192,177,178,182,173,0,156,185,177,192],
[199,172,194,176,179,184,0,183,164,178],
[166,156,155,160,156,155,157,0,178,142],
[170,172,180,179,169,163,176,162,0,182],
[190,169,195,159,152,148,162,198,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,182,171,158,183,177,173,177,156],
[172,0,186,157,149,161,164,165,161,162],
[158,154,0,182,141,176,160,156,176,141],
[169,183,158,0,157,168,160,169,178,161],
[182,191,199,183,0,166,173,164,180,171],
[157,179,164,172,174,0,165,160,163,168],
[163,176,180,180,167,175,0,168,157,170],
[167,175,184,171,176,180,172,0,162,171],
[163,179,164,162,160,177,183,178,0,162],
[184,178,199,179,169,172,170,169,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,147,116,206,147,130,129,105,117],
[191,0,162,162,207,190,176,143,176,235],
[193,178,0,149,205,192,192,160,105,165],
[224,178,191,0,220,192,209,176,134,178],
[134,133,135,120,0,148,206,145,104,72],
[193,150,148,148,192,0,176,146,136,165],
[210,164,148,131,134,164,0,145,104,147],
[211,197,180,164,195,194,195,0,182,165],
[235,164,235,206,236,204,236,158,0,207],
[223,105,175,162,268,175,193,175,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,154,205,188,171,153,156,191,208],
[187,0,136,169,119,186,167,136,223,224],
[186,204,0,157,243,204,204,189,202,224],
[135,171,183,0,203,184,169,186,185,220],
[152,221,97,137,0,171,170,154,187,223],
[169,154,136,156,169,0,182,170,240,257],
[187,173,136,171,170,158,0,172,222,225],
[184,204,151,154,186,170,168,0,201,223],
[149,117,138,155,153,100,118,139,0,171],
[132,116,116,120,117,83,115,117,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,139,161,159,181,136,179,119,135],
[184,0,165,145,200,181,101,201,99,98],
[201,175,0,185,139,176,78,219,180,197],
[179,195,155,0,178,154,196,218,217,175],
[181,140,201,162,0,162,98,163,121,142],
[159,159,164,186,178,0,139,183,142,119],
[204,239,262,144,242,201,0,161,141,200],
[161,139,121,122,177,157,179,0,138,118],
[221,241,160,123,219,198,199,202,0,198],
[205,242,143,165,198,221,140,222,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,193,193,241,264,193,169,241,194],
[148,0,220,218,219,192,120,146,195,147],
[147,120,0,120,195,167,121,144,144,169],
[147,122,220,0,145,144,146,121,145,123],
[99,121,145,195,0,191,97,195,118,121],
[76,148,173,196,149,0,174,52,172,149],
[147,220,219,194,243,166,0,169,194,172],
[171,194,196,219,145,288,171,0,144,146],
[99,145,196,195,222,168,146,196,0,196],
[146,193,171,217,219,191,168,194,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,176,218,197,230,180,167,176,203],
[191,0,172,180,202,197,188,182,200,170],
[164,168,0,199,184,201,168,168,163,164],
[122,160,141,0,167,175,164,128,162,162],
[143,138,156,173,0,176,136,152,141,119],
[110,143,139,165,164,0,139,142,152,169],
[160,152,172,176,204,201,0,186,189,136],
[173,158,172,212,188,198,154,0,129,149],
[164,140,177,178,199,188,151,211,0,159],
[137,170,176,178,221,171,204,191,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,166,194,171,170,177,167,189,194],
[151,0,155,151,139,163,130,150,156,161],
[174,185,0,166,151,168,151,153,166,164],
[146,189,174,0,176,180,155,170,175,170],
[169,201,189,164,0,194,154,171,163,199],
[170,177,172,160,146,0,154,149,168,189],
[163,210,189,185,186,186,0,168,189,197],
[173,190,187,170,169,191,172,0,176,193],
[151,184,174,165,177,172,151,164,0,195],
[146,179,176,170,141,151,143,147,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,181,159,193,177,173,168,171,146],
[179,0,176,159,205,180,187,173,181,147],
[159,164,0,153,171,143,172,158,144,144],
[181,181,187,0,182,161,167,161,179,162],
[147,135,169,158,0,146,175,161,171,136],
[163,160,197,179,194,0,172,186,165,161],
[167,153,168,173,165,168,0,163,176,148],
[172,167,182,179,179,154,177,0,171,152],
[169,159,196,161,169,175,164,169,0,177],
[194,193,196,178,204,179,192,188,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,166,182,170,172,172,180,178,157],
[167,0,162,182,174,177,168,173,164,161],
[174,178,0,185,169,165,183,177,179,176],
[158,158,155,0,157,162,167,166,163,169],
[170,166,171,183,0,160,178,163,160,170],
[168,163,175,178,180,0,168,174,161,160],
[168,172,157,173,162,172,0,164,158,168],
[160,167,163,174,177,166,176,0,166,154],
[162,176,161,177,180,179,182,174,0,172],
[183,179,164,171,170,180,172,186,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,167,180,182,183,162,188,176,190],
[162,0,156,174,170,176,158,172,168,176],
[173,184,0,173,184,180,176,168,184,183],
[160,166,167,0,178,162,161,160,174,161],
[158,170,156,162,0,166,152,157,153,169],
[157,164,160,178,174,0,166,164,175,177],
[178,182,164,179,188,174,0,173,180,173],
[152,168,172,180,183,176,167,0,168,171],
[164,172,156,166,187,165,160,172,0,175],
[150,164,157,179,171,163,167,169,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,189,169,173,151,159,163,175,166],
[188,0,194,184,171,187,166,166,157,172],
[151,146,0,179,153,148,161,155,149,148],
[171,156,161,0,163,157,165,166,151,161],
[167,169,187,177,0,192,169,171,156,145],
[189,153,192,183,148,0,170,178,160,156],
[181,174,179,175,171,170,0,151,143,161],
[177,174,185,174,169,162,189,0,159,164],
[165,183,191,189,184,180,197,181,0,181],
[174,168,192,179,195,184,179,176,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,179,166,174,166,182,138,171,175],
[165,0,195,188,151,158,184,171,177,180],
[161,145,0,164,163,168,170,148,183,169],
[174,152,176,0,163,155,164,150,170,167],
[166,189,177,177,0,165,176,161,167,170],
[174,182,172,185,175,0,175,167,168,181],
[158,156,170,176,164,165,0,169,176,146],
[202,169,192,190,179,173,171,0,177,180],
[169,163,157,170,173,172,164,163,0,154],
[165,160,171,173,170,159,194,160,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,146,160,159,169,153,159,151,151],
[174,0,142,170,166,177,165,149,143,171],
[194,198,0,197,177,195,177,177,178,153],
[180,170,143,0,168,174,154,178,155,150],
[181,174,163,172,0,189,165,199,157,159],
[171,163,145,166,151,0,158,173,156,155],
[187,175,163,186,175,182,0,191,163,160],
[181,191,163,162,141,167,149,0,148,144],
[189,197,162,185,183,184,177,192,0,173],
[189,169,187,190,181,185,180,196,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,174,185,179,162,186,172,186,179],
[170,0,193,177,192,166,199,164,177,176],
[166,147,0,158,168,169,170,164,172,168],
[155,163,182,0,173,176,167,183,180,182],
[161,148,172,167,0,173,169,174,181,172],
[178,174,171,164,167,0,175,173,179,174],
[154,141,170,173,171,165,0,179,170,172],
[168,176,176,157,166,167,161,0,168,168],
[154,163,168,160,159,161,170,172,0,169],
[161,164,172,158,168,166,168,172,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,193,191,163,184,168,173,185,174],
[163,0,159,176,154,157,157,150,155,151],
[147,181,0,158,173,154,184,168,157,152],
[149,164,182,0,161,164,170,173,159,153],
[177,186,167,179,0,165,173,185,180,166],
[156,183,186,176,175,0,140,167,163,183],
[172,183,156,170,167,200,0,145,161,154],
[167,190,172,167,155,173,195,0,179,183],
[155,185,183,181,160,177,179,161,0,176],
[166,189,188,187,174,157,186,157,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,171,155,157,162,153,143,146,154],
[202,0,173,169,181,168,168,166,164,165],
[169,167,0,166,162,163,163,159,144,176],
[185,171,174,0,172,171,170,156,173,170],
[183,159,178,168,0,166,174,165,161,160],
[178,172,177,169,174,0,172,160,159,160],
[187,172,177,170,166,168,0,164,162,175],
[197,174,181,184,175,180,176,0,170,175],
[194,176,196,167,179,181,178,170,0,186],
[186,175,164,170,180,180,165,165,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,149,176,154,141,162,156,168,159],
[182,0,161,169,183,170,183,170,175,169],
[191,179,0,177,191,171,173,174,167,193],
[164,171,163,0,170,136,178,162,174,159],
[186,157,149,170,0,143,156,170,163,159],
[199,170,169,204,197,0,196,163,180,179],
[178,157,167,162,184,144,0,173,179,149],
[184,170,166,178,170,177,167,0,161,165],
[172,165,173,166,177,160,161,179,0,178],
[181,171,147,181,181,161,191,175,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,162,166,167,200,148,174,170,155],
[186,0,189,179,172,225,157,170,163,180],
[178,151,0,170,160,206,162,150,158,167],
[174,161,170,0,164,205,171,166,195,168],
[173,168,180,176,0,212,156,177,181,185],
[140,115,134,135,128,0,131,131,148,129],
[192,183,178,169,184,209,0,183,171,197],
[166,170,190,174,163,209,157,0,172,181],
[170,177,182,145,159,192,169,168,0,167],
[185,160,173,172,155,211,143,159,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,159,185,173,189,182,176,192],
[172,0,159,173,188,177,172,167,160,168],
[166,181,0,160,183,154,179,175,152,181],
[181,167,180,0,187,160,165,177,155,183],
[155,152,157,153,0,144,172,161,145,168],
[167,163,186,180,196,0,192,177,180,183],
[151,168,161,175,168,148,0,169,141,169],
[158,173,165,163,179,163,171,0,164,178],
[164,180,188,185,195,160,199,176,0,192],
[148,172,159,157,172,157,171,162,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,156,186,155,162,148,164,163,180],
[175,0,168,179,151,146,166,176,158,179],
[184,172,0,177,172,158,165,161,163,186],
[154,161,163,0,144,149,158,148,150,180],
[185,189,168,196,0,170,162,180,156,210],
[178,194,182,191,170,0,171,171,190,184],
[192,174,175,182,178,169,0,166,178,195],
[176,164,179,192,160,169,174,0,167,194],
[177,182,177,190,184,150,162,173,0,195],
[160,161,154,160,130,156,145,146,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,169,161,165,159,167,165,188,155],
[181,0,186,145,197,170,165,191,176,182],
[171,154,0,158,189,157,155,170,189,174],
[179,195,182,0,195,168,183,199,185,193],
[175,143,151,145,0,135,149,150,150,149],
[181,170,183,172,205,0,182,177,183,187],
[173,175,185,157,191,158,0,185,181,180],
[175,149,170,141,190,163,155,0,173,165],
[152,164,151,155,190,157,159,167,0,166],
[185,158,166,147,191,153,160,175,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,150,143,168,124,140,150,146,142],
[173,0,145,162,156,194,149,203,190,149],
[190,195,0,162,177,161,166,147,198,157],
[197,178,178,0,160,199,170,181,213,182],
[172,184,163,180,0,194,164,162,201,168],
[216,146,179,141,146,0,192,157,167,155],
[200,191,174,170,176,148,0,182,172,185],
[190,137,193,159,178,183,158,0,182,175],
[194,150,142,127,139,173,168,158,0,151],
[198,191,183,158,172,185,155,165,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,166,175,192,179,187,166,187,198],
[161,0,174,148,180,171,175,171,163,186],
[174,166,0,167,195,178,167,180,187,187],
[165,192,173,0,177,180,185,181,196,190],
[148,160,145,163,0,153,155,153,163,182],
[161,169,162,160,187,0,162,163,189,183],
[153,165,173,155,185,178,0,168,179,183],
[174,169,160,159,187,177,172,0,175,191],
[153,177,153,144,177,151,161,165,0,180],
[142,154,153,150,158,157,157,149,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,178,178,139,117,158,161,142,198],
[144,0,98,140,164,100,119,120,162,159],
[162,242,0,162,184,162,220,163,204,179],
[162,200,178,0,158,124,163,184,166,136],
[201,176,156,182,0,80,139,160,203,136],
[223,240,178,216,260,0,161,160,241,158],
[182,221,120,177,201,179,0,181,179,139],
[179,220,177,156,180,180,159,0,220,176],
[198,178,136,174,137,99,161,120,0,136],
[142,181,161,204,204,182,201,164,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,179,182,189,176,178,196,191,193],
[170,0,170,164,198,145,178,204,167,182],
[161,170,0,156,169,170,157,184,186,159],
[158,176,184,0,188,175,181,209,170,186],
[151,142,171,152,0,146,162,183,163,178],
[164,195,170,165,194,0,171,183,163,174],
[162,162,183,159,178,169,0,182,181,166],
[144,136,156,131,157,157,158,0,160,161],
[149,173,154,170,177,177,159,180,0,171],
[147,158,181,154,162,166,174,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,178,204,159,168,166,173,161,184],
[181,0,183,180,152,189,166,206,158,180],
[162,157,0,179,142,183,184,175,162,175],
[136,160,161,0,148,175,156,144,177,153],
[181,188,198,192,0,205,181,187,178,170],
[172,151,157,165,135,0,168,183,162,161],
[174,174,156,184,159,172,0,182,170,186],
[167,134,165,196,153,157,158,0,156,167],
[179,182,178,163,162,178,170,184,0,163],
[156,160,165,187,170,179,154,173,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,176,179,164,163,162,186,174,161],
[175,0,187,193,168,169,171,185,191,150],
[164,153,0,168,149,165,160,177,173,167],
[161,147,172,0,157,137,148,168,172,164],
[176,172,191,183,0,176,158,196,182,162],
[177,171,175,203,164,0,176,181,176,173],
[178,169,180,192,182,164,0,179,177,163],
[154,155,163,172,144,159,161,0,166,150],
[166,149,167,168,158,164,163,174,0,161],
[179,190,173,176,178,167,177,190,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,167,168,154,174,165,173,175,155],
[184,0,188,178,168,192,169,171,179,170],
[173,152,0,154,155,175,149,158,163,145],
[172,162,186,0,187,181,173,165,175,155],
[186,172,185,153,0,191,175,173,189,158],
[166,148,165,159,149,0,158,133,166,137],
[175,171,191,167,165,182,0,150,183,164],
[167,169,182,175,167,207,190,0,185,157],
[165,161,177,165,151,174,157,155,0,139],
[185,170,195,185,182,203,176,183,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,164,148,159,167,161,171,158,158],
[143,0,152,156,150,148,156,171,127,156],
[176,188,0,170,164,168,175,193,156,179],
[192,184,170,0,176,186,187,197,171,171],
[181,190,176,164,0,173,181,170,167,180],
[173,192,172,154,167,0,177,183,161,172],
[179,184,165,153,159,163,0,162,163,171],
[169,169,147,143,170,157,178,0,145,154],
[182,213,184,169,173,179,177,195,0,165],
[182,184,161,169,160,168,169,186,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,177,149,146,160,130,159,138,137],
[198,0,199,159,169,190,182,186,163,162],
[163,141,0,140,144,162,176,155,134,141],
[191,181,200,0,159,167,200,187,166,158],
[194,171,196,181,0,178,167,176,178,178],
[180,150,178,173,162,0,173,170,157,142],
[210,158,164,140,173,167,0,156,143,139],
[181,154,185,153,164,170,184,0,166,164],
[202,177,206,174,162,183,197,174,0,171],
[203,178,199,182,162,198,201,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,178,177,177,170,183,197,169,155],
[149,0,169,142,137,150,168,172,157,128],
[162,171,0,124,153,169,177,180,174,144],
[163,198,216,0,171,176,183,193,182,164],
[163,203,187,169,0,160,185,182,183,176],
[170,190,171,164,180,0,175,188,161,158],
[157,172,163,157,155,165,0,176,167,168],
[143,168,160,147,158,152,164,0,176,161],
[171,183,166,158,157,179,173,164,0,171],
[185,212,196,176,164,182,172,179,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,156,179,168,142,160,166,147,168],
[168,0,141,157,165,146,138,162,164,162],
[184,199,0,192,179,178,164,180,179,173],
[161,183,148,0,159,155,159,159,159,171],
[172,175,161,181,0,166,167,177,157,172],
[198,194,162,185,174,0,170,161,204,159],
[180,202,176,181,173,170,0,174,177,165],
[174,178,160,181,163,179,166,0,165,173],
[193,176,161,181,183,136,163,175,0,178],
[172,178,167,169,168,181,175,167,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,178,185,182,163,177,171,183,171],
[193,0,168,179,164,163,187,170,155,160],
[162,172,0,183,157,160,193,142,151,180],
[155,161,157,0,164,167,163,158,160,173],
[158,176,183,176,0,165,179,169,179,180],
[177,177,180,173,175,0,197,155,174,178],
[163,153,147,177,161,143,0,153,140,144],
[169,170,198,182,171,185,187,0,175,177],
[157,185,189,180,161,166,200,165,0,191],
[169,180,160,167,160,162,196,163,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,168,165,184,151,185,172,189,168],
[162,0,166,164,161,149,161,155,166,151],
[172,174,0,172,186,177,163,148,178,167],
[175,176,168,0,175,149,170,172,193,147],
[156,179,154,165,0,178,169,175,181,188],
[189,191,163,191,162,0,185,174,184,164],
[155,179,177,170,171,155,0,152,171,156],
[168,185,192,168,165,166,188,0,175,161],
[151,174,162,147,159,156,169,165,0,174],
[172,189,173,193,152,176,184,179,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,157,164,166,153,164,167,173,181],
[178,0,185,161,185,166,182,170,189,171],
[183,155,0,166,174,159,182,154,165,168],
[176,179,174,0,185,163,186,175,186,191],
[174,155,166,155,0,157,175,152,171,166],
[187,174,181,177,183,0,174,170,179,180],
[176,158,158,154,165,166,0,161,167,184],
[173,170,186,165,188,170,179,0,181,194],
[167,151,175,154,169,161,173,159,0,182],
[159,169,172,149,174,160,156,146,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,173,194,176,178,170,166,151,173],
[177,0,178,196,182,178,169,173,180,180],
[167,162,0,189,178,179,169,177,167,164],
[146,144,151,0,144,146,154,146,145,157],
[164,158,162,196,0,156,166,166,172,167],
[162,162,161,194,184,0,160,165,169,170],
[170,171,171,186,174,180,0,187,177,169],
[174,167,163,194,174,175,153,0,174,173],
[189,160,173,195,168,171,163,166,0,173],
[167,160,176,183,173,170,171,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,176,166,177,170,176,170,168,155],
[158,0,153,180,155,171,168,147,175,152],
[164,187,0,179,169,181,173,155,174,165],
[174,160,161,0,170,178,175,159,168,148],
[163,185,171,170,0,166,179,147,184,164],
[170,169,159,162,174,0,170,159,170,150],
[164,172,167,165,161,170,0,154,167,147],
[170,193,185,181,193,181,186,0,187,176],
[172,165,166,172,156,170,173,153,0,142],
[185,188,175,192,176,190,193,164,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,161,173,163,164,164,152,169,172],
[174,0,177,167,167,181,173,152,163,183],
[179,163,0,159,152,174,169,158,168,175],
[167,173,181,0,175,171,175,159,169,189],
[177,173,188,165,0,174,171,159,168,181],
[176,159,166,169,166,0,168,144,150,164],
[176,167,171,165,169,172,0,146,169,168],
[188,188,182,181,181,196,194,0,168,188],
[171,177,172,171,172,190,171,172,0,161],
[168,157,165,151,159,176,172,152,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,147,167,142,159,178,143,172,165],
[185,0,156,156,172,173,185,159,175,184],
[193,184,0,177,158,169,178,160,185,174],
[173,184,163,0,153,174,196,173,196,196],
[198,168,182,187,0,190,180,181,186,199],
[181,167,171,166,150,0,170,157,190,162],
[162,155,162,144,160,170,0,157,162,159],
[197,181,180,167,159,183,183,0,182,175],
[168,165,155,144,154,150,178,158,0,168],
[175,156,166,144,141,178,181,165,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,200,177,193,185,170,166,190,181],
[157,0,174,169,163,180,159,166,181,171],
[140,166,0,160,161,163,144,153,162,157],
[163,171,180,0,166,170,174,176,176,171],
[147,177,179,174,0,168,148,170,179,162],
[155,160,177,170,172,0,164,160,184,160],
[170,181,196,166,192,176,0,171,189,172],
[174,174,187,164,170,180,169,0,192,186],
[150,159,178,164,161,156,151,148,0,153],
[159,169,183,169,178,180,168,154,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,163,168,150,160,155,118,153,158],
[196,0,198,164,184,207,188,181,168,158],
[177,142,0,173,215,180,184,187,161,148],
[172,176,167,0,192,154,175,160,147,179],
[190,156,125,148,0,143,153,161,142,159],
[180,133,160,186,197,0,176,169,174,191],
[185,152,156,165,187,164,0,180,162,175],
[222,159,153,180,179,171,160,0,165,150],
[187,172,179,193,198,166,178,175,0,178],
[182,182,192,161,181,149,165,190,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,192,146,175,190,148,150,168,171],
[147,0,154,124,158,142,129,125,137,141],
[148,186,0,140,155,162,122,126,145,165],
[194,216,200,0,161,180,190,163,170,192],
[165,182,185,179,0,157,167,146,174,150],
[150,198,178,160,183,0,165,179,210,185],
[192,211,218,150,173,175,0,173,193,162],
[190,215,214,177,194,161,167,0,198,179],
[172,203,195,170,166,130,147,142,0,164],
[169,199,175,148,190,155,178,161,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,173,176,165,170,171,166,153,191],
[163,0,167,151,145,161,174,161,174,152],
[167,173,0,163,164,174,149,139,171,174],
[164,189,177,0,160,164,164,160,170,167],
[175,195,176,180,0,161,184,182,174,182],
[170,179,166,176,179,0,156,175,162,170],
[169,166,191,176,156,184,0,171,173,151],
[174,179,201,180,158,165,169,0,164,168],
[187,166,169,170,166,178,167,176,0,175],
[149,188,166,173,158,170,189,172,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,225,187,264,187,189,264,225,188],
[228,0,263,264,264,265,227,265,226,151],
[115,77,0,187,151,188,75,152,150,75],
[153,76,153,0,153,188,116,229,228,115],
[76,76,189,187,0,226,228,265,226,151],
[153,75,152,152,114,0,153,228,152,77],
[151,113,265,224,112,187,0,152,228,113],
[76,75,188,111,75,112,188,0,112,74],
[115,114,190,112,114,188,112,228,0,75],
[152,189,265,225,189,263,227,266,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,156,165,188,174,181,163,172,166],
[172,0,181,161,181,156,190,155,168,173],
[184,159,0,189,191,167,186,166,175,185],
[175,179,151,0,167,165,190,154,164,153],
[152,159,149,173,0,165,176,160,155,169],
[166,184,173,175,175,0,183,172,177,151],
[159,150,154,150,164,157,0,152,152,158],
[177,185,174,186,180,168,188,0,190,186],
[168,172,165,176,185,163,188,150,0,184],
[174,167,155,187,171,189,182,154,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,159,186,198,156,182,147,165,164],
[190,0,162,197,202,180,186,170,175,167],
[181,178,0,195,199,172,185,161,183,180],
[154,143,145,0,178,151,150,151,149,149],
[142,138,141,162,0,141,154,130,154,136],
[184,160,168,189,199,0,167,156,189,168],
[158,154,155,190,186,173,0,146,158,151],
[193,170,179,189,210,184,194,0,188,179],
[175,165,157,191,186,151,182,152,0,169],
[176,173,160,191,204,172,189,161,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,158,177,164,155,160,162,175,179],
[180,0,179,166,167,166,147,174,168,160],
[182,161,0,178,181,175,176,178,195,181],
[163,174,162,0,156,172,156,169,182,161],
[176,173,159,184,0,158,174,175,182,177],
[185,174,165,168,182,0,181,167,191,182],
[180,193,164,184,166,159,0,172,197,180],
[178,166,162,171,165,173,168,0,190,175],
[165,172,145,158,158,149,143,150,0,145],
[161,180,159,179,163,158,160,165,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,169,175,177,160,142,169,159,151],
[165,0,158,179,172,174,151,165,183,170],
[171,182,0,165,160,150,174,197,178,138],
[165,161,175,0,174,178,167,174,187,171],
[163,168,180,166,0,155,168,182,167,167],
[180,166,190,162,185,0,203,184,167,162],
[198,189,166,173,172,137,0,187,182,146],
[171,175,143,166,158,156,153,0,174,145],
[181,157,162,153,173,173,158,166,0,163],
[189,170,202,169,173,178,194,195,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,175,178,198,178,178,192,186,168],
[179,0,173,177,172,174,171,179,170,161],
[165,167,0,162,165,180,160,170,168,154],
[162,163,178,0,176,175,168,193,167,174],
[142,168,175,164,0,173,166,156,156,166],
[162,166,160,165,167,0,166,170,156,156],
[162,169,180,172,174,174,0,169,174,179],
[148,161,170,147,184,170,171,0,143,170],
[154,170,172,173,184,184,166,197,0,183],
[172,179,186,166,174,184,161,170,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,171,158,165,187,169,185,158,189],
[148,0,170,176,163,192,166,169,162,161],
[169,170,0,186,168,162,147,179,188,181],
[182,164,154,0,156,164,166,176,172,161],
[175,177,172,184,0,167,163,166,172,147],
[153,148,178,176,173,0,136,165,163,163],
[171,174,193,174,177,204,0,171,187,165],
[155,171,161,164,174,175,169,0,170,178],
[182,178,152,168,168,177,153,170,0,173],
[151,179,159,179,193,177,175,162,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,157,183,165,172,181,179,186,174],
[175,0,172,214,187,190,160,174,178,174],
[183,168,0,167,194,210,187,173,171,174],
[157,126,173,0,153,194,174,157,200,154],
[175,153,146,187,0,201,156,162,174,149],
[168,150,130,146,139,0,159,152,169,158],
[159,180,153,166,184,181,0,150,150,152],
[161,166,167,183,178,188,190,0,193,171],
[154,162,169,140,166,171,190,147,0,149],
[166,166,166,186,191,182,188,169,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,182,130,157,144,139,120,175,157],
[184,0,167,119,142,154,162,159,151,152],
[158,173,0,145,141,168,165,137,169,171],
[210,221,195,0,205,187,144,168,196,189],
[183,198,199,135,0,177,177,159,200,163],
[196,186,172,153,163,0,173,173,196,148],
[201,178,175,196,163,167,0,170,231,143],
[220,181,203,172,181,167,170,0,201,157],
[165,189,171,144,140,144,109,139,0,185],
[183,188,169,151,177,192,197,183,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,175,168,160,152,160,172,166,157],
[180,0,196,194,190,162,174,183,203,183],
[165,144,0,170,159,163,161,173,163,167],
[172,146,170,0,166,148,154,178,168,166],
[180,150,181,174,0,159,161,170,180,158],
[188,178,177,192,181,0,160,184,184,182],
[180,166,179,186,179,180,0,186,169,185],
[168,157,167,162,170,156,154,0,169,160],
[174,137,177,172,160,156,171,171,0,147],
[183,157,173,174,182,158,155,180,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,155,152,156,148,153,159,170,166],
[177,0,159,167,165,163,185,182,176,162],
[185,181,0,166,179,180,180,192,181,176],
[188,173,174,0,181,167,170,189,172,190],
[184,175,161,159,0,173,169,167,175,176],
[192,177,160,173,167,0,167,174,173,165],
[187,155,160,170,171,173,0,168,159,179],
[181,158,148,151,173,166,172,0,158,168],
[170,164,159,168,165,167,181,182,0,182],
[174,178,164,150,164,175,161,172,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,177,184,148,143,157,136,185,161],
[172,0,213,180,170,178,185,137,177,149],
[163,127,0,148,163,119,148,130,165,127],
[156,160,192,0,169,152,167,160,176,164],
[192,170,177,171,0,163,168,158,176,147],
[197,162,221,188,177,0,194,186,200,169],
[183,155,192,173,172,146,0,169,176,160],
[204,203,210,180,182,154,171,0,199,181],
[155,163,175,164,164,140,164,141,0,152],
[179,191,213,176,193,171,180,159,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,166,159,148,183,176,141,171],
[170,0,157,175,151,166,162,171,160,172],
[167,183,0,190,175,168,163,173,155,164],
[174,165,150,0,150,168,158,163,149,142],
[181,189,165,190,0,178,156,176,172,151],
[192,174,172,172,162,0,165,169,157,146],
[157,178,177,182,184,175,0,168,173,163],
[164,169,167,177,164,171,172,0,160,167],
[199,180,185,191,168,183,167,180,0,161],
[169,168,176,198,189,194,177,173,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,134,160,108,166,162,140,145,146],
[174,0,190,203,167,150,221,165,131,179],
[206,150,0,202,179,208,196,184,178,185],
[180,137,138,0,152,172,190,141,146,141],
[232,173,161,188,0,167,223,170,158,188],
[174,190,132,168,173,0,191,153,182,156],
[178,119,144,150,117,149,0,115,126,148],
[200,175,156,199,170,187,225,0,166,175],
[195,209,162,194,182,158,214,174,0,182],
[194,161,155,199,152,184,192,165,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,206,132,114,132,132,170,153,152],
[170,0,151,115,133,190,130,169,132,205],
[134,189,0,154,96,190,151,133,134,132],
[208,225,186,0,132,168,186,168,170,168],
[226,207,244,208,0,189,168,187,190,188],
[208,150,150,172,151,0,111,188,170,169],
[208,210,189,154,172,229,0,265,190,192],
[170,171,207,172,153,152,75,0,134,210],
[187,208,206,170,150,170,150,206,0,208],
[188,135,208,172,152,171,148,130,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,164,159,164,157,167,173,169,165],
[174,0,172,172,169,171,164,171,173,163],
[176,168,0,163,176,168,149,170,160,165],
[181,168,177,0,183,172,167,175,171,177],
[176,171,164,157,0,165,173,173,157,159],
[183,169,172,168,175,0,161,179,172,180],
[173,176,191,173,167,179,0,171,170,173],
[167,169,170,165,167,161,169,0,150,169],
[171,167,180,169,183,168,170,190,0,174],
[175,177,175,163,181,160,167,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,167,173,189,178,168,173,176,154],
[156,0,165,171,174,176,165,184,188,151],
[173,175,0,181,185,188,152,177,184,164],
[167,169,159,0,177,175,166,170,192,160],
[151,166,155,163,0,170,167,159,180,156],
[162,164,152,165,170,0,155,167,157,148],
[172,175,188,174,173,185,0,170,186,172],
[167,156,163,170,181,173,170,0,181,155],
[164,152,156,148,160,183,154,159,0,139],
[186,189,176,180,184,192,168,185,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,180,166,181,183,188,182,168,172],
[155,0,173,169,188,177,182,180,168,174],
[160,167,0,173,173,162,163,178,181,164],
[174,171,167,0,172,174,179,182,158,153],
[159,152,167,168,0,177,163,178,151,163],
[157,163,178,166,163,0,165,174,153,149],
[152,158,177,161,177,175,0,181,159,165],
[158,160,162,158,162,166,159,0,157,155],
[172,172,159,182,189,187,181,183,0,153],
[168,166,176,187,177,191,175,185,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,183,173,175,166,180,188,181,187],
[159,0,172,172,172,162,153,188,175,170],
[157,168,0,165,174,152,160,178,167,170],
[167,168,175,0,168,166,174,188,183,170],
[165,168,166,172,0,150,154,165,173,170],
[174,178,188,174,190,0,161,189,176,182],
[160,187,180,166,186,179,0,183,180,185],
[152,152,162,152,175,151,157,0,162,160],
[159,165,173,157,167,164,160,178,0,171],
[153,170,170,170,170,158,155,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,160,162,164,165,163,167,157,156],
[171,0,173,182,169,178,176,185,173,178],
[180,167,0,177,146,165,155,170,160,165],
[178,158,163,0,164,172,163,176,156,163],
[176,171,194,176,0,176,170,186,168,166],
[175,162,175,168,164,0,170,179,160,162],
[177,164,185,177,170,170,0,181,169,174],
[173,155,170,164,154,161,159,0,167,152],
[183,167,180,184,172,180,171,173,0,176],
[184,162,175,177,174,178,166,188,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,68,135,135,68,136,68,68,68],
[272,0,137,272,204,135,136,205,135,137],
[272,203,0,203,203,135,203,272,271,203],
[205,68,137,0,203,68,204,137,68,136],
[205,136,137,137,0,68,204,205,136,136],
[272,205,205,272,272,0,136,137,271,273],
[204,204,137,136,136,204,0,137,204,272],
[272,135,68,203,135,203,203,0,203,203],
[272,205,69,272,204,69,136,137,0,137],
[272,203,137,204,204,67,68,137,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,184,170,171,157,173,157,149,170],
[168,0,160,164,158,157,153,157,157,166],
[156,180,0,167,173,159,173,173,162,172],
[170,176,173,0,185,154,169,163,171,164],
[169,182,167,155,0,150,165,165,162,167],
[183,183,181,186,190,0,170,177,166,177],
[167,187,167,171,175,170,0,154,165,168],
[183,183,167,177,175,163,186,0,181,168],
[191,183,178,169,178,174,175,159,0,176],
[170,174,168,176,173,163,172,172,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,154,177,164,176,165,155,162,165],
[169,0,146,168,142,178,171,150,158,158],
[186,194,0,179,163,187,192,174,175,179],
[163,172,161,0,166,169,180,161,161,164],
[176,198,177,174,0,182,177,183,170,177],
[164,162,153,171,158,0,183,157,161,161],
[175,169,148,160,163,157,0,165,167,161],
[185,190,166,179,157,183,175,0,168,169],
[178,182,165,179,170,179,173,172,0,175],
[175,182,161,176,163,179,179,171,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,158,173,157,173,161,169,174,172],
[170,0,150,157,155,154,161,171,159,165],
[182,190,0,166,186,172,162,166,168,165],
[167,183,174,0,184,165,143,175,155,161],
[183,185,154,156,0,173,152,172,163,169],
[167,186,168,175,167,0,171,168,159,171],
[179,179,178,197,188,169,0,185,163,189],
[171,169,174,165,168,172,155,0,154,166],
[166,181,172,185,177,181,177,186,0,174],
[168,175,175,179,171,169,151,174,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,158,183,172,178,173,158,179,187],
[186,0,182,170,161,178,159,164,152,176],
[182,158,0,165,157,172,166,145,170,161],
[157,170,175,0,174,161,164,164,172,178],
[168,179,183,166,0,173,170,170,154,184],
[162,162,168,179,167,0,176,187,161,164],
[167,181,174,176,170,164,0,177,164,176],
[182,176,195,176,170,153,163,0,152,189],
[161,188,170,168,186,179,176,188,0,184],
[153,164,179,162,156,176,164,151,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,155,181,177,182,160,162,172,170],
[156,0,150,153,156,162,153,154,148,161],
[185,190,0,181,175,188,169,172,170,171],
[159,187,159,0,169,177,170,159,159,166],
[163,184,165,171,0,178,161,165,155,158],
[158,178,152,163,162,0,150,157,166,159],
[180,187,171,170,179,190,0,180,171,169],
[178,186,168,181,175,183,160,0,167,182],
[168,192,170,181,185,174,169,173,0,184],
[170,179,169,174,182,181,171,158,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,159,166,179,174,161,166,150,181],
[161,0,169,149,172,164,173,167,163,176],
[181,171,0,162,168,168,161,163,156,165],
[174,191,178,0,179,194,170,178,172,183],
[161,168,172,161,0,175,165,168,152,180],
[166,176,172,146,165,0,155,162,159,170],
[179,167,179,170,175,185,0,165,166,180],
[174,173,177,162,172,178,175,0,155,156],
[190,177,184,168,188,181,174,185,0,176],
[159,164,175,157,160,170,160,184,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,176,173,173,186,177,164,183,182],
[176,0,179,173,161,187,171,184,179,181],
[164,161,0,176,183,179,179,172,177,180],
[167,167,164,0,158,175,157,171,184,185],
[167,179,157,182,0,175,156,163,173,186],
[154,153,161,165,165,0,171,151,151,166],
[163,169,161,183,184,169,0,169,167,183],
[176,156,168,169,177,189,171,0,181,192],
[157,161,163,156,167,189,173,159,0,176],
[158,159,160,155,154,174,157,148,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,156,143,173,132,159,155,153,166],
[193,0,168,186,187,185,168,156,187,183],
[184,172,0,176,206,164,178,169,183,185],
[197,154,164,0,190,166,190,173,189,190],
[167,153,134,150,0,145,158,139,156,160],
[208,155,176,174,195,0,177,169,192,169],
[181,172,162,150,182,163,0,177,167,185],
[185,184,171,167,201,171,163,0,175,175],
[187,153,157,151,184,148,173,165,0,171],
[174,157,155,150,180,171,155,165,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,177,156,133,152,151,186,153,151],
[181,0,195,162,171,178,180,190,171,177],
[163,145,0,158,143,151,150,163,157,140],
[184,178,182,0,150,173,177,191,160,165],
[207,169,197,190,0,184,167,198,173,191],
[188,162,189,167,156,0,168,181,147,157],
[189,160,190,163,173,172,0,194,175,170],
[154,150,177,149,142,159,146,0,140,134],
[187,169,183,180,167,193,165,200,0,174],
[189,163,200,175,149,183,170,206,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,157,169,230,144,144,184,146,186],
[140,0,152,144,163,175,127,159,121,167],
[183,188,0,190,170,163,173,221,172,192],
[171,196,150,0,167,116,139,157,161,199],
[110,177,170,173,0,145,116,150,140,169],
[196,165,177,224,195,0,138,217,177,181],
[196,213,167,201,224,202,0,196,194,177],
[156,181,119,183,190,123,144,0,134,165],
[194,219,168,179,200,163,146,206,0,217],
[154,173,148,141,171,159,163,175,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,143,159,154,161,157,170,164,145],
[182,0,152,153,156,162,168,180,169,162],
[197,188,0,165,193,171,173,211,189,188],
[181,187,175,0,167,171,165,198,167,185],
[186,184,147,173,0,178,172,174,160,177],
[179,178,169,169,162,0,174,184,162,169],
[183,172,167,175,168,166,0,181,147,167],
[170,160,129,142,166,156,159,0,161,156],
[176,171,151,173,180,178,193,179,0,165],
[195,178,152,155,163,171,173,184,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,204,153,175,165,176,153,172,171],
[181,0,168,119,165,131,146,139,168,157],
[136,172,0,131,140,144,168,156,155,160],
[187,221,209,0,170,188,191,174,209,198],
[165,175,200,170,0,167,161,172,184,178],
[175,209,196,152,173,0,178,154,189,178],
[164,194,172,149,179,162,0,172,174,162],
[187,201,184,166,168,186,168,0,174,169],
[168,172,185,131,156,151,166,166,0,164],
[169,183,180,142,162,162,178,171,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,202,199,190,184,187,170,169,184],
[177,0,180,163,163,159,193,162,169,156],
[138,160,0,159,174,158,167,152,148,146],
[141,177,181,0,163,158,172,164,164,165],
[150,177,166,177,0,159,187,161,177,154],
[156,181,182,182,181,0,183,163,182,167],
[153,147,173,168,153,157,0,161,167,163],
[170,178,188,176,179,177,179,0,156,177],
[171,171,192,176,163,158,173,184,0,186],
[156,184,194,175,186,173,177,163,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,187,155,161,161,155,164,153,175],
[181,0,189,173,164,179,172,163,180,180],
[153,151,0,156,152,172,160,145,150,182],
[185,167,184,0,154,182,160,161,176,189],
[179,176,188,186,0,182,168,176,174,191],
[179,161,168,158,158,0,178,156,176,190],
[185,168,180,180,172,162,0,160,164,176],
[176,177,195,179,164,184,180,0,166,184],
[187,160,190,164,166,164,176,174,0,185],
[165,160,158,151,149,150,164,156,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,175,174,171,175,162,179,165],
[169,0,164,166,177,166,162,155,166,164],
[169,176,0,170,171,177,177,157,172,172],
[165,174,170,0,167,158,155,159,170,170],
[166,163,169,173,0,163,164,170,171,172],
[169,174,163,182,177,0,180,171,176,188],
[165,178,163,185,176,160,0,157,181,175],
[178,185,183,181,170,169,183,0,185,184],
[161,174,168,170,169,164,159,155,0,158],
[175,176,168,170,168,152,165,156,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,177,181,169,176,189,183,170,165],
[178,0,171,184,183,174,196,188,174,165],
[163,169,0,178,166,182,162,180,177,173],
[159,156,162,0,163,178,171,176,159,170],
[171,157,174,177,0,157,153,168,154,148],
[164,166,158,162,183,0,177,174,165,151],
[151,144,178,169,187,163,0,156,142,156],
[157,152,160,164,172,166,184,0,147,154],
[170,166,163,181,186,175,198,193,0,154],
[175,175,167,170,192,189,184,186,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,151,141,140,151,161,175,179,164],
[150,0,151,170,153,157,157,171,176,147],
[189,189,0,165,178,182,164,171,173,165],
[199,170,175,0,196,196,204,193,183,177],
[200,187,162,144,0,199,167,167,156,160],
[189,183,158,144,141,0,154,179,192,155],
[179,183,176,136,173,186,0,204,157,158],
[165,169,169,147,173,161,136,0,162,134],
[161,164,167,157,184,148,183,178,0,170],
[176,193,175,163,180,185,182,206,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,167,143,209,187,153,159,183,210],
[152,0,171,146,194,208,180,157,183,201],
[173,169,0,189,194,191,154,181,184,191],
[197,194,151,0,225,200,175,181,190,177],
[131,146,146,115,0,170,135,118,140,184],
[153,132,149,140,170,0,176,149,171,173],
[187,160,186,165,205,164,0,181,200,184],
[181,183,159,159,222,191,159,0,171,167],
[157,157,156,150,200,169,140,169,0,151],
[130,139,149,163,156,167,156,173,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,176,155,166,185,165,153,160,159],
[164,0,180,151,160,185,154,160,152,158],
[164,160,0,164,151,175,144,157,159,159],
[185,189,176,0,172,183,162,163,176,176],
[174,180,189,168,0,188,175,169,168,168],
[155,155,165,157,152,0,156,160,149,144],
[175,186,196,178,165,184,0,174,172,176],
[187,180,183,177,171,180,166,0,179,171],
[180,188,181,164,172,191,168,161,0,174],
[181,182,181,164,172,196,164,169,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,209,208,206,198,154,170,140,173],
[167,0,171,161,172,193,155,143,145,163],
[131,169,0,187,145,184,143,152,152,189],
[132,179,153,0,177,180,160,162,146,162],
[134,168,195,163,0,201,144,175,170,181],
[142,147,156,160,139,0,113,128,130,182],
[186,185,197,180,196,227,0,171,164,191],
[170,197,188,178,165,212,169,0,178,204],
[200,195,188,194,170,210,176,162,0,188],
[167,177,151,178,159,158,149,136,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,154,137,164,153,153,161,166,160],
[173,0,165,160,199,172,159,161,172,166],
[186,175,0,142,185,187,162,193,200,172],
[203,180,198,0,170,182,159,175,203,183],
[176,141,155,170,0,170,140,180,157,180],
[187,168,153,158,170,0,195,176,196,174],
[187,181,178,181,200,145,0,154,170,175],
[179,179,147,165,160,164,186,0,194,178],
[174,168,140,137,183,144,170,146,0,170],
[180,174,168,157,160,166,165,162,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,179,193,180,209,148,164,245,130],
[195,0,164,227,182,208,147,131,228,129],
[161,176,0,176,197,207,195,226,212,175],
[147,113,164,0,117,147,115,165,164,112],
[160,158,143,223,0,208,211,178,242,175],
[131,132,133,193,132,0,164,115,132,114],
[192,193,145,225,129,176,0,178,210,145],
[176,209,114,175,162,225,162,0,196,142],
[95,112,128,176,98,208,130,144,0,127],
[210,211,165,228,165,226,195,198,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,163,162,171,171,198,179,200,179],
[164,0,149,157,164,162,175,178,187,162],
[177,191,0,175,183,178,166,184,193,173],
[178,183,165,0,187,168,178,173,196,175],
[169,176,157,153,0,174,165,176,186,173],
[169,178,162,172,166,0,173,177,190,177],
[142,165,174,162,175,167,0,173,183,151],
[161,162,156,167,164,163,167,0,192,171],
[140,153,147,144,154,150,157,148,0,154],
[161,178,167,165,167,163,189,169,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,167,189,168,164,177,149,171,184],
[164,0,180,177,179,165,193,183,175,199],
[173,160,0,171,178,172,179,171,180,202],
[151,163,169,0,168,175,165,174,159,211],
[172,161,162,172,0,165,176,164,162,182],
[176,175,168,165,175,0,180,163,171,191],
[163,147,161,175,164,160,0,159,158,182],
[191,157,169,166,176,177,181,0,172,192],
[169,165,160,181,178,169,182,168,0,184],
[156,141,138,129,158,149,158,148,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,133,187,178,176,153,151,156,164],
[167,0,150,182,169,153,140,131,137,136],
[207,190,0,194,192,201,168,194,169,170],
[153,158,146,0,159,153,151,147,134,132],
[162,171,148,181,0,164,165,153,155,162],
[164,187,139,187,176,0,184,173,170,162],
[187,200,172,189,175,156,0,167,169,171],
[189,209,146,193,187,167,173,0,169,160],
[184,203,171,206,185,170,171,171,0,155],
[176,204,170,208,178,178,169,180,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,170,181,160,179,177,182,172,184],
[161,0,166,172,161,174,154,169,160,161],
[170,174,0,173,155,172,167,167,156,160],
[159,168,167,0,163,170,152,170,186,177],
[180,179,185,177,0,184,169,183,188,175],
[161,166,168,170,156,0,147,170,171,162],
[163,186,173,188,171,193,0,181,174,178],
[158,171,173,170,157,170,159,0,159,144],
[168,180,184,154,152,169,166,181,0,173],
[156,179,180,163,165,178,162,196,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,184,158,169,187,161,174,166,159],
[169,0,204,184,173,182,177,176,195,176],
[156,136,0,149,160,160,150,151,164,152],
[182,156,191,0,171,173,172,173,184,151],
[171,167,180,169,0,172,159,170,168,154],
[153,158,180,167,168,0,159,167,161,165],
[179,163,190,168,181,181,0,179,184,159],
[166,164,189,167,170,173,161,0,174,160],
[174,145,176,156,172,179,156,166,0,162],
[181,164,188,189,186,175,181,180,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,181,155,166,172,164,156,178,148],
[155,0,168,156,148,161,138,134,161,140],
[159,172,0,164,162,161,150,166,157,154],
[185,184,176,0,167,170,178,170,176,149],
[174,192,178,173,0,194,186,181,172,164],
[168,179,179,170,146,0,155,168,163,156],
[176,202,190,162,154,185,0,162,165,167],
[184,206,174,170,159,172,178,0,175,188],
[162,179,183,164,168,177,175,165,0,177],
[192,200,186,191,176,184,173,152,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,174,163,144,164,163,168,172,172],
[173,0,176,173,172,164,176,172,175,192],
[166,164,0,162,159,178,170,150,168,177],
[177,167,178,0,169,168,178,158,176,179],
[196,168,181,171,0,175,176,174,172,182],
[176,176,162,172,165,0,167,155,173,168],
[177,164,170,162,164,173,0,150,175,192],
[172,168,190,182,166,185,190,0,182,198],
[168,165,172,164,168,167,165,158,0,190],
[168,148,163,161,158,172,148,142,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,179,169,171,167,174,186,174,204],
[160,0,176,152,165,164,167,172,156,159],
[161,164,0,161,187,152,171,171,169,184],
[171,188,179,0,177,187,168,194,182,185],
[169,175,153,163,0,171,168,185,163,184],
[173,176,188,153,169,0,172,182,171,195],
[166,173,169,172,172,168,0,195,182,198],
[154,168,169,146,155,158,145,0,163,165],
[166,184,171,158,177,169,158,177,0,177],
[136,181,156,155,156,145,142,175,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,172,188,160,164,167,159,169,194],
[162,0,161,186,184,172,197,133,209,185],
[168,179,0,201,181,150,157,146,168,149],
[152,154,139,0,156,158,163,126,173,163],
[180,156,159,184,0,158,150,178,169,160],
[176,168,190,182,182,0,169,146,177,173],
[173,143,183,177,190,171,0,127,160,153],
[181,207,194,214,162,194,213,0,196,213],
[171,131,172,167,171,163,180,144,0,168],
[146,155,191,177,180,167,187,127,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,184,141,138,139,161,148,168,160],
[204,0,193,185,182,194,184,163,208,177],
[156,147,0,166,147,136,160,126,173,134],
[199,155,174,0,164,157,176,156,165,138],
[202,158,193,176,0,164,162,170,205,167],
[201,146,204,183,176,0,189,196,201,174],
[179,156,180,164,178,151,0,163,160,143],
[192,177,214,184,170,144,177,0,193,191],
[172,132,167,175,135,139,180,147,0,141],
[180,163,206,202,173,166,197,149,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,138,148,184,126,232,210,180,188],
[214,0,181,163,163,184,234,235,208,179],
[202,159,0,181,132,173,236,181,179,201],
[192,177,159,0,158,169,220,201,159,209],
[156,177,208,182,0,150,265,211,197,230],
[214,156,167,171,190,0,213,179,187,197],
[108,106,104,120,75,127,0,142,114,170],
[130,105,159,139,129,161,198,0,144,203],
[160,132,161,181,143,153,226,196,0,212],
[152,161,139,131,110,143,170,137,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,191,160,173,177,184,171,146,167],
[170,0,198,186,186,200,182,184,192,186],
[149,142,0,162,170,151,174,154,146,170],
[180,154,178,0,153,161,169,178,146,175],
[167,154,170,187,0,176,177,183,137,170],
[163,140,189,179,164,0,161,168,144,160],
[156,158,166,171,163,179,0,163,130,153],
[169,156,186,162,157,172,177,0,132,178],
[194,148,194,194,203,196,210,208,0,196],
[173,154,170,165,170,180,187,162,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,157,169,199,155,188,150,176,168],
[158,0,137,187,144,174,158,157,145,163],
[183,203,0,207,167,175,191,175,171,171],
[171,153,133,0,160,143,161,152,122,152],
[141,196,173,180,0,151,190,174,150,163],
[185,166,165,197,189,0,192,171,156,169],
[152,182,149,179,150,148,0,164,129,142],
[190,183,165,188,166,169,176,0,168,172],
[164,195,169,218,190,184,211,172,0,170],
[172,177,169,188,177,171,198,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,194,169,171,183,165,148,148,179],
[168,0,184,181,168,172,168,163,165,172],
[146,156,0,164,157,157,146,157,154,153],
[171,159,176,0,162,159,171,139,161,171],
[169,172,183,178,0,177,163,177,163,179],
[157,168,183,181,163,0,153,147,156,147],
[175,172,194,169,177,187,0,168,171,171],
[192,177,183,201,163,193,172,0,164,177],
[192,175,186,179,177,184,169,176,0,178],
[161,168,187,169,161,193,169,163,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,176,167,159,159,170,163,163,158],
[173,0,183,165,176,166,170,163,177,159],
[164,157,0,153,159,167,157,171,179,154],
[173,175,187,0,171,170,159,162,176,165],
[181,164,181,169,0,175,175,164,191,169],
[181,174,173,170,165,0,164,162,183,151],
[170,170,183,181,165,176,0,164,176,168],
[177,177,169,178,176,178,176,0,169,170],
[177,163,161,164,149,157,164,171,0,159],
[182,181,186,175,171,189,172,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,165,166,161,165,155,162,168,164],
[175,0,180,176,167,168,156,171,181,178],
[175,160,0,172,170,177,166,163,183,181],
[174,164,168,0,171,182,163,171,175,182],
[179,173,170,169,0,179,150,161,184,178],
[175,172,163,158,161,0,163,162,175,184],
[185,184,174,177,190,177,0,162,190,181],
[178,169,177,169,179,178,178,0,185,186],
[172,159,157,165,156,165,150,155,0,165],
[176,162,159,158,162,156,159,154,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,158,162,169,162,170,155,169,162],
[180,0,158,177,167,163,179,160,177,167],
[182,182,0,168,172,163,171,170,189,183],
[178,163,172,0,165,151,164,157,168,154],
[171,173,168,175,0,165,172,178,180,175],
[178,177,177,189,175,0,175,179,167,169],
[170,161,169,176,168,165,0,162,164,166],
[185,180,170,183,162,161,178,0,168,164],
[171,163,151,172,160,173,176,172,0,169],
[178,173,157,186,165,171,174,176,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,169,188,174,181,185,191,171,193],
[154,0,179,178,161,181,166,180,156,187],
[171,161,0,182,184,168,164,180,156,188],
[152,162,158,0,158,175,176,170,145,181],
[166,179,156,182,0,192,166,170,162,194],
[159,159,172,165,148,0,153,164,157,186],
[155,174,176,164,174,187,0,176,163,178],
[149,160,160,170,170,176,164,0,159,171],
[169,184,184,195,178,183,177,181,0,190],
[147,153,152,159,146,154,162,169,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,181,175,160,171,188,141,174,157],
[183,0,165,170,182,178,158,162,169,161],
[159,175,0,163,163,175,150,153,161,156],
[165,170,177,0,165,179,161,156,170,170],
[180,158,177,175,0,174,165,155,177,166],
[169,162,165,161,166,0,144,143,169,146],
[152,182,190,179,175,196,0,153,186,163],
[199,178,187,184,185,197,187,0,185,170],
[166,171,179,170,163,171,154,155,0,154],
[183,179,184,170,174,194,177,170,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,176,176,166,183,182,188,171,167],
[142,0,161,148,142,149,157,138,144,147],
[164,179,0,161,156,174,157,153,140,159],
[164,192,179,0,156,171,155,164,158,169],
[174,198,184,184,0,175,183,192,165,175],
[157,191,166,169,165,0,162,169,161,171],
[158,183,183,185,157,178,0,164,162,160],
[152,202,187,176,148,171,176,0,158,165],
[169,196,200,182,175,179,178,182,0,181],
[173,193,181,171,165,169,180,175,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,162,170,143,169,141,164,175,154],
[191,0,156,158,153,187,160,157,167,153],
[178,184,0,174,168,183,190,152,198,168],
[170,182,166,0,169,212,173,163,184,158],
[197,187,172,171,0,185,178,160,174,160],
[171,153,157,128,155,0,162,155,166,164],
[199,180,150,167,162,178,0,154,176,170],
[176,183,188,177,180,185,186,0,182,168],
[165,173,142,156,166,174,164,158,0,148],
[186,187,172,182,180,176,170,172,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,175,162,156,183,171,165,164,155],
[153,0,162,163,159,178,151,171,160,144],
[165,178,0,172,148,173,164,171,168,153],
[178,177,168,0,174,181,172,167,171,175],
[184,181,192,166,0,179,162,165,186,168],
[157,162,167,159,161,0,146,160,165,143],
[169,189,176,168,178,194,0,176,178,165],
[175,169,169,173,175,180,164,0,177,167],
[176,180,172,169,154,175,162,163,0,154],
[185,196,187,165,172,197,175,173,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,172,176,171,209,173,172,146,201],
[173,0,170,172,157,186,186,165,169,177],
[168,170,0,190,160,183,174,169,172,191],
[164,168,150,0,151,197,172,171,156,173],
[169,183,180,189,0,206,187,194,178,209],
[131,154,157,143,134,0,167,166,172,186],
[167,154,166,168,153,173,0,165,173,194],
[168,175,171,169,146,174,175,0,172,210],
[194,171,168,184,162,168,167,168,0,176],
[139,163,149,167,131,154,146,130,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,176,162,180,193,167,189,176,172],
[174,0,158,164,174,165,163,187,168,168],
[164,182,0,161,173,173,174,155,168,161],
[178,176,179,0,175,180,186,170,176,168],
[160,166,167,165,0,171,179,167,152,168],
[147,175,167,160,169,0,170,167,167,164],
[173,177,166,154,161,170,0,168,158,166],
[151,153,185,170,173,173,172,0,162,171],
[164,172,172,164,188,173,182,178,0,170],
[168,172,179,172,172,176,174,169,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,167,201,145,175,155,162,173,183],
[186,0,162,200,167,211,189,183,188,193],
[173,178,0,206,174,205,159,180,183,167],
[139,140,134,0,131,162,132,152,162,152],
[195,173,166,209,0,216,196,194,188,197],
[165,129,135,178,124,0,141,126,161,159],
[185,151,181,208,144,199,0,171,194,175],
[178,157,160,188,146,214,169,0,167,183],
[167,152,157,178,152,179,146,173,0,160],
[157,147,173,188,143,181,165,157,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,182,172,170,162,169,163,172],
[170,0,162,162,162,166,158,171,174,163],
[170,178,0,184,163,182,175,173,168,169],
[158,178,156,0,152,166,169,168,163,167],
[168,178,177,188,0,177,167,168,166,174],
[170,174,158,174,163,0,170,180,174,168],
[178,182,165,171,173,170,0,172,170,165],
[171,169,167,172,172,160,168,0,167,162],
[177,166,172,177,174,166,170,173,0,164],
[168,177,171,173,166,172,175,178,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,167,131,200,147,165,146,184,158],
[153,0,163,171,186,157,166,144,147,153],
[173,177,0,167,171,169,168,137,194,167],
[209,169,173,0,199,188,173,160,183,190],
[140,154,169,141,0,136,138,131,152,156],
[193,183,171,152,204,0,155,175,186,188],
[175,174,172,167,202,185,0,158,181,192],
[194,196,203,180,209,165,182,0,187,174],
[156,193,146,157,188,154,159,153,0,171],
[182,187,173,150,184,152,148,166,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,170,169,183,151,180,170,176,169],
[183,0,172,178,185,165,184,171,186,172],
[170,168,0,170,176,159,179,169,172,161],
[171,162,170,0,176,171,186,168,166,160],
[157,155,164,164,0,165,175,155,173,156],
[189,175,181,169,175,0,174,173,189,174],
[160,156,161,154,165,166,0,161,167,159],
[170,169,171,172,185,167,179,0,169,167],
[164,154,168,174,167,151,173,171,0,158],
[171,168,179,180,184,166,181,173,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,185,195,159,175,191,169,177,176],
[175,0,177,190,146,153,192,166,182,187],
[155,163,0,184,153,177,169,150,180,160],
[145,150,156,0,138,147,158,153,159,165],
[181,194,187,202,0,182,185,167,200,171],
[165,187,163,193,158,0,179,178,193,187],
[149,148,171,182,155,161,0,168,184,163],
[171,174,190,187,173,162,172,0,183,164],
[163,158,160,181,140,147,156,157,0,160],
[164,153,180,175,169,153,177,176,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,146,182,177,180,152,175,152,164],
[176,0,156,186,165,169,169,170,150,174],
[194,184,0,197,186,183,167,172,158,182],
[158,154,143,0,150,157,166,161,159,159],
[163,175,154,190,0,166,174,164,157,168],
[160,171,157,183,174,0,161,163,148,182],
[188,171,173,174,166,179,0,157,156,168],
[165,170,168,179,176,177,183,0,174,179],
[188,190,182,181,183,192,184,166,0,183],
[176,166,158,181,172,158,172,161,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,176,165,177,169,163,166,172,171],
[165,0,174,169,167,168,164,166,174,173],
[164,166,0,168,175,173,160,165,167,179],
[175,171,172,0,165,176,168,169,173,171],
[163,173,165,175,0,168,158,170,176,174],
[171,172,167,164,172,0,166,175,168,175],
[177,176,180,172,182,174,0,170,186,180],
[174,174,175,171,170,165,170,0,176,167],
[168,166,173,167,164,172,154,164,0,178],
[169,167,161,169,166,165,160,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,178,169,179,178,176,169,173,162],
[163,0,187,173,182,169,174,171,176,176],
[162,153,0,167,167,171,169,149,155,164],
[171,167,173,0,175,159,173,164,155,169],
[161,158,173,165,0,171,184,167,156,172],
[162,171,169,181,169,0,168,166,162,173],
[164,166,171,167,156,172,0,166,147,160],
[171,169,191,176,173,174,174,0,166,166],
[167,164,185,185,184,178,193,174,0,174],
[178,164,176,171,168,167,180,174,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,167,160,172,165,152,166,155,170],
[177,0,184,191,180,170,171,155,158,172],
[173,156,0,184,167,176,154,155,170,166],
[180,149,156,0,178,161,155,173,155,167],
[168,160,173,162,0,169,164,161,146,167],
[175,170,164,179,171,0,168,180,161,165],
[188,169,186,185,176,172,0,168,151,159],
[174,185,185,167,179,160,172,0,170,176],
[185,182,170,185,194,179,189,170,0,171],
[170,168,174,173,173,175,181,164,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,175,173,178,164,190,184,183,176],
[168,0,167,177,170,169,184,191,161,164],
[165,173,0,169,170,165,180,184,164,158],
[167,163,171,0,164,163,169,176,152,150],
[162,170,170,176,0,175,184,178,172,161],
[176,171,175,177,165,0,183,165,160,169],
[150,156,160,171,156,157,0,169,155,156],
[156,149,156,164,162,175,171,0,161,157],
[157,179,176,188,168,180,185,179,0,169],
[164,176,182,190,179,171,184,183,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,182,163,203,183,186,211,169,198],
[110,0,160,162,157,158,145,164,141,157],
[158,180,0,132,172,182,163,195,184,178],
[177,178,208,0,192,189,146,213,173,165],
[137,183,168,148,0,151,154,190,175,158],
[157,182,158,151,189,0,117,177,140,161],
[154,195,177,194,186,223,0,226,179,190],
[129,176,145,127,150,163,114,0,134,132],
[171,199,156,167,165,200,161,206,0,167],
[142,183,162,175,182,179,150,208,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,146,181,153,154,163,163,139,171],
[209,0,185,180,179,173,195,163,163,149],
[194,155,0,191,181,192,198,177,167,208],
[159,160,149,0,164,141,165,152,153,140],
[187,161,159,176,0,172,189,169,177,182],
[186,167,148,199,168,0,169,159,158,153],
[177,145,142,175,151,171,0,155,143,174],
[177,177,163,188,171,181,185,0,206,163],
[201,177,173,187,163,182,197,134,0,168],
[169,191,132,200,158,187,166,177,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,185,190,208,190,227,149,183,178],
[148,0,149,108,164,193,183,182,173,151],
[155,191,0,168,180,206,218,149,172,168],
[150,232,172,0,210,212,239,166,194,167],
[132,176,160,130,0,178,204,152,172,148],
[150,147,134,128,162,0,169,131,178,166],
[113,157,122,101,136,171,0,143,153,139],
[191,158,191,174,188,209,197,0,196,182],
[157,167,168,146,168,162,187,144,0,164],
[162,189,172,173,192,174,201,158,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,164,196,180,188,183,171,194,205],
[172,0,168,185,196,177,175,175,189,213],
[176,172,0,211,190,197,204,167,213,182],
[144,155,129,0,170,152,141,177,182,150],
[160,144,150,170,0,170,184,166,200,186],
[152,163,143,188,170,0,165,148,189,190],
[157,165,136,199,156,175,0,152,192,217],
[169,165,173,163,174,192,188,0,160,194],
[146,151,127,158,140,151,148,180,0,205],
[135,127,158,190,154,150,123,146,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,170,197,205,201,179,179,187,188],
[131,0,139,150,144,156,141,143,156,147],
[170,201,0,185,193,187,173,178,197,176],
[143,190,155,0,181,177,171,175,174,146],
[135,196,147,159,0,162,157,149,167,164],
[139,184,153,163,178,0,157,149,158,143],
[161,199,167,169,183,183,0,168,161,170],
[161,197,162,165,191,191,172,0,181,185],
[153,184,143,166,173,182,179,159,0,155],
[152,193,164,194,176,197,170,155,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,159,186,179,133,174,163,142,160],
[195,0,185,180,188,178,170,181,173,181],
[181,155,0,184,173,168,166,179,162,166],
[154,160,156,0,174,145,163,161,137,158],
[161,152,167,166,0,149,174,164,144,162],
[207,162,172,195,191,0,199,171,165,171],
[166,170,174,177,166,141,0,179,162,167],
[177,159,161,179,176,169,161,0,150,158],
[198,167,178,203,196,175,178,190,0,172],
[180,159,174,182,178,169,173,182,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,169,143,226,258,144,171,228],
[170,0,252,197,168,196,255,168,83,169],
[171,88,0,142,144,115,230,144,59,144],
[171,143,198,0,201,201,229,143,114,170],
[197,172,196,139,0,225,257,172,197,170],
[114,144,225,139,115,0,199,142,87,198],
[82,85,110,111,83,141,0,85,85,141],
[196,172,196,197,168,198,255,0,170,144],
[169,257,281,226,143,253,255,170,0,199],
[112,171,196,170,170,142,199,196,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,177,161,140,162,147,183,154,174],
[188,0,177,179,177,162,141,205,156,185],
[163,163,0,149,162,138,167,180,154,148],
[179,161,191,0,163,151,165,207,162,179],
[200,163,178,177,0,137,180,207,156,193],
[178,178,202,189,203,0,177,219,144,185],
[193,199,173,175,160,163,0,209,182,171],
[157,135,160,133,133,121,131,0,125,136],
[186,184,186,178,184,196,158,215,0,177],
[166,155,192,161,147,155,169,204,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,163,189,165,194,170,164,177,187],
[132,0,154,177,166,151,138,177,200,165],
[177,186,0,193,189,154,171,162,223,184],
[151,163,147,0,168,147,148,171,174,186],
[175,174,151,172,0,172,156,177,177,198],
[146,189,186,193,168,0,171,185,202,175],
[170,202,169,192,184,169,0,186,178,203],
[176,163,178,169,163,155,154,0,185,197],
[163,140,117,166,163,138,162,155,0,194],
[153,175,156,154,142,165,137,143,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,205,167,183,198,173,174,193,198],
[156,0,171,164,164,173,155,161,177,147],
[135,169,0,149,153,177,162,165,175,141],
[173,176,191,0,173,188,171,164,174,178],
[157,176,187,167,0,161,179,153,172,170],
[142,167,163,152,179,0,159,141,167,161],
[167,185,178,169,161,181,0,174,181,183],
[166,179,175,176,187,199,166,0,185,149],
[147,163,165,166,168,173,159,155,0,153],
[142,193,199,162,170,179,157,191,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,165,168,145,160,171,166,163],
[164,0,180,153,164,135,157,173,152,158],
[169,160,0,162,154,151,147,189,163,171],
[175,187,178,0,178,169,159,178,158,176],
[172,176,186,162,0,177,168,175,155,176],
[195,205,189,171,163,0,171,191,172,186],
[180,183,193,181,172,169,0,171,159,167],
[169,167,151,162,165,149,169,0,163,158],
[174,188,177,182,185,168,181,177,0,175],
[177,182,169,164,164,154,173,182,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,147,174,161,177,150,174,171,170],
[194,0,171,205,193,195,174,181,198,168],
[193,169,0,204,167,182,154,188,192,162],
[166,135,136,0,147,154,118,171,170,148],
[179,147,173,193,0,175,145,184,210,171],
[163,145,158,186,165,0,146,170,174,171],
[190,166,186,222,195,194,0,212,214,175],
[166,159,152,169,156,170,128,0,182,169],
[169,142,148,170,130,166,126,158,0,156],
[170,172,178,192,169,169,165,171,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,156,174,165,158,170,191,167,189],
[176,0,163,170,157,184,176,192,177,178],
[184,177,0,175,163,171,168,192,180,187],
[166,170,165,0,149,159,160,185,169,167],
[175,183,177,191,0,180,169,198,192,204],
[182,156,169,181,160,0,180,194,177,182],
[170,164,172,180,171,160,0,174,185,193],
[149,148,148,155,142,146,166,0,177,186],
[173,163,160,171,148,163,155,163,0,171],
[151,162,153,173,136,158,147,154,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,154,153,164,142,159,151,142,153],
[185,0,166,197,170,184,173,182,166,180],
[186,174,0,172,173,157,162,161,163,176],
[187,143,168,0,180,143,174,163,177,153],
[176,170,167,160,0,178,172,174,154,171],
[198,156,183,197,162,0,191,185,180,163],
[181,167,178,166,168,149,0,171,162,162],
[189,158,179,177,166,155,169,0,147,168],
[198,174,177,163,186,160,178,193,0,193],
[187,160,164,187,169,177,178,172,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,166,176,170,167,175,177,171],
[172,0,161,169,182,172,161,151,166,169],
[166,179,0,185,194,180,171,176,175,159],
[174,171,155,0,181,170,168,174,173,154],
[164,158,146,159,0,174,155,154,161,163],
[170,168,160,170,166,0,170,173,167,160],
[173,179,169,172,185,170,0,169,187,170],
[165,189,164,166,186,167,171,0,178,167],
[163,174,165,167,179,173,153,162,0,163],
[169,171,181,186,177,180,170,173,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,172,190,186,196,171,163,183,190],
[131,0,167,174,163,143,166,140,155,183],
[168,173,0,180,161,167,151,131,140,178],
[150,166,160,0,157,164,158,135,161,169],
[154,177,179,183,0,168,181,156,166,186],
[144,197,173,176,172,0,163,154,165,168],
[169,174,189,182,159,177,0,175,170,192],
[177,200,209,205,184,186,165,0,189,206],
[157,185,200,179,174,175,170,151,0,194],
[150,157,162,171,154,172,148,134,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,174,174,181,182,184,169,205,169],
[163,0,168,155,196,181,197,150,181,148],
[166,172,0,163,159,173,174,176,197,175],
[166,185,177,0,208,163,199,155,191,165],
[159,144,181,132,0,159,191,149,182,136],
[158,159,167,177,181,0,184,137,185,149],
[156,143,166,141,149,156,0,149,163,148],
[171,190,164,185,191,203,191,0,193,172],
[135,159,143,149,158,155,177,147,0,142],
[171,192,165,175,204,191,192,168,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,175,152,154,146,145,144,166,161],
[188,0,178,165,162,169,169,173,169,178],
[165,162,0,158,162,159,157,176,150,180],
[188,175,182,0,174,156,164,176,166,172],
[186,178,178,166,0,168,182,177,171,176],
[194,171,181,184,172,0,171,161,174,195],
[195,171,183,176,158,169,0,186,167,172],
[196,167,164,164,163,179,154,0,166,168],
[174,171,190,174,169,166,173,174,0,173],
[179,162,160,168,164,145,168,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,157,169,145,160,169,136,166,136],
[205,0,187,175,179,170,209,158,176,167],
[183,153,0,161,199,152,196,141,152,149],
[171,165,179,0,173,152,176,171,176,183],
[195,161,141,167,0,171,194,148,146,164],
[180,170,188,188,169,0,226,164,187,187],
[171,131,144,164,146,114,0,136,141,148],
[204,182,199,169,192,176,204,0,173,167],
[174,164,188,164,194,153,199,167,0,181],
[204,173,191,157,176,153,192,173,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,167,179,153,177,164,156,181],
[169,0,171,164,171,150,159,144,168,174],
[167,169,0,165,160,139,141,150,164,160],
[173,176,175,0,173,164,161,165,181,172],
[161,169,180,167,0,159,156,155,166,182],
[187,190,201,176,181,0,169,168,183,182],
[163,181,199,179,184,171,0,183,167,192],
[176,196,190,175,185,172,157,0,172,185],
[184,172,176,159,174,157,173,168,0,183],
[159,166,180,168,158,158,148,155,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,136,0,0,0,203,137,135,0],
[272,0,68,205,136,205,272,205,203,205],
[204,272,0,204,204,204,272,204,135,204],
[340,135,136,0,204,340,272,204,135,205],
[340,204,136,136,0,204,272,204,135,137],
[340,135,136,0,136,0,272,137,135,137],
[137,68,68,68,68,68,0,137,135,68],
[203,135,136,136,136,203,203,0,271,136],
[205,137,205,205,205,205,205,69,0,137],
[340,135,136,135,203,203,272,204,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,192,190,189,187,187,176,188,184],
[178,0,202,190,174,170,172,173,197,169],
[148,138,0,162,167,170,160,157,163,160],
[150,150,178,0,165,170,167,143,176,166],
[151,166,173,175,0,167,185,169,180,170],
[153,170,170,170,173,0,176,165,180,163],
[153,168,180,173,155,164,0,170,173,177],
[164,167,183,197,171,175,170,0,181,184],
[152,143,177,164,160,160,167,159,0,175],
[156,171,180,174,170,177,163,156,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,152,172,167,174,211,182,196,164],
[207,0,168,185,155,179,184,188,181,182],
[188,172,0,172,146,162,184,183,163,151],
[168,155,168,0,150,170,191,180,203,180],
[173,185,194,190,0,153,213,201,203,182],
[166,161,178,170,187,0,206,211,178,178],
[129,156,156,149,127,134,0,168,142,173],
[158,152,157,160,139,129,172,0,173,188],
[144,159,177,137,137,162,198,167,0,155],
[176,158,189,160,158,162,167,152,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,175,192,162,169,206,171,169,180],
[145,0,152,167,148,148,189,148,149,173],
[165,188,0,176,165,165,181,156,168,178],
[148,173,164,0,160,163,177,152,162,168],
[178,192,175,180,0,185,198,169,180,199],
[171,192,175,177,155,0,188,165,166,177],
[134,151,159,163,142,152,0,146,150,176],
[169,192,184,188,171,175,194,0,162,195],
[171,191,172,178,160,174,190,178,0,193],
[160,167,162,172,141,163,164,145,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,194,250,182,232,198,222,225,247],
[180,0,179,205,126,164,154,204,165,177],
[146,161,0,223,174,223,201,211,212,197],
[90,135,117,0,91,129,144,125,102,142],
[158,214,166,249,0,169,182,236,182,236],
[108,176,117,211,171,0,132,192,142,182],
[142,186,139,196,158,208,0,182,131,211],
[118,136,129,215,104,148,158,0,158,210],
[115,175,128,238,158,198,209,182,0,221],
[93,163,143,198,104,158,129,130,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,150,164,141,150,158,138,147,155],
[193,0,181,190,185,205,172,186,192,164],
[190,159,0,191,175,216,189,152,159,168],
[176,150,149,0,174,189,163,169,166,181],
[199,155,165,166,0,172,171,153,133,154],
[190,135,124,151,168,0,176,174,183,157],
[182,168,151,177,169,164,0,178,182,157],
[202,154,188,171,187,166,162,0,189,176],
[193,148,181,174,207,157,158,151,0,170],
[185,176,172,159,186,183,183,164,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,170,168,179,194,145,172,160,157],
[185,0,172,168,182,186,149,181,165,163],
[170,168,0,166,189,190,155,175,163,178],
[172,172,174,0,177,196,151,166,174,163],
[161,158,151,163,0,162,164,178,153,149],
[146,154,150,144,178,0,150,167,166,145],
[195,191,185,189,176,190,0,193,176,161],
[168,159,165,174,162,173,147,0,163,161],
[180,175,177,166,187,174,164,177,0,151],
[183,177,162,177,191,195,179,179,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,154,152,156,167,164,146,174,155],
[160,0,166,162,152,172,179,152,178,173],
[186,174,0,146,170,178,171,174,179,185],
[188,178,194,0,167,184,172,158,188,184],
[184,188,170,173,0,195,180,179,181,185],
[173,168,162,156,145,0,167,156,162,165],
[176,161,169,168,160,173,0,164,203,165],
[194,188,166,182,161,184,176,0,186,182],
[166,162,161,152,159,178,137,154,0,181],
[185,167,155,156,155,175,175,158,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,143,156,168,184,165,146,158,145],
[153,0,154,156,145,183,138,164,170,147],
[197,186,0,174,179,199,193,189,193,170],
[184,184,166,0,176,194,171,157,161,144],
[172,195,161,164,0,208,182,174,167,161],
[156,157,141,146,132,0,134,142,135,144],
[175,202,147,169,158,206,0,172,189,162],
[194,176,151,183,166,198,168,0,182,169],
[182,170,147,179,173,205,151,158,0,156],
[195,193,170,196,179,196,178,171,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,167,155,158,173,149,175,154,171],
[169,0,162,168,172,184,173,173,159,175],
[173,178,0,157,163,151,168,164,145,140],
[185,172,183,0,183,177,155,156,160,181],
[182,168,177,157,0,156,161,169,154,158],
[167,156,189,163,184,0,172,167,156,166],
[191,167,172,185,179,168,0,184,147,157],
[165,167,176,184,171,173,156,0,179,165],
[186,181,195,180,186,184,193,161,0,168],
[169,165,200,159,182,174,183,175,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,173,187,174,175,177,159,181,179],
[155,0,169,164,183,189,173,156,181,164],
[167,171,0,158,162,157,174,173,170,158],
[153,176,182,0,171,170,176,161,182,175],
[166,157,178,169,0,171,188,175,185,162],
[165,151,183,170,169,0,169,176,175,158],
[163,167,166,164,152,171,0,169,177,163],
[181,184,167,179,165,164,171,0,180,180],
[159,159,170,158,155,165,163,160,0,149],
[161,176,182,165,178,182,177,160,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,171,175,168,181,165,180,190,171],
[169,0,159,171,170,198,166,159,181,164],
[169,181,0,180,167,179,181,172,184,172],
[165,169,160,0,160,171,164,175,177,167],
[172,170,173,180,0,190,180,188,186,172],
[159,142,161,169,150,0,158,160,158,158],
[175,174,159,176,160,182,0,165,177,163],
[160,181,168,165,152,180,175,0,181,174],
[150,159,156,163,154,182,163,159,0,165],
[169,176,168,173,168,182,177,166,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,157,161,159,162,170,171,170,182],
[168,0,166,171,175,170,171,168,184,180],
[183,174,0,181,168,172,180,170,175,180],
[179,169,159,0,163,171,190,157,172,169],
[181,165,172,177,0,162,192,170,179,183],
[178,170,168,169,178,0,182,161,179,182],
[170,169,160,150,148,158,0,153,178,162],
[169,172,170,183,170,179,187,0,192,185],
[170,156,165,168,161,161,162,148,0,183],
[158,160,160,171,157,158,178,155,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,172,176,153,180,158,147,173,182],
[164,0,170,172,155,182,175,158,171,181],
[168,170,0,186,156,175,175,157,168,162],
[164,168,154,0,155,190,157,177,167,180],
[187,185,184,185,0,196,170,169,181,176],
[160,158,165,150,144,0,158,162,167,163],
[182,165,165,183,170,182,0,174,165,178],
[193,182,183,163,171,178,166,0,177,187],
[167,169,172,173,159,173,175,163,0,180],
[158,159,178,160,164,177,162,153,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,173,167,181,194,211,187,177,195],
[141,0,161,178,184,159,189,185,170,188],
[167,179,0,214,167,175,201,175,165,166],
[173,162,126,0,166,200,172,190,173,178],
[159,156,173,174,0,182,180,185,156,201],
[146,181,165,140,158,0,167,196,159,185],
[129,151,139,168,160,173,0,160,159,179],
[153,155,165,150,155,144,180,0,135,201],
[163,170,175,167,184,181,181,205,0,190],
[145,152,174,162,139,155,161,139,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,170,156,162,184,166,185,163,178],
[170,0,171,154,182,165,176,188,175,175],
[170,169,0,179,173,173,181,185,160,200],
[184,186,161,0,183,181,187,187,176,180],
[178,158,167,157,0,171,188,182,179,189],
[156,175,167,159,169,0,163,182,160,175],
[174,164,159,153,152,177,0,180,155,186],
[155,152,155,153,158,158,160,0,158,171],
[177,165,180,164,161,180,185,182,0,191],
[162,165,140,160,151,165,154,169,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,176,120,155,217,195,197,219,201],
[201,0,159,119,175,118,195,198,219,102],
[164,181,0,120,138,140,157,140,218,140],
[220,221,220,0,138,180,158,238,201,164],
[185,165,202,202,0,201,220,219,181,125],
[123,222,200,160,139,0,219,201,222,141],
[145,145,183,182,120,121,0,141,160,125],
[143,142,200,102,121,139,199,0,139,121],
[121,121,122,139,159,118,180,201,0,120],
[139,238,200,176,215,199,215,219,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,143,165,136,180,158,168,159,175],
[142,0,139,171,135,153,151,164,158,153],
[197,201,0,169,163,185,185,160,160,215],
[175,169,171,0,168,178,166,160,160,181],
[204,205,177,172,0,201,183,173,159,196],
[160,187,155,162,139,0,160,161,146,173],
[182,189,155,174,157,180,0,183,166,182],
[172,176,180,180,167,179,157,0,174,175],
[181,182,180,180,181,194,174,166,0,198],
[165,187,125,159,144,167,158,165,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,170,162,178,174,177,181,162,156],
[186,0,176,167,151,193,174,180,172,163],
[170,164,0,157,172,186,171,182,163,151],
[178,173,183,0,166,184,173,182,185,152],
[162,189,168,174,0,175,173,164,196,166],
[166,147,154,156,165,0,176,166,177,178],
[163,166,169,167,167,164,0,185,174,161],
[159,160,158,158,176,174,155,0,183,161],
[178,168,177,155,144,163,166,157,0,161],
[184,177,189,188,174,162,179,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,211,160,178,113,210,211,163,193],
[196,0,243,178,244,180,194,212,212,146],
[129,97,0,95,98,66,143,161,144,79],
[180,162,245,0,180,179,177,245,194,145],
[162,96,242,160,0,145,144,192,160,112],
[227,160,274,161,195,0,225,243,193,241],
[130,146,197,163,196,115,0,245,180,113],
[129,128,179,95,148,97,95,0,177,112],
[177,128,196,146,180,147,160,163,0,126],
[147,194,261,195,228,99,227,228,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,155,157,167,152,150,171,153,169],
[192,0,178,182,189,183,185,178,164,181],
[185,162,0,168,184,185,168,174,174,168],
[183,158,172,0,173,179,176,184,166,171],
[173,151,156,167,0,173,157,171,166,163],
[188,157,155,161,167,0,171,154,171,165],
[190,155,172,164,183,169,0,174,164,170],
[169,162,166,156,169,186,166,0,163,168],
[187,176,166,174,174,169,176,177,0,178],
[171,159,172,169,177,175,170,172,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,206,201,133,229,162,186,174,161],
[170,0,181,177,158,185,190,178,205,207],
[134,159,0,161,158,187,162,175,193,178],
[139,163,179,0,152,222,171,178,160,181],
[207,182,182,188,0,189,164,180,213,228],
[111,155,153,118,151,0,137,99,125,139],
[178,150,178,169,176,203,0,212,201,204],
[154,162,165,162,160,241,128,0,159,182],
[166,135,147,180,127,215,139,181,0,192],
[179,133,162,159,112,201,136,158,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,144,163,135,135,174,169,171,167],
[172,0,152,176,152,157,171,162,161,167],
[196,188,0,189,161,172,191,165,160,174],
[177,164,151,0,141,144,174,154,173,166],
[205,188,179,199,0,181,183,165,179,197],
[205,183,168,196,159,0,186,165,181,166],
[166,169,149,166,157,154,0,155,167,172],
[171,178,175,186,175,175,185,0,164,165],
[169,179,180,167,161,159,173,176,0,164],
[173,173,166,174,143,174,168,175,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,156,116,210,208,143,180,179,179],
[154,0,181,145,170,196,144,151,142,170],
[184,159,0,145,207,238,224,208,128,196],
[224,195,195,0,206,237,194,208,139,248],
[130,170,133,134,0,146,133,168,140,166],
[132,144,102,103,194,0,157,146,141,181],
[197,196,116,146,207,183,0,182,126,182],
[160,189,132,132,172,194,158,0,115,207],
[161,198,212,201,200,199,214,225,0,207],
[161,170,144,92,174,159,158,133,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,146,193,146,145,143,145,145,169],
[122,0,123,146,171,194,145,147,147,169],
[194,217,0,217,220,218,168,144,219,195],
[147,194,123,0,147,170,170,148,147,145],
[194,169,120,193,0,168,119,145,119,217],
[195,146,122,170,172,0,168,146,171,194],
[197,195,172,170,221,172,0,196,196,172],
[195,193,196,192,195,194,144,0,169,218],
[195,193,121,193,221,169,144,171,0,219],
[171,171,145,195,123,146,168,122,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,170,174,159,165,163,166,159,168],
[182,0,176,175,160,167,183,166,171,172],
[170,164,0,169,173,169,190,173,154,174],
[166,165,171,0,170,168,184,174,157,178],
[181,180,167,170,0,181,175,181,157,164],
[175,173,171,172,159,0,180,187,166,175],
[177,157,150,156,165,160,0,165,150,160],
[174,174,167,166,159,153,175,0,168,173],
[181,169,186,183,183,174,190,172,0,174],
[172,168,166,162,176,165,180,167,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,185,201,182,166,221,169,189,192],
[131,0,146,183,160,152,170,152,188,154],
[155,194,0,202,185,193,195,176,181,182],
[139,157,138,0,154,131,164,154,168,165],
[158,180,155,186,0,162,201,157,206,184],
[174,188,147,209,178,0,203,172,210,170],
[119,170,145,176,139,137,0,134,195,173],
[171,188,164,186,183,168,206,0,182,184],
[151,152,159,172,134,130,145,158,0,152],
[148,186,158,175,156,170,167,156,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,188,177,187,170,181,173,180,173],
[151,0,169,160,166,160,156,174,180,162],
[152,171,0,173,176,160,182,176,179,164],
[163,180,167,0,176,163,165,171,178,179],
[153,174,164,164,0,169,187,161,185,168],
[170,180,180,177,171,0,169,180,187,188],
[159,184,158,175,153,171,0,167,175,170],
[167,166,164,169,179,160,173,0,187,174],
[160,160,161,162,155,153,165,153,0,166],
[167,178,176,161,172,152,170,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,215,194,197,139,144,205,187,177],
[133,0,164,149,193,169,167,176,135,142],
[125,176,0,160,163,122,146,145,129,132],
[146,191,180,0,180,183,162,140,131,142],
[143,147,177,160,0,141,162,158,109,143],
[201,171,218,157,199,0,197,186,186,199],
[196,173,194,178,178,143,0,166,172,141],
[135,164,195,200,182,154,174,0,154,174],
[153,205,211,209,231,154,168,186,0,184],
[163,198,208,198,197,141,199,166,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,226,182,190,205,165,195,202,181],
[147,0,183,188,208,161,141,172,187,179],
[114,157,0,158,156,181,162,162,189,180],
[158,152,182,0,169,180,174,172,166,170],
[150,132,184,171,0,151,163,205,178,213],
[135,179,159,160,189,0,139,150,218,172],
[175,199,178,166,177,201,0,180,184,198],
[145,168,178,168,135,190,160,0,219,200],
[138,153,151,174,162,122,156,121,0,127],
[159,161,160,170,127,168,142,140,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,168,168,174,165,165,174,170,161],
[166,0,183,176,169,172,161,181,182,172],
[172,157,0,145,166,142,158,170,165,155],
[172,164,195,0,182,178,181,185,179,174],
[166,171,174,158,0,161,159,173,165,162],
[175,168,198,162,179,0,171,175,180,160],
[175,179,182,159,181,169,0,183,185,172],
[166,159,170,155,167,165,157,0,170,161],
[170,158,175,161,175,160,155,170,0,162],
[179,168,185,166,178,180,168,179,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,85,85,0,85,85,85,0,85],
[255,0,255,255,255,255,170,255,255,85],
[255,85,0,170,170,255,85,255,255,85],
[255,85,170,0,170,170,85,170,85,85],
[340,85,170,170,0,255,170,170,170,85],
[255,85,85,170,85,0,85,170,85,85],
[255,170,255,255,170,255,0,255,170,85],
[255,85,85,170,170,170,85,0,170,170],
[340,85,85,255,170,255,170,170,0,85],
[255,255,255,255,255,255,255,170,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,160,185,172,166,175,177,172,162],
[163,0,159,184,177,177,160,162,177,171],
[180,181,0,195,187,179,165,178,187,174],
[155,156,145,0,169,156,158,151,158,153],
[168,163,153,171,0,165,172,163,165,160],
[174,163,161,184,175,0,163,154,175,167],
[165,180,175,182,168,177,0,165,176,161],
[163,178,162,189,177,186,175,0,178,166],
[168,163,153,182,175,165,164,162,0,169],
[178,169,166,187,180,173,179,174,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,156,175,157,180,151,166,165,171],
[181,0,173,186,169,170,172,160,163,173],
[184,167,0,198,185,181,173,184,164,166],
[165,154,142,0,149,156,165,151,155,153],
[183,171,155,191,0,178,169,172,164,157],
[160,170,159,184,162,0,161,172,174,171],
[189,168,167,175,171,179,0,171,170,162],
[174,180,156,189,168,168,169,0,159,155],
[175,177,176,185,176,166,170,181,0,158],
[169,167,174,187,183,169,178,185,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,113,113,115,56,114,57,113,0],
[170,0,56,56,171,56,0,171,112,56],
[227,284,0,228,172,171,114,171,227,114],
[227,284,112,0,227,56,226,171,169,56],
[225,169,168,113,0,56,113,113,169,112],
[284,284,169,284,284,0,226,227,226,112],
[226,340,226,114,227,114,0,227,226,170],
[283,169,169,169,227,113,113,0,225,56],
[227,228,113,171,171,114,114,115,0,56],
[340,284,226,284,228,228,170,284,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,175,178,160,148,170,152,163],
[175,0,165,177,185,170,154,174,159,170],
[171,175,0,173,194,174,168,169,172,170],
[165,163,167,0,184,167,155,158,163,157],
[162,155,146,156,0,151,156,156,153,144],
[180,170,166,173,189,0,158,176,183,175],
[192,186,172,185,184,182,0,169,176,159],
[170,166,171,182,184,164,171,0,164,167],
[188,181,168,177,187,157,164,176,0,184],
[177,170,170,183,196,165,181,173,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,166,161,187,161,180,183,151,164],
[161,0,160,169,180,162,171,161,161,153],
[174,180,0,178,183,178,183,172,165,188],
[179,171,162,0,172,173,205,164,175,202],
[153,160,157,168,0,140,175,160,150,163],
[179,178,162,167,200,0,187,170,164,177],
[160,169,157,135,165,153,0,160,151,150],
[157,179,168,176,180,170,180,0,161,183],
[189,179,175,165,190,176,189,179,0,171],
[176,187,152,138,177,163,190,157,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,166,172,178,170,165,173,162,177],
[165,0,173,162,168,186,167,164,158,184],
[174,167,0,173,165,183,175,176,160,173],
[168,178,167,0,159,184,160,176,172,173],
[162,172,175,181,0,196,169,159,159,185],
[170,154,157,156,144,0,157,145,145,157],
[175,173,165,180,171,183,0,168,166,185],
[167,176,164,164,181,195,172,0,155,180],
[178,182,180,168,181,195,174,185,0,195],
[163,156,167,167,155,183,155,160,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,190,189,177,172,164,180,182,183],
[143,0,171,157,167,166,156,162,165,159],
[150,169,0,173,161,159,152,164,171,171],
[151,183,167,0,177,176,176,168,172,175],
[163,173,179,163,0,156,162,173,167,177],
[168,174,181,164,184,0,174,163,175,181],
[176,184,188,164,178,166,0,182,179,190],
[160,178,176,172,167,177,158,0,172,183],
[158,175,169,168,173,165,161,168,0,172],
[157,181,169,165,163,159,150,157,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,169,162,172,166,159,195,163,162],
[168,0,188,169,155,144,173,176,151,149],
[171,152,0,165,147,164,164,200,163,150],
[178,171,175,0,167,150,178,193,160,155],
[168,185,193,173,0,153,182,182,134,168],
[174,196,176,190,187,0,182,191,168,176],
[181,167,176,162,158,158,0,183,162,153],
[145,164,140,147,158,149,157,0,130,141],
[177,189,177,180,206,172,178,210,0,156],
[178,191,190,185,172,164,187,199,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,173,184,225,189,156,155,165,172],
[144,0,133,114,196,179,155,134,156,133],
[167,207,0,158,202,209,187,197,157,159],
[156,226,182,0,203,187,195,162,184,192],
[115,144,138,137,0,156,155,145,167,124],
[151,161,131,153,184,0,147,145,156,145],
[184,185,153,145,185,193,0,183,175,165],
[185,206,143,178,195,195,157,0,166,166],
[175,184,183,156,173,184,165,174,0,161],
[168,207,181,148,216,195,175,174,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,149,140,168,162,168,179,167,160],
[188,0,177,161,177,169,191,205,178,188],
[191,163,0,156,174,168,165,184,172,169],
[200,179,184,0,200,170,200,193,191,194],
[172,163,166,140,0,166,174,177,175,180],
[178,171,172,170,174,0,176,175,185,206],
[172,149,175,140,166,164,0,173,165,164],
[161,135,156,147,163,165,167,0,166,151],
[173,162,168,149,165,155,175,174,0,181],
[180,152,171,146,160,134,176,189,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,181,176,169,169,176,173,173,168],
[165,0,175,182,173,175,178,175,173,167],
[159,165,0,168,157,173,164,174,152,163],
[164,158,172,0,158,165,163,170,169,172],
[171,167,183,182,0,178,178,180,170,178],
[171,165,167,175,162,0,176,179,165,169],
[164,162,176,177,162,164,0,182,169,169],
[167,165,166,170,160,161,158,0,156,169],
[167,167,188,171,170,175,171,184,0,176],
[172,173,177,168,162,171,171,171,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,171,166,152,162,162,159,155,172],
[185,0,172,171,166,186,166,174,181,172],
[169,168,0,171,166,189,167,170,163,170],
[174,169,169,0,170,181,167,173,159,172],
[188,174,174,170,0,189,177,174,176,183],
[178,154,151,159,151,0,156,152,160,168],
[178,174,173,173,163,184,0,178,177,171],
[181,166,170,167,166,188,162,0,177,168],
[185,159,177,181,164,180,163,163,0,181],
[168,168,170,168,157,172,169,172,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,166,159,173,164,181,187,167,181],
[173,0,176,155,175,168,174,180,162,167],
[174,164,0,155,165,159,168,173,168,168],
[181,185,185,0,172,170,185,190,173,175],
[167,165,175,168,0,163,170,179,174,169],
[176,172,181,170,177,0,174,187,168,181],
[159,166,172,155,170,166,0,177,158,166],
[153,160,167,150,161,153,163,0,167,166],
[173,178,172,167,166,172,182,173,0,173],
[159,173,172,165,171,159,174,174,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,166,164,174,177,182,169,189,192],
[169,0,169,176,174,181,184,167,183,183],
[174,171,0,166,165,168,174,174,176,179],
[176,164,174,0,167,165,173,170,178,170],
[166,166,175,173,0,181,185,170,194,189],
[163,159,172,175,159,0,186,157,179,183],
[158,156,166,167,155,154,0,162,176,180],
[171,173,166,170,170,183,178,0,191,177],
[151,157,164,162,146,161,164,149,0,177],
[148,157,161,170,151,157,160,163,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,172,156,166,169,180,169,175,181],
[180,0,184,169,202,174,194,194,188,179],
[168,156,0,167,174,166,176,162,172,156],
[184,171,173,0,175,174,169,178,183,177],
[174,138,166,165,0,158,159,159,178,163],
[171,166,174,166,182,0,169,182,174,166],
[160,146,164,171,181,171,0,180,181,172],
[171,146,178,162,181,158,160,0,164,168],
[165,152,168,157,162,166,159,176,0,167],
[159,161,184,163,177,174,168,172,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,157,168,180,157,151,161,182,171],
[178,0,161,165,156,164,162,170,182,160],
[183,179,0,171,183,177,166,199,183,170],
[172,175,169,0,174,178,158,182,179,157],
[160,184,157,166,0,169,153,175,172,161],
[183,176,163,162,171,0,159,178,172,161],
[189,178,174,182,187,181,0,170,177,174],
[179,170,141,158,165,162,170,0,189,162],
[158,158,157,161,168,168,163,151,0,145],
[169,180,170,183,179,179,166,178,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,56,113,226,57,0,57,56,113],
[170,0,113,170,170,114,114,114,170,170],
[284,227,0,284,227,227,171,114,114,170],
[227,170,56,0,170,114,114,114,114,114],
[114,170,113,170,0,57,57,171,113,114],
[283,226,113,226,283,0,114,171,113,170],
[340,226,169,226,283,226,0,227,283,283],
[283,226,226,226,169,169,113,0,226,283],
[284,170,226,226,227,227,57,114,0,284],
[227,170,170,226,226,170,57,57,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,196,174,171,164,196,151,205,166],
[162,0,187,176,186,178,186,155,198,202],
[144,153,0,159,175,157,157,165,177,156],
[166,164,181,0,183,179,186,180,185,180],
[169,154,165,157,0,158,178,145,185,179],
[176,162,183,161,182,0,150,152,192,151],
[144,154,183,154,162,190,0,151,199,158],
[189,185,175,160,195,188,189,0,220,189],
[135,142,163,155,155,148,141,120,0,149],
[174,138,184,160,161,189,182,151,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,134,154,138,130,156,146,144,156],
[193,0,182,145,175,141,175,198,182,144],
[206,158,0,158,162,151,159,173,184,169],
[186,195,182,0,185,194,169,171,150,161],
[202,165,178,155,0,166,194,164,171,173],
[210,199,189,146,174,0,196,176,193,159],
[184,165,181,171,146,144,0,176,185,165],
[194,142,167,169,176,164,164,0,185,161],
[196,158,156,190,169,147,155,155,0,145],
[184,196,171,179,167,181,175,179,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,181,181,170,183,164,174,177,175],
[165,0,175,171,178,181,172,172,174,176],
[159,165,0,160,170,171,163,163,166,169],
[159,169,180,0,170,184,179,176,166,158],
[170,162,170,170,0,175,163,173,167,177],
[157,159,169,156,165,0,152,173,165,174],
[176,168,177,161,177,188,0,189,172,174],
[166,168,177,164,167,167,151,0,164,167],
[163,166,174,174,173,175,168,176,0,164],
[165,164,171,182,163,166,166,173,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,156,180,189,165,191,178,170,173],
[158,0,159,159,173,162,190,160,183,183],
[184,181,0,167,188,171,199,173,189,187],
[160,181,173,0,172,168,197,175,173,196],
[151,167,152,168,0,155,175,167,161,150],
[175,178,169,172,185,0,189,178,190,181],
[149,150,141,143,165,151,0,151,157,162],
[162,180,167,165,173,162,189,0,179,176],
[170,157,151,167,179,150,183,161,0,183],
[167,157,153,144,190,159,178,164,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,156,147,149,142,164,161,165,145],
[190,0,171,181,164,167,173,166,194,172],
[184,169,0,169,154,163,158,155,210,171],
[193,159,171,0,169,179,170,165,194,173],
[191,176,186,171,0,158,179,175,186,171],
[198,173,177,161,182,0,173,163,193,171],
[176,167,182,170,161,167,0,169,188,165],
[179,174,185,175,165,177,171,0,193,176],
[175,146,130,146,154,147,152,147,0,156],
[195,168,169,167,169,169,175,164,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,188,177,183,165,148,142,152,169],
[183,0,203,193,191,183,153,148,176,186],
[152,137,0,170,150,166,131,145,136,133],
[163,147,170,0,147,160,149,160,149,146],
[157,149,190,193,0,148,149,156,136,160],
[175,157,174,180,192,0,152,142,154,163],
[192,187,209,191,191,188,0,184,166,171],
[198,192,195,180,184,198,156,0,180,186],
[188,164,204,191,204,186,174,160,0,173],
[171,154,207,194,180,177,169,154,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,182,173,186,194,198,170,196,201],
[163,0,187,180,185,196,188,168,199,190],
[158,153,0,172,183,182,215,165,188,184],
[167,160,168,0,175,188,189,161,162,191],
[154,155,157,165,0,179,199,155,180,171],
[146,144,158,152,161,0,169,146,151,163],
[142,152,125,151,141,171,0,136,140,172],
[170,172,175,179,185,194,204,0,159,186],
[144,141,152,178,160,189,200,181,0,166],
[139,150,156,149,169,177,168,154,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,181,180,183,158,156,168,170,169],
[171,0,192,177,193,156,176,177,171,179],
[159,148,0,171,162,153,143,170,139,157],
[160,163,169,0,186,152,148,169,174,167],
[157,147,178,154,0,145,139,167,147,164],
[182,184,187,188,195,0,165,192,170,182],
[184,164,197,192,201,175,0,196,179,191],
[172,163,170,171,173,148,144,0,171,162],
[170,169,201,166,193,170,161,169,0,183],
[171,161,183,173,176,158,149,178,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,157,172,147,157,165,169,155,143],
[177,0,178,174,155,180,188,164,180,165],
[183,162,0,158,143,181,186,171,177,178],
[168,166,182,0,154,166,177,166,180,172],
[193,185,197,186,0,199,201,181,191,169],
[183,160,159,174,141,0,201,178,173,178],
[175,152,154,163,139,139,0,162,159,166],
[171,176,169,174,159,162,178,0,191,166],
[185,160,163,160,149,167,181,149,0,157],
[197,175,162,168,171,162,174,174,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,152,174,174,172,167,174,183,159],
[173,0,157,170,161,175,147,159,164,160],
[188,183,0,185,164,184,179,171,177,178],
[166,170,155,0,151,174,152,163,162,152],
[166,179,176,189,0,190,177,180,170,186],
[168,165,156,166,150,0,157,187,182,165],
[173,193,161,188,163,183,0,171,180,175],
[166,181,169,177,160,153,169,0,175,176],
[157,176,163,178,170,158,160,165,0,166],
[181,180,162,188,154,175,165,164,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,168,151,174,183,174,166,182,173],
[150,0,163,148,150,165,168,165,166,161],
[172,177,0,160,171,175,174,168,181,177],
[189,192,180,0,196,184,169,193,194,166],
[166,190,169,144,0,169,177,176,176,184],
[157,175,165,156,171,0,164,172,170,175],
[166,172,166,171,163,176,0,179,175,185],
[174,175,172,147,164,168,161,0,184,184],
[158,174,159,146,164,170,165,156,0,161],
[167,179,163,174,156,165,155,156,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,169,168,173,166,183,154,185,166],
[165,0,176,172,176,176,187,166,209,174],
[171,164,0,152,161,152,160,162,178,162],
[172,168,188,0,187,149,176,169,188,175],
[167,164,179,153,0,154,167,147,183,160],
[174,164,188,191,186,0,195,188,188,175],
[157,153,180,164,173,145,0,158,165,159],
[186,174,178,171,193,152,182,0,192,174],
[155,131,162,152,157,152,175,148,0,144],
[174,166,178,165,180,165,181,166,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,177,168,164,178,196,194,181,173],
[167,0,149,153,149,156,171,173,155,179],
[163,191,0,167,169,168,168,185,169,169],
[172,187,173,0,163,167,186,182,161,171],
[176,191,171,177,0,162,183,193,167,190],
[162,184,172,173,178,0,162,187,169,167],
[144,169,172,154,157,178,0,161,151,170],
[146,167,155,158,147,153,179,0,145,173],
[159,185,171,179,173,171,189,195,0,171],
[167,161,171,169,150,173,170,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,171,176,160,183,159,163,169,173],
[158,0,154,163,148,165,174,159,160,153],
[169,186,0,179,175,184,183,172,183,175],
[164,177,161,0,160,171,173,179,168,173],
[180,192,165,180,0,177,188,170,180,175],
[157,175,156,169,163,0,175,164,166,163],
[181,166,157,167,152,165,0,164,153,173],
[177,181,168,161,170,176,176,0,178,171],
[171,180,157,172,160,174,187,162,0,169],
[167,187,165,167,165,177,167,169,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,168,190,170,167,169,194,175,170],
[180,0,164,187,184,174,174,189,176,170],
[172,176,0,171,166,173,156,165,181,156],
[150,153,169,0,173,168,169,159,162,167],
[170,156,174,167,0,165,174,180,175,159],
[173,166,167,172,175,0,175,183,175,159],
[171,166,184,171,166,165,0,176,168,168],
[146,151,175,181,160,157,164,0,172,149],
[165,164,159,178,165,165,172,168,0,154],
[170,170,184,173,181,181,172,191,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,149,157,165,162,170,144,164,187],
[139,0,141,179,176,138,172,174,142,147],
[191,199,0,176,208,158,188,164,161,190],
[183,161,164,0,178,128,181,165,158,156],
[175,164,132,162,0,141,148,137,158,134],
[178,202,182,212,199,0,208,153,207,180],
[170,168,152,159,192,132,0,130,156,177],
[196,166,176,175,203,187,210,0,180,163],
[176,198,179,182,182,133,184,160,0,188],
[153,193,150,184,206,160,163,177,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,152,158,168,159,147,163,148,164],
[190,0,170,171,186,181,161,174,169,189],
[188,170,0,197,182,191,185,186,193,192],
[182,169,143,0,164,155,157,182,162,169],
[172,154,158,176,0,171,154,175,171,167],
[181,159,149,185,169,0,162,170,159,186],
[193,179,155,183,186,178,0,171,172,181],
[177,166,154,158,165,170,169,0,167,181],
[192,171,147,178,169,181,168,173,0,176],
[176,151,148,171,173,154,159,159,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,183,156,163,172,178,152,184,197],
[168,0,147,146,159,181,166,156,159,153],
[157,193,0,162,180,183,183,170,169,186],
[184,194,178,0,183,184,177,156,180,202],
[177,181,160,157,0,177,171,164,178,178],
[168,159,157,156,163,0,160,155,170,173],
[162,174,157,163,169,180,0,134,185,177],
[188,184,170,184,176,185,206,0,192,196],
[156,181,171,160,162,170,155,148,0,167],
[143,187,154,138,162,167,163,144,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,166,195,177,208,189,197,208,184],
[170,0,186,161,147,208,172,189,197,184],
[174,154,0,161,150,182,162,203,204,169],
[145,179,179,0,177,189,192,204,213,185],
[163,193,190,163,0,192,188,211,196,185],
[132,132,158,151,148,0,168,167,179,162],
[151,168,178,148,152,172,0,197,183,177],
[143,151,137,136,129,173,143,0,160,145],
[132,143,136,127,144,161,157,180,0,153],
[156,156,171,155,155,178,163,195,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,207,202,192,163,169,193,193,205],
[162,0,197,182,151,160,171,180,167,153],
[133,143,0,146,157,120,152,159,140,164],
[138,158,194,0,169,159,154,171,169,160],
[148,189,183,171,0,166,163,199,160,172],
[177,180,220,181,174,0,196,200,179,170],
[171,169,188,186,177,144,0,206,182,191],
[147,160,181,169,141,140,134,0,166,175],
[147,173,200,171,180,161,158,174,0,189],
[135,187,176,180,168,170,149,165,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,180,176,181,186,161,175,148,162],
[188,0,185,191,173,174,170,184,174,184],
[160,155,0,175,154,167,167,175,151,162],
[164,149,165,0,163,173,165,183,158,161],
[159,167,186,177,0,176,173,183,160,174],
[154,166,173,167,164,0,153,176,158,161],
[179,170,173,175,167,187,0,189,164,185],
[165,156,165,157,157,164,151,0,153,175],
[192,166,189,182,180,182,176,187,0,184],
[178,156,178,179,166,179,155,165,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,176,163,157,179,178,173,177,173],
[180,0,177,178,167,187,181,171,185,178],
[164,163,0,156,158,164,162,158,178,164],
[177,162,184,0,174,174,166,173,191,175],
[183,173,182,166,0,182,177,178,196,173],
[161,153,176,166,158,0,170,182,174,164],
[162,159,178,174,163,170,0,184,179,182],
[167,169,182,167,162,158,156,0,189,165],
[163,155,162,149,144,166,161,151,0,141],
[167,162,176,165,167,176,158,175,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,190,259,213,254,169,277,171,212],
[132,0,128,216,195,257,173,215,131,129],
[150,212,0,213,170,195,151,192,130,169],
[81,124,127,0,125,147,128,170,148,124],
[127,145,170,215,0,150,152,172,173,149],
[86,83,145,193,190,0,151,233,170,148],
[171,167,189,212,188,189,0,255,149,166],
[63,125,148,170,168,107,85,0,107,127],
[169,209,210,192,167,170,191,233,0,167],
[128,211,171,216,191,192,174,213,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,158,194,161,170,151,178,176,173],
[174,0,159,179,166,175,154,186,167,180],
[182,181,0,187,174,167,166,185,177,168],
[146,161,153,0,152,162,146,171,160,167],
[179,174,166,188,0,179,177,192,186,174],
[170,165,173,178,161,0,155,177,182,176],
[189,186,174,194,163,185,0,170,198,177],
[162,154,155,169,148,163,170,0,163,162],
[164,173,163,180,154,158,142,177,0,160],
[167,160,172,173,166,164,163,178,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,170,157,163,176,172,138,165,160],
[175,0,167,167,197,188,176,143,173,155],
[170,173,0,164,180,163,182,151,168,129],
[183,173,176,0,190,141,187,162,172,148],
[177,143,160,150,0,146,171,147,154,135],
[164,152,177,199,194,0,196,140,175,161],
[168,164,158,153,169,144,0,151,153,143],
[202,197,189,178,193,200,189,0,161,176],
[175,167,172,168,186,165,187,179,0,153],
[180,185,211,192,205,179,197,164,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,185,235,181,158,184,235,235,184],
[181,0,183,233,180,182,129,259,260,210],
[155,157,0,182,233,184,182,235,207,235],
[105,107,158,0,157,160,132,159,157,183],
[159,160,107,183,0,157,159,182,158,132],
[182,158,156,180,183,0,209,262,207,210],
[156,211,158,208,181,131,0,208,235,158],
[105,81,105,181,158,78,132,0,210,159],
[105,80,133,183,182,133,105,130,0,237],
[156,130,105,157,208,130,182,181,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,154,156,184,145,164,149,158,152],
[189,0,160,191,201,159,209,181,187,204],
[186,180,0,158,191,168,167,136,172,168],
[184,149,182,0,205,177,183,170,166,166],
[156,139,149,135,0,137,151,146,120,140],
[195,181,172,163,203,0,184,181,183,182],
[176,131,173,157,189,156,0,182,142,151],
[191,159,204,170,194,159,158,0,162,184],
[182,153,168,174,220,157,198,178,0,165],
[188,136,172,174,200,158,189,156,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,160,179,179,167,157,175,195,169],
[150,0,140,168,182,157,149,156,176,168],
[180,200,0,196,185,176,175,166,191,198],
[161,172,144,0,162,169,152,162,171,178],
[161,158,155,178,0,156,145,123,181,163],
[173,183,164,171,184,0,159,159,186,174],
[183,191,165,188,195,181,0,169,198,190],
[165,184,174,178,217,181,171,0,186,185],
[145,164,149,169,159,154,142,154,0,161],
[171,172,142,162,177,166,150,155,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,172,163,181,166,188,165,124,169],
[191,0,190,172,192,185,174,163,174,192],
[168,150,0,171,191,170,160,159,154,190],
[177,168,169,0,187,188,159,175,136,171],
[159,148,149,153,0,129,161,149,135,164],
[174,155,170,152,211,0,166,146,137,195],
[152,166,180,181,179,174,0,159,159,184],
[175,177,181,165,191,194,181,0,157,174],
[216,166,186,204,205,203,181,183,0,186],
[171,148,150,169,176,145,156,166,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,144,163,127,152,178,172,210,209],
[175,0,175,167,170,165,182,158,175,202],
[196,165,0,182,170,183,205,189,189,202],
[177,173,158,0,135,185,193,178,189,209],
[213,170,170,205,0,177,191,169,213,219],
[188,175,157,155,163,0,185,171,176,194],
[162,158,135,147,149,155,0,157,166,169],
[168,182,151,162,171,169,183,0,158,196],
[130,165,151,151,127,164,174,182,0,201],
[131,138,138,131,121,146,171,144,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,171,169,169,160,161,171,150,158],
[184,0,182,191,176,174,171,172,167,163],
[169,158,0,183,162,158,176,161,164,159],
[171,149,157,0,158,150,165,155,146,150],
[171,164,178,182,0,159,183,182,164,159],
[180,166,182,190,181,0,188,186,163,168],
[179,169,164,175,157,152,0,174,167,157],
[169,168,179,185,158,154,166,0,156,160],
[190,173,176,194,176,177,173,184,0,170],
[182,177,181,190,181,172,183,180,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,170,168,158,171,177,172,173,176],
[150,0,155,153,149,146,163,152,154,145],
[170,185,0,170,172,172,170,179,172,167],
[172,187,170,0,157,177,175,178,175,175],
[182,191,168,183,0,180,180,192,179,185],
[169,194,168,163,160,0,173,181,166,174],
[163,177,170,165,160,167,0,171,172,163],
[168,188,161,162,148,159,169,0,168,176],
[167,186,168,165,161,174,168,172,0,168],
[164,195,173,165,155,166,177,164,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,112,157,154,163,155,156,130,143],
[203,0,134,169,147,144,171,166,110,137],
[228,206,0,173,152,152,170,182,136,150],
[183,171,167,0,191,186,180,170,153,159],
[186,193,188,149,0,137,221,189,176,155],
[177,196,188,154,203,0,183,161,188,190],
[185,169,170,160,119,157,0,146,142,115],
[184,174,158,170,151,179,194,0,154,171],
[210,230,204,187,164,152,198,186,0,148],
[197,203,190,181,185,150,225,169,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,172,183,166,168,164,165,171,183],
[159,0,173,182,178,185,163,169,179,167],
[168,167,0,172,168,171,147,160,164,170],
[157,158,168,0,168,162,152,161,161,181],
[174,162,172,172,0,173,159,173,162,172],
[172,155,169,178,167,0,162,171,165,169],
[176,177,193,188,181,178,0,170,177,183],
[175,171,180,179,167,169,170,0,168,176],
[169,161,176,179,178,175,163,172,0,176],
[157,173,170,159,168,171,157,164,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,154,167,159,166,172,159,160,164],
[184,0,185,180,182,177,181,168,173,174],
[186,155,0,160,173,170,178,165,172,176],
[173,160,180,0,174,178,176,166,155,175],
[181,158,167,166,0,164,174,166,156,167],
[174,163,170,162,176,0,179,165,169,168],
[168,159,162,164,166,161,0,171,153,174],
[181,172,175,174,174,175,169,0,160,175],
[180,167,168,185,184,171,187,180,0,173],
[176,166,164,165,173,172,166,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,181,175,200,185,208,166,184,173],
[150,0,187,107,178,183,157,122,163,152],
[159,153,0,153,180,169,143,128,170,109],
[165,233,187,0,198,208,177,174,189,163],
[140,162,160,142,0,146,152,135,153,127],
[155,157,171,132,194,0,176,157,151,153],
[132,183,197,163,188,164,0,151,160,155],
[174,218,212,166,205,183,189,0,170,171],
[156,177,170,151,187,189,180,170,0,151],
[167,188,231,177,213,187,185,169,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,179,191,213,159,166,173,196,170],
[152,0,176,168,192,176,171,174,198,169],
[161,164,0,182,197,161,148,178,207,154],
[149,172,158,0,186,156,131,157,189,146],
[127,148,143,154,0,146,135,163,163,151],
[181,164,179,184,194,0,171,173,180,168],
[174,169,192,209,205,169,0,185,202,185],
[167,166,162,183,177,167,155,0,177,152],
[144,142,133,151,177,160,138,163,0,154],
[170,171,186,194,189,172,155,188,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,185,180,196,181,184,213,173,204],
[170,0,171,153,177,164,157,241,174,150],
[155,169,0,163,155,169,155,213,150,175],
[160,187,177,0,185,188,180,224,204,168],
[144,163,185,155,0,155,149,217,193,175],
[159,176,171,152,185,0,157,178,193,171],
[156,183,185,160,191,183,0,248,189,179],
[127,99,127,116,123,162,92,0,169,144],
[167,166,190,136,147,147,151,171,0,186],
[136,190,165,172,165,169,161,196,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,162,161,154,167,157,177,163,182],
[164,0,147,164,150,154,151,155,161,164],
[178,193,0,178,167,175,170,168,188,174],
[179,176,162,0,168,173,169,152,165,187],
[186,190,173,172,0,157,169,157,169,183],
[173,186,165,167,183,0,161,161,189,163],
[183,189,170,171,171,179,0,158,174,187],
[163,185,172,188,183,179,182,0,178,196],
[177,179,152,175,171,151,166,162,0,174],
[158,176,166,153,157,177,153,144,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,142,291,340,340,192,243,194,243],
[195,0,145,244,244,293,195,196,147,196],
[198,195,0,245,245,245,148,198,196,245],
[49,96,95,0,193,240,95,49,47,96],
[0,96,95,147,0,146,95,49,0,99],
[0,47,95,100,194,0,97,50,100,100],
[148,145,192,245,245,243,0,146,196,245],
[97,144,142,291,291,290,194,0,192,291],
[146,193,144,293,340,240,144,148,0,243],
[97,144,95,244,241,240,95,49,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,153,155,180,172,149,175,158,173],
[206,0,192,167,200,179,158,188,171,169],
[187,148,0,163,179,183,152,203,176,155],
[185,173,177,0,195,178,158,173,196,146],
[160,140,161,145,0,143,126,159,149,148],
[168,161,157,162,197,0,156,161,166,152],
[191,182,188,182,214,184,0,197,160,175],
[165,152,137,167,181,179,143,0,156,158],
[182,169,164,144,191,174,180,184,0,157],
[167,171,185,194,192,188,165,182,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,209,244,162,178,244,180,130,178],
[145,0,192,223,147,176,179,144,163,129],
[131,148,0,230,163,195,198,182,164,181],
[96,117,110,0,99,95,82,101,115,95],
[178,193,177,241,0,178,196,147,162,130],
[162,164,145,245,162,0,195,167,180,183],
[96,161,142,258,144,145,0,146,129,144],
[160,196,158,239,193,173,194,0,179,157],
[210,177,176,225,178,160,211,161,0,160],
[162,211,159,245,210,157,196,183,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,156,197,176,103,199,192,181,201],
[131,0,144,145,176,143,157,178,165,193],
[184,196,0,155,175,149,163,157,181,181],
[143,195,185,0,179,153,202,170,219,175],
[164,164,165,161,0,138,174,150,173,181],
[237,197,191,187,202,0,188,166,191,200],
[141,183,177,138,166,152,0,161,193,184],
[148,162,183,170,190,174,179,0,208,193],
[159,175,159,121,167,149,147,132,0,151],
[139,147,159,165,159,140,156,147,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,186,150,135,179,182,165,183,171],
[149,0,157,153,137,168,170,161,160,137],
[154,183,0,145,139,174,149,165,178,157],
[190,187,195,0,178,197,207,166,153,164],
[205,203,201,162,0,194,205,178,195,172],
[161,172,166,143,146,0,197,167,181,148],
[158,170,191,133,135,143,0,139,182,177],
[175,179,175,174,162,173,201,0,189,173],
[157,180,162,187,145,159,158,151,0,128],
[169,203,183,176,168,192,163,167,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,168,187,178,181,160,181,165,170],
[161,0,170,157,155,173,161,180,166,169],
[172,170,0,169,162,174,162,179,177,170],
[153,183,171,0,178,172,162,177,176,175],
[162,185,178,162,0,166,175,173,164,168],
[159,167,166,168,174,0,181,185,160,171],
[180,179,178,178,165,159,0,175,169,185],
[159,160,161,163,167,155,165,0,160,163],
[175,174,163,164,176,180,171,180,0,167],
[170,171,170,165,172,169,155,177,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,166,166,171,166,176,157,184,160],
[179,0,176,189,198,183,188,184,185,170],
[174,164,0,162,181,182,153,171,175,180],
[174,151,178,0,182,179,167,170,190,175],
[169,142,159,158,0,165,167,160,161,160],
[174,157,158,161,175,0,168,159,190,171],
[164,152,187,173,173,172,0,174,190,185],
[183,156,169,170,180,181,166,0,184,168],
[156,155,165,150,179,150,150,156,0,157],
[180,170,160,165,180,169,155,172,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,171,151,152,160,200,137,168,129],
[214,0,198,181,179,192,208,197,190,170],
[169,142,0,141,167,171,168,143,159,147],
[189,159,199,0,177,188,202,162,173,172],
[188,161,173,163,0,174,189,142,178,155],
[180,148,169,152,166,0,172,165,180,153],
[140,132,172,138,151,168,0,136,128,116],
[203,143,197,178,198,175,204,0,181,169],
[172,150,181,167,162,160,212,159,0,150],
[211,170,193,168,185,187,224,171,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,176,163,194,166,160,175,155,175],
[177,0,148,161,189,176,168,160,161,180],
[164,192,0,188,181,169,162,170,166,165],
[177,179,152,0,187,185,166,173,164,174],
[146,151,159,153,0,163,178,170,151,162],
[174,164,171,155,177,0,161,179,184,183],
[180,172,178,174,162,179,0,172,159,168],
[165,180,170,167,170,161,168,0,171,169],
[185,179,174,176,189,156,181,169,0,199],
[165,160,175,166,178,157,172,171,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,185,162,174,185,182,177,170],
[170,0,170,170,157,183,177,164,191,170],
[169,170,0,182,176,176,163,171,170,170],
[155,170,158,0,155,164,157,148,169,155],
[178,183,164,185,0,174,173,183,171,179],
[166,157,164,176,166,0,168,179,170,185],
[155,163,177,183,167,172,0,171,170,166],
[158,176,169,192,157,161,169,0,182,178],
[163,149,170,171,169,170,170,158,0,177],
[170,170,170,185,161,155,174,162,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,151,164,150,165,183,176,173,181],
[166,0,139,150,153,159,173,168,176,174],
[189,201,0,178,157,188,179,176,178,179],
[176,190,162,0,159,165,171,170,173,172],
[190,187,183,181,0,199,176,170,186,187],
[175,181,152,175,141,0,167,166,176,172],
[157,167,161,169,164,173,0,156,173,178],
[164,172,164,170,170,174,184,0,162,175],
[167,164,162,167,154,164,167,178,0,174],
[159,166,161,168,153,168,162,165,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,170,174,193,193,180,213,153,164],
[172,0,184,188,208,197,190,189,147,157],
[170,156,0,162,178,187,161,190,153,155],
[166,152,178,0,176,203,159,172,158,170],
[147,132,162,164,0,195,161,184,144,138],
[147,143,153,137,145,0,152,163,140,121],
[160,150,179,181,179,188,0,168,144,151],
[127,151,150,168,156,177,172,0,142,113],
[187,193,187,182,196,200,196,198,0,169],
[176,183,185,170,202,219,189,227,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,206,204,70,206,68,204,136,202],
[134,0,138,136,0,138,68,68,68,66],
[134,202,0,134,66,204,68,134,202,66],
[136,204,206,0,70,138,138,138,134,204],
[270,340,274,270,0,340,136,270,270,270],
[134,202,136,202,0,0,136,134,202,134],
[272,272,272,202,204,204,0,202,202,134],
[136,272,206,202,70,206,138,0,202,202],
[204,272,138,206,70,138,138,138,0,204],
[138,274,274,136,70,206,206,138,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,166,176,161,165,162,167,155,157],
[170,0,152,165,150,160,156,157,149,143],
[174,188,0,185,164,186,164,178,159,169],
[164,175,155,0,148,157,154,156,153,148],
[179,190,176,192,0,163,167,166,165,162],
[175,180,154,183,177,0,163,168,166,172],
[178,184,176,186,173,177,0,169,174,170],
[173,183,162,184,174,172,171,0,160,166],
[185,191,181,187,175,174,166,180,0,170],
[183,197,171,192,178,168,170,174,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,166,169,162,159,175,156,165,176],
[171,0,169,179,168,162,185,172,163,170],
[174,171,0,173,160,158,174,171,163,164],
[171,161,167,0,150,167,170,169,152,165],
[178,172,180,190,0,178,178,166,166,175],
[181,178,182,173,162,0,178,169,168,175],
[165,155,166,170,162,162,0,169,158,176],
[184,168,169,171,174,171,171,0,169,177],
[175,177,177,188,174,172,182,171,0,167],
[164,170,176,175,165,165,164,163,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,169,151,182,173,179,190,185,195],
[163,0,161,148,169,156,165,159,142,144],
[171,179,0,170,173,167,176,189,188,170],
[189,192,170,0,181,188,183,165,165,187],
[158,171,167,159,0,183,184,166,186,169],
[167,184,173,152,157,0,162,146,152,176],
[161,175,164,157,156,178,0,144,183,176],
[150,181,151,175,174,194,196,0,188,181],
[155,198,152,175,154,188,157,152,0,179],
[145,196,170,153,171,164,164,159,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,160,179,169,152,164,179,179,176],
[171,0,176,183,170,174,175,181,188,174],
[180,164,0,170,177,143,164,174,185,188],
[161,157,170,0,167,157,173,168,188,178],
[171,170,163,173,0,165,174,182,186,182],
[188,166,197,183,175,0,177,178,200,194],
[176,165,176,167,166,163,0,153,175,182],
[161,159,166,172,158,162,187,0,181,178],
[161,152,155,152,154,140,165,159,0,163],
[164,166,152,162,158,146,158,162,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,158,169,180,167,171,158,185,168],
[169,0,175,168,173,170,160,155,157,168],
[182,165,0,176,171,179,184,172,182,191],
[171,172,164,0,172,155,160,174,150,173],
[160,167,169,168,0,164,163,156,153,165],
[173,170,161,185,176,0,174,169,160,180],
[169,180,156,180,177,166,0,159,166,166],
[182,185,168,166,184,171,181,0,161,175],
[155,183,158,190,187,180,174,179,0,177],
[172,172,149,167,175,160,174,165,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,181,175,172,159,154,166,152,178],
[175,0,175,168,151,164,149,164,161,174],
[159,165,0,166,152,153,158,162,155,169],
[165,172,174,0,168,170,146,177,155,170],
[168,189,188,172,0,174,170,173,172,180],
[181,176,187,170,166,0,149,167,167,186],
[186,191,182,194,170,191,0,196,180,203],
[174,176,178,163,167,173,144,0,156,172],
[188,179,185,185,168,173,160,184,0,196],
[162,166,171,170,160,154,137,168,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,187,181,160,165,177,167,184,184],
[173,0,175,158,151,155,167,165,185,198],
[153,165,0,155,151,163,163,140,176,167],
[159,182,185,0,158,181,169,160,195,198],
[180,189,189,182,0,173,169,175,203,192],
[175,185,177,159,167,0,174,158,187,185],
[163,173,177,171,171,166,0,171,182,171],
[173,175,200,180,165,182,169,0,197,190],
[156,155,164,145,137,153,158,143,0,166],
[156,142,173,142,148,155,169,150,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,153,149,150,127,168,173,156,168],
[191,0,160,165,167,142,170,156,168,164],
[187,180,0,145,169,151,167,170,160,141],
[191,175,195,0,204,162,179,171,205,176],
[190,173,171,136,0,152,158,178,173,145],
[213,198,189,178,188,0,204,187,183,158],
[172,170,173,161,182,136,0,174,181,163],
[167,184,170,169,162,153,166,0,176,146],
[184,172,180,135,167,157,159,164,0,167],
[172,176,199,164,195,182,177,194,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,173,166,175,161,168,180,169,189],
[166,0,166,168,173,168,174,179,190,190],
[167,174,0,165,183,164,178,176,174,182],
[174,172,175,0,171,161,176,176,177,187],
[165,167,157,169,0,174,170,173,170,170],
[179,172,176,179,166,0,185,194,196,180],
[172,166,162,164,170,155,0,172,170,180],
[160,161,164,164,167,146,168,0,158,166],
[171,150,166,163,170,144,170,182,0,175],
[151,150,158,153,170,160,160,174,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,163,176,146,143,181,155,171,151],
[188,0,160,165,157,160,175,190,173,170],
[177,180,0,181,143,180,183,187,175,187],
[164,175,159,0,154,153,175,169,169,173],
[194,183,197,186,0,179,181,194,165,178],
[197,180,160,187,161,0,196,174,158,186],
[159,165,157,165,159,144,0,169,170,144],
[185,150,153,171,146,166,171,0,171,158],
[169,167,165,171,175,182,170,169,0,172],
[189,170,153,167,162,154,196,182,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,177,170,160,169,150,155,158,179],
[173,0,178,168,164,163,156,147,170,178],
[163,162,0,147,163,163,150,156,156,159],
[170,172,193,0,182,175,171,168,170,167],
[180,176,177,158,0,158,162,166,182,174],
[171,177,177,165,182,0,151,155,172,172],
[190,184,190,169,178,189,0,175,176,183],
[185,193,184,172,174,185,165,0,176,192],
[182,170,184,170,158,168,164,164,0,185],
[161,162,181,173,166,168,157,148,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,173,144,156,181,172,152,188,179],
[174,0,186,169,171,173,188,176,176,173],
[167,154,0,152,153,159,164,156,171,175],
[196,171,188,0,168,175,193,177,209,179],
[184,169,187,172,0,166,170,177,195,180],
[159,167,181,165,174,0,176,158,187,187],
[168,152,176,147,170,164,0,150,181,175],
[188,164,184,163,163,182,190,0,191,178],
[152,164,169,131,145,153,159,149,0,170],
[161,167,165,161,160,153,165,162,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,175,175,158,156,168,146,172,170],
[168,0,173,183,156,157,164,161,175,176],
[165,167,0,186,177,163,168,147,158,169],
[165,157,154,0,152,154,155,156,158,173],
[182,184,163,188,0,163,170,162,167,183],
[184,183,177,186,177,0,172,169,168,190],
[172,176,172,185,170,168,0,168,165,173],
[194,179,193,184,178,171,172,0,168,192],
[168,165,182,182,173,172,175,172,0,169],
[170,164,171,167,157,150,167,148,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,161,177,171,171,172,170,166,152],
[174,0,177,191,152,165,177,159,167,172],
[179,163,0,177,165,162,167,174,166,158],
[163,149,163,0,138,161,163,159,154,154],
[169,188,175,202,0,169,179,180,169,167],
[169,175,178,179,171,0,164,184,182,160],
[168,163,173,177,161,176,0,171,175,175],
[170,181,166,181,160,156,169,0,154,161],
[174,173,174,186,171,158,165,186,0,164],
[188,168,182,186,173,180,165,179,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,168,165,163,161,167,183,165],
[159,0,147,144,165,172,148,165,173,159],
[172,193,0,174,183,181,171,189,180,157],
[172,196,166,0,175,171,178,180,192,164],
[175,175,157,165,0,185,157,171,175,158],
[177,168,159,169,155,0,173,171,174,139],
[179,192,169,162,183,167,0,168,197,176],
[173,175,151,160,169,169,172,0,190,157],
[157,167,160,148,165,166,143,150,0,142],
[175,181,183,176,182,201,164,183,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,182,168,169,177,191,198,162,175],
[172,0,180,175,166,178,191,189,170,188],
[158,160,0,160,164,154,186,166,153,160],
[172,165,180,0,164,168,183,172,158,168],
[171,174,176,176,0,165,191,180,158,173],
[163,162,186,172,175,0,185,188,159,174],
[149,149,154,157,149,155,0,161,144,150],
[142,151,174,168,160,152,179,0,157,161],
[178,170,187,182,182,181,196,183,0,177],
[165,152,180,172,167,166,190,179,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,170,166,188,169,161,146,166,181],
[146,0,157,144,123,158,165,150,158,153],
[170,183,0,194,166,158,185,163,174,196],
[174,196,146,0,160,170,161,145,144,183],
[152,217,174,180,0,174,165,177,154,169],
[171,182,182,170,166,0,178,159,159,182],
[179,175,155,179,175,162,0,182,153,189],
[194,190,177,195,163,181,158,0,185,201],
[174,182,166,196,186,181,187,155,0,200],
[159,187,144,157,171,158,151,139,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,181,152,181,160,167,170,167,185],
[163,0,166,158,186,183,177,174,166,189],
[159,174,0,163,181,191,168,160,167,179],
[188,182,177,0,187,175,166,160,162,183],
[159,154,159,153,0,168,165,145,155,176],
[180,157,149,165,172,0,163,160,169,178],
[173,163,172,174,175,177,0,166,171,185],
[170,166,180,180,195,180,174,0,175,195],
[173,174,173,178,185,171,169,165,0,199],
[155,151,161,157,164,162,155,145,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,177,181,179,194,178,184,189,154],
[159,0,157,157,162,163,163,175,174,146],
[163,183,0,165,150,180,161,188,171,156],
[159,183,175,0,173,188,193,181,191,174],
[161,178,190,167,0,191,176,186,178,158],
[146,177,160,152,149,0,166,162,167,156],
[162,177,179,147,164,174,0,185,171,175],
[156,165,152,159,154,178,155,0,174,145],
[151,166,169,149,162,173,169,166,0,148],
[186,194,184,166,182,184,165,195,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,190,187,168,173,166,176,177,178],
[159,0,168,163,152,153,151,155,144,160],
[150,172,0,170,147,158,159,156,163,162],
[153,177,170,0,158,146,144,174,167,160],
[172,188,193,182,0,168,188,191,187,181],
[167,187,182,194,172,0,173,169,188,174],
[174,189,181,196,152,167,0,162,185,174],
[164,185,184,166,149,171,178,0,173,158],
[163,196,177,173,153,152,155,167,0,158],
[162,180,178,180,159,166,166,182,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,138,166,160,140,134,142,166,145],
[158,0,159,178,134,156,149,133,158,157],
[202,181,0,205,177,166,155,161,170,187],
[174,162,135,0,131,145,107,138,124,149],
[180,206,163,209,0,140,143,138,157,175],
[200,184,174,195,200,0,143,172,167,184],
[206,191,185,233,197,197,0,163,162,200],
[198,207,179,202,202,168,177,0,179,186],
[174,182,170,216,183,173,178,161,0,172],
[195,183,153,191,165,156,140,154,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,171,181,179,186,173,169,165,176],
[161,0,169,156,175,171,176,169,173,159],
[169,171,0,151,182,164,174,169,175,164],
[159,184,189,0,186,163,186,166,171,183],
[161,165,158,154,0,155,160,164,151,164],
[154,169,176,177,185,0,170,174,181,181],
[167,164,166,154,180,170,0,163,163,158],
[171,171,171,174,176,166,177,0,162,171],
[175,167,165,169,189,159,177,178,0,172],
[164,181,176,157,176,159,182,169,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,166,167,153,176,170,182,168,178],
[164,0,187,162,156,161,164,176,159,182],
[174,153,0,148,160,172,165,169,165,154],
[173,178,192,0,161,178,167,185,189,185],
[187,184,180,179,0,189,176,187,168,187],
[164,179,168,162,151,0,153,174,168,184],
[170,176,175,173,164,187,0,175,167,181],
[158,164,171,155,153,166,165,0,164,162],
[172,181,175,151,172,172,173,176,0,186],
[162,158,186,155,153,156,159,178,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,189,181,181,203,175,168,181,171],
[147,0,162,169,170,183,162,173,168,165],
[151,178,0,173,166,198,170,173,168,163],
[159,171,167,0,173,187,174,160,172,146],
[159,170,174,167,0,183,177,163,179,164],
[137,157,142,153,157,0,174,168,155,151],
[165,178,170,166,163,166,0,166,176,160],
[172,167,167,180,177,172,174,0,172,163],
[159,172,172,168,161,185,164,168,0,149],
[169,175,177,194,176,189,180,177,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,171,197,198,156,153,165,162,166],
[164,0,189,191,188,163,179,171,174,163],
[169,151,0,182,194,169,180,157,165,185],
[143,149,158,0,175,133,154,146,162,161],
[142,152,146,165,0,142,157,146,177,156],
[184,177,171,207,198,0,177,177,164,173],
[187,161,160,186,183,163,0,161,178,170],
[175,169,183,194,194,163,179,0,173,181],
[178,166,175,178,163,176,162,167,0,173],
[174,177,155,179,184,167,170,159,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,209,192,167,210,178,199,139,181],
[187,0,175,166,164,205,175,183,165,176],
[131,165,0,198,198,219,179,188,176,158],
[148,174,142,0,163,173,166,153,153,175],
[173,176,142,177,0,231,187,199,177,168],
[130,135,121,167,109,0,199,132,133,147],
[162,165,161,174,153,141,0,171,155,155],
[141,157,152,187,141,208,169,0,144,153],
[201,175,164,187,163,207,185,196,0,186],
[159,164,182,165,172,193,185,187,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,206,177,174,166,193,173,193,181],
[156,0,180,153,159,156,189,167,171,137],
[134,160,0,152,138,140,178,142,157,135],
[163,187,188,0,156,173,202,168,165,153],
[166,181,202,184,0,164,215,177,184,175],
[174,184,200,167,176,0,190,172,186,156],
[147,151,162,138,125,150,0,162,161,140],
[167,173,198,172,163,168,178,0,171,155],
[147,169,183,175,156,154,179,169,0,154],
[159,203,205,187,165,184,200,185,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,167,191,181,151,165,164,165,173],
[157,0,154,169,163,158,159,166,151,172],
[173,186,0,200,164,162,160,167,153,184],
[149,171,140,0,157,154,150,169,133,154],
[159,177,176,183,0,156,180,186,176,192],
[189,182,178,186,184,0,165,184,180,187],
[175,181,180,190,160,175,0,186,176,209],
[176,174,173,171,154,156,154,0,150,169],
[175,189,187,207,164,160,164,190,0,192],
[167,168,156,186,148,153,131,171,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,198,123,124,173,146,148,122,196],
[94,0,147,94,94,170,95,73,120,119],
[142,193,0,50,95,217,95,167,170,196],
[217,246,290,0,194,243,194,194,192,168],
[216,246,245,146,0,194,120,192,195,172],
[167,170,123,97,146,0,123,145,120,95],
[194,245,245,146,220,217,0,169,193,195],
[192,267,173,146,148,195,171,0,192,192],
[218,220,170,148,145,220,147,148,0,221],
[144,221,144,172,168,245,145,148,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,164,165,179,136,165,181,131,179],
[167,0,148,170,187,169,162,172,133,172],
[176,192,0,177,176,153,187,200,150,181],
[175,170,163,0,193,160,182,189,179,168],
[161,153,164,147,0,148,181,156,158,174],
[204,171,187,180,192,0,194,184,165,180],
[175,178,153,158,159,146,0,170,156,161],
[159,168,140,151,184,156,170,0,144,200],
[209,207,190,161,182,175,184,196,0,161],
[161,168,159,172,166,160,179,140,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,171,175,176,167,162,167,179,187],
[173,0,188,167,180,183,190,180,176,190],
[169,152,0,157,169,173,152,170,155,156],
[165,173,183,0,168,183,183,177,173,182],
[164,160,171,172,0,174,166,169,171,167],
[173,157,167,157,166,0,167,176,166,171],
[178,150,188,157,174,173,0,171,156,165],
[173,160,170,163,171,164,169,0,171,188],
[161,164,185,167,169,174,184,169,0,178],
[153,150,184,158,173,169,175,152,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,154,160,150,153,193,190,173,169],
[189,0,200,177,165,174,194,194,164,170],
[186,140,0,176,173,153,186,183,165,160],
[180,163,164,0,162,160,185,171,147,178],
[190,175,167,178,0,164,158,180,188,156],
[187,166,187,180,176,0,182,181,166,185],
[147,146,154,155,182,158,0,169,163,172],
[150,146,157,169,160,159,171,0,144,141],
[167,176,175,193,152,174,177,196,0,166],
[171,170,180,162,184,155,168,199,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,188,164,182,174,195,198,166,189],
[164,0,187,169,145,177,169,163,146,187],
[152,153,0,140,148,172,158,177,142,165],
[176,171,200,0,151,172,199,181,171,193],
[158,195,192,189,0,188,180,177,171,172],
[166,163,168,168,152,0,161,160,159,182],
[145,171,182,141,160,179,0,166,161,177],
[142,177,163,159,163,180,174,0,159,182],
[174,194,198,169,169,181,179,181,0,203],
[151,153,175,147,168,158,163,158,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,161,176,187,167,146,156,153,172],
[166,0,158,161,184,168,144,162,154,151],
[179,182,0,174,196,181,164,169,171,173],
[164,179,166,0,188,177,165,164,155,153],
[153,156,144,152,0,158,152,130,136,136],
[173,172,159,163,182,0,148,149,153,156],
[194,196,176,175,188,192,0,177,159,174],
[184,178,171,176,210,191,163,0,170,172],
[187,186,169,185,204,187,181,170,0,166],
[168,189,167,187,204,184,166,168,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,161,186,176,176,181,168,160],
[176,0,200,178,188,185,176,169,158,175],
[175,140,0,152,160,170,157,167,169,164],
[179,162,188,0,189,173,198,184,174,150],
[154,152,180,151,0,166,145,162,155,142],
[164,155,170,167,174,0,167,178,159,144],
[164,164,183,142,195,173,0,167,165,156],
[159,171,173,156,178,162,173,0,169,160],
[172,182,171,166,185,181,175,171,0,156],
[180,165,176,190,198,196,184,180,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,146,211,177,152,180,132,174,180],
[195,0,196,209,177,166,198,167,185,209],
[194,144,0,201,184,151,180,166,153,179],
[129,131,139,0,113,118,126,167,102,141],
[163,163,156,227,0,172,142,178,169,179],
[188,174,189,222,168,0,158,190,160,204],
[160,142,160,214,198,182,0,176,211,184],
[208,173,174,173,162,150,164,0,190,183],
[166,155,187,238,171,180,129,150,0,167],
[160,131,161,199,161,136,156,157,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,151,148,181,167,163,160,158,161],
[167,0,161,155,175,165,174,158,165,163],
[189,179,0,173,202,174,181,175,169,179],
[192,185,167,0,184,185,176,181,184,185],
[159,165,138,156,0,148,168,143,170,156],
[173,175,166,155,192,0,181,167,178,169],
[177,166,159,164,172,159,0,166,169,167],
[180,182,165,159,197,173,174,0,172,173],
[182,175,171,156,170,162,171,168,0,165],
[179,177,161,155,184,171,173,167,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,175,187,177,162,189,184,165,164],
[169,0,182,184,185,169,175,178,167,158],
[165,158,0,189,195,164,172,184,175,171],
[153,156,151,0,162,171,168,158,168,157],
[163,155,145,178,0,148,149,159,157,144],
[178,171,176,169,192,0,195,172,195,172],
[151,165,168,172,191,145,0,169,153,167],
[156,162,156,182,181,168,171,0,168,167],
[175,173,165,172,183,145,187,172,0,162],
[176,182,169,183,196,168,173,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,157,174,173,166,173,165,175,184],
[172,0,158,168,160,165,167,174,163,173],
[183,182,0,170,168,162,161,172,163,167],
[166,172,170,0,169,160,162,183,164,179],
[167,180,172,171,0,159,179,186,158,180],
[174,175,178,180,181,0,166,187,181,176],
[167,173,179,178,161,174,0,183,173,176],
[175,166,168,157,154,153,157,0,155,170],
[165,177,177,176,182,159,167,185,0,175],
[156,167,173,161,160,164,164,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,199,164,187,209,185,174,184,191],
[169,0,233,184,223,196,173,188,187,171],
[141,107,0,164,182,175,171,145,138,169],
[176,156,176,0,203,200,165,182,169,174],
[153,117,158,137,0,148,142,146,157,177],
[131,144,165,140,192,0,152,167,147,173],
[155,167,169,175,198,188,0,165,146,191],
[166,152,195,158,194,173,175,0,159,166],
[156,153,202,171,183,193,194,181,0,209],
[149,169,171,166,163,167,149,174,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,161,173,139,162,193,188,169],
[169,0,188,148,152,130,163,173,149,184],
[162,152,0,137,161,145,145,172,160,174],
[179,192,203,0,175,165,203,216,184,188],
[167,188,179,165,0,171,188,198,178,202],
[201,210,195,175,169,0,202,225,185,211],
[178,177,195,137,152,138,0,185,174,169],
[147,167,168,124,142,115,155,0,138,157],
[152,191,180,156,162,155,166,202,0,178],
[171,156,166,152,138,129,171,183,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,167,155,183,175,152,167,169,183],
[166,0,181,170,174,181,169,169,170,171],
[173,159,0,158,174,177,167,166,175,169],
[185,170,182,0,192,181,169,176,184,185],
[157,166,166,148,0,171,160,167,154,164],
[165,159,163,159,169,0,170,161,165,172],
[188,171,173,171,180,170,0,171,180,184],
[173,171,174,164,173,179,169,0,168,186],
[171,170,165,156,186,175,160,172,0,187],
[157,169,171,155,176,168,156,154,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,175,165,167,176,162,173,163,170],
[163,0,166,165,175,178,162,170,169,173],
[165,174,0,169,173,182,172,183,176,177],
[175,175,171,0,176,184,168,169,160,167],
[173,165,167,164,0,189,169,168,164,167],
[164,162,158,156,151,0,150,154,160,162],
[178,178,168,172,171,190,0,178,165,185],
[167,170,157,171,172,186,162,0,153,172],
[177,171,164,180,176,180,175,187,0,187],
[170,167,163,173,173,178,155,168,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,163,170,167,184,181,166,166,167],
[174,0,179,174,172,163,167,184,180,181],
[177,161,0,199,188,169,179,173,189,167],
[170,166,141,0,187,171,177,166,167,165],
[173,168,152,153,0,158,186,160,176,166],
[156,177,171,169,182,0,171,190,172,188],
[159,173,161,163,154,169,0,176,154,167],
[174,156,167,174,180,150,164,0,165,179],
[174,160,151,173,164,168,186,175,0,170],
[173,159,173,175,174,152,173,161,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,161,187,173,155,167,165,174,178],
[166,0,160,160,167,159,148,166,167,173],
[179,180,0,172,166,172,137,172,168,167],
[153,180,168,0,153,160,149,167,166,168],
[167,173,174,187,0,166,170,165,161,168],
[185,181,168,180,174,0,162,185,170,166],
[173,192,203,191,170,178,0,200,190,193],
[175,174,168,173,175,155,140,0,174,157],
[166,173,172,174,179,170,150,166,0,163],
[162,167,173,172,172,174,147,183,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,155,166,172,145,177,166,133,150],
[158,0,149,153,137,137,174,170,117,179],
[185,191,0,188,155,161,203,159,158,152],
[174,187,152,0,142,169,174,177,164,142],
[168,203,185,198,0,182,183,196,155,198],
[195,203,179,171,158,0,187,199,191,156],
[163,166,137,166,157,153,0,154,136,177],
[174,170,181,163,144,141,186,0,151,161],
[207,223,182,176,185,149,204,189,0,178],
[190,161,188,198,142,184,163,179,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,154,168,166,178,164,179,172,159],
[177,0,135,157,152,158,155,182,180,163],
[186,205,0,159,179,177,163,182,181,189],
[172,183,181,0,171,166,169,180,182,186],
[174,188,161,169,0,155,160,179,190,176],
[162,182,163,174,185,0,170,187,181,189],
[176,185,177,171,180,170,0,175,187,192],
[161,158,158,160,161,153,165,0,167,175],
[168,160,159,158,150,159,153,173,0,163],
[181,177,151,154,164,151,148,165,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,165,154,177,183,185,187,182,181],
[160,0,167,172,165,166,171,173,167,163],
[175,173,0,174,185,175,182,197,188,155],
[186,168,166,0,186,166,181,193,169,168],
[163,175,155,154,0,149,152,170,171,164],
[157,174,165,174,191,0,196,190,191,173],
[155,169,158,159,188,144,0,191,169,166],
[153,167,143,147,170,150,149,0,146,147],
[158,173,152,171,169,149,171,194,0,150],
[159,177,185,172,176,167,174,193,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,168,153,190,144,144,167,147],
[167,0,171,156,163,154,161,154,182,156],
[168,169,0,149,141,163,148,144,160,152],
[172,184,191,0,165,187,175,170,159,174],
[187,177,199,175,0,198,178,163,184,168],
[150,186,177,153,142,0,148,144,153,149],
[196,179,192,165,162,192,0,168,168,159],
[196,186,196,170,177,196,172,0,184,167],
[173,158,180,181,156,187,172,156,0,172],
[193,184,188,166,172,191,181,173,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,162,166,159,159,163,164,151,162],
[191,0,198,183,166,181,172,177,174,181],
[178,142,0,164,153,153,164,155,169,164],
[174,157,176,0,163,161,167,172,162,169],
[181,174,187,177,0,179,169,168,173,180],
[181,159,187,179,161,0,162,165,170,162],
[177,168,176,173,171,178,0,164,170,171],
[176,163,185,168,172,175,176,0,173,175],
[189,166,171,178,167,170,170,167,0,177],
[178,159,176,171,160,178,169,165,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,191,189,187,176,177,169,177,189],
[156,0,186,185,170,165,160,158,160,179],
[149,154,0,169,173,168,155,156,157,162],
[151,155,171,0,178,168,171,155,167,172],
[153,170,167,162,0,167,161,174,163,164],
[164,175,172,172,173,0,170,163,154,179],
[163,180,185,169,179,170,0,166,175,183],
[171,182,184,185,166,177,174,0,159,177],
[163,180,183,173,177,186,165,181,0,169],
[151,161,178,168,176,161,157,163,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,185,197,183,188,178,184,193,168],
[150,0,192,173,162,180,176,168,168,165],
[155,148,0,144,162,172,160,172,165,169],
[143,167,196,0,165,176,168,192,167,181],
[157,178,178,175,0,179,187,171,164,153],
[152,160,168,164,161,0,167,148,153,152],
[162,164,180,172,153,173,0,166,160,174],
[156,172,168,148,169,192,174,0,147,149],
[147,172,175,173,176,187,180,193,0,170],
[172,175,171,159,187,188,166,191,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,171,148,157,148,141,178,159,123],
[207,0,166,179,181,150,166,178,199,162],
[169,174,0,160,172,150,182,170,186,173],
[192,161,180,0,215,183,188,199,187,166],
[183,159,168,125,0,157,160,185,159,135],
[192,190,190,157,183,0,175,186,163,165],
[199,174,158,152,180,165,0,173,152,140],
[162,162,170,141,155,154,167,0,172,143],
[181,141,154,153,181,177,188,168,0,156],
[217,178,167,174,205,175,200,197,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,192,161,199,189,186,177,189,187],
[130,0,156,122,158,146,162,155,147,175],
[148,184,0,177,179,181,175,171,162,192],
[179,218,163,0,186,192,182,168,171,191],
[141,182,161,154,0,168,174,173,175,169],
[151,194,159,148,172,0,185,157,149,169],
[154,178,165,158,166,155,0,158,165,174],
[163,185,169,172,167,183,182,0,171,179],
[151,193,178,169,165,191,175,169,0,185],
[153,165,148,149,171,171,166,161,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,195,150,191,174,165,172,187,178],
[172,0,172,154,167,166,160,154,191,164],
[145,168,0,155,173,168,173,156,183,158],
[190,186,185,0,163,187,182,176,186,173],
[149,173,167,177,0,169,184,183,184,165],
[166,174,172,153,171,0,160,164,190,141],
[175,180,167,158,156,180,0,151,188,152],
[168,186,184,164,157,176,189,0,197,187],
[153,149,157,154,156,150,152,143,0,161],
[162,176,182,167,175,199,188,153,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,177,183,191,184,169,170,158,176],
[158,0,168,181,182,203,186,188,177,181],
[163,172,0,198,176,187,180,186,198,193],
[157,159,142,0,167,172,169,175,159,163],
[149,158,164,173,0,181,167,163,157,168],
[156,137,153,168,159,0,152,160,149,159],
[171,154,160,171,173,188,0,159,169,180],
[170,152,154,165,177,180,181,0,172,164],
[182,163,142,181,183,191,171,168,0,196],
[164,159,147,177,172,181,160,176,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,158,180,170,165,178,173,187,159],
[178,0,157,179,181,162,175,160,190,163],
[182,183,0,183,170,181,184,175,182,172],
[160,161,157,0,166,162,176,142,172,165],
[170,159,170,174,0,172,171,155,179,155],
[175,178,159,178,168,0,168,169,173,160],
[162,165,156,164,169,172,0,160,159,159],
[167,180,165,198,185,171,180,0,195,171],
[153,150,158,168,161,167,181,145,0,150],
[181,177,168,175,185,180,181,169,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,167,161,168,162,154,171,178,162],
[175,0,150,139,169,163,159,172,162,173],
[173,190,0,159,167,169,164,159,187,178],
[179,201,181,0,176,165,159,184,160,153],
[172,171,173,164,0,170,158,176,168,153],
[178,177,171,175,170,0,156,166,169,172],
[186,181,176,181,182,184,0,178,188,169],
[169,168,181,156,164,174,162,0,182,176],
[162,178,153,180,172,171,152,158,0,169],
[178,167,162,187,187,168,171,164,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,170,166,190,165,160,161,157,166],
[167,0,157,160,183,148,173,143,156,158],
[170,183,0,173,183,178,156,166,186,173],
[174,180,167,0,188,177,164,154,159,163],
[150,157,157,152,0,148,164,146,156,151],
[175,192,162,163,192,0,158,153,155,149],
[180,167,184,176,176,182,0,151,166,174],
[179,197,174,186,194,187,189,0,167,173],
[183,184,154,181,184,185,174,173,0,173],
[174,182,167,177,189,191,166,167,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,156,182,195,175,202,180,172,182],
[185,0,168,196,186,184,182,185,166,183],
[184,172,0,175,195,172,179,168,184,191],
[158,144,165,0,180,170,176,174,168,167],
[145,154,145,160,0,149,163,140,169,163],
[165,156,168,170,191,0,168,165,195,178],
[138,158,161,164,177,172,0,163,163,174],
[160,155,172,166,200,175,177,0,166,188],
[168,174,156,172,171,145,177,174,0,176],
[158,157,149,173,177,162,166,152,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,170,178,179,176,166,157,165,183],
[159,0,167,163,162,151,167,159,170,175],
[170,173,0,180,183,181,166,166,165,177],
[162,177,160,0,177,163,169,162,164,173],
[161,178,157,163,0,171,166,160,152,164],
[164,189,159,177,169,0,164,168,173,180],
[174,173,174,171,174,176,0,163,169,184],
[183,181,174,178,180,172,177,0,158,177],
[175,170,175,176,188,167,171,182,0,174],
[157,165,163,167,176,160,156,163,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,150,178,167,168,152,161,163],
[169,0,181,175,181,186,172,176,170,173],
[167,159,0,155,169,169,163,158,166,151],
[190,165,185,0,178,182,182,165,170,184],
[162,159,171,162,0,171,173,164,165,163],
[173,154,171,158,169,0,178,169,159,171],
[172,168,177,158,167,162,0,160,166,174],
[188,164,182,175,176,171,180,0,165,163],
[179,170,174,170,175,181,174,175,0,169],
[177,167,189,156,177,169,166,177,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,154,147,163,176,165,180,162,166],
[173,0,164,160,166,181,149,177,158,167],
[186,176,0,166,160,182,165,184,170,180],
[193,180,174,0,170,178,176,188,171,181],
[177,174,180,170,0,190,159,195,165,165],
[164,159,158,162,150,0,154,176,151,173],
[175,191,175,164,181,186,0,186,181,176],
[160,163,156,152,145,164,154,0,147,159],
[178,182,170,169,175,189,159,193,0,173],
[174,173,160,159,175,167,164,181,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,181,162,152,154,205,154,182,177],
[153,0,174,185,152,169,185,178,197,177],
[159,166,0,173,166,143,177,172,185,188],
[178,155,167,0,160,182,188,179,187,191],
[188,188,174,180,0,190,192,169,184,201],
[186,171,197,158,150,0,193,174,178,187],
[135,155,163,152,148,147,0,148,168,174],
[186,162,168,161,171,166,192,0,159,178],
[158,143,155,153,156,162,172,181,0,172],
[163,163,152,149,139,153,166,162,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,125,179,136,158,143,176,125,130],
[213,0,167,201,177,193,183,203,184,181],
[215,173,0,206,180,168,192,208,179,176],
[161,139,134,0,153,163,138,159,142,157],
[204,163,160,187,0,172,157,177,176,188],
[182,147,172,177,168,0,172,204,166,150],
[197,157,148,202,183,168,0,178,174,163],
[164,137,132,181,163,136,162,0,142,147],
[215,156,161,198,164,174,166,198,0,181],
[210,159,164,183,152,190,177,193,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,162,168,193,166,172,174,157,178],
[154,0,156,161,163,135,147,167,147,160],
[178,184,0,172,184,165,173,176,158,164],
[172,179,168,0,178,154,161,167,171,162],
[147,177,156,162,0,149,167,158,146,158],
[174,205,175,186,191,0,169,183,175,194],
[168,193,167,179,173,171,0,176,161,164],
[166,173,164,173,182,157,164,0,148,164],
[183,193,182,169,194,165,179,192,0,183],
[162,180,176,178,182,146,176,176,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,153,157,174,161,169,165,143,177],
[177,0,170,167,170,176,183,179,173,187],
[187,170,0,157,180,176,181,168,165,196],
[183,173,183,0,180,165,185,176,174,193],
[166,170,160,160,0,162,175,165,162,180],
[179,164,164,175,178,0,161,156,149,172],
[171,157,159,155,165,179,0,160,155,180],
[175,161,172,164,175,184,180,0,173,192],
[197,167,175,166,178,191,185,167,0,195],
[163,153,144,147,160,168,160,148,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,179,176,152,154,147,152,144,141],
[185,0,206,197,162,183,178,187,196,176],
[161,134,0,167,150,154,175,169,173,116],
[164,143,173,0,137,167,149,170,164,151],
[188,178,190,203,0,172,181,172,183,155],
[186,157,186,173,168,0,182,191,181,162],
[193,162,165,191,159,158,0,178,171,152],
[188,153,171,170,168,149,162,0,179,138],
[196,144,167,176,157,159,169,161,0,158],
[199,164,224,189,185,178,188,202,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,171,171,168,160,159,158,167,164],
[184,0,178,194,186,168,161,178,185,176],
[169,162,0,151,168,171,164,149,171,158],
[169,146,189,0,169,156,174,161,164,174],
[172,154,172,171,0,164,164,162,166,173],
[180,172,169,184,176,0,167,160,169,183],
[181,179,176,166,176,173,0,157,177,185],
[182,162,191,179,178,180,183,0,174,182],
[173,155,169,176,174,171,163,166,0,154],
[176,164,182,166,167,157,155,158,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,169,168,184,175,167,163,167,175],
[175,0,170,155,176,174,172,173,162,167],
[171,170,0,180,182,168,180,176,175,183],
[172,185,160,0,180,165,165,169,169,176],
[156,164,158,160,0,172,170,155,160,158],
[165,166,172,175,168,0,156,164,172,163],
[173,168,160,175,170,184,0,168,173,172],
[177,167,164,171,185,176,172,0,173,168],
[173,178,165,171,180,168,167,167,0,167],
[165,173,157,164,182,177,168,172,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,158,161,143,142,143,164,156,153],
[185,0,176,153,162,173,152,188,185,182],
[182,164,0,169,174,173,165,209,182,184],
[179,187,171,0,187,168,188,198,180,183],
[197,178,166,153,0,158,179,216,195,179],
[198,167,167,172,182,0,180,194,155,190],
[197,188,175,152,161,160,0,207,171,170],
[176,152,131,142,124,146,133,0,141,166],
[184,155,158,160,145,185,169,199,0,156],
[187,158,156,157,161,150,170,174,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,147,293,99,197,243,96,147,243],
[145,0,195,193,145,243,243,194,193,145],
[193,145,0,241,98,145,241,194,98,241],
[47,147,99,0,49,197,194,96,0,96],
[241,195,242,291,0,195,241,194,98,241],
[143,97,195,143,145,0,193,192,96,143],
[97,97,99,146,99,147,0,96,98,147],
[244,146,146,244,146,148,244,0,146,194],
[193,147,242,340,242,244,242,194,0,292],
[97,195,99,244,99,197,193,146,48,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,181,197,174,151,189,183,175,185],
[153,0,149,164,171,161,160,151,168,153],
[159,191,0,202,160,179,196,172,176,163],
[143,176,138,0,160,165,164,169,154,168],
[166,169,180,180,0,180,180,158,169,167],
[189,179,161,175,160,0,192,175,179,182],
[151,180,144,176,160,148,0,173,154,165],
[157,189,168,171,182,165,167,0,156,179],
[165,172,164,186,171,161,186,184,0,186],
[155,187,177,172,173,158,175,161,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,173,169,184,171,184,188,161,165],
[173,0,177,157,165,166,167,169,145,164],
[167,163,0,154,169,164,165,160,154,159],
[171,183,186,0,178,170,185,182,170,173],
[156,175,171,162,0,167,166,171,151,155],
[169,174,176,170,173,0,179,188,167,168],
[156,173,175,155,174,161,0,170,158,162],
[152,171,180,158,169,152,170,0,156,156],
[179,195,186,170,189,173,182,184,0,175],
[175,176,181,167,185,172,178,184,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,191,172,170,183,186,176,164,184],
[166,0,176,172,163,180,176,156,166,170],
[149,164,0,157,164,166,161,158,144,158],
[168,168,183,0,172,175,175,174,168,174],
[170,177,176,168,0,176,165,159,167,167],
[157,160,174,165,164,0,177,161,160,174],
[154,164,179,165,175,163,0,166,154,169],
[164,184,182,166,181,179,174,0,172,188],
[176,174,196,172,173,180,186,168,0,185],
[156,170,182,166,173,166,171,152,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,168,175,176,169,150,192,180,156],
[194,0,186,181,159,167,179,166,166,171],
[172,154,0,177,165,172,159,172,148,169],
[165,159,163,0,152,175,153,169,160,151],
[164,181,175,188,0,171,153,175,162,173],
[171,173,168,165,169,0,154,170,158,166],
[190,161,181,187,187,186,0,191,178,170],
[148,174,168,171,165,170,149,0,166,156],
[160,174,192,180,178,182,162,174,0,167],
[184,169,171,189,167,174,170,184,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,174,168,176,209,156,179,177,170],
[118,0,176,147,160,158,133,163,160,144],
[166,164,0,160,163,167,174,152,191,177],
[172,193,180,0,185,186,163,173,172,178],
[164,180,177,155,0,190,178,189,178,186],
[131,182,173,154,150,0,153,170,144,168],
[184,207,166,177,162,187,0,159,193,182],
[161,177,188,167,151,170,181,0,174,154],
[163,180,149,168,162,196,147,166,0,170],
[170,196,163,162,154,172,158,186,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,170,188,204,175,173,184,181,190],
[183,0,175,182,184,175,194,174,169,187],
[170,165,0,176,183,159,179,182,170,174],
[152,158,164,0,177,193,200,183,183,179],
[136,156,157,163,0,192,174,148,173,181],
[165,165,181,147,148,0,185,166,175,165],
[167,146,161,140,166,155,0,152,179,165],
[156,166,158,157,192,174,188,0,190,188],
[159,171,170,157,167,165,161,150,0,190],
[150,153,166,161,159,175,175,152,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,137,178,173,145,161,117,144,137],
[206,0,168,189,179,183,172,164,175,166],
[203,172,0,192,179,183,181,155,173,172],
[162,151,148,0,178,166,173,158,155,177],
[167,161,161,162,0,182,187,163,131,163],
[195,157,157,174,158,0,166,179,169,162],
[179,168,159,167,153,174,0,153,169,191],
[223,176,185,182,177,161,187,0,173,176],
[196,165,167,185,209,171,171,167,0,163],
[203,174,168,163,177,178,149,164,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,143,138,173,168,174,150,148,174],
[175,0,158,160,172,168,169,163,152,164],
[197,182,0,172,175,186,191,182,168,183],
[202,180,168,0,194,183,191,169,177,190],
[167,168,165,146,0,165,173,185,165,189],
[172,172,154,157,175,0,165,164,157,165],
[166,171,149,149,167,175,0,177,150,171],
[190,177,158,171,155,176,163,0,170,177],
[192,188,172,163,175,183,190,170,0,164],
[166,176,157,150,151,175,169,163,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,183,154,165,173,136,152,178,157],
[159,0,186,159,156,171,139,147,175,175],
[157,154,0,155,167,159,137,159,150,164],
[186,181,185,0,158,163,159,167,184,180],
[175,184,173,182,0,172,173,166,184,161],
[167,169,181,177,168,0,145,176,178,168],
[204,201,203,181,167,195,0,169,186,168],
[188,193,181,173,174,164,171,0,203,192],
[162,165,190,156,156,162,154,137,0,161],
[183,165,176,160,179,172,172,148,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,171,171,170,178,173,162,168,176],
[158,0,162,149,167,172,170,166,169,160],
[169,178,0,156,173,182,172,164,169,165],
[169,191,184,0,178,179,187,185,170,180],
[170,173,167,162,0,172,166,145,156,172],
[162,168,158,161,168,0,175,153,154,144],
[167,170,168,153,174,165,0,146,153,161],
[178,174,176,155,195,187,194,0,161,171],
[172,171,171,170,184,186,187,179,0,177],
[164,180,175,160,168,196,179,169,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,166,174,176,181,189,181,179,168],
[181,0,156,180,194,196,191,192,170,172],
[174,184,0,170,186,205,195,181,184,177],
[166,160,170,0,193,172,184,192,188,175],
[164,146,154,147,0,184,188,155,157,154],
[159,144,135,168,156,0,175,188,152,163],
[151,149,145,156,152,165,0,175,160,160],
[159,148,159,148,185,152,165,0,180,157],
[161,170,156,152,183,188,180,160,0,159],
[172,168,163,165,186,177,180,183,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,125,193,167,165,142,167,191,180],
[134,0,128,143,103,155,118,142,103,165],
[215,212,0,197,183,196,157,170,170,170],
[147,197,143,0,183,181,182,153,154,140],
[173,237,157,157,0,233,160,207,131,167],
[175,185,144,159,107,0,161,171,105,155],
[198,222,183,158,180,179,0,152,165,192],
[173,198,170,187,133,169,188,0,167,197],
[149,237,170,186,209,235,175,173,0,169],
[160,175,170,200,173,185,148,143,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,180,203,210,226,165,177,196,175],
[159,0,161,196,186,222,171,151,159,174],
[160,179,0,189,178,195,181,167,145,177],
[137,144,151,0,156,175,154,142,164,131],
[130,154,162,184,0,201,140,106,149,130],
[114,118,145,165,139,0,134,123,120,100],
[175,169,159,186,200,206,0,171,194,162],
[163,189,173,198,234,217,169,0,199,182],
[144,181,195,176,191,220,146,141,0,139],
[165,166,163,209,210,240,178,158,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,153,176,181,179,206,186,166,167],
[175,0,159,169,188,165,179,178,166,160],
[187,181,0,174,182,171,164,188,149,168],
[164,171,166,0,180,164,169,172,133,167],
[159,152,158,160,0,165,179,168,143,158],
[161,175,169,176,175,0,196,188,177,174],
[134,161,176,171,161,144,0,175,152,141],
[154,162,152,168,172,152,165,0,150,158],
[174,174,191,207,197,163,188,190,0,185],
[173,180,172,173,182,166,199,182,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,246,197,244,271,169,245,244,194],
[193,0,171,243,195,195,193,241,243,166],
[94,169,0,170,192,196,169,243,194,144],
[143,97,170,0,220,172,119,192,240,192],
[96,145,148,120,0,197,121,218,241,170],
[69,145,144,168,143,0,119,194,193,117],
[171,147,171,221,219,221,0,196,243,169],
[95,99,97,148,122,146,144,0,217,95],
[96,97,146,100,99,147,97,123,0,72],
[146,174,196,148,170,223,171,245,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,144,137,160,137,115,141,84,120],
[214,0,156,153,177,163,135,165,131,146],
[196,184,0,145,189,174,143,187,140,160],
[203,187,195,0,187,165,142,184,146,139],
[180,163,151,153,0,157,135,156,143,124],
[203,177,166,175,183,0,150,194,149,150],
[225,205,197,198,205,190,0,193,153,192],
[199,175,153,156,184,146,147,0,148,131],
[256,209,200,194,197,191,187,192,0,152],
[220,194,180,201,216,190,148,209,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,182,182,189,183,173,182,194,191],
[173,0,190,177,184,178,169,181,183,181],
[158,150,0,173,179,183,163,159,171,183],
[158,163,167,0,177,164,168,164,175,185],
[151,156,161,163,0,169,156,162,161,168],
[157,162,157,176,171,0,158,163,162,177],
[167,171,177,172,184,182,0,167,174,187],
[158,159,181,176,178,177,173,0,170,179],
[146,157,169,165,179,178,166,170,0,179],
[149,159,157,155,172,163,153,161,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,167,153,172,145,156,150,150,150],
[179,0,178,152,177,174,155,188,180,177],
[173,162,0,160,159,164,172,155,164,161],
[187,188,180,0,169,188,184,186,175,169],
[168,163,181,171,0,174,172,179,144,161],
[195,166,176,152,166,0,156,169,194,171],
[184,185,168,156,168,184,0,163,163,142],
[190,152,185,154,161,171,177,0,163,181],
[190,160,176,165,196,146,177,177,0,159],
[190,163,179,171,179,169,198,159,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,188,220,194,179,185,170,178,171],
[173,0,200,215,178,177,168,156,173,159],
[152,140,0,167,193,165,154,161,154,124],
[120,125,173,0,158,145,139,134,152,102],
[146,162,147,182,0,142,140,137,139,125],
[161,163,175,195,198,0,156,158,163,159],
[155,172,186,201,200,184,0,169,148,145],
[170,184,179,206,203,182,171,0,171,165],
[162,167,186,188,201,177,192,169,0,160],
[169,181,216,238,215,181,195,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,172,164,159,165,163,154,172,153],
[172,0,192,158,164,172,168,149,168,165],
[168,148,0,143,142,167,145,161,154,156],
[176,182,197,0,169,188,154,165,188,168],
[181,176,198,171,0,166,163,186,166,169],
[175,168,173,152,174,0,154,162,158,155],
[177,172,195,186,177,186,0,181,182,166],
[186,191,179,175,154,178,159,0,167,170],
[168,172,186,152,174,182,158,173,0,173],
[187,175,184,172,171,185,174,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,173,157,168,199,189,171,180,192],
[162,0,171,174,160,198,186,179,174,180],
[167,169,0,163,175,195,187,170,180,180],
[183,166,177,0,166,178,196,173,174,171],
[172,180,165,174,0,200,179,184,173,183],
[141,142,145,162,140,0,162,147,145,166],
[151,154,153,144,161,178,0,161,154,161],
[169,161,170,167,156,193,179,0,162,183],
[160,166,160,166,167,195,186,178,0,177],
[148,160,160,169,157,174,179,157,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,163,157,176,185,182,193,175,184],
[150,0,161,157,156,176,161,168,174,180],
[177,179,0,167,193,183,175,191,170,185],
[183,183,173,0,183,171,163,191,169,184],
[164,184,147,157,0,169,158,170,162,174],
[155,164,157,169,171,0,147,167,158,170],
[158,179,165,177,182,193,0,176,170,177],
[147,172,149,149,170,173,164,0,161,160],
[165,166,170,171,178,182,170,179,0,181],
[156,160,155,156,166,170,163,180,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,168,152,173,182,168,182,167,176],
[181,0,176,171,168,191,187,189,176,170],
[172,164,0,160,167,184,177,185,168,170],
[188,169,180,0,165,190,172,196,178,176],
[167,172,173,175,0,183,175,178,179,172],
[158,149,156,150,157,0,161,177,152,152],
[172,153,163,168,165,179,0,171,178,161],
[158,151,155,144,162,163,169,0,161,170],
[173,164,172,162,161,188,162,179,0,167],
[164,170,170,164,168,188,179,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,172,152,158,143,154,162,157,144],
[189,0,194,158,175,174,187,175,172,168],
[168,146,0,144,155,134,155,165,161,149],
[188,182,196,0,171,165,171,185,179,189],
[182,165,185,169,0,157,191,179,178,176],
[197,166,206,175,183,0,205,177,173,180],
[186,153,185,169,149,135,0,157,164,155],
[178,165,175,155,161,163,183,0,156,167],
[183,168,179,161,162,167,176,184,0,158],
[196,172,191,151,164,160,185,173,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,185,177,185,190,179,192,177,165],
[167,0,158,164,179,161,160,176,163,156],
[155,182,0,173,181,181,165,183,171,178],
[163,176,167,0,177,176,155,171,178,160],
[155,161,159,163,0,160,159,166,155,165],
[150,179,159,164,180,0,164,182,167,172],
[161,180,175,185,181,176,0,165,179,175],
[148,164,157,169,174,158,175,0,166,154],
[163,177,169,162,185,173,161,174,0,172],
[175,184,162,180,175,168,165,186,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,160,175,186,177,167,172,181,187],
[180,0,168,179,189,194,196,184,186,186],
[180,172,0,187,183,183,185,168,192,195],
[165,161,153,0,176,166,171,177,176,168],
[154,151,157,164,0,169,170,171,172,178],
[163,146,157,174,171,0,164,163,190,173],
[173,144,155,169,170,176,0,166,184,188],
[168,156,172,163,169,177,174,0,182,182],
[159,154,148,164,168,150,156,158,0,163],
[153,154,145,172,162,167,152,158,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,163,147,140,153,151,135,149,142],
[197,0,191,166,188,181,181,152,177,189],
[177,149,0,147,173,165,175,144,154,168],
[193,174,193,0,176,167,185,164,165,175],
[200,152,167,164,0,172,175,159,166,170],
[187,159,175,173,168,0,175,173,158,181],
[189,159,165,155,165,165,0,149,159,175],
[205,188,196,176,181,167,191,0,187,192],
[191,163,186,175,174,182,181,153,0,176],
[198,151,172,165,170,159,165,148,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,182,192,181,174,186,170,184,186],
[168,0,157,182,151,167,170,161,166,179],
[158,183,0,167,164,168,175,159,174,182],
[148,158,173,0,164,162,167,161,170,170],
[159,189,176,176,0,194,184,175,177,180],
[166,173,172,178,146,0,175,163,174,181],
[154,170,165,173,156,165,0,163,161,169],
[170,179,181,179,165,177,177,0,175,179],
[156,174,166,170,163,166,179,165,0,169],
[154,161,158,170,160,159,171,161,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,184,196,165,179,166,166,173,163],
[172,0,180,184,174,180,176,155,183,181],
[156,160,0,182,151,171,151,147,153,162],
[144,156,158,0,144,145,142,150,154,139],
[175,166,189,196,0,178,161,155,168,168],
[161,160,169,195,162,0,153,143,164,154],
[174,164,189,198,179,187,0,181,161,173],
[174,185,193,190,185,197,159,0,178,169],
[167,157,187,186,172,176,179,162,0,157],
[177,159,178,201,172,186,167,171,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,169,144,171,159,156,157,153,168],
[182,0,174,164,189,164,176,179,157,159],
[171,166,0,172,190,162,179,160,180,172],
[196,176,168,0,197,170,171,167,168,165],
[169,151,150,143,0,160,135,154,155,152],
[181,176,178,170,180,0,168,159,161,170],
[184,164,161,169,205,172,0,153,184,159],
[183,161,180,173,186,181,187,0,182,176],
[187,183,160,172,185,179,156,158,0,162],
[172,181,168,175,188,170,181,164,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,177,176,187,162,175,168,189],
[170,0,187,186,177,196,183,185,160,191],
[171,153,0,163,172,181,174,168,163,180],
[163,154,177,0,152,186,172,167,161,180],
[164,163,168,188,0,185,180,168,171,184],
[153,144,159,154,155,0,168,163,151,161],
[178,157,166,168,160,172,0,172,159,171],
[165,155,172,173,172,177,168,0,153,170],
[172,180,177,179,169,189,181,187,0,177],
[151,149,160,160,156,179,169,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,190,168,176,187,199,170,180,166],
[175,0,172,159,165,175,184,163,153,148],
[150,168,0,155,149,173,194,168,171,166],
[172,181,185,0,170,179,203,171,169,181],
[164,175,191,170,0,187,186,180,161,167],
[153,165,167,161,153,0,177,157,169,170],
[141,156,146,137,154,163,0,146,150,146],
[170,177,172,169,160,183,194,0,166,178],
[160,187,169,171,179,171,190,174,0,182],
[174,192,174,159,173,170,194,162,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,173,191,168,166,171,171,169],
[181,0,171,189,188,164,170,168,175,170],
[179,169,0,175,177,172,158,163,168,161],
[167,151,165,0,173,146,163,165,168,161],
[149,152,163,167,0,153,161,154,152,147],
[172,176,168,194,187,0,158,171,174,170],
[174,170,182,177,179,182,0,180,176,181],
[169,172,177,175,186,169,160,0,177,180],
[169,165,172,172,188,166,164,163,0,190],
[171,170,179,179,193,170,159,160,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,160,173,165,170,172,177,169,174],
[177,0,160,164,173,174,167,168,153,178],
[180,180,0,174,172,178,162,165,189,184],
[167,176,166,0,162,157,180,172,170,162],
[175,167,168,178,0,185,160,180,191,185],
[170,166,162,183,155,0,174,156,150,185],
[168,173,178,160,180,166,0,183,167,181],
[163,172,175,168,160,184,157,0,166,168],
[171,187,151,170,149,190,173,174,0,154],
[166,162,156,178,155,155,159,172,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,161,163,162,164,166,160,153,162],
[176,0,181,172,175,173,181,172,163,173],
[179,159,0,168,168,160,169,165,147,172],
[177,168,172,0,185,173,173,171,168,177],
[178,165,172,155,0,166,170,154,156,168],
[176,167,180,167,174,0,170,168,172,170],
[174,159,171,167,170,170,0,162,160,176],
[180,168,175,169,186,172,178,0,158,181],
[187,177,193,172,184,168,180,182,0,182],
[178,167,168,163,172,170,164,159,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,192,161,191,174,164,187,187,167],
[142,0,186,153,163,150,182,165,152,160],
[148,154,0,158,168,161,170,158,158,145],
[179,187,182,0,168,159,177,169,163,151],
[149,177,172,172,0,142,168,167,159,170],
[166,190,179,181,198,0,183,175,180,172],
[176,158,170,163,172,157,0,168,164,148],
[153,175,182,171,173,165,172,0,173,156],
[153,188,182,177,181,160,176,167,0,174],
[173,180,195,189,170,168,192,184,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,167,163,171,169,164,158,184,167],
[165,0,175,178,168,163,195,180,184,168],
[173,165,0,166,182,176,167,170,173,179],
[177,162,174,0,183,165,177,172,178,170],
[169,172,158,157,0,161,179,167,169,156],
[171,177,164,175,179,0,192,187,189,166],
[176,145,173,163,161,148,0,167,168,159],
[182,160,170,168,173,153,173,0,170,180],
[156,156,167,162,171,151,172,170,0,172],
[173,172,161,170,184,174,181,160,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,156,153,138,140,124,168,132,172],
[204,0,192,175,181,171,149,200,162,184],
[184,148,0,149,140,146,130,153,149,165],
[187,165,191,0,157,165,156,197,170,164],
[202,159,200,183,0,158,154,218,174,187],
[200,169,194,175,182,0,162,178,175,190],
[216,191,210,184,186,178,0,189,154,177],
[172,140,187,143,122,162,151,0,157,163],
[208,178,191,170,166,165,186,183,0,191],
[168,156,175,176,153,150,163,177,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,156,162,171,168,170,162,179,174],
[168,0,153,179,167,166,180,164,182,188],
[184,187,0,177,183,168,190,177,189,189],
[178,161,163,0,176,183,178,163,185,172],
[169,173,157,164,0,170,170,153,185,179],
[172,174,172,157,170,0,178,170,192,177],
[170,160,150,162,170,162,0,171,175,166],
[178,176,163,177,187,170,169,0,187,180],
[161,158,151,155,155,148,165,153,0,150],
[166,152,151,168,161,163,174,160,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,167,166,168,151,161,171,177,165],
[163,0,159,171,157,155,153,186,175,163],
[173,181,0,174,165,158,161,188,185,168],
[174,169,166,0,164,152,157,185,190,170],
[172,183,175,176,0,165,175,192,190,173],
[189,185,182,188,175,0,175,201,193,164],
[179,187,179,183,165,165,0,191,176,163],
[169,154,152,155,148,139,149,0,174,153],
[163,165,155,150,150,147,164,166,0,149],
[175,177,172,170,167,176,177,187,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,163,173,163,161,165,182,162,157],
[170,0,161,186,159,169,175,175,166,174],
[177,179,0,191,177,182,176,174,177,169],
[167,154,149,0,163,172,168,170,171,153],
[177,181,163,177,0,172,182,170,173,167],
[179,171,158,168,168,0,172,173,170,171],
[175,165,164,172,158,168,0,173,161,175],
[158,165,166,170,170,167,167,0,161,178],
[178,174,163,169,167,170,179,179,0,174],
[183,166,171,187,173,169,165,162,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,151,167,150,176,161,142,149,156],
[193,0,189,189,169,188,186,156,174,164],
[189,151,0,169,170,189,160,157,170,171],
[173,151,171,0,158,177,152,155,154,130],
[190,171,170,182,0,201,170,171,169,173],
[164,152,151,163,139,0,157,131,159,153],
[179,154,180,188,170,183,0,160,167,152],
[198,184,183,185,169,209,180,0,175,174],
[191,166,170,186,171,181,173,165,0,152],
[184,176,169,210,167,187,188,166,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,131,189,137,185,182,130,150,165],
[184,0,196,168,165,178,148,183,164,178],
[209,144,0,145,169,190,182,154,184,184],
[151,172,195,0,153,222,175,194,168,181],
[203,175,171,187,0,209,188,183,158,186],
[155,162,150,118,131,0,142,150,131,155],
[158,192,158,165,152,198,0,187,178,186],
[210,157,186,146,157,190,153,0,184,173],
[190,176,156,172,182,209,162,156,0,195],
[175,162,156,159,154,185,154,167,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,160,171,156,167,171,161,164,173],
[173,0,153,167,158,167,162,153,156,158],
[180,187,0,173,171,175,170,164,175,170],
[169,173,167,0,150,155,164,158,167,164],
[184,182,169,190,0,180,167,170,179,178],
[173,173,165,185,160,0,164,159,171,169],
[169,178,170,176,173,176,0,165,172,163],
[179,187,176,182,170,181,175,0,189,174],
[176,184,165,173,161,169,168,151,0,173],
[167,182,170,176,162,171,177,166,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,173,155,143,177,168,167,162,140],
[160,0,152,134,146,145,137,153,139,146],
[167,188,0,155,169,185,144,192,165,161],
[185,206,185,0,172,184,161,178,162,164],
[197,194,171,168,0,174,160,168,166,169],
[163,195,155,156,166,0,151,175,161,173],
[172,203,196,179,180,189,0,198,179,170],
[173,187,148,162,172,165,142,0,146,144],
[178,201,175,178,174,179,161,194,0,179],
[200,194,179,176,171,167,170,196,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,147,159,157,153,163,148,151,157],
[190,0,172,171,184,181,163,167,166,170],
[193,168,0,183,178,185,175,186,174,164],
[181,169,157,0,168,174,147,163,164,167],
[183,156,162,172,0,162,159,162,159,176],
[187,159,155,166,178,0,165,163,162,163],
[177,177,165,193,181,175,0,165,153,172],
[192,173,154,177,178,177,175,0,165,162],
[189,174,166,176,181,178,187,175,0,175],
[183,170,176,173,164,177,168,178,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,185,178,190,169,180,170,165,170],
[163,0,189,173,183,162,176,170,181,171],
[155,151,0,166,167,153,160,172,157,157],
[162,167,174,0,184,178,172,170,168,162],
[150,157,173,156,0,144,169,166,160,158],
[171,178,187,162,196,0,175,167,175,186],
[160,164,180,168,171,165,0,177,166,170],
[170,170,168,170,174,173,163,0,156,168],
[175,159,183,172,180,165,174,184,0,172],
[170,169,183,178,182,154,170,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,159,171,137,195,145,186,172,186],
[192,0,194,195,158,194,178,206,195,207],
[181,146,0,207,170,205,177,206,204,185],
[169,145,133,0,136,155,131,157,158,194],
[203,182,170,204,0,189,203,192,167,146],
[145,146,135,185,151,0,156,183,145,196],
[195,162,163,209,137,184,0,194,148,211],
[154,134,134,183,148,157,146,0,171,198],
[168,145,136,182,173,195,192,169,0,146],
[154,133,155,146,194,144,129,142,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,179,173,178,187,175,170,178,186],
[166,0,168,167,168,165,163,177,181,183],
[161,172,0,173,176,176,159,172,178,170],
[167,173,167,0,177,176,174,175,183,184],
[162,172,164,163,0,179,169,174,190,171],
[153,175,164,164,161,0,157,165,175,171],
[165,177,181,166,171,183,0,180,179,182],
[170,163,168,165,166,175,160,0,174,176],
[162,159,162,157,150,165,161,166,0,168],
[154,157,170,156,169,169,158,164,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,159,161,150,173,151,166,167,168],
[153,0,151,152,161,160,157,156,159,162],
[181,189,0,171,171,150,153,170,187,179],
[179,188,169,0,180,182,164,173,159,172],
[190,179,169,160,0,173,154,159,169,187],
[167,180,190,158,167,0,179,178,156,176],
[189,183,187,176,186,161,0,170,182,194],
[174,184,170,167,181,162,170,0,178,170],
[173,181,153,181,171,184,158,162,0,178],
[172,178,161,168,153,164,146,170,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,213,175,159,184,185,158,208,158],
[147,0,141,157,139,134,164,140,157,169],
[127,199,0,193,167,184,189,163,183,167],
[165,183,147,0,167,166,189,163,187,189],
[181,201,173,173,0,192,197,170,189,172],
[156,206,156,174,148,0,184,155,184,178],
[155,176,151,151,143,156,0,159,194,166],
[182,200,177,177,170,185,181,0,197,184],
[132,183,157,153,151,156,146,143,0,148],
[182,171,173,151,168,162,174,156,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,178,138,167,166,161,153,159,141],
[195,0,192,169,190,183,180,151,185,175],
[162,148,0,131,174,160,172,132,149,108],
[202,171,209,0,213,171,171,151,175,168],
[173,150,166,127,0,139,167,130,175,132],
[174,157,180,169,201,0,168,154,157,158],
[179,160,168,169,173,172,0,154,155,146],
[187,189,208,189,210,186,186,0,162,167],
[181,155,191,165,165,183,185,178,0,144],
[199,165,232,172,208,182,194,173,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,164,184,185,164,166,176,200,201],
[163,0,154,163,188,141,148,159,191,166],
[176,186,0,179,200,141,180,186,191,181],
[156,177,161,0,196,145,148,184,191,191],
[155,152,140,144,0,135,152,151,191,175],
[176,199,199,195,205,0,164,185,216,202],
[174,192,160,192,188,176,0,185,196,189],
[164,181,154,156,189,155,155,0,176,173],
[140,149,149,149,149,124,144,164,0,170],
[139,174,159,149,165,138,151,167,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,340,170,340,170,170,340,170,170],
[0,0,0,0,170,0,0,170,0,0],
[0,340,0,0,170,0,170,170,0,0],
[170,340,340,0,170,170,170,170,170,340],
[0,170,170,170,0,170,0,0,170,170],
[170,340,340,170,170,0,170,170,170,170],
[170,340,170,170,340,170,0,340,170,170],
[0,170,170,170,340,170,0,0,170,170],
[170,340,340,170,170,170,170,170,0,340],
[170,340,340,0,170,170,170,170,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,180,213,167,151,194,213,191,167],
[146,0,154,180,164,162,152,200,164,130],
[160,186,0,178,178,143,142,196,166,177],
[127,160,162,0,172,162,146,181,148,153],
[173,176,162,168,0,165,164,188,168,155],
[189,178,197,178,175,0,177,204,167,147],
[146,188,198,194,176,163,0,203,176,184],
[127,140,144,159,152,136,137,0,135,139],
[149,176,174,192,172,173,164,205,0,178],
[173,210,163,187,185,193,156,201,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,179,137,159,149,166,180,154,154],
[196,0,162,168,169,148,195,172,198,188],
[161,178,0,162,160,168,177,176,176,182],
[203,172,178,0,163,156,187,168,174,160],
[181,171,180,177,0,160,193,196,179,194],
[191,192,172,184,180,0,209,195,184,158],
[174,145,163,153,147,131,0,180,159,149],
[160,168,164,172,144,145,160,0,159,165],
[186,142,164,166,161,156,181,181,0,147],
[186,152,158,180,146,182,191,175,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,165,170,153,173,171,172,162,162],
[165,0,165,164,152,154,152,162,167,169],
[175,175,0,182,164,178,172,175,166,186],
[170,176,158,0,158,164,148,171,152,164],
[187,188,176,182,0,180,163,185,175,190],
[167,186,162,176,160,0,154,170,159,163],
[169,188,168,192,177,186,0,177,170,177],
[168,178,165,169,155,170,163,0,158,178],
[178,173,174,188,165,181,170,182,0,187],
[178,171,154,176,150,177,163,162,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,185,165,236,184,197,177,156,194],
[134,0,202,150,190,170,173,170,169,207],
[155,138,0,154,171,161,175,174,136,173],
[175,190,186,0,197,153,197,207,179,200],
[104,150,169,143,0,142,178,192,128,176],
[156,170,179,187,198,0,177,224,172,192],
[143,167,165,143,162,163,0,171,128,211],
[163,170,166,133,148,116,169,0,132,153],
[184,171,204,161,212,168,212,208,0,192],
[146,133,167,140,164,148,129,187,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,165,181,173,170,178,166,159,171],
[156,0,177,169,176,196,179,213,178,175],
[175,163,0,150,167,201,159,191,163,201],
[159,171,190,0,214,189,193,196,187,191],
[167,164,173,126,0,173,172,180,172,157],
[170,144,139,151,167,0,139,187,146,151],
[162,161,181,147,168,201,0,178,164,176],
[174,127,149,144,160,153,162,0,183,167],
[181,162,177,153,168,194,176,157,0,193],
[169,165,139,149,183,189,164,173,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,169,179,194,199,194,172,166,170],
[176,0,172,171,193,181,181,162,186,171],
[171,168,0,177,162,166,184,166,182,166],
[161,169,163,0,203,185,182,176,180,185],
[146,147,178,137,0,182,180,157,170,158],
[141,159,174,155,158,0,176,163,171,164],
[146,159,156,158,160,164,0,146,147,144],
[168,178,174,164,183,177,194,0,183,191],
[174,154,158,160,170,169,193,157,0,163],
[170,169,174,155,182,176,196,149,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,159,174,177,183,180,177,186,166],
[167,0,175,175,179,184,192,184,176,171],
[181,165,0,167,166,171,182,174,186,160],
[166,165,173,0,171,170,184,173,188,175],
[163,161,174,169,0,169,178,181,187,175],
[157,156,169,170,171,0,175,161,165,154],
[160,148,158,156,162,165,0,151,152,137],
[163,156,166,167,159,179,189,0,168,174],
[154,164,154,152,153,175,188,172,0,166],
[174,169,180,165,165,186,203,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,165,168,168,188,156,160,186,192],
[159,0,166,150,158,177,150,172,170,181],
[175,174,0,172,156,188,168,171,177,184],
[172,190,168,0,178,190,182,183,182,208],
[172,182,184,162,0,171,172,170,183,190],
[152,163,152,150,169,0,157,161,168,172],
[184,190,172,158,168,183,0,180,171,194],
[180,168,169,157,170,179,160,0,175,177],
[154,170,163,158,157,172,169,165,0,192],
[148,159,156,132,150,168,146,163,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,178,193,173,169,191,196,173,186],
[170,0,176,195,175,179,193,173,184,183],
[162,164,0,172,160,160,160,162,166,171],
[147,145,168,0,153,157,160,170,162,166],
[167,165,180,187,0,163,174,159,182,170],
[171,161,180,183,177,0,177,179,169,186],
[149,147,180,180,166,163,0,175,161,180],
[144,167,178,170,181,161,165,0,155,173],
[167,156,174,178,158,171,179,185,0,169],
[154,157,169,174,170,154,160,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,157,173,154,169,185,173,153,151],
[161,0,170,139,152,173,173,173,150,147],
[183,170,0,164,165,160,157,166,156,148],
[167,201,176,0,156,176,176,192,171,156],
[186,188,175,184,0,183,174,193,163,152],
[171,167,180,164,157,0,173,184,151,144],
[155,167,183,164,166,167,0,144,171,180],
[167,167,174,148,147,156,196,0,153,150],
[187,190,184,169,177,189,169,187,0,171],
[189,193,192,184,188,196,160,190,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,166,178,192,180,169,161,183,178],
[183,0,166,172,191,181,180,177,194,180],
[174,174,0,182,169,174,182,158,188,184],
[162,168,158,0,171,183,162,152,167,169],
[148,149,171,169,0,164,166,139,172,177],
[160,159,166,157,176,0,157,151,172,152],
[171,160,158,178,174,183,0,171,175,166],
[179,163,182,188,201,189,169,0,186,179],
[157,146,152,173,168,168,165,154,0,158],
[162,160,156,171,163,188,174,161,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,175,155,191,197,156,180,172,191],
[159,0,208,180,207,208,172,185,181,163],
[165,132,0,169,170,181,185,171,146,161],
[185,160,171,0,201,175,173,175,159,161],
[149,133,170,139,0,183,159,164,129,136],
[143,132,159,165,157,0,145,170,137,145],
[184,168,155,167,181,195,0,178,167,176],
[160,155,169,165,176,170,162,0,136,175],
[168,159,194,181,211,203,173,204,0,182],
[149,177,179,179,204,195,164,165,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,166,160,161,170,165,182,171,175],
[182,0,187,181,177,184,184,175,184,168],
[174,153,0,171,159,167,171,167,170,159],
[180,159,169,0,161,169,170,169,169,170],
[179,163,181,179,0,183,169,177,170,166],
[170,156,173,171,157,0,169,165,167,168],
[175,156,169,170,171,171,0,165,167,163],
[158,165,173,171,163,175,175,0,170,164],
[169,156,170,171,170,173,173,170,0,162],
[165,172,181,170,174,172,177,176,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,157,179,155,164,161,133,123,148],
[192,0,163,188,183,178,191,166,169,185],
[183,177,0,178,181,155,178,146,156,163],
[161,152,162,0,160,155,167,155,147,159],
[185,157,159,180,0,150,177,151,151,164],
[176,162,185,185,190,0,181,150,162,168],
[179,149,162,173,163,159,0,144,154,144],
[207,174,194,185,189,190,196,0,182,170],
[217,171,184,193,189,178,186,158,0,176],
[192,155,177,181,176,172,196,170,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,183,168,170,184,185,180,205,180],
[175,0,174,175,173,183,184,169,202,175],
[157,166,0,173,165,183,163,192,205,162],
[172,165,167,0,188,179,174,178,199,185],
[170,167,175,152,0,190,170,173,191,171],
[156,157,157,161,150,0,169,169,195,166],
[155,156,177,166,170,171,0,171,180,167],
[160,171,148,162,167,171,169,0,171,159],
[135,138,135,141,149,145,160,169,0,158],
[160,165,178,155,169,174,173,181,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,177,186,167,182,174,173,173,171],
[165,0,159,166,157,168,159,164,167,156],
[163,181,0,174,155,184,172,179,163,172],
[154,174,166,0,155,161,150,162,161,159],
[173,183,185,185,0,167,193,180,173,177],
[158,172,156,179,173,0,161,177,162,165],
[166,181,168,190,147,179,0,180,165,169],
[167,176,161,178,160,163,160,0,158,169],
[167,173,177,179,167,178,175,182,0,180],
[169,184,168,181,163,175,171,171,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,170,195,189,168,167,171,171],
[159,0,178,160,191,215,183,177,173,161],
[172,162,0,161,179,181,160,165,161,150],
[170,180,179,0,194,204,182,163,173,202],
[145,149,161,146,0,190,166,178,155,158],
[151,125,159,136,150,0,134,142,125,124],
[172,157,180,158,174,206,0,184,170,155],
[173,163,175,177,162,198,156,0,176,166],
[169,167,179,167,185,215,170,164,0,167],
[169,179,190,138,182,216,185,174,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,180,174,177,172,188,170,175,180],
[171,0,182,171,162,148,168,159,168,172],
[160,158,0,175,165,153,160,165,160,174],
[166,169,165,0,164,153,168,179,166,174],
[163,178,175,176,0,157,156,169,175,179],
[168,192,187,187,183,0,178,176,180,178],
[152,172,180,172,184,162,0,154,182,177],
[170,181,175,161,171,164,186,0,170,172],
[165,172,180,174,165,160,158,170,0,170],
[160,168,166,166,161,162,163,168,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,161,190,170,172,159,171,170,148],
[185,0,181,184,184,154,166,162,169,165],
[179,159,0,169,160,149,162,152,144,156],
[150,156,171,0,166,148,176,164,170,163],
[170,156,180,174,0,158,163,164,158,180],
[168,186,191,192,182,0,203,193,173,183],
[181,174,178,164,177,137,0,168,174,145],
[169,178,188,176,176,147,172,0,178,155],
[170,171,196,170,182,167,166,162,0,161],
[192,175,184,177,160,157,195,185,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,160,155,171,171,161,169,162,152],
[171,0,163,160,162,171,187,155,146,155],
[180,177,0,179,182,188,171,172,164,170],
[185,180,161,0,162,178,181,161,169,156],
[169,178,158,178,0,156,175,169,150,161],
[169,169,152,162,184,0,164,158,161,148],
[179,153,169,159,165,176,0,172,161,169],
[171,185,168,179,171,182,168,0,172,180],
[178,194,176,171,190,179,179,168,0,168],
[188,185,170,184,179,192,171,160,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,165,166,170,175,164,164,182],
[169,0,162,167,172,177,165,175,166,182],
[162,178,0,172,175,185,176,167,173,180],
[175,173,168,0,160,175,165,156,169,167],
[174,168,165,180,0,181,176,161,174,180],
[170,163,155,165,159,0,169,166,164,172],
[165,175,164,175,164,171,0,160,166,170],
[176,165,173,184,179,174,180,0,185,174],
[176,174,167,171,166,176,174,155,0,160],
[158,158,160,173,160,168,170,166,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,186,206,181,181,196,183,183],
[170,0,181,175,198,173,205,172,191,200],
[167,159,0,172,185,163,195,175,204,186],
[154,165,168,0,188,165,179,181,177,176],
[134,142,155,152,0,148,159,172,170,150],
[159,167,177,175,192,0,182,180,203,207],
[159,135,145,161,181,158,0,163,192,174],
[144,168,165,159,168,160,177,0,178,184],
[157,149,136,163,170,137,148,162,0,157],
[157,140,154,164,190,133,166,156,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,160,164,156,161,162,152,165,162],
[174,0,170,175,160,179,183,162,175,169],
[180,170,0,172,173,179,172,173,167,179],
[176,165,168,0,157,174,166,167,162,172],
[184,180,167,183,0,188,189,179,192,184],
[179,161,161,166,152,0,169,149,155,166],
[178,157,168,174,151,171,0,176,165,172],
[188,178,167,173,161,191,164,0,173,166],
[175,165,173,178,148,185,175,167,0,183],
[178,171,161,168,156,174,168,174,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,163,139,166,158,144,172,158,172],
[196,0,178,172,168,166,167,145,174,170],
[177,162,0,179,170,165,154,171,171,186],
[201,168,161,0,178,169,172,169,179,175],
[174,172,170,162,0,152,161,156,164,168],
[182,174,175,171,188,0,156,181,166,168],
[196,173,186,168,179,184,0,178,168,162],
[168,195,169,171,184,159,162,0,188,186],
[182,166,169,161,176,174,172,152,0,165],
[168,170,154,165,172,172,178,154,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,152,189,189,266,189,74,187,186],
[77,0,40,114,152,77,116,77,114,114],
[188,300,0,190,262,300,188,111,188,225],
[151,226,150,0,151,226,114,75,113,151],
[151,188,78,189,0,189,191,77,152,189],
[74,263,40,114,151,0,114,37,112,74],
[151,224,152,226,149,226,0,188,264,151],
[266,263,229,265,263,303,152,0,266,303],
[153,226,152,227,188,228,76,74,0,150],
[154,226,115,189,151,266,189,37,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,170,164,169,165,172,168,170,162],
[169,0,169,164,180,161,169,178,170,166],
[170,171,0,162,179,167,188,177,173,169],
[176,176,178,0,173,163,165,186,184,174],
[171,160,161,167,0,159,173,179,178,162],
[175,179,173,177,181,0,172,185,177,165],
[168,171,152,175,167,168,0,179,170,167],
[172,162,163,154,161,155,161,0,170,143],
[170,170,167,156,162,163,170,170,0,157],
[178,174,171,166,178,175,173,197,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,175,172,166,198,173,175,186,159],
[165,0,163,157,173,181,151,177,171,173],
[165,177,0,181,175,182,157,173,187,184],
[168,183,159,0,164,182,169,168,191,178],
[174,167,165,176,0,181,154,172,191,176],
[142,159,158,158,159,0,167,141,161,164],
[167,189,183,171,186,173,0,181,184,191],
[165,163,167,172,168,199,159,0,183,178],
[154,169,153,149,149,179,156,157,0,168],
[181,167,156,162,164,176,149,162,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,173,172,196,192,190,163,186],
[165,0,166,189,174,167,167,171,174,179],
[162,174,0,177,186,182,188,185,167,196],
[167,151,163,0,171,188,180,170,164,173],
[168,166,154,169,0,177,186,185,167,179],
[144,173,158,152,163,0,171,169,152,169],
[148,173,152,160,154,169,0,183,149,169],
[150,169,155,170,155,171,157,0,155,165],
[177,166,173,176,173,188,191,185,0,204],
[154,161,144,167,161,171,171,175,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,155,185,178,163,164,191,154],
[172,0,174,178,189,174,181,177,183,162],
[164,166,0,174,170,170,161,170,184,146],
[185,162,166,0,189,179,166,154,169,172],
[155,151,170,151,0,164,146,154,172,154],
[162,166,170,161,176,0,151,154,162,164],
[177,159,179,174,194,189,0,181,166,174],
[176,163,170,186,186,186,159,0,190,171],
[149,157,156,171,168,178,174,150,0,157],
[186,178,194,168,186,176,166,169,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,171,152,165,152,162,189,187,179],
[145,0,166,141,146,152,157,163,164,145],
[169,174,0,164,179,158,189,201,183,166],
[188,199,176,0,174,164,159,207,197,184],
[175,194,161,166,0,159,169,177,199,187],
[188,188,182,176,181,0,179,180,189,166],
[178,183,151,181,171,161,0,176,195,170],
[151,177,139,133,163,160,164,0,153,157],
[153,176,157,143,141,151,145,187,0,144],
[161,195,174,156,153,174,170,183,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,156,141,177,146,130,136,128,145],
[193,0,171,172,158,166,153,152,164,178],
[184,169,0,180,183,176,177,184,176,186],
[199,168,160,0,183,183,169,167,174,189],
[163,182,157,157,0,188,154,179,171,157],
[194,174,164,157,152,0,170,167,165,152],
[210,187,163,171,186,170,0,180,165,164],
[204,188,156,173,161,173,160,0,190,168],
[212,176,164,166,169,175,175,150,0,158],
[195,162,154,151,183,188,176,172,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,207,178,203,148,182,166,173,174],
[165,0,179,182,182,158,149,170,144,163],
[133,161,0,164,177,143,154,156,167,150],
[162,158,176,0,196,146,165,152,152,165],
[137,158,163,144,0,136,167,159,145,165],
[192,182,197,194,204,0,182,170,172,193],
[158,191,186,175,173,158,0,168,175,187],
[174,170,184,188,181,170,172,0,177,169],
[167,196,173,188,195,168,165,163,0,191],
[166,177,190,175,175,147,153,171,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,184,182,185,162,174,188,174,163],
[178,0,167,175,187,169,177,179,161,171],
[156,173,0,184,182,181,176,186,172,151],
[158,165,156,0,189,160,187,170,159,177],
[155,153,158,151,0,172,176,167,156,147],
[178,171,159,180,168,0,203,186,159,182],
[166,163,164,153,164,137,0,154,177,161],
[152,161,154,170,173,154,186,0,177,161],
[166,179,168,181,184,181,163,163,0,166],
[177,169,189,163,193,158,179,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,178,159,159,193,162,161,189,197],
[166,0,153,164,157,123,146,159,197,164],
[162,187,0,158,134,152,171,163,190,173],
[181,176,182,0,158,129,178,182,221,191],
[181,183,206,182,0,161,163,197,191,180],
[147,217,188,211,179,0,195,189,208,181],
[178,194,169,162,177,145,0,189,207,171],
[179,181,177,158,143,151,151,0,209,196],
[151,143,150,119,149,132,133,131,0,164],
[143,176,167,149,160,159,169,144,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,155,144,163,179,155,162,162,178],
[172,0,158,164,168,193,187,170,189,195],
[185,182,0,157,209,197,168,202,204,184],
[196,176,183,0,196,199,171,211,194,164],
[177,172,131,144,0,182,143,165,171,149],
[161,147,143,141,158,0,130,170,180,164],
[185,153,172,169,197,210,0,176,187,166],
[178,170,138,129,175,170,164,0,170,170],
[178,151,136,146,169,160,153,170,0,158],
[162,145,156,176,191,176,174,170,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,167,169,186,165,146,185,178,179],
[172,0,191,174,188,189,167,191,172,171],
[173,149,0,142,162,154,155,168,156,180],
[171,166,198,0,185,175,181,201,187,192],
[154,152,178,155,0,168,146,179,162,171],
[175,151,186,165,172,0,157,190,180,173],
[194,173,185,159,194,183,0,191,176,180],
[155,149,172,139,161,150,149,0,161,160],
[162,168,184,153,178,160,164,179,0,177],
[161,169,160,148,169,167,160,180,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,171,146,162,165,179,171,170,181],
[179,0,161,170,181,168,178,172,158,179],
[169,179,0,187,185,172,187,193,181,177],
[194,170,153,0,182,163,189,186,170,178],
[178,159,155,158,0,161,181,183,150,169],
[175,172,168,177,179,0,189,186,164,179],
[161,162,153,151,159,151,0,165,137,148],
[169,168,147,154,157,154,175,0,165,161],
[170,182,159,170,190,176,203,175,0,179],
[159,161,163,162,171,161,192,179,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,154,158,154,160,169,176,186,171],
[172,0,189,176,164,185,173,171,188,170],
[186,151,0,150,161,159,172,184,168,171],
[182,164,190,0,160,170,175,172,180,176],
[186,176,179,180,0,182,169,177,178,195],
[180,155,181,170,158,0,165,186,169,168],
[171,167,168,165,171,175,0,186,172,174],
[164,169,156,168,163,154,154,0,165,162],
[154,152,172,160,162,171,168,175,0,176],
[169,170,169,164,145,172,166,178,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,163,168,168,175,170,173,180,153],
[168,0,158,169,159,152,172,163,165,150],
[177,182,0,164,186,179,170,171,175,178],
[172,171,176,0,177,165,156,168,163,159],
[172,181,154,163,0,162,167,159,158,153],
[165,188,161,175,178,0,173,177,175,151],
[170,168,170,184,173,167,0,171,178,165],
[167,177,169,172,181,163,169,0,195,173],
[160,175,165,177,182,165,162,145,0,145],
[187,190,162,181,187,189,175,167,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,175,152,171,149,181,153,179,160],
[167,0,176,162,158,182,183,148,159,184],
[165,164,0,169,172,173,184,142,187,161],
[188,178,171,0,183,152,197,160,180,156],
[169,182,168,157,0,155,183,168,161,163],
[191,158,167,188,185,0,198,158,191,154],
[159,157,156,143,157,142,0,134,142,143],
[187,192,198,180,172,182,206,0,194,152],
[161,181,153,160,179,149,198,146,0,175],
[180,156,179,184,177,186,197,188,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,176,178,162,193,144,178,172,158],
[156,0,170,182,166,169,154,165,138,163],
[164,170,0,184,131,181,173,151,182,187],
[162,158,156,0,112,167,133,146,173,181],
[178,174,209,228,0,223,170,180,206,200],
[147,171,159,173,117,0,139,155,159,176],
[196,186,167,207,170,201,0,184,208,196],
[162,175,189,194,160,185,156,0,191,171],
[168,202,158,167,134,181,132,149,0,164],
[182,177,153,159,140,164,144,169,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,174,164,168,170,156,160,151,165],
[176,0,178,180,177,176,162,166,164,199],
[166,162,0,158,160,162,148,163,173,181],
[176,160,182,0,165,180,165,176,177,187],
[172,163,180,175,0,184,180,177,182,181],
[170,164,178,160,156,0,159,159,152,168],
[184,178,192,175,160,181,0,174,178,187],
[180,174,177,164,163,181,166,0,158,178],
[189,176,167,163,158,188,162,182,0,180],
[175,141,159,153,159,172,153,162,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,165,164,155,155,158,162,174,148],
[171,0,167,173,166,159,178,175,183,164],
[175,173,0,172,168,159,167,172,187,162],
[176,167,168,0,166,168,174,169,190,166],
[185,174,172,174,0,161,166,180,183,166],
[185,181,181,172,179,0,186,196,192,170],
[182,162,173,166,174,154,0,169,181,164],
[178,165,168,171,160,144,171,0,176,150],
[166,157,153,150,157,148,159,164,0,157],
[192,176,178,174,174,170,176,190,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,155,160,164,175,179,178,163,154],
[155,0,164,163,151,173,165,168,158,147],
[185,176,0,164,176,166,162,173,167,162],
[180,177,176,0,176,192,160,183,171,170],
[176,189,164,164,0,175,173,181,171,156],
[165,167,174,148,165,0,163,151,158,164],
[161,175,178,180,167,177,0,164,170,159],
[162,172,167,157,159,189,176,0,172,154],
[177,182,173,169,169,182,170,168,0,163],
[186,193,178,170,184,176,181,186,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,147,166,164,173,151,138,175,166],
[197,0,157,184,186,184,209,179,177,194],
[193,183,0,178,188,202,208,161,189,211],
[174,156,162,0,147,178,185,158,181,166],
[176,154,152,193,0,186,199,180,182,204],
[167,156,138,162,154,0,160,162,174,167],
[189,131,132,155,141,180,0,133,190,164],
[202,161,179,182,160,178,207,0,194,207],
[165,163,151,159,158,166,150,146,0,163],
[174,146,129,174,136,173,176,133,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,189,169,181,198,199,180,163,200],
[163,0,191,163,189,172,148,158,174,200],
[151,149,0,167,187,189,163,176,175,186],
[171,177,173,0,181,188,178,143,177,190],
[159,151,153,159,0,140,164,104,139,138],
[142,168,151,152,200,0,177,175,167,177],
[141,192,177,162,176,163,0,175,165,195],
[160,182,164,197,236,165,165,0,169,182],
[177,166,165,163,201,173,175,171,0,198],
[140,140,154,150,202,163,145,158,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,167,162,166,173,176,169,184,176],
[161,0,153,157,154,154,163,173,160,152],
[173,187,0,166,168,191,190,180,166,174],
[178,183,174,0,173,178,186,194,163,178],
[174,186,172,167,0,189,184,187,166,180],
[167,186,149,162,151,0,153,164,165,172],
[164,177,150,154,156,187,0,177,168,176],
[171,167,160,146,153,176,163,0,155,163],
[156,180,174,177,174,175,172,185,0,183],
[164,188,166,162,160,168,164,177,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,161,169,164,177,194,173,175,161],
[170,0,151,170,169,162,169,161,177,167],
[179,189,0,174,187,194,178,170,192,199],
[171,170,166,0,157,177,192,161,183,165],
[176,171,153,183,0,176,187,168,188,185],
[163,178,146,163,164,0,167,157,156,161],
[146,171,162,148,153,173,0,148,172,155],
[167,179,170,179,172,183,192,0,173,182],
[165,163,148,157,152,184,168,167,0,152],
[179,173,141,175,155,179,185,158,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,155,165,170,153,150,186,165,171],
[169,0,138,170,159,171,148,181,157,157],
[185,202,0,166,191,183,181,195,194,182],
[175,170,174,0,178,169,167,181,180,164],
[170,181,149,162,0,160,158,179,156,170],
[187,169,157,171,180,0,171,190,189,176],
[190,192,159,173,182,169,0,185,167,171],
[154,159,145,159,161,150,155,0,169,155],
[175,183,146,160,184,151,173,171,0,164],
[169,183,158,176,170,164,169,185,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,181,183,178,154,169,173,175,152],
[165,0,154,168,156,152,148,141,167,147],
[159,186,0,163,154,161,162,157,174,144],
[157,172,177,0,169,154,154,157,157,158],
[162,184,186,171,0,174,166,179,183,165],
[186,188,179,186,166,0,160,178,183,162],
[171,192,178,186,174,180,0,172,182,153],
[167,199,183,183,161,162,168,0,178,170],
[165,173,166,183,157,157,158,162,0,149],
[188,193,196,182,175,178,187,170,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,169,152,145,142,154,154,171,163],
[184,0,194,139,181,161,173,175,178,162],
[171,146,0,160,165,156,157,152,179,156],
[188,201,180,0,187,162,196,180,177,197],
[195,159,175,153,0,165,172,171,169,151],
[198,179,184,178,175,0,148,157,195,168],
[186,167,183,144,168,192,0,176,179,178],
[186,165,188,160,169,183,164,0,185,173],
[169,162,161,163,171,145,161,155,0,164],
[177,178,184,143,189,172,162,167,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,193,181,177,177,154,182,176,164],
[156,0,175,179,181,183,175,174,180,177],
[147,165,0,164,147,164,161,168,161,152],
[159,161,176,0,157,170,157,174,162,160],
[163,159,193,183,0,175,168,174,171,174],
[163,157,176,170,165,0,154,180,176,171],
[186,165,179,183,172,186,0,187,167,184],
[158,166,172,166,166,160,153,0,155,170],
[164,160,179,178,169,164,173,185,0,173],
[176,163,188,180,166,169,156,170,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,175,166,189,169,188,172,200,173],
[166,0,177,188,181,184,197,182,180,175],
[165,163,0,178,196,189,183,205,195,157],
[174,152,162,0,167,165,180,180,164,157],
[151,159,144,173,0,178,175,169,162,156],
[171,156,151,175,162,0,172,180,165,157],
[152,143,157,160,165,168,0,184,146,155],
[168,158,135,160,171,160,156,0,166,150],
[140,160,145,176,178,175,194,174,0,169],
[167,165,183,183,184,183,185,190,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,159,171,175,175,172,170,173,163],
[172,0,166,168,168,177,168,162,181,177],
[181,174,0,174,188,178,188,170,186,172],
[169,172,166,0,171,181,183,175,185,180],
[165,172,152,169,0,175,171,165,175,168],
[165,163,162,159,165,0,167,167,180,167],
[168,172,152,157,169,173,0,171,176,167],
[170,178,170,165,175,173,169,0,183,178],
[167,159,154,155,165,160,164,157,0,165],
[177,163,168,160,172,173,173,162,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,164,164,156,160,154,166,162,168],
[183,0,158,173,173,176,179,183,156,166],
[176,182,0,163,174,153,144,162,153,157],
[176,167,177,0,170,179,189,172,181,172],
[184,167,166,170,0,162,152,160,152,174],
[180,164,187,161,178,0,185,155,187,167],
[186,161,196,151,188,155,0,167,173,147],
[174,157,178,168,180,185,173,0,153,175],
[178,184,187,159,188,153,167,187,0,173],
[172,174,183,168,166,173,193,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,170,166,170,153,164,160,170,166],
[169,0,172,161,153,163,158,161,161,173],
[170,168,0,175,179,151,166,159,182,184],
[174,179,165,0,181,159,155,155,171,171],
[170,187,161,159,0,170,154,159,157,182],
[187,177,189,181,170,0,186,184,200,202],
[176,182,174,185,186,154,0,161,166,176],
[180,179,181,185,181,156,179,0,164,182],
[170,179,158,169,183,140,174,176,0,194],
[174,167,156,169,158,138,164,158,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,157,159,169,157,159,143,159,147],
[187,0,177,163,171,174,167,176,169,152],
[183,163,0,156,168,173,163,151,168,156],
[181,177,184,0,169,157,173,163,195,162],
[171,169,172,171,0,151,174,157,180,152],
[183,166,167,183,189,0,181,172,187,154],
[181,173,177,167,166,159,0,185,155,152],
[197,164,189,177,183,168,155,0,193,171],
[181,171,172,145,160,153,185,147,0,146],
[193,188,184,178,188,186,188,169,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,137,163,152,171,151,155,164,163],
[177,0,163,184,162,175,180,163,169,158],
[203,177,0,187,180,178,179,159,186,192],
[177,156,153,0,154,166,173,160,173,143],
[188,178,160,186,0,172,178,170,173,191],
[169,165,162,174,168,0,167,164,203,173],
[189,160,161,167,162,173,0,171,177,166],
[185,177,181,180,170,176,169,0,179,175],
[176,171,154,167,167,137,163,161,0,173],
[177,182,148,197,149,167,174,165,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,182,189,162,183,188,169,165,181],
[158,0,139,177,154,160,161,166,147,165],
[158,201,0,172,158,174,169,180,176,179],
[151,163,168,0,159,162,168,160,161,172],
[178,186,182,181,0,186,177,177,167,167],
[157,180,166,178,154,0,187,182,165,169],
[152,179,171,172,163,153,0,172,172,172],
[171,174,160,180,163,158,168,0,163,172],
[175,193,164,179,173,175,168,177,0,163],
[159,175,161,168,173,171,168,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,206,181,181,150,174,170,205,190],
[160,0,194,171,169,158,163,165,197,189],
[134,146,0,162,152,135,159,153,154,171],
[159,169,178,0,160,182,175,168,188,173],
[159,171,188,180,0,151,178,177,187,191],
[190,182,205,158,189,0,191,163,179,183],
[166,177,181,165,162,149,0,142,183,188],
[170,175,187,172,163,177,198,0,186,202],
[135,143,186,152,153,161,157,154,0,173],
[150,151,169,167,149,157,152,138,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,164,153,160,164,177,166,158,157],
[187,0,181,180,184,177,173,180,180,170],
[176,159,0,149,174,177,159,175,159,160],
[187,160,191,0,183,187,189,176,182,165],
[180,156,166,157,0,173,160,163,157,155],
[176,163,163,153,167,0,170,159,166,167],
[163,167,181,151,180,170,0,179,162,163],
[174,160,165,164,177,181,161,0,157,167],
[182,160,181,158,183,174,178,183,0,162],
[183,170,180,175,185,173,177,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,167,168,179,175,176,179,166,167],
[169,0,159,157,188,177,165,174,169,164],
[173,181,0,166,176,181,173,179,173,168],
[172,183,174,0,191,183,182,187,166,174],
[161,152,164,149,0,161,156,171,161,163],
[165,163,159,157,179,0,178,165,163,161],
[164,175,167,158,184,162,0,170,165,167],
[161,166,161,153,169,175,170,0,170,163],
[174,171,167,174,179,177,175,170,0,182],
[173,176,172,166,177,179,173,177,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,143,157,165,159,192,164,152,164],
[169,0,154,172,170,147,173,157,157,151],
[197,186,0,183,172,182,193,181,157,170],
[183,168,157,0,160,156,164,161,153,165],
[175,170,168,180,0,144,180,178,163,178],
[181,193,158,184,196,0,178,182,172,172],
[148,167,147,176,160,162,0,157,146,158],
[176,183,159,179,162,158,183,0,171,167],
[188,183,183,187,177,168,194,169,0,192],
[176,189,170,175,162,168,182,173,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,170,203,191,188,170,176,210,187],
[163,0,145,202,180,167,157,147,174,174],
[170,195,0,217,206,190,197,172,212,188],
[137,138,123,0,166,161,154,161,159,143],
[149,160,134,174,0,152,163,151,166,168],
[152,173,150,179,188,0,173,165,177,177],
[170,183,143,186,177,167,0,162,168,157],
[164,193,168,179,189,175,178,0,179,178],
[130,166,128,181,174,163,172,161,0,145],
[153,166,152,197,172,163,183,162,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,173,176,166,166,186,196,179,177],
[164,0,167,150,163,173,168,159,168,168],
[167,173,0,169,173,163,180,172,163,165],
[164,190,171,0,177,176,181,169,164,175],
[174,177,167,163,0,159,169,172,173,170],
[174,167,177,164,181,0,166,168,169,173],
[154,172,160,159,171,174,0,151,170,174],
[144,181,168,171,168,172,189,0,173,176],
[161,172,177,176,167,171,170,167,0,168],
[163,172,175,165,170,167,166,164,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,174,180,173,175,163,181,182,170],
[164,0,161,161,169,171,160,161,171,147],
[166,179,0,179,181,163,181,176,192,170],
[160,179,161,0,184,180,169,181,169,172],
[167,171,159,156,0,171,165,164,178,158],
[165,169,177,160,169,0,167,169,166,161],
[177,180,159,171,175,173,0,171,169,156],
[159,179,164,159,176,171,169,0,176,157],
[158,169,148,171,162,174,171,164,0,157],
[170,193,170,168,182,179,184,183,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,176,170,164,168,174,170,166,176],
[158,0,156,151,166,169,161,172,159,178],
[164,184,0,153,168,176,178,165,151,176],
[170,189,187,0,178,190,181,170,180,188],
[176,174,172,162,0,166,169,154,171,179],
[172,171,164,150,174,0,170,164,170,169],
[166,179,162,159,171,170,0,166,168,171],
[170,168,175,170,186,176,174,0,177,171],
[174,181,189,160,169,170,172,163,0,176],
[164,162,164,152,161,171,169,169,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,196,194,187,191,193,174,188,201],
[173,0,207,194,200,200,194,166,186,222],
[144,133,0,179,163,176,164,158,155,183],
[146,146,161,0,181,192,174,155,139,172],
[153,140,177,159,0,194,166,159,156,178],
[149,140,164,148,146,0,154,164,159,158],
[147,146,176,166,174,186,0,171,160,186],
[166,174,182,185,181,176,169,0,162,202],
[152,154,185,201,184,181,180,178,0,201],
[139,118,157,168,162,182,154,138,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,173,171,178,180,155,170,182,173],
[159,0,161,174,172,169,167,166,160,180],
[167,179,0,177,185,169,177,188,155,190],
[169,166,163,0,182,170,162,158,167,173],
[162,168,155,158,0,164,157,166,154,155],
[160,171,171,170,176,0,171,157,146,169],
[185,173,163,178,183,169,0,169,174,163],
[170,174,152,182,174,183,171,0,152,175],
[158,180,185,173,186,194,166,188,0,186],
[167,160,150,167,185,171,177,165,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,164,173,181,184,174,187,167,187],
[164,0,171,179,173,184,162,167,176,194],
[176,169,0,157,170,160,162,161,156,190],
[167,161,183,0,163,169,172,150,147,176],
[159,167,170,177,0,155,155,159,166,189],
[156,156,180,171,185,0,169,153,160,172],
[166,178,178,168,185,171,0,169,184,172],
[153,173,179,190,181,187,171,0,180,193],
[173,164,184,193,174,180,156,160,0,187],
[153,146,150,164,151,168,168,147,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,164,167,177,162,169,158,153,151],
[178,0,166,175,171,166,175,170,154,163],
[176,174,0,168,168,166,169,155,165,161],
[173,165,172,0,166,163,161,159,157,162],
[163,169,172,174,0,165,172,158,168,160],
[178,174,174,177,175,0,172,153,163,173],
[171,165,171,179,168,168,0,157,163,159],
[182,170,185,181,182,187,183,0,175,168],
[187,186,175,183,172,177,177,165,0,167],
[189,177,179,178,180,167,181,172,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,134,148,180,157,168,167,174,149],
[167,0,180,159,163,183,186,193,180,207],
[206,160,0,171,177,180,179,171,206,198],
[192,181,169,0,156,183,184,176,187,173],
[160,177,163,184,0,178,153,184,200,160],
[183,157,160,157,162,0,155,143,195,173],
[172,154,161,156,187,185,0,179,179,167],
[173,147,169,164,156,197,161,0,202,168],
[166,160,134,153,140,145,161,138,0,147],
[191,133,142,167,180,167,173,172,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,120,143,178,130,152,188,148,141],
[188,0,176,148,204,149,167,189,161,169],
[220,164,0,181,197,172,161,212,167,152],
[197,192,159,0,201,175,197,197,156,194],
[162,136,143,139,0,157,159,163,141,151],
[210,191,168,165,183,0,190,199,176,184],
[188,173,179,143,181,150,0,207,159,183],
[152,151,128,143,177,141,133,0,121,136],
[192,179,173,184,199,164,181,219,0,178],
[199,171,188,146,189,156,157,204,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,185,181,165,169,162,151,178,189],
[171,0,177,162,172,164,154,154,167,164],
[155,163,0,161,157,155,137,162,161,171],
[159,178,179,0,169,177,157,164,181,172],
[175,168,183,171,0,170,163,168,170,176],
[171,176,185,163,170,0,159,170,171,172],
[178,186,203,183,177,181,0,169,195,198],
[189,186,178,176,172,170,171,0,180,179],
[162,173,179,159,170,169,145,160,0,175],
[151,176,169,168,164,168,142,161,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,187,178,188,177,175,179,175,194],
[174,0,149,169,176,171,171,159,167,180],
[153,191,0,186,160,152,181,167,176,165],
[162,171,154,0,183,191,187,144,181,195],
[152,164,180,157,0,146,167,155,177,179],
[163,169,188,149,194,0,167,159,159,204],
[165,169,159,153,173,173,0,160,165,161],
[161,181,173,196,185,181,180,0,184,177],
[165,173,164,159,163,181,175,156,0,170],
[146,160,175,145,161,136,179,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,170,176,165,171,161,165,180,170],
[173,0,160,161,156,164,166,159,177,162],
[170,180,0,172,172,170,172,178,185,175],
[164,179,168,0,150,173,169,168,176,164],
[175,184,168,190,0,175,179,179,185,170],
[169,176,170,167,165,0,182,167,178,168],
[179,174,168,171,161,158,0,175,186,170],
[175,181,162,172,161,173,165,0,181,170],
[160,163,155,164,155,162,154,159,0,158],
[170,178,165,176,170,172,170,170,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,265,189,266,151,226,228,265,264],
[188,0,189,75,151,112,227,152,226,226],
[75,151,0,74,114,151,149,76,113,114],
[151,265,266,0,190,188,228,229,303,266],
[74,189,226,150,0,112,187,228,263,225],
[189,228,189,152,228,0,227,191,265,228],
[114,113,191,112,153,113,0,116,153,152],
[112,188,264,111,112,149,224,0,187,150],
[75,114,227,37,77,75,187,153,0,76],
[76,114,226,74,115,112,188,190,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,183,176,160,179,151,153,184,165],
[146,0,162,144,156,158,132,133,147,136],
[157,178,0,166,185,144,165,139,183,160],
[164,196,174,0,168,165,137,143,181,163],
[180,184,155,172,0,150,145,144,182,165],
[161,182,196,175,190,0,155,157,172,172],
[189,208,175,203,195,185,0,153,199,171],
[187,207,201,197,196,183,187,0,190,167],
[156,193,157,159,158,168,141,150,0,162],
[175,204,180,177,175,168,169,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,166,142,159,141,148,160,165,164],
[191,0,166,173,166,167,164,167,166,174],
[174,174,0,152,177,167,162,179,166,190],
[198,167,188,0,170,168,175,183,179,181],
[181,174,163,170,0,172,167,178,175,171],
[199,173,173,172,168,0,159,171,175,160],
[192,176,178,165,173,181,0,184,173,175],
[180,173,161,157,162,169,156,0,153,177],
[175,174,174,161,165,165,167,187,0,175],
[176,166,150,159,169,180,165,163,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,174,175,160,174,175,170,165,175],
[169,0,184,172,170,174,174,179,181,192],
[166,156,0,160,161,167,171,166,170,175],
[165,168,180,0,173,175,173,183,168,183],
[180,170,179,167,0,166,181,175,169,172],
[166,166,173,165,174,0,171,166,162,171],
[165,166,169,167,159,169,0,168,167,179],
[170,161,174,157,165,174,172,0,172,164],
[175,159,170,172,171,178,173,168,0,174],
[165,148,165,157,168,169,161,176,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,192,148,201,209,205,168,169,173],
[190,0,170,169,209,224,143,185,180,186],
[148,170,0,159,181,184,172,177,163,181],
[192,171,181,0,164,209,147,201,168,182],
[139,131,159,176,0,181,166,170,153,167],
[131,116,156,131,159,0,127,162,133,131],
[135,197,168,193,174,213,0,178,170,173],
[172,155,163,139,170,178,162,0,159,158],
[171,160,177,172,187,207,170,181,0,169],
[167,154,159,158,173,209,167,182,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,164,168,166,164,148,176,160,149],
[180,0,174,185,197,184,174,177,166,171],
[176,166,0,164,178,176,174,175,165,161],
[172,155,176,0,177,166,152,174,160,167],
[174,143,162,163,0,172,165,175,162,157],
[176,156,164,174,168,0,159,176,169,160],
[192,166,166,188,175,181,0,184,163,160],
[164,163,165,166,165,164,156,0,155,154],
[180,174,175,180,178,171,177,185,0,165],
[191,169,179,173,183,180,180,186,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,167,183,175,162,176,161,154,154],
[193,0,177,181,191,169,181,181,168,160],
[173,163,0,193,188,170,169,172,171,162],
[157,159,147,0,170,167,150,164,156,143],
[165,149,152,170,0,152,164,177,147,164],
[178,171,170,173,188,0,167,178,165,170],
[164,159,171,190,176,173,0,169,165,155],
[179,159,168,176,163,162,171,0,160,169],
[186,172,169,184,193,175,175,180,0,174],
[186,180,178,197,176,170,185,171,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,236,191,171,149,200,179,169,169],
[171,0,238,212,150,180,209,181,183,178],
[104,102,0,148,113,104,156,169,128,143],
[149,128,192,0,127,148,187,138,141,135],
[169,190,227,213,0,145,201,156,189,135],
[191,160,236,192,195,0,201,191,236,201],
[140,131,184,153,139,139,0,119,141,150],
[161,159,171,202,184,149,221,0,195,189],
[171,157,212,199,151,104,199,145,0,134],
[171,162,197,205,205,139,190,151,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,197,177,169,195,178,194,186,179],
[160,0,171,155,154,180,164,162,163,164],
[143,169,0,149,165,171,152,190,164,159],
[163,185,191,0,182,188,162,173,163,161],
[171,186,175,158,0,183,162,171,166,153],
[145,160,169,152,157,0,152,173,153,154],
[162,176,188,178,178,188,0,181,163,170],
[146,178,150,167,169,167,159,0,160,152],
[154,177,176,177,174,187,177,180,0,154],
[161,176,181,179,187,186,170,188,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,167,159,162,180,168,181,187,183],
[174,0,176,161,173,195,185,192,166,194],
[173,164,0,171,164,179,171,180,183,173],
[181,179,169,0,169,190,184,178,194,167],
[178,167,176,171,0,189,181,173,173,183],
[160,145,161,150,151,0,180,165,169,146],
[172,155,169,156,159,160,0,173,177,179],
[159,148,160,162,167,175,167,0,181,158],
[153,174,157,146,167,171,163,159,0,154],
[157,146,167,173,157,194,161,182,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,172,165,165,162,171,164,171,165],
[179,0,165,158,170,170,182,162,172,181],
[168,175,0,172,161,173,150,166,168,171],
[175,182,168,0,177,181,189,162,185,187],
[175,170,179,163,0,176,177,173,181,185],
[178,170,167,159,164,0,163,173,169,186],
[169,158,190,151,163,177,0,182,177,179],
[176,178,174,178,167,167,158,0,190,194],
[169,168,172,155,159,171,163,150,0,164],
[175,159,169,153,155,154,161,146,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,159,164,168,179,163,173,163,163],
[166,0,151,154,163,154,156,169,161,142],
[181,189,0,161,178,174,186,175,181,177],
[176,186,179,0,166,166,178,181,172,168],
[172,177,162,174,0,173,169,178,177,154],
[161,186,166,174,167,0,170,159,161,157],
[177,184,154,162,171,170,0,170,169,158],
[167,171,165,159,162,181,170,0,174,156],
[177,179,159,168,163,179,171,166,0,174],
[177,198,163,172,186,183,182,184,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,176,161,181,174,162,174,176,179],
[165,0,177,165,180,173,176,158,170,163],
[164,163,0,159,176,175,180,173,180,156],
[179,175,181,0,184,166,179,179,181,164],
[159,160,164,156,0,169,171,164,166,162],
[166,167,165,174,171,0,169,163,169,164],
[178,164,160,161,169,171,0,165,166,165],
[166,182,167,161,176,177,175,0,174,153],
[164,170,160,159,174,171,174,166,0,166],
[161,177,184,176,178,176,175,187,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,169,171,213,129,213,212,129,213],
[169,0,212,212,255,212,170,255,169,169],
[171,128,0,214,171,129,127,213,129,86],
[169,128,126,0,212,128,128,169,86,127],
[127,85,169,128,0,85,127,213,85,126],
[211,128,211,212,255,0,170,211,86,170],
[127,170,213,212,213,170,0,256,170,170],
[128,85,127,171,127,129,84,0,86,84],
[211,171,211,254,255,254,170,254,0,169],
[127,171,254,213,214,170,170,256,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,165,186,175,161,145,155,160,131],
[181,0,153,188,171,175,174,156,153,144],
[175,187,0,171,204,187,176,197,168,162],
[154,152,169,0,178,179,151,153,187,129],
[165,169,136,162,0,216,147,185,174,137],
[179,165,153,161,124,0,138,128,147,124],
[195,166,164,189,193,202,0,190,170,168],
[185,184,143,187,155,212,150,0,167,171],
[180,187,172,153,166,193,170,173,0,145],
[209,196,178,211,203,216,172,169,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,181,170,183,163,183,191,195,158],
[169,0,177,180,183,153,183,163,174,159],
[159,163,0,165,168,163,172,177,167,150],
[170,160,175,0,178,174,183,193,164,171],
[157,157,172,162,0,156,174,173,169,148],
[177,187,177,166,184,0,179,189,192,166],
[157,157,168,157,166,161,0,175,164,158],
[149,177,163,147,167,151,165,0,173,130],
[145,166,173,176,171,148,176,167,0,135],
[182,181,190,169,192,174,182,210,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,176,162,175,169,170,177,169,169],
[156,0,159,162,163,164,143,153,169,168],
[164,181,0,167,154,170,147,171,167,167],
[178,178,173,0,166,175,169,168,173,189],
[165,177,186,174,0,178,173,184,159,179],
[171,176,170,165,162,0,160,165,152,148],
[170,197,193,171,167,180,0,179,169,184],
[163,187,169,172,156,175,161,0,159,188],
[171,171,173,167,181,188,171,181,0,187],
[171,172,173,151,161,192,156,152,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,181,178,170,173,166,162,183,160],
[168,0,200,161,178,194,154,139,169,170],
[159,140,0,163,170,186,164,151,193,166],
[162,179,177,0,172,190,156,167,167,161],
[170,162,170,168,0,176,159,178,183,152],
[167,146,154,150,164,0,137,157,164,146],
[174,186,176,184,181,203,0,203,170,164],
[178,201,189,173,162,183,137,0,182,165],
[157,171,147,173,157,176,170,158,0,153],
[180,170,174,179,188,194,176,175,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,140,155,147,165,157,141,151,144],
[184,0,183,163,166,161,185,148,154,157],
[200,157,0,161,171,168,173,155,162,166],
[185,177,179,0,151,176,183,174,175,152],
[193,174,169,189,0,179,184,180,164,150],
[175,179,172,164,161,0,164,177,159,173],
[183,155,167,157,156,176,0,172,161,156],
[199,192,185,166,160,163,168,0,177,169],
[189,186,178,165,176,181,179,163,0,161],
[196,183,174,188,190,167,184,171,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,168,167,156,159,164,172,157,176],
[183,0,181,192,197,181,184,168,178,189],
[172,159,0,173,158,148,183,155,152,169],
[173,148,167,0,167,167,169,158,174,159],
[184,143,182,173,0,174,172,167,169,172],
[181,159,192,173,166,0,174,179,169,171],
[176,156,157,171,168,166,0,175,153,165],
[168,172,185,182,173,161,165,0,161,149],
[183,162,188,166,171,171,187,179,0,179],
[164,151,171,181,168,169,175,191,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,159,147,163,172,169,157,170,155],
[182,0,157,162,182,164,180,175,178,175],
[181,183,0,164,170,174,174,178,170,179],
[193,178,176,0,183,183,190,186,182,162],
[177,158,170,157,0,171,179,178,173,160],
[168,176,166,157,169,0,169,178,170,161],
[171,160,166,150,161,171,0,169,170,165],
[183,165,162,154,162,162,171,0,166,157],
[170,162,170,158,167,170,170,174,0,167],
[185,165,161,178,180,179,175,183,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,154,155,157,157,154,149,166,162],
[189,0,178,175,184,179,163,166,174,184],
[186,162,0,174,175,175,161,164,173,169],
[185,165,166,0,167,175,165,155,165,169],
[183,156,165,173,0,180,150,159,170,179],
[183,161,165,165,160,0,159,156,178,174],
[186,177,179,175,190,181,0,170,180,189],
[191,174,176,185,181,184,170,0,193,181],
[174,166,167,175,170,162,160,147,0,162],
[178,156,171,171,161,166,151,159,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,183,197,180,177,177,207,170,204],
[168,0,172,180,166,160,172,209,166,179],
[157,168,0,197,166,155,168,204,165,174],
[143,160,143,0,144,147,159,178,122,150],
[160,174,174,196,0,165,177,212,134,178],
[163,180,185,193,175,0,177,207,166,207],
[163,168,172,181,163,163,0,203,155,164],
[133,131,136,162,128,133,137,0,126,142],
[170,174,175,218,206,174,185,214,0,168],
[136,161,166,190,162,133,176,198,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,171,170,154,163,183,164,191,172],
[152,0,170,154,156,139,173,171,176,156],
[169,170,0,147,162,156,169,169,177,159],
[170,186,193,0,191,173,201,197,188,166],
[186,184,178,149,0,163,170,186,182,160],
[177,201,184,167,177,0,194,194,171,156],
[157,167,171,139,170,146,0,172,182,162],
[176,169,171,143,154,146,168,0,181,166],
[149,164,163,152,158,169,158,159,0,153],
[168,184,181,174,180,184,178,174,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,189,180,147,170,159,189,194,179],
[164,0,188,171,164,169,166,179,196,161],
[151,152,0,176,162,173,166,170,171,165],
[160,169,164,0,157,172,171,179,192,181],
[193,176,178,183,0,182,167,199,197,199],
[170,171,167,168,158,0,160,186,194,184],
[181,174,174,169,173,180,0,195,206,171],
[151,161,170,161,141,154,145,0,178,146],
[146,144,169,148,143,146,134,162,0,154],
[161,179,175,159,141,156,169,194,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,179,157,136,161,157,153,162,141],
[182,0,171,183,157,182,177,169,181,169],
[161,169,0,170,175,191,182,168,188,161],
[183,157,170,0,154,183,171,156,176,147],
[204,183,165,186,0,181,170,171,189,186],
[179,158,149,157,159,0,165,165,171,174],
[183,163,158,169,170,175,0,153,173,167],
[187,171,172,184,169,175,187,0,200,175],
[178,159,152,164,151,169,167,140,0,152],
[199,171,179,193,154,166,173,165,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,161,164,159,159,166,143,163,161],
[188,0,173,171,187,170,195,167,174,177],
[179,167,0,175,181,176,187,173,174,180],
[176,169,165,0,176,162,190,161,170,167],
[181,153,159,164,0,167,172,145,175,162],
[181,170,164,178,173,0,174,158,179,168],
[174,145,153,150,168,166,0,144,171,159],
[197,173,167,179,195,182,196,0,186,169],
[177,166,166,170,165,161,169,154,0,168],
[179,163,160,173,178,172,181,171,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,167,172,162,167,157,165,180,180],
[175,0,166,164,164,171,171,162,166,194],
[173,174,0,160,164,169,172,146,174,180],
[168,176,180,0,155,172,156,144,169,196],
[178,176,176,185,0,173,151,158,161,180],
[173,169,171,168,167,0,160,157,166,187],
[183,169,168,184,189,180,0,192,168,203],
[175,178,194,196,182,183,148,0,182,198],
[160,174,166,171,179,174,172,158,0,182],
[160,146,160,144,160,153,137,142,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,153,177,168,185,153,157,168,178],
[156,0,139,189,167,186,157,162,162,162],
[187,201,0,187,211,194,178,157,184,190],
[163,151,153,0,175,170,158,144,158,155],
[172,173,129,165,0,182,152,150,154,143],
[155,154,146,170,158,0,139,131,148,144],
[187,183,162,182,188,201,0,183,180,197],
[183,178,183,196,190,209,157,0,186,194],
[172,178,156,182,186,192,160,154,0,176],
[162,178,150,185,197,196,143,146,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,189,213,254,203,218,213,191,168],
[137,0,190,160,209,164,176,210,169,140],
[151,150,0,177,228,173,182,192,150,152],
[127,180,163,0,198,166,173,183,115,155],
[86,131,112,142,0,149,136,157,121,119],
[137,176,167,174,191,0,144,173,136,157],
[122,164,158,167,204,196,0,174,130,153],
[127,130,148,157,183,167,166,0,144,157],
[149,171,190,225,219,204,210,196,0,176],
[172,200,188,185,221,183,187,183,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,149,184,179,178,177,163,190,174],
[159,0,161,173,170,171,175,165,184,168],
[191,179,0,172,183,171,169,166,182,173],
[156,167,168,0,176,161,167,164,173,167],
[161,170,157,164,0,151,165,155,174,164],
[162,169,169,179,189,0,171,163,193,172],
[163,165,171,173,175,169,0,162,182,186],
[177,175,174,176,185,177,178,0,193,170],
[150,156,158,167,166,147,158,147,0,162],
[166,172,167,173,176,168,154,170,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,165,164,169,164,173,180,189,173],
[168,0,179,180,169,165,178,158,177,171],
[175,161,0,168,164,150,182,149,168,158],
[176,160,172,0,174,168,174,158,169,160],
[171,171,176,166,0,162,187,161,177,168],
[176,175,190,172,178,0,188,162,171,162],
[167,162,158,166,153,152,0,151,175,154],
[160,182,191,182,179,178,189,0,198,150],
[151,163,172,171,163,169,165,142,0,152],
[167,169,182,180,172,178,186,190,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,178,176,192,174,161,172,171,177],
[171,0,173,166,179,163,161,174,148,164],
[162,167,0,164,150,159,163,166,161,154],
[164,174,176,0,179,157,175,162,142,153],
[148,161,190,161,0,163,148,173,154,152],
[166,177,181,183,177,0,178,174,160,165],
[179,179,177,165,192,162,0,179,169,181],
[168,166,174,178,167,166,161,0,166,163],
[169,192,179,198,186,180,171,174,0,192],
[163,176,186,187,188,175,159,177,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,0,170,340,0,170,170,170,170],
[340,0,340,340,340,340,340,170,170,170],
[340,0,0,170,340,0,170,170,170,170],
[170,0,170,0,170,0,0,170,170,170],
[0,0,0,170,0,0,0,170,0,0],
[340,0,340,340,340,0,170,170,170,170],
[170,0,170,340,340,170,0,170,170,170],
[170,170,170,170,170,170,170,0,170,170],
[170,170,170,170,340,170,170,170,0,340],
[170,170,170,170,340,170,170,170,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,174,165,155,176,145,183,185,167],
[152,0,155,158,149,150,150,154,148,154],
[166,185,0,185,189,159,146,177,184,169],
[175,182,155,0,161,152,126,175,170,162],
[185,191,151,179,0,174,146,194,185,174],
[164,190,181,188,166,0,170,194,186,176],
[195,190,194,214,194,170,0,186,196,192],
[157,186,163,165,146,146,154,0,166,168],
[155,192,156,170,155,154,144,174,0,153],
[173,186,171,178,166,164,148,172,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,158,169,182,161,178,180,167,157],
[165,0,153,179,180,156,175,185,152,160],
[182,187,0,192,183,170,180,191,178,183],
[171,161,148,0,157,153,167,154,151,151],
[158,160,157,183,0,152,157,171,160,152],
[179,184,170,187,188,0,176,186,158,163],
[162,165,160,173,183,164,0,186,150,179],
[160,155,149,186,169,154,154,0,152,157],
[173,188,162,189,180,182,190,188,0,186],
[183,180,157,189,188,177,161,183,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,151,177,144,178,181,154,157,171],
[177,0,169,196,176,171,174,164,177,176],
[189,171,0,186,151,179,178,156,172,181],
[163,144,154,0,158,164,179,148,139,187],
[196,164,189,182,0,196,177,176,178,192],
[162,169,161,176,144,0,160,129,162,172],
[159,166,162,161,163,180,0,160,147,172],
[186,176,184,192,164,211,180,0,187,209],
[183,163,168,201,162,178,193,153,0,185],
[169,164,159,153,148,168,168,131,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,151,170,147,165,159,156,159,156],
[181,0,165,172,159,168,165,169,160,169],
[189,175,0,177,177,181,185,159,171,176],
[170,168,163,0,153,161,155,156,157,171],
[193,181,163,187,0,183,170,181,162,189],
[175,172,159,179,157,0,169,157,153,164],
[181,175,155,185,170,171,0,175,171,165],
[184,171,181,184,159,183,165,0,160,181],
[181,180,169,183,178,187,169,180,0,182],
[184,171,164,169,151,176,175,159,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,170,179,193,178,192,183,164,185],
[145,0,164,177,182,162,179,176,165,176],
[170,176,0,175,185,170,181,192,170,175],
[161,163,165,0,165,178,173,171,149,176],
[147,158,155,175,0,164,174,168,153,173],
[162,178,170,162,176,0,175,165,163,182],
[148,161,159,167,166,165,0,160,158,181],
[157,164,148,169,172,175,180,0,151,173],
[176,175,170,191,187,177,182,189,0,191],
[155,164,165,164,167,158,159,167,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,180,153,159,144,170,181,169,175],
[180,0,186,184,159,183,155,189,163,187],
[160,154,0,163,176,168,159,173,190,206],
[187,156,177,0,165,164,161,185,191,189],
[181,181,164,175,0,162,168,205,163,198],
[196,157,172,176,178,0,194,207,182,197],
[170,185,181,179,172,146,0,185,175,175],
[159,151,167,155,135,133,155,0,163,166],
[171,177,150,149,177,158,165,177,0,191],
[165,153,134,151,142,143,165,174,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,162,164,148,155,159,163,143,155],
[188,0,176,169,161,179,167,169,158,162],
[178,164,0,170,167,163,177,177,167,171],
[176,171,170,0,161,159,173,177,172,170],
[192,179,173,179,0,173,181,173,169,170],
[185,161,177,181,167,0,183,182,184,176],
[181,173,163,167,159,157,0,162,157,163],
[177,171,163,163,167,158,178,0,181,172],
[197,182,173,168,171,156,183,159,0,178],
[185,178,169,170,170,164,177,168,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,164,168,164,171,167,163,163,157],
[165,0,171,168,172,186,162,166,162,152],
[176,169,0,175,171,192,171,175,180,163],
[172,172,165,0,158,188,156,157,168,152],
[176,168,169,182,0,171,172,162,159,156],
[169,154,148,152,169,0,160,156,150,152],
[173,178,169,184,168,180,0,172,157,172],
[177,174,165,183,178,184,168,0,166,160],
[177,178,160,172,181,190,183,174,0,156],
[183,188,177,188,184,188,168,180,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,150,171,176,151,181,185,176,178],
[166,0,170,172,187,176,181,164,168,170],
[190,170,0,174,176,144,184,180,194,159],
[169,168,166,0,177,156,179,181,174,175],
[164,153,164,163,0,143,167,167,178,165],
[189,164,196,184,197,0,168,169,182,167],
[159,159,156,161,173,172,0,171,186,165],
[155,176,160,159,173,171,169,0,180,186],
[164,172,146,166,162,158,154,160,0,170],
[162,170,181,165,175,173,175,154,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,96,155,114,97,166,105,190,155],
[183,0,135,206,129,172,205,152,203,167],
[244,205,0,217,197,191,182,150,243,203],
[185,134,123,0,172,122,157,132,205,166],
[226,211,143,168,0,183,206,129,229,190],
[243,168,149,218,157,0,170,148,216,159],
[174,135,158,183,134,170,0,157,196,143],
[235,188,190,208,211,192,183,0,237,169],
[150,137,97,135,111,124,144,103,0,145],
[185,173,137,174,150,181,197,171,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,121,161,99,139,137,141,120,118],
[161,0,161,122,119,180,162,163,182,181],
[219,179,0,137,116,177,136,180,159,139],
[179,218,203,0,139,180,139,143,161,159],
[241,221,224,201,0,240,240,200,222,160],
[201,160,163,160,100,0,198,182,182,99],
[203,178,204,201,100,142,0,164,143,159],
[199,177,160,197,140,158,176,0,122,137],
[220,158,181,179,118,158,197,218,0,158],
[222,159,201,181,180,241,181,203,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,186,165,184,186,202,174,186,188],
[146,0,160,170,138,154,162,156,153,149],
[154,180,0,147,151,171,178,147,159,171],
[175,170,193,0,157,181,179,173,164,157],
[156,202,189,183,0,185,181,185,177,169],
[154,186,169,159,155,0,169,155,147,161],
[138,178,162,161,159,171,0,160,164,153],
[166,184,193,167,155,185,180,0,159,179],
[154,187,181,176,163,193,176,181,0,179],
[152,191,169,183,171,179,187,161,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,168,170,171,164,183,171,160,158],
[176,0,161,169,168,172,174,168,173,164],
[172,179,0,166,178,169,177,181,169,161],
[170,171,174,0,161,172,171,164,171,163],
[169,172,162,179,0,171,181,178,184,179],
[176,168,171,168,169,0,169,172,155,175],
[157,166,163,169,159,171,0,177,163,166],
[169,172,159,176,162,168,163,0,163,157],
[180,167,171,169,156,185,177,177,0,169],
[182,176,179,177,161,165,174,183,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,138,150,143,150,153,158,146],
[176,0,163,160,162,156,167,143,155,159],
[170,177,0,142,155,163,169,136,156,148],
[202,180,198,0,184,162,185,181,179,171],
[190,178,185,156,0,168,175,165,167,157],
[197,184,177,178,172,0,158,170,169,154],
[190,173,171,155,165,182,0,165,162,163],
[187,197,204,159,175,170,175,0,178,157],
[182,185,184,161,173,171,178,162,0,164],
[194,181,192,169,183,186,177,183,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,180,206,162,192,175,198,158,228],
[152,0,112,134,138,161,152,144,137,170],
[160,228,0,189,160,211,173,192,160,223],
[134,206,151,0,109,157,205,176,174,196],
[178,202,180,231,0,158,164,187,212,195],
[148,179,129,183,182,0,169,181,174,206],
[165,188,167,135,176,171,0,194,199,184],
[142,196,148,164,153,159,146,0,168,198],
[182,203,180,166,128,166,141,172,0,190],
[112,170,117,144,145,134,156,142,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,147,168,167,173,160,178,157,172],
[177,0,161,172,152,177,166,184,166,184],
[193,179,0,171,170,199,178,190,184,190],
[172,168,169,0,171,189,181,184,174,167],
[173,188,170,169,0,182,170,187,180,180],
[167,163,141,151,158,0,147,163,159,168],
[180,174,162,159,170,193,0,186,188,161],
[162,156,150,156,153,177,154,0,179,160],
[183,174,156,166,160,181,152,161,0,174],
[168,156,150,173,160,172,179,180,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,169,155,154,169,146,164,162,139],
[190,0,189,152,163,177,164,177,171,150],
[171,151,0,155,157,178,172,161,160,151],
[185,188,185,0,176,198,182,181,174,155],
[186,177,183,164,0,180,169,191,183,161],
[171,163,162,142,160,0,144,172,152,151],
[194,176,168,158,171,196,0,191,182,171],
[176,163,179,159,149,168,149,0,182,150],
[178,169,180,166,157,188,158,158,0,154],
[201,190,189,185,179,189,169,190,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,180,148,192,164,183,180,154,162],
[157,0,183,135,202,163,179,208,152,145],
[160,157,0,172,194,168,176,176,148,142],
[192,205,168,0,198,182,176,206,174,183],
[148,138,146,142,0,135,156,158,154,145],
[176,177,172,158,205,0,188,199,177,148],
[157,161,164,164,184,152,0,190,155,183],
[160,132,164,134,182,141,150,0,149,155],
[186,188,192,166,186,163,185,191,0,188],
[178,195,198,157,195,192,157,185,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,169,182,187,191,186,177,173,163],
[168,0,169,191,181,186,178,182,157,168],
[171,171,0,184,173,179,174,167,152,155],
[158,149,156,0,169,176,174,167,161,138],
[153,159,167,171,0,166,153,165,146,147],
[149,154,161,164,174,0,163,168,142,150],
[154,162,166,166,187,177,0,172,148,156],
[163,158,173,173,175,172,168,0,156,166],
[167,183,188,179,194,198,192,184,0,179],
[177,172,185,202,193,190,184,174,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,193,186,192,157,161,167,166,156],
[179,0,192,192,223,187,158,176,170,158],
[147,148,0,163,177,123,136,127,132,120],
[154,148,177,0,167,148,156,145,161,134],
[148,117,163,173,0,158,162,133,133,138],
[183,153,217,192,182,0,174,183,173,166],
[179,182,204,184,178,166,0,148,166,150],
[173,164,213,195,207,157,192,0,157,165],
[174,170,208,179,207,167,174,183,0,179],
[184,182,220,206,202,174,190,175,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,166,158,145,160,155,154,154,158],
[195,0,175,183,160,179,167,174,173,182],
[174,165,0,166,170,178,161,163,156,177],
[182,157,174,0,166,170,158,160,168,170],
[195,180,170,174,0,189,173,171,174,169],
[180,161,162,170,151,0,160,154,156,165],
[185,173,179,182,167,180,0,172,175,177],
[186,166,177,180,169,186,168,0,175,183],
[186,167,184,172,166,184,165,165,0,189],
[182,158,163,170,171,175,163,157,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,160,192,188,190,206,178,201,177],
[159,0,186,187,195,160,188,175,223,171],
[180,154,0,178,202,169,211,181,196,186],
[148,153,162,0,170,158,176,155,194,155],
[152,145,138,170,0,146,180,164,186,172],
[150,180,171,182,194,0,170,167,193,178],
[134,152,129,164,160,170,0,150,209,166],
[162,165,159,185,176,173,190,0,209,196],
[139,117,144,146,154,147,131,131,0,158],
[163,169,154,185,168,162,174,144,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,175,160,163,168,165,171,172,158],
[186,0,182,166,160,180,179,175,185,169],
[165,158,0,160,152,173,160,176,173,161],
[180,174,180,0,167,176,162,182,180,167],
[177,180,188,173,0,181,164,177,186,173],
[172,160,167,164,159,0,156,164,187,171],
[175,161,180,178,176,184,0,177,191,167],
[169,165,164,158,163,176,163,0,168,161],
[168,155,167,160,154,153,149,172,0,154],
[182,171,179,173,167,169,173,179,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,145,167,146,165,151,145,150,151],
[187,0,174,190,163,184,179,164,171,165],
[195,166,0,170,164,172,173,167,166,168],
[173,150,170,0,160,170,169,170,155,162],
[194,177,176,180,0,173,171,164,160,163],
[175,156,168,170,167,0,167,167,151,163],
[189,161,167,171,169,173,0,160,151,165],
[195,176,173,170,176,173,180,0,170,168],
[190,169,174,185,180,189,189,170,0,173],
[189,175,172,178,177,177,175,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,156,145,171,176,184,189,182,171],
[165,0,170,149,160,163,185,136,149,166],
[184,170,0,161,177,177,190,177,162,171],
[195,191,179,0,172,198,203,167,176,184],
[169,180,163,168,0,174,190,176,164,182],
[164,177,163,142,166,0,170,165,161,177],
[156,155,150,137,150,170,0,162,152,174],
[151,204,163,173,164,175,178,0,171,183],
[158,191,178,164,176,179,188,169,0,173],
[169,174,169,156,158,163,166,157,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,166,174,166,175,153,155,186,167],
[197,0,176,176,185,184,171,169,186,175],
[174,164,0,173,162,150,142,150,172,161],
[166,164,167,0,166,170,157,165,178,165],
[174,155,178,174,0,168,158,167,163,169],
[165,156,190,170,172,0,156,179,180,174],
[187,169,198,183,182,184,0,174,191,188],
[185,171,190,175,173,161,166,0,175,175],
[154,154,168,162,177,160,149,165,0,166],
[173,165,179,175,171,166,152,165,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,171,166,167,173,150,188,158],
[170,0,177,172,194,205,195,172,196,186],
[169,163,0,181,179,180,173,159,180,166],
[169,168,159,0,155,171,172,153,162,156],
[174,146,161,185,0,161,172,164,183,155],
[173,135,160,169,179,0,190,159,144,163],
[167,145,167,168,168,150,0,155,169,172],
[190,168,181,187,176,181,185,0,184,181],
[152,144,160,178,157,196,171,156,0,168],
[182,154,174,184,185,177,168,159,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,156,173,169,170,169,177,173,149],
[192,0,178,165,171,182,171,183,173,175],
[184,162,0,188,176,193,172,176,188,182],
[167,175,152,0,182,183,174,176,186,168],
[171,169,164,158,0,172,170,179,183,167],
[170,158,147,157,168,0,173,157,166,158],
[171,169,168,166,170,167,0,180,181,157],
[163,157,164,164,161,183,160,0,158,163],
[167,167,152,154,157,174,159,182,0,156],
[191,165,158,172,173,182,183,177,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,170,163,180,200,157,166,161,168],
[171,0,168,183,177,178,157,159,175,178],
[170,172,0,168,182,179,167,165,160,174],
[177,157,172,0,174,173,177,162,190,176],
[160,163,158,166,0,162,168,148,164,176],
[140,162,161,167,178,0,153,172,175,182],
[183,183,173,163,172,187,0,166,180,179],
[174,181,175,178,192,168,174,0,190,171],
[179,165,180,150,176,165,160,150,0,171],
[172,162,166,164,164,158,161,169,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,164,195,164,159,186,194,165,182],
[161,0,153,179,139,167,156,192,163,181],
[176,187,0,212,177,190,169,193,160,170],
[145,161,128,0,142,161,157,150,152,159],
[176,201,163,198,0,213,192,208,187,182],
[181,173,150,179,127,0,168,172,145,160],
[154,184,171,183,148,172,0,191,148,166],
[146,148,147,190,132,168,149,0,146,137],
[175,177,180,188,153,195,192,194,0,183],
[158,159,170,181,158,180,174,203,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,183,180,182,183,169,183,174,182],
[173,0,168,168,167,173,158,171,166,181],
[157,172,0,180,179,173,177,166,163,180],
[160,172,160,0,181,174,175,183,168,170],
[158,173,161,159,0,171,152,168,153,174],
[157,167,167,166,169,0,161,171,166,169],
[171,182,163,165,188,179,0,173,175,169],
[157,169,174,157,172,169,167,0,170,161],
[166,174,177,172,187,174,165,170,0,179],
[158,159,160,170,166,171,171,179,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,149,138,114,117,129,126,110,121],
[239,0,199,222,176,159,166,215,178,197],
[191,141,0,111,127,120,132,190,157,168],
[202,118,229,0,134,137,108,196,140,129],
[226,164,213,206,0,192,154,194,194,145],
[223,181,220,203,148,0,202,207,160,169],
[211,174,208,232,186,138,0,159,180,189],
[214,125,150,144,146,133,181,0,167,150],
[230,162,183,200,146,180,160,173,0,209],
[219,143,172,211,195,171,151,190,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,169,164,168,174,166,151,180,163],
[186,0,176,185,183,195,180,148,190,165],
[171,164,0,174,179,178,161,142,164,182],
[176,155,166,0,186,174,169,156,170,164],
[172,157,161,154,0,178,151,149,166,172],
[166,145,162,166,162,0,151,144,159,143],
[174,160,179,171,189,189,0,171,189,178],
[189,192,198,184,191,196,169,0,195,179],
[160,150,176,170,174,181,151,145,0,160],
[177,175,158,176,168,197,162,161,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,159,151,162,174,156,154,160,158],
[179,0,171,159,166,179,150,182,167,159],
[181,169,0,167,180,197,190,196,187,174],
[189,181,173,0,149,185,158,157,161,155],
[178,174,160,191,0,169,168,179,159,171],
[166,161,143,155,171,0,160,154,169,158],
[184,190,150,182,172,180,0,169,181,173],
[186,158,144,183,161,186,171,0,174,166],
[180,173,153,179,181,171,159,166,0,163],
[182,181,166,185,169,182,167,174,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,181,170,164,173,176,187,164,150],
[175,0,183,176,145,153,168,177,165,160],
[159,157,0,168,144,157,150,164,120,152],
[170,164,172,0,148,161,165,178,148,153],
[176,195,196,192,0,187,170,197,166,174],
[167,187,183,179,153,0,179,191,153,159],
[164,172,190,175,170,161,0,179,161,155],
[153,163,176,162,143,149,161,0,140,143],
[176,175,220,192,174,187,179,200,0,165],
[190,180,188,187,166,181,185,197,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,167,173,203,179,160,163,183,168],
[169,0,170,138,186,158,156,156,173,170],
[173,170,0,173,211,178,164,165,179,176],
[167,202,167,0,192,171,178,179,175,183],
[137,154,129,148,0,151,145,143,162,147],
[161,182,162,169,189,0,160,158,166,171],
[180,184,176,162,195,180,0,169,184,161],
[177,184,175,161,197,182,171,0,179,163],
[157,167,161,165,178,174,156,161,0,159],
[172,170,164,157,193,169,179,177,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,163,153,177,173,188,170,160,162],
[171,0,181,181,169,173,179,167,166,165],
[177,159,0,180,180,166,193,166,175,156],
[187,159,160,0,163,168,164,171,154,160],
[163,171,160,177,0,169,183,162,148,171],
[167,167,174,172,171,0,151,169,156,160],
[152,161,147,176,157,189,0,163,152,157],
[170,173,174,169,178,171,177,0,162,163],
[180,174,165,186,192,184,188,178,0,190],
[178,175,184,180,169,180,183,177,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,168,178,159,179,165,170,162,171],
[177,0,177,186,168,181,175,176,185,182],
[172,163,0,162,158,179,171,171,187,172],
[162,154,178,0,160,163,162,161,167,165],
[181,172,182,180,0,177,162,177,184,186],
[161,159,161,177,163,0,166,158,181,160],
[175,165,169,178,178,174,0,168,171,182],
[170,164,169,179,163,182,172,0,183,182],
[178,155,153,173,156,159,169,157,0,175],
[169,158,168,175,154,180,158,158,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,164,174,172,164,173,167,168,151],
[161,0,146,152,158,153,158,156,142,142],
[176,194,0,171,179,174,169,164,173,157],
[166,188,169,0,173,170,164,165,175,151],
[168,182,161,167,0,158,143,150,152,153],
[176,187,166,170,182,0,177,163,161,149],
[167,182,171,176,197,163,0,176,178,175],
[173,184,176,175,190,177,164,0,175,163],
[172,198,167,165,188,179,162,165,0,175],
[189,198,183,189,187,191,165,177,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,161,166,178,163,163,159,155,170],
[178,0,161,174,191,176,173,161,175,169],
[179,179,0,167,192,165,165,171,174,174],
[174,166,173,0,180,172,177,166,170,183],
[162,149,148,160,0,168,145,145,160,154],
[177,164,175,168,172,0,167,170,165,168],
[177,167,175,163,195,173,0,161,164,173],
[181,179,169,174,195,170,179,0,177,190],
[185,165,166,170,180,175,176,163,0,178],
[170,171,166,157,186,172,167,150,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,189,177,176,170,177,190,167,171],
[168,0,168,172,153,167,166,170,156,163],
[151,172,0,172,153,157,164,167,144,155],
[163,168,168,0,163,159,169,170,161,165],
[164,187,187,177,0,171,167,179,180,182],
[170,173,183,181,169,0,167,184,163,171],
[163,174,176,171,173,173,0,179,165,170],
[150,170,173,170,161,156,161,0,149,167],
[173,184,196,179,160,177,175,191,0,173],
[169,177,185,175,158,169,170,173,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,189,177,167,173,163,188,170,167],
[155,0,171,156,162,169,139,179,167,169],
[151,169,0,149,152,174,156,183,160,167],
[163,184,191,0,135,175,165,184,182,186],
[173,178,188,205,0,194,164,200,186,194],
[167,171,166,165,146,0,156,183,172,186],
[177,201,184,175,176,184,0,204,169,181],
[152,161,157,156,140,157,136,0,166,161],
[170,173,180,158,154,168,171,174,0,199],
[173,171,173,154,146,154,159,179,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,162,181,157,169,194,162,187,198],
[161,0,140,157,164,166,173,139,172,163],
[178,200,0,183,183,184,204,152,188,180],
[159,183,157,0,178,177,183,175,170,182],
[183,176,157,162,0,172,221,174,184,182],
[171,174,156,163,168,0,190,167,189,183],
[146,167,136,157,119,150,0,130,144,139],
[178,201,188,165,166,173,210,0,195,184],
[153,168,152,170,156,151,196,145,0,155],
[142,177,160,158,158,157,201,156,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,173,193,177,189,189,195,165,190],
[148,0,161,177,171,181,172,169,165,189],
[167,179,0,169,169,161,172,154,151,169],
[147,163,171,0,155,172,163,150,132,187],
[163,169,171,185,0,178,177,161,187,181],
[151,159,179,168,162,0,164,143,146,191],
[151,168,168,177,163,176,0,163,157,178],
[145,171,186,190,179,197,177,0,182,192],
[175,175,189,208,153,194,183,158,0,176],
[150,151,171,153,159,149,162,148,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,155,160,157,163,160,166,146,159],
[185,0,161,167,182,168,175,165,174,171],
[185,179,0,176,181,170,169,171,176,197],
[180,173,164,0,168,163,162,163,176,190],
[183,158,159,172,0,151,161,159,175,168],
[177,172,170,177,189,0,175,169,169,178],
[180,165,171,178,179,165,0,185,186,195],
[174,175,169,177,181,171,155,0,165,180],
[194,166,164,164,165,171,154,175,0,191],
[181,169,143,150,172,162,145,160,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,180,164,175,173,162,164,182,175],
[182,0,188,173,178,173,169,167,202,161],
[160,152,0,162,174,150,160,172,166,166],
[176,167,178,0,158,159,174,178,182,175],
[165,162,166,182,0,168,174,174,186,159],
[167,167,190,181,172,0,179,193,179,170],
[178,171,180,166,166,161,0,176,175,173],
[176,173,168,162,166,147,164,0,177,161],
[158,138,174,158,154,161,165,163,0,161],
[165,179,174,165,181,170,167,179,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,183,170,192,175,179,201,170,173],
[162,0,181,172,175,174,190,174,177,191],
[157,159,0,151,174,180,158,176,161,148],
[170,168,189,0,172,167,154,161,162,168],
[148,165,166,168,0,185,176,184,166,164],
[165,166,160,173,155,0,152,180,164,166],
[161,150,182,186,164,188,0,172,181,177],
[139,166,164,179,156,160,168,0,167,177],
[170,163,179,178,174,176,159,173,0,172],
[167,149,192,172,176,174,163,163,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,151,168,189,166,186,160,186,180],
[166,0,154,175,176,188,192,167,194,176],
[189,186,0,190,164,175,195,199,198,188],
[172,165,150,0,163,163,197,170,182,183],
[151,164,176,177,0,165,175,170,165,176],
[174,152,165,177,175,0,188,174,178,163],
[154,148,145,143,165,152,0,158,171,166],
[180,173,141,170,170,166,182,0,189,160],
[154,146,142,158,175,162,169,151,0,171],
[160,164,152,157,164,177,174,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,160,166,160,145,168,167,153,161],
[179,0,171,166,164,168,170,167,158,157],
[180,169,0,172,148,173,180,163,179,177],
[174,174,168,0,162,163,165,161,157,164],
[180,176,192,178,0,187,178,168,178,175],
[195,172,167,177,153,0,162,166,178,155],
[172,170,160,175,162,178,0,175,186,163],
[173,173,177,179,172,174,165,0,174,153],
[187,182,161,183,162,162,154,166,0,158],
[179,183,163,176,165,185,177,187,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,187,188,176,177,174,168,185,161],
[178,0,201,192,168,175,175,210,179,178],
[153,139,0,154,153,176,165,188,162,151],
[152,148,186,0,141,154,156,172,150,134],
[164,172,187,199,0,160,187,183,193,161],
[163,165,164,186,180,0,169,186,186,149],
[166,165,175,184,153,171,0,175,181,158],
[172,130,152,168,157,154,165,0,166,144],
[155,161,178,190,147,154,159,174,0,154],
[179,162,189,206,179,191,182,196,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,166,148,165,177,161,158,164],
[159,0,162,156,166,172,177,176,147,189],
[172,178,0,169,187,165,185,170,162,167],
[174,184,171,0,179,207,222,186,168,194],
[192,174,153,161,0,184,194,182,177,166],
[175,168,175,133,156,0,202,206,160,157],
[163,163,155,118,146,138,0,183,149,153],
[179,164,170,154,158,134,157,0,130,143],
[182,193,178,172,163,180,191,210,0,195],
[176,151,173,146,174,183,187,197,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,174,179,150,154,171,165,167,199],
[159,0,172,164,164,157,164,171,173,188],
[166,168,0,170,158,173,184,175,179,189],
[161,176,170,0,162,157,169,164,175,192],
[190,176,182,178,0,177,178,173,165,206],
[186,183,167,183,163,0,184,174,176,215],
[169,176,156,171,162,156,0,176,173,197],
[175,169,165,176,167,166,164,0,170,206],
[173,167,161,165,175,164,167,170,0,189],
[141,152,151,148,134,125,143,134,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,159,183,168,181,166,161,161,158],
[176,0,173,172,159,170,173,166,184,161],
[181,167,0,183,169,188,179,189,177,176],
[157,168,157,0,149,167,161,166,168,167],
[172,181,171,191,0,173,168,171,178,165],
[159,170,152,173,167,0,150,160,172,168],
[174,167,161,179,172,190,0,179,175,177],
[179,174,151,174,169,180,161,0,177,166],
[179,156,163,172,162,168,165,163,0,160],
[182,179,164,173,175,172,163,174,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,177,177,171,160,160,157,163,195],
[178,0,170,184,178,167,180,177,176,190],
[163,170,0,189,170,149,189,176,178,185],
[163,156,151,0,137,136,160,160,150,165],
[169,162,170,203,0,158,169,164,162,187],
[180,173,191,204,182,0,186,170,189,205],
[180,160,151,180,171,154,0,164,179,183],
[183,163,164,180,176,170,176,0,172,185],
[177,164,162,190,178,151,161,168,0,181],
[145,150,155,175,153,135,157,155,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,165,176,166,171,176,187,171,171],
[179,0,176,182,170,180,179,188,182,193],
[175,164,0,185,169,180,180,183,171,179],
[164,158,155,0,163,166,177,174,177,175],
[174,170,171,177,0,168,170,165,168,169],
[169,160,160,174,172,0,174,172,164,174],
[164,161,160,163,170,166,0,172,167,169],
[153,152,157,166,175,168,168,0,170,167],
[169,158,169,163,172,176,173,170,0,173],
[169,147,161,165,171,166,171,173,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,158,175,186,183,166,158,159,164],
[165,0,165,173,186,189,199,158,173,164],
[182,175,0,185,189,187,171,173,161,169],
[165,167,155,0,187,174,165,147,158,161],
[154,154,151,153,0,158,168,139,165,153],
[157,151,153,166,182,0,182,166,152,165],
[174,141,169,175,172,158,0,149,168,164],
[182,182,167,193,201,174,191,0,184,160],
[181,167,179,182,175,188,172,156,0,176],
[176,176,171,179,187,175,176,180,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,180,177,185,171,177,165,194,223],
[161,0,136,154,186,184,153,151,192,158],
[160,204,0,185,200,186,170,185,178,209],
[163,186,155,0,194,194,186,189,186,211],
[155,154,140,146,0,158,159,149,175,152],
[169,156,154,146,182,0,153,160,181,178],
[163,187,170,154,181,187,0,164,170,173],
[175,189,155,151,191,180,176,0,195,180],
[146,148,162,154,165,159,170,145,0,182],
[117,182,131,129,188,162,167,160,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,137,201,120,179,180,175,160,177],
[216,0,136,185,184,172,177,204,164,173],
[203,204,0,220,193,153,191,164,177,197],
[139,155,120,0,141,161,145,173,168,172],
[220,156,147,199,0,175,173,213,172,172],
[161,168,187,179,165,0,170,162,151,187],
[160,163,149,195,167,170,0,170,178,185],
[165,136,176,167,127,178,170,0,135,209],
[180,176,163,172,168,189,162,205,0,202],
[163,167,143,168,168,153,155,131,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,174,190,166,169,174,176,175,182],
[172,0,169,195,196,171,186,176,177,177],
[166,171,0,165,164,159,170,175,160,165],
[150,145,175,0,177,161,182,165,172,175],
[174,144,176,163,0,173,180,167,171,170],
[171,169,181,179,167,0,168,175,164,160],
[166,154,170,158,160,172,0,174,156,165],
[164,164,165,175,173,165,166,0,154,170],
[165,163,180,168,169,176,184,186,0,174],
[158,163,175,165,170,180,175,170,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,164,159,177,180,174,153,159,162],
[166,0,180,165,183,190,176,149,179,175],
[176,160,0,163,168,180,155,144,155,159],
[181,175,177,0,173,168,169,159,174,154],
[163,157,172,167,0,170,162,149,149,158],
[160,150,160,172,170,0,152,155,151,159],
[166,164,185,171,178,188,0,157,147,172],
[187,191,196,181,191,185,183,0,181,170],
[181,161,185,166,191,189,193,159,0,166],
[178,165,181,186,182,181,168,170,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,156,158,169,159,173,142,145,148],
[195,0,159,165,190,158,180,170,162,158],
[184,181,0,180,176,164,181,162,180,162],
[182,175,160,0,158,173,169,165,148,168],
[171,150,164,182,0,166,170,155,173,155],
[181,182,176,167,174,0,193,160,173,147],
[167,160,159,171,170,147,0,147,168,155],
[198,170,178,175,185,180,193,0,175,170],
[195,178,160,192,167,167,172,165,0,167],
[192,182,178,172,185,193,185,170,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,153,163,171,148,193,165,136,162],
[164,0,138,160,173,152,167,151,159,146],
[187,202,0,190,169,184,191,181,183,183],
[177,180,150,0,166,164,186,176,170,173],
[169,167,171,174,0,181,186,161,172,185],
[192,188,156,176,159,0,181,177,166,175],
[147,173,149,154,154,159,0,152,153,159],
[175,189,159,164,179,163,188,0,168,172],
[204,181,157,170,168,174,187,172,0,163],
[178,194,157,167,155,165,181,168,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,167,170,167,171,179,181,172,167],
[182,0,176,172,182,169,174,190,162,172],
[173,164,0,181,178,183,198,186,181,184],
[170,168,159,0,167,172,180,178,172,176],
[173,158,162,173,0,176,170,171,173,168],
[169,171,157,168,164,0,177,183,165,171],
[161,166,142,160,170,163,0,164,166,159],
[159,150,154,162,169,157,176,0,170,156],
[168,178,159,168,167,175,174,170,0,175],
[173,168,156,164,172,169,181,184,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,176,167,187,189,199,176,186,180],
[144,0,156,159,163,178,182,177,160,133],
[164,184,0,173,167,192,180,177,164,166],
[173,181,167,0,177,190,179,174,179,163],
[153,177,173,163,0,184,187,171,169,169],
[151,162,148,150,156,0,194,156,153,135],
[141,158,160,161,153,146,0,173,168,151],
[164,163,163,166,169,184,167,0,165,161],
[154,180,176,161,171,187,172,175,0,160],
[160,207,174,177,171,205,189,179,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,166,152,151,167,157,169,168,158],
[172,0,157,172,156,179,164,144,163,144],
[174,183,0,159,162,174,155,173,165,152],
[188,168,181,0,150,178,162,176,173,157],
[189,184,178,190,0,179,168,181,171,176],
[173,161,166,162,161,0,156,156,164,155],
[183,176,185,178,172,184,0,165,174,166],
[171,196,167,164,159,184,175,0,178,156],
[172,177,175,167,169,176,166,162,0,160],
[182,196,188,183,164,185,174,184,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,169,242,144,192,264,217,168,194],
[125,0,148,148,172,145,172,171,147,196],
[171,192,0,195,98,170,170,145,98,148],
[98,192,145,0,119,192,144,170,146,145],
[196,168,242,221,0,169,195,194,171,198],
[148,195,170,148,171,0,194,121,197,172],
[76,168,170,196,145,146,0,148,125,172],
[123,169,195,170,146,219,192,0,170,98],
[172,193,242,194,169,143,215,170,0,170],
[146,144,192,195,142,168,168,242,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,160,146,171,138,169,133,145,158],
[183,0,170,169,205,171,178,179,175,158],
[180,170,0,166,193,154,170,160,162,171],
[194,171,174,0,194,166,169,170,154,175],
[169,135,147,146,0,147,160,141,144,146],
[202,169,186,174,193,0,180,171,165,195],
[171,162,170,171,180,160,0,164,154,172],
[207,161,180,170,199,169,176,0,187,168],
[195,165,178,186,196,175,186,153,0,167],
[182,182,169,165,194,145,168,172,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,168,157,164,167,173,159,180,158],
[172,0,174,171,172,166,175,158,171,175],
[172,166,0,164,161,159,165,171,175,191],
[183,169,176,0,163,166,160,165,187,174],
[176,168,179,177,0,169,178,160,172,173],
[173,174,181,174,171,0,184,167,165,171],
[167,165,175,180,162,156,0,154,168,164],
[181,182,169,175,180,173,186,0,178,174],
[160,169,165,153,168,175,172,162,0,175],
[182,165,149,166,167,169,176,166,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,169,170,182,163,164,164,172,161],
[188,0,183,185,179,180,170,178,176,171],
[171,157,0,180,181,169,165,177,175,173],
[170,155,160,0,184,164,156,180,173,166],
[158,161,159,156,0,153,148,171,160,164],
[177,160,171,176,187,0,173,176,177,174],
[176,170,175,184,192,167,0,183,177,174],
[176,162,163,160,169,164,157,0,170,159],
[168,164,165,167,180,163,163,170,0,154],
[179,169,167,174,176,166,166,181,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,167,155,171,163,154,163,156,155],
[176,0,171,175,181,172,169,173,171,176],
[173,169,0,178,167,155,167,171,164,152],
[185,165,162,0,174,171,171,178,147,174],
[169,159,173,166,0,154,153,162,148,161],
[177,168,185,169,186,0,159,177,163,181],
[186,171,173,169,187,181,0,179,168,174],
[177,167,169,162,178,163,161,0,152,153],
[184,169,176,193,192,177,172,188,0,181],
[185,164,188,166,179,159,166,187,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,161,180,183,172,159,178,175,170],
[161,0,165,184,180,187,173,180,176,166],
[179,175,0,188,181,167,174,185,190,190],
[160,156,152,0,158,151,140,163,160,151],
[157,160,159,182,0,170,162,169,173,165],
[168,153,173,189,170,0,183,189,162,174],
[181,167,166,200,178,157,0,177,176,162],
[162,160,155,177,171,151,163,0,171,154],
[165,164,150,180,167,178,164,169,0,176],
[170,174,150,189,175,166,178,186,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,156,151,136,158,173,168,169,142],
[211,0,171,163,155,174,185,189,174,163],
[184,169,0,171,172,185,176,197,182,159],
[189,177,169,0,192,172,180,213,221,179],
[204,185,168,148,0,181,194,211,182,177],
[182,166,155,168,159,0,187,182,195,168],
[167,155,164,160,146,153,0,181,180,157],
[172,151,143,127,129,158,159,0,166,172],
[171,166,158,119,158,145,160,174,0,153],
[198,177,181,161,163,172,183,168,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,160,141,169,170,152,164,157,165],
[184,0,161,165,184,170,169,175,168,150],
[180,179,0,169,182,169,180,165,162,173],
[199,175,171,0,170,196,171,181,169,166],
[171,156,158,170,0,171,160,161,154,160],
[170,170,171,144,169,0,167,150,156,160],
[188,171,160,169,180,173,0,163,171,169],
[176,165,175,159,179,190,177,0,172,168],
[183,172,178,171,186,184,169,168,0,173],
[175,190,167,174,180,180,171,172,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,171,170,158,183,173,169,173,168],
[160,0,173,171,171,186,152,178,155,164],
[169,167,0,162,150,172,164,165,144,165],
[170,169,178,0,162,174,161,168,169,155],
[182,169,190,178,0,184,181,182,174,165],
[157,154,168,166,156,0,143,154,153,166],
[167,188,176,179,159,197,0,164,167,177],
[171,162,175,172,158,186,176,0,172,178],
[167,185,196,171,166,187,173,168,0,177],
[172,176,175,185,175,174,163,162,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,187,154,172,171,180,171,164,178],
[145,0,177,157,166,156,146,165,139,174],
[153,163,0,163,176,167,166,183,161,170],
[186,183,177,0,183,175,171,185,167,173],
[168,174,164,157,0,154,152,172,165,169],
[169,184,173,165,186,0,166,185,158,175],
[160,194,174,169,188,174,0,188,171,183],
[169,175,157,155,168,155,152,0,152,165],
[176,201,179,173,175,182,169,188,0,183],
[162,166,170,167,171,165,157,175,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,163,180,189,171,170,171,173,181],
[183,0,182,190,181,176,149,176,170,182],
[177,158,0,189,180,179,178,178,168,177],
[160,150,151,0,173,152,160,163,161,159],
[151,159,160,167,0,161,152,153,148,169],
[169,164,161,188,179,0,156,152,169,170],
[170,191,162,180,188,184,0,181,167,173],
[169,164,162,177,187,188,159,0,165,186],
[167,170,172,179,192,171,173,175,0,179],
[159,158,163,181,171,170,167,154,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,227,227,227,114,227,114,114,114],
[113,0,227,113,227,227,0,0,0,114],
[113,113,0,0,227,114,0,0,0,114],
[113,227,340,0,227,227,0,114,114,114],
[113,113,113,113,0,113,0,0,0,0],
[226,113,226,113,227,0,113,0,0,0],
[113,340,340,340,340,227,0,227,227,114],
[226,340,340,226,340,340,113,0,227,227],
[226,340,340,226,340,340,113,113,0,114],
[226,226,226,226,340,340,226,113,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,184,169,163,185,114,151,175,146],
[183,0,171,169,163,220,184,161,187,146],
[156,169,0,143,150,177,160,159,149,157],
[171,171,197,0,162,208,175,176,149,175],
[177,177,190,178,0,179,157,144,98,190],
[155,120,163,132,161,0,137,128,135,134],
[226,156,180,165,183,203,0,160,146,203],
[189,179,181,164,196,212,180,0,155,181],
[165,153,191,191,242,205,194,185,0,190],
[194,194,183,165,150,206,137,159,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,184,176,192,154,181,188,153,180],
[129,0,157,183,155,150,177,167,147,168],
[156,183,0,158,142,144,155,185,130,158],
[164,157,182,0,160,152,180,196,124,179],
[148,185,198,180,0,174,154,187,153,180],
[186,190,196,188,166,0,183,195,188,167],
[159,163,185,160,186,157,0,184,142,168],
[152,173,155,144,153,145,156,0,153,156],
[187,193,210,216,187,152,198,187,0,202],
[160,172,182,161,160,173,172,184,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,186,168,173,173,167,169,184,174],
[172,0,171,164,181,162,176,167,164,168],
[154,169,0,154,166,158,175,159,168,157],
[172,176,186,0,175,174,168,167,178,183],
[167,159,174,165,0,172,174,170,165,170],
[167,178,182,166,168,0,176,173,172,168],
[173,164,165,172,166,164,0,154,171,158],
[171,173,181,173,170,167,186,0,179,184],
[156,176,172,162,175,168,169,161,0,159],
[166,172,183,157,170,172,182,156,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,172,158,169,163,166,151,171,184],
[177,0,187,175,176,184,196,167,188,203],
[168,153,0,152,166,171,180,142,188,165],
[182,165,188,0,182,174,179,176,186,192],
[171,164,174,158,0,173,186,163,193,174],
[177,156,169,166,167,0,165,182,180,161],
[174,144,160,161,154,175,0,170,187,183],
[189,173,198,164,177,158,170,0,197,191],
[169,152,152,154,147,160,153,143,0,167],
[156,137,175,148,166,179,157,149,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,179,145,143,168,151,173,172,176],
[198,0,189,173,177,205,160,171,171,185],
[161,151,0,136,145,161,129,167,160,153],
[195,167,204,0,146,193,159,173,169,183],
[197,163,195,194,0,213,184,188,199,190],
[172,135,179,147,127,0,155,153,153,161],
[189,180,211,181,156,185,0,179,167,196],
[167,169,173,167,152,187,161,0,175,186],
[168,169,180,171,141,187,173,165,0,180],
[164,155,187,157,150,179,144,154,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,175,172,147,189,181,170,156,183],
[170,0,173,172,165,192,181,169,175,171],
[165,167,0,170,167,175,180,174,159,179],
[168,168,170,0,165,168,178,172,160,174],
[193,175,173,175,0,189,196,177,168,189],
[151,148,165,172,151,0,168,170,141,174],
[159,159,160,162,144,172,0,177,143,167],
[170,171,166,168,163,170,163,0,150,172],
[184,165,181,180,172,199,197,190,0,186],
[157,169,161,166,151,166,173,168,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,159,143,162,159,147,150,159,151],
[167,0,178,189,146,172,150,162,165,164],
[181,162,0,173,149,170,147,155,145,177],
[197,151,167,0,163,163,160,164,191,185],
[178,194,191,177,0,184,179,168,165,169],
[181,168,170,177,156,0,168,165,167,186],
[193,190,193,180,161,172,0,187,178,188],
[190,178,185,176,172,175,153,0,173,183],
[181,175,195,149,175,173,162,167,0,170],
[189,176,163,155,171,154,152,157,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,139,62,119,120,139,139,116,150],
[212,0,167,119,144,145,201,161,176,144],
[201,173,0,141,132,154,173,161,140,164],
[278,221,199,0,164,168,218,199,176,186],
[221,196,208,176,0,155,199,161,175,185],
[220,195,186,172,185,0,185,193,148,152],
[201,139,167,122,141,155,0,162,154,109],
[201,179,179,141,179,147,178,0,155,157],
[224,164,200,164,165,192,186,185,0,143],
[190,196,176,154,155,188,231,183,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,166,179,167,163,158,172,176,170],
[174,0,176,176,173,175,172,173,188,158],
[174,164,0,169,160,163,172,165,168,166],
[161,164,171,0,157,155,158,152,162,149],
[173,167,180,183,0,175,170,178,198,178],
[177,165,177,185,165,0,167,176,185,171],
[182,168,168,182,170,173,0,170,178,160],
[168,167,175,188,162,164,170,0,180,167],
[164,152,172,178,142,155,162,160,0,160],
[170,182,174,191,162,169,180,173,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,179,170,161,170,163,169,183,186],
[168,0,159,179,171,148,155,158,182,178],
[161,181,0,178,164,160,179,175,186,161],
[170,161,162,0,156,151,168,173,173,168],
[179,169,176,184,0,167,183,179,180,176],
[170,192,180,189,173,0,175,184,205,168],
[177,185,161,172,157,165,0,179,183,173],
[171,182,165,167,161,156,161,0,172,182],
[157,158,154,167,160,135,157,168,0,168],
[154,162,179,172,164,172,167,158,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,178,163,161,170,157,172,168,154],
[180,0,179,165,168,167,177,164,168,165],
[162,161,0,159,152,148,152,165,158,168],
[177,175,181,0,173,156,156,174,189,166],
[179,172,188,167,0,149,150,173,174,164],
[170,173,192,184,191,0,178,178,174,180],
[183,163,188,184,190,162,0,164,185,175],
[168,176,175,166,167,162,176,0,159,157],
[172,172,182,151,166,166,155,181,0,161],
[186,175,172,174,176,160,165,183,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,86,127,169,141,147,138,115,201],
[214,0,184,210,212,198,170,195,170,141],
[254,156,0,197,227,227,203,194,199,211],
[213,130,143,0,154,182,172,183,156,198],
[171,128,113,186,0,142,132,169,142,142],
[199,142,113,158,198,0,146,197,158,183],
[193,170,137,168,208,194,0,164,152,168],
[202,145,146,157,171,143,176,0,158,159],
[225,170,141,184,198,182,188,182,0,173],
[139,199,129,142,198,157,172,181,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,173,188,192,166,168,170,188,175],
[149,0,173,165,157,149,142,166,158,144],
[167,167,0,182,174,155,161,176,182,161],
[152,175,158,0,172,151,141,166,169,175],
[148,183,166,168,0,176,149,177,173,164],
[174,191,185,189,164,0,165,159,183,171],
[172,198,179,199,191,175,0,166,185,192],
[170,174,164,174,163,181,174,0,175,176],
[152,182,158,171,167,157,155,165,0,165],
[165,196,179,165,176,169,148,164,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,154,167,164,188,172,175,179,165],
[190,0,179,180,178,177,174,170,181,191],
[186,161,0,185,184,184,181,175,185,179],
[173,160,155,0,173,190,178,157,170,174],
[176,162,156,167,0,182,178,170,172,175],
[152,163,156,150,158,0,144,161,157,156],
[168,166,159,162,162,196,0,171,182,165],
[165,170,165,183,170,179,169,0,178,181],
[161,159,155,170,168,183,158,162,0,169],
[175,149,161,166,165,184,175,159,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,176,182,166,195,176,165,184,183],
[170,0,180,174,170,193,175,163,185,172],
[164,160,0,172,181,178,180,154,174,158],
[158,166,168,0,152,180,167,142,174,181],
[174,170,159,188,0,176,177,171,195,179],
[145,147,162,160,164,0,147,141,171,168],
[164,165,160,173,163,193,0,170,182,182],
[175,177,186,198,169,199,170,0,184,200],
[156,155,166,166,145,169,158,156,0,159],
[157,168,182,159,161,172,158,140,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,158,167,169,144,161,167,167,164],
[204,0,166,185,169,177,187,183,180,169],
[182,174,0,189,164,156,172,175,162,185],
[173,155,151,0,147,160,173,156,170,155],
[171,171,176,193,0,178,192,177,197,170],
[196,163,184,180,162,0,190,168,193,186],
[179,153,168,167,148,150,0,178,159,177],
[173,157,165,184,163,172,162,0,176,184],
[173,160,178,170,143,147,181,164,0,172],
[176,171,155,185,170,154,163,156,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,197,173,186,174,147,168,160,197],
[167,0,216,169,182,139,173,153,161,190],
[143,124,0,170,148,120,122,165,153,178],
[167,171,170,0,189,177,166,164,169,196],
[154,158,192,151,0,119,140,124,165,198],
[166,201,220,163,221,0,185,179,184,194],
[193,167,218,174,200,155,0,211,180,216],
[172,187,175,176,216,161,129,0,173,174],
[180,179,187,171,175,156,160,167,0,166],
[143,150,162,144,142,146,124,166,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,194,186,187,161,175,171,192,206],
[143,0,148,178,162,152,163,162,198,159],
[146,192,0,191,190,141,190,167,199,184],
[154,162,149,0,156,140,176,160,194,179],
[153,178,150,184,0,177,187,166,194,173],
[179,188,199,200,163,0,194,189,203,218],
[165,177,150,164,153,146,0,144,197,150],
[169,178,173,180,174,151,196,0,200,184],
[148,142,141,146,146,137,143,140,0,164],
[134,181,156,161,167,122,190,156,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,187,209,188,180,185,188,199,164],
[147,0,190,187,202,196,179,179,199,193],
[153,150,0,177,193,182,189,161,177,178],
[131,153,163,0,174,179,176,151,168,167],
[152,138,147,166,0,149,159,153,145,142],
[160,144,158,161,191,0,168,190,161,173],
[155,161,151,164,181,172,0,155,177,172],
[152,161,179,189,187,150,185,0,174,182],
[141,141,163,172,195,179,163,166,0,159],
[176,147,162,173,198,167,168,158,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,191,158,186,188,182,176,172,175],
[194,0,192,165,184,184,168,175,174,171],
[149,148,0,175,168,185,174,154,167,148],
[182,175,165,0,173,175,162,160,178,166],
[154,156,172,167,0,180,172,162,158,166],
[152,156,155,165,160,0,135,144,182,170],
[158,172,166,178,168,205,0,173,160,156],
[164,165,186,180,178,196,167,0,179,157],
[168,166,173,162,182,158,180,161,0,159],
[165,169,192,174,174,170,184,183,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,157,165,165,177,166,196,152,176],
[181,0,160,162,167,178,185,173,153,165],
[183,180,0,167,189,197,181,192,175,165],
[175,178,173,0,179,192,180,179,170,183],
[175,173,151,161,0,195,185,180,169,164],
[163,162,143,148,145,0,163,178,139,180],
[174,155,159,160,155,177,0,183,155,181],
[144,167,148,161,160,162,157,0,149,159],
[188,187,165,170,171,201,185,191,0,180],
[164,175,175,157,176,160,159,181,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,175,179,161,163,180,200,188,166],
[185,0,180,182,165,165,194,188,183,179],
[165,160,0,178,174,167,183,188,179,180],
[161,158,162,0,148,165,168,175,172,163],
[179,175,166,192,0,180,188,184,188,177],
[177,175,173,175,160,0,169,172,180,170],
[160,146,157,172,152,171,0,169,155,171],
[140,152,152,165,156,168,171,0,169,148],
[152,157,161,168,152,160,185,171,0,157],
[174,161,160,177,163,170,169,192,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,153,178,154,139,164,143,157,169],
[204,0,168,199,195,163,195,179,167,161],
[187,172,0,204,175,188,181,175,158,181],
[162,141,136,0,173,152,163,170,139,157],
[186,145,165,167,0,154,164,170,155,159],
[201,177,152,188,186,0,199,188,177,171],
[176,145,159,177,176,141,0,173,156,163],
[197,161,165,170,170,152,167,0,142,172],
[183,173,182,201,185,163,184,198,0,192],
[171,179,159,183,181,169,177,168,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,204,161,201,185,155,210,182,196],
[187,0,179,192,203,185,204,210,178,144],
[136,161,0,187,211,187,170,208,156,179],
[179,148,153,0,221,213,190,210,147,149],
[139,137,129,119,0,161,138,201,172,153],
[155,155,153,127,179,0,156,158,161,161],
[185,136,170,150,202,184,0,192,161,119],
[130,130,132,130,139,182,148,0,113,113],
[158,162,184,193,168,179,179,227,0,168],
[144,196,161,191,187,179,221,227,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,170,169,166,176,181,170,186,162],
[160,0,164,168,172,175,177,161,179,171],
[170,176,0,175,171,170,179,170,193,177],
[171,172,165,0,180,172,174,170,176,173],
[174,168,169,160,0,171,175,176,182,184],
[164,165,170,168,169,0,172,168,178,170],
[159,163,161,166,165,168,0,177,174,171],
[170,179,170,170,164,172,163,0,176,192],
[154,161,147,164,158,162,166,164,0,169],
[178,169,163,167,156,170,169,148,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,178,161,148,152,167,175,166,163],
[164,0,165,155,149,154,159,149,156,158],
[162,175,0,157,150,156,155,163,160,155],
[179,185,183,0,170,155,156,170,170,163],
[192,191,190,170,0,180,171,193,176,171],
[188,186,184,185,160,0,177,169,184,179],
[173,181,185,184,169,163,0,176,184,165],
[165,191,177,170,147,171,164,0,178,164],
[174,184,180,170,164,156,156,162,0,155],
[177,182,185,177,169,161,175,176,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,158,153,164,175,180,167,159,182],
[155,0,163,138,183,162,167,157,158,169],
[182,177,0,175,180,188,192,185,160,171],
[187,202,165,0,180,196,194,189,173,190],
[176,157,160,160,0,165,170,156,151,171],
[165,178,152,144,175,0,177,166,144,167],
[160,173,148,146,170,163,0,164,150,177],
[173,183,155,151,184,174,176,0,149,169],
[181,182,180,167,189,196,190,191,0,195],
[158,171,169,150,169,173,163,171,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,172,164,155,181,170,156,166,160],
[143,0,155,145,137,168,122,176,175,152],
[168,185,0,176,186,187,189,180,193,164],
[176,195,164,0,165,179,183,160,185,166],
[185,203,154,175,0,182,180,179,195,175],
[159,172,153,161,158,0,155,163,175,148],
[170,218,151,157,160,185,0,155,202,161],
[184,164,160,180,161,177,185,0,174,158],
[174,165,147,155,145,165,138,166,0,162],
[180,188,176,174,165,192,179,182,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,193,176,175,191,172,171,182,159],
[159,0,199,170,182,174,156,162,160,164],
[147,141,0,175,177,172,170,163,121,145],
[164,170,165,0,165,172,164,148,153,156],
[165,158,163,175,0,161,160,157,153,153],
[149,166,168,168,179,0,158,159,167,161],
[168,184,170,176,180,182,0,164,155,174],
[169,178,177,192,183,181,176,0,170,172],
[158,180,219,187,187,173,185,170,0,173],
[181,176,195,184,187,179,166,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,162,169,181,167,150,166,175,162],
[180,0,165,172,187,173,158,179,168,171],
[178,175,0,175,182,174,165,168,188,159],
[171,168,165,0,182,170,153,164,180,155],
[159,153,158,158,0,168,139,145,173,153],
[173,167,166,170,172,0,146,155,167,151],
[190,182,175,187,201,194,0,168,194,164],
[174,161,172,176,195,185,172,0,179,179],
[165,172,152,160,167,173,146,161,0,175],
[178,169,181,185,187,189,176,161,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,172,165,171,163,168,167,171,178],
[162,0,163,164,152,164,171,176,178,169],
[168,177,0,157,169,154,162,176,167,172],
[175,176,183,0,163,164,188,176,185,185],
[169,188,171,177,0,173,172,178,182,186],
[177,176,186,176,167,0,171,171,167,187],
[172,169,178,152,168,169,0,171,167,173],
[173,164,164,164,162,169,169,0,172,164],
[169,162,173,155,158,173,173,168,0,165],
[162,171,168,155,154,153,167,176,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,161,156,158,184,149,185,171,207],
[160,0,172,166,160,194,169,179,155,179],
[179,168,0,174,192,186,162,157,199,178],
[184,174,166,0,173,194,125,184,179,200],
[182,180,148,167,0,182,178,145,164,196],
[156,146,154,146,158,0,150,128,135,198],
[191,171,178,215,162,190,0,174,203,238],
[155,161,183,156,195,212,166,0,174,210],
[169,185,141,161,176,205,137,166,0,223],
[133,161,162,140,144,142,102,130,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,192,177,175,162,130,189,188,165],
[178,0,162,167,182,183,155,176,198,177],
[148,178,0,187,171,180,163,166,179,175],
[163,173,153,0,156,171,140,164,171,137],
[165,158,169,184,0,141,155,141,159,150],
[178,157,160,169,199,0,134,168,182,161],
[210,185,177,200,185,206,0,169,189,173],
[151,164,174,176,199,172,171,0,169,146],
[152,142,161,169,181,158,151,171,0,149],
[175,163,165,203,190,179,167,194,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,209,217,215,203,189,167,196,219],
[94,0,131,160,120,105,108,88,159,125],
[131,209,0,152,140,152,159,161,168,190],
[123,180,188,0,202,130,135,165,176,194],
[125,220,200,138,0,196,146,180,185,198],
[137,235,188,210,144,0,129,157,185,166],
[151,232,181,205,194,211,0,156,177,201],
[173,252,179,175,160,183,184,0,189,182],
[144,181,172,164,155,155,163,151,0,183],
[121,215,150,146,142,174,139,158,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,217,181,166,176,213,186,189,177],
[123,0,169,147,177,147,175,151,150,158],
[123,171,0,148,148,139,158,147,131,138],
[159,193,192,0,161,151,168,175,161,164],
[174,163,192,179,0,182,189,173,169,146],
[164,193,201,189,158,0,184,157,153,173],
[127,165,182,172,151,156,0,172,158,138],
[154,189,193,165,167,183,168,0,159,178],
[151,190,209,179,171,187,182,181,0,161],
[163,182,202,176,194,167,202,162,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,198,140,196,185,176,152,129,162],
[182,0,197,167,192,197,182,151,162,204],
[142,143,0,130,173,171,129,137,132,153],
[200,173,210,0,173,194,208,163,190,195],
[144,148,167,167,0,156,152,155,119,156],
[155,143,169,146,184,0,146,162,108,141],
[164,158,211,132,188,194,0,177,153,203],
[188,189,203,177,185,178,163,0,138,166],
[211,178,208,150,221,232,187,202,0,197],
[178,136,187,145,184,199,137,174,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,192,175,197,150,178,179,178,191],
[156,0,176,160,194,157,177,166,188,181],
[148,164,0,152,195,154,172,165,168,191],
[165,180,188,0,204,156,191,165,192,189],
[143,146,145,136,0,127,154,131,164,153],
[190,183,186,184,213,0,202,168,191,199],
[162,163,168,149,186,138,0,170,171,189],
[161,174,175,175,209,172,170,0,175,196],
[162,152,172,148,176,149,169,165,0,181],
[149,159,149,151,187,141,151,144,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,182,181,198,188,184,185,172,174],
[174,0,179,178,184,177,172,179,159,177],
[158,161,0,176,170,161,170,173,159,164],
[159,162,164,0,168,152,169,170,157,171],
[142,156,170,172,0,171,166,177,164,157],
[152,163,179,188,169,0,171,180,173,188],
[156,168,170,171,174,169,0,181,159,171],
[155,161,167,170,163,160,159,0,155,161],
[168,181,181,183,176,167,181,185,0,177],
[166,163,176,169,183,152,169,179,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,178,166,157,162,157,179,164,151],
[180,0,201,198,167,165,171,181,175,164],
[162,139,0,164,139,169,160,175,154,146],
[174,142,176,0,144,155,155,168,160,156],
[183,173,201,196,0,179,180,194,185,165],
[178,175,171,185,161,0,178,194,168,168],
[183,169,180,185,160,162,0,194,162,171],
[161,159,165,172,146,146,146,0,157,166],
[176,165,186,180,155,172,178,183,0,170],
[189,176,194,184,175,172,169,174,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,180,164,167,169,160,176,156,160],
[184,0,187,178,172,168,184,183,162,180],
[160,153,0,163,170,163,159,169,154,153],
[176,162,177,0,181,179,182,174,159,181],
[173,168,170,159,0,157,172,183,148,148],
[171,172,177,161,183,0,169,181,160,165],
[180,156,181,158,168,171,0,172,161,157],
[164,157,171,166,157,159,168,0,156,163],
[184,178,186,181,192,180,179,184,0,163],
[180,160,187,159,192,175,183,177,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,178,165,188,160,154,174,151,164],
[164,0,156,157,175,157,153,175,160,166],
[162,184,0,165,191,176,176,176,176,175],
[175,183,175,0,189,172,174,183,169,175],
[152,165,149,151,0,155,150,156,158,156],
[180,183,164,168,185,0,169,177,168,168],
[186,187,164,166,190,171,0,168,167,167],
[166,165,164,157,184,163,172,0,155,163],
[189,180,164,171,182,172,173,185,0,167],
[176,174,165,165,184,172,173,177,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,172,182,181,172,192,185,169,183],
[169,0,176,184,188,169,193,174,180,184],
[168,164,0,184,170,164,182,175,164,165],
[158,156,156,0,173,158,181,169,163,161],
[159,152,170,167,0,148,177,172,156,162],
[168,171,176,182,192,0,180,176,175,182],
[148,147,158,159,163,160,0,168,156,148],
[155,166,165,171,168,164,172,0,160,170],
[171,160,176,177,184,165,184,180,0,171],
[157,156,175,179,178,158,192,170,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,183,172,177,178,182,192,164,176],
[165,0,184,154,183,162,181,187,179,162],
[157,156,0,165,163,162,183,176,165,169],
[168,186,175,0,175,177,189,187,172,171],
[163,157,177,165,0,171,179,164,163,164],
[162,178,178,163,169,0,184,174,172,173],
[158,159,157,151,161,156,0,155,163,161],
[148,153,164,153,176,166,185,0,164,165],
[176,161,175,168,177,168,177,176,0,166],
[164,178,171,169,176,167,179,175,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,182,152,203,195,198,198,154,188],
[151,0,141,137,192,156,187,156,133,155],
[158,199,0,177,233,184,217,176,183,201],
[188,203,163,0,237,193,220,177,198,206],
[137,148,107,103,0,153,171,157,127,146],
[145,184,156,147,187,0,190,148,178,168],
[142,153,123,120,169,150,0,142,119,168],
[142,184,164,163,183,192,198,0,167,182],
[186,207,157,142,213,162,221,173,0,176],
[152,185,139,134,194,172,172,158,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,87,128,87,258,86,173,129,215],
[252,0,127,295,297,340,253,252,210,257],
[253,213,0,253,255,340,168,295,297,340],
[212,45,87,0,171,254,87,212,87,172],
[253,43,85,169,0,298,171,210,85,215],
[82,0,0,86,42,0,0,125,42,127],
[254,87,172,253,169,340,0,297,211,257],
[167,88,45,128,130,215,43,0,130,215],
[211,130,43,253,255,298,129,210,0,215],
[125,83,0,168,125,213,83,125,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,178,199,161,196,184,190,184,180],
[161,0,173,175,169,184,154,168,159,162],
[162,167,0,170,169,192,159,169,164,151],
[141,165,170,0,153,176,155,168,150,139],
[179,171,171,187,0,193,170,171,159,166],
[144,156,148,164,147,0,155,152,168,138],
[156,186,181,185,170,185,0,183,169,161],
[150,172,171,172,169,188,157,0,153,161],
[156,181,176,190,181,172,171,187,0,177],
[160,178,189,201,174,202,179,179,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,158,159,155,177,156,169,174,159],
[175,0,170,160,171,176,172,188,182,171],
[182,170,0,173,179,174,158,185,182,153],
[181,180,167,0,181,188,177,196,192,186],
[185,169,161,159,0,178,176,187,176,162],
[163,164,166,152,162,0,149,178,170,157],
[184,168,182,163,164,191,0,183,183,171],
[171,152,155,144,153,162,157,0,170,155],
[166,158,158,148,164,170,157,170,0,156],
[181,169,187,154,178,183,169,185,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,168,167,168,156,172,178,166,171],
[170,0,171,171,175,158,170,169,164,163],
[172,169,0,157,159,153,164,163,164,165],
[173,169,183,0,184,172,172,196,157,164],
[172,165,181,156,0,153,165,177,164,155],
[184,182,187,168,187,0,166,183,185,183],
[168,170,176,168,175,174,0,169,164,178],
[162,171,177,144,163,157,171,0,150,160],
[174,176,176,183,176,155,176,190,0,177],
[169,177,175,176,185,157,162,180,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,164,202,179,172,163,173,165,155],
[180,0,171,185,169,155,187,185,186,160],
[176,169,0,195,153,156,162,151,171,175],
[138,155,145,0,150,147,142,157,157,159],
[161,171,187,190,0,154,169,177,182,174],
[168,185,184,193,186,0,172,191,184,171],
[177,153,178,198,171,168,0,170,162,185],
[167,155,189,183,163,149,170,0,167,173],
[175,154,169,183,158,156,178,173,0,191],
[185,180,165,181,166,169,155,167,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,180,146,183,182,167,170,172,182],
[160,0,172,134,168,169,153,158,159,176],
[160,168,0,139,170,163,157,164,146,165],
[194,206,201,0,183,167,171,174,183,182],
[157,172,170,157,0,154,154,158,183,190],
[158,171,177,173,186,0,144,167,148,169],
[173,187,183,169,186,196,0,175,178,174],
[170,182,176,166,182,173,165,0,172,182],
[168,181,194,157,157,192,162,168,0,164],
[158,164,175,158,150,171,166,158,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,167,187,180,192,162,187,177,157],
[157,0,157,182,168,171,155,168,155,155],
[173,183,0,173,170,176,166,181,157,153],
[153,158,167,0,163,183,164,170,164,153],
[160,172,170,177,0,188,176,175,160,158],
[148,169,164,157,152,0,160,174,164,159],
[178,185,174,176,164,180,0,180,150,171],
[153,172,159,170,165,166,160,0,160,150],
[163,185,183,176,180,176,190,180,0,166],
[183,185,187,187,182,181,169,190,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,160,174,160,170,189,181,161,173],
[184,0,164,182,178,166,189,186,173,174],
[180,176,0,169,176,168,188,181,179,167],
[166,158,171,0,170,161,174,173,171,172],
[180,162,164,170,0,167,178,172,168,181],
[170,174,172,179,173,0,179,188,166,194],
[151,151,152,166,162,161,0,154,147,162],
[159,154,159,167,168,152,186,0,162,155],
[179,167,161,169,172,174,193,178,0,159],
[167,166,173,168,159,146,178,185,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,178,174,165,159,163,188,169,179],
[165,0,170,171,169,184,177,182,172,176],
[162,170,0,195,176,181,178,181,176,184],
[166,169,145,0,159,170,166,172,163,166],
[175,171,164,181,0,174,171,187,183,175],
[181,156,159,170,166,0,175,172,155,160],
[177,163,162,174,169,165,0,176,171,166],
[152,158,159,168,153,168,164,0,164,176],
[171,168,164,177,157,185,169,176,0,182],
[161,164,156,174,165,180,174,164,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,180,165,158,158,170,180,156,168],
[165,0,172,160,178,164,152,156,140,167],
[160,168,0,167,156,143,170,160,129,152],
[175,180,173,0,178,173,169,181,159,180],
[182,162,184,162,0,173,157,179,154,143],
[182,176,197,167,167,0,178,190,175,172],
[170,188,170,171,183,162,0,188,164,177],
[160,184,180,159,161,150,152,0,149,164],
[184,200,211,181,186,165,176,191,0,189],
[172,173,188,160,197,168,163,176,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,119,124,132,182,201,162,152,142],
[182,0,129,213,160,190,180,183,195,185],
[221,211,0,188,221,231,190,231,203,158],
[216,127,152,0,171,190,191,194,188,144],
[208,180,119,169,0,183,224,184,185,163],
[158,150,109,150,157,0,180,185,161,125],
[139,160,150,149,116,160,0,138,133,141],
[178,157,109,146,156,155,202,0,142,149],
[188,145,137,152,155,179,207,198,0,165],
[198,155,182,196,177,215,199,191,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,178,159,172,175,176,178,161,176],
[169,0,161,158,164,188,165,165,172,184],
[162,179,0,172,156,167,188,173,165,194],
[181,182,168,0,188,187,181,195,180,194],
[168,176,184,152,0,169,192,184,157,193],
[165,152,173,153,171,0,175,149,147,164],
[164,175,152,159,148,165,0,165,155,171],
[162,175,167,145,156,191,175,0,166,171],
[179,168,175,160,183,193,185,174,0,202],
[164,156,146,146,147,176,169,169,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,155,166,164,172,161,156,171,164],
[166,0,147,156,162,166,148,147,163,164],
[185,193,0,172,176,187,173,169,180,180],
[174,184,168,0,172,182,170,167,181,180],
[176,178,164,168,0,170,159,160,167,163],
[168,174,153,158,170,0,147,153,156,161],
[179,192,167,170,181,193,0,170,177,188],
[184,193,171,173,180,187,170,0,177,175],
[169,177,160,159,173,184,163,163,0,164],
[176,176,160,160,177,179,152,165,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,169,171,160,125,168,147,188,131],
[167,0,149,138,163,133,154,138,185,143],
[171,191,0,178,187,150,178,163,217,195],
[169,202,162,0,169,161,169,164,205,173],
[180,177,153,171,0,172,188,157,214,180],
[215,207,190,179,168,0,186,187,237,163],
[172,186,162,171,152,154,0,145,205,175],
[193,202,177,176,183,153,195,0,217,188],
[152,155,123,135,126,103,135,123,0,122],
[209,197,145,167,160,177,165,152,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,186,166,179,178,167,179,169,188],
[166,0,180,176,163,178,172,176,169,184],
[154,160,0,155,159,170,166,153,162,175],
[174,164,185,0,162,160,163,170,176,176],
[161,177,181,178,0,174,176,167,175,199],
[162,162,170,180,166,0,178,165,171,179],
[173,168,174,177,164,162,0,175,172,177],
[161,164,187,170,173,175,165,0,181,188],
[171,171,178,164,165,169,168,159,0,178],
[152,156,165,164,141,161,163,152,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,164,152,169,159,167,174,165,175],
[161,0,170,157,172,154,153,160,166,164],
[176,170,0,158,176,147,165,179,153,186],
[188,183,182,0,182,171,176,160,174,181],
[171,168,164,158,0,140,163,169,161,176],
[181,186,193,169,200,0,164,177,172,168],
[173,187,175,164,177,176,0,188,158,188],
[166,180,161,180,171,163,152,0,166,179],
[175,174,187,166,179,168,182,174,0,186],
[165,176,154,159,164,172,152,161,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,157,172,170,163,162,164,172,169],
[173,0,158,167,181,187,180,173,182,174],
[183,182,0,162,168,182,171,180,181,175],
[168,173,178,0,177,189,186,167,183,176],
[170,159,172,163,0,176,184,168,162,181],
[177,153,158,151,164,0,176,171,201,157],
[178,160,169,154,156,164,0,148,182,172],
[176,167,160,173,172,169,192,0,175,178],
[168,158,159,157,178,139,158,165,0,163],
[171,166,165,164,159,183,168,162,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,178,186,175,206,189,180,163,163],
[147,0,166,164,151,178,177,148,147,170],
[162,174,0,172,164,191,188,171,166,145],
[154,176,168,0,145,177,178,160,161,153],
[165,189,176,195,0,219,192,174,174,169],
[134,162,149,163,121,0,151,141,140,150],
[151,163,152,162,148,189,0,155,142,145],
[160,192,169,180,166,199,185,0,184,177],
[177,193,174,179,166,200,198,156,0,185],
[177,170,195,187,171,190,195,163,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,180,137,159,169,152,169,166,183],
[176,0,213,151,177,154,177,185,175,185],
[160,127,0,134,136,156,154,152,158,151],
[203,189,206,0,192,169,193,192,187,192],
[181,163,204,148,0,177,200,177,207,175],
[171,186,184,171,163,0,178,162,181,193],
[188,163,186,147,140,162,0,172,168,176],
[171,155,188,148,163,178,168,0,170,147],
[174,165,182,153,133,159,172,170,0,185],
[157,155,189,148,165,147,164,193,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,168,195,198,185,176,178,176,204],
[152,0,158,175,181,151,170,156,155,177],
[172,182,0,201,198,171,183,177,170,179],
[145,165,139,0,178,153,152,156,148,157],
[142,159,142,162,0,145,155,142,148,151],
[155,189,169,187,195,0,179,157,157,189],
[164,170,157,188,185,161,0,176,154,173],
[162,184,163,184,198,183,164,0,167,182],
[164,185,170,192,192,183,186,173,0,186],
[136,163,161,183,189,151,167,158,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,152,153,121,189,219,158,124,218],
[218,0,152,280,152,188,249,188,185,219],
[188,188,0,218,154,187,218,219,189,156],
[187,60,122,0,121,157,219,189,124,157],
[219,188,186,219,0,220,219,189,157,157],
[151,152,153,183,120,0,154,94,92,185],
[121,91,122,121,121,186,0,95,90,185],
[182,152,121,151,151,246,245,0,152,184],
[216,155,151,216,183,248,250,188,0,186],
[122,121,184,183,183,155,155,156,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,114,56,113,114,113,56,171,114],
[170,0,173,112,57,57,115,115,170,173],
[226,167,0,55,113,0,170,111,226,114],
[284,228,285,0,171,116,115,114,227,172],
[227,283,227,169,0,172,169,169,226,172],
[226,283,340,224,168,0,282,225,282,283],
[227,225,170,225,171,58,0,114,340,170],
[284,225,229,226,171,115,226,0,226,172],
[169,170,114,113,114,58,0,114,0,114],
[226,167,226,168,168,57,170,168,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,152,179,152,169,195,155,165,177],
[185,0,154,159,161,138,174,160,157,156],
[188,186,0,184,183,166,198,187,189,192],
[161,181,156,0,160,141,169,166,159,174],
[188,179,157,180,0,157,207,168,171,167],
[171,202,174,199,183,0,175,184,165,182],
[145,166,142,171,133,165,0,149,166,164],
[185,180,153,174,172,156,191,0,182,198],
[175,183,151,181,169,175,174,158,0,175],
[163,184,148,166,173,158,176,142,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,156,150,142,151,129,142,141,178],
[196,0,161,183,174,185,163,168,158,193],
[184,179,0,176,187,174,194,159,182,156],
[190,157,164,0,163,200,159,168,162,176],
[198,166,153,177,0,187,159,151,158,165],
[189,155,166,140,153,0,181,160,154,192],
[211,177,146,181,181,159,0,161,186,178],
[198,172,181,172,189,180,179,0,167,170],
[199,182,158,178,182,186,154,173,0,175],
[162,147,184,164,175,148,162,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,158,151,156,177,157,169,156,166],
[183,0,153,156,171,177,167,162,184,171],
[182,187,0,163,171,173,164,196,186,182],
[189,184,177,0,170,192,191,185,175,173],
[184,169,169,170,0,174,172,162,162,185],
[163,163,167,148,166,0,174,162,171,162],
[183,173,176,149,168,166,0,174,158,167],
[171,178,144,155,178,178,166,0,171,162],
[184,156,154,165,178,169,182,169,0,182],
[174,169,158,167,155,178,173,178,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,194,194,243,291,146,242,194,291],
[98,0,243,194,146,243,98,194,97,98],
[146,97,0,146,146,195,97,145,48,146],
[146,146,194,0,243,146,195,194,194,146],
[97,194,194,97,0,243,97,96,193,194],
[49,97,145,194,97,0,98,145,97,146],
[194,242,243,145,243,242,0,243,193,242],
[98,146,195,146,244,195,97,0,146,195],
[146,243,292,146,147,243,147,194,0,146],
[49,242,194,194,146,194,98,145,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,182,171,170,180,203,184,179,185],
[159,0,149,175,151,197,203,198,180,192],
[158,191,0,182,171,175,197,181,212,198],
[169,165,158,0,145,192,183,159,183,195],
[170,189,169,195,0,219,181,194,201,202],
[160,143,165,148,121,0,155,154,195,153],
[137,137,143,157,159,185,0,168,166,179],
[156,142,159,181,146,186,172,0,180,184],
[161,160,128,157,139,145,174,160,0,170],
[155,148,142,145,138,187,161,156,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,146,173,174,153,176,155,175,176],
[183,0,157,199,189,166,187,180,177,168],
[194,183,0,193,202,184,177,174,199,170],
[167,141,147,0,186,158,160,158,166,151],
[166,151,138,154,0,150,144,141,144,138],
[187,174,156,182,190,0,157,166,168,181],
[164,153,163,180,196,183,0,162,167,171],
[185,160,166,182,199,174,178,0,198,181],
[165,163,141,174,196,172,173,142,0,159],
[164,172,170,189,202,159,169,159,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,184,172,182,177,166,172,176,171],
[168,0,180,162,174,173,172,171,155,186],
[156,160,0,166,154,174,169,161,160,175],
[168,178,174,0,170,175,169,179,164,171],
[158,166,186,170,0,176,165,172,174,169],
[163,167,166,165,164,0,160,166,171,178],
[174,168,171,171,175,180,0,176,167,168],
[168,169,179,161,168,174,164,0,173,174],
[164,185,180,176,166,169,173,167,0,190],
[169,154,165,169,171,162,172,166,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,162,163,165,172,181,168,156,180],
[174,0,181,169,165,178,180,167,175,175],
[178,159,0,176,166,170,180,184,163,183],
[177,171,164,0,161,168,183,173,166,181],
[175,175,174,179,0,180,177,175,162,183],
[168,162,170,172,160,0,172,165,169,179],
[159,160,160,157,163,168,0,159,162,175],
[172,173,156,167,165,175,181,0,162,184],
[184,165,177,174,178,171,178,178,0,177],
[160,165,157,159,157,161,165,156,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,178,176,184,169,182,181,182,179],
[185,0,169,175,186,166,171,177,192,179],
[162,171,0,174,157,153,176,171,168,154],
[164,165,166,0,170,146,164,169,173,134],
[156,154,183,170,0,157,174,165,192,165],
[171,174,187,194,183,0,196,187,195,170],
[158,169,164,176,166,144,0,157,180,157],
[159,163,169,171,175,153,183,0,176,163],
[158,148,172,167,148,145,160,164,0,149],
[161,161,186,206,175,170,183,177,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,162,156,165,169,166,169,165,175],
[169,0,176,161,169,159,163,161,161,178],
[178,164,0,159,175,165,171,174,172,181],
[184,179,181,0,173,168,176,174,176,172],
[175,171,165,167,0,180,169,168,164,176],
[171,181,175,172,160,0,170,168,162,165],
[174,177,169,164,171,170,0,159,161,165],
[171,179,166,166,172,172,181,0,172,175],
[175,179,168,164,176,178,179,168,0,183],
[165,162,159,168,164,175,175,165,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,147,171,180,175,166,161,157,145],
[185,0,169,188,201,176,169,185,177,171],
[193,171,0,192,202,188,184,194,163,184],
[169,152,148,0,179,167,173,161,133,153],
[160,139,138,161,0,168,154,161,159,160],
[165,164,152,173,172,0,183,170,167,156],
[174,171,156,167,186,157,0,167,156,156],
[179,155,146,179,179,170,173,0,161,166],
[183,163,177,207,181,173,184,179,0,163],
[195,169,156,187,180,184,184,174,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,164,157,160,153,138,170,148,159],
[191,0,179,173,184,190,170,186,184,176],
[176,161,0,175,163,170,166,168,166,173],
[183,167,165,0,166,173,168,180,169,180],
[180,156,177,174,0,171,166,176,171,178],
[187,150,170,167,169,0,153,178,169,177],
[202,170,174,172,174,187,0,166,186,184],
[170,154,172,160,164,162,174,0,176,166],
[192,156,174,171,169,171,154,164,0,179],
[181,164,167,160,162,163,156,174,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,174,165,161,185,166,142,183,206],
[178,0,182,166,182,168,177,153,162,185],
[166,158,0,155,161,174,153,161,178,172],
[175,174,185,0,154,174,191,161,196,198],
[179,158,179,186,0,182,199,166,193,217],
[155,172,166,166,158,0,178,173,174,173],
[174,163,187,149,141,162,0,151,184,190],
[198,187,179,179,174,167,189,0,212,195],
[157,178,162,144,147,166,156,128,0,178],
[134,155,168,142,123,167,150,145,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,188,173,174,178,166,178,167,174],
[148,0,160,150,158,183,150,152,131,157],
[152,180,0,156,158,173,159,164,156,165],
[167,190,184,0,173,203,168,178,164,173],
[166,182,182,167,0,196,170,181,173,178],
[162,157,167,137,144,0,152,135,143,168],
[174,190,181,172,170,188,0,169,171,163],
[162,188,176,162,159,205,171,0,158,174],
[173,209,184,176,167,197,169,182,0,167],
[166,183,175,167,162,172,177,166,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,167,155,141,156,141,167,166,149],
[184,0,192,172,172,180,158,171,174,169],
[173,148,0,173,164,165,160,168,161,151],
[185,168,167,0,174,174,165,156,172,149],
[199,168,176,166,0,168,148,173,166,166],
[184,160,175,166,172,0,178,163,173,155],
[199,182,180,175,192,162,0,179,191,171],
[173,169,172,184,167,177,161,0,168,155],
[174,166,179,168,174,167,149,172,0,152],
[191,171,189,191,174,185,169,185,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,158,168,170,148,180,156,166,162],
[155,0,170,154,172,156,174,152,175,168],
[182,170,0,175,163,161,184,178,165,191],
[172,186,165,0,171,169,194,165,190,171],
[170,168,177,169,0,159,199,168,191,177],
[192,184,179,171,181,0,190,176,168,198],
[160,166,156,146,141,150,0,144,143,177],
[184,188,162,175,172,164,196,0,160,185],
[174,165,175,150,149,172,197,180,0,171],
[178,172,149,169,163,142,163,155,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,163,163,171,152,172,164,166,161],
[169,0,189,164,160,164,175,169,170,180],
[177,151,0,166,151,156,162,170,153,175],
[177,176,174,0,168,175,163,183,177,187],
[169,180,189,172,0,169,171,175,173,184],
[188,176,184,165,171,0,176,185,169,201],
[168,165,178,177,169,164,0,177,162,171],
[176,171,170,157,165,155,163,0,167,208],
[174,170,187,163,167,171,178,173,0,190],
[179,160,165,153,156,139,169,132,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,185,185,180,177,171,181,175,180],
[182,0,189,178,195,184,163,173,183,175],
[155,151,0,166,165,166,167,150,161,174],
[155,162,174,0,165,183,154,149,171,169],
[160,145,175,175,0,166,163,172,169,179],
[163,156,174,157,174,0,165,154,162,164],
[169,177,173,186,177,175,0,180,169,165],
[159,167,190,191,168,186,160,0,160,170],
[165,157,179,169,171,178,171,180,0,175],
[160,165,166,171,161,176,175,170,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,160,175,157,164,165,178,164,172],
[170,0,173,170,180,161,169,170,167,158],
[180,167,0,185,171,167,180,166,178,168],
[165,170,155,0,168,153,179,172,162,161],
[183,160,169,172,0,157,170,177,168,170],
[176,179,173,187,183,0,169,175,176,172],
[175,171,160,161,170,171,0,170,167,171],
[162,170,174,168,163,165,170,0,171,177],
[176,173,162,178,172,164,173,169,0,168],
[168,182,172,179,170,168,169,163,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,248,297,183,203,227,159,204,202],
[136,0,135,204,184,137,182,115,90,227],
[92,205,0,184,94,140,160,93,160,160],
[43,136,156,0,116,137,159,113,90,136],
[157,156,246,224,0,180,178,111,157,201],
[137,203,200,203,160,0,226,181,204,227],
[113,158,180,181,162,114,0,92,180,202],
[181,225,247,227,229,159,248,0,157,248],
[136,250,180,250,183,136,160,183,0,272],
[138,113,180,204,139,113,138,92,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,158,172,166,157,172,155,162,175],
[182,0,159,174,170,178,171,168,177,168],
[182,181,0,187,165,179,180,184,162,164],
[168,166,153,0,159,150,159,150,153,165],
[174,170,175,181,0,168,180,163,157,163],
[183,162,161,190,172,0,182,157,165,162],
[168,169,160,181,160,158,0,158,161,170],
[185,172,156,190,177,183,182,0,169,176],
[178,163,178,187,183,175,179,171,0,167],
[165,172,176,175,177,178,170,164,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,162,159,146,160,172,167,157,157],
[176,0,167,157,149,152,195,155,159,163],
[178,173,0,147,174,176,183,159,166,174],
[181,183,193,0,163,170,193,160,162,190],
[194,191,166,177,0,173,201,160,174,180],
[180,188,164,170,167,0,184,164,155,180],
[168,145,157,147,139,156,0,136,144,166],
[173,185,181,180,180,176,204,0,159,180],
[183,181,174,178,166,185,196,181,0,205],
[183,177,166,150,160,160,174,160,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,178,182,162,190,168,154,181,177],
[171,0,169,170,151,172,158,166,166,183],
[162,171,0,164,152,173,159,159,163,177],
[158,170,176,0,158,176,155,162,169,184],
[178,189,188,182,0,187,170,169,171,187],
[150,168,167,164,153,0,154,173,157,167],
[172,182,181,185,170,186,0,180,187,195],
[186,174,181,178,171,167,160,0,188,196],
[159,174,177,171,169,183,153,152,0,180],
[163,157,163,156,153,173,145,144,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,165,145,167,151,168,164,159,160],
[188,0,167,159,155,169,170,183,142,169],
[175,173,0,153,162,170,170,173,160,171],
[195,181,187,0,187,167,182,173,176,186],
[173,185,178,153,0,162,177,178,180,178],
[189,171,170,173,178,0,173,179,153,180],
[172,170,170,158,163,167,0,175,152,164],
[176,157,167,167,162,161,165,0,145,180],
[181,198,180,164,160,187,188,195,0,170],
[180,171,169,154,162,160,176,160,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,164,170,167,157,175,168,150,172],
[181,0,168,187,175,170,166,199,182,183],
[176,172,0,191,165,170,180,186,174,170],
[170,153,149,0,162,146,171,161,185,155],
[173,165,175,178,0,156,168,174,176,175],
[183,170,170,194,184,0,174,180,171,172],
[165,174,160,169,172,166,0,176,179,181],
[172,141,154,179,166,160,164,0,161,167],
[190,158,166,155,164,169,161,179,0,165],
[168,157,170,185,165,168,159,173,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,183,174,156,174,173,186,165,161],
[155,0,174,154,139,171,159,177,143,153],
[157,166,0,158,146,161,170,164,152,160],
[166,186,182,0,164,170,161,195,171,163],
[184,201,194,176,0,169,166,195,155,163],
[166,169,179,170,171,0,162,189,142,169],
[167,181,170,179,174,178,0,193,164,181],
[154,163,176,145,145,151,147,0,130,160],
[175,197,188,169,185,198,176,210,0,199],
[179,187,180,177,177,171,159,180,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,181,179,179,198,178,171,200,164],
[160,0,182,171,171,174,177,189,197,165],
[159,158,0,181,154,175,170,160,167,162],
[161,169,159,0,154,174,177,179,170,151],
[161,169,186,186,0,192,189,173,187,170],
[142,166,165,166,148,0,168,167,165,153],
[162,163,170,163,151,172,0,160,174,156],
[169,151,180,161,167,173,180,0,181,168],
[140,143,173,170,153,175,166,159,0,155],
[176,175,178,189,170,187,184,172,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,177,170,177,183,171,166,186,196],
[170,0,165,180,153,184,170,167,168,200],
[163,175,0,167,157,171,182,157,144,175],
[170,160,173,0,148,165,160,169,167,169],
[163,187,183,192,0,155,184,168,173,181],
[157,156,169,175,185,0,162,161,173,182],
[169,170,158,180,156,178,0,170,169,181],
[174,173,183,171,172,179,170,0,177,181],
[154,172,196,173,167,167,171,163,0,174],
[144,140,165,171,159,158,159,159,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,176,168,158,172,147,167,166,190],
[196,0,188,169,166,177,160,183,191,207],
[164,152,0,150,160,174,153,168,162,201],
[172,171,190,0,157,163,173,178,178,186],
[182,174,180,183,0,192,164,188,189,199],
[168,163,166,177,148,0,170,154,157,187],
[193,180,187,167,176,170,0,167,168,207],
[173,157,172,162,152,186,173,0,181,187],
[174,149,178,162,151,183,172,159,0,194],
[150,133,139,154,141,153,133,153,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,183,190,164,170,185,165,162,169],
[165,0,151,150,136,160,168,144,153,156],
[157,189,0,168,156,171,162,152,150,165],
[150,190,172,0,167,177,170,168,169,170],
[176,204,184,173,0,171,175,173,159,186],
[170,180,169,163,169,0,165,153,159,165],
[155,172,178,170,165,175,0,164,169,180],
[175,196,188,172,167,187,176,0,179,181],
[178,187,190,171,181,181,171,161,0,172],
[171,184,175,170,154,175,160,159,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,168,159,187,188,154,175,187,171],
[163,0,150,154,189,183,167,173,187,170],
[172,190,0,164,195,166,180,166,197,167],
[181,186,176,0,201,196,162,186,210,198],
[153,151,145,139,0,178,166,158,175,156],
[152,157,174,144,162,0,141,151,173,154],
[186,173,160,178,174,199,0,183,196,165],
[165,167,174,154,182,189,157,0,188,173],
[153,153,143,130,165,167,144,152,0,169],
[169,170,173,142,184,186,175,167,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,171,184,176,185,181,188,194,190],
[170,0,195,182,169,166,159,195,201,166],
[169,145,0,171,160,168,181,181,174,160],
[156,158,169,0,159,166,157,169,183,178],
[164,171,180,181,0,174,167,165,188,157],
[155,174,172,174,166,0,182,176,178,181],
[159,181,159,183,173,158,0,174,175,178],
[152,145,159,171,175,164,166,0,167,161],
[146,139,166,157,152,162,165,173,0,166],
[150,174,180,162,183,159,162,179,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,161,167,136,142,136,140,167,154],
[168,0,170,164,152,152,159,154,167,169],
[179,170,0,180,149,156,137,157,164,175],
[173,176,160,0,159,166,154,165,165,179],
[204,188,191,181,0,180,161,171,192,199],
[198,188,184,174,160,0,159,166,179,190],
[204,181,203,186,179,181,0,160,174,194],
[200,186,183,175,169,174,180,0,179,191],
[173,173,176,175,148,161,166,161,0,185],
[186,171,165,161,141,150,146,149,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,175,204,182,179,173,185,161,186],
[146,0,155,162,170,142,173,139,150,145],
[165,185,0,187,160,167,187,177,155,175],
[136,178,153,0,152,147,174,160,160,164],
[158,170,180,188,0,168,183,178,168,166],
[161,198,173,193,172,0,195,184,175,160],
[167,167,153,166,157,145,0,162,146,167],
[155,201,163,180,162,156,178,0,162,169],
[179,190,185,180,172,165,194,178,0,181],
[154,195,165,176,174,180,173,171,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,171,205,154,161,164,160,189,183],
[167,0,181,209,176,187,193,179,197,180],
[169,159,0,173,175,188,160,150,161,188],
[135,131,167,0,143,162,129,125,168,141],
[186,164,165,197,0,203,187,164,190,177],
[179,153,152,178,137,0,176,172,184,171],
[176,147,180,211,153,164,0,151,178,177],
[180,161,190,215,176,168,189,0,195,182],
[151,143,179,172,150,156,162,145,0,135],
[157,160,152,199,163,169,163,158,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,163,159,168,169,175,167,199,160],
[164,0,162,153,184,130,159,171,155,170],
[177,178,0,153,173,166,160,179,189,172],
[181,187,187,0,188,170,187,193,180,186],
[172,156,167,152,0,151,164,191,169,169],
[171,210,174,170,189,0,182,190,189,182],
[165,181,180,153,176,158,0,188,182,161],
[173,169,161,147,149,150,152,0,159,160],
[141,185,151,160,171,151,158,181,0,172],
[180,170,168,154,171,158,179,180,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,172,150,161,174,179,171,176,176],
[170,0,166,164,160,159,168,182,165,189],
[168,174,0,155,145,168,172,162,166,171],
[190,176,185,0,169,169,170,190,194,216],
[179,180,195,171,0,166,177,188,188,181],
[166,181,172,171,174,0,163,176,173,179],
[161,172,168,170,163,177,0,172,161,189],
[169,158,178,150,152,164,168,0,155,170],
[164,175,174,146,152,167,179,185,0,180],
[164,151,169,124,159,161,151,170,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,158,163,166,178,174,171,174,169],
[174,0,183,169,178,165,163,166,170,180],
[182,157,0,169,172,172,163,168,170,181],
[177,171,171,0,172,180,177,168,166,175],
[174,162,168,168,0,174,157,152,151,174],
[162,175,168,160,166,0,161,172,173,191],
[166,177,177,163,183,179,0,182,160,176],
[169,174,172,172,188,168,158,0,172,181],
[166,170,170,174,189,167,180,168,0,159],
[171,160,159,165,166,149,164,159,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,176,175,204,227,161,183,173,178],
[152,0,193,145,164,207,159,147,160,95],
[164,147,0,162,156,194,165,139,170,147],
[165,195,178,0,184,203,158,159,170,133],
[136,176,184,156,0,201,154,144,176,152],
[113,133,146,137,139,0,141,120,123,115],
[179,181,175,182,186,199,0,136,190,158],
[157,193,201,181,196,220,204,0,175,173],
[167,180,170,170,164,217,150,165,0,104],
[162,245,193,207,188,225,182,167,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,168,193,185,177,157,168,177,181],
[159,0,149,175,172,164,141,152,175,144],
[172,191,0,192,176,166,176,182,182,175],
[147,165,148,0,159,150,144,156,158,155],
[155,168,164,181,0,157,162,169,169,164],
[163,176,174,190,183,0,173,177,184,178],
[183,199,164,196,178,167,0,181,191,170],
[172,188,158,184,171,163,159,0,173,171],
[163,165,158,182,171,156,149,167,0,159],
[159,196,165,185,176,162,170,169,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,195,176,145,179,167,169,157,159],
[177,0,188,166,143,165,162,161,143,170],
[145,152,0,159,143,152,160,152,147,150],
[164,174,181,0,150,151,153,156,168,153],
[195,197,197,190,0,178,188,180,171,162],
[161,175,188,189,162,0,167,169,154,165],
[173,178,180,187,152,173,0,152,166,154],
[171,179,188,184,160,171,188,0,171,162],
[183,197,193,172,169,186,174,169,0,182],
[181,170,190,187,178,175,186,178,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,153,167,180,185,175,174,192,174],
[162,0,173,181,176,180,166,176,178,181],
[187,167,0,172,168,182,193,176,189,185],
[173,159,168,0,163,192,172,162,183,177],
[160,164,172,177,0,162,182,152,156,175],
[155,160,158,148,178,0,167,167,182,174],
[165,174,147,168,158,173,0,163,180,174],
[166,164,164,178,188,173,177,0,172,188],
[148,162,151,157,184,158,160,168,0,170],
[166,159,155,163,165,166,166,152,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,170,173,200,183,176,166,158,175],
[172,0,185,180,181,195,170,167,156,170],
[170,155,0,167,196,202,168,178,171,171],
[167,160,173,0,179,199,165,184,172,174],
[140,159,144,161,0,182,157,154,157,177],
[157,145,138,141,158,0,148,147,142,153],
[164,170,172,175,183,192,0,157,151,175],
[174,173,162,156,186,193,183,0,195,165],
[182,184,169,168,183,198,189,145,0,165],
[165,170,169,166,163,187,165,175,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,195,171,170,168,188,179,166,170],
[164,0,172,142,162,164,162,160,161,162],
[145,168,0,142,157,158,170,160,152,166],
[169,198,198,0,171,169,181,182,183,177],
[170,178,183,169,0,173,182,178,170,176],
[172,176,182,171,167,0,178,180,165,180],
[152,178,170,159,158,162,0,167,166,164],
[161,180,180,158,162,160,173,0,165,178],
[174,179,188,157,170,175,174,175,0,175],
[170,178,174,163,164,160,176,162,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,176,165,182,175,177,171,188,173],
[165,0,189,181,188,188,175,180,186,167],
[164,151,0,172,176,164,172,163,171,153],
[175,159,168,0,174,163,167,163,168,161],
[158,152,164,166,0,168,171,153,167,170],
[165,152,176,177,172,0,180,163,186,165],
[163,165,168,173,169,160,0,158,163,157],
[169,160,177,177,187,177,182,0,175,164],
[152,154,169,172,173,154,177,165,0,147],
[167,173,187,179,170,175,183,176,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,177,188,159,160,189,159,184,184],
[162,0,161,176,165,148,170,155,175,176],
[163,179,0,173,170,165,170,175,182,186],
[152,164,167,0,166,161,169,161,190,163],
[181,175,170,174,0,164,174,167,174,178],
[180,192,175,179,176,0,197,169,184,194],
[151,170,170,171,166,143,0,160,181,174],
[181,185,165,179,173,171,180,0,189,198],
[156,165,158,150,166,156,159,151,0,154],
[156,164,154,177,162,146,166,142,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,175,204,169,173,206,217,186,165],
[141,0,147,144,147,151,153,170,141,134],
[165,193,0,177,186,162,186,197,215,160],
[136,196,163,0,154,146,175,174,192,136],
[171,193,154,186,0,164,178,200,200,148],
[167,189,178,194,176,0,173,203,206,175],
[134,187,154,165,162,167,0,177,166,149],
[123,170,143,166,140,137,163,0,150,132],
[154,199,125,148,140,134,174,190,0,150],
[175,206,180,204,192,165,191,208,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,153,154,156,176,149,154,145,171],
[171,0,157,167,147,179,168,155,168,174],
[187,183,0,171,166,185,170,158,166,199],
[186,173,169,0,179,193,178,167,157,190],
[184,193,174,161,0,189,187,157,150,186],
[164,161,155,147,151,0,177,143,145,170],
[191,172,170,162,153,163,0,151,152,176],
[186,185,182,173,183,197,189,0,170,195],
[195,172,174,183,190,195,188,170,0,191],
[169,166,141,150,154,170,164,145,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,179,168,168,155,189,178,177,169],
[158,0,151,169,159,148,173,192,171,168],
[161,189,0,159,181,163,166,177,168,154],
[172,171,181,0,169,161,184,184,174,177],
[172,181,159,171,0,163,171,172,174,164],
[185,192,177,179,177,0,176,190,157,176],
[151,167,174,156,169,164,0,180,159,152],
[162,148,163,156,168,150,160,0,158,160],
[163,169,172,166,166,183,181,182,0,171],
[171,172,186,163,176,164,188,180,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,153,189,174,171,150,200,173,162,173],
[187,0,202,208,180,185,213,158,192,183],
[151,138,0,187,156,167,189,164,164,187],
[166,132,153,0,157,162,162,164,169,194],
[169,160,184,183,0,158,170,169,174,164],
[190,155,173,178,182,0,186,176,163,153],
[140,127,151,178,170,154,0,148,149,162],
[167,182,176,176,171,164,192,0,171,217],
[178,148,176,171,166,177,191,169,0,169],
[167,157,153,146,176,187,178,123,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,172,168,155,162,163,162,155,156],
[167,0,166,178,160,163,167,151,160,149],
[168,174,0,191,161,171,176,172,177,172],
[172,162,149,0,158,163,161,143,159,171],
[185,180,179,182,0,171,167,180,173,172],
[178,177,169,177,169,0,173,158,175,162],
[177,173,164,179,173,167,0,169,164,164],
[178,189,168,197,160,182,171,0,172,188],
[185,180,163,181,167,165,176,168,0,168],
[184,191,168,169,168,178,176,152,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,177,154,171,178,171,169,169,158],
[159,0,161,154,145,154,165,153,153,153],
[163,179,0,163,158,169,165,169,170,150],
[186,186,177,0,159,170,179,163,175,172],
[169,195,182,181,0,185,177,174,176,173],
[162,186,171,170,155,0,161,166,166,154],
[169,175,175,161,163,179,0,161,167,166],
[171,187,171,177,166,174,179,0,166,155],
[171,187,170,165,164,174,173,174,0,164],
[182,187,190,168,167,186,174,185,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,185,177,182,176,170,172,191],
[174,0,170,188,180,179,177,180,181,184],
[171,170,0,184,179,182,172,177,183,182],
[155,152,156,0,161,154,162,168,166,167],
[163,160,161,179,0,167,163,167,168,181],
[158,161,158,186,173,0,168,173,165,175],
[164,163,168,178,177,172,0,165,167,172],
[170,160,163,172,173,167,175,0,174,183],
[168,159,157,174,172,175,173,166,0,178],
[149,156,158,173,159,165,168,157,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,170,157,183,166,166,167,163,165],
[168,0,185,171,178,178,170,165,215,179],
[170,155,0,172,153,135,162,139,151,159],
[183,169,168,0,164,163,186,153,176,170],
[157,162,187,176,0,180,185,179,185,183],
[174,162,205,177,160,0,180,167,165,181],
[174,170,178,154,155,160,0,157,166,142],
[173,175,201,187,161,173,183,0,167,168],
[177,125,189,164,155,175,174,173,0,170],
[175,161,181,170,157,159,198,172,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,161,188,163,162,159,162,162,183],
[166,0,176,199,164,170,154,174,153,178],
[179,164,0,204,168,167,152,174,166,185],
[152,141,136,0,154,147,167,149,167,168],
[177,176,172,186,0,170,162,179,163,173],
[178,170,173,193,170,0,157,169,148,191],
[181,186,188,173,178,183,0,169,193,193],
[178,166,166,191,161,171,171,0,170,186],
[178,187,174,173,177,192,147,170,0,180],
[157,162,155,172,167,149,147,154,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,168,178,161,180,167,167,180,173],
[167,0,174,174,180,175,163,171,172,171],
[172,166,0,173,174,175,173,165,177,178],
[162,166,167,0,165,173,169,163,177,180],
[179,160,166,175,0,169,160,166,174,162],
[160,165,165,167,171,0,155,161,168,165],
[173,177,167,171,180,185,0,165,183,172],
[173,169,175,177,174,179,175,0,181,170],
[160,168,163,163,166,172,157,159,0,165],
[167,169,162,160,178,175,168,170,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,174,187,170,192,207,204,180,188],
[152,0,161,166,154,156,188,167,160,170],
[166,179,0,189,186,179,207,180,172,197],
[153,174,151,0,153,148,186,176,161,167],
[170,186,154,187,0,172,185,148,177,178],
[148,184,161,192,168,0,200,152,163,177],
[133,152,133,154,155,140,0,147,151,150],
[136,173,160,164,192,188,193,0,179,178],
[160,180,168,179,163,177,189,161,0,169],
[152,170,143,173,162,163,190,162,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,192,184,163,189,182,175,190,187],
[151,0,187,160,145,165,174,147,158,174],
[148,153,0,167,156,159,162,133,152,171],
[156,180,173,0,161,156,158,159,185,163],
[177,195,184,179,0,168,174,164,178,189],
[151,175,181,184,172,0,165,160,164,185],
[158,166,178,182,166,175,0,154,156,177],
[165,193,207,181,176,180,186,0,177,186],
[150,182,188,155,162,176,184,163,0,163],
[153,166,169,177,151,155,163,154,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,193,181,207,175,170,184,184,180],
[161,0,180,171,169,162,159,150,167,158],
[147,160,0,155,185,154,146,168,159,168],
[159,169,185,0,197,163,158,164,185,159],
[133,171,155,143,0,153,142,167,167,163],
[165,178,186,177,187,0,170,175,175,186],
[170,181,194,182,198,170,0,178,166,184],
[156,190,172,176,173,165,162,0,186,167],
[156,173,181,155,173,165,174,154,0,160],
[160,182,172,181,177,154,156,173,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,156,145,159,136,146,145,134,173],
[189,0,162,154,166,147,179,136,174,180],
[184,178,0,135,159,173,192,130,216,177],
[195,186,205,0,204,162,187,171,200,190],
[181,174,181,136,0,156,157,149,188,191],
[204,193,167,178,184,0,195,157,173,197],
[194,161,148,153,183,145,0,148,164,195],
[195,204,210,169,191,183,192,0,188,180],
[206,166,124,140,152,167,176,152,0,157],
[167,160,163,150,149,143,145,160,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,169,164,183,160,157,166,160,168],
[178,0,173,169,184,161,177,157,165,185],
[171,167,0,176,164,167,170,164,156,182],
[176,171,164,0,174,164,158,151,159,168],
[157,156,176,166,0,159,156,151,142,162],
[180,179,173,176,181,0,168,162,151,178],
[183,163,170,182,184,172,0,173,156,190],
[174,183,176,189,189,178,167,0,171,168],
[180,175,184,181,198,189,184,169,0,192],
[172,155,158,172,178,162,150,172,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,165,185,183,163,160,159,146,170],
[176,0,182,181,207,171,167,182,169,169],
[175,158,0,185,202,150,164,155,173,167],
[155,159,155,0,161,149,153,149,147,152],
[157,133,138,179,0,142,144,167,157,151],
[177,169,190,191,198,0,184,166,160,191],
[180,173,176,187,196,156,0,184,158,183],
[181,158,185,191,173,174,156,0,168,191],
[194,171,167,193,183,180,182,172,0,188],
[170,171,173,188,189,149,157,149,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,167,179,181,173,175,190,173,170],
[158,0,169,172,165,162,162,182,166,171],
[173,171,0,178,182,173,174,174,167,168],
[161,168,162,0,164,154,167,178,167,160],
[159,175,158,176,0,170,175,159,164,159],
[167,178,167,186,170,0,177,175,171,160],
[165,178,166,173,165,163,0,166,165,163],
[150,158,166,162,181,165,174,0,164,158],
[167,174,173,173,176,169,175,176,0,159],
[170,169,172,180,181,180,177,182,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,156,161,161,165,163,157,160,164],
[172,0,164,181,169,178,180,172,163,184],
[184,176,0,175,176,192,184,177,168,188],
[179,159,165,0,166,177,182,179,183,158],
[179,171,164,174,0,192,193,180,186,180],
[175,162,148,163,148,0,165,170,166,169],
[177,160,156,158,147,175,0,167,166,152],
[183,168,163,161,160,170,173,0,158,157],
[180,177,172,157,154,174,174,182,0,166],
[176,156,152,182,160,171,188,183,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,175,166,162,195,171,155,195,167],
[184,0,165,166,192,193,175,170,201,192],
[165,175,0,164,174,202,159,181,198,170],
[174,174,176,0,171,196,171,163,184,176],
[178,148,166,169,0,200,174,178,201,176],
[145,147,138,144,140,0,144,138,167,163],
[169,165,181,169,166,196,0,177,197,193],
[185,170,159,177,162,202,163,0,183,169],
[145,139,142,156,139,173,143,157,0,150],
[173,148,170,164,164,177,147,171,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,154,144,143,171,150,160,148,163],
[186,0,168,160,162,186,151,164,166,165],
[186,172,0,156,176,195,161,178,174,187],
[196,180,184,0,173,199,166,179,175,185],
[197,178,164,167,0,181,154,162,155,174],
[169,154,145,141,159,0,156,143,150,151],
[190,189,179,174,186,184,0,171,179,170],
[180,176,162,161,178,197,169,0,166,170],
[192,174,166,165,185,190,161,174,0,176],
[177,175,153,155,166,189,170,170,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,127,70,172,145,101,170,141,130],
[229,0,182,214,204,160,144,157,155,159],
[213,158,0,198,173,129,100,198,155,156],
[270,126,142,0,198,172,170,170,170,169],
[168,136,167,142,0,169,101,182,183,143],
[195,180,211,168,171,0,157,195,196,168],
[239,196,240,170,239,183,0,210,180,185],
[170,183,142,170,158,145,130,0,141,172],
[199,185,185,170,157,144,160,199,0,159],
[210,181,184,171,197,172,155,168,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,171,153,194,173,176,195,161,148],
[191,0,160,166,156,154,162,173,144,178],
[169,180,0,183,181,173,147,168,181,150],
[187,174,157,0,173,152,142,175,147,139],
[146,184,159,167,0,131,138,166,156,178],
[167,186,167,188,209,0,186,201,181,186],
[164,178,193,198,202,154,0,184,141,177],
[145,167,172,165,174,139,156,0,140,163],
[179,196,159,193,184,159,199,200,0,172],
[192,162,190,201,162,154,163,177,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,156,156,169,178,178,168,176,182],
[155,0,170,164,170,181,182,161,176,185],
[184,170,0,177,176,166,174,169,177,173],
[184,176,163,0,185,177,189,165,174,182],
[171,170,164,155,0,165,179,171,173,174],
[162,159,174,163,175,0,186,161,178,175],
[162,158,166,151,161,154,0,146,154,170],
[172,179,171,175,169,179,194,0,170,189],
[164,164,163,166,167,162,186,170,0,172],
[158,155,167,158,166,165,170,151,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,145,158,151,168,144,161,150,162],
[180,0,171,165,154,169,163,160,161,180],
[195,169,0,156,160,182,164,166,180,167],
[182,175,184,0,174,184,165,172,179,175],
[189,186,180,166,0,177,164,171,159,180],
[172,171,158,156,163,0,150,168,150,184],
[196,177,176,175,176,190,0,177,161,188],
[179,180,174,168,169,172,163,0,172,163],
[190,179,160,161,181,190,179,168,0,173],
[178,160,173,165,160,156,152,177,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,190,178,180,168,177,191,172,166],
[172,0,197,185,188,156,191,164,165,162],
[150,143,0,170,150,182,169,171,166,176],
[162,155,170,0,169,154,198,162,157,156],
[160,152,190,171,0,176,195,167,167,169],
[172,184,158,186,164,0,203,176,174,150],
[163,149,171,142,145,137,0,151,143,140],
[149,176,169,178,173,164,189,0,175,148],
[168,175,174,183,173,166,197,165,0,184],
[174,178,164,184,171,190,200,192,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,170,183,183,173,197,175,185,172],
[161,0,169,176,157,168,180,186,162,158],
[170,171,0,170,155,162,178,166,171,176],
[157,164,170,0,150,166,172,182,167,171],
[157,183,185,190,0,166,194,194,172,186],
[167,172,178,174,174,0,178,190,170,186],
[143,160,162,168,146,162,0,149,166,163],
[165,154,174,158,146,150,191,0,180,168],
[155,178,169,173,168,170,174,160,0,172],
[168,182,164,169,154,154,177,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,154,167,204,151,173,157,169,173],
[173,0,165,157,184,148,155,155,171,170],
[186,175,0,176,189,169,172,166,177,176],
[173,183,164,0,182,183,179,172,166,170],
[136,156,151,158,0,137,157,136,139,149],
[189,192,171,157,203,0,191,158,186,195],
[167,185,168,161,183,149,0,151,172,198],
[183,185,174,168,204,182,189,0,185,190],
[171,169,163,174,201,154,168,155,0,161],
[167,170,164,170,191,145,142,150,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,173,138,163,150,157,134,136,157],
[196,0,187,172,180,178,172,167,170,179],
[167,153,0,162,170,156,184,149,181,181],
[202,168,178,0,192,182,180,182,177,186],
[177,160,170,148,0,147,175,151,158,169],
[190,162,184,158,193,0,188,175,155,187],
[183,168,156,160,165,152,0,130,179,160],
[206,173,191,158,189,165,210,0,186,180],
[204,170,159,163,182,185,161,154,0,188],
[183,161,159,154,171,153,180,160,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,165,172,166,183,152,152,161,152],
[172,0,176,192,177,185,181,166,178,171],
[175,164,0,182,183,182,171,178,177,175],
[168,148,158,0,161,173,161,156,168,152],
[174,163,157,179,0,172,161,162,167,169],
[157,155,158,167,168,0,153,163,167,161],
[188,159,169,179,179,187,0,168,167,164],
[188,174,162,184,178,177,172,0,159,173],
[179,162,163,172,173,173,173,181,0,171],
[188,169,165,188,171,179,176,167,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,174,190,169,175,142,172,163,177],
[188,0,191,186,201,155,163,174,157,184],
[166,149,0,157,172,164,152,146,161,158],
[150,154,183,0,183,162,144,155,155,165],
[171,139,168,157,0,133,139,163,149,169],
[165,185,176,178,207,0,177,152,173,171],
[198,177,188,196,201,163,0,155,182,197],
[168,166,194,185,177,188,185,0,156,182],
[177,183,179,185,191,167,158,184,0,193],
[163,156,182,175,171,169,143,158,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,178,152,165,174,170,170,181,157],
[162,0,168,166,180,158,164,162,161,174],
[162,172,0,169,173,182,150,178,161,154],
[188,174,171,0,177,186,184,180,180,169],
[175,160,167,163,0,172,156,161,174,162],
[166,182,158,154,168,0,164,162,165,171],
[170,176,190,156,184,176,0,172,166,175],
[170,178,162,160,179,178,168,0,174,162],
[159,179,179,160,166,175,174,166,0,160],
[183,166,186,171,178,169,165,178,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,182,190,148,189,180,160,175,154],
[192,0,164,192,186,198,215,171,177,149],
[158,176,0,184,182,171,179,184,189,173],
[150,148,156,0,163,191,142,122,175,178],
[192,154,158,177,0,194,178,146,139,162],
[151,142,169,149,146,0,152,165,144,142],
[160,125,161,198,162,188,0,142,176,144],
[180,169,156,218,194,175,198,0,192,172],
[165,163,151,165,201,196,164,148,0,153],
[186,191,167,162,178,198,196,168,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,163,155,157,156,153,156,156,159],
[188,0,193,172,170,191,176,175,177,175],
[177,147,0,143,143,162,167,161,152,157],
[185,168,197,0,174,174,183,176,176,178],
[183,170,197,166,0,174,175,187,184,181],
[184,149,178,166,166,0,172,162,167,167],
[187,164,173,157,165,168,0,162,166,156],
[184,165,179,164,153,178,178,0,158,172],
[184,163,188,164,156,173,174,182,0,173],
[181,165,183,162,159,173,184,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,164,167,159,169,165,180,177,162],
[173,0,177,183,156,168,175,184,178,159],
[176,163,0,177,182,188,184,181,169,180],
[173,157,163,0,167,171,167,173,171,175],
[181,184,158,173,0,172,178,188,178,173],
[171,172,152,169,168,0,176,176,167,163],
[175,165,156,173,162,164,0,184,173,178],
[160,156,159,167,152,164,156,0,164,158],
[163,162,171,169,162,173,167,176,0,168],
[178,181,160,165,167,177,162,182,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,173,158,161,181,157,168,186,173],
[169,0,171,164,163,167,152,171,167,131],
[167,169,0,169,158,164,166,171,191,159],
[182,176,171,0,165,179,159,168,170,158],
[179,177,182,175,0,176,166,165,173,170],
[159,173,176,161,164,0,162,161,178,160],
[183,188,174,181,174,178,0,153,170,159],
[172,169,169,172,175,179,187,0,200,162],
[154,173,149,170,167,162,170,140,0,152],
[167,209,181,182,170,180,181,178,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,157,150,179,161,176,162,166,164],
[183,0,179,166,189,172,180,177,174,173],
[183,161,0,156,172,172,184,170,173,169],
[190,174,184,0,190,166,188,186,194,185],
[161,151,168,150,0,172,162,163,173,175],
[179,168,168,174,168,0,174,168,174,177],
[164,160,156,152,178,166,0,163,160,169],
[178,163,170,154,177,172,177,0,178,177],
[174,166,167,146,167,166,180,162,0,170],
[176,167,171,155,165,163,171,163,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,187,168,194,186,215,187,178,220],
[126,0,167,166,160,166,143,167,124,173],
[153,173,0,135,181,184,173,160,141,192],
[172,174,205,0,185,169,211,158,169,186],
[146,180,159,155,0,181,170,139,137,163],
[154,174,156,171,159,0,168,157,164,195],
[125,197,167,129,170,172,0,133,137,176],
[153,173,180,182,201,183,207,0,166,173],
[162,216,199,171,203,176,203,174,0,193],
[120,167,148,154,177,145,164,167,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,175,158,185,180,179,175,172,194],
[162,0,160,156,168,167,171,175,170,174],
[165,180,0,175,176,178,183,178,196,194],
[182,184,165,0,184,174,181,186,184,189],
[155,172,164,156,0,167,163,169,164,177],
[160,173,162,166,173,0,170,175,169,173],
[161,169,157,159,177,170,0,182,158,176],
[165,165,162,154,171,165,158,0,167,181],
[168,170,144,156,176,171,182,173,0,183],
[146,166,146,151,163,167,164,159,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,191,169,193,174,184,179,176,136],
[193,0,202,187,204,160,188,192,194,174],
[149,138,0,148,178,154,167,175,156,163],
[171,153,192,0,193,173,190,200,185,165],
[147,136,162,147,0,146,161,163,133,111],
[166,180,186,167,194,0,177,191,194,176],
[156,152,173,150,179,163,0,161,172,153],
[161,148,165,140,177,149,179,0,185,152],
[164,146,184,155,207,146,168,155,0,168],
[204,166,177,175,229,164,187,188,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,159,177,180,167,176,176,188,169],
[146,0,140,160,148,146,158,145,164,146],
[181,200,0,177,183,173,166,171,186,164],
[163,180,163,0,175,179,181,167,184,180],
[160,192,157,165,0,169,169,168,178,175],
[173,194,167,161,171,0,162,181,174,165],
[164,182,174,159,171,178,0,163,178,167],
[164,195,169,173,172,159,177,0,190,172],
[152,176,154,156,162,166,162,150,0,160],
[171,194,176,160,165,175,173,168,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,183,184,181,170,156,163,175,177],
[155,0,172,151,159,144,149,143,159,167],
[157,168,0,175,174,162,175,164,174,165],
[156,189,165,0,169,165,168,158,174,177],
[159,181,166,171,0,169,157,154,170,173],
[170,196,178,175,171,0,167,172,170,192],
[184,191,165,172,183,173,0,184,185,185],
[177,197,176,182,186,168,156,0,189,201],
[165,181,166,166,170,170,155,151,0,187],
[163,173,175,163,167,148,155,139,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,185,185,175,192,201,166,169,169],
[148,0,156,141,174,164,164,148,156,169],
[155,184,0,173,182,180,195,150,164,180],
[155,199,167,0,180,175,184,159,171,170],
[165,166,158,160,0,176,170,150,152,162],
[148,176,160,165,164,0,163,167,153,161],
[139,176,145,156,170,177,0,157,143,163],
[174,192,190,181,190,173,183,0,160,180],
[171,184,176,169,188,187,197,180,0,189],
[171,171,160,170,178,179,177,160,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,173,153,179,163,169,162,186],
[174,0,157,187,171,175,168,166,170,189],
[171,183,0,173,150,196,191,180,172,207],
[167,153,167,0,160,178,161,158,159,181],
[187,169,190,180,0,211,184,200,191,209],
[161,165,144,162,129,0,179,160,150,165],
[177,172,149,179,156,161,0,160,178,201],
[171,174,160,182,140,180,180,0,173,178],
[178,170,168,181,149,190,162,167,0,190],
[154,151,133,159,131,175,139,162,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,150,169,174,171,162,171,162,169],
[180,0,176,163,189,176,169,174,190,178],
[190,164,0,187,179,171,169,168,178,172],
[171,177,153,0,169,152,168,144,161,168],
[166,151,161,171,0,180,172,153,175,180],
[169,164,169,188,160,0,158,159,164,177],
[178,171,171,172,168,182,0,159,170,158],
[169,166,172,196,187,181,181,0,181,185],
[178,150,162,179,165,176,170,159,0,167],
[171,162,168,172,160,163,182,155,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,188,169,179,166,166,173,175,201],
[176,0,166,179,158,175,165,180,169,170],
[152,174,0,187,177,175,176,174,177,191],
[171,161,153,0,157,167,154,168,172,165],
[161,182,163,183,0,179,177,189,178,180],
[174,165,165,173,161,0,163,171,178,172],
[174,175,164,186,163,177,0,172,164,169],
[167,160,166,172,151,169,168,0,169,158],
[165,171,163,168,162,162,176,171,0,176],
[139,170,149,175,160,168,171,182,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,175,172,168,182,176,174,161,174],
[173,0,166,166,155,170,173,175,160,179],
[165,174,0,175,169,189,184,178,174,180],
[168,174,165,0,174,176,176,176,161,184],
[172,185,171,166,0,186,171,168,172,174],
[158,170,151,164,154,0,157,170,153,173],
[164,167,156,164,169,183,0,179,157,186],
[166,165,162,164,172,170,161,0,164,178],
[179,180,166,179,168,187,183,176,0,194],
[166,161,160,156,166,167,154,162,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,173,164,211,178,167,206,152,195],
[152,0,181,155,194,164,159,179,168,159],
[167,159,0,171,198,188,172,195,173,193],
[176,185,169,0,200,171,182,201,172,174],
[129,146,142,140,0,134,145,173,136,140],
[162,176,152,169,206,0,167,190,140,178],
[173,181,168,158,195,173,0,178,184,185],
[134,161,145,139,167,150,162,0,155,164],
[188,172,167,168,204,200,156,185,0,171],
[145,181,147,166,200,162,155,176,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,191,164,174,172,159,171,170,171],
[178,0,188,175,184,173,186,173,169,201],
[149,152,0,163,162,163,172,155,147,155],
[176,165,177,0,180,183,173,183,169,181],
[166,156,178,160,0,167,168,166,161,169],
[168,167,177,157,173,0,169,160,165,157],
[181,154,168,167,172,171,0,167,168,167],
[169,167,185,157,174,180,173,0,164,184],
[170,171,193,171,179,175,172,176,0,176],
[169,139,185,159,171,183,173,156,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,171,188,163,171,172,174,166,166],
[177,0,187,183,170,174,186,188,164,199],
[169,153,0,169,163,159,173,166,170,173],
[152,157,171,0,152,157,175,163,150,165],
[177,170,177,188,0,182,171,184,174,181],
[169,166,181,183,158,0,165,169,174,171],
[168,154,167,165,169,175,0,181,164,173],
[166,152,174,177,156,171,159,0,164,160],
[174,176,170,190,166,166,176,176,0,189],
[174,141,167,175,159,169,167,180,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,157,159,165,156,183,185,190,170],
[186,0,176,172,150,178,177,171,195,172],
[183,164,0,180,168,167,170,183,204,167],
[181,168,160,0,164,166,186,196,199,166],
[175,190,172,176,0,167,190,183,196,183],
[184,162,173,174,173,0,182,188,195,167],
[157,163,170,154,150,158,0,171,177,176],
[155,169,157,144,157,152,169,0,180,165],
[150,145,136,141,144,145,163,160,0,160],
[170,168,173,174,157,173,164,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,159,150,171,163,185,200,150,179],
[148,0,177,147,131,127,152,161,147,139],
[181,163,0,156,162,169,189,189,125,162],
[190,193,184,0,169,157,181,191,192,169],
[169,209,178,171,0,147,183,221,171,179],
[177,213,171,183,193,0,206,160,198,148],
[155,188,151,159,157,134,0,162,114,105],
[140,179,151,149,119,180,178,0,188,128],
[190,193,215,148,169,142,226,152,0,176],
[161,201,178,171,161,192,235,212,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,189,192,186,181,197,176,190,159],
[150,0,163,167,177,160,156,160,151,128],
[151,177,0,173,180,194,173,168,189,169],
[148,173,167,0,171,161,168,156,183,147],
[154,163,160,169,0,182,182,170,191,152],
[159,180,146,179,158,0,179,166,162,153],
[143,184,167,172,158,161,0,163,161,160],
[164,180,172,184,170,174,177,0,189,156],
[150,189,151,157,149,178,179,151,0,170],
[181,212,171,193,188,187,180,184,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,180,184,167,173,192,156,171,175],
[163,0,174,182,159,164,187,152,144,171],
[160,166,0,156,170,151,175,167,161,170],
[156,158,184,0,169,158,190,167,147,157],
[173,181,170,171,0,162,178,163,154,148],
[167,176,189,182,178,0,180,181,171,168],
[148,153,165,150,162,160,0,163,158,142],
[184,188,173,173,177,159,177,0,154,182],
[169,196,179,193,186,169,182,186,0,170],
[165,169,170,183,192,172,198,158,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,165,175,175,171,191,181,178,184],
[160,0,155,149,166,163,164,166,174,170],
[175,185,0,170,175,160,175,164,171,168],
[165,191,170,0,181,186,184,172,176,179],
[165,174,165,159,0,155,177,166,168,168],
[169,177,180,154,185,0,171,175,168,176],
[149,176,165,156,163,169,0,167,173,172],
[159,174,176,168,174,165,173,0,174,171],
[162,166,169,164,172,172,167,166,0,166],
[156,170,172,161,172,164,168,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,151,148,153,175,163,155,172,164],
[169,0,171,184,170,174,141,175,170,167],
[189,169,0,167,169,190,159,183,174,166],
[192,156,173,0,149,180,147,163,168,188],
[187,170,171,191,0,229,173,175,176,205],
[165,166,150,160,111,0,126,150,153,155],
[177,199,181,193,167,214,0,182,177,173],
[185,165,157,177,165,190,158,0,172,159],
[168,170,166,172,164,187,163,168,0,170],
[176,173,174,152,135,185,167,181,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,171,153,181,175,162,165,170,180],
[178,0,167,167,176,182,161,189,162,171],
[169,173,0,171,182,183,190,183,169,171],
[187,173,169,0,196,190,185,185,186,181],
[159,164,158,144,0,156,174,157,156,150],
[165,158,157,150,184,0,185,171,171,180],
[178,179,150,155,166,155,0,164,164,172],
[175,151,157,155,183,169,176,0,163,170],
[170,178,171,154,184,169,176,177,0,159],
[160,169,169,159,190,160,168,170,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,170,174,136,168,157,169,169,154],
[189,0,175,167,176,177,201,169,165,196],
[170,165,0,137,131,151,144,165,179,167],
[166,173,203,0,166,175,130,183,184,160],
[204,164,209,174,0,203,175,183,195,190],
[172,163,189,165,137,0,167,163,171,154],
[183,139,196,210,165,173,0,174,173,193],
[171,171,175,157,157,177,166,0,182,161],
[171,175,161,156,145,169,167,158,0,163],
[186,144,173,180,150,186,147,179,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,180,175,157,160,155,186,155,175],
[151,0,176,166,174,151,166,163,165,172],
[160,164,0,164,155,162,150,185,158,154],
[165,174,176,0,165,166,159,177,159,175],
[183,166,185,175,0,159,162,189,155,170],
[180,189,178,174,181,0,175,198,183,166],
[185,174,190,181,178,165,0,202,163,163],
[154,177,155,163,151,142,138,0,161,167],
[185,175,182,181,185,157,177,179,0,178],
[165,168,186,165,170,174,177,173,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,188,182,158,166,159,181,186,174],
[153,0,195,181,141,155,168,175,155,154],
[152,145,0,172,141,155,145,165,163,157],
[158,159,168,0,140,154,156,180,169,157],
[182,199,199,200,0,175,170,198,191,191],
[174,185,185,186,165,0,162,171,183,173],
[181,172,195,184,170,178,0,177,173,185],
[159,165,175,160,142,169,163,0,166,157],
[154,185,177,171,149,157,167,174,0,178],
[166,186,183,183,149,167,155,183,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,191,204,178,198,177,201,194,170],
[151,0,187,188,181,186,159,185,179,156],
[149,153,0,177,166,167,151,181,175,152],
[136,152,163,0,171,177,143,178,169,147],
[162,159,174,169,0,179,167,184,188,149],
[142,154,173,163,161,0,164,171,175,153],
[163,181,189,197,173,176,0,180,186,159],
[139,155,159,162,156,169,160,0,174,162],
[146,161,165,171,152,165,154,166,0,144],
[170,184,188,193,191,187,181,178,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,212,197,163,123,140,210,251,161],
[126,0,175,176,161,123,126,210,216,158],
[128,165,0,214,147,111,73,213,181,179],
[143,164,126,0,126,89,89,160,162,107],
[177,179,193,214,0,198,174,266,231,143],
[217,217,229,251,142,0,138,233,231,196],
[200,214,267,251,166,202,0,234,271,178],
[130,130,127,180,74,107,106,0,180,179],
[89,124,159,178,109,109,69,160,0,125],
[179,182,161,233,197,144,162,161,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,188,152,179,174,180,159,161,178],
[175,0,175,154,157,169,171,156,161,169],
[152,165,0,146,135,148,168,143,148,155],
[188,186,194,0,172,183,178,168,167,169],
[161,183,205,168,0,165,182,177,172,183],
[166,171,192,157,175,0,179,157,165,165],
[160,169,172,162,158,161,0,139,164,171],
[181,184,197,172,163,183,201,0,186,196],
[179,179,192,173,168,175,176,154,0,187],
[162,171,185,171,157,175,169,144,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,169,165,161,178,181,174,171,174],
[192,0,166,184,179,188,218,176,183,197],
[171,174,0,172,167,167,185,173,190,187],
[175,156,168,0,160,159,180,165,164,165],
[179,161,173,180,0,174,188,174,178,170],
[162,152,173,181,166,0,187,167,184,174],
[159,122,155,160,152,153,0,158,150,159],
[166,164,167,175,166,173,182,0,179,174],
[169,157,150,176,162,156,190,161,0,168],
[166,143,153,175,170,166,181,166,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,169,103,171,169,169,146,148,170],
[212,0,211,123,173,210,148,170,170,149],
[171,129,0,105,129,148,106,170,126,170],
[237,217,235,0,195,193,216,151,192,195],
[169,167,211,145,0,210,166,126,147,127],
[171,130,192,147,130,0,106,128,127,151],
[171,192,234,124,174,234,0,106,149,151],
[194,170,170,189,214,212,234,0,191,150],
[192,170,214,148,193,213,191,149,0,193],
[170,191,170,145,213,189,189,190,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,168,154,185,181,171,163,180,181],
[149,0,138,124,179,160,163,146,165,161],
[172,202,0,158,194,167,169,182,172,185],
[186,216,182,0,180,195,169,193,199,173],
[155,161,146,160,0,151,149,141,175,142],
[159,180,173,145,189,0,171,166,175,164],
[169,177,171,171,191,169,0,172,181,160],
[177,194,158,147,199,174,168,0,181,157],
[160,175,168,141,165,165,159,159,0,160],
[159,179,155,167,198,176,180,183,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,238,196,177,181,225,196,237,147],
[132,0,190,181,175,132,192,177,177,145],
[102,150,0,164,147,132,196,149,164,162],
[144,159,176,0,173,161,192,208,206,145],
[163,165,193,167,0,148,210,150,166,162],
[159,208,208,179,192,0,238,181,222,145],
[115,148,144,148,130,102,0,161,161,117],
[144,163,191,132,190,159,179,0,222,175],
[103,163,176,134,174,118,179,118,0,148],
[193,195,178,195,178,195,223,165,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,154,152,189,149,161,153,181,162],
[176,0,162,145,175,151,175,183,206,154],
[186,178,0,187,194,143,179,186,210,177],
[188,195,153,0,191,167,172,144,217,157],
[151,165,146,149,0,136,161,161,210,160],
[191,189,197,173,204,0,190,192,191,170],
[179,165,161,168,179,150,0,163,178,151],
[187,157,154,196,179,148,177,0,221,167],
[159,134,130,123,130,149,162,119,0,126],
[178,186,163,183,180,170,189,173,214,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,185,191,207,206,148,180,235,194],
[156,0,156,216,170,181,124,116,180,154],
[155,184,0,191,207,213,196,160,198,162],
[149,124,149,0,183,162,133,134,179,115],
[133,170,133,157,0,154,144,130,176,137],
[134,159,127,178,186,0,155,171,201,160],
[192,216,144,207,196,185,0,154,185,177],
[160,224,180,206,210,169,186,0,207,175],
[105,160,142,161,164,139,155,133,0,134],
[146,186,178,225,203,180,163,165,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,184,158,187,184,176,181,170,174],
[181,0,173,156,166,167,160,174,173,182],
[156,167,0,173,191,197,181,201,177,185],
[182,184,167,0,168,181,168,192,158,172],
[153,174,149,172,0,170,162,176,160,165],
[156,173,143,159,170,0,157,178,162,164],
[164,180,159,172,178,183,0,188,161,167],
[159,166,139,148,164,162,152,0,162,166],
[170,167,163,182,180,178,179,178,0,191],
[166,158,155,168,175,176,173,174,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,163,165,176,167,163,170,184,173],
[167,0,165,174,166,172,167,174,185,191],
[177,175,0,176,180,172,169,174,194,182],
[175,166,164,0,172,160,161,175,174,170],
[164,174,160,168,0,162,157,168,170,158],
[173,168,168,180,178,0,176,180,185,179],
[177,173,171,179,183,164,0,177,181,173],
[170,166,166,165,172,160,163,0,185,165],
[156,155,146,166,170,155,159,155,0,160],
[167,149,158,170,182,161,167,175,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,164,187,167,197,148,135,163,179],
[180,0,150,205,171,195,160,159,180,160],
[176,190,0,232,166,200,171,158,198,200],
[153,135,108,0,125,198,131,142,147,159],
[173,169,174,215,0,218,171,166,195,185],
[143,145,140,142,122,0,133,125,135,166],
[192,180,169,209,169,207,0,178,200,181],
[205,181,182,198,174,215,162,0,210,179],
[177,160,142,193,145,205,140,130,0,148],
[161,180,140,181,155,174,159,161,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,187,143,154,152,167,153,132,151],
[205,0,202,142,197,181,213,157,153,154],
[153,138,0,139,179,133,152,142,113,120],
[197,198,201,0,191,143,195,175,185,151],
[186,143,161,149,0,169,182,146,138,152],
[188,159,207,197,171,0,170,153,174,177],
[173,127,188,145,158,170,0,158,134,139],
[187,183,198,165,194,187,182,0,150,130],
[208,187,227,155,202,166,206,190,0,176],
[189,186,220,189,188,163,201,210,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,166,167,179,176,151,186,174,161],
[166,0,162,172,172,168,154,177,160,163],
[174,178,0,174,200,171,161,188,160,164],
[173,168,166,0,181,175,164,189,165,149],
[161,168,140,159,0,168,149,177,157,158],
[164,172,169,165,172,0,163,195,163,158],
[189,186,179,176,191,177,0,183,161,170],
[154,163,152,151,163,145,157,0,137,144],
[166,180,180,175,183,177,179,203,0,156],
[179,177,176,191,182,182,170,196,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,164,167,172,155,161,167,167,164],
[173,0,174,177,180,159,172,179,182,170],
[176,166,0,172,173,164,162,167,160,163],
[173,163,168,0,178,166,154,170,175,152],
[168,160,167,162,0,166,159,180,169,165],
[185,181,176,174,174,0,156,197,187,183],
[179,168,178,186,181,184,0,186,182,173],
[173,161,173,170,160,143,154,0,169,168],
[173,158,180,165,171,153,158,171,0,160],
[176,170,177,188,175,157,167,172,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,182,180,167,171,169,181,154,166],
[181,0,174,177,159,187,179,179,178,176],
[158,166,0,173,137,175,169,167,160,164],
[160,163,167,0,161,160,157,168,171,173],
[173,181,203,179,0,189,161,175,174,189],
[169,153,165,180,151,0,152,184,161,164],
[171,161,171,183,179,188,0,168,179,199],
[159,161,173,172,165,156,172,0,175,168],
[186,162,180,169,166,179,161,165,0,161],
[174,164,176,167,151,176,141,172,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,182,178,172,182,148,173,167,158],
[198,0,210,206,172,210,164,196,179,181],
[158,130,0,169,165,181,149,165,134,136],
[162,134,171,0,141,190,147,159,165,140],
[168,168,175,199,0,191,160,182,166,140],
[158,130,159,150,149,0,132,157,146,138],
[192,176,191,193,180,208,0,186,167,157],
[167,144,175,181,158,183,154,0,173,158],
[173,161,206,175,174,194,173,167,0,164],
[182,159,204,200,200,202,183,182,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,144,159,174,149,146,162,165,164],
[171,0,164,164,172,142,157,161,162,156],
[196,176,0,166,189,170,171,183,165,182],
[181,176,174,0,173,174,164,177,170,179],
[166,168,151,167,0,151,161,175,161,185],
[191,198,170,166,189,0,166,171,181,184],
[194,183,169,176,179,174,0,172,160,179],
[178,179,157,163,165,169,168,0,159,171],
[175,178,175,170,179,159,180,181,0,171],
[176,184,158,161,155,156,161,169,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,169,180,182,165,157,183,168,165],
[170,0,170,175,161,160,170,172,165,162],
[171,170,0,172,177,168,158,174,165,181],
[160,165,168,0,161,162,139,158,162,165],
[158,179,163,179,0,156,147,168,156,169],
[175,180,172,178,184,0,154,186,165,169],
[183,170,182,201,193,186,0,188,188,177],
[157,168,166,182,172,154,152,0,164,182],
[172,175,175,178,184,175,152,176,0,178],
[175,178,159,175,171,171,163,158,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,157,177,159,166,157,166,172,163],
[172,0,154,173,174,150,152,165,148,150],
[183,186,0,192,180,174,168,176,181,167],
[163,167,148,0,170,142,155,164,161,150],
[181,166,160,170,0,159,168,177,162,153],
[174,190,166,198,181,0,165,190,170,161],
[183,188,172,185,172,175,0,159,159,173],
[174,175,164,176,163,150,181,0,169,158],
[168,192,159,179,178,170,181,171,0,166],
[177,190,173,190,187,179,167,182,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,176,182,184,182,178,183,182,170],
[167,0,181,165,178,173,172,172,185,174],
[164,159,0,176,175,160,158,163,165,137],
[158,175,164,0,176,156,184,165,178,167],
[156,162,165,164,0,163,162,170,170,162],
[158,167,180,184,177,0,177,166,166,167],
[162,168,182,156,178,163,0,167,179,163],
[157,168,177,175,170,174,173,0,179,161],
[158,155,175,162,170,174,161,161,0,157],
[170,166,203,173,178,173,177,179,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,109,130,80,79,131,103,153,106],
[209,0,107,131,105,80,158,210,157,130],
[231,233,0,182,181,182,182,232,206,157],
[210,209,158,0,132,106,184,157,207,159],
[260,235,159,208,0,130,212,261,234,212],
[261,260,158,234,210,0,211,235,260,238],
[209,182,158,156,128,129,0,182,207,182],
[237,130,108,183,79,105,158,0,211,159],
[187,183,134,133,106,80,133,129,0,79],
[234,210,183,181,128,102,158,181,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,160,164,174,164,150,163,165,164],
[183,0,151,158,192,164,169,178,178,165],
[180,189,0,168,197,177,178,182,182,170],
[176,182,172,0,195,185,165,186,183,165],
[166,148,143,145,0,152,151,151,162,149],
[176,176,163,155,188,0,164,175,168,169],
[190,171,162,175,189,176,0,172,181,175],
[177,162,158,154,189,165,168,0,172,164],
[175,162,158,157,178,172,159,168,0,161],
[176,175,170,175,191,171,165,176,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,171,163,188,164,166,174,172,173],
[181,0,176,182,178,176,168,174,163,170],
[169,164,0,191,177,171,190,170,167,171],
[177,158,149,0,174,171,178,169,155,169],
[152,162,163,166,0,172,173,166,165,155],
[176,164,169,169,168,0,183,188,167,158],
[174,172,150,162,167,157,0,184,167,163],
[166,166,170,171,174,152,156,0,166,168],
[168,177,173,185,175,173,173,174,0,172],
[167,170,169,171,185,182,177,172,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,169,340,170,255,84,85,85,170],
[86,0,86,255,0,255,0,86,85,170],
[171,254,0,255,85,255,85,0,85,255],
[0,85,85,0,85,0,0,0,85,84],
[170,340,255,255,0,255,170,86,255,170],
[85,85,85,340,85,0,85,85,85,84],
[256,340,255,340,170,255,0,171,85,255],
[255,254,340,340,254,255,169,0,169,255],
[255,255,255,255,85,255,255,171,0,255],
[170,170,85,256,170,256,85,85,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,96,145,48,145,144,96,194,144],
[145,0,193,144,144,96,96,145,194,144],
[244,147,0,145,97,145,243,146,194,145],
[195,196,195,0,195,195,146,195,292,195],
[292,196,243,145,0,145,243,194,194,193],
[195,244,195,145,195,0,194,195,244,146],
[196,244,97,194,97,146,0,145,242,146],
[244,195,194,145,146,145,195,0,194,243],
[146,146,146,48,146,96,98,146,0,146],
[196,196,195,145,147,194,194,97,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,107,126,128,151,148,192,126,105],
[191,0,171,189,210,168,167,233,148,169],
[233,169,0,210,210,169,209,274,148,169],
[214,151,130,0,215,194,147,214,151,170],
[212,130,130,125,0,194,105,171,128,125],
[189,172,171,146,146,0,209,232,146,168],
[192,173,131,193,235,131,0,256,150,215],
[148,107,66,126,169,108,84,0,150,127],
[214,192,192,189,212,194,190,190,0,147],
[235,171,171,170,215,172,125,213,193,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,170,168,192,160,163,175,184,197],
[164,0,162,143,185,189,177,165,167,152],
[170,178,0,173,185,179,193,179,188,178],
[172,197,167,0,201,166,175,172,186,163],
[148,155,155,139,0,159,164,163,141,180],
[180,151,161,174,181,0,179,149,174,165],
[177,163,147,165,176,161,0,157,165,156],
[165,175,161,168,177,191,183,0,160,187],
[156,173,152,154,199,166,175,180,0,167],
[143,188,162,177,160,175,184,153,173,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,152,150,131,121,132,140,132,132],
[176,0,151,142,139,142,142,174,142,108],
[188,189,0,156,120,111,142,174,144,144],
[190,198,184,0,152,154,165,175,187,197],
[209,201,220,188,0,164,222,219,201,165],
[219,198,229,186,176,0,189,229,197,154],
[208,198,198,175,118,151,0,194,164,143],
[200,166,166,165,121,111,146,0,144,131],
[208,198,196,153,139,143,176,196,0,163],
[208,232,196,143,175,186,197,209,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,162,181,186,167,175,172,178,191],
[158,0,172,164,176,169,180,163,161,179],
[178,168,0,176,193,184,185,166,175,194],
[159,176,164,0,178,176,168,157,160,176],
[154,164,147,162,0,157,159,158,153,174],
[173,171,156,164,183,0,169,177,158,177],
[165,160,155,172,181,171,0,171,165,169],
[168,177,174,183,182,163,169,0,173,187],
[162,179,165,180,187,182,175,167,0,182],
[149,161,146,164,166,163,171,153,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,168,152,162,156,171,165,158,156],
[178,0,178,169,172,169,182,176,175,178],
[172,162,0,165,153,157,163,154,154,164],
[188,171,175,0,170,165,185,185,169,178],
[178,168,187,170,0,165,181,178,179,170],
[184,171,183,175,175,0,181,173,170,160],
[169,158,177,155,159,159,0,174,147,163],
[175,164,186,155,162,167,166,0,160,157],
[182,165,186,171,161,170,193,180,0,164],
[184,162,176,162,170,180,177,183,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,148,182,177,161,177,148,160,171],
[141,0,159,137,137,159,122,149,122,132],
[192,181,0,180,128,216,167,175,197,160],
[158,203,160,0,151,163,143,169,152,167],
[163,203,212,189,0,194,197,169,168,211],
[179,181,124,177,146,0,155,170,136,129],
[163,218,173,197,143,185,0,156,166,205],
[192,191,165,171,171,170,184,0,141,174],
[180,218,143,188,172,204,174,199,0,185],
[169,208,180,173,129,211,135,166,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,187,161,159,163,178,178,158,157,162],
[153,0,145,161,151,171,170,148,146,138],
[179,195,0,180,163,179,188,165,172,173],
[181,179,160,0,168,177,179,159,172,165],
[177,189,177,172,0,182,181,169,168,177],
[162,169,161,163,158,0,173,168,171,160],
[162,170,152,161,159,167,0,151,149,155],
[182,192,175,181,171,172,189,0,168,158],
[183,194,168,168,172,169,191,172,0,163],
[178,202,167,175,163,180,185,182,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,164,166,171,155,152,185,169,178],
[189,0,144,164,166,157,168,165,176,178],
[176,196,0,180,201,191,185,160,173,183],
[174,176,160,0,174,158,156,152,151,178],
[169,174,139,166,0,155,167,170,164,168],
[185,183,149,182,185,0,153,151,185,181],
[188,172,155,184,173,187,0,175,190,187],
[155,175,180,188,170,189,165,0,181,173],
[171,164,167,189,176,155,150,159,0,186],
[162,162,157,162,172,159,153,167,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,168,172,182,177,191,175,175,163],
[155,0,175,163,174,176,174,173,170,158],
[172,165,0,171,190,178,183,187,180,155],
[168,177,169,0,182,168,182,158,162,170],
[158,166,150,158,0,167,177,180,174,153],
[163,164,162,172,173,0,166,170,170,159],
[149,166,157,158,163,174,0,163,168,143],
[165,167,153,182,160,170,177,0,166,154],
[165,170,160,178,166,170,172,174,0,166],
[177,182,185,170,187,181,197,186,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,164,156,149,175,172,168,161,162],
[181,0,170,170,173,183,193,163,175,169],
[176,170,0,150,170,186,185,166,167,167],
[184,170,190,0,187,203,194,171,175,181],
[191,167,170,153,0,189,184,172,183,172],
[165,157,154,137,151,0,170,162,164,150],
[168,147,155,146,156,170,0,149,150,149],
[172,177,174,169,168,178,191,0,171,175],
[179,165,173,165,157,176,190,169,0,175],
[178,171,173,159,168,190,191,165,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,178,164,166,181,210,175,187,152],
[167,0,169,164,154,181,183,174,184,160],
[162,171,0,160,152,175,173,169,174,163],
[176,176,180,0,165,173,186,187,189,174],
[174,186,188,175,0,168,190,170,171,169],
[159,159,165,167,172,0,171,170,179,166],
[130,157,167,154,150,169,0,154,163,145],
[165,166,171,153,170,170,186,0,175,163],
[153,156,166,151,169,161,177,165,0,154],
[188,180,177,166,171,174,195,177,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,199,144,153,161,177,176,167,166],
[168,0,198,164,155,163,183,173,172,147],
[141,142,0,153,125,150,138,150,155,148],
[196,176,187,0,157,194,165,189,180,159],
[187,185,215,183,0,186,180,187,189,170],
[179,177,190,146,154,0,191,170,168,165],
[163,157,202,175,160,149,0,203,162,146],
[164,167,190,151,153,170,137,0,174,150],
[173,168,185,160,151,172,178,166,0,162],
[174,193,192,181,170,175,194,190,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,156,171,159,151,172,163,167,155],
[165,0,166,155,165,159,168,151,143,164],
[184,174,0,169,167,181,189,189,185,162],
[169,185,171,0,170,171,200,170,173,177],
[181,175,173,170,0,164,193,159,160,175],
[189,181,159,169,176,0,171,169,168,163],
[168,172,151,140,147,169,0,141,157,162],
[177,189,151,170,181,171,199,0,168,178],
[173,197,155,167,180,172,183,172,0,183],
[185,176,178,163,165,177,178,162,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,155,160,170,152,136,157,140,113],
[193,0,162,156,181,167,142,165,158,147],
[185,178,0,176,198,157,155,183,176,152],
[180,184,164,0,189,153,174,167,170,143],
[170,159,142,151,0,172,139,158,160,137],
[188,173,183,187,168,0,158,178,183,175],
[204,198,185,166,201,182,0,189,183,161],
[183,175,157,173,182,162,151,0,169,147],
[200,182,164,170,180,157,157,171,0,158],
[227,193,188,197,203,165,179,193,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,157,195,158,180,194,172,188,165],
[167,0,162,155,162,155,188,175,166,145],
[183,178,0,179,175,181,187,179,172,167],
[145,185,161,0,159,165,190,168,181,150],
[182,178,165,181,0,173,196,180,164,181],
[160,185,159,175,167,0,198,161,177,147],
[146,152,153,150,144,142,0,165,182,159],
[168,165,161,172,160,179,175,0,168,185],
[152,174,168,159,176,163,158,172,0,165],
[175,195,173,190,159,193,181,155,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,176,174,184,151,170,168,177,171],
[156,0,166,163,170,153,160,156,150,155],
[164,174,0,186,179,157,157,162,166,168],
[166,177,154,0,172,158,157,167,156,174],
[156,170,161,168,0,147,161,156,158,155],
[189,187,183,182,193,0,178,173,164,177],
[170,180,183,183,179,162,0,172,163,183],
[172,184,178,173,184,167,168,0,165,168],
[163,190,174,184,182,176,177,175,0,186],
[169,185,172,166,185,163,157,172,154,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,179,173,169,173,182,213,172,191],
[171,0,186,163,179,177,179,188,165,160],
[161,154,0,154,162,166,150,162,149,165],
[167,177,186,0,182,160,184,195,167,171],
[171,161,178,158,0,160,150,182,157,186],
[167,163,174,180,180,0,174,179,178,184],
[158,161,190,156,190,166,0,190,164,168],
[127,152,178,145,158,161,150,0,147,146],
[168,175,191,173,183,162,176,193,0,188],
[149,180,175,169,154,156,172,194,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,169,170,173,165,174,179,176,172],
[159,0,166,143,176,149,147,170,158,156],
[171,174,0,164,174,151,148,163,163,166],
[170,197,176,0,174,163,177,170,171,164],
[167,164,166,166,0,159,151,168,158,165],
[175,191,189,177,181,0,181,166,169,159],
[166,193,192,163,189,159,0,185,154,168],
[161,170,177,170,172,174,155,0,174,157],
[164,182,177,169,182,171,186,166,0,174],
[168,184,174,176,175,181,172,183,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,169,163,158,175,167,169,154,162],
[174,0,166,171,166,174,162,158,169,170],
[171,174,0,169,168,163,185,172,156,179],
[177,169,171,0,158,181,179,161,161,174],
[182,174,172,182,0,169,175,171,157,172],
[165,166,177,159,171,0,188,165,156,146],
[173,178,155,161,165,152,0,166,162,170],
[171,182,168,179,169,175,174,0,176,163],
[186,171,184,179,183,184,178,164,0,179],
[178,170,161,166,168,194,170,177,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,151,184,165,161,195,132,168,158],
[164,0,192,158,183,189,181,150,159,147],
[189,148,0,164,180,157,191,163,161,152],
[156,182,176,0,179,182,177,159,136,160],
[175,157,160,161,0,187,209,148,160,161],
[179,151,183,158,153,0,204,171,175,152],
[145,159,149,163,131,136,0,116,160,152],
[208,190,177,181,192,169,224,0,198,179],
[172,181,179,204,180,165,180,142,0,154],
[182,193,188,180,179,188,188,161,186,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,177,172,158,129,165,140,123,160],
[212,0,146,152,172,197,155,154,148,164],
[163,194,0,173,174,183,171,145,102,168],
[168,188,167,0,154,166,187,183,149,208],
[182,168,166,186,0,194,175,186,179,179],
[211,143,157,174,146,0,174,157,159,149],
[175,185,169,153,165,166,0,181,169,178],
[200,186,195,157,154,183,159,0,150,148],
[217,192,238,191,161,181,171,190,0,192],
[180,176,172,132,161,191,162,192,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,163,171,174,183,158,165,157,157,161],
[177,0,186,176,171,177,179,171,168,169],
[169,154,0,184,175,170,183,161,156,177],
[166,164,156,0,168,179,168,156,157,162],
[157,169,165,172,0,166,170,161,165,169],
[182,163,170,161,174,0,182,155,173,151],
[175,161,157,172,170,158,0,160,164,153],
[183,169,179,184,179,185,180,0,173,176],
[183,172,184,183,175,167,176,167,0,162],
[179,171,163,178,171,189,187,164,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,147,146,160,156,159,169,174,180],
[186,0,171,164,164,172,151,174,198,172],
[193,169,0,171,169,172,169,177,175,196],
[194,176,169,0,174,181,174,182,176,182],
[180,176,171,166,0,181,168,175,183,180],
[184,168,168,159,159,0,166,188,182,174],
[181,189,171,166,172,174,0,178,181,178],
[171,166,163,158,165,152,162,0,182,182],
[166,142,165,164,157,158,159,158,0,171],
[160,168,144,158,160,166,162,158,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,175,170,183,179,167,182,172,175],
[151,0,161,171,156,161,166,160,156,158],
[165,179,0,176,181,183,185,175,180,173],
[170,169,164,0,169,161,174,163,172,170],
[157,184,159,171,0,168,170,173,172,167],
[161,179,157,179,172,0,171,175,169,166],
[173,174,155,166,170,169,0,175,178,175],
[158,180,165,177,167,165,165,0,170,173],
[168,184,160,168,168,171,162,170,0,164],
[165,182,167,170,173,174,165,167,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,151,163,157,139,162,179,149,153],
[203,0,179,182,174,191,184,204,165,191],
[189,161,0,172,166,166,162,211,173,165],
[177,158,168,0,160,176,161,182,159,158],
[183,166,174,180,0,171,159,204,182,165],
[201,149,174,164,169,0,155,207,168,161],
[178,156,178,179,181,185,0,197,151,164],
[161,136,129,158,136,133,143,0,143,134],
[191,175,167,181,158,172,189,197,0,169],
[187,149,175,182,175,179,176,206,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,214,214,214,127,210,127,129,171],
[214,0,172,170,212,170,212,168,213,212],
[126,168,0,84,170,85,167,126,126,126],
[126,170,256,0,255,170,168,170,214,212],
[126,128,170,85,0,126,83,126,43,126],
[213,170,255,170,214,0,211,128,215,214],
[130,128,173,172,257,129,0,129,87,129],
[213,172,214,170,214,212,211,0,174,213],
[211,127,214,126,297,125,253,166,0,210],
[169,128,214,128,214,126,211,127,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,199,151,139,200,187,152,176,152],
[180,0,202,144,112,173,173,183,177,186],
[141,138,0,136,125,183,179,148,155,179],
[189,196,204,0,152,193,203,145,178,176],
[201,228,215,188,0,209,187,169,179,185],
[140,167,157,147,131,0,176,139,164,158],
[153,167,161,137,153,164,0,131,177,161],
[188,157,192,195,171,201,209,0,201,173],
[164,163,185,162,161,176,163,139,0,174],
[188,154,161,164,155,182,179,167,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,84,169,103,169,146,167,190,235],
[172,0,194,234,108,193,149,236,171,215],
[256,146,0,190,170,193,190,211,172,213],
[171,106,150,0,64,191,106,213,171,217],
[237,232,170,276,0,258,212,212,213,236],
[171,147,147,149,82,0,103,213,84,193],
[194,191,150,234,128,237,0,234,194,255],
[173,104,129,127,128,127,106,0,108,152],
[150,169,168,169,127,256,146,232,0,279],
[105,125,127,123,104,147,85,188,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,161,159,197,164,158,167,162,173],
[167,0,173,179,196,183,149,157,178,190],
[179,167,0,174,196,186,162,158,191,201],
[181,161,166,0,198,160,159,172,189,180],
[143,144,144,142,0,149,144,155,158,149],
[176,157,154,180,191,0,153,192,200,192],
[182,191,178,181,196,187,0,167,201,188],
[173,183,182,168,185,148,173,0,179,186],
[178,162,149,151,182,140,139,161,0,190],
[167,150,139,160,191,148,152,154,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,155,160,172,186,174,168,178,170],
[144,0,148,167,168,187,153,188,161,173],
[185,192,0,173,164,188,170,178,170,170],
[180,173,167,0,153,179,166,194,174,173],
[168,172,176,187,0,199,161,179,167,178],
[154,153,152,161,141,0,157,146,128,152],
[166,187,170,174,179,183,0,182,167,176],
[172,152,162,146,161,194,158,0,173,179],
[162,179,170,166,173,212,173,167,0,191],
[170,167,170,167,162,188,164,161,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,166,187,164,173,162,161,166,168],
[176,0,183,183,189,178,181,163,167,176],
[174,157,0,164,171,171,179,152,154,160],
[153,157,176,0,160,173,164,166,161,161],
[176,151,169,180,0,184,163,163,177,174],
[167,162,169,167,156,0,156,170,162,170],
[178,159,161,176,177,184,0,138,172,166],
[179,177,188,174,177,170,202,0,180,153],
[174,173,186,179,163,178,168,160,0,168],
[172,164,180,179,166,170,174,187,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,190,166,168,171,187,166,180,179],
[164,0,183,179,158,166,173,166,163,154],
[150,157,0,159,151,123,173,163,159,151],
[174,161,181,0,170,175,192,168,174,171],
[172,182,189,170,0,181,188,179,158,186],
[169,174,217,165,159,0,203,177,176,186],
[153,167,167,148,152,137,0,154,160,165],
[174,174,177,172,161,163,186,0,168,162],
[160,177,181,166,182,164,180,172,0,172],
[161,186,189,169,154,154,175,178,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,166,169,181,177,160,169,171,179],
[162,0,162,166,166,167,159,157,150,159],
[174,178,0,164,194,175,176,158,168,172],
[171,174,176,0,178,175,154,181,160,168],
[159,174,146,162,0,151,148,150,162,168],
[163,173,165,165,189,0,159,155,175,162],
[180,181,164,186,192,181,0,177,187,178],
[171,183,182,159,190,185,163,0,180,180],
[169,190,172,180,178,165,153,160,0,170],
[161,181,168,172,172,178,162,160,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,175,180,189,170,168,173,168,170],
[152,0,166,182,187,156,172,177,176,176],
[165,174,0,176,178,159,176,179,175,165],
[160,158,164,0,171,144,158,154,166,152],
[151,153,162,169,0,161,188,175,179,166],
[170,184,181,196,179,0,189,176,172,170],
[172,168,164,182,152,151,0,169,175,160],
[167,163,161,186,165,164,171,0,183,170],
[172,164,165,174,161,168,165,157,0,170],
[170,164,175,188,174,170,180,170,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,177,174,166,192,195,192,179,172],
[163,0,159,163,148,179,166,164,167,157],
[163,181,0,170,164,178,175,185,172,172],
[166,177,170,0,173,176,173,179,167,174],
[174,192,176,167,0,184,191,177,177,169],
[148,161,162,164,156,0,172,167,170,161],
[145,174,165,167,149,168,0,170,164,154],
[148,176,155,161,163,173,170,0,164,150],
[161,173,168,173,163,170,176,176,0,152],
[168,183,168,166,171,179,186,190,188,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,182,165,180,197,169,166,179,184],
[154,0,150,160,159,172,150,166,156,175],
[158,190,0,163,168,184,166,167,163,174],
[175,180,177,0,187,180,176,168,179,203],
[160,181,172,153,0,178,159,163,168,174],
[143,168,156,160,162,0,145,144,159,174],
[171,190,174,164,181,195,0,163,169,175],
[174,174,173,172,177,196,177,0,161,186],
[161,184,177,161,172,181,171,179,0,175],
[156,165,166,137,166,166,165,154,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,149,174,173,186,163,180,166,174],
[143,0,114,138,126,153,150,134,152,132],
[191,226,0,182,169,216,188,200,196,173],
[166,202,158,0,176,176,175,171,165,168],
[167,214,171,164,0,200,190,178,167,170],
[154,187,124,164,140,0,146,147,155,136],
[177,190,152,165,150,194,0,178,152,154],
[160,206,140,169,162,193,162,0,169,160],
[174,188,144,175,173,185,188,171,0,181],
[166,208,167,172,170,204,186,180,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,186,171,166,145,154,177,155,178],
[159,0,182,154,159,145,167,156,150,167],
[154,158,0,164,147,139,167,164,163,166],
[169,186,176,0,157,160,203,181,163,172],
[174,181,193,183,0,162,170,172,171,187],
[195,195,201,180,178,0,182,181,167,194],
[186,173,173,137,170,158,0,165,149,165],
[163,184,176,159,168,159,175,0,169,162],
[185,190,177,177,169,173,191,171,0,187],
[162,173,174,168,153,146,175,178,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,163,180,177,170,187,166,175,182],
[183,0,168,193,157,169,154,165,191,184],
[177,172,0,193,141,153,200,157,193,172],
[160,147,147,0,158,148,176,152,165,162],
[163,183,199,182,0,162,210,171,179,198],
[170,171,187,192,178,0,173,171,174,189],
[153,186,140,164,130,167,0,129,167,145],
[174,175,183,188,169,169,211,0,187,175],
[165,149,147,175,161,166,173,153,0,150],
[158,156,168,178,142,151,195,165,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,198,171,141,114,227,227,169,142],
[199,0,254,227,227,169,226,256,254,226],
[142,86,0,228,171,114,171,228,142,114],
[169,113,112,0,141,142,169,170,142,113],
[199,113,169,199,0,141,227,200,169,141],
[226,171,226,198,199,0,283,228,226,169],
[113,114,169,171,113,57,0,228,171,86],
[113,84,112,170,140,112,112,0,197,141],
[171,86,198,198,171,114,169,143,0,170],
[198,114,226,227,199,171,254,199,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,177,146,152,144,162,157,184,147],
[160,0,186,153,162,173,168,165,164,160],
[163,154,0,148,170,134,149,151,153,140],
[194,187,192,0,182,185,203,182,182,170],
[188,178,170,158,0,176,164,189,196,169],
[196,167,206,155,164,0,165,161,177,158],
[178,172,191,137,176,175,0,186,174,165],
[183,175,189,158,151,179,154,0,185,163],
[156,176,187,158,144,163,166,155,0,138],
[193,180,200,170,171,182,175,177,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,170,162,158,177,173,154,170,169],
[183,0,183,166,167,198,191,169,195,162],
[170,157,0,160,157,176,166,165,168,164],
[178,174,180,0,173,191,179,157,188,178],
[182,173,183,167,0,191,178,172,184,172],
[163,142,164,149,149,0,153,135,153,149],
[167,149,174,161,162,187,0,156,174,173],
[186,171,175,183,168,205,184,0,171,173],
[170,145,172,152,156,187,166,169,0,159],
[171,178,176,162,168,191,167,167,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,176,205,193,172,205,183,180,183],
[172,0,161,190,211,190,209,195,173,175],
[164,179,0,207,219,197,207,219,191,198],
[135,150,133,0,168,163,172,158,156,154],
[147,129,121,172,0,136,156,146,173,168],
[168,150,143,177,204,0,164,149,179,157],
[135,131,133,168,184,176,0,157,159,143],
[157,145,121,182,194,191,183,0,181,168],
[160,167,149,184,167,161,181,159,0,178],
[157,165,142,186,172,183,197,172,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,185,192,202,183,180,165,181,193],
[155,0,154,173,180,160,184,172,176,164],
[155,186,0,181,188,168,191,181,195,177],
[148,167,159,0,158,158,170,160,152,161],
[138,160,152,182,0,168,174,180,170,152],
[157,180,172,182,172,0,180,173,199,180],
[160,156,149,170,166,160,0,173,161,176],
[175,168,159,180,160,167,167,0,164,176],
[159,164,145,188,170,141,179,176,0,155],
[147,176,163,179,188,160,164,164,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,174,163,149,167,160,161,188,185],
[161,0,162,163,154,177,135,140,162,167],
[166,178,0,165,163,177,152,161,180,177],
[177,177,175,0,150,204,174,171,179,179],
[191,186,177,190,0,199,170,172,173,180],
[173,163,163,136,141,0,153,139,175,163],
[180,205,188,166,170,187,0,161,164,191],
[179,200,179,169,168,201,179,0,186,193],
[152,178,160,161,167,165,176,154,0,168],
[155,173,163,161,160,177,149,147,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,170,165,172,179,175,158,161,165],
[175,0,168,158,174,176,174,169,171,177],
[170,172,0,161,177,172,181,170,167,174],
[175,182,179,0,175,164,181,166,180,179],
[168,166,163,165,0,169,177,173,158,159],
[161,164,168,176,171,0,180,169,170,176],
[165,166,159,159,163,160,0,160,166,155],
[182,171,170,174,167,171,180,0,181,182],
[179,169,173,160,182,170,174,159,0,175],
[175,163,166,161,181,164,185,158,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,167,204,187,179,218,212,189,192],
[149,0,176,145,203,177,215,163,164,152],
[173,164,0,188,141,164,217,184,199,155],
[136,195,152,0,169,162,214,174,141,107],
[153,137,199,171,0,186,174,185,176,187],
[161,163,176,178,154,0,170,165,177,131],
[122,125,123,126,166,170,0,156,158,147],
[128,177,156,166,155,175,184,0,177,132],
[151,176,141,199,164,163,182,163,0,144],
[148,188,185,233,153,209,193,208,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,185,150,150,184,127,153,153,113],
[179,0,178,151,179,127,152,153,167,125],
[155,162,0,177,138,214,166,178,183,102],
[190,189,163,0,138,161,117,155,155,127],
[190,161,202,202,0,150,176,152,156,148],
[156,213,126,179,190,0,153,143,216,103],
[213,188,174,223,164,187,0,176,203,199],
[187,187,162,185,188,197,164,0,177,174],
[187,173,157,185,184,124,137,163,0,137],
[227,215,238,213,192,237,141,166,203,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,160,182,164,165,160,167,188,176],
[157,0,191,176,154,188,176,169,175,179],
[180,149,0,171,167,179,192,185,181,189],
[158,164,169,0,156,163,197,191,157,180],
[176,186,173,184,0,163,194,194,159,178],
[175,152,161,177,177,0,200,173,146,162],
[180,164,148,143,146,140,0,169,145,175],
[173,171,155,149,146,167,171,0,162,171],
[152,165,159,183,181,194,195,178,0,166],
[164,161,151,160,162,178,165,169,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,168,169,158,175,184,147,146,160],
[165,0,161,155,154,161,163,148,155,166],
[172,179,0,150,152,174,165,165,149,155],
[171,185,190,0,176,169,205,162,176,167],
[182,186,188,164,0,173,170,154,152,180],
[165,179,166,171,167,0,184,160,147,153],
[156,177,175,135,170,156,0,171,157,145],
[193,192,175,178,186,180,169,0,178,180],
[194,185,191,164,188,193,183,162,0,181],
[180,174,185,173,160,187,195,160,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,163,158,187,169,193,154,158,162],
[191,0,165,163,194,158,186,182,171,160],
[177,175,0,157,198,158,189,164,191,182],
[182,177,183,0,209,162,205,174,189,174],
[153,146,142,131,0,137,185,155,160,152],
[171,182,182,178,203,0,202,161,185,177],
[147,154,151,135,155,138,0,136,142,135],
[186,158,176,166,185,179,204,0,187,155],
[182,169,149,151,180,155,198,153,0,175],
[178,180,158,166,188,163,205,185,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,167,185,161,160,180,175,167,161],
[173,0,176,183,164,175,168,182,168,166],
[173,164,0,175,165,165,176,177,173,176],
[155,157,165,0,147,154,162,176,169,144],
[179,176,175,193,0,163,178,177,179,166],
[180,165,175,186,177,0,182,191,186,164],
[160,172,164,178,162,158,0,175,168,161],
[165,158,163,164,163,149,165,0,175,142],
[173,172,167,171,161,154,172,165,0,160],
[179,174,164,196,174,176,179,198,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,173,162,165,182,161,160,179,201],
[184,0,169,165,175,182,163,160,178,194],
[167,171,0,167,170,164,174,172,174,186],
[178,175,173,0,167,183,174,174,190,198],
[175,165,170,173,0,173,178,178,183,184],
[158,158,176,157,167,0,172,157,163,190],
[179,177,166,166,162,168,0,156,178,200],
[180,180,168,166,162,183,184,0,185,180],
[161,162,166,150,157,177,162,155,0,187],
[139,146,154,142,156,150,140,160,153,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,168,181,169,167,179,157,156,180],
[165,0,174,174,166,167,173,161,165,177],
[172,166,0,164,173,162,174,158,150,184],
[159,166,176,0,183,168,163,149,157,182],
[171,174,167,157,0,171,168,151,162,185],
[173,173,178,172,169,0,157,163,170,179],
[161,167,166,177,172,183,0,156,159,186],
[183,179,182,191,189,177,184,0,160,196],
[184,175,190,183,178,170,181,180,0,185],
[160,163,156,158,155,161,154,144,155,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,182,165,224,134,173,180,224,182],
[170,0,156,194,179,139,185,156,188,142],
[158,184,0,197,225,147,201,173,212,184],
[175,146,143,0,186,122,187,105,177,132],
[116,161,115,154,0,94,119,157,147,142],
[206,201,193,218,246,0,220,168,198,207],
[167,155,139,153,221,120,0,113,185,153],
[160,184,167,235,183,172,227,0,224,156],
[116,152,128,163,193,142,155,116,0,153],
[158,198,156,208,198,133,187,184,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,173,180,147,172,184,188,191,148],
[185,0,156,184,175,192,185,203,203,156],
[167,184,0,205,187,180,165,205,210,173],
[160,156,135,0,162,159,169,180,193,171],
[193,165,153,178,0,191,176,180,187,148],
[168,148,160,181,149,0,176,178,158,135],
[156,155,175,171,164,164,0,176,193,170],
[152,137,135,160,160,162,164,0,198,131],
[149,137,130,147,153,182,147,142,0,129],
[192,184,167,169,192,205,170,209,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,149,176,144,163,166,159,138,156],
[173,0,165,152,155,166,164,180,135,149],
[191,175,0,168,185,177,182,198,172,183],
[164,188,172,0,162,160,182,183,168,161],
[196,185,155,178,0,185,186,196,172,175],
[177,174,163,180,155,0,182,182,171,154],
[174,176,158,158,154,158,0,181,144,167],
[181,160,142,157,144,158,159,0,141,144],
[202,205,168,172,168,169,196,199,0,193],
[184,191,157,179,165,186,173,196,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,175,178,168,156,153,168,176,168],
[179,0,182,185,183,183,170,172,186,171],
[165,158,0,181,167,158,165,171,190,170],
[162,155,159,0,160,155,142,161,161,165],
[172,157,173,180,0,176,158,189,181,173],
[184,157,182,185,164,0,172,186,188,161],
[187,170,175,198,182,168,0,181,169,172],
[172,168,169,179,151,154,159,0,178,168],
[164,154,150,179,159,152,171,162,0,159],
[172,169,170,175,167,179,168,172,181,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,196,196,177,194,164,166,169,181,167],
[144,0,184,180,167,145,155,150,152,160],
[144,156,0,164,155,151,154,152,149,154],
[163,160,176,0,168,137,131,155,149,137],
[146,173,185,172,0,166,150,185,159,148],
[176,195,189,203,174,0,170,187,193,180],
[174,185,186,209,190,170,0,178,179,167],
[171,190,188,185,155,153,162,0,192,166],
[159,188,191,191,181,147,161,148,0,165],
[173,180,186,203,192,160,173,174,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,183,156,149,149,170,171,182,150],
[176,0,183,183,171,189,179,208,176,164],
[157,157,0,174,154,169,152,191,173,154],
[184,157,166,0,180,160,164,175,178,152],
[191,169,186,160,0,185,181,193,189,173],
[191,151,171,180,155,0,176,180,186,170],
[170,161,188,176,159,164,0,184,187,157],
[169,132,149,165,147,160,156,0,176,159],
[158,164,167,162,151,154,153,164,0,162],
[190,176,186,188,167,170,183,181,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,151,143,154,154,150,153,154,145],
[189,0,182,175,179,167,168,181,178,166],
[189,158,0,165,151,151,160,169,158,159],
[197,165,175,0,171,164,172,175,172,158],
[186,161,189,169,0,172,155,169,177,167],
[186,173,189,176,168,0,180,175,170,173],
[190,172,180,168,185,160,0,188,184,165],
[187,159,171,165,171,165,152,0,170,162],
[186,162,182,168,163,170,156,170,0,157],
[195,174,181,182,173,167,175,178,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,167,127,131,152,144,154,132,160],
[196,0,199,178,176,161,172,207,157,177],
[173,141,0,151,150,142,144,167,143,162],
[213,162,189,0,159,153,163,192,164,164],
[209,164,190,181,0,175,177,206,168,181],
[188,179,198,187,165,0,146,181,152,180],
[196,168,196,177,163,194,0,190,168,185],
[186,133,173,148,134,159,150,0,125,145],
[208,183,197,176,172,188,172,215,0,170],
[180,163,178,176,159,160,155,195,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,157,179,179,158,171,159,171,184],
[169,0,155,162,160,166,178,158,176,190],
[183,185,0,179,183,166,197,157,173,179],
[161,178,161,0,179,179,183,168,178,191],
[161,180,157,161,0,166,176,161,173,174],
[182,174,174,161,174,0,183,172,181,183],
[169,162,143,157,164,157,0,151,171,183],
[181,182,183,172,179,168,189,0,193,194],
[169,164,167,162,167,159,169,147,0,175],
[156,150,161,149,166,157,157,146,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,157,156,177,173,163,170,165,162],
[183,0,173,174,165,168,166,162,162,160],
[183,167,0,166,173,159,161,153,174,166],
[184,166,174,0,177,179,186,179,184,172],
[163,175,167,163,0,179,163,157,166,160],
[167,172,181,161,161,0,162,151,162,169],
[177,174,179,154,177,178,0,170,171,166],
[170,178,187,161,183,189,170,0,159,167],
[175,178,166,156,174,178,169,181,0,171],
[178,180,174,168,180,171,174,173,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,155,156,167,175,174,177,184,172],
[185,0,174,168,175,182,186,183,195,196],
[185,166,0,157,170,170,171,170,178,176],
[184,172,183,0,171,176,181,160,187,186],
[173,165,170,169,0,177,169,175,186,185],
[165,158,170,164,163,0,165,171,184,166],
[166,154,169,159,171,175,0,177,183,172],
[163,157,170,180,165,169,163,0,182,173],
[156,145,162,153,154,156,157,158,0,164],
[168,144,164,154,155,174,168,167,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,157,161,180,167,163,143,182,172],
[186,0,155,185,183,166,165,164,169,162],
[183,185,0,180,189,174,171,166,181,163],
[179,155,160,0,183,158,158,163,192,164],
[160,157,151,157,0,151,152,157,155,161],
[173,174,166,182,189,0,164,164,194,199],
[177,175,169,182,188,176,0,168,175,188],
[197,176,174,177,183,176,172,0,176,165],
[158,171,159,148,185,146,165,164,0,153],
[168,178,177,176,179,141,152,175,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,158,158,171,162,150,157,185,154],
[196,0,169,172,177,173,179,170,188,171],
[182,171,0,184,185,167,168,164,188,157],
[182,168,156,0,170,161,170,166,200,153],
[169,163,155,170,0,169,162,154,176,159],
[178,167,173,179,171,0,162,164,191,166],
[190,161,172,170,178,178,0,153,187,170],
[183,170,176,174,186,176,187,0,198,170],
[155,152,152,140,164,149,153,142,0,144],
[186,169,183,187,181,174,170,170,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,167,173,161,159,159,185,173,182,164],
[173,0,173,168,159,176,172,186,169,163],
[167,167,0,157,174,151,165,182,165,152],
[179,172,183,0,177,176,172,178,177,155],
[181,181,166,163,0,163,178,174,178,170],
[181,164,189,164,177,0,183,175,189,178],
[155,168,175,168,162,157,0,176,159,157],
[167,154,158,162,166,165,164,0,172,154],
[158,171,175,163,162,151,181,168,0,162],
[176,177,188,185,170,162,183,186,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,168,164,162,163,167,165,169,161],
[164,0,165,157,158,143,150,164,165,153],
[172,175,0,169,165,157,157,173,172,173],
[176,183,171,0,174,163,169,184,168,163],
[178,182,175,166,0,176,171,168,172,186],
[177,197,183,177,164,0,168,183,185,182],
[173,190,183,171,169,172,0,185,177,170],
[175,176,167,156,172,157,155,0,169,179],
[171,175,168,172,168,155,163,171,0,153],
[179,187,167,177,154,158,170,161,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,169,185,175,164,178,176,173,170],
[186,0,170,196,190,152,184,199,178,178],
[171,170,0,193,189,178,193,190,193,177],
[155,144,147,0,167,157,185,162,158,139],
[165,150,151,173,0,157,168,167,172,154],
[176,188,162,183,183,0,178,183,184,163],
[162,156,147,155,172,162,0,162,186,152],
[164,141,150,178,173,157,178,0,169,153],
[167,162,147,182,168,156,154,171,0,142],
[170,162,163,201,186,177,188,187,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,164,155,145,170,161,161,170,152],
[189,0,171,162,158,178,190,174,182,170],
[176,169,0,185,174,161,206,170,182,182],
[185,178,155,0,186,200,204,166,181,202],
[195,182,166,154,0,162,207,189,188,176],
[170,162,179,140,178,0,188,159,163,171],
[179,150,134,136,133,152,0,166,150,167],
[179,166,170,174,151,181,174,0,161,168],
[170,158,158,159,152,177,190,179,0,169],
[188,170,158,138,164,169,173,172,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,175,169,178,194,194,189,190,182],
[156,0,146,143,153,152,178,145,168,164],
[165,194,0,160,160,162,199,184,179,185],
[171,197,180,0,186,169,178,175,191,196],
[162,187,180,154,0,175,182,182,191,186],
[146,188,178,171,165,0,179,185,181,179],
[146,162,141,162,158,161,0,167,173,171],
[151,195,156,165,158,155,173,0,179,166],
[150,172,161,149,149,159,167,161,0,171],
[158,176,155,144,154,161,169,174,169,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,162,159,167,151,163,153,163,173],
[167,0,142,165,149,158,172,168,169,170],
[178,198,0,162,165,164,179,163,170,174],
[181,175,178,0,176,183,183,174,185,170],
[173,191,175,164,0,150,158,157,148,156],
[189,182,176,157,190,0,159,174,146,183],
[177,168,161,157,182,181,0,177,179,167],
[187,172,177,166,183,166,163,0,156,184],
[177,171,170,155,192,194,161,184,0,178],
[167,170,166,170,184,157,173,156,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,161,190,216,161,106,148,162,120],
[218,0,200,173,203,216,176,134,145,133],
[179,140,0,135,189,176,111,134,137,121],
[150,167,205,0,189,178,123,152,152,135],
[124,137,151,151,0,150,111,124,151,108],
[179,124,164,162,190,0,181,124,138,121],
[234,164,229,217,229,159,0,160,191,188],
[192,206,206,188,216,216,180,0,190,147],
[178,195,203,188,189,202,149,150,0,94],
[220,207,219,205,232,219,152,193,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,196,202,197,169,180,181,162,197],
[118,0,164,160,150,140,167,166,138,151],
[144,176,0,188,177,146,196,153,140,162],
[138,180,152,0,163,141,194,155,165,165],
[143,190,163,177,0,144,190,179,145,173],
[171,200,194,199,196,0,215,177,140,194],
[160,173,144,146,150,125,0,141,122,136],
[159,174,187,185,161,163,199,0,140,160],
[178,202,200,175,195,200,218,200,0,168],
[143,189,178,175,167,146,204,180,172,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,166,186,166,150,164,158,168,169,163],
[174,0,166,163,145,153,139,180,166,168],
[154,174,0,153,146,163,153,173,156,152],
[174,177,187,0,156,169,156,179,196,163],
[190,195,194,184,0,155,161,192,191,175],
[176,187,177,171,185,0,184,187,161,162],
[182,201,187,184,179,156,0,207,189,167],
[172,160,167,161,148,153,133,0,149,163],
[171,174,184,144,149,179,151,191,0,153],
[177,172,188,177,165,178,173,177,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,153,166,171,172,157,161,163,169],
[164,0,153,165,160,169,158,160,173,173],
[187,187,0,169,185,177,166,180,168,178],
[174,175,171,0,166,173,171,176,167,168],
[169,180,155,174,0,180,158,158,167,163],
[168,171,163,167,160,0,160,162,176,175],
[183,182,174,169,182,180,0,177,169,178],
[179,180,160,164,182,178,163,0,168,172],
[177,167,172,173,173,164,171,172,0,173],
[171,167,162,172,177,165,162,168,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,148,166,156,179,156,157,166,159],
[175,0,167,161,169,177,161,176,161,176],
[192,173,0,191,182,180,167,189,178,186],
[174,179,149,0,174,180,167,154,150,185],
[184,171,158,166,0,157,169,173,182,200],
[161,163,160,160,183,0,177,163,168,174],
[184,179,173,173,171,163,0,164,168,194],
[183,164,151,186,167,177,176,0,167,209],
[174,179,162,190,158,172,172,173,0,174],
[181,164,154,155,140,166,146,131,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,192,189,194,184,179,152,158,182],
[161,0,169,133,178,166,158,141,147,132],
[148,171,0,164,168,157,170,159,160,148],
[151,207,176,0,199,166,180,174,189,163],
[146,162,172,141,0,144,150,149,157,156],
[156,174,183,174,196,0,177,155,153,152],
[161,182,170,160,190,163,0,178,173,162],
[188,199,181,166,191,185,162,0,137,160],
[182,193,180,151,183,187,167,203,0,141],
[158,208,192,177,184,188,178,180,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,167,149,149,175,168,159,144,160],
[186,0,190,145,192,178,182,182,168,181],
[173,150,0,151,151,169,163,162,156,161],
[191,195,189,0,184,199,177,179,169,185],
[191,148,189,156,0,193,180,177,171,190],
[165,162,171,141,147,0,159,182,154,164],
[172,158,177,163,160,181,0,174,153,176],
[181,158,178,161,163,158,166,0,148,192],
[196,172,184,171,169,186,187,192,0,200],
[180,159,179,155,150,176,164,148,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,187,246,218,186,247,217,188,156],
[184,0,157,218,185,153,186,187,190,156],
[153,183,0,216,120,124,216,127,153,153],
[94,122,124,0,185,62,156,94,156,32],
[122,155,220,155,0,126,156,157,157,93],
[154,187,216,278,214,0,214,188,219,154],
[93,154,124,184,184,126,0,125,218,155],
[123,153,213,246,183,152,215,0,185,185],
[152,150,187,184,183,121,122,155,0,119],
[184,184,187,308,247,186,185,155,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,171,164,171,163,163,162,173,165],
[162,0,146,159,142,154,146,157,165,152],
[169,194,0,183,177,172,174,174,187,174],
[176,181,157,0,169,168,154,173,181,156],
[169,198,163,171,0,152,169,160,165,155],
[177,186,168,172,188,0,168,172,182,165],
[177,194,166,186,171,172,0,177,183,158],
[178,183,166,167,180,168,163,0,175,168],
[167,175,153,159,175,158,157,165,0,149],
[175,188,166,184,185,175,182,172,191,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,176,186,172,166,188,153,186,178],
[158,0,192,171,171,162,177,175,184,165],
[164,148,0,166,161,135,145,151,162,161],
[154,169,174,0,168,156,163,152,164,145],
[168,169,179,172,0,178,177,168,188,170],
[174,178,205,184,162,0,186,171,193,176],
[152,163,195,177,163,154,0,155,173,160],
[187,165,189,188,172,169,185,0,199,188],
[154,156,178,176,152,147,167,141,0,176],
[162,175,179,195,170,164,180,152,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,157,174,170,161,146,160,177,170],
[172,0,179,169,187,170,176,190,175,198],
[183,161,0,163,180,168,156,174,188,172],
[166,171,177,0,190,182,166,166,190,175],
[170,153,160,150,0,173,158,144,163,167],
[179,170,172,158,167,0,168,164,178,180],
[194,164,184,174,182,172,0,169,176,176],
[180,150,166,174,196,176,171,0,171,174],
[163,165,152,150,177,162,164,169,0,178],
[170,142,168,165,173,160,164,166,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,131,199,158,186,183,195,140,189],
[197,0,148,218,159,167,174,203,188,179],
[209,192,0,207,169,184,217,185,202,209],
[141,122,133,0,147,153,150,145,152,142],
[182,181,171,193,0,165,215,176,174,213],
[154,173,156,187,175,0,192,200,179,219],
[157,166,123,190,125,148,0,188,172,177],
[145,137,155,195,164,140,152,0,160,148],
[200,152,138,188,166,161,168,180,0,201],
[151,161,131,198,127,121,163,192,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,175,155,164,161,171,166,159,166,169],
[165,0,171,170,170,182,173,167,168,167],
[185,169,0,181,163,162,170,160,173,167],
[176,170,159,0,172,174,156,166,171,169],
[179,170,177,168,0,176,164,158,175,161],
[169,158,178,166,164,0,171,158,164,169],
[174,167,170,184,176,169,0,174,181,170],
[181,173,180,174,182,182,166,0,177,166],
[174,172,167,169,165,176,159,163,0,166],
[171,173,173,171,179,171,170,174,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,164,171,164,183,177,191,187,180],
[166,0,160,187,162,187,178,173,186,178],
[176,180,0,181,164,174,179,177,189,174],
[169,153,159,0,167,173,164,168,171,145],
[176,178,176,173,0,183,168,179,191,169],
[157,153,166,167,157,0,166,158,160,156],
[163,162,161,176,172,174,0,170,183,184],
[149,167,163,172,161,182,170,0,179,164],
[153,154,151,169,149,180,157,161,0,155],
[160,162,166,195,171,184,156,176,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,179,157,154,151,157,174,158,172],
[188,0,189,172,158,154,174,162,159,168],
[161,151,0,162,155,162,157,164,165,159],
[183,168,178,0,161,157,170,173,169,181],
[186,182,185,179,0,165,177,175,173,170],
[189,186,178,183,175,0,171,164,176,184],
[183,166,183,170,163,169,0,177,176,174],
[166,178,176,167,165,176,163,0,163,169],
[182,181,175,171,167,164,164,177,0,160],
[168,172,181,159,170,156,166,171,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,171,170,209,180,170,183,172,161],
[175,0,162,183,192,196,177,171,181,180],
[169,178,0,182,216,177,171,186,200,182],
[170,157,158,0,191,161,158,164,174,161],
[131,148,124,149,0,161,144,140,152,126],
[160,144,163,179,179,0,170,165,166,163],
[170,163,169,182,196,170,0,181,180,175],
[157,169,154,176,200,175,159,0,176,168],
[168,159,140,166,188,174,160,164,0,155],
[179,160,158,179,214,177,165,172,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,166,161,166,163,145,149,161,145],
[182,0,185,172,185,171,160,172,173,175],
[174,155,0,153,176,154,162,154,164,161],
[179,168,187,0,171,160,169,188,178,171],
[174,155,164,169,0,159,164,176,158,168],
[177,169,186,180,181,0,168,174,185,185],
[195,180,178,171,176,172,0,171,166,154],
[191,168,186,152,164,166,169,0,168,176],
[179,167,176,162,182,155,174,172,0,163],
[195,165,179,169,172,155,186,164,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,146,180,162,165,161,172,188,197],
[131,0,151,151,151,138,148,149,162,167],
[194,189,0,183,182,169,197,183,178,197],
[160,189,157,0,150,155,164,167,178,176],
[178,189,158,190,0,166,181,169,186,197],
[175,202,171,185,174,0,188,165,195,184],
[179,192,143,176,159,152,0,170,161,174],
[168,191,157,173,171,175,170,0,179,179],
[152,178,162,162,154,145,179,161,0,182],
[143,173,143,164,143,156,166,161,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,190,166,173,176,176,188,166,188,176],
[150,0,173,146,154,162,173,143,170,176],
[174,167,0,160,161,149,169,169,164,187],
[167,194,180,0,185,179,173,165,184,174],
[164,186,179,155,0,171,190,187,172,181],
[164,178,191,161,169,0,177,159,187,183],
[152,167,171,167,150,163,0,177,174,161],
[174,197,171,175,153,181,163,0,169,178],
[152,170,176,156,168,153,166,171,0,158],
[164,164,153,166,159,157,179,162,182,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,169,175,172,178,200,160,177,170],
[178,0,165,164,176,176,180,160,160,178],
[171,175,0,170,170,176,184,152,155,169],
[165,176,170,0,171,169,173,176,171,175],
[168,164,170,169,0,158,185,163,168,159],
[162,164,164,171,182,0,181,167,155,168],
[140,160,156,167,155,159,0,141,149,165],
[180,180,188,164,177,173,199,0,167,182],
[163,180,185,169,172,185,191,173,0,175],
[170,162,171,165,181,172,175,158,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,176,179,161,181,194,168,177,188],
[142,0,147,134,144,157,171,153,157,160],
[164,193,0,165,170,180,185,190,174,187],
[161,206,175,0,186,189,186,190,167,195],
[179,196,170,154,0,173,191,195,164,180],
[159,183,160,151,167,0,167,171,159,177],
[146,169,155,154,149,173,0,159,164,173],
[172,187,150,150,145,169,181,0,169,185],
[163,183,166,173,176,181,176,171,0,195],
[152,180,153,145,160,163,167,155,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,196,176,165,179,194,162,193,166],
[163,0,172,178,187,157,172,171,192,165],
[144,168,0,174,172,147,178,164,171,159],
[164,162,166,0,165,161,163,169,160,144],
[175,153,168,175,0,148,168,184,168,155],
[161,183,193,179,192,0,184,195,158,162],
[146,168,162,177,172,156,0,158,188,146],
[178,169,176,171,156,145,182,0,182,185],
[147,148,169,180,172,182,152,158,0,161],
[174,175,181,196,185,178,194,155,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,161,169,171,168,139,174,128,151],
[181,0,195,177,186,187,156,182,174,164],
[179,145,0,146,187,169,190,185,138,151],
[171,163,194,0,183,164,164,175,146,165],
[169,154,153,157,0,164,168,173,149,160],
[172,153,171,176,176,0,176,166,155,154],
[201,184,150,176,172,164,0,177,147,151],
[166,158,155,165,167,174,163,0,160,144],
[212,166,202,194,191,185,193,180,0,180],
[189,176,189,175,180,186,189,196,160,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,158,172,178,187,165,184,165,176],
[178,0,173,177,176,181,164,188,167,190],
[182,167,0,178,174,190,171,191,177,196],
[168,163,162,0,156,182,168,189,152,160],
[162,164,166,184,0,180,159,172,156,164],
[153,159,150,158,160,0,145,160,160,174],
[175,176,169,172,181,195,0,182,160,174],
[156,152,149,151,168,180,158,0,145,165],
[175,173,163,188,184,180,180,195,0,175],
[164,150,144,180,176,166,166,175,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,174,165,206,173,183,172,182,148,170],
[166,0,164,176,169,162,150,147,152,144],
[175,176,0,196,186,178,173,166,179,172],
[134,164,144,0,160,154,129,139,145,144],
[167,171,154,180,0,162,155,162,165,169],
[157,178,162,186,178,0,160,161,157,166],
[168,190,167,211,185,180,0,185,176,166],
[158,193,174,201,178,179,155,0,148,163],
[192,188,161,195,175,183,164,192,0,178],
[170,196,168,196,171,174,174,177,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,178,156,180,148,169,175,150,149],
[152,0,197,170,205,170,160,185,169,174],
[162,143,0,152,202,148,135,212,158,176],
[184,170,188,0,201,164,177,211,160,151],
[160,135,138,139,0,141,148,170,126,127],
[192,170,192,176,199,0,178,228,177,180],
[171,180,205,163,192,162,0,203,162,149],
[165,155,128,129,170,112,137,0,120,100],
[190,171,182,180,214,163,178,220,0,175],
[191,166,164,189,213,160,191,240,165,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,156,142,153,135,156,166,159,158],
[191,0,160,162,159,169,159,164,173,164],
[184,180,0,156,180,160,177,168,175,182],
[198,178,184,0,165,174,186,194,173,176],
[187,181,160,175,0,168,180,164,179,176],
[205,171,180,166,172,0,172,172,175,170],
[184,181,163,154,160,168,0,155,169,171],
[174,176,172,146,176,168,185,0,184,171],
[181,167,165,167,161,165,171,156,0,173],
[182,176,158,164,164,170,169,169,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,183,158,173,176,157,178,177,161],
[181,0,176,173,170,192,184,180,191,176],
[157,164,0,180,161,174,174,180,173,168],
[182,167,160,0,166,173,190,176,176,176],
[167,170,179,174,0,185,190,181,200,185],
[164,148,166,167,155,0,164,168,163,164],
[183,156,166,150,150,176,0,160,162,174],
[162,160,160,164,159,172,180,0,174,167],
[163,149,167,164,140,177,178,166,0,151],
[179,164,172,164,155,176,166,173,189,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,146,151,162,142,160,159,170,175],
[184,0,157,162,171,155,176,172,165,160],
[194,183,0,170,177,166,187,167,179,180],
[189,178,170,0,185,188,198,175,173,183],
[178,169,163,155,0,145,176,156,154,166],
[198,185,174,152,195,0,196,186,182,204],
[180,164,153,142,164,144,0,157,172,171],
[181,168,173,165,184,154,183,0,172,176],
[170,175,161,167,186,158,168,168,0,174],
[165,180,160,157,174,136,169,164,166,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,156,147,180,142,147,161,146,158],
[189,0,169,164,198,149,175,172,175,177],
[184,171,0,155,190,171,173,152,158,165],
[193,176,185,0,200,171,175,161,168,192],
[160,142,150,140,0,152,131,137,156,152],
[198,191,169,169,188,0,172,162,169,185],
[193,165,167,165,209,168,0,158,168,184],
[179,168,188,179,203,178,182,0,166,180],
[194,165,182,172,184,171,172,174,0,179],
[182,163,175,148,188,155,156,160,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,175,167,165,170,164,160,169,165],
[169,0,183,162,170,174,173,184,173,173],
[165,157,0,155,161,147,172,168,171,164],
[173,178,185,0,173,165,174,183,175,162],
[175,170,179,167,0,164,182,179,172,163],
[170,166,193,175,176,0,169,166,177,180],
[176,167,168,166,158,171,0,177,170,165],
[180,156,172,157,161,174,163,0,163,145],
[171,167,169,165,168,163,170,177,0,166],
[175,167,176,178,177,160,175,195,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,200,187,158,151,164,172,152,155],
[179,0,182,184,166,155,156,167,168,168],
[140,158,0,181,157,137,174,180,144,172],
[153,156,159,0,159,150,144,150,121,160],
[182,174,183,181,0,167,181,167,165,182],
[189,185,203,190,173,0,193,167,197,215],
[176,184,166,196,159,147,0,172,154,169],
[168,173,160,190,173,173,168,0,160,143],
[188,172,196,219,175,143,186,180,0,202],
[185,172,168,180,158,125,171,197,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,177,193,156,182,179,185,166,179],
[151,0,150,177,161,159,174,160,157,176],
[163,190,0,181,157,173,197,175,173,186],
[147,163,159,0,170,180,158,151,150,178],
[184,179,183,170,0,165,187,183,181,186],
[158,181,167,160,175,0,169,164,159,161],
[161,166,143,182,153,171,0,169,176,167],
[155,180,165,189,157,176,171,0,164,167],
[174,183,167,190,159,181,164,176,0,165],
[161,164,154,162,154,179,173,173,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,197,171,194,131,131,191,107,173,152],
[143,0,189,142,168,168,145,83,187,150],
[169,151,0,107,154,86,130,130,127,130],
[146,198,233,0,149,171,129,86,192,174],
[209,172,186,191,0,126,212,170,189,150],
[209,172,254,169,214,0,190,170,191,172],
[149,195,210,211,128,150,0,105,231,171],
[233,257,210,254,170,170,235,0,212,170],
[167,153,213,148,151,149,109,128,0,197],
[188,190,210,166,190,168,169,170,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,176,188,177,191,189,182,174,167,176],
[164,0,179,161,167,175,173,156,166,162],
[152,161,0,161,169,163,161,149,156,159],
[163,179,179,0,181,190,192,185,172,179],
[149,173,171,159,0,182,166,171,161,154],
[151,165,177,150,158,0,168,165,174,169],
[158,167,179,148,174,172,0,163,165,157],
[166,184,191,155,169,175,177,0,155,150],
[173,174,184,168,179,166,175,185,0,166],
[164,178,181,161,186,171,183,190,174,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,172,167,159,164,171,164,175,169],
[180,0,172,160,180,182,184,186,185,171],
[168,168,0,166,156,170,179,167,174,166],
[173,180,174,0,174,173,182,173,188,156],
[181,160,184,166,0,172,174,168,175,162],
[176,158,170,167,168,0,166,148,183,143],
[169,156,161,158,166,174,0,180,178,154],
[176,154,173,167,172,192,160,0,183,169],
[165,155,166,152,165,157,162,157,0,162],
[171,169,174,184,178,197,186,171,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,180,170,187,181,171,173,177,173,191],
[160,0,146,160,166,154,163,160,158,161],
[170,194,0,180,171,170,165,167,175,167],
[153,180,160,0,160,156,160,159,173,165],
[159,174,169,180,0,163,174,167,171,190],
[169,186,170,184,177,0,181,155,165,188],
[167,177,175,180,166,159,0,169,153,177],
[163,180,173,181,173,185,171,0,170,181],
[167,182,165,167,169,175,187,170,0,182],
[149,179,173,175,150,152,163,159,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,152,130,111,145,132,160,172,116],
[185,0,131,162,171,185,185,156,155,126],
[188,209,0,192,143,168,157,125,182,123],
[210,178,148,0,144,180,200,150,169,136],
[229,169,197,196,0,208,185,192,229,171],
[195,155,172,160,132,0,174,156,169,134],
[208,155,183,140,155,166,0,154,173,161],
[180,184,215,190,148,184,186,0,198,165],
[168,185,158,171,111,171,167,142,0,113],
[224,214,217,204,169,206,179,175,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,192,171,159,177,163,164,188,182],
[163,0,189,174,175,170,178,156,183,148],
[148,151,0,130,145,149,156,135,135,144],
[169,166,210,0,170,210,205,152,215,190],
[181,165,195,170,0,176,216,175,181,186],
[163,170,191,130,164,0,173,180,188,171],
[177,162,184,135,124,167,0,148,141,157],
[176,184,205,188,165,160,192,0,193,183],
[152,157,205,125,159,152,199,147,0,163],
[158,192,196,150,154,169,183,157,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,181,192,199,182,154,183,203,176],
[141,0,165,202,201,173,130,165,174,147],
[159,175,0,192,191,190,171,219,198,173],
[148,138,148,0,164,166,165,125,164,149],
[141,139,149,176,0,184,163,151,156,166],
[158,167,150,174,156,0,152,160,143,179],
[186,210,169,175,177,188,0,166,189,167],
[157,175,121,215,189,180,174,0,171,129],
[137,166,142,176,184,197,151,169,0,163],
[164,193,167,191,174,161,173,211,177,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,188,166,168,178,183,191,187,190],
[172,0,216,167,181,174,186,201,183,203],
[152,124,0,156,162,162,169,165,159,170],
[174,173,184,0,182,168,187,182,184,182],
[172,159,178,158,0,162,165,177,160,174],
[162,166,178,172,178,0,162,176,176,186],
[157,154,171,153,175,178,0,173,176,182],
[149,139,175,158,163,164,167,0,168,159],
[153,157,181,156,180,164,164,172,0,189],
[150,137,170,158,166,154,158,181,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,175,169,165,167,156,166,158,164],
[175,0,167,176,166,172,168,176,170,170],
[165,173,0,176,165,171,178,170,174,173],
[171,164,164,0,156,162,160,158,176,169],
[175,174,175,184,0,163,169,171,171,186],
[173,168,169,178,177,0,177,165,174,160],
[184,172,162,180,171,163,0,170,161,170],
[174,164,170,182,169,175,170,0,173,170],
[182,170,166,164,169,166,179,167,0,164],
[176,170,167,171,154,180,170,170,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,168,161,152,177,190,166,154,135],
[175,0,162,159,169,175,177,165,167,154],
[172,178,0,153,166,190,182,178,163,144],
[179,181,187,0,158,189,191,165,181,166],
[188,171,174,182,0,196,168,157,155,154],
[163,165,150,151,144,0,171,140,138,151],
[150,163,158,149,172,169,0,163,167,133],
[174,175,162,175,183,200,177,0,177,168],
[186,173,177,159,185,202,173,163,0,179],
[205,186,196,174,186,189,207,172,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,182,187,173,186,189,177,170,162],
[163,0,193,177,169,190,192,179,155,153],
[158,147,0,164,155,165,171,170,168,162],
[153,163,176,0,178,183,177,168,163,163],
[167,171,185,162,0,177,183,183,163,164],
[154,150,175,157,163,0,166,159,161,148],
[151,148,169,163,157,174,0,158,151,152],
[163,161,170,172,157,181,182,0,169,162],
[170,185,172,177,177,179,189,171,0,173],
[178,187,178,177,176,192,188,178,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,170,177,170,158,160,170,152,163],
[176,0,167,172,160,173,175,180,172,174],
[170,173,0,168,170,169,158,176,160,184],
[163,168,172,0,155,167,162,165,164,160],
[170,180,170,185,0,182,162,186,151,165],
[182,167,171,173,158,0,164,174,169,177],
[180,165,182,178,178,176,0,172,182,200],
[170,160,164,175,154,166,168,0,163,170],
[188,168,180,176,189,171,158,177,0,177],
[177,166,156,180,175,163,140,170,163,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,113,112,225,112,225,0,0,112],
[0,0,113,112,112,112,112,0,0,112],
[227,227,0,227,112,227,112,112,227,227],
[228,228,113,0,225,112,225,113,115,340],
[115,228,228,115,0,227,112,0,115,227],
[228,228,113,228,113,0,113,113,115,340],
[115,228,228,115,228,227,0,0,115,227],
[340,340,228,227,340,227,340,0,115,227],
[340,340,113,225,225,225,225,225,0,340],
[228,228,113,0,113,0,113,113,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,173,184,176,174,173,178,187,181],
[170,0,187,173,196,183,178,176,196,185],
[167,153,0,154,191,173,166,177,198,172],
[156,167,186,0,186,177,176,170,179,190],
[164,144,149,154,0,169,156,153,181,157],
[166,157,167,163,171,0,161,169,180,149],
[167,162,174,164,184,179,0,170,190,174],
[162,164,163,170,187,171,170,0,172,167],
[153,144,142,161,159,160,150,168,0,162],
[159,155,168,150,183,191,166,173,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,168,172,156,188,177,194,174,180],
[195,0,174,164,162,172,194,168,184,173],
[172,166,0,164,153,191,183,163,166,162],
[168,176,176,0,175,181,178,159,176,180],
[184,178,187,165,0,181,202,167,178,173],
[152,168,149,159,159,0,165,162,167,165],
[163,146,157,162,138,175,0,166,161,162],
[146,172,177,181,173,178,174,0,171,184],
[166,156,174,164,162,173,179,169,0,176],
[160,167,178,160,167,175,178,156,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 340, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_10_340.csv", index=False, header=False)